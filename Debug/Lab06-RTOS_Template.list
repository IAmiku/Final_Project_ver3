
Lab06-RTOS_Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000528c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  0800548c  0800548c  0001548c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055d0  080055d0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080055d0  080055d0  000155d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055d8  080055d8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055d8  080055d8  000155d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055dc  080055dc  000155dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080055e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b0c  20000078  08005654  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000404  20004b84  08005654  00024b84  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000271bd  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ded  00000000  00000000  0004725f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001e240  00000000  00000000  0004b04c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001720  00000000  00000000  00069290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017f8  00000000  00000000  0006a9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004c22  00000000  00000000  0006c1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028144  00000000  00000000  00070dca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00132930  00000000  00000000  00098f0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001cb83e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ac0  00000000  00000000  001cb890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         00000024  00000000  00000000  001d0350  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000003f  00000000  00000000  001d0374  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000078 	.word	0x20000078
 800021c:	00000000 	.word	0x00000000
 8000220:	08005474 	.word	0x08005474

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000007c 	.word	0x2000007c
 800023c:	08005474 	.word	0x08005474

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000250:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000254:	f000 b974 	b.w	8000540 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000544:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8000548:	b97b      	cbnz	r3, 800056a <osKernelInitialize+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800054a:	f3ef 8310 	mrs	r3, PRIMASK
 800054e:	b913      	cbnz	r3, 8000556 <osKernelInitialize+0x12>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8000550:	f3ef 8311 	mrs	r3, BASEPRI
 8000554:	b11b      	cbz	r3, 800055e <osKernelInitialize+0x1a>
 8000556:	4b09      	ldr	r3, [pc, #36]	; (800057c <osKernelInitialize+0x38>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	2b02      	cmp	r3, #2
 800055c:	d008      	beq.n	8000570 <osKernelInitialize+0x2c>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800055e:	4b07      	ldr	r3, [pc, #28]	; (800057c <osKernelInitialize+0x38>)
 8000560:	6818      	ldr	r0, [r3, #0]
 8000562:	b940      	cbnz	r0, 8000576 <osKernelInitialize+0x32>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8000564:	2201      	movs	r2, #1
 8000566:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8000568:	4770      	bx	lr
    stat = osErrorISR;
 800056a:	f06f 0005 	mvn.w	r0, #5
 800056e:	4770      	bx	lr
 8000570:	f06f 0005 	mvn.w	r0, #5
 8000574:	4770      	bx	lr
    } else {
      stat = osError;
 8000576:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
  }

  return (stat);
}
 800057a:	4770      	bx	lr
 800057c:	20000094 	.word	0x20000094

08000580 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8000580:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000582:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8000586:	b9a3      	cbnz	r3, 80005b2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000588:	f3ef 8310 	mrs	r3, PRIMASK
 800058c:	b913      	cbnz	r3, 8000594 <osKernelStart+0x14>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800058e:	f3ef 8311 	mrs	r3, BASEPRI
 8000592:	b11b      	cbz	r3, 800059c <osKernelStart+0x1c>
 8000594:	4b0b      	ldr	r3, [pc, #44]	; (80005c4 <osKernelStart+0x44>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2b02      	cmp	r3, #2
 800059a:	d00d      	beq.n	80005b8 <osKernelStart+0x38>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800059c:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <osKernelStart+0x44>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d10c      	bne.n	80005be <osKernelStart+0x3e>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80005a4:	4b07      	ldr	r3, [pc, #28]	; (80005c4 <osKernelStart+0x44>)
 80005a6:	2202      	movs	r2, #2
 80005a8:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80005aa:	f000 fe67 	bl	800127c <vTaskStartScheduler>
      stat = osOK;
 80005ae:	2000      	movs	r0, #0
      stat = osError;
    }
  }

  return (stat);
}
 80005b0:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 80005b2:	f06f 0005 	mvn.w	r0, #5
 80005b6:	e7fb      	b.n	80005b0 <osKernelStart+0x30>
 80005b8:	f06f 0005 	mvn.w	r0, #5
 80005bc:	e7f8      	b.n	80005b0 <osKernelStart+0x30>
      stat = osError;
 80005be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  return (stat);
 80005c2:	e7f5      	b.n	80005b0 <osKernelStart+0x30>
 80005c4:	20000094 	.word	0x20000094

080005c8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80005c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ca:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80005cc:	2400      	movs	r4, #0
 80005ce:	9405      	str	r4, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80005d0:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80005d4:	2c00      	cmp	r4, #0
 80005d6:	d138      	bne.n	800064a <osThreadNew+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80005d8:	f3ef 8310 	mrs	r3, PRIMASK
 80005dc:	b913      	cbnz	r3, 80005e4 <osThreadNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80005de:	f3ef 8311 	mrs	r3, BASEPRI
 80005e2:	b11b      	cbz	r3, 80005ec <osThreadNew+0x24>
 80005e4:	4b2d      	ldr	r3, [pc, #180]	; (800069c <osThreadNew+0xd4>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2b02      	cmp	r3, #2
 80005ea:	d02e      	beq.n	800064a <osThreadNew+0x82>
 80005ec:	b368      	cbz	r0, 800064a <osThreadNew+0x82>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 80005ee:	b322      	cbz	r2, 800063a <osThreadNew+0x72>
      if (attr->name != NULL) {
 80005f0:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 80005f2:	6993      	ldr	r3, [r2, #24]
 80005f4:	b903      	cbnz	r3, 80005f8 <osThreadNew+0x30>
    prio  = (UBaseType_t)osPriorityNormal;
 80005f6:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80005f8:	1e5c      	subs	r4, r3, #1
 80005fa:	2c37      	cmp	r4, #55	; 0x37
 80005fc:	d849      	bhi.n	8000692 <osThreadNew+0xca>
 80005fe:	6854      	ldr	r4, [r2, #4]
 8000600:	f014 0f01 	tst.w	r4, #1
 8000604:	d147      	bne.n	8000696 <osThreadNew+0xce>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8000606:	6956      	ldr	r6, [r2, #20]
 8000608:	b16e      	cbz	r6, 8000626 <osThreadNew+0x5e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800060a:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800060e:	6894      	ldr	r4, [r2, #8]
 8000610:	b12c      	cbz	r4, 800061e <osThreadNew+0x56>
 8000612:	68d7      	ldr	r7, [r2, #12]
 8000614:	2f5b      	cmp	r7, #91	; 0x5b
 8000616:	d902      	bls.n	800061e <osThreadNew+0x56>
 8000618:	6917      	ldr	r7, [r2, #16]
 800061a:	b107      	cbz	r7, 800061e <osThreadNew+0x56>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800061c:	b9c6      	cbnz	r6, 8000650 <osThreadNew+0x88>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800061e:	b12c      	cbz	r4, 800062c <osThreadNew+0x64>
    mem  = -1;
 8000620:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000624:	e00e      	b.n	8000644 <osThreadNew+0x7c>
    stack = configMINIMAL_STACK_SIZE;
 8000626:	f04f 0c80 	mov.w	ip, #128	; 0x80
 800062a:	e7f0      	b.n	800060e <osThreadNew+0x46>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800062c:	68d4      	ldr	r4, [r2, #12]
 800062e:	b98c      	cbnz	r4, 8000654 <osThreadNew+0x8c>
 8000630:	6914      	ldr	r4, [r2, #16]
 8000632:	b194      	cbz	r4, 800065a <osThreadNew+0x92>
    mem  = -1;
 8000634:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000638:	e004      	b.n	8000644 <osThreadNew+0x7c>
    name = NULL;
 800063a:	4615      	mov	r5, r2
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 800063c:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 800063e:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 8000640:	f04f 0c80 	mov.w	ip, #128	; 0x80
    }

    if (mem == 1) {
 8000644:	2c01      	cmp	r4, #1
 8000646:	d00a      	beq.n	800065e <osThreadNew+0x96>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                    (StaticTask_t *)attr->cb_mem);
    }
    else {
      if (mem == 0) {
 8000648:	b1ac      	cbz	r4, 8000676 <osThreadNew+0xae>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800064a:	9805      	ldr	r0, [sp, #20]
}
 800064c:	b007      	add	sp, #28
 800064e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 8000650:	2401      	movs	r4, #1
 8000652:	e7f7      	b.n	8000644 <osThreadNew+0x7c>
    mem  = -1;
 8000654:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000658:	e7f4      	b.n	8000644 <osThreadNew+0x7c>
          mem = 0;
 800065a:	2400      	movs	r4, #0
 800065c:	e7f2      	b.n	8000644 <osThreadNew+0x7c>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800065e:	6914      	ldr	r4, [r2, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8000660:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8000662:	9202      	str	r2, [sp, #8]
 8000664:	9401      	str	r4, [sp, #4]
 8000666:	9300      	str	r3, [sp, #0]
 8000668:	460b      	mov	r3, r1
 800066a:	4662      	mov	r2, ip
 800066c:	4629      	mov	r1, r5
 800066e:	f000 fd8f 	bl	8001190 <xTaskCreateStatic>
 8000672:	9005      	str	r0, [sp, #20]
 8000674:	e7e9      	b.n	800064a <osThreadNew+0x82>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8000676:	aa05      	add	r2, sp, #20
 8000678:	9201      	str	r2, [sp, #4]
 800067a:	9300      	str	r3, [sp, #0]
 800067c:	460b      	mov	r3, r1
 800067e:	fa1f f28c 	uxth.w	r2, ip
 8000682:	4629      	mov	r1, r5
 8000684:	f000 fdc5 	bl	8001212 <xTaskCreate>
 8000688:	2801      	cmp	r0, #1
 800068a:	d0de      	beq.n	800064a <osThreadNew+0x82>
          hTask = NULL;
 800068c:	2300      	movs	r3, #0
 800068e:	9305      	str	r3, [sp, #20]
 8000690:	e7db      	b.n	800064a <osThreadNew+0x82>
        return (NULL);
 8000692:	2000      	movs	r0, #0
 8000694:	e7da      	b.n	800064c <osThreadNew+0x84>
 8000696:	2000      	movs	r0, #0
 8000698:	e7d8      	b.n	800064c <osThreadNew+0x84>
 800069a:	bf00      	nop
 800069c:	20000094 	.word	0x20000094

080006a0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80006a0:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80006a2:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80006a6:	b983      	cbnz	r3, 80006ca <osDelay+0x2a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80006a8:	f3ef 8310 	mrs	r3, PRIMASK
 80006ac:	b913      	cbnz	r3, 80006b4 <osDelay+0x14>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80006ae:	f3ef 8311 	mrs	r3, BASEPRI
 80006b2:	b11b      	cbz	r3, 80006bc <osDelay+0x1c>
 80006b4:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <osDelay+0x38>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b02      	cmp	r3, #2
 80006ba:	d009      	beq.n	80006d0 <osDelay+0x30>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 80006bc:	b908      	cbnz	r0, 80006c2 <osDelay+0x22>
    stat = osOK;
 80006be:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 80006c0:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 80006c2:	f000 ff3f 	bl	8001544 <vTaskDelay>
    stat = osOK;
 80006c6:	2000      	movs	r0, #0
 80006c8:	e7fa      	b.n	80006c0 <osDelay+0x20>
    stat = osErrorISR;
 80006ca:	f06f 0005 	mvn.w	r0, #5
 80006ce:	e7f7      	b.n	80006c0 <osDelay+0x20>
 80006d0:	f06f 0005 	mvn.w	r0, #5
 80006d4:	e7f4      	b.n	80006c0 <osDelay+0x20>
 80006d6:	bf00      	nop
 80006d8:	20000094 	.word	0x20000094

080006dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80006dc:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80006de:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <vApplicationGetIdleTaskMemory+0x18>)
 80006e0:	1d1c      	adds	r4, r3, #4
 80006e2:	6004      	str	r4, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80006e4:	3360      	adds	r3, #96	; 0x60
 80006e6:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80006e8:	2380      	movs	r3, #128	; 0x80
 80006ea:	6013      	str	r3, [r2, #0]
}
 80006ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	20000094 	.word	0x20000094

080006f8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80006f8:	b410      	push	{r4}
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <vApplicationGetTimerTaskMemory+0x1c>)
 80006fc:	f503 7418 	add.w	r4, r3, #608	; 0x260
 8000700:	6004      	str	r4, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8000702:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8000706:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8000708:	f44f 7380 	mov.w	r3, #256	; 0x100
 800070c:	6013      	str	r3, [r2, #0]
}
 800070e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000712:	4770      	bx	lr
 8000714:	20000094 	.word	0x20000094

08000718 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000718:	f100 0308 	add.w	r3, r0, #8
 800071c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800071e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000722:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000724:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000726:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000728:	2300      	movs	r3, #0
 800072a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800072c:	4770      	bx	lr

0800072e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800072e:	2300      	movs	r3, #0
 8000730:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000732:	4770      	bx	lr

08000734 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8000734:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000736:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000738:	689a      	ldr	r2, [r3, #8]
 800073a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800073c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800073e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000740:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8000742:	6803      	ldr	r3, [r0, #0]
 8000744:	3301      	adds	r3, #1
 8000746:	6003      	str	r3, [r0, #0]
}
 8000748:	4770      	bx	lr

0800074a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800074a:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800074c:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800074e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8000752:	d011      	beq.n	8000778 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000754:	f100 0308 	add.w	r3, r0, #8
 8000758:	461c      	mov	r4, r3
 800075a:	685b      	ldr	r3, [r3, #4]
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	42aa      	cmp	r2, r5
 8000760:	d9fa      	bls.n	8000758 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000762:	6863      	ldr	r3, [r4, #4]
 8000764:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000766:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000768:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800076a:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800076c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800076e:	6803      	ldr	r3, [r0, #0]
 8000770:	3301      	adds	r3, #1
 8000772:	6003      	str	r3, [r0, #0]
}
 8000774:	bc30      	pop	{r4, r5}
 8000776:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8000778:	6904      	ldr	r4, [r0, #16]
 800077a:	e7f2      	b.n	8000762 <vListInsert+0x18>

0800077c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800077c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800077e:	6841      	ldr	r1, [r0, #4]
 8000780:	6882      	ldr	r2, [r0, #8]
 8000782:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000784:	6841      	ldr	r1, [r0, #4]
 8000786:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000788:	685a      	ldr	r2, [r3, #4]
 800078a:	4282      	cmp	r2, r0
 800078c:	d006      	beq.n	800079c <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800078e:	2200      	movs	r2, #0
 8000790:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8000792:	681a      	ldr	r2, [r3, #0]
 8000794:	3a01      	subs	r2, #1
 8000796:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000798:	6818      	ldr	r0, [r3, #0]
}
 800079a:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800079c:	6882      	ldr	r2, [r0, #8]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	e7f5      	b.n	800078e <uxListRemove+0x12>

080007a2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80007a2:	b510      	push	{r4, lr}
 80007a4:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80007a6:	f001 fb1d 	bl	8001de4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80007aa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80007ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80007ae:	429a      	cmp	r2, r3
 80007b0:	d004      	beq.n	80007bc <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 80007b2:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 80007b4:	f001 fb3c 	bl	8001e30 <vPortExitCritical>

	return xReturn;
}
 80007b8:	4620      	mov	r0, r4
 80007ba:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 80007bc:	2401      	movs	r4, #1
 80007be:	e7f9      	b.n	80007b4 <prvIsQueueFull+0x12>

080007c0 <prvIsQueueEmpty>:
{
 80007c0:	b510      	push	{r4, lr}
 80007c2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80007c4:	f001 fb0e 	bl	8001de4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80007c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80007ca:	b923      	cbnz	r3, 80007d6 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 80007cc:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 80007ce:	f001 fb2f 	bl	8001e30 <vPortExitCritical>
}
 80007d2:	4620      	mov	r0, r4
 80007d4:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 80007d6:	2400      	movs	r4, #0
 80007d8:	e7f9      	b.n	80007ce <prvIsQueueEmpty+0xe>

080007da <prvCopyDataToQueue>:
{
 80007da:	b570      	push	{r4, r5, r6, lr}
 80007dc:	4604      	mov	r4, r0
 80007de:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80007e0:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80007e2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80007e4:	b95a      	cbnz	r2, 80007fe <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80007e6:	6803      	ldr	r3, [r0, #0]
 80007e8:	b11b      	cbz	r3, 80007f2 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 80007ea:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80007ec:	3601      	adds	r6, #1
 80007ee:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80007f2:	6880      	ldr	r0, [r0, #8]
 80007f4:	f001 f800 	bl	80017f8 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	60a3      	str	r3, [r4, #8]
 80007fc:	e7f6      	b.n	80007ec <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 80007fe:	b96d      	cbnz	r5, 800081c <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000800:	6840      	ldr	r0, [r0, #4]
 8000802:	f004 f9bd 	bl	8004b80 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000806:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000808:	6863      	ldr	r3, [r4, #4]
 800080a:	4413      	add	r3, r2
 800080c:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800080e:	68a2      	ldr	r2, [r4, #8]
 8000810:	4293      	cmp	r3, r2
 8000812:	d319      	bcc.n	8000848 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8000814:	6823      	ldr	r3, [r4, #0]
 8000816:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8000818:	4628      	mov	r0, r5
 800081a:	e7e7      	b.n	80007ec <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800081c:	68c0      	ldr	r0, [r0, #12]
 800081e:	f004 f9af 	bl	8004b80 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000822:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000824:	4251      	negs	r1, r2
 8000826:	68e3      	ldr	r3, [r4, #12]
 8000828:	1a9b      	subs	r3, r3, r2
 800082a:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800082c:	6822      	ldr	r2, [r4, #0]
 800082e:	4293      	cmp	r3, r2
 8000830:	d202      	bcs.n	8000838 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000832:	68a3      	ldr	r3, [r4, #8]
 8000834:	440b      	add	r3, r1
 8000836:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8000838:	2d02      	cmp	r5, #2
 800083a:	d001      	beq.n	8000840 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 800083c:	2000      	movs	r0, #0
 800083e:	e7d5      	b.n	80007ec <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000840:	b126      	cbz	r6, 800084c <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8000842:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8000844:	2000      	movs	r0, #0
 8000846:	e7d1      	b.n	80007ec <prvCopyDataToQueue+0x12>
 8000848:	4628      	mov	r0, r5
 800084a:	e7cf      	b.n	80007ec <prvCopyDataToQueue+0x12>
 800084c:	2000      	movs	r0, #0
 800084e:	e7cd      	b.n	80007ec <prvCopyDataToQueue+0x12>

08000850 <prvCopyDataFromQueue>:
{
 8000850:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000852:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000854:	b16a      	cbz	r2, 8000872 <prvCopyDataFromQueue+0x22>
{
 8000856:	b510      	push	{r4, lr}
 8000858:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800085a:	68d9      	ldr	r1, [r3, #12]
 800085c:	4411      	add	r1, r2
 800085e:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000860:	689c      	ldr	r4, [r3, #8]
 8000862:	42a1      	cmp	r1, r4
 8000864:	d301      	bcc.n	800086a <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000866:	6819      	ldr	r1, [r3, #0]
 8000868:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800086a:	68d9      	ldr	r1, [r3, #12]
 800086c:	f004 f988 	bl	8004b80 <memcpy>
}
 8000870:	bd10      	pop	{r4, pc}
 8000872:	4770      	bx	lr

08000874 <prvUnlockQueue>:
{
 8000874:	b538      	push	{r3, r4, r5, lr}
 8000876:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8000878:	f001 fab4 	bl	8001de4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800087c:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8000880:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000882:	e001      	b.n	8000888 <prvUnlockQueue+0x14>
			--cTxLock;
 8000884:	3c01      	subs	r4, #1
 8000886:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000888:	2c00      	cmp	r4, #0
 800088a:	dd0a      	ble.n	80008a2 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800088c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800088e:	b143      	cbz	r3, 80008a2 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000890:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8000894:	f000 ff02 	bl	800169c <xTaskRemoveFromEventList>
 8000898:	2800      	cmp	r0, #0
 800089a:	d0f3      	beq.n	8000884 <prvUnlockQueue+0x10>
						vTaskMissedYield();
 800089c:	f000 ff94 	bl	80017c8 <vTaskMissedYield>
 80008a0:	e7f0      	b.n	8000884 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 80008a2:	23ff      	movs	r3, #255	; 0xff
 80008a4:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 80008a8:	f001 fac2 	bl	8001e30 <vPortExitCritical>
	taskENTER_CRITICAL();
 80008ac:	f001 fa9a 	bl	8001de4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80008b0:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 80008b4:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80008b6:	e001      	b.n	80008bc <prvUnlockQueue+0x48>
				--cRxLock;
 80008b8:	3c01      	subs	r4, #1
 80008ba:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80008bc:	2c00      	cmp	r4, #0
 80008be:	dd0a      	ble.n	80008d6 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80008c0:	692b      	ldr	r3, [r5, #16]
 80008c2:	b143      	cbz	r3, 80008d6 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80008c4:	f105 0010 	add.w	r0, r5, #16
 80008c8:	f000 fee8 	bl	800169c <xTaskRemoveFromEventList>
 80008cc:	2800      	cmp	r0, #0
 80008ce:	d0f3      	beq.n	80008b8 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 80008d0:	f000 ff7a 	bl	80017c8 <vTaskMissedYield>
 80008d4:	e7f0      	b.n	80008b8 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 80008d6:	23ff      	movs	r3, #255	; 0xff
 80008d8:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 80008dc:	f001 faa8 	bl	8001e30 <vPortExitCritical>
}
 80008e0:	bd38      	pop	{r3, r4, r5, pc}

080008e2 <xQueueGenericReset>:
{
 80008e2:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 80008e4:	b1e0      	cbz	r0, 8000920 <xQueueGenericReset+0x3e>
 80008e6:	460d      	mov	r5, r1
 80008e8:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80008ea:	f001 fa7b 	bl	8001de4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80008ee:	6823      	ldr	r3, [r4, #0]
 80008f0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80008f2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80008f4:	fb01 3002 	mla	r0, r1, r2, r3
 80008f8:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80008fa:	2000      	movs	r0, #0
 80008fc:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80008fe:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000900:	3a01      	subs	r2, #1
 8000902:	fb02 3301 	mla	r3, r2, r1, r3
 8000906:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000908:	23ff      	movs	r3, #255	; 0xff
 800090a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800090e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8000912:	bb0d      	cbnz	r5, 8000958 <xQueueGenericReset+0x76>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000914:	6923      	ldr	r3, [r4, #16]
 8000916:	b973      	cbnz	r3, 8000936 <xQueueGenericReset+0x54>
	taskEXIT_CRITICAL();
 8000918:	f001 fa8a 	bl	8001e30 <vPortExitCritical>
}
 800091c:	2001      	movs	r0, #1
 800091e:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000924:	b672      	cpsid	i
 8000926:	f383 8811 	msr	BASEPRI, r3
 800092a:	f3bf 8f6f 	isb	sy
 800092e:	f3bf 8f4f 	dsb	sy
 8000932:	b662      	cpsie	i
	configASSERT( pxQueue );
 8000934:	e7fe      	b.n	8000934 <xQueueGenericReset+0x52>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000936:	f104 0010 	add.w	r0, r4, #16
 800093a:	f000 feaf 	bl	800169c <xTaskRemoveFromEventList>
 800093e:	2800      	cmp	r0, #0
 8000940:	d0ea      	beq.n	8000918 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8000942:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800094a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800094e:	f3bf 8f4f 	dsb	sy
 8000952:	f3bf 8f6f 	isb	sy
 8000956:	e7df      	b.n	8000918 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000958:	f104 0010 	add.w	r0, r4, #16
 800095c:	f7ff fedc 	bl	8000718 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000960:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8000964:	f7ff fed8 	bl	8000718 <vListInitialise>
 8000968:	e7d6      	b.n	8000918 <xQueueGenericReset+0x36>

0800096a <prvInitialiseNewQueue>:
{
 800096a:	b538      	push	{r3, r4, r5, lr}
 800096c:	461d      	mov	r5, r3
 800096e:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8000970:	460b      	mov	r3, r1
 8000972:	b949      	cbnz	r1, 8000988 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000974:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8000976:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000978:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800097a:	2101      	movs	r1, #1
 800097c:	4620      	mov	r0, r4
 800097e:	f7ff ffb0 	bl	80008e2 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8000982:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 8000986:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000988:	6022      	str	r2, [r4, #0]
 800098a:	e7f4      	b.n	8000976 <prvInitialiseNewQueue+0xc>

0800098c <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800098c:	b950      	cbnz	r0, 80009a4 <xQueueGenericCreateStatic+0x18>
 800098e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000992:	b672      	cpsid	i
 8000994:	f383 8811 	msr	BASEPRI, r3
 8000998:	f3bf 8f6f 	isb	sy
 800099c:	f3bf 8f4f 	dsb	sy
 80009a0:	b662      	cpsie	i
 80009a2:	e7fe      	b.n	80009a2 <xQueueGenericCreateStatic+0x16>
	{
 80009a4:	b510      	push	{r4, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	461c      	mov	r4, r3
		configASSERT( pxStaticQueue != NULL );
 80009aa:	b193      	cbz	r3, 80009d2 <xQueueGenericCreateStatic+0x46>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80009ac:	1e0b      	subs	r3, r1, #0
 80009ae:	bf18      	it	ne
 80009b0:	2301      	movne	r3, #1
 80009b2:	2a00      	cmp	r2, #0
 80009b4:	bf08      	it	eq
 80009b6:	f043 0301 	orreq.w	r3, r3, #1
 80009ba:	b9ab      	cbnz	r3, 80009e8 <xQueueGenericCreateStatic+0x5c>
 80009bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009c0:	b672      	cpsid	i
 80009c2:	f383 8811 	msr	BASEPRI, r3
 80009c6:	f3bf 8f6f 	isb	sy
 80009ca:	f3bf 8f4f 	dsb	sy
 80009ce:	b662      	cpsie	i
 80009d0:	e7fe      	b.n	80009d0 <xQueueGenericCreateStatic+0x44>
 80009d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009d6:	b672      	cpsid	i
 80009d8:	f383 8811 	msr	BASEPRI, r3
 80009dc:	f3bf 8f6f 	isb	sy
 80009e0:	f3bf 8f4f 	dsb	sy
 80009e4:	b662      	cpsie	i
		configASSERT( pxStaticQueue != NULL );
 80009e6:	e7fe      	b.n	80009e6 <xQueueGenericCreateStatic+0x5a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80009e8:	fab1 f381 	clz	r3, r1
 80009ec:	095b      	lsrs	r3, r3, #5
 80009ee:	2a00      	cmp	r2, #0
 80009f0:	bf18      	it	ne
 80009f2:	f043 0301 	orrne.w	r3, r3, #1
 80009f6:	b953      	cbnz	r3, 8000a0e <xQueueGenericCreateStatic+0x82>
 80009f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009fc:	b672      	cpsid	i
 80009fe:	f383 8811 	msr	BASEPRI, r3
 8000a02:	f3bf 8f6f 	isb	sy
 8000a06:	f3bf 8f4f 	dsb	sy
 8000a0a:	b662      	cpsie	i
 8000a0c:	e7fe      	b.n	8000a0c <xQueueGenericCreateStatic+0x80>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8000a0e:	2350      	movs	r3, #80	; 0x50
 8000a10:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8000a12:	9b03      	ldr	r3, [sp, #12]
 8000a14:	2b50      	cmp	r3, #80	; 0x50
 8000a16:	d00a      	beq.n	8000a2e <xQueueGenericCreateStatic+0xa2>
 8000a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a1c:	b672      	cpsid	i
 8000a1e:	f383 8811 	msr	BASEPRI, r3
 8000a22:	f3bf 8f6f 	isb	sy
 8000a26:	f3bf 8f4f 	dsb	sy
 8000a2a:	b662      	cpsie	i
 8000a2c:	e7fe      	b.n	8000a2c <xQueueGenericCreateStatic+0xa0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8000a2e:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8000a30:	2301      	movs	r3, #1
 8000a32:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000a36:	9400      	str	r4, [sp, #0]
 8000a38:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8000a3c:	f7ff ff95 	bl	800096a <prvInitialiseNewQueue>
	}
 8000a40:	4620      	mov	r0, r4
 8000a42:	b004      	add	sp, #16
 8000a44:	bd10      	pop	{r4, pc}

08000a46 <xQueueGenericSend>:
{
 8000a46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a48:	b085      	sub	sp, #20
 8000a4a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8000a4c:	b198      	cbz	r0, 8000a76 <xQueueGenericSend+0x30>
 8000a4e:	460f      	mov	r7, r1
 8000a50:	461d      	mov	r5, r3
 8000a52:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000a54:	b1d1      	cbz	r1, 8000a8c <xQueueGenericSend+0x46>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000a56:	2d02      	cmp	r5, #2
 8000a58:	d126      	bne.n	8000aa8 <xQueueGenericSend+0x62>
 8000a5a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d023      	beq.n	8000aa8 <xQueueGenericSend+0x62>
 8000a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a64:	b672      	cpsid	i
 8000a66:	f383 8811 	msr	BASEPRI, r3
 8000a6a:	f3bf 8f6f 	isb	sy
 8000a6e:	f3bf 8f4f 	dsb	sy
 8000a72:	b662      	cpsie	i
 8000a74:	e7fe      	b.n	8000a74 <xQueueGenericSend+0x2e>
 8000a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a7a:	b672      	cpsid	i
 8000a7c:	f383 8811 	msr	BASEPRI, r3
 8000a80:	f3bf 8f6f 	isb	sy
 8000a84:	f3bf 8f4f 	dsb	sy
 8000a88:	b662      	cpsie	i
	configASSERT( pxQueue );
 8000a8a:	e7fe      	b.n	8000a8a <xQueueGenericSend+0x44>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000a8c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d0e1      	beq.n	8000a56 <xQueueGenericSend+0x10>
 8000a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a96:	b672      	cpsid	i
 8000a98:	f383 8811 	msr	BASEPRI, r3
 8000a9c:	f3bf 8f6f 	isb	sy
 8000aa0:	f3bf 8f4f 	dsb	sy
 8000aa4:	b662      	cpsie	i
 8000aa6:	e7fe      	b.n	8000aa6 <xQueueGenericSend+0x60>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000aa8:	f000 fe96 	bl	80017d8 <xTaskGetSchedulerState>
 8000aac:	4606      	mov	r6, r0
 8000aae:	b968      	cbnz	r0, 8000acc <xQueueGenericSend+0x86>
 8000ab0:	9b01      	ldr	r3, [sp, #4]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d04a      	beq.n	8000b4c <xQueueGenericSend+0x106>
 8000ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000aba:	b672      	cpsid	i
 8000abc:	f383 8811 	msr	BASEPRI, r3
 8000ac0:	f3bf 8f6f 	isb	sy
 8000ac4:	f3bf 8f4f 	dsb	sy
 8000ac8:	b662      	cpsie	i
 8000aca:	e7fe      	b.n	8000aca <xQueueGenericSend+0x84>
 8000acc:	2600      	movs	r6, #0
 8000ace:	e03d      	b.n	8000b4c <xQueueGenericSend+0x106>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000ad0:	462a      	mov	r2, r5
 8000ad2:	4639      	mov	r1, r7
 8000ad4:	4620      	mov	r0, r4
 8000ad6:	f7ff fe80 	bl	80007da <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000ada:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000adc:	b97b      	cbnz	r3, 8000afe <xQueueGenericSend+0xb8>
					else if( xYieldRequired != pdFALSE )
 8000ade:	b148      	cbz	r0, 8000af4 <xQueueGenericSend+0xae>
						queueYIELD_IF_USING_PREEMPTION();
 8000ae0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000ae4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ae8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000aec:	f3bf 8f4f 	dsb	sy
 8000af0:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8000af4:	f001 f99c 	bl	8001e30 <vPortExitCritical>
				return pdPASS;
 8000af8:	2001      	movs	r0, #1
}
 8000afa:	b005      	add	sp, #20
 8000afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000afe:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8000b02:	f000 fdcb 	bl	800169c <xTaskRemoveFromEventList>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	d0f4      	beq.n	8000af4 <xQueueGenericSend+0xae>
							queueYIELD_IF_USING_PREEMPTION();
 8000b0a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b12:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000b16:	f3bf 8f4f 	dsb	sy
 8000b1a:	f3bf 8f6f 	isb	sy
 8000b1e:	e7e9      	b.n	8000af4 <xQueueGenericSend+0xae>
					taskEXIT_CRITICAL();
 8000b20:	f001 f986 	bl	8001e30 <vPortExitCritical>
					return errQUEUE_FULL;
 8000b24:	2000      	movs	r0, #0
 8000b26:	e7e8      	b.n	8000afa <xQueueGenericSend+0xb4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000b28:	a802      	add	r0, sp, #8
 8000b2a:	f000 fdfd 	bl	8001728 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000b2e:	2601      	movs	r6, #1
 8000b30:	e019      	b.n	8000b66 <xQueueGenericSend+0x120>
		prvLockQueue( pxQueue );
 8000b32:	2300      	movs	r3, #0
 8000b34:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8000b38:	e021      	b.n	8000b7e <xQueueGenericSend+0x138>
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000b40:	e023      	b.n	8000b8a <xQueueGenericSend+0x144>
				prvUnlockQueue( pxQueue );
 8000b42:	4620      	mov	r0, r4
 8000b44:	f7ff fe96 	bl	8000874 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000b48:	f000 fc82 	bl	8001450 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8000b4c:	f001 f94a 	bl	8001de4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000b50:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000b52:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d3bb      	bcc.n	8000ad0 <xQueueGenericSend+0x8a>
 8000b58:	2d02      	cmp	r5, #2
 8000b5a:	d0b9      	beq.n	8000ad0 <xQueueGenericSend+0x8a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8000b5c:	9b01      	ldr	r3, [sp, #4]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d0de      	beq.n	8000b20 <xQueueGenericSend+0xda>
				else if( xEntryTimeSet == pdFALSE )
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	d0e0      	beq.n	8000b28 <xQueueGenericSend+0xe2>
		taskEXIT_CRITICAL();
 8000b66:	f001 f963 	bl	8001e30 <vPortExitCritical>
		vTaskSuspendAll();
 8000b6a:	f000 fbd3 	bl	8001314 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000b6e:	f001 f939 	bl	8001de4 <vPortEnterCritical>
 8000b72:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8000b76:	b252      	sxtb	r2, r2
 8000b78:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8000b7c:	d0d9      	beq.n	8000b32 <xQueueGenericSend+0xec>
 8000b7e:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8000b82:	b252      	sxtb	r2, r2
 8000b84:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8000b88:	d0d7      	beq.n	8000b3a <xQueueGenericSend+0xf4>
 8000b8a:	f001 f951 	bl	8001e30 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000b8e:	a901      	add	r1, sp, #4
 8000b90:	a802      	add	r0, sp, #8
 8000b92:	f000 fdd3 	bl	800173c <xTaskCheckForTimeOut>
 8000b96:	b9d8      	cbnz	r0, 8000bd0 <xQueueGenericSend+0x18a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000b98:	4620      	mov	r0, r4
 8000b9a:	f7ff fe02 	bl	80007a2 <prvIsQueueFull>
 8000b9e:	2800      	cmp	r0, #0
 8000ba0:	d0cf      	beq.n	8000b42 <xQueueGenericSend+0xfc>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000ba2:	9901      	ldr	r1, [sp, #4]
 8000ba4:	f104 0010 	add.w	r0, r4, #16
 8000ba8:	f000 fd3c 	bl	8001624 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8000bac:	4620      	mov	r0, r4
 8000bae:	f7ff fe61 	bl	8000874 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8000bb2:	f000 fc4d 	bl	8001450 <xTaskResumeAll>
 8000bb6:	2800      	cmp	r0, #0
 8000bb8:	d1c8      	bne.n	8000b4c <xQueueGenericSend+0x106>
					portYIELD_WITHIN_API();
 8000bba:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000bc2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000bc6:	f3bf 8f4f 	dsb	sy
 8000bca:	f3bf 8f6f 	isb	sy
 8000bce:	e7bd      	b.n	8000b4c <xQueueGenericSend+0x106>
			prvUnlockQueue( pxQueue );
 8000bd0:	4620      	mov	r0, r4
 8000bd2:	f7ff fe4f 	bl	8000874 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000bd6:	f000 fc3b 	bl	8001450 <xTaskResumeAll>
			return errQUEUE_FULL;
 8000bda:	2000      	movs	r0, #0
 8000bdc:	e78d      	b.n	8000afa <xQueueGenericSend+0xb4>

08000bde <xQueueGenericSendFromISR>:
{
 8000bde:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8000be2:	b1a0      	cbz	r0, 8000c0e <xQueueGenericSendFromISR+0x30>
 8000be4:	460f      	mov	r7, r1
 8000be6:	4616      	mov	r6, r2
 8000be8:	461c      	mov	r4, r3
 8000bea:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000bec:	b1d1      	cbz	r1, 8000c24 <xQueueGenericSendFromISR+0x46>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000bee:	2c02      	cmp	r4, #2
 8000bf0:	d126      	bne.n	8000c40 <xQueueGenericSendFromISR+0x62>
 8000bf2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d023      	beq.n	8000c40 <xQueueGenericSendFromISR+0x62>
 8000bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bfc:	b672      	cpsid	i
 8000bfe:	f383 8811 	msr	BASEPRI, r3
 8000c02:	f3bf 8f6f 	isb	sy
 8000c06:	f3bf 8f4f 	dsb	sy
 8000c0a:	b662      	cpsie	i
 8000c0c:	e7fe      	b.n	8000c0c <xQueueGenericSendFromISR+0x2e>
 8000c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c12:	b672      	cpsid	i
 8000c14:	f383 8811 	msr	BASEPRI, r3
 8000c18:	f3bf 8f6f 	isb	sy
 8000c1c:	f3bf 8f4f 	dsb	sy
 8000c20:	b662      	cpsie	i
	configASSERT( pxQueue );
 8000c22:	e7fe      	b.n	8000c22 <xQueueGenericSendFromISR+0x44>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000c24:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d0e1      	beq.n	8000bee <xQueueGenericSendFromISR+0x10>
 8000c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c2e:	b672      	cpsid	i
 8000c30:	f383 8811 	msr	BASEPRI, r3
 8000c34:	f3bf 8f6f 	isb	sy
 8000c38:	f3bf 8f4f 	dsb	sy
 8000c3c:	b662      	cpsie	i
 8000c3e:	e7fe      	b.n	8000c3e <xQueueGenericSendFromISR+0x60>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000c40:	f001 f9d4 	bl	8001fec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8000c44:	f3ef 8911 	mrs	r9, BASEPRI
 8000c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c4c:	b672      	cpsid	i
 8000c4e:	f383 8811 	msr	BASEPRI, r3
 8000c52:	f3bf 8f6f 	isb	sy
 8000c56:	f3bf 8f4f 	dsb	sy
 8000c5a:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000c5c:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000c5e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d306      	bcc.n	8000c72 <xQueueGenericSendFromISR+0x94>
 8000c64:	2c02      	cmp	r4, #2
 8000c66:	d004      	beq.n	8000c72 <xQueueGenericSendFromISR+0x94>
			xReturn = errQUEUE_FULL;
 8000c68:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000c6a:	f389 8811 	msr	BASEPRI, r9
}
 8000c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8000c72:	f895 8045 	ldrb.w	r8, [r5, #69]	; 0x45
 8000c76:	fa4f f888 	sxtb.w	r8, r8
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000c7a:	4622      	mov	r2, r4
 8000c7c:	4639      	mov	r1, r7
 8000c7e:	4628      	mov	r0, r5
 8000c80:	f7ff fdab 	bl	80007da <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8000c84:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8000c88:	d006      	beq.n	8000c98 <xQueueGenericSendFromISR+0xba>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000c8a:	f108 0301 	add.w	r3, r8, #1
 8000c8e:	b25b      	sxtb	r3, r3
 8000c90:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 8000c94:	2001      	movs	r0, #1
 8000c96:	e7e8      	b.n	8000c6a <xQueueGenericSendFromISR+0x8c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000c98:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000c9a:	b90b      	cbnz	r3, 8000ca0 <xQueueGenericSendFromISR+0xc2>
			xReturn = pdPASS;
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	e7e4      	b.n	8000c6a <xQueueGenericSendFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000ca0:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8000ca4:	f000 fcfa 	bl	800169c <xTaskRemoveFromEventList>
 8000ca8:	b118      	cbz	r0, 8000cb2 <xQueueGenericSendFromISR+0xd4>
							if( pxHigherPriorityTaskWoken != NULL )
 8000caa:	b126      	cbz	r6, 8000cb6 <xQueueGenericSendFromISR+0xd8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000cac:	2001      	movs	r0, #1
 8000cae:	6030      	str	r0, [r6, #0]
 8000cb0:	e7db      	b.n	8000c6a <xQueueGenericSendFromISR+0x8c>
			xReturn = pdPASS;
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	e7d9      	b.n	8000c6a <xQueueGenericSendFromISR+0x8c>
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	e7d7      	b.n	8000c6a <xQueueGenericSendFromISR+0x8c>

08000cba <xQueueReceive>:
{
 8000cba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cbc:	b085      	sub	sp, #20
 8000cbe:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8000cc0:	b1a0      	cbz	r0, 8000cec <xQueueReceive+0x32>
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000cc6:	b1e1      	cbz	r1, 8000d02 <xQueueReceive+0x48>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000cc8:	f000 fd86 	bl	80017d8 <xTaskGetSchedulerState>
 8000ccc:	4606      	mov	r6, r0
 8000cce:	bb30      	cbnz	r0, 8000d1e <xQueueReceive+0x64>
 8000cd0:	9b01      	ldr	r3, [sp, #4]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d064      	beq.n	8000da0 <xQueueReceive+0xe6>
	__asm volatile
 8000cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cda:	b672      	cpsid	i
 8000cdc:	f383 8811 	msr	BASEPRI, r3
 8000ce0:	f3bf 8f6f 	isb	sy
 8000ce4:	f3bf 8f4f 	dsb	sy
 8000ce8:	b662      	cpsie	i
 8000cea:	e7fe      	b.n	8000cea <xQueueReceive+0x30>
 8000cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cf0:	b672      	cpsid	i
 8000cf2:	f383 8811 	msr	BASEPRI, r3
 8000cf6:	f3bf 8f6f 	isb	sy
 8000cfa:	f3bf 8f4f 	dsb	sy
 8000cfe:	b662      	cpsie	i
	configASSERT( ( pxQueue ) );
 8000d00:	e7fe      	b.n	8000d00 <xQueueReceive+0x46>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000d02:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d0df      	beq.n	8000cc8 <xQueueReceive+0xe>
 8000d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d0c:	b672      	cpsid	i
 8000d0e:	f383 8811 	msr	BASEPRI, r3
 8000d12:	f3bf 8f6f 	isb	sy
 8000d16:	f3bf 8f4f 	dsb	sy
 8000d1a:	b662      	cpsie	i
 8000d1c:	e7fe      	b.n	8000d1c <xQueueReceive+0x62>
 8000d1e:	2600      	movs	r6, #0
 8000d20:	e03e      	b.n	8000da0 <xQueueReceive+0xe6>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000d22:	4639      	mov	r1, r7
 8000d24:	4620      	mov	r0, r4
 8000d26:	f7ff fd93 	bl	8000850 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000d2a:	3d01      	subs	r5, #1
 8000d2c:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000d2e:	6923      	ldr	r3, [r4, #16]
 8000d30:	b923      	cbnz	r3, 8000d3c <xQueueReceive+0x82>
				taskEXIT_CRITICAL();
 8000d32:	f001 f87d 	bl	8001e30 <vPortExitCritical>
				return pdPASS;
 8000d36:	2001      	movs	r0, #1
}
 8000d38:	b005      	add	sp, #20
 8000d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000d3c:	f104 0010 	add.w	r0, r4, #16
 8000d40:	f000 fcac 	bl	800169c <xTaskRemoveFromEventList>
 8000d44:	2800      	cmp	r0, #0
 8000d46:	d0f4      	beq.n	8000d32 <xQueueReceive+0x78>
						queueYIELD_IF_USING_PREEMPTION();
 8000d48:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000d4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d50:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000d54:	f3bf 8f4f 	dsb	sy
 8000d58:	f3bf 8f6f 	isb	sy
 8000d5c:	e7e9      	b.n	8000d32 <xQueueReceive+0x78>
					taskEXIT_CRITICAL();
 8000d5e:	f001 f867 	bl	8001e30 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8000d62:	2000      	movs	r0, #0
 8000d64:	e7e8      	b.n	8000d38 <xQueueReceive+0x7e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000d66:	a802      	add	r0, sp, #8
 8000d68:	f000 fcde 	bl	8001728 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000d6c:	2601      	movs	r6, #1
 8000d6e:	e021      	b.n	8000db4 <xQueueReceive+0xfa>
		prvLockQueue( pxQueue );
 8000d70:	2300      	movs	r3, #0
 8000d72:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8000d76:	e029      	b.n	8000dcc <xQueueReceive+0x112>
 8000d78:	2300      	movs	r3, #0
 8000d7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000d7e:	e02b      	b.n	8000dd8 <xQueueReceive+0x11e>
				prvUnlockQueue( pxQueue );
 8000d80:	4620      	mov	r0, r4
 8000d82:	f7ff fd77 	bl	8000874 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000d86:	f000 fb63 	bl	8001450 <xTaskResumeAll>
 8000d8a:	e009      	b.n	8000da0 <xQueueReceive+0xe6>
			prvUnlockQueue( pxQueue );
 8000d8c:	4620      	mov	r0, r4
 8000d8e:	f7ff fd71 	bl	8000874 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000d92:	f000 fb5d 	bl	8001450 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000d96:	4620      	mov	r0, r4
 8000d98:	f7ff fd12 	bl	80007c0 <prvIsQueueEmpty>
 8000d9c:	2800      	cmp	r0, #0
 8000d9e:	d13f      	bne.n	8000e20 <xQueueReceive+0x166>
		taskENTER_CRITICAL();
 8000da0:	f001 f820 	bl	8001de4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000da4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d1bb      	bne.n	8000d22 <xQueueReceive+0x68>
				if( xTicksToWait == ( TickType_t ) 0 )
 8000daa:	9b01      	ldr	r3, [sp, #4]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d0d6      	beq.n	8000d5e <xQueueReceive+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 8000db0:	2e00      	cmp	r6, #0
 8000db2:	d0d8      	beq.n	8000d66 <xQueueReceive+0xac>
		taskEXIT_CRITICAL();
 8000db4:	f001 f83c 	bl	8001e30 <vPortExitCritical>
		vTaskSuspendAll();
 8000db8:	f000 faac 	bl	8001314 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000dbc:	f001 f812 	bl	8001de4 <vPortEnterCritical>
 8000dc0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8000dc4:	b25b      	sxtb	r3, r3
 8000dc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000dca:	d0d1      	beq.n	8000d70 <xQueueReceive+0xb6>
 8000dcc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8000dd0:	b25b      	sxtb	r3, r3
 8000dd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000dd6:	d0cf      	beq.n	8000d78 <xQueueReceive+0xbe>
 8000dd8:	f001 f82a 	bl	8001e30 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000ddc:	a901      	add	r1, sp, #4
 8000dde:	a802      	add	r0, sp, #8
 8000de0:	f000 fcac 	bl	800173c <xTaskCheckForTimeOut>
 8000de4:	2800      	cmp	r0, #0
 8000de6:	d1d1      	bne.n	8000d8c <xQueueReceive+0xd2>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000de8:	4620      	mov	r0, r4
 8000dea:	f7ff fce9 	bl	80007c0 <prvIsQueueEmpty>
 8000dee:	2800      	cmp	r0, #0
 8000df0:	d0c6      	beq.n	8000d80 <xQueueReceive+0xc6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000df2:	9901      	ldr	r1, [sp, #4]
 8000df4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8000df8:	f000 fc14 	bl	8001624 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8000dfc:	4620      	mov	r0, r4
 8000dfe:	f7ff fd39 	bl	8000874 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8000e02:	f000 fb25 	bl	8001450 <xTaskResumeAll>
 8000e06:	2800      	cmp	r0, #0
 8000e08:	d1ca      	bne.n	8000da0 <xQueueReceive+0xe6>
					portYIELD_WITHIN_API();
 8000e0a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000e0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e12:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000e16:	f3bf 8f4f 	dsb	sy
 8000e1a:	f3bf 8f6f 	isb	sy
 8000e1e:	e7bf      	b.n	8000da0 <xQueueReceive+0xe6>
				return errQUEUE_EMPTY;
 8000e20:	2000      	movs	r0, #0
 8000e22:	e789      	b.n	8000d38 <xQueueReceive+0x7e>

08000e24 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000e24:	2300      	movs	r3, #0
 8000e26:	2b07      	cmp	r3, #7
 8000e28:	d80c      	bhi.n	8000e44 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8000e2a:	4a07      	ldr	r2, [pc, #28]	; (8000e48 <vQueueAddToRegistry+0x24>)
 8000e2c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000e30:	b10a      	cbz	r2, 8000e36 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000e32:	3301      	adds	r3, #1
 8000e34:	e7f7      	b.n	8000e26 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8000e36:	4a04      	ldr	r2, [pc, #16]	; (8000e48 <vQueueAddToRegistry+0x24>)
 8000e38:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8000e3c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8000e40:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8000e42:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	20000750 	.word	0x20000750

08000e4c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8000e4c:	b570      	push	{r4, r5, r6, lr}
 8000e4e:	4604      	mov	r4, r0
 8000e50:	460d      	mov	r5, r1
 8000e52:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8000e54:	f000 ffc6 	bl	8001de4 <vPortEnterCritical>
 8000e58:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8000e5c:	b25b      	sxtb	r3, r3
 8000e5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e62:	d00d      	beq.n	8000e80 <vQueueWaitForMessageRestricted+0x34>
 8000e64:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8000e68:	b25b      	sxtb	r3, r3
 8000e6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e6e:	d00b      	beq.n	8000e88 <vQueueWaitForMessageRestricted+0x3c>
 8000e70:	f000 ffde 	bl	8001e30 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8000e74:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000e76:	b15b      	cbz	r3, 8000e90 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8000e78:	4620      	mov	r0, r4
 8000e7a:	f7ff fcfb 	bl	8000874 <prvUnlockQueue>
	}
 8000e7e:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8000e80:	2300      	movs	r3, #0
 8000e82:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8000e86:	e7ed      	b.n	8000e64 <vQueueWaitForMessageRestricted+0x18>
 8000e88:	2300      	movs	r3, #0
 8000e8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000e8e:	e7ef      	b.n	8000e70 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8000e90:	4632      	mov	r2, r6
 8000e92:	4629      	mov	r1, r5
 8000e94:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8000e98:	f000 fbe0 	bl	800165c <vTaskPlaceOnEventListRestricted>
 8000e9c:	e7ec      	b.n	8000e78 <vQueueWaitForMessageRestricted+0x2c>
	...

08000ea0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000ea0:	4b07      	ldr	r3, [pc, #28]	; (8000ec0 <prvResetNextTaskUnblockTime+0x20>)
 8000ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	b923      	cbnz	r3, 8000eb2 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8000ea8:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <prvResetNextTaskUnblockTime+0x20>)
 8000eaa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000eae:	62da      	str	r2, [r3, #44]	; 0x2c
 8000eb0:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000eb2:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <prvResetNextTaskUnblockTime+0x20>)
 8000eb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000eb6:	68d2      	ldr	r2, [r2, #12]
 8000eb8:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8000eba:	6852      	ldr	r2, [r2, #4]
 8000ebc:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 8000ebe:	4770      	bx	lr
 8000ec0:	20000790 	.word	0x20000790

08000ec4 <prvInitialiseNewTask>:
{
 8000ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ec8:	4680      	mov	r8, r0
 8000eca:	460d      	mov	r5, r1
 8000ecc:	4617      	mov	r7, r2
 8000ece:	4699      	mov	r9, r3
 8000ed0:	9e08      	ldr	r6, [sp, #32]
 8000ed2:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8000ed6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000ed8:	0092      	lsls	r2, r2, #2
 8000eda:	21a5      	movs	r1, #165	; 0xa5
 8000edc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000ede:	f003 fe5d 	bl	8004b9c <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000ee2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ee4:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8000ee8:	443a      	add	r2, r7
 8000eea:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000eee:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8000ef2:	b3b5      	cbz	r5, 8000f62 <prvInitialiseNewTask+0x9e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000ef4:	f04f 0c00 	mov.w	ip, #0
 8000ef8:	f1bc 0f0f 	cmp.w	ip, #15
 8000efc:	d80b      	bhi.n	8000f16 <prvInitialiseNewTask+0x52>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000efe:	f815 200c 	ldrb.w	r2, [r5, ip]
 8000f02:	eb04 030c 	add.w	r3, r4, ip
 8000f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8000f0a:	f815 300c 	ldrb.w	r3, [r5, ip]
 8000f0e:	b113      	cbz	r3, 8000f16 <prvInitialiseNewTask+0x52>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000f10:	f10c 0c01 	add.w	ip, ip, #1
 8000f14:	e7f0      	b.n	8000ef8 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000f16:	2300      	movs	r3, #0
 8000f18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000f1c:	2e37      	cmp	r6, #55	; 0x37
 8000f1e:	d900      	bls.n	8000f22 <prvInitialiseNewTask+0x5e>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000f20:	2637      	movs	r6, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8000f22:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8000f24:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8000f26:	2500      	movs	r5, #0
 8000f28:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000f2a:	1d20      	adds	r0, r4, #4
 8000f2c:	f7ff fbff 	bl	800072e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000f30:	f104 0018 	add.w	r0, r4, #24
 8000f34:	f7ff fbfb 	bl	800072e <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000f38:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000f3a:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
 8000f3e:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000f40:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8000f42:	6565      	str	r5, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8000f44:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000f48:	464a      	mov	r2, r9
 8000f4a:	4641      	mov	r1, r8
 8000f4c:	4638      	mov	r0, r7
 8000f4e:	f000 ff1b 	bl	8001d88 <pxPortInitialiseStack>
 8000f52:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8000f54:	f1ba 0f00 	cmp.w	sl, #0
 8000f58:	d001      	beq.n	8000f5e <prvInitialiseNewTask+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000f5a:	f8ca 4000 	str.w	r4, [sl]
}
 8000f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000f62:	2300      	movs	r3, #0
 8000f64:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8000f68:	e7d8      	b.n	8000f1c <prvInitialiseNewTask+0x58>
	...

08000f6c <prvInitialiseTaskLists>:
{
 8000f6c:	b570      	push	{r4, r5, r6, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000f6e:	2400      	movs	r4, #0
 8000f70:	e007      	b.n	8000f82 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000f72:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8000f76:	0093      	lsls	r3, r2, #2
 8000f78:	4810      	ldr	r0, [pc, #64]	; (8000fbc <prvInitialiseTaskLists+0x50>)
 8000f7a:	4418      	add	r0, r3
 8000f7c:	f7ff fbcc 	bl	8000718 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000f80:	3401      	adds	r4, #1
 8000f82:	2c37      	cmp	r4, #55	; 0x37
 8000f84:	d9f5      	bls.n	8000f72 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8000f86:	4c0e      	ldr	r4, [pc, #56]	; (8000fc0 <prvInitialiseTaskLists+0x54>)
 8000f88:	f504 6692 	add.w	r6, r4, #1168	; 0x490
 8000f8c:	4630      	mov	r0, r6
 8000f8e:	f7ff fbc3 	bl	8000718 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8000f92:	f204 45a4 	addw	r5, r4, #1188	; 0x4a4
 8000f96:	4628      	mov	r0, r5
 8000f98:	f7ff fbbe 	bl	8000718 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8000f9c:	f104 0014 	add.w	r0, r4, #20
 8000fa0:	f7ff fbba 	bl	8000718 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8000fa4:	f504 6097 	add.w	r0, r4, #1208	; 0x4b8
 8000fa8:	f7ff fbb6 	bl	8000718 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8000fac:	4620      	mov	r0, r4
 8000fae:	f7ff fbb3 	bl	8000718 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8000fb2:	62a6      	str	r6, [r4, #40]	; 0x28
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8000fb4:	f8c4 54cc 	str.w	r5, [r4, #1228]	; 0x4cc
}
 8000fb8:	bd70      	pop	{r4, r5, r6, pc}
 8000fba:	bf00      	nop
 8000fbc:	200007c0 	.word	0x200007c0
 8000fc0:	20000790 	.word	0x20000790

08000fc4 <prvAddNewTaskToReadyList>:
{
 8000fc4:	b538      	push	{r3, r4, r5, lr}
 8000fc6:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8000fc8:	f000 ff0c 	bl	8001de4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8000fcc:	4b28      	ldr	r3, [pc, #160]	; (8001070 <prvAddNewTaskToReadyList+0xac>)
 8000fce:	f8d3 24d0 	ldr.w	r2, [r3, #1232]	; 0x4d0
 8000fd2:	3201      	adds	r2, #1
 8000fd4:	f8c3 24d0 	str.w	r2, [r3, #1232]	; 0x4d0
		if( pxCurrentTCB == NULL )
 8000fd8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8000fdc:	b173      	cbz	r3, 8000ffc <prvAddNewTaskToReadyList+0x38>
			if( xSchedulerRunning == pdFALSE )
 8000fde:	4b24      	ldr	r3, [pc, #144]	; (8001070 <prvAddNewTaskToReadyList+0xac>)
 8000fe0:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 8000fe4:	b98b      	cbnz	r3, 800100a <prvAddNewTaskToReadyList+0x46>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000fe6:	4b22      	ldr	r3, [pc, #136]	; (8001070 <prvAddNewTaskToReadyList+0xac>)
 8000fe8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8000fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d80a      	bhi.n	800100a <prvAddNewTaskToReadyList+0x46>
					pxCurrentTCB = pxNewTCB;
 8000ff4:	4b1e      	ldr	r3, [pc, #120]	; (8001070 <prvAddNewTaskToReadyList+0xac>)
 8000ff6:	f8c3 44d4 	str.w	r4, [r3, #1236]	; 0x4d4
 8000ffa:	e006      	b.n	800100a <prvAddNewTaskToReadyList+0x46>
			pxCurrentTCB = pxNewTCB;
 8000ffc:	4b1c      	ldr	r3, [pc, #112]	; (8001070 <prvAddNewTaskToReadyList+0xac>)
 8000ffe:	f8c3 44d4 	str.w	r4, [r3, #1236]	; 0x4d4
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001002:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
 8001006:	2b01      	cmp	r3, #1
 8001008:	d02e      	beq.n	8001068 <prvAddNewTaskToReadyList+0xa4>
		uxTaskNumber++;
 800100a:	4a19      	ldr	r2, [pc, #100]	; (8001070 <prvAddNewTaskToReadyList+0xac>)
 800100c:	f8d2 34dc 	ldr.w	r3, [r2, #1244]	; 0x4dc
 8001010:	3301      	adds	r3, #1
 8001012:	f8c2 34dc 	str.w	r3, [r2, #1244]	; 0x4dc
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001016:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8001018:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800101a:	f8d2 24e0 	ldr.w	r2, [r2, #1248]	; 0x4e0
 800101e:	4293      	cmp	r3, r2
 8001020:	d902      	bls.n	8001028 <prvAddNewTaskToReadyList+0x64>
 8001022:	4a13      	ldr	r2, [pc, #76]	; (8001070 <prvAddNewTaskToReadyList+0xac>)
 8001024:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
 8001028:	4d11      	ldr	r5, [pc, #68]	; (8001070 <prvAddNewTaskToReadyList+0xac>)
 800102a:	f105 0030 	add.w	r0, r5, #48	; 0x30
 800102e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001032:	1d21      	adds	r1, r4, #4
 8001034:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001038:	f7ff fb7c 	bl	8000734 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800103c:	f000 fef8 	bl	8001e30 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8001040:	f8d5 34d8 	ldr.w	r3, [r5, #1240]	; 0x4d8
 8001044:	b17b      	cbz	r3, 8001066 <prvAddNewTaskToReadyList+0xa2>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001046:	f8d5 34d4 	ldr.w	r3, [r5, #1236]	; 0x4d4
 800104a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800104c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800104e:	429a      	cmp	r2, r3
 8001050:	d209      	bcs.n	8001066 <prvAddNewTaskToReadyList+0xa2>
			taskYIELD_IF_USING_PREEMPTION();
 8001052:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800105a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800105e:	f3bf 8f4f 	dsb	sy
 8001062:	f3bf 8f6f 	isb	sy
}
 8001066:	bd38      	pop	{r3, r4, r5, pc}
				prvInitialiseTaskLists();
 8001068:	f7ff ff80 	bl	8000f6c <prvInitialiseTaskLists>
 800106c:	e7cd      	b.n	800100a <prvAddNewTaskToReadyList+0x46>
 800106e:	bf00      	nop
 8001070:	20000790 	.word	0x20000790

08001074 <prvDeleteTCB>:
	{
 8001074:	b510      	push	{r4, lr}
 8001076:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8001078:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
 800107c:	b173      	cbz	r3, 800109c <prvDeleteTCB+0x28>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800107e:	2b01      	cmp	r3, #1
 8001080:	d013      	beq.n	80010aa <prvDeleteTCB+0x36>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8001082:	2b02      	cmp	r3, #2
 8001084:	d010      	beq.n	80010a8 <prvDeleteTCB+0x34>
 8001086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800108a:	b672      	cpsid	i
 800108c:	f383 8811 	msr	BASEPRI, r3
 8001090:	f3bf 8f6f 	isb	sy
 8001094:	f3bf 8f4f 	dsb	sy
 8001098:	b662      	cpsie	i
 800109a:	e7fe      	b.n	800109a <prvDeleteTCB+0x26>
				vPortFree( pxTCB->pxStack );
 800109c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800109e:	f001 f89d 	bl	80021dc <vPortFree>
				vPortFree( pxTCB );
 80010a2:	4620      	mov	r0, r4
 80010a4:	f001 f89a 	bl	80021dc <vPortFree>
	}
 80010a8:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 80010aa:	f001 f897 	bl	80021dc <vPortFree>
 80010ae:	e7fb      	b.n	80010a8 <prvDeleteTCB+0x34>

080010b0 <prvCheckTasksWaitingTermination>:
{
 80010b0:	b538      	push	{r3, r4, r5, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80010b2:	e017      	b.n	80010e4 <prvCheckTasksWaitingTermination+0x34>
			taskENTER_CRITICAL();
 80010b4:	f000 fe96 	bl	8001de4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80010b8:	4c0d      	ldr	r4, [pc, #52]	; (80010f0 <prvCheckTasksWaitingTermination+0x40>)
 80010ba:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
 80010be:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80010c0:	1d28      	adds	r0, r5, #4
 80010c2:	f7ff fb5b 	bl	800077c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80010c6:	f8d4 34d0 	ldr.w	r3, [r4, #1232]	; 0x4d0
 80010ca:	3b01      	subs	r3, #1
 80010cc:	f8c4 34d0 	str.w	r3, [r4, #1232]	; 0x4d0
				--uxDeletedTasksWaitingCleanUp;
 80010d0:	f8d4 34e4 	ldr.w	r3, [r4, #1252]	; 0x4e4
 80010d4:	3b01      	subs	r3, #1
 80010d6:	f8c4 34e4 	str.w	r3, [r4, #1252]	; 0x4e4
			taskEXIT_CRITICAL();
 80010da:	f000 fea9 	bl	8001e30 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80010de:	4628      	mov	r0, r5
 80010e0:	f7ff ffc8 	bl	8001074 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80010e4:	4b02      	ldr	r3, [pc, #8]	; (80010f0 <prvCheckTasksWaitingTermination+0x40>)
 80010e6:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d1e2      	bne.n	80010b4 <prvCheckTasksWaitingTermination+0x4>
}
 80010ee:	bd38      	pop	{r3, r4, r5, pc}
 80010f0:	20000790 	.word	0x20000790

080010f4 <prvIdleTask>:
{
 80010f4:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 80010f6:	f7ff ffdb 	bl	80010b0 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80010fa:	4b07      	ldr	r3, [pc, #28]	; (8001118 <prvIdleTask+0x24>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d9f9      	bls.n	80010f6 <prvIdleTask+0x2>
				taskYIELD();
 8001102:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800110a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800110e:	f3bf 8f4f 	dsb	sy
 8001112:	f3bf 8f6f 	isb	sy
 8001116:	e7ee      	b.n	80010f6 <prvIdleTask+0x2>
 8001118:	20000790 	.word	0x20000790

0800111c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800111c:	b570      	push	{r4, r5, r6, lr}
 800111e:	4604      	mov	r4, r0
 8001120:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001122:	4b1a      	ldr	r3, [pc, #104]	; (800118c <prvAddCurrentTaskToDelayedList+0x70>)
 8001124:	f8d3 64e8 	ldr.w	r6, [r3, #1256]	; 0x4e8
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001128:	f8d3 04d4 	ldr.w	r0, [r3, #1236]	; 0x4d4
 800112c:	3004      	adds	r0, #4
 800112e:	f7ff fb25 	bl	800077c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001132:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8001136:	bf14      	ite	ne
 8001138:	2300      	movne	r3, #0
 800113a:	2301      	moveq	r3, #1
 800113c:	2d00      	cmp	r5, #0
 800113e:	bf08      	it	eq
 8001140:	2300      	moveq	r3, #0
 8001142:	b97b      	cbnz	r3, 8001164 <prvAddCurrentTaskToDelayedList+0x48>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001144:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001146:	4b11      	ldr	r3, [pc, #68]	; (800118c <prvAddCurrentTaskToDelayedList+0x70>)
 8001148:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800114c:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800114e:	42a6      	cmp	r6, r4
 8001150:	d90f      	bls.n	8001172 <prvAddCurrentTaskToDelayedList+0x56>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001152:	4b0e      	ldr	r3, [pc, #56]	; (800118c <prvAddCurrentTaskToDelayedList+0x70>)
 8001154:	f8d3 04cc 	ldr.w	r0, [r3, #1228]	; 0x4cc
 8001158:	f8d3 14d4 	ldr.w	r1, [r3, #1236]	; 0x4d4
 800115c:	3104      	adds	r1, #4
 800115e:	f7ff faf4 	bl	800074a <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001162:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001164:	4809      	ldr	r0, [pc, #36]	; (800118c <prvAddCurrentTaskToDelayedList+0x70>)
 8001166:	f8d0 14d4 	ldr.w	r1, [r0, #1236]	; 0x4d4
 800116a:	3104      	adds	r1, #4
 800116c:	f7ff fae2 	bl	8000734 <vListInsertEnd>
 8001170:	e7f7      	b.n	8001162 <prvAddCurrentTaskToDelayedList+0x46>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001172:	4d06      	ldr	r5, [pc, #24]	; (800118c <prvAddCurrentTaskToDelayedList+0x70>)
 8001174:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8001176:	f8d5 14d4 	ldr.w	r1, [r5, #1236]	; 0x4d4
 800117a:	3104      	adds	r1, #4
 800117c:	f7ff fae5 	bl	800074a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001180:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001182:	42a3      	cmp	r3, r4
 8001184:	d9ed      	bls.n	8001162 <prvAddCurrentTaskToDelayedList+0x46>
					xNextTaskUnblockTime = xTimeToWake;
 8001186:	62ec      	str	r4, [r5, #44]	; 0x2c
}
 8001188:	e7eb      	b.n	8001162 <prvAddCurrentTaskToDelayedList+0x46>
 800118a:	bf00      	nop
 800118c:	20000790 	.word	0x20000790

08001190 <xTaskCreateStatic>:
	{
 8001190:	b530      	push	{r4, r5, lr}
 8001192:	b087      	sub	sp, #28
 8001194:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8001196:	b18c      	cbz	r4, 80011bc <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8001198:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800119a:	b1d5      	cbz	r5, 80011d2 <xTaskCreateStatic+0x42>
			volatile size_t xSize = sizeof( StaticTask_t );
 800119c:	255c      	movs	r5, #92	; 0x5c
 800119e:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80011a0:	9d04      	ldr	r5, [sp, #16]
 80011a2:	2d5c      	cmp	r5, #92	; 0x5c
 80011a4:	d020      	beq.n	80011e8 <xTaskCreateStatic+0x58>
 80011a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011aa:	b672      	cpsid	i
 80011ac:	f383 8811 	msr	BASEPRI, r3
 80011b0:	f3bf 8f6f 	isb	sy
 80011b4:	f3bf 8f4f 	dsb	sy
 80011b8:	b662      	cpsie	i
 80011ba:	e7fe      	b.n	80011ba <xTaskCreateStatic+0x2a>
 80011bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011c0:	b672      	cpsid	i
 80011c2:	f383 8811 	msr	BASEPRI, r3
 80011c6:	f3bf 8f6f 	isb	sy
 80011ca:	f3bf 8f4f 	dsb	sy
 80011ce:	b662      	cpsie	i
		configASSERT( puxStackBuffer != NULL );
 80011d0:	e7fe      	b.n	80011d0 <xTaskCreateStatic+0x40>
 80011d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011d6:	b672      	cpsid	i
 80011d8:	f383 8811 	msr	BASEPRI, r3
 80011dc:	f3bf 8f6f 	isb	sy
 80011e0:	f3bf 8f4f 	dsb	sy
 80011e4:	b662      	cpsie	i
		configASSERT( pxTaskBuffer != NULL );
 80011e6:	e7fe      	b.n	80011e6 <xTaskCreateStatic+0x56>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80011e8:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80011ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80011ec:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80011ee:	2402      	movs	r4, #2
 80011f0:	f885 4059 	strb.w	r4, [r5, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80011f4:	2400      	movs	r4, #0
 80011f6:	9403      	str	r4, [sp, #12]
 80011f8:	9502      	str	r5, [sp, #8]
 80011fa:	ac05      	add	r4, sp, #20
 80011fc:	9401      	str	r4, [sp, #4]
 80011fe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001200:	9400      	str	r4, [sp, #0]
 8001202:	f7ff fe5f 	bl	8000ec4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001206:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001208:	f7ff fedc 	bl	8000fc4 <prvAddNewTaskToReadyList>
	}
 800120c:	9805      	ldr	r0, [sp, #20]
 800120e:	b007      	add	sp, #28
 8001210:	bd30      	pop	{r4, r5, pc}

08001212 <xTaskCreate>:
	{
 8001212:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001216:	b085      	sub	sp, #20
 8001218:	4607      	mov	r7, r0
 800121a:	4688      	mov	r8, r1
 800121c:	4614      	mov	r4, r2
 800121e:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001220:	0090      	lsls	r0, r2, #2
 8001222:	f000 ff69 	bl	80020f8 <pvPortMalloc>
			if( pxStack != NULL )
 8001226:	b300      	cbz	r0, 800126a <xTaskCreate+0x58>
 8001228:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800122a:	205c      	movs	r0, #92	; 0x5c
 800122c:	f000 ff64 	bl	80020f8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8001230:	4605      	mov	r5, r0
 8001232:	b1b0      	cbz	r0, 8001262 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 8001234:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8001238:	b1e5      	cbz	r5, 8001274 <xTaskCreate+0x62>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800123a:	2300      	movs	r3, #0
 800123c:	f885 3059 	strb.w	r3, [r5, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001240:	9303      	str	r3, [sp, #12]
 8001242:	9502      	str	r5, [sp, #8]
 8001244:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001246:	9301      	str	r3, [sp, #4]
 8001248:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	4633      	mov	r3, r6
 800124e:	4622      	mov	r2, r4
 8001250:	4641      	mov	r1, r8
 8001252:	4638      	mov	r0, r7
 8001254:	f7ff fe36 	bl	8000ec4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001258:	4628      	mov	r0, r5
 800125a:	f7ff feb3 	bl	8000fc4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800125e:	2001      	movs	r0, #1
 8001260:	e005      	b.n	800126e <xTaskCreate+0x5c>
					vPortFree( pxStack );
 8001262:	4648      	mov	r0, r9
 8001264:	f000 ffba 	bl	80021dc <vPortFree>
 8001268:	e7e6      	b.n	8001238 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800126a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
 800126e:	b005      	add	sp, #20
 8001270:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001274:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 8001278:	e7f9      	b.n	800126e <xTaskCreate+0x5c>
	...

0800127c <vTaskStartScheduler>:
{
 800127c:	b510      	push	{r4, lr}
 800127e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001280:	2400      	movs	r4, #0
 8001282:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001284:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001286:	aa07      	add	r2, sp, #28
 8001288:	a906      	add	r1, sp, #24
 800128a:	a805      	add	r0, sp, #20
 800128c:	f7ff fa26 	bl	80006dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001290:	9b05      	ldr	r3, [sp, #20]
 8001292:	9302      	str	r3, [sp, #8]
 8001294:	9b06      	ldr	r3, [sp, #24]
 8001296:	9301      	str	r3, [sp, #4]
 8001298:	9400      	str	r4, [sp, #0]
 800129a:	4623      	mov	r3, r4
 800129c:	9a07      	ldr	r2, [sp, #28]
 800129e:	491a      	ldr	r1, [pc, #104]	; (8001308 <vTaskStartScheduler+0x8c>)
 80012a0:	481a      	ldr	r0, [pc, #104]	; (800130c <vTaskStartScheduler+0x90>)
 80012a2:	f7ff ff75 	bl	8001190 <xTaskCreateStatic>
 80012a6:	4b1a      	ldr	r3, [pc, #104]	; (8001310 <vTaskStartScheduler+0x94>)
 80012a8:	f8c3 04f0 	str.w	r0, [r3, #1264]	; 0x4f0
		if( xIdleTaskHandle != NULL )
 80012ac:	b140      	cbz	r0, 80012c0 <vTaskStartScheduler+0x44>
			xReturn = xTimerCreateTimerTask();
 80012ae:	f000 fb55 	bl	800195c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80012b2:	2801      	cmp	r0, #1
 80012b4:	d006      	beq.n	80012c4 <vTaskStartScheduler+0x48>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80012b6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80012ba:	d01a      	beq.n	80012f2 <vTaskStartScheduler+0x76>
}
 80012bc:	b008      	add	sp, #32
 80012be:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 80012c0:	2000      	movs	r0, #0
 80012c2:	e7f6      	b.n	80012b2 <vTaskStartScheduler+0x36>
 80012c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012c8:	b672      	cpsid	i
 80012ca:	f383 8811 	msr	BASEPRI, r3
 80012ce:	f3bf 8f6f 	isb	sy
 80012d2:	f3bf 8f4f 	dsb	sy
 80012d6:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 80012d8:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <vTaskStartScheduler+0x94>)
 80012da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012de:	62da      	str	r2, [r3, #44]	; 0x2c
		xSchedulerRunning = pdTRUE;
 80012e0:	2201      	movs	r2, #1
 80012e2:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80012e6:	2200      	movs	r2, #0
 80012e8:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
		if( xPortStartScheduler() != pdFALSE )
 80012ec:	f000 fe16 	bl	8001f1c <xPortStartScheduler>
 80012f0:	e7e4      	b.n	80012bc <vTaskStartScheduler+0x40>
 80012f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012f6:	b672      	cpsid	i
 80012f8:	f383 8811 	msr	BASEPRI, r3
 80012fc:	f3bf 8f6f 	isb	sy
 8001300:	f3bf 8f4f 	dsb	sy
 8001304:	b662      	cpsie	i
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001306:	e7fe      	b.n	8001306 <vTaskStartScheduler+0x8a>
 8001308:	080054ec 	.word	0x080054ec
 800130c:	080010f5 	.word	0x080010f5
 8001310:	20000790 	.word	0x20000790

08001314 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8001314:	4a03      	ldr	r2, [pc, #12]	; (8001324 <vTaskSuspendAll+0x10>)
 8001316:	f8d2 34ec 	ldr.w	r3, [r2, #1260]	; 0x4ec
 800131a:	3301      	adds	r3, #1
 800131c:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
}
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	20000790 	.word	0x20000790

08001328 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8001328:	4b01      	ldr	r3, [pc, #4]	; (8001330 <xTaskGetTickCount+0x8>)
 800132a:	f8d3 04e8 	ldr.w	r0, [r3, #1256]	; 0x4e8
}
 800132e:	4770      	bx	lr
 8001330:	20000790 	.word	0x20000790

08001334 <xTaskIncrementTick>:
{
 8001334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001338:	4b44      	ldr	r3, [pc, #272]	; (800144c <xTaskIncrementTick+0x118>)
 800133a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800133e:	2b00      	cmp	r3, #0
 8001340:	d172      	bne.n	8001428 <xTaskIncrementTick+0xf4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001342:	4b42      	ldr	r3, [pc, #264]	; (800144c <xTaskIncrementTick+0x118>)
 8001344:	f8d3 54e8 	ldr.w	r5, [r3, #1256]	; 0x4e8
 8001348:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800134a:	f8c3 54e8 	str.w	r5, [r3, #1256]	; 0x4e8
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800134e:	b9dd      	cbnz	r5, 8001388 <xTaskIncrementTick+0x54>
			taskSWITCH_DELAYED_LISTS();
 8001350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	b153      	cbz	r3, 800136c <xTaskIncrementTick+0x38>
 8001356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800135a:	b672      	cpsid	i
 800135c:	f383 8811 	msr	BASEPRI, r3
 8001360:	f3bf 8f6f 	isb	sy
 8001364:	f3bf 8f4f 	dsb	sy
 8001368:	b662      	cpsie	i
 800136a:	e7fe      	b.n	800136a <xTaskIncrementTick+0x36>
 800136c:	4b37      	ldr	r3, [pc, #220]	; (800144c <xTaskIncrementTick+0x118>)
 800136e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001370:	f8d3 14cc 	ldr.w	r1, [r3, #1228]	; 0x4cc
 8001374:	6299      	str	r1, [r3, #40]	; 0x28
 8001376:	f8c3 24cc 	str.w	r2, [r3, #1228]	; 0x4cc
 800137a:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	; 0x4f4
 800137e:	3201      	adds	r2, #1
 8001380:	f8c3 24f4 	str.w	r2, [r3, #1268]	; 0x4f4
 8001384:	f7ff fd8c 	bl	8000ea0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001388:	4b30      	ldr	r3, [pc, #192]	; (800144c <xTaskIncrementTick+0x118>)
 800138a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800138c:	42ab      	cmp	r3, r5
 800138e:	d940      	bls.n	8001412 <xTaskIncrementTick+0xde>
BaseType_t xSwitchRequired = pdFALSE;
 8001390:	f04f 0800 	mov.w	r8, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001394:	4a2d      	ldr	r2, [pc, #180]	; (800144c <xTaskIncrementTick+0x118>)
 8001396:	f8d2 34d4 	ldr.w	r3, [r2, #1236]	; 0x4d4
 800139a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80013a0:	0099      	lsls	r1, r3, #2
 80013a2:	440a      	add	r2, r1
 80013a4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d946      	bls.n	8001438 <xTaskIncrementTick+0x104>
				xSwitchRequired = pdTRUE;
 80013aa:	f04f 0801 	mov.w	r8, #1
 80013ae:	e043      	b.n	8001438 <xTaskIncrementTick+0x104>
							xSwitchRequired = pdTRUE;
 80013b0:	f04f 0801 	mov.w	r8, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80013b4:	4b25      	ldr	r3, [pc, #148]	; (800144c <xTaskIncrementTick+0x118>)
 80013b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	b36b      	cbz	r3, 8001418 <xTaskIncrementTick+0xe4>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80013bc:	4b23      	ldr	r3, [pc, #140]	; (800144c <xTaskIncrementTick+0x118>)
 80013be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80013c4:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 80013c6:	429d      	cmp	r5, r3
 80013c8:	d32b      	bcc.n	8001422 <xTaskIncrementTick+0xee>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80013ca:	1d27      	adds	r7, r4, #4
 80013cc:	4638      	mov	r0, r7
 80013ce:	f7ff f9d5 	bl	800077c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80013d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80013d4:	b11b      	cbz	r3, 80013de <xTaskIncrementTick+0xaa>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80013d6:	f104 0018 	add.w	r0, r4, #24
 80013da:	f7ff f9cf 	bl	800077c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80013de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80013e0:	4a1a      	ldr	r2, [pc, #104]	; (800144c <xTaskIncrementTick+0x118>)
 80013e2:	f8d2 24e0 	ldr.w	r2, [r2, #1248]	; 0x4e0
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d902      	bls.n	80013f0 <xTaskIncrementTick+0xbc>
 80013ea:	4a18      	ldr	r2, [pc, #96]	; (800144c <xTaskIncrementTick+0x118>)
 80013ec:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
 80013f0:	4e16      	ldr	r6, [pc, #88]	; (800144c <xTaskIncrementTick+0x118>)
 80013f2:	f106 0030 	add.w	r0, r6, #48	; 0x30
 80013f6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80013fa:	009a      	lsls	r2, r3, #2
 80013fc:	4639      	mov	r1, r7
 80013fe:	4410      	add	r0, r2
 8001400:	f7ff f998 	bl	8000734 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001404:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001406:	f8d6 34d4 	ldr.w	r3, [r6, #1236]	; 0x4d4
 800140a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140c:	429a      	cmp	r2, r3
 800140e:	d2cf      	bcs.n	80013b0 <xTaskIncrementTick+0x7c>
 8001410:	e7d0      	b.n	80013b4 <xTaskIncrementTick+0x80>
BaseType_t xSwitchRequired = pdFALSE;
 8001412:	f04f 0800 	mov.w	r8, #0
 8001416:	e7cd      	b.n	80013b4 <xTaskIncrementTick+0x80>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001418:	4b0c      	ldr	r3, [pc, #48]	; (800144c <xTaskIncrementTick+0x118>)
 800141a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800141e:	62da      	str	r2, [r3, #44]	; 0x2c
					break;
 8001420:	e7b8      	b.n	8001394 <xTaskIncrementTick+0x60>
						xNextTaskUnblockTime = xItemValue;
 8001422:	4a0a      	ldr	r2, [pc, #40]	; (800144c <xTaskIncrementTick+0x118>)
 8001424:	62d3      	str	r3, [r2, #44]	; 0x2c
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001426:	e7b5      	b.n	8001394 <xTaskIncrementTick+0x60>
		++uxPendedTicks;
 8001428:	4a08      	ldr	r2, [pc, #32]	; (800144c <xTaskIncrementTick+0x118>)
 800142a:	f8d2 34f8 	ldr.w	r3, [r2, #1272]	; 0x4f8
 800142e:	3301      	adds	r3, #1
 8001430:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
BaseType_t xSwitchRequired = pdFALSE;
 8001434:	f04f 0800 	mov.w	r8, #0
		if( xYieldPending != pdFALSE )
 8001438:	4b04      	ldr	r3, [pc, #16]	; (800144c <xTaskIncrementTick+0x118>)
 800143a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800143e:	b10b      	cbz	r3, 8001444 <xTaskIncrementTick+0x110>
			xSwitchRequired = pdTRUE;
 8001440:	f04f 0801 	mov.w	r8, #1
}
 8001444:	4640      	mov	r0, r8
 8001446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800144a:	bf00      	nop
 800144c:	20000790 	.word	0x20000790

08001450 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8001450:	4b3b      	ldr	r3, [pc, #236]	; (8001540 <xTaskResumeAll+0xf0>)
 8001452:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8001456:	b953      	cbnz	r3, 800146e <xTaskResumeAll+0x1e>
 8001458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800145c:	b672      	cpsid	i
 800145e:	f383 8811 	msr	BASEPRI, r3
 8001462:	f3bf 8f6f 	isb	sy
 8001466:	f3bf 8f4f 	dsb	sy
 800146a:	b662      	cpsie	i
 800146c:	e7fe      	b.n	800146c <xTaskResumeAll+0x1c>
{
 800146e:	b570      	push	{r4, r5, r6, lr}
	taskENTER_CRITICAL();
 8001470:	f000 fcb8 	bl	8001de4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8001474:	4b32      	ldr	r3, [pc, #200]	; (8001540 <xTaskResumeAll+0xf0>)
 8001476:	f8d3 24ec 	ldr.w	r2, [r3, #1260]	; 0x4ec
 800147a:	3a01      	subs	r2, #1
 800147c:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001480:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8001484:	2b00      	cmp	r3, #0
 8001486:	d156      	bne.n	8001536 <xTaskResumeAll+0xe6>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001488:	4b2d      	ldr	r3, [pc, #180]	; (8001540 <xTaskResumeAll+0xf0>)
 800148a:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
 800148e:	b90b      	cbnz	r3, 8001494 <xTaskResumeAll+0x44>
BaseType_t xAlreadyYielded = pdFALSE;
 8001490:	2400      	movs	r4, #0
 8001492:	e051      	b.n	8001538 <xTaskResumeAll+0xe8>
TCB_t *pxTCB = NULL;
 8001494:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001496:	4b2a      	ldr	r3, [pc, #168]	; (8001540 <xTaskResumeAll+0xf0>)
 8001498:	695b      	ldr	r3, [r3, #20]
 800149a:	b32b      	cbz	r3, 80014e8 <xTaskResumeAll+0x98>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800149c:	4d28      	ldr	r5, [pc, #160]	; (8001540 <xTaskResumeAll+0xf0>)
 800149e:	6a2b      	ldr	r3, [r5, #32]
 80014a0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80014a2:	f104 0018 	add.w	r0, r4, #24
 80014a6:	f7ff f969 	bl	800077c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80014aa:	1d26      	adds	r6, r4, #4
 80014ac:	4630      	mov	r0, r6
 80014ae:	f7ff f965 	bl	800077c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80014b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80014b4:	f8d5 24e0 	ldr.w	r2, [r5, #1248]	; 0x4e0
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d901      	bls.n	80014c0 <xTaskResumeAll+0x70>
 80014bc:	f8c5 34e0 	str.w	r3, [r5, #1248]	; 0x4e0
 80014c0:	4d1f      	ldr	r5, [pc, #124]	; (8001540 <xTaskResumeAll+0xf0>)
 80014c2:	f105 0030 	add.w	r0, r5, #48	; 0x30
 80014c6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80014ca:	4631      	mov	r1, r6
 80014cc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80014d0:	f7ff f930 	bl	8000734 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80014d4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80014d6:	f8d5 34d4 	ldr.w	r3, [r5, #1236]	; 0x4d4
 80014da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014dc:	429a      	cmp	r2, r3
 80014de:	d3da      	bcc.n	8001496 <xTaskResumeAll+0x46>
						xYieldPending = pdTRUE;
 80014e0:	2201      	movs	r2, #1
 80014e2:	f8c5 24fc 	str.w	r2, [r5, #1276]	; 0x4fc
 80014e6:	e7d6      	b.n	8001496 <xTaskResumeAll+0x46>
				if( pxTCB != NULL )
 80014e8:	b10c      	cbz	r4, 80014ee <xTaskResumeAll+0x9e>
					prvResetNextTaskUnblockTime();
 80014ea:	f7ff fcd9 	bl	8000ea0 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80014ee:	4b14      	ldr	r3, [pc, #80]	; (8001540 <xTaskResumeAll+0xf0>)
 80014f0:	f8d3 44f8 	ldr.w	r4, [r3, #1272]	; 0x4f8
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80014f4:	b98c      	cbnz	r4, 800151a <xTaskResumeAll+0xca>
				if( xYieldPending != pdFALSE )
 80014f6:	4b12      	ldr	r3, [pc, #72]	; (8001540 <xTaskResumeAll+0xf0>)
 80014f8:	f8d3 44fc 	ldr.w	r4, [r3, #1276]	; 0x4fc
 80014fc:	b1e4      	cbz	r4, 8001538 <xTaskResumeAll+0xe8>
					taskYIELD_IF_USING_PREEMPTION();
 80014fe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001506:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800150a:	f3bf 8f4f 	dsb	sy
 800150e:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8001512:	2401      	movs	r4, #1
 8001514:	e010      	b.n	8001538 <xTaskResumeAll+0xe8>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001516:	3c01      	subs	r4, #1
 8001518:	d008      	beq.n	800152c <xTaskResumeAll+0xdc>
							if( xTaskIncrementTick() != pdFALSE )
 800151a:	f7ff ff0b 	bl	8001334 <xTaskIncrementTick>
 800151e:	2800      	cmp	r0, #0
 8001520:	d0f9      	beq.n	8001516 <xTaskResumeAll+0xc6>
								xYieldPending = pdTRUE;
 8001522:	4b07      	ldr	r3, [pc, #28]	; (8001540 <xTaskResumeAll+0xf0>)
 8001524:	2201      	movs	r2, #1
 8001526:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
 800152a:	e7f4      	b.n	8001516 <xTaskResumeAll+0xc6>
						uxPendedTicks = 0;
 800152c:	4b04      	ldr	r3, [pc, #16]	; (8001540 <xTaskResumeAll+0xf0>)
 800152e:	2200      	movs	r2, #0
 8001530:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
 8001534:	e7df      	b.n	80014f6 <xTaskResumeAll+0xa6>
BaseType_t xAlreadyYielded = pdFALSE;
 8001536:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8001538:	f000 fc7a 	bl	8001e30 <vPortExitCritical>
}
 800153c:	4620      	mov	r0, r4
 800153e:	bd70      	pop	{r4, r5, r6, pc}
 8001540:	20000790 	.word	0x20000790

08001544 <vTaskDelay>:
	{
 8001544:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001546:	b1c0      	cbz	r0, 800157a <vTaskDelay+0x36>
 8001548:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 800154a:	4b11      	ldr	r3, [pc, #68]	; (8001590 <vTaskDelay+0x4c>)
 800154c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8001550:	b153      	cbz	r3, 8001568 <vTaskDelay+0x24>
 8001552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001556:	b672      	cpsid	i
 8001558:	f383 8811 	msr	BASEPRI, r3
 800155c:	f3bf 8f6f 	isb	sy
 8001560:	f3bf 8f4f 	dsb	sy
 8001564:	b662      	cpsie	i
 8001566:	e7fe      	b.n	8001566 <vTaskDelay+0x22>
			vTaskSuspendAll();
 8001568:	f7ff fed4 	bl	8001314 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800156c:	2100      	movs	r1, #0
 800156e:	4620      	mov	r0, r4
 8001570:	f7ff fdd4 	bl	800111c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8001574:	f7ff ff6c 	bl	8001450 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8001578:	b948      	cbnz	r0, 800158e <vTaskDelay+0x4a>
			portYIELD_WITHIN_API();
 800157a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800157e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001582:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001586:	f3bf 8f4f 	dsb	sy
 800158a:	f3bf 8f6f 	isb	sy
	}
 800158e:	bd10      	pop	{r4, pc}
 8001590:	20000790 	.word	0x20000790

08001594 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001594:	4b22      	ldr	r3, [pc, #136]	; (8001620 <vTaskSwitchContext+0x8c>)
 8001596:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800159a:	b123      	cbz	r3, 80015a6 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800159c:	4b20      	ldr	r3, [pc, #128]	; (8001620 <vTaskSwitchContext+0x8c>)
 800159e:	2201      	movs	r2, #1
 80015a0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
 80015a4:	4770      	bx	lr
		xYieldPending = pdFALSE;
 80015a6:	4b1e      	ldr	r3, [pc, #120]	; (8001620 <vTaskSwitchContext+0x8c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80015ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80015b2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80015b6:	0091      	lsls	r1, r2, #2
 80015b8:	4a19      	ldr	r2, [pc, #100]	; (8001620 <vTaskSwitchContext+0x8c>)
 80015ba:	440a      	add	r2, r1
 80015bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80015be:	b96a      	cbnz	r2, 80015dc <vTaskSwitchContext+0x48>
 80015c0:	b10b      	cbz	r3, 80015c6 <vTaskSwitchContext+0x32>
 80015c2:	3b01      	subs	r3, #1
 80015c4:	e7f5      	b.n	80015b2 <vTaskSwitchContext+0x1e>
 80015c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015ca:	b672      	cpsid	i
 80015cc:	f383 8811 	msr	BASEPRI, r3
 80015d0:	f3bf 8f6f 	isb	sy
 80015d4:	f3bf 8f4f 	dsb	sy
 80015d8:	b662      	cpsie	i
 80015da:	e7fe      	b.n	80015da <vTaskSwitchContext+0x46>
 80015dc:	4a10      	ldr	r2, [pc, #64]	; (8001620 <vTaskSwitchContext+0x8c>)
 80015de:	4411      	add	r1, r2
 80015e0:	6b48      	ldr	r0, [r1, #52]	; 0x34
 80015e2:	6840      	ldr	r0, [r0, #4]
 80015e4:	6348      	str	r0, [r1, #52]	; 0x34
 80015e6:	3230      	adds	r2, #48	; 0x30
 80015e8:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 80015ec:	ea4f 018c 	mov.w	r1, ip, lsl #2
 80015f0:	3108      	adds	r1, #8
 80015f2:	440a      	add	r2, r1
 80015f4:	4290      	cmp	r0, r2
 80015f6:	d00b      	beq.n	8001610 <vTaskSwitchContext+0x7c>
 80015f8:	4909      	ldr	r1, [pc, #36]	; (8001620 <vTaskSwitchContext+0x8c>)
 80015fa:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 80015fe:	0082      	lsls	r2, r0, #2
 8001600:	440a      	add	r2, r1
 8001602:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001604:	68d2      	ldr	r2, [r2, #12]
 8001606:	f8c1 24d4 	str.w	r2, [r1, #1236]	; 0x4d4
 800160a:	f8c1 34e0 	str.w	r3, [r1, #1248]	; 0x4e0
}
 800160e:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001610:	6840      	ldr	r0, [r0, #4]
 8001612:	4662      	mov	r2, ip
 8001614:	0091      	lsls	r1, r2, #2
 8001616:	4a02      	ldr	r2, [pc, #8]	; (8001620 <vTaskSwitchContext+0x8c>)
 8001618:	440a      	add	r2, r1
 800161a:	6350      	str	r0, [r2, #52]	; 0x34
 800161c:	e7ec      	b.n	80015f8 <vTaskSwitchContext+0x64>
 800161e:	bf00      	nop
 8001620:	20000790 	.word	0x20000790

08001624 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8001624:	b160      	cbz	r0, 8001640 <vTaskPlaceOnEventList+0x1c>
{
 8001626:	b510      	push	{r4, lr}
 8001628:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800162a:	4a0b      	ldr	r2, [pc, #44]	; (8001658 <vTaskPlaceOnEventList+0x34>)
 800162c:	f8d2 14d4 	ldr.w	r1, [r2, #1236]	; 0x4d4
 8001630:	3118      	adds	r1, #24
 8001632:	f7ff f88a 	bl	800074a <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001636:	2101      	movs	r1, #1
 8001638:	4620      	mov	r0, r4
 800163a:	f7ff fd6f 	bl	800111c <prvAddCurrentTaskToDelayedList>
}
 800163e:	bd10      	pop	{r4, pc}
 8001640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001644:	b672      	cpsid	i
 8001646:	f383 8811 	msr	BASEPRI, r3
 800164a:	f3bf 8f6f 	isb	sy
 800164e:	f3bf 8f4f 	dsb	sy
 8001652:	b662      	cpsie	i
	configASSERT( pxEventList );
 8001654:	e7fe      	b.n	8001654 <vTaskPlaceOnEventList+0x30>
 8001656:	bf00      	nop
 8001658:	20000790 	.word	0x20000790

0800165c <vTaskPlaceOnEventListRestricted>:
	{
 800165c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 800165e:	b178      	cbz	r0, 8001680 <vTaskPlaceOnEventListRestricted+0x24>
 8001660:	460d      	mov	r5, r1
 8001662:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001664:	4a0c      	ldr	r2, [pc, #48]	; (8001698 <vTaskPlaceOnEventListRestricted+0x3c>)
 8001666:	f8d2 14d4 	ldr.w	r1, [r2, #1236]	; 0x4d4
 800166a:	3118      	adds	r1, #24
 800166c:	f7ff f862 	bl	8000734 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 8001670:	b10c      	cbz	r4, 8001676 <vTaskPlaceOnEventListRestricted+0x1a>
			xTicksToWait = portMAX_DELAY;
 8001672:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001676:	4621      	mov	r1, r4
 8001678:	4628      	mov	r0, r5
 800167a:	f7ff fd4f 	bl	800111c <prvAddCurrentTaskToDelayedList>
	}
 800167e:	bd38      	pop	{r3, r4, r5, pc}
 8001680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001684:	b672      	cpsid	i
 8001686:	f383 8811 	msr	BASEPRI, r3
 800168a:	f3bf 8f6f 	isb	sy
 800168e:	f3bf 8f4f 	dsb	sy
 8001692:	b662      	cpsie	i
		configASSERT( pxEventList );
 8001694:	e7fe      	b.n	8001694 <vTaskPlaceOnEventListRestricted+0x38>
 8001696:	bf00      	nop
 8001698:	20000790 	.word	0x20000790

0800169c <xTaskRemoveFromEventList>:
{
 800169c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800169e:	68c3      	ldr	r3, [r0, #12]
 80016a0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80016a2:	b34c      	cbz	r4, 80016f8 <xTaskRemoveFromEventList+0x5c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80016a4:	f104 0518 	add.w	r5, r4, #24
 80016a8:	4628      	mov	r0, r5
 80016aa:	f7ff f867 	bl	800077c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80016ae:	4b1b      	ldr	r3, [pc, #108]	; (800171c <xTaskRemoveFromEventList+0x80>)
 80016b0:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80016b4:	bb5b      	cbnz	r3, 800170e <xTaskRemoveFromEventList+0x72>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80016b6:	1d25      	adds	r5, r4, #4
 80016b8:	4628      	mov	r0, r5
 80016ba:	f7ff f85f 	bl	800077c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80016be:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80016c0:	4b16      	ldr	r3, [pc, #88]	; (800171c <xTaskRemoveFromEventList+0x80>)
 80016c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80016c6:	4298      	cmp	r0, r3
 80016c8:	d902      	bls.n	80016d0 <xTaskRemoveFromEventList+0x34>
 80016ca:	4b14      	ldr	r3, [pc, #80]	; (800171c <xTaskRemoveFromEventList+0x80>)
 80016cc:	f8c3 04e0 	str.w	r0, [r3, #1248]	; 0x4e0
 80016d0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80016d4:	4629      	mov	r1, r5
 80016d6:	4b12      	ldr	r3, [pc, #72]	; (8001720 <xTaskRemoveFromEventList+0x84>)
 80016d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80016dc:	f7ff f82a 	bl	8000734 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80016e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80016e2:	4b0e      	ldr	r3, [pc, #56]	; (800171c <xTaskRemoveFromEventList+0x80>)
 80016e4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 80016e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d914      	bls.n	8001718 <xTaskRemoveFromEventList+0x7c>
		xYieldPending = pdTRUE;
 80016ee:	2001      	movs	r0, #1
 80016f0:	4b0a      	ldr	r3, [pc, #40]	; (800171c <xTaskRemoveFromEventList+0x80>)
 80016f2:	f8c3 04fc 	str.w	r0, [r3, #1276]	; 0x4fc
}
 80016f6:	bd38      	pop	{r3, r4, r5, pc}
 80016f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016fc:	b672      	cpsid	i
 80016fe:	f383 8811 	msr	BASEPRI, r3
 8001702:	f3bf 8f6f 	isb	sy
 8001706:	f3bf 8f4f 	dsb	sy
 800170a:	b662      	cpsie	i
	configASSERT( pxUnblockedTCB );
 800170c:	e7fe      	b.n	800170c <xTaskRemoveFromEventList+0x70>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800170e:	4629      	mov	r1, r5
 8001710:	4804      	ldr	r0, [pc, #16]	; (8001724 <xTaskRemoveFromEventList+0x88>)
 8001712:	f7ff f80f 	bl	8000734 <vListInsertEnd>
 8001716:	e7e3      	b.n	80016e0 <xTaskRemoveFromEventList+0x44>
		xReturn = pdFALSE;
 8001718:	2000      	movs	r0, #0
	return xReturn;
 800171a:	e7ec      	b.n	80016f6 <xTaskRemoveFromEventList+0x5a>
 800171c:	20000790 	.word	0x20000790
 8001720:	200007c0 	.word	0x200007c0
 8001724:	200007a4 	.word	0x200007a4

08001728 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001728:	4b03      	ldr	r3, [pc, #12]	; (8001738 <vTaskInternalSetTimeOutState+0x10>)
 800172a:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	; 0x4f4
 800172e:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001730:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8001734:	6043      	str	r3, [r0, #4]
}
 8001736:	4770      	bx	lr
 8001738:	20000790 	.word	0x20000790

0800173c <xTaskCheckForTimeOut>:
{
 800173c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800173e:	b1d8      	cbz	r0, 8001778 <xTaskCheckForTimeOut+0x3c>
 8001740:	460c      	mov	r4, r1
 8001742:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8001744:	b319      	cbz	r1, 800178e <xTaskCheckForTimeOut+0x52>
	taskENTER_CRITICAL();
 8001746:	f000 fb4d 	bl	8001de4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800174a:	4b1e      	ldr	r3, [pc, #120]	; (80017c4 <xTaskCheckForTimeOut+0x88>)
 800174c:	f8d3 14e8 	ldr.w	r1, [r3, #1256]	; 0x4e8
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001750:	686b      	ldr	r3, [r5, #4]
 8001752:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 8001754:	6822      	ldr	r2, [r4, #0]
 8001756:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800175a:	d02b      	beq.n	80017b4 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800175c:	4e19      	ldr	r6, [pc, #100]	; (80017c4 <xTaskCheckForTimeOut+0x88>)
 800175e:	f8d6 64f4 	ldr.w	r6, [r6, #1268]	; 0x4f4
 8001762:	682f      	ldr	r7, [r5, #0]
 8001764:	42b7      	cmp	r7, r6
 8001766:	d001      	beq.n	800176c <xTaskCheckForTimeOut+0x30>
 8001768:	428b      	cmp	r3, r1
 800176a:	d928      	bls.n	80017be <xTaskCheckForTimeOut+0x82>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800176c:	4282      	cmp	r2, r0
 800176e:	d819      	bhi.n	80017a4 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8001774:	2401      	movs	r4, #1
 8001776:	e01e      	b.n	80017b6 <xTaskCheckForTimeOut+0x7a>
 8001778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800177c:	b672      	cpsid	i
 800177e:	f383 8811 	msr	BASEPRI, r3
 8001782:	f3bf 8f6f 	isb	sy
 8001786:	f3bf 8f4f 	dsb	sy
 800178a:	b662      	cpsie	i
	configASSERT( pxTimeOut );
 800178c:	e7fe      	b.n	800178c <xTaskCheckForTimeOut+0x50>
 800178e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001792:	b672      	cpsid	i
 8001794:	f383 8811 	msr	BASEPRI, r3
 8001798:	f3bf 8f6f 	isb	sy
 800179c:	f3bf 8f4f 	dsb	sy
 80017a0:	b662      	cpsie	i
	configASSERT( pxTicksToWait );
 80017a2:	e7fe      	b.n	80017a2 <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait -= xElapsedTime;
 80017a4:	1a5b      	subs	r3, r3, r1
 80017a6:	4413      	add	r3, r2
 80017a8:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80017aa:	4628      	mov	r0, r5
 80017ac:	f7ff ffbc 	bl	8001728 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80017b0:	2400      	movs	r4, #0
 80017b2:	e000      	b.n	80017b6 <xTaskCheckForTimeOut+0x7a>
				xReturn = pdFALSE;
 80017b4:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80017b6:	f000 fb3b 	bl	8001e30 <vPortExitCritical>
}
 80017ba:	4620      	mov	r0, r4
 80017bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 80017be:	2401      	movs	r4, #1
 80017c0:	e7f9      	b.n	80017b6 <xTaskCheckForTimeOut+0x7a>
 80017c2:	bf00      	nop
 80017c4:	20000790 	.word	0x20000790

080017c8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80017c8:	4b02      	ldr	r3, [pc, #8]	; (80017d4 <vTaskMissedYield+0xc>)
 80017ca:	2201      	movs	r2, #1
 80017cc:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
}
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	20000790 	.word	0x20000790

080017d8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80017d8:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <xTaskGetSchedulerState+0x1c>)
 80017da:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 80017de:	b13b      	cbz	r3, 80017f0 <xTaskGetSchedulerState+0x18>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80017e0:	4b04      	ldr	r3, [pc, #16]	; (80017f4 <xTaskGetSchedulerState+0x1c>)
 80017e2:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80017e6:	b10b      	cbz	r3, 80017ec <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_SUSPENDED;
 80017e8:	2000      	movs	r0, #0
	}
 80017ea:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 80017ec:	2002      	movs	r0, #2
 80017ee:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80017f0:	2001      	movs	r0, #1
 80017f2:	4770      	bx	lr
 80017f4:	20000790 	.word	0x20000790

080017f8 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80017f8:	2800      	cmp	r0, #0
 80017fa:	d042      	beq.n	8001882 <xTaskPriorityDisinherit+0x8a>
	{
 80017fc:	b538      	push	{r3, r4, r5, lr}
 80017fe:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8001800:	4b22      	ldr	r3, [pc, #136]	; (800188c <xTaskPriorityDisinherit+0x94>)
 8001802:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8001806:	4283      	cmp	r3, r0
 8001808:	d00a      	beq.n	8001820 <xTaskPriorityDisinherit+0x28>
 800180a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800180e:	b672      	cpsid	i
 8001810:	f383 8811 	msr	BASEPRI, r3
 8001814:	f3bf 8f6f 	isb	sy
 8001818:	f3bf 8f4f 	dsb	sy
 800181c:	b662      	cpsie	i
 800181e:	e7fe      	b.n	800181e <xTaskPriorityDisinherit+0x26>
			configASSERT( pxTCB->uxMutexesHeld );
 8001820:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001822:	b953      	cbnz	r3, 800183a <xTaskPriorityDisinherit+0x42>
 8001824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001828:	b672      	cpsid	i
 800182a:	f383 8811 	msr	BASEPRI, r3
 800182e:	f3bf 8f6f 	isb	sy
 8001832:	f3bf 8f4f 	dsb	sy
 8001836:	b662      	cpsie	i
 8001838:	e7fe      	b.n	8001838 <xTaskPriorityDisinherit+0x40>
			( pxTCB->uxMutexesHeld )--;
 800183a:	3b01      	subs	r3, #1
 800183c:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800183e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001840:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001842:	4291      	cmp	r1, r2
 8001844:	d01f      	beq.n	8001886 <xTaskPriorityDisinherit+0x8e>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001846:	b10b      	cbz	r3, 800184c <xTaskPriorityDisinherit+0x54>
	BaseType_t xReturn = pdFALSE;
 8001848:	2000      	movs	r0, #0
	}
 800184a:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800184c:	1d05      	adds	r5, r0, #4
 800184e:	4628      	mov	r0, r5
 8001850:	f7fe ff94 	bl	800077c <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001854:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001856:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001858:	f1c0 0338 	rsb	r3, r0, #56	; 0x38
 800185c:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800185e:	4b0b      	ldr	r3, [pc, #44]	; (800188c <xTaskPriorityDisinherit+0x94>)
 8001860:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8001864:	4298      	cmp	r0, r3
 8001866:	d902      	bls.n	800186e <xTaskPriorityDisinherit+0x76>
 8001868:	4b08      	ldr	r3, [pc, #32]	; (800188c <xTaskPriorityDisinherit+0x94>)
 800186a:	f8c3 04e0 	str.w	r0, [r3, #1248]	; 0x4e0
 800186e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001872:	4629      	mov	r1, r5
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <xTaskPriorityDisinherit+0x98>)
 8001876:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800187a:	f7fe ff5b 	bl	8000734 <vListInsertEnd>
					xReturn = pdTRUE;
 800187e:	2001      	movs	r0, #1
 8001880:	e7e3      	b.n	800184a <xTaskPriorityDisinherit+0x52>
	BaseType_t xReturn = pdFALSE;
 8001882:	2000      	movs	r0, #0
	}
 8001884:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8001886:	2000      	movs	r0, #0
 8001888:	e7df      	b.n	800184a <xTaskPriorityDisinherit+0x52>
 800188a:	bf00      	nop
 800188c:	20000790 	.word	0x20000790
 8001890:	200007c0 	.word	0x200007c0

08001894 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8001894:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <prvGetNextExpireTime+0x1c>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	6813      	ldr	r3, [r2, #0]
 800189a:	b92b      	cbnz	r3, 80018a8 <prvGetNextExpireTime+0x14>
 800189c:	2301      	movs	r3, #1
 800189e:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 80018a0:	b923      	cbnz	r3, 80018ac <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80018a2:	68d3      	ldr	r3, [r2, #12]
 80018a4:	6818      	ldr	r0, [r3, #0]
 80018a6:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80018a8:	2300      	movs	r3, #0
 80018aa:	e7f8      	b.n	800189e <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80018ac:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 80018ae:	4770      	bx	lr
 80018b0:	20000c90 	.word	0x20000c90

080018b4 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80018b4:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80018b6:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80018b8:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 80018ba:	4291      	cmp	r1, r2
 80018bc:	d80c      	bhi.n	80018d8 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80018be:	1ad2      	subs	r2, r2, r3
 80018c0:	6983      	ldr	r3, [r0, #24]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d301      	bcc.n	80018ca <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80018c6:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 80018c8:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80018ca:	1d01      	adds	r1, r0, #4
 80018cc:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <prvInsertTimerInActiveList+0x48>)
 80018ce:	6858      	ldr	r0, [r3, #4]
 80018d0:	f7fe ff3b 	bl	800074a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80018d4:	2000      	movs	r0, #0
 80018d6:	e7f7      	b.n	80018c8 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80018d8:	429a      	cmp	r2, r3
 80018da:	bf2c      	ite	cs
 80018dc:	2200      	movcs	r2, #0
 80018de:	2201      	movcc	r2, #1
 80018e0:	4299      	cmp	r1, r3
 80018e2:	bf38      	it	cc
 80018e4:	2200      	movcc	r2, #0
 80018e6:	b10a      	cbz	r2, 80018ec <prvInsertTimerInActiveList+0x38>
			xProcessTimerNow = pdTRUE;
 80018e8:	2001      	movs	r0, #1
	return xProcessTimerNow;
 80018ea:	e7ed      	b.n	80018c8 <prvInsertTimerInActiveList+0x14>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80018ec:	1d01      	adds	r1, r0, #4
 80018ee:	4b03      	ldr	r3, [pc, #12]	; (80018fc <prvInsertTimerInActiveList+0x48>)
 80018f0:	6818      	ldr	r0, [r3, #0]
 80018f2:	f7fe ff2a 	bl	800074a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80018f6:	2000      	movs	r0, #0
 80018f8:	e7e6      	b.n	80018c8 <prvInsertTimerInActiveList+0x14>
 80018fa:	bf00      	nop
 80018fc:	20000c90 	.word	0x20000c90

08001900 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8001900:	b570      	push	{r4, r5, r6, lr}
 8001902:	b082      	sub	sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8001904:	f000 fa6e 	bl	8001de4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8001908:	4b12      	ldr	r3, [pc, #72]	; (8001954 <prvCheckForValidListAndQueue+0x54>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	b11b      	cbz	r3, 8001916 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800190e:	f000 fa8f 	bl	8001e30 <vPortExitCritical>
}
 8001912:	b002      	add	sp, #8
 8001914:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
 8001916:	4c0f      	ldr	r4, [pc, #60]	; (8001954 <prvCheckForValidListAndQueue+0x54>)
 8001918:	f104 060c 	add.w	r6, r4, #12
 800191c:	4630      	mov	r0, r6
 800191e:	f7fe fefb 	bl	8000718 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8001922:	f104 0520 	add.w	r5, r4, #32
 8001926:	4628      	mov	r0, r5
 8001928:	f7fe fef6 	bl	8000718 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800192c:	6026      	str	r6, [r4, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800192e:	6065      	str	r5, [r4, #4]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8001930:	2300      	movs	r3, #0
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8001938:	f104 0284 	add.w	r2, r4, #132	; 0x84
 800193c:	2110      	movs	r1, #16
 800193e:	200a      	movs	r0, #10
 8001940:	f7ff f824 	bl	800098c <xQueueGenericCreateStatic>
 8001944:	60a0      	str	r0, [r4, #8]
				if( xTimerQueue != NULL )
 8001946:	2800      	cmp	r0, #0
 8001948:	d0e1      	beq.n	800190e <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800194a:	4903      	ldr	r1, [pc, #12]	; (8001958 <prvCheckForValidListAndQueue+0x58>)
 800194c:	f7ff fa6a 	bl	8000e24 <vQueueAddToRegistry>
 8001950:	e7dd      	b.n	800190e <prvCheckForValidListAndQueue+0xe>
 8001952:	bf00      	nop
 8001954:	20000c90 	.word	0x20000c90
 8001958:	080054f4 	.word	0x080054f4

0800195c <xTimerCreateTimerTask>:
{
 800195c:	b510      	push	{r4, lr}
 800195e:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8001960:	f7ff ffce 	bl	8001900 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8001964:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <xTimerCreateTimerTask+0x5c>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	b1d3      	cbz	r3, 80019a0 <xTimerCreateTimerTask+0x44>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800196a:	2400      	movs	r4, #0
 800196c:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800196e:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8001970:	aa07      	add	r2, sp, #28
 8001972:	a906      	add	r1, sp, #24
 8001974:	a805      	add	r0, sp, #20
 8001976:	f7fe febf 	bl	80006f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800197a:	9b05      	ldr	r3, [sp, #20]
 800197c:	9302      	str	r3, [sp, #8]
 800197e:	9b06      	ldr	r3, [sp, #24]
 8001980:	9301      	str	r3, [sp, #4]
 8001982:	2302      	movs	r3, #2
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	4623      	mov	r3, r4
 8001988:	9a07      	ldr	r2, [sp, #28]
 800198a:	490c      	ldr	r1, [pc, #48]	; (80019bc <xTimerCreateTimerTask+0x60>)
 800198c:	480c      	ldr	r0, [pc, #48]	; (80019c0 <xTimerCreateTimerTask+0x64>)
 800198e:	f7ff fbff 	bl	8001190 <xTaskCreateStatic>
 8001992:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <xTimerCreateTimerTask+0x5c>)
 8001994:	f8c3 0124 	str.w	r0, [r3, #292]	; 0x124
			if( xTimerTaskHandle != NULL )
 8001998:	b110      	cbz	r0, 80019a0 <xTimerCreateTimerTask+0x44>
}
 800199a:	2001      	movs	r0, #1
 800199c:	b008      	add	sp, #32
 800199e:	bd10      	pop	{r4, pc}
 80019a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019a4:	b672      	cpsid	i
 80019a6:	f383 8811 	msr	BASEPRI, r3
 80019aa:	f3bf 8f6f 	isb	sy
 80019ae:	f3bf 8f4f 	dsb	sy
 80019b2:	b662      	cpsie	i
	configASSERT( xReturn );
 80019b4:	e7fe      	b.n	80019b4 <xTimerCreateTimerTask+0x58>
 80019b6:	bf00      	nop
 80019b8:	20000c90 	.word	0x20000c90
 80019bc:	080054fc 	.word	0x080054fc
 80019c0:	08001ced 	.word	0x08001ced

080019c4 <xTimerGenericCommand>:
	configASSERT( xTimer );
 80019c4:	b1b8      	cbz	r0, 80019f6 <xTimerGenericCommand+0x32>
 80019c6:	469c      	mov	ip, r3
 80019c8:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 80019ca:	4819      	ldr	r0, [pc, #100]	; (8001a30 <xTimerGenericCommand+0x6c>)
 80019cc:	6880      	ldr	r0, [r0, #8]
 80019ce:	b368      	cbz	r0, 8001a2c <xTimerGenericCommand+0x68>
{
 80019d0:	b500      	push	{lr}
 80019d2:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 80019d4:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80019d6:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80019d8:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80019da:	2905      	cmp	r1, #5
 80019dc:	dc1e      	bgt.n	8001a1c <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80019de:	f7ff fefb 	bl	80017d8 <xTaskGetSchedulerState>
 80019e2:	2802      	cmp	r0, #2
 80019e4:	d012      	beq.n	8001a0c <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80019e6:	2300      	movs	r3, #0
 80019e8:	461a      	mov	r2, r3
 80019ea:	4669      	mov	r1, sp
 80019ec:	4810      	ldr	r0, [pc, #64]	; (8001a30 <xTimerGenericCommand+0x6c>)
 80019ee:	6880      	ldr	r0, [r0, #8]
 80019f0:	f7ff f829 	bl	8000a46 <xQueueGenericSend>
 80019f4:	e017      	b.n	8001a26 <xTimerGenericCommand+0x62>
 80019f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019fa:	b672      	cpsid	i
 80019fc:	f383 8811 	msr	BASEPRI, r3
 8001a00:	f3bf 8f6f 	isb	sy
 8001a04:	f3bf 8f4f 	dsb	sy
 8001a08:	b662      	cpsie	i
	configASSERT( xTimer );
 8001a0a:	e7fe      	b.n	8001a0a <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	9a06      	ldr	r2, [sp, #24]
 8001a10:	4669      	mov	r1, sp
 8001a12:	4807      	ldr	r0, [pc, #28]	; (8001a30 <xTimerGenericCommand+0x6c>)
 8001a14:	6880      	ldr	r0, [r0, #8]
 8001a16:	f7ff f816 	bl	8000a46 <xQueueGenericSend>
 8001a1a:	e004      	b.n	8001a26 <xTimerGenericCommand+0x62>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	4662      	mov	r2, ip
 8001a20:	4669      	mov	r1, sp
 8001a22:	f7ff f8dc 	bl	8000bde <xQueueGenericSendFromISR>
}
 8001a26:	b005      	add	sp, #20
 8001a28:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 8001a2c:	2000      	movs	r0, #0
}
 8001a2e:	4770      	bx	lr
 8001a30:	20000c90 	.word	0x20000c90

08001a34 <prvSwitchTimerLists>:
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8001a34:	4b22      	ldr	r3, [pc, #136]	; (8001ac0 <prvSwitchTimerLists+0x8c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	2a00      	cmp	r2, #0
 8001a3c:	d03b      	beq.n	8001ab6 <prvSwitchTimerLists+0x82>
{
 8001a3e:	b570      	push	{r4, r5, r6, lr}
 8001a40:	b082      	sub	sp, #8
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001a46:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001a48:	1d25      	adds	r5, r4, #4
 8001a4a:	4628      	mov	r0, r5
 8001a4c:	f7fe fe96 	bl	800077c <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001a50:	6a23      	ldr	r3, [r4, #32]
 8001a52:	4620      	mov	r0, r4
 8001a54:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001a56:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8001a5a:	f013 0f04 	tst.w	r3, #4
 8001a5e:	d10a      	bne.n	8001a76 <prvSwitchTimerLists+0x42>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8001a60:	4b17      	ldr	r3, [pc, #92]	; (8001ac0 <prvSwitchTimerLists+0x8c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	2a00      	cmp	r2, #0
 8001a68:	d1eb      	bne.n	8001a42 <prvSwitchTimerLists+0xe>
	pxCurrentTimerList = pxOverflowTimerList;
 8001a6a:	4a15      	ldr	r2, [pc, #84]	; (8001ac0 <prvSwitchTimerLists+0x8c>)
 8001a6c:	6851      	ldr	r1, [r2, #4]
 8001a6e:	6011      	str	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8001a70:	6053      	str	r3, [r2, #4]
}
 8001a72:	b002      	add	sp, #8
 8001a74:	bd70      	pop	{r4, r5, r6, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8001a76:	69a3      	ldr	r3, [r4, #24]
 8001a78:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8001a7a:	429e      	cmp	r6, r3
 8001a7c:	d207      	bcs.n	8001a8e <prvSwitchTimerLists+0x5a>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8001a7e:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8001a80:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8001a82:	4629      	mov	r1, r5
 8001a84:	4b0e      	ldr	r3, [pc, #56]	; (8001ac0 <prvSwitchTimerLists+0x8c>)
 8001a86:	6818      	ldr	r0, [r3, #0]
 8001a88:	f7fe fe5f 	bl	800074a <vListInsert>
 8001a8c:	e7e8      	b.n	8001a60 <prvSwitchTimerLists+0x2c>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8001a8e:	2100      	movs	r1, #0
 8001a90:	9100      	str	r1, [sp, #0]
 8001a92:	460b      	mov	r3, r1
 8001a94:	4632      	mov	r2, r6
 8001a96:	4620      	mov	r0, r4
 8001a98:	f7ff ff94 	bl	80019c4 <xTimerGenericCommand>
				configASSERT( xResult );
 8001a9c:	2800      	cmp	r0, #0
 8001a9e:	d1df      	bne.n	8001a60 <prvSwitchTimerLists+0x2c>
 8001aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aa4:	b672      	cpsid	i
 8001aa6:	f383 8811 	msr	BASEPRI, r3
 8001aaa:	f3bf 8f6f 	isb	sy
 8001aae:	f3bf 8f4f 	dsb	sy
 8001ab2:	b662      	cpsie	i
 8001ab4:	e7fe      	b.n	8001ab4 <prvSwitchTimerLists+0x80>
	pxCurrentTimerList = pxOverflowTimerList;
 8001ab6:	4a02      	ldr	r2, [pc, #8]	; (8001ac0 <prvSwitchTimerLists+0x8c>)
 8001ab8:	6851      	ldr	r1, [r2, #4]
 8001aba:	6011      	str	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8001abc:	6053      	str	r3, [r2, #4]
 8001abe:	4770      	bx	lr
 8001ac0:	20000c90 	.word	0x20000c90

08001ac4 <prvSampleTimeNow>:
{
 8001ac4:	b538      	push	{r3, r4, r5, lr}
 8001ac6:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 8001ac8:	f7ff fc2e 	bl	8001328 <xTaskGetTickCount>
 8001acc:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 8001ace:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <prvSampleTimeNow+0x2c>)
 8001ad0:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8001ad4:	4283      	cmp	r3, r0
 8001ad6:	d806      	bhi.n	8001ae6 <prvSampleTimeNow+0x22>
		*pxTimerListsWereSwitched = pdFALSE;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 8001adc:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <prvSampleTimeNow+0x2c>)
 8001ade:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
}
 8001ae2:	4620      	mov	r0, r4
 8001ae4:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 8001ae6:	f7ff ffa5 	bl	8001a34 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8001aea:	2301      	movs	r3, #1
 8001aec:	602b      	str	r3, [r5, #0]
 8001aee:	e7f5      	b.n	8001adc <prvSampleTimeNow+0x18>
 8001af0:	20000c90 	.word	0x20000c90

08001af4 <prvProcessExpiredTimer>:
{
 8001af4:	b570      	push	{r4, r5, r6, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	4606      	mov	r6, r0
 8001afa:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001afc:	4918      	ldr	r1, [pc, #96]	; (8001b60 <prvProcessExpiredTimer+0x6c>)
 8001afe:	6809      	ldr	r1, [r1, #0]
 8001b00:	68c9      	ldr	r1, [r1, #12]
 8001b02:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001b04:	1d20      	adds	r0, r4, #4
 8001b06:	f7fe fe39 	bl	800077c <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001b0a:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
 8001b0e:	f01c 0f04 	tst.w	ip, #4
 8001b12:	d108      	bne.n	8001b26 <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8001b14:	f02c 0c01 	bic.w	ip, ip, #1
 8001b18:	f884 c028 	strb.w	ip, [r4, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001b1c:	6a23      	ldr	r3, [r4, #32]
 8001b1e:	4620      	mov	r0, r4
 8001b20:	4798      	blx	r3
}
 8001b22:	b002      	add	sp, #8
 8001b24:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8001b26:	69a1      	ldr	r1, [r4, #24]
 8001b28:	4633      	mov	r3, r6
 8001b2a:	462a      	mov	r2, r5
 8001b2c:	4431      	add	r1, r6
 8001b2e:	4620      	mov	r0, r4
 8001b30:	f7ff fec0 	bl	80018b4 <prvInsertTimerInActiveList>
 8001b34:	2800      	cmp	r0, #0
 8001b36:	d0f1      	beq.n	8001b1c <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8001b38:	2100      	movs	r1, #0
 8001b3a:	9100      	str	r1, [sp, #0]
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	4632      	mov	r2, r6
 8001b40:	4620      	mov	r0, r4
 8001b42:	f7ff ff3f 	bl	80019c4 <xTimerGenericCommand>
			configASSERT( xResult );
 8001b46:	2800      	cmp	r0, #0
 8001b48:	d1e8      	bne.n	8001b1c <prvProcessExpiredTimer+0x28>
 8001b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b4e:	b672      	cpsid	i
 8001b50:	f383 8811 	msr	BASEPRI, r3
 8001b54:	f3bf 8f6f 	isb	sy
 8001b58:	f3bf 8f4f 	dsb	sy
 8001b5c:	b662      	cpsie	i
 8001b5e:	e7fe      	b.n	8001b5e <prvProcessExpiredTimer+0x6a>
 8001b60:	20000c90 	.word	0x20000c90

08001b64 <prvProcessTimerOrBlockTask>:
{
 8001b64:	b570      	push	{r4, r5, r6, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	4606      	mov	r6, r0
 8001b6a:	460c      	mov	r4, r1
	vTaskSuspendAll();
 8001b6c:	f7ff fbd2 	bl	8001314 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001b70:	a801      	add	r0, sp, #4
 8001b72:	f7ff ffa7 	bl	8001ac4 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8001b76:	9b01      	ldr	r3, [sp, #4]
 8001b78:	bb3b      	cbnz	r3, 8001bca <prvProcessTimerOrBlockTask+0x66>
 8001b7a:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8001b7c:	42b0      	cmp	r0, r6
 8001b7e:	bf28      	it	cs
 8001b80:	2c00      	cmpcs	r4, #0
 8001b82:	d019      	beq.n	8001bb8 <prvProcessTimerOrBlockTask+0x54>
				if( xListWasEmpty != pdFALSE )
 8001b84:	b124      	cbz	r4, 8001b90 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8001b86:	4a13      	ldr	r2, [pc, #76]	; (8001bd4 <prvProcessTimerOrBlockTask+0x70>)
 8001b88:	6852      	ldr	r2, [r2, #4]
 8001b8a:	6812      	ldr	r2, [r2, #0]
 8001b8c:	b9da      	cbnz	r2, 8001bc6 <prvProcessTimerOrBlockTask+0x62>
 8001b8e:	2401      	movs	r4, #1
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8001b90:	4622      	mov	r2, r4
 8001b92:	1b71      	subs	r1, r6, r5
 8001b94:	4b0f      	ldr	r3, [pc, #60]	; (8001bd4 <prvProcessTimerOrBlockTask+0x70>)
 8001b96:	6898      	ldr	r0, [r3, #8]
 8001b98:	f7ff f958 	bl	8000e4c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8001b9c:	f7ff fc58 	bl	8001450 <xTaskResumeAll>
 8001ba0:	b9a8      	cbnz	r0, 8001bce <prvProcessTimerOrBlockTask+0x6a>
					portYIELD_WITHIN_API();
 8001ba2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001baa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001bae:	f3bf 8f4f 	dsb	sy
 8001bb2:	f3bf 8f6f 	isb	sy
 8001bb6:	e00a      	b.n	8001bce <prvProcessTimerOrBlockTask+0x6a>
				( void ) xTaskResumeAll();
 8001bb8:	f7ff fc4a 	bl	8001450 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8001bbc:	4629      	mov	r1, r5
 8001bbe:	4630      	mov	r0, r6
 8001bc0:	f7ff ff98 	bl	8001af4 <prvProcessExpiredTimer>
 8001bc4:	e003      	b.n	8001bce <prvProcessTimerOrBlockTask+0x6a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8001bc6:	461c      	mov	r4, r3
 8001bc8:	e7e2      	b.n	8001b90 <prvProcessTimerOrBlockTask+0x2c>
			( void ) xTaskResumeAll();
 8001bca:	f7ff fc41 	bl	8001450 <xTaskResumeAll>
}
 8001bce:	b002      	add	sp, #8
 8001bd0:	bd70      	pop	{r4, r5, r6, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20000c90 	.word	0x20000c90

08001bd8 <prvProcessReceivedCommands>:
{
 8001bd8:	b510      	push	{r4, lr}
 8001bda:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8001bdc:	e002      	b.n	8001be4 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8001bde:	9b04      	ldr	r3, [sp, #16]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	da0f      	bge.n	8001c04 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8001be4:	2200      	movs	r2, #0
 8001be6:	a904      	add	r1, sp, #16
 8001be8:	4b3f      	ldr	r3, [pc, #252]	; (8001ce8 <prvProcessReceivedCommands+0x110>)
 8001bea:	6898      	ldr	r0, [r3, #8]
 8001bec:	f7ff f865 	bl	8000cba <xQueueReceive>
 8001bf0:	2800      	cmp	r0, #0
 8001bf2:	d077      	beq.n	8001ce4 <prvProcessReceivedCommands+0x10c>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8001bf4:	9b04      	ldr	r3, [sp, #16]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	daf1      	bge.n	8001bde <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8001bfa:	9907      	ldr	r1, [sp, #28]
 8001bfc:	9806      	ldr	r0, [sp, #24]
 8001bfe:	9b05      	ldr	r3, [sp, #20]
 8001c00:	4798      	blx	r3
 8001c02:	e7ec      	b.n	8001bde <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8001c04:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8001c06:	6963      	ldr	r3, [r4, #20]
 8001c08:	b113      	cbz	r3, 8001c10 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001c0a:	1d20      	adds	r0, r4, #4
 8001c0c:	f7fe fdb6 	bl	800077c <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001c10:	a803      	add	r0, sp, #12
 8001c12:	f7ff ff57 	bl	8001ac4 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8001c16:	9b04      	ldr	r3, [sp, #16]
 8001c18:	2b09      	cmp	r3, #9
 8001c1a:	d8e3      	bhi.n	8001be4 <prvProcessReceivedCommands+0xc>
 8001c1c:	e8df f003 	tbb	[pc, r3]
 8001c20:	32050505 	.word	0x32050505
 8001c24:	05055439 	.word	0x05055439
 8001c28:	3932      	.short	0x3932
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8001c2a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8001c2e:	f043 0301 	orr.w	r3, r3, #1
 8001c32:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8001c36:	9b05      	ldr	r3, [sp, #20]
 8001c38:	69a1      	ldr	r1, [r4, #24]
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	4419      	add	r1, r3
 8001c3e:	4620      	mov	r0, r4
 8001c40:	f7ff fe38 	bl	80018b4 <prvInsertTimerInActiveList>
 8001c44:	2800      	cmp	r0, #0
 8001c46:	d0cd      	beq.n	8001be4 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001c48:	6a23      	ldr	r3, [r4, #32]
 8001c4a:	4620      	mov	r0, r4
 8001c4c:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001c4e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8001c52:	f013 0f04 	tst.w	r3, #4
 8001c56:	d0c5      	beq.n	8001be4 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8001c58:	69a2      	ldr	r2, [r4, #24]
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	9100      	str	r1, [sp, #0]
 8001c5e:	460b      	mov	r3, r1
 8001c60:	9805      	ldr	r0, [sp, #20]
 8001c62:	4402      	add	r2, r0
 8001c64:	4620      	mov	r0, r4
 8001c66:	f7ff fead 	bl	80019c4 <xTimerGenericCommand>
							configASSERT( xResult );
 8001c6a:	2800      	cmp	r0, #0
 8001c6c:	d1ba      	bne.n	8001be4 <prvProcessReceivedCommands+0xc>
 8001c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c72:	b672      	cpsid	i
 8001c74:	f383 8811 	msr	BASEPRI, r3
 8001c78:	f3bf 8f6f 	isb	sy
 8001c7c:	f3bf 8f4f 	dsb	sy
 8001c80:	b662      	cpsie	i
 8001c82:	e7fe      	b.n	8001c82 <prvProcessReceivedCommands+0xaa>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8001c84:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8001c88:	f023 0301 	bic.w	r3, r3, #1
 8001c8c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					break;
 8001c90:	e7a8      	b.n	8001be4 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8001c92:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8001c96:	f043 0301 	orr.w	r3, r3, #1
 8001c9a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8001c9e:	9905      	ldr	r1, [sp, #20]
 8001ca0:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8001ca2:	b131      	cbz	r1, 8001cb2 <prvProcessReceivedCommands+0xda>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	4401      	add	r1, r0
 8001caa:	4620      	mov	r0, r4
 8001cac:	f7ff fe02 	bl	80018b4 <prvInsertTimerInActiveList>
					break;
 8001cb0:	e798      	b.n	8001be4 <prvProcessReceivedCommands+0xc>
 8001cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cb6:	b672      	cpsid	i
 8001cb8:	f383 8811 	msr	BASEPRI, r3
 8001cbc:	f3bf 8f6f 	isb	sy
 8001cc0:	f3bf 8f4f 	dsb	sy
 8001cc4:	b662      	cpsie	i
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8001cc6:	e7fe      	b.n	8001cc6 <prvProcessReceivedCommands+0xee>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8001cc8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8001ccc:	f013 0f02 	tst.w	r3, #2
 8001cd0:	d004      	beq.n	8001cdc <prvProcessReceivedCommands+0x104>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8001cd2:	f023 0301 	bic.w	r3, r3, #1
 8001cd6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8001cda:	e783      	b.n	8001be4 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 8001cdc:	4620      	mov	r0, r4
 8001cde:	f000 fa7d 	bl	80021dc <vPortFree>
 8001ce2:	e77f      	b.n	8001be4 <prvProcessReceivedCommands+0xc>
}
 8001ce4:	b008      	add	sp, #32
 8001ce6:	bd10      	pop	{r4, pc}
 8001ce8:	20000c90 	.word	0x20000c90

08001cec <prvTimerTask>:
{
 8001cec:	b500      	push	{lr}
 8001cee:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001cf0:	a801      	add	r0, sp, #4
 8001cf2:	f7ff fdcf 	bl	8001894 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8001cf6:	9901      	ldr	r1, [sp, #4]
 8001cf8:	f7ff ff34 	bl	8001b64 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 8001cfc:	f7ff ff6c 	bl	8001bd8 <prvProcessReceivedCommands>
	for( ;; )
 8001d00:	e7f6      	b.n	8001cf0 <prvTimerTask+0x4>
	...

08001d04 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001d04:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8001d06:	2300      	movs	r3, #0
 8001d08:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001d0a:	4b0f      	ldr	r3, [pc, #60]	; (8001d48 <prvTaskExitError+0x44>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d12:	d00a      	beq.n	8001d2a <prvTaskExitError+0x26>
 8001d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d18:	b672      	cpsid	i
 8001d1a:	f383 8811 	msr	BASEPRI, r3
 8001d1e:	f3bf 8f6f 	isb	sy
 8001d22:	f3bf 8f4f 	dsb	sy
 8001d26:	b662      	cpsie	i
 8001d28:	e7fe      	b.n	8001d28 <prvTaskExitError+0x24>
 8001d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d2e:	b672      	cpsid	i
 8001d30:	f383 8811 	msr	BASEPRI, r3
 8001d34:	f3bf 8f6f 	isb	sy
 8001d38:	f3bf 8f4f 	dsb	sy
 8001d3c:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8001d3e:	9b01      	ldr	r3, [sp, #4]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d0fc      	beq.n	8001d3e <prvTaskExitError+0x3a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8001d44:	b002      	add	sp, #8
 8001d46:	4770      	bx	lr
 8001d48:	20000000 	.word	0x20000000

08001d4c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8001d4c:	4808      	ldr	r0, [pc, #32]	; (8001d70 <prvPortStartFirstTask+0x24>)
 8001d4e:	6800      	ldr	r0, [r0, #0]
 8001d50:	6800      	ldr	r0, [r0, #0]
 8001d52:	f380 8808 	msr	MSP, r0
 8001d56:	f04f 0000 	mov.w	r0, #0
 8001d5a:	f380 8814 	msr	CONTROL, r0
 8001d5e:	b662      	cpsie	i
 8001d60:	b661      	cpsie	f
 8001d62:	f3bf 8f4f 	dsb	sy
 8001d66:	f3bf 8f6f 	isb	sy
 8001d6a:	df00      	svc	0
 8001d6c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8001d6e:	0000      	.short	0x0000
 8001d70:	e000ed08 	.word	0xe000ed08

08001d74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001d74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001d84 <vPortEnableVFP+0x10>
 8001d78:	6801      	ldr	r1, [r0, #0]
 8001d7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001d7e:	6001      	str	r1, [r0, #0]
 8001d80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8001d82:	0000      	.short	0x0000
 8001d84:	e000ed88 	.word	0xe000ed88

08001d88 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001d88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d8c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001d90:	f021 0101 	bic.w	r1, r1, #1
 8001d94:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001d98:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <pxPortInitialiseStack+0x28>)
 8001d9a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001d9e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001da2:	f06f 0302 	mvn.w	r3, #2
 8001da6:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8001daa:	3844      	subs	r0, #68	; 0x44
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	08001d05 	.word	0x08001d05
	...

08001dc0 <SVC_Handler>:
	__asm volatile (
 8001dc0:	4b07      	ldr	r3, [pc, #28]	; (8001de0 <pxCurrentTCBConst2>)
 8001dc2:	6819      	ldr	r1, [r3, #0]
 8001dc4:	6808      	ldr	r0, [r1, #0]
 8001dc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001dca:	f380 8809 	msr	PSP, r0
 8001dce:	f3bf 8f6f 	isb	sy
 8001dd2:	f04f 0000 	mov.w	r0, #0
 8001dd6:	f380 8811 	msr	BASEPRI, r0
 8001dda:	4770      	bx	lr
 8001ddc:	f3af 8000 	nop.w

08001de0 <pxCurrentTCBConst2>:
 8001de0:	20000c64 	.word	0x20000c64

08001de4 <vPortEnterCritical>:
 8001de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001de8:	b672      	cpsid	i
 8001dea:	f383 8811 	msr	BASEPRI, r3
 8001dee:	f3bf 8f6f 	isb	sy
 8001df2:	f3bf 8f4f 	dsb	sy
 8001df6:	b662      	cpsie	i
	uxCriticalNesting++;
 8001df8:	4a0c      	ldr	r2, [pc, #48]	; (8001e2c <vPortEnterCritical+0x48>)
 8001dfa:	6813      	ldr	r3, [r2, #0]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d000      	beq.n	8001e06 <vPortEnterCritical+0x22>
}
 8001e04:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001e06:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001e0a:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8001e0e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001e12:	d0f7      	beq.n	8001e04 <vPortEnterCritical+0x20>
 8001e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e18:	b672      	cpsid	i
 8001e1a:	f383 8811 	msr	BASEPRI, r3
 8001e1e:	f3bf 8f6f 	isb	sy
 8001e22:	f3bf 8f4f 	dsb	sy
 8001e26:	b662      	cpsie	i
 8001e28:	e7fe      	b.n	8001e28 <vPortEnterCritical+0x44>
 8001e2a:	bf00      	nop
 8001e2c:	20000000 	.word	0x20000000

08001e30 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8001e30:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <vPortExitCritical+0x2c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	b953      	cbnz	r3, 8001e4c <vPortExitCritical+0x1c>
 8001e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e3a:	b672      	cpsid	i
 8001e3c:	f383 8811 	msr	BASEPRI, r3
 8001e40:	f3bf 8f6f 	isb	sy
 8001e44:	f3bf 8f4f 	dsb	sy
 8001e48:	b662      	cpsie	i
 8001e4a:	e7fe      	b.n	8001e4a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	4a03      	ldr	r2, [pc, #12]	; (8001e5c <vPortExitCritical+0x2c>)
 8001e50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001e52:	b90b      	cbnz	r3, 8001e58 <vPortExitCritical+0x28>
	__asm volatile
 8001e54:	f383 8811 	msr	BASEPRI, r3
}
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	20000000 	.word	0x20000000

08001e60 <PendSV_Handler>:
	__asm volatile
 8001e60:	f3ef 8009 	mrs	r0, PSP
 8001e64:	f3bf 8f6f 	isb	sy
 8001e68:	4b15      	ldr	r3, [pc, #84]	; (8001ec0 <pxCurrentTCBConst>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	f01e 0f10 	tst.w	lr, #16
 8001e70:	bf08      	it	eq
 8001e72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001e76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e7a:	6010      	str	r0, [r2, #0]
 8001e7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001e80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001e84:	b672      	cpsid	i
 8001e86:	f380 8811 	msr	BASEPRI, r0
 8001e8a:	f3bf 8f4f 	dsb	sy
 8001e8e:	f3bf 8f6f 	isb	sy
 8001e92:	b662      	cpsie	i
 8001e94:	f7ff fb7e 	bl	8001594 <vTaskSwitchContext>
 8001e98:	f04f 0000 	mov.w	r0, #0
 8001e9c:	f380 8811 	msr	BASEPRI, r0
 8001ea0:	bc09      	pop	{r0, r3}
 8001ea2:	6819      	ldr	r1, [r3, #0]
 8001ea4:	6808      	ldr	r0, [r1, #0]
 8001ea6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001eaa:	f01e 0f10 	tst.w	lr, #16
 8001eae:	bf08      	it	eq
 8001eb0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001eb4:	f380 8809 	msr	PSP, r0
 8001eb8:	f3bf 8f6f 	isb	sy
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop

08001ec0 <pxCurrentTCBConst>:
 8001ec0:	20000c64 	.word	0x20000c64

08001ec4 <SysTick_Handler>:
{
 8001ec4:	b508      	push	{r3, lr}
	__asm volatile
 8001ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eca:	b672      	cpsid	i
 8001ecc:	f383 8811 	msr	BASEPRI, r3
 8001ed0:	f3bf 8f6f 	isb	sy
 8001ed4:	f3bf 8f4f 	dsb	sy
 8001ed8:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 8001eda:	f7ff fa2b 	bl	8001334 <xTaskIncrementTick>
 8001ede:	b128      	cbz	r0, 8001eec <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001ee0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001ee4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ee8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8001eec:	2300      	movs	r3, #0
 8001eee:	f383 8811 	msr	BASEPRI, r3
}
 8001ef2:	bd08      	pop	{r3, pc}

08001ef4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001ef4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8001ef8:	2300      	movs	r3, #0
 8001efa:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001efc:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001efe:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <vPortSetupTimerInterrupt+0x20>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4905      	ldr	r1, [pc, #20]	; (8001f18 <vPortSetupTimerInterrupt+0x24>)
 8001f04:	fba1 1303 	umull	r1, r3, r1, r3
 8001f08:	099b      	lsrs	r3, r3, #6
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001f0e:	2307      	movs	r3, #7
 8001f10:	6113      	str	r3, [r2, #16]
}
 8001f12:	4770      	bx	lr
 8001f14:	20000004 	.word	0x20000004
 8001f18:	10624dd3 	.word	0x10624dd3

08001f1c <xPortStartScheduler>:
{
 8001f1c:	b530      	push	{r4, r5, lr}
 8001f1e:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001f20:	4b2f      	ldr	r3, [pc, #188]	; (8001fe0 <xPortStartScheduler+0xc4>)
 8001f22:	781a      	ldrb	r2, [r3, #0]
 8001f24:	b2d2      	uxtb	r2, r2
 8001f26:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001f28:	22ff      	movs	r2, #255	; 0xff
 8001f2a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001f34:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001f38:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001f3c:	4a29      	ldr	r2, [pc, #164]	; (8001fe4 <xPortStartScheduler+0xc8>)
 8001f3e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001f40:	2307      	movs	r3, #7
 8001f42:	6053      	str	r3, [r2, #4]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001f44:	e009      	b.n	8001f5a <xPortStartScheduler+0x3e>
			ulMaxPRIGROUPValue--;
 8001f46:	4a27      	ldr	r2, [pc, #156]	; (8001fe4 <xPortStartScheduler+0xc8>)
 8001f48:	6853      	ldr	r3, [r2, #4]
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	6053      	str	r3, [r2, #4]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001f4e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001f5a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001f5e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001f62:	d1f0      	bne.n	8001f46 <xPortStartScheduler+0x2a>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001f64:	4b1f      	ldr	r3, [pc, #124]	; (8001fe4 <xPortStartScheduler+0xc8>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	2b03      	cmp	r3, #3
 8001f6a:	d00a      	beq.n	8001f82 <xPortStartScheduler+0x66>
	__asm volatile
 8001f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f70:	b672      	cpsid	i
 8001f72:	f383 8811 	msr	BASEPRI, r3
 8001f76:	f3bf 8f6f 	isb	sy
 8001f7a:	f3bf 8f4f 	dsb	sy
 8001f7e:	b662      	cpsie	i
 8001f80:	e7fe      	b.n	8001f80 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001f82:	021b      	lsls	r3, r3, #8
 8001f84:	4a17      	ldr	r2, [pc, #92]	; (8001fe4 <xPortStartScheduler+0xc8>)
 8001f86:	6053      	str	r3, [r2, #4]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001f88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f8c:	6053      	str	r3, [r2, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001f8e:	9b01      	ldr	r3, [sp, #4]
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	4a13      	ldr	r2, [pc, #76]	; (8001fe0 <xPortStartScheduler+0xc4>)
 8001f94:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001f96:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 8001f9a:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8001f9e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fa2:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001fa6:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8001faa:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001fae:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8001fb2:	f7ff ff9f 	bl	8001ef4 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8001fb6:	2500      	movs	r5, #0
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <xPortStartScheduler+0xcc>)
 8001fba:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8001fbc:	f7ff feda 	bl	8001d74 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001fc0:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8001fc4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001fc8:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8001fcc:	f7ff febe 	bl	8001d4c <prvPortStartFirstTask>
	vTaskSwitchContext();
 8001fd0:	f7ff fae0 	bl	8001594 <vTaskSwitchContext>
	prvTaskExitError();
 8001fd4:	f7ff fe96 	bl	8001d04 <prvTaskExitError>
}
 8001fd8:	4628      	mov	r0, r5
 8001fda:	b003      	add	sp, #12
 8001fdc:	bd30      	pop	{r4, r5, pc}
 8001fde:	bf00      	nop
 8001fe0:	e000e400 	.word	0xe000e400
 8001fe4:	20000dbc 	.word	0x20000dbc
 8001fe8:	20000000 	.word	0x20000000

08001fec <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8001fec:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001ff0:	2b0f      	cmp	r3, #15
 8001ff2:	d911      	bls.n	8002018 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8001ff4:	4a13      	ldr	r2, [pc, #76]	; (8002044 <vPortValidateInterruptPriority+0x58>)
 8001ff6:	5c9b      	ldrb	r3, [r3, r2]
 8001ff8:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001ffa:	4a13      	ldr	r2, [pc, #76]	; (8002048 <vPortValidateInterruptPriority+0x5c>)
 8001ffc:	7812      	ldrb	r2, [r2, #0]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d90a      	bls.n	8002018 <vPortValidateInterruptPriority+0x2c>
 8002002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002006:	b672      	cpsid	i
 8002008:	f383 8811 	msr	BASEPRI, r3
 800200c:	f3bf 8f6f 	isb	sy
 8002010:	f3bf 8f4f 	dsb	sy
 8002014:	b662      	cpsie	i
 8002016:	e7fe      	b.n	8002016 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002018:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800201c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8002020:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002024:	4a08      	ldr	r2, [pc, #32]	; (8002048 <vPortValidateInterruptPriority+0x5c>)
 8002026:	6852      	ldr	r2, [r2, #4]
 8002028:	4293      	cmp	r3, r2
 800202a:	d90a      	bls.n	8002042 <vPortValidateInterruptPriority+0x56>
 800202c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002030:	b672      	cpsid	i
 8002032:	f383 8811 	msr	BASEPRI, r3
 8002036:	f3bf 8f6f 	isb	sy
 800203a:	f3bf 8f4f 	dsb	sy
 800203e:	b662      	cpsie	i
 8002040:	e7fe      	b.n	8002040 <vPortValidateInterruptPriority+0x54>
	}
 8002042:	4770      	bx	lr
 8002044:	e000e3f0 	.word	0xe000e3f0
 8002048:	20000dbc 	.word	0x20000dbc

0800204c <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800204c:	4a10      	ldr	r2, [pc, #64]	; (8002090 <prvHeapInit+0x44>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800204e:	f012 0f07 	tst.w	r2, #7
 8002052:	d01a      	beq.n	800208a <prvHeapInit+0x3e>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002054:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002056:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800205a:	f5c1 5370 	rsb	r3, r1, #15360	; 0x3c00
 800205e:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002060:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002062:	490c      	ldr	r1, [pc, #48]	; (8002094 <prvHeapInit+0x48>)
 8002064:	600a      	str	r2, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002066:	2000      	movs	r0, #0
 8002068:	6048      	str	r0, [r1, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800206a:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800206c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800206e:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8002072:	608b      	str	r3, [r1, #8]
	pxEnd->xBlockSize = 0;
 8002074:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002076:	6018      	str	r0, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002078:	1a98      	subs	r0, r3, r2
 800207a:	6050      	str	r0, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800207c:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800207e:	60c8      	str	r0, [r1, #12]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002080:	6108      	str	r0, [r1, #16]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002082:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002086:	614b      	str	r3, [r1, #20]
}
 8002088:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800208a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800208e:	e7e8      	b.n	8002062 <prvHeapInit+0x16>
 8002090:	20000ddc 	.word	0x20000ddc
 8002094:	20000dc4 	.word	0x20000dc4

08002098 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002098:	4b16      	ldr	r3, [pc, #88]	; (80020f4 <prvInsertBlockIntoFreeList+0x5c>)
 800209a:	461a      	mov	r2, r3
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4283      	cmp	r3, r0
 80020a0:	d3fb      	bcc.n	800209a <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80020a2:	6851      	ldr	r1, [r2, #4]
 80020a4:	eb02 0c01 	add.w	ip, r2, r1
 80020a8:	4584      	cmp	ip, r0
 80020aa:	d009      	beq.n	80020c0 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80020ac:	6841      	ldr	r1, [r0, #4]
 80020ae:	eb00 0c01 	add.w	ip, r0, r1
 80020b2:	4563      	cmp	r3, ip
 80020b4:	d009      	beq.n	80020ca <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80020b6:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80020b8:	4290      	cmp	r0, r2
 80020ba:	d019      	beq.n	80020f0 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80020bc:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 80020be:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80020c0:	6840      	ldr	r0, [r0, #4]
 80020c2:	4401      	add	r1, r0
 80020c4:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 80020c6:	4610      	mov	r0, r2
 80020c8:	e7f0      	b.n	80020ac <prvInsertBlockIntoFreeList+0x14>
{
 80020ca:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80020cc:	4c09      	ldr	r4, [pc, #36]	; (80020f4 <prvInsertBlockIntoFreeList+0x5c>)
 80020ce:	68a4      	ldr	r4, [r4, #8]
 80020d0:	42a3      	cmp	r3, r4
 80020d2:	d00b      	beq.n	80020ec <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	4419      	add	r1, r3
 80020d8:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80020da:	6813      	ldr	r3, [r2, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 80020e0:	4290      	cmp	r0, r2
 80020e2:	d000      	beq.n	80020e6 <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80020e4:	6010      	str	r0, [r2, #0]
	}
}
 80020e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80020ea:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80020ec:	6004      	str	r4, [r0, #0]
 80020ee:	e7f7      	b.n	80020e0 <prvInsertBlockIntoFreeList+0x48>
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	20000dc4 	.word	0x20000dc4

080020f8 <pvPortMalloc>:
{
 80020f8:	b570      	push	{r4, r5, r6, lr}
 80020fa:	4605      	mov	r5, r0
	vTaskSuspendAll();
 80020fc:	f7ff f90a 	bl	8001314 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8002100:	4b35      	ldr	r3, [pc, #212]	; (80021d8 <pvPortMalloc+0xe0>)
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	b1a3      	cbz	r3, 8002130 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002106:	4b34      	ldr	r3, [pc, #208]	; (80021d8 <pvPortMalloc+0xe0>)
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	421d      	tst	r5, r3
 800210c:	d14b      	bne.n	80021a6 <pvPortMalloc+0xae>
			if( xWantedSize > 0 )
 800210e:	b135      	cbz	r5, 800211e <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 8002110:	3508      	adds	r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002112:	f015 0f07 	tst.w	r5, #7
 8002116:	d002      	beq.n	800211e <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002118:	f025 0507 	bic.w	r5, r5, #7
 800211c:	3508      	adds	r5, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800211e:	2d00      	cmp	r5, #0
 8002120:	d043      	beq.n	80021aa <pvPortMalloc+0xb2>
 8002122:	4b2d      	ldr	r3, [pc, #180]	; (80021d8 <pvPortMalloc+0xe0>)
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	42ab      	cmp	r3, r5
 8002128:	d350      	bcc.n	80021cc <pvPortMalloc+0xd4>
				pxBlock = xStart.pxNextFreeBlock;
 800212a:	4a2b      	ldr	r2, [pc, #172]	; (80021d8 <pvPortMalloc+0xe0>)
 800212c:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800212e:	e004      	b.n	800213a <pvPortMalloc+0x42>
			prvHeapInit();
 8002130:	f7ff ff8c 	bl	800204c <prvHeapInit>
 8002134:	e7e7      	b.n	8002106 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 8002136:	4622      	mov	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8002138:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800213a:	6863      	ldr	r3, [r4, #4]
 800213c:	42ab      	cmp	r3, r5
 800213e:	d202      	bcs.n	8002146 <pvPortMalloc+0x4e>
 8002140:	6823      	ldr	r3, [r4, #0]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1f7      	bne.n	8002136 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 8002146:	4b24      	ldr	r3, [pc, #144]	; (80021d8 <pvPortMalloc+0xe0>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	42a3      	cmp	r3, r4
 800214c:	d040      	beq.n	80021d0 <pvPortMalloc+0xd8>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800214e:	6816      	ldr	r6, [r2, #0]
 8002150:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002152:	6823      	ldr	r3, [r4, #0]
 8002154:	6013      	str	r3, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002156:	6863      	ldr	r3, [r4, #4]
 8002158:	1b5b      	subs	r3, r3, r5
 800215a:	2b10      	cmp	r3, #16
 800215c:	d912      	bls.n	8002184 <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800215e:	1960      	adds	r0, r4, r5
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002160:	f010 0f07 	tst.w	r0, #7
 8002164:	d00a      	beq.n	800217c <pvPortMalloc+0x84>
 8002166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800216a:	b672      	cpsid	i
 800216c:	f383 8811 	msr	BASEPRI, r3
 8002170:	f3bf 8f6f 	isb	sy
 8002174:	f3bf 8f4f 	dsb	sy
 8002178:	b662      	cpsie	i
 800217a:	e7fe      	b.n	800217a <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800217c:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800217e:	6065      	str	r5, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002180:	f7ff ff8a 	bl	8002098 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002184:	6861      	ldr	r1, [r4, #4]
 8002186:	4a14      	ldr	r2, [pc, #80]	; (80021d8 <pvPortMalloc+0xe0>)
 8002188:	6913      	ldr	r3, [r2, #16]
 800218a:	1a5b      	subs	r3, r3, r1
 800218c:	6113      	str	r3, [r2, #16]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800218e:	68d2      	ldr	r2, [r2, #12]
 8002190:	4293      	cmp	r3, r2
 8002192:	d201      	bcs.n	8002198 <pvPortMalloc+0xa0>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002194:	4a10      	ldr	r2, [pc, #64]	; (80021d8 <pvPortMalloc+0xe0>)
 8002196:	60d3      	str	r3, [r2, #12]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002198:	4b0f      	ldr	r3, [pc, #60]	; (80021d8 <pvPortMalloc+0xe0>)
 800219a:	695b      	ldr	r3, [r3, #20]
 800219c:	430b      	orrs	r3, r1
 800219e:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	6023      	str	r3, [r4, #0]
 80021a4:	e002      	b.n	80021ac <pvPortMalloc+0xb4>
void *pvReturn = NULL;
 80021a6:	2600      	movs	r6, #0
 80021a8:	e000      	b.n	80021ac <pvPortMalloc+0xb4>
 80021aa:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 80021ac:	f7ff f950 	bl	8001450 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80021b0:	f016 0f07 	tst.w	r6, #7
 80021b4:	d00e      	beq.n	80021d4 <pvPortMalloc+0xdc>
 80021b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ba:	b672      	cpsid	i
 80021bc:	f383 8811 	msr	BASEPRI, r3
 80021c0:	f3bf 8f6f 	isb	sy
 80021c4:	f3bf 8f4f 	dsb	sy
 80021c8:	b662      	cpsie	i
 80021ca:	e7fe      	b.n	80021ca <pvPortMalloc+0xd2>
void *pvReturn = NULL;
 80021cc:	2600      	movs	r6, #0
 80021ce:	e7ed      	b.n	80021ac <pvPortMalloc+0xb4>
 80021d0:	2600      	movs	r6, #0
 80021d2:	e7eb      	b.n	80021ac <pvPortMalloc+0xb4>
}
 80021d4:	4630      	mov	r0, r6
 80021d6:	bd70      	pop	{r4, r5, r6, pc}
 80021d8:	20000dc4 	.word	0x20000dc4

080021dc <vPortFree>:
	if( pv != NULL )
 80021dc:	2800      	cmp	r0, #0
 80021de:	d034      	beq.n	800224a <vPortFree+0x6e>
{
 80021e0:	b538      	push	{r3, r4, r5, lr}
 80021e2:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 80021e4:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80021e8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80021ec:	4a17      	ldr	r2, [pc, #92]	; (800224c <vPortFree+0x70>)
 80021ee:	6952      	ldr	r2, [r2, #20]
 80021f0:	4213      	tst	r3, r2
 80021f2:	d10a      	bne.n	800220a <vPortFree+0x2e>
 80021f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021f8:	b672      	cpsid	i
 80021fa:	f383 8811 	msr	BASEPRI, r3
 80021fe:	f3bf 8f6f 	isb	sy
 8002202:	f3bf 8f4f 	dsb	sy
 8002206:	b662      	cpsie	i
 8002208:	e7fe      	b.n	8002208 <vPortFree+0x2c>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800220a:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800220e:	b151      	cbz	r1, 8002226 <vPortFree+0x4a>
 8002210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002214:	b672      	cpsid	i
 8002216:	f383 8811 	msr	BASEPRI, r3
 800221a:	f3bf 8f6f 	isb	sy
 800221e:	f3bf 8f4f 	dsb	sy
 8002222:	b662      	cpsie	i
 8002224:	e7fe      	b.n	8002224 <vPortFree+0x48>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002226:	ea23 0302 	bic.w	r3, r3, r2
 800222a:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800222e:	f7ff f871 	bl	8001314 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002232:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8002236:	4a05      	ldr	r2, [pc, #20]	; (800224c <vPortFree+0x70>)
 8002238:	6913      	ldr	r3, [r2, #16]
 800223a:	440b      	add	r3, r1
 800223c:	6113      	str	r3, [r2, #16]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800223e:	4628      	mov	r0, r5
 8002240:	f7ff ff2a 	bl	8002098 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8002244:	f7ff f904 	bl	8001450 <xTaskResumeAll>
}
 8002248:	bd38      	pop	{r3, r4, r5, pc}
 800224a:	4770      	bx	lr
 800224c:	20000dc4 	.word	0x20000dc4

08002250 <Gyro_Thread>:
	USB_UART_ptr->Init.Mode = UART_MODE_TX_RX;
	USB_UART_ptr->Init.HwFlowCtl = UART_HWCONTROL_NONE;
	HAL_UART_Init(&USB_UART);
}

void Gyro_Thread(void *argument) {
 8002250:	b538      	push	{r3, r4, r5, lr}
	void I2C_init();

	uint8_t init_status = MPU6050_Init(&hi2c1);
 8002252:	4809      	ldr	r0, [pc, #36]	; (8002278 <Gyro_Thread+0x28>)
 8002254:	f000 fa1e 	bl	8002694 <MPU6050_Init>

	while(1) {
//		HAL_Delay(100);
		osDelay(100);
 8002258:	2064      	movs	r0, #100	; 0x64
 800225a:	f7fe fa21 	bl	80006a0 <osDelay>
		MPU6050_Read_Accel(&hi2c1, &mpu6050);
 800225e:	4c06      	ldr	r4, [pc, #24]	; (8002278 <Gyro_Thread+0x28>)
 8002260:	f104 0558 	add.w	r5, r4, #88	; 0x58
 8002264:	4629      	mov	r1, r5
 8002266:	4620      	mov	r0, r4
 8002268:	f000 fa66 	bl	8002738 <MPU6050_Read_Accel>
		uint16_t acc_x = (uint16_t) mpu6050.Ax;
		uint16_t acc_y = (uint16_t) mpu6050.Ay;
		uint16_t acc_z = (uint16_t) mpu6050.Az;
//		printf("Accelerometer X is %d, Y is %d, Z is %d \n\r", acc_x, acc_y, acc_z);
		MPU6050_Read_Gyro(&hi2c1, &mpu6050);
 800226c:	4629      	mov	r1, r5
 800226e:	4620      	mov	r0, r4
 8002270:	f000 faae 	bl	80027d0 <MPU6050_Read_Gyro>
	while(1) {
 8002274:	e7f0      	b.n	8002258 <Gyro_Thread+0x8>
 8002276:	bf00      	nop
 8002278:	200049e0 	.word	0x200049e0

0800227c <main>:
int main(void) {
 800227c:	b508      	push	{r3, lr}
	Sys_Init();
 800227e:	f000 f9ed 	bl	800265c <Sys_Init>
	osKernelInitialize();
 8002282:	f7fe f95f 	bl	8000544 <osKernelInitialize>
	GyroThreadHandle = osThreadNew(Gyro_Thread, NULL, &Gyro_Thread_attributes);
 8002286:	4d0a      	ldr	r5, [pc, #40]	; (80022b0 <main+0x34>)
 8002288:	462a      	mov	r2, r5
 800228a:	2100      	movs	r1, #0
 800228c:	4809      	ldr	r0, [pc, #36]	; (80022b4 <main+0x38>)
 800228e:	f7fe f99b 	bl	80005c8 <osThreadNew>
 8002292:	4c09      	ldr	r4, [pc, #36]	; (80022b8 <main+0x3c>)
 8002294:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
	UART_ThreadHandle = osThreadNew(UART_Thread, NULL, &UART_Thread_attributes);
 8002298:	f105 0224 	add.w	r2, r5, #36	; 0x24
 800229c:	2100      	movs	r1, #0
 800229e:	4807      	ldr	r0, [pc, #28]	; (80022bc <main+0x40>)
 80022a0:	f7fe f992 	bl	80005c8 <osThreadNew>
 80022a4:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	osKernelStart();
 80022a8:	f7fe f96a 	bl	8000580 <osKernelStart>
	while (1) {
 80022ac:	e7fe      	b.n	80022ac <main+0x30>
 80022ae:	bf00      	nop
 80022b0:	0800548c 	.word	0x0800548c
 80022b4:	08002251 	.word	0x08002251
 80022b8:	200049e0 	.word	0x200049e0
 80022bc:	080022fd 	.word	0x080022fd

080022c0 <USART1_IRQHandler>:
void USART1_IRQHandler(void) {
 80022c0:	b508      	push	{r3, lr}
	HAL_UART_IRQHandler(&USB_UART);
 80022c2:	4802      	ldr	r0, [pc, #8]	; (80022cc <USART1_IRQHandler+0xc>)
 80022c4:	f001 ff66 	bl	8004194 <HAL_UART_IRQHandler>
}
 80022c8:	bd08      	pop	{r3, pc}
 80022ca:	bf00      	nop
 80022cc:	20004ae4 	.word	0x20004ae4

080022d0 <UART_init>:
void UART_init() {
 80022d0:	b508      	push	{r3, lr}
	USB_UART_ptr->Instance = USART1;
 80022d2:	4808      	ldr	r0, [pc, #32]	; (80022f4 <UART_init+0x24>)
 80022d4:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <UART_init+0x28>)
 80022d6:	6003      	str	r3, [r0, #0]
	USB_UART_ptr->Init.BaudRate = 115200;
 80022d8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80022dc:	6043      	str	r3, [r0, #4]
	USB_UART_ptr->Init.WordLength = UART_WORDLENGTH_8B;
 80022de:	2300      	movs	r3, #0
 80022e0:	6083      	str	r3, [r0, #8]
	USB_UART_ptr->Init.StopBits = UART_STOPBITS_1;
 80022e2:	60c3      	str	r3, [r0, #12]
	USB_UART_ptr->Init.Parity = UART_PARITY_NONE;
 80022e4:	6103      	str	r3, [r0, #16]
	USB_UART_ptr->Init.Mode = UART_MODE_TX_RX;
 80022e6:	220c      	movs	r2, #12
 80022e8:	6142      	str	r2, [r0, #20]
	USB_UART_ptr->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ea:	6183      	str	r3, [r0, #24]
	HAL_UART_Init(&USB_UART);
 80022ec:	f002 fbf2 	bl	8004ad4 <HAL_UART_Init>
}
 80022f0:	bd08      	pop	{r3, pc}
 80022f2:	bf00      	nop
 80022f4:	20004ae4 	.word	0x20004ae4
 80022f8:	40011000 	.word	0x40011000

080022fc <UART_Thread>:
		uint16_t gyro_z = (uint16_t) mpu6050.Gz;
//		printf("Gyro X is %d, Y is %d, Z is %d \n\r", gyro_x, gyro_y, gyro_z);
	}
}

void UART_Thread(void *argument) {
 80022fc:	b508      	push	{r3, lr}
	UART_init();
 80022fe:	f7ff ffe7 	bl	80022d0 <UART_init>
	while (1) {
 8002302:	e7fe      	b.n	8002302 <UART_Thread+0x6>

08002304 <SystemClock_Config>:
  *            Main regulator output voltage  = Scale1 mode
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
void SystemClock_Config(void) {
 8002304:	b500      	push	{lr}
 8002306:	b093      	sub	sp, #76	; 0x4c
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002308:	2301      	movs	r3, #1
 800230a:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800230c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002310:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002312:	2302      	movs	r3, #2
 8002314:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002316:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800231a:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.PLL.PLLM = 25;
 800231c:	2219      	movs	r2, #25
 800231e:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 432;
 8002320:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8002324:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002326:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002328:	2309      	movs	r3, #9
 800232a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = 7;
 800232c:	2307      	movs	r3, #7
 800232e:	930c      	str	r3, [sp, #48]	; 0x30

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8002330:	4668      	mov	r0, sp
 8002332:	f001 f919 	bl	8003568 <HAL_RCC_OscConfig>
  if(ret != HAL_OK) {
 8002336:	b100      	cbz	r0, 800233a <SystemClock_Config+0x36>
    while(1) { ; }
 8002338:	e7fe      	b.n	8002338 <SystemClock_Config+0x34>
  }

  /* Activate the OverDrive to reach the 216 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
 800233a:	f001 f8d7 	bl	80034ec <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK) {
 800233e:	b100      	cbz	r0, 8002342 <SystemClock_Config+0x3e>
    while(1) { ; }
 8002340:	e7fe      	b.n	8002340 <SystemClock_Config+0x3c>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8002342:	230f      	movs	r3, #15
 8002344:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002346:	2302      	movs	r3, #2
 8002348:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800234a:	2300      	movs	r3, #0
 800234c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800234e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002352:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002354:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002358:	9311      	str	r3, [sp, #68]	; 0x44

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 800235a:	2107      	movs	r1, #7
 800235c:	a80d      	add	r0, sp, #52	; 0x34
 800235e:	f001 fb77 	bl	8003a50 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK) {
 8002362:	b100      	cbz	r0, 8002366 <SystemClock_Config+0x62>
    while(1) { ; }
 8002364:	e7fe      	b.n	8002364 <SystemClock_Config+0x60>
  }
}
 8002366:	b013      	add	sp, #76	; 0x4c
 8002368:	f85d fb04 	ldr.w	pc, [sp], #4

0800236c <CPU_CACHE_Enable>:

// Enables CPU Instruction and Data Caches
void CPU_CACHE_Enable(void) {
 800236c:	b410      	push	{r4}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800236e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002372:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8002376:	4b1c      	ldr	r3, [pc, #112]	; (80023e8 <CPU_CACHE_Enable+0x7c>)
 8002378:	2100      	movs	r1, #0
 800237a:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800237e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002382:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002386:	695a      	ldr	r2, [r3, #20]
 8002388:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800238c:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800238e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002392:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8002396:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800239a:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800239e:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80023a2:	f3c4 304e 	ubfx	r0, r4, #13, #15
 80023a6:	e000      	b.n	80023aa <CPU_CACHE_Enable+0x3e>
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
    } while(sets-- != 0U);
 80023a8:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80023aa:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80023ae:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80023b2:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 80023b6:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 80023ba:	490b      	ldr	r1, [pc, #44]	; (80023e8 <CPU_CACHE_Enable+0x7c>)
 80023bc:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 80023c0:	4613      	mov	r3, r2
 80023c2:	3a01      	subs	r2, #1
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1f2      	bne.n	80023ae <CPU_CACHE_Enable+0x42>
    } while(sets-- != 0U);
 80023c8:	1e43      	subs	r3, r0, #1
 80023ca:	2800      	cmp	r0, #0
 80023cc:	d1ec      	bne.n	80023a8 <CPU_CACHE_Enable+0x3c>
 80023ce:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80023d2:	694b      	ldr	r3, [r1, #20]
 80023d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d8:	614b      	str	r3, [r1, #20]
 80023da:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80023de:	f3bf 8f6f 	isb	sy
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 80023e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	e000ed00 	.word	0xe000ed00

080023ec <Clock_Inits>:
	initUart(&USB_UART, 115200, USART1);
	setbuf(stdout, NULL);
}

// Initializes clocks for various peripherals. Some might need to be added!
void Clock_Inits(void) {
 80023ec:	b0a2      	sub	sp, #136	; 0x88
	// Clock all GPIO ports and Timers.
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80023ee:	4b9a      	ldr	r3, [pc, #616]	; (8002658 <Clock_Inits+0x26c>)
 80023f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023f2:	f042 0201 	orr.w	r2, r2, #1
 80023f6:	631a      	str	r2, [r3, #48]	; 0x30
 80023f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023fa:	f002 0201 	and.w	r2, r2, #1
 80023fe:	9200      	str	r2, [sp, #0]
 8002400:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002402:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002404:	f042 0202 	orr.w	r2, r2, #2
 8002408:	631a      	str	r2, [r3, #48]	; 0x30
 800240a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800240c:	f002 0202 	and.w	r2, r2, #2
 8002410:	9201      	str	r2, [sp, #4]
 8002412:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002414:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002416:	f042 0204 	orr.w	r2, r2, #4
 800241a:	631a      	str	r2, [r3, #48]	; 0x30
 800241c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800241e:	f002 0204 	and.w	r2, r2, #4
 8002422:	9202      	str	r2, [sp, #8]
 8002424:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002426:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002428:	f042 0208 	orr.w	r2, r2, #8
 800242c:	631a      	str	r2, [r3, #48]	; 0x30
 800242e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002430:	f002 0208 	and.w	r2, r2, #8
 8002434:	9203      	str	r2, [sp, #12]
 8002436:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8002438:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800243a:	f042 0210 	orr.w	r2, r2, #16
 800243e:	631a      	str	r2, [r3, #48]	; 0x30
 8002440:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002442:	f002 0210 	and.w	r2, r2, #16
 8002446:	9204      	str	r2, [sp, #16]
 8002448:	9a04      	ldr	r2, [sp, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800244a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800244c:	f042 0220 	orr.w	r2, r2, #32
 8002450:	631a      	str	r2, [r3, #48]	; 0x30
 8002452:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002454:	f002 0220 	and.w	r2, r2, #32
 8002458:	9205      	str	r2, [sp, #20]
 800245a:	9a05      	ldr	r2, [sp, #20]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800245c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800245e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002462:	631a      	str	r2, [r3, #48]	; 0x30
 8002464:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002466:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800246a:	9206      	str	r2, [sp, #24]
 800246c:	9a06      	ldr	r2, [sp, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800246e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002470:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002474:	631a      	str	r2, [r3, #48]	; 0x30
 8002476:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002478:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800247c:	9207      	str	r2, [sp, #28]
 800247e:	9a07      	ldr	r2, [sp, #28]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 8002480:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002482:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002486:	631a      	str	r2, [r3, #48]	; 0x30
 8002488:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800248a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800248e:	9208      	str	r2, [sp, #32]
 8002490:	9a08      	ldr	r2, [sp, #32]
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 8002492:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002494:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002498:	631a      	str	r2, [r3, #48]	; 0x30
 800249a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800249c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80024a0:	9209      	str	r2, [sp, #36]	; 0x24
 80024a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
	__HAL_RCC_GPIOK_CLK_ENABLE();
 80024a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024aa:	631a      	str	r2, [r3, #48]	; 0x30
 80024ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024ae:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80024b2:	920a      	str	r2, [sp, #40]	; 0x28
 80024b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 80024b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024bc:	645a      	str	r2, [r3, #68]	; 0x44
 80024be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024c0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80024c4:	920b      	str	r2, [sp, #44]	; 0x2c
 80024c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	__HAL_RCC_TIM1_CLK_ENABLE();
 80024c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024ca:	f042 0201 	orr.w	r2, r2, #1
 80024ce:	645a      	str	r2, [r3, #68]	; 0x44
 80024d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024d2:	f002 0201 	and.w	r2, r2, #1
 80024d6:	920c      	str	r2, [sp, #48]	; 0x30
 80024d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	__HAL_RCC_TIM2_CLK_ENABLE();
 80024da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024dc:	f042 0201 	orr.w	r2, r2, #1
 80024e0:	641a      	str	r2, [r3, #64]	; 0x40
 80024e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024e4:	f002 0201 	and.w	r2, r2, #1
 80024e8:	920d      	str	r2, [sp, #52]	; 0x34
 80024ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	__HAL_RCC_TIM3_CLK_ENABLE();
 80024ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024ee:	f042 0202 	orr.w	r2, r2, #2
 80024f2:	641a      	str	r2, [r3, #64]	; 0x40
 80024f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024f6:	f002 0202 	and.w	r2, r2, #2
 80024fa:	920e      	str	r2, [sp, #56]	; 0x38
 80024fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	__HAL_RCC_TIM4_CLK_ENABLE();
 80024fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002500:	f042 0204 	orr.w	r2, r2, #4
 8002504:	641a      	str	r2, [r3, #64]	; 0x40
 8002506:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002508:	f002 0204 	and.w	r2, r2, #4
 800250c:	920f      	str	r2, [sp, #60]	; 0x3c
 800250e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
	__HAL_RCC_TIM5_CLK_ENABLE();
 8002510:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002512:	f042 0208 	orr.w	r2, r2, #8
 8002516:	641a      	str	r2, [r3, #64]	; 0x40
 8002518:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800251a:	f002 0208 	and.w	r2, r2, #8
 800251e:	9210      	str	r2, [sp, #64]	; 0x40
 8002520:	9a10      	ldr	r2, [sp, #64]	; 0x40
	__HAL_RCC_TIM6_CLK_ENABLE();
 8002522:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002524:	f042 0210 	orr.w	r2, r2, #16
 8002528:	641a      	str	r2, [r3, #64]	; 0x40
 800252a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800252c:	f002 0210 	and.w	r2, r2, #16
 8002530:	9211      	str	r2, [sp, #68]	; 0x44
 8002532:	9a11      	ldr	r2, [sp, #68]	; 0x44
	__HAL_RCC_TIM7_CLK_ENABLE();
 8002534:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002536:	f042 0220 	orr.w	r2, r2, #32
 800253a:	641a      	str	r2, [r3, #64]	; 0x40
 800253c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800253e:	f002 0220 	and.w	r2, r2, #32
 8002542:	9212      	str	r2, [sp, #72]	; 0x48
 8002544:	9a12      	ldr	r2, [sp, #72]	; 0x48
	__HAL_RCC_TIM8_CLK_ENABLE();
 8002546:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002548:	f042 0202 	orr.w	r2, r2, #2
 800254c:	645a      	str	r2, [r3, #68]	; 0x44
 800254e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002550:	f002 0202 	and.w	r2, r2, #2
 8002554:	9213      	str	r2, [sp, #76]	; 0x4c
 8002556:	9a13      	ldr	r2, [sp, #76]	; 0x4c
	__HAL_RCC_TIM9_CLK_ENABLE();
 8002558:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800255a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800255e:	645a      	str	r2, [r3, #68]	; 0x44
 8002560:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002562:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8002566:	9214      	str	r2, [sp, #80]	; 0x50
 8002568:	9a14      	ldr	r2, [sp, #80]	; 0x50
	__HAL_RCC_TIM10_CLK_ENABLE();
 800256a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800256c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002570:	645a      	str	r2, [r3, #68]	; 0x44
 8002572:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002574:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002578:	9215      	str	r2, [sp, #84]	; 0x54
 800257a:	9a15      	ldr	r2, [sp, #84]	; 0x54
	__HAL_RCC_TIM11_CLK_ENABLE();
 800257c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800257e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002582:	645a      	str	r2, [r3, #68]	; 0x44
 8002584:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002586:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800258a:	9216      	str	r2, [sp, #88]	; 0x58
 800258c:	9a16      	ldr	r2, [sp, #88]	; 0x58
	__HAL_RCC_TIM12_CLK_ENABLE();
 800258e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002590:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002594:	641a      	str	r2, [r3, #64]	; 0x40
 8002596:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002598:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800259c:	9217      	str	r2, [sp, #92]	; 0x5c
 800259e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
	__HAL_RCC_TIM13_CLK_ENABLE();
 80025a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025a6:	641a      	str	r2, [r3, #64]	; 0x40
 80025a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025aa:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80025ae:	9218      	str	r2, [sp, #96]	; 0x60
 80025b0:	9a18      	ldr	r2, [sp, #96]	; 0x60
	__HAL_RCC_TIM14_CLK_ENABLE();
 80025b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025b8:	641a      	str	r2, [r3, #64]	; 0x40
 80025ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025bc:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80025c0:	9219      	str	r2, [sp, #100]	; 0x64
 80025c2:	9a19      	ldr	r2, [sp, #100]	; 0x64

	// Enable SPI2 clock
	__HAL_RCC_SPI2_CLK_ENABLE();
 80025c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025ca:	641a      	str	r2, [r3, #64]	; 0x40
 80025cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025ce:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80025d2:	921a      	str	r2, [sp, #104]	; 0x68
 80025d4:	9a1a      	ldr	r2, [sp, #104]	; 0x68

	// ADC and DAC
	__HAL_RCC_DAC_CLK_ENABLE();
 80025d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025d8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80025dc:	641a      	str	r2, [r3, #64]	; 0x40
 80025de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025e0:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 80025e4:	921b      	str	r2, [sp, #108]	; 0x6c
 80025e6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
	__HAL_RCC_ADC1_CLK_ENABLE();
 80025e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025ee:	645a      	str	r2, [r3, #68]	; 0x44
 80025f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025f2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80025f6:	921c      	str	r2, [sp, #112]	; 0x70
 80025f8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
	__HAL_RCC_ADC2_CLK_ENABLE();
 80025fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002600:	645a      	str	r2, [r3, #68]	; 0x44
 8002602:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002604:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002608:	921d      	str	r2, [sp, #116]	; 0x74
 800260a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
	__HAL_RCC_ADC3_CLK_ENABLE();
 800260c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800260e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002612:	645a      	str	r2, [r3, #68]	; 0x44
 8002614:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002616:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800261a:	921e      	str	r2, [sp, #120]	; 0x78
 800261c:	9a1e      	ldr	r2, [sp, #120]	; 0x78

	// DMA Clocks
	__HAL_RCC_DMA1_CLK_ENABLE();
 800261e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002620:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002624:	631a      	str	r2, [r3, #48]	; 0x30
 8002626:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002628:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800262c:	921f      	str	r2, [sp, #124]	; 0x7c
 800262e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
	__HAL_RCC_DMA2_CLK_ENABLE();
 8002630:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002632:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002636:	631a      	str	r2, [r3, #48]	; 0x30
 8002638:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800263a:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800263e:	9220      	str	r2, [sp, #128]	; 0x80
 8002640:	9a20      	ldr	r2, [sp, #128]	; 0x80

	// I2C Clock
	__HAL_RCC_I2C1_CLK_ENABLE();
 8002642:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002644:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002648:	641a      	str	r2, [r3, #64]	; 0x40
 800264a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002650:	9321      	str	r3, [sp, #132]	; 0x84
 8002652:	9b21      	ldr	r3, [sp, #132]	; 0x84

}
 8002654:	b022      	add	sp, #136	; 0x88
 8002656:	4770      	bx	lr
 8002658:	40023800 	.word	0x40023800

0800265c <Sys_Init>:
void Sys_Init(void) {
 800265c:	b508      	push	{r3, lr}
	CPU_CACHE_Enable();		// Enable CPU Caching
 800265e:	f7ff fe85 	bl	800236c <CPU_CACHE_Enable>
	HAL_Init();				// Initialize HAL
 8002662:	f000 fa13 	bl	8002a8c <HAL_Init>
	SystemClock_Config(); 	// Configure the system clock to 216 MHz
 8002666:	f7ff fe4d 	bl	8002304 <SystemClock_Config>
	Clock_Inits();
 800266a:	f7ff febf 	bl	80023ec <Clock_Inits>
	initUart(&USB_UART, 115200, USART1);
 800266e:	4a06      	ldr	r2, [pc, #24]	; (8002688 <Sys_Init+0x2c>)
 8002670:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8002674:	4805      	ldr	r0, [pc, #20]	; (800268c <Sys_Init+0x30>)
 8002676:	f000 f9ab 	bl	80029d0 <initUart>
	setbuf(stdout, NULL);
 800267a:	4b05      	ldr	r3, [pc, #20]	; (8002690 <Sys_Init+0x34>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2100      	movs	r1, #0
 8002680:	6898      	ldr	r0, [r3, #8]
 8002682:	f002 fa93 	bl	8004bac <setbuf>
}
 8002686:	bd08      	pop	{r3, pc}
 8002688:	40011000 	.word	0x40011000
 800268c:	20004ae4 	.word	0x20004ae4
 8002690:	20000010 	.word	0x20000010

08002694 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8002694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002698:	b086      	sub	sp, #24
 800269a:	4605      	mov	r5, r0
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 800269c:	2364      	movs	r3, #100	; 0x64
 800269e:	9302      	str	r3, [sp, #8]
 80026a0:	2301      	movs	r3, #1
 80026a2:	9301      	str	r3, [sp, #4]
 80026a4:	f10d 0217 	add.w	r2, sp, #23
 80026a8:	9200      	str	r2, [sp, #0]
 80026aa:	2275      	movs	r2, #117	; 0x75
 80026ac:	21d0      	movs	r1, #208	; 0xd0
 80026ae:	f000 fe45 	bl	800333c <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 80026b2:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80026b6:	2b68      	cmp	r3, #104	; 0x68
 80026b8:	d003      	beq.n	80026c2 <MPU6050_Init+0x2e>
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
        return 0;
    }
    return 1;
 80026ba:	2001      	movs	r0, #1
}
 80026bc:	b006      	add	sp, #24
 80026be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        Data = 0;
 80026c2:	2400      	movs	r4, #0
 80026c4:	f88d 4016 	strb.w	r4, [sp, #22]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80026c8:	f04f 0864 	mov.w	r8, #100	; 0x64
 80026cc:	f8cd 8008 	str.w	r8, [sp, #8]
 80026d0:	2601      	movs	r6, #1
 80026d2:	9601      	str	r6, [sp, #4]
 80026d4:	f10d 0716 	add.w	r7, sp, #22
 80026d8:	9700      	str	r7, [sp, #0]
 80026da:	4633      	mov	r3, r6
 80026dc:	226b      	movs	r2, #107	; 0x6b
 80026de:	21d0      	movs	r1, #208	; 0xd0
 80026e0:	4628      	mov	r0, r5
 80026e2:	f000 fd55 	bl	8003190 <HAL_I2C_Mem_Write>
        Data = 0x07;
 80026e6:	2307      	movs	r3, #7
 80026e8:	f88d 3016 	strb.w	r3, [sp, #22]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 80026ec:	f8cd 8008 	str.w	r8, [sp, #8]
 80026f0:	9601      	str	r6, [sp, #4]
 80026f2:	9700      	str	r7, [sp, #0]
 80026f4:	4633      	mov	r3, r6
 80026f6:	2219      	movs	r2, #25
 80026f8:	21d0      	movs	r1, #208	; 0xd0
 80026fa:	4628      	mov	r0, r5
 80026fc:	f000 fd48 	bl	8003190 <HAL_I2C_Mem_Write>
        Data = 0x00;
 8002700:	f88d 4016 	strb.w	r4, [sp, #22]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002704:	f8cd 8008 	str.w	r8, [sp, #8]
 8002708:	9601      	str	r6, [sp, #4]
 800270a:	9700      	str	r7, [sp, #0]
 800270c:	4633      	mov	r3, r6
 800270e:	221c      	movs	r2, #28
 8002710:	21d0      	movs	r1, #208	; 0xd0
 8002712:	4628      	mov	r0, r5
 8002714:	f000 fd3c 	bl	8003190 <HAL_I2C_Mem_Write>
        Data = 0x00;
 8002718:	f88d 4016 	strb.w	r4, [sp, #22]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800271c:	f8cd 8008 	str.w	r8, [sp, #8]
 8002720:	9601      	str	r6, [sp, #4]
 8002722:	9700      	str	r7, [sp, #0]
 8002724:	4633      	mov	r3, r6
 8002726:	221b      	movs	r2, #27
 8002728:	21d0      	movs	r1, #208	; 0xd0
 800272a:	4628      	mov	r0, r5
 800272c:	f000 fd30 	bl	8003190 <HAL_I2C_Mem_Write>
        return 0;
 8002730:	4620      	mov	r0, r4
 8002732:	e7c3      	b.n	80026bc <MPU6050_Init+0x28>
 8002734:	0000      	movs	r0, r0
	...

08002738 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8002738:	b510      	push	{r4, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	460c      	mov	r4, r1
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 800273e:	2364      	movs	r3, #100	; 0x64
 8002740:	9302      	str	r3, [sp, #8]
 8002742:	2306      	movs	r3, #6
 8002744:	9301      	str	r3, [sp, #4]
 8002746:	ab04      	add	r3, sp, #16
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	2301      	movs	r3, #1
 800274c:	223b      	movs	r2, #59	; 0x3b
 800274e:	21d0      	movs	r1, #208	; 0xd0
 8002750:	f000 fdf4 	bl	800333c <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8002754:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002758:	f89d 2011 	ldrb.w	r2, [sp, #17]
 800275c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002760:	b212      	sxth	r2, r2
 8002762:	8022      	strh	r2, [r4, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8002764:	f89d 1012 	ldrb.w	r1, [sp, #18]
 8002768:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800276c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002770:	b21b      	sxth	r3, r3
 8002772:	8063      	strh	r3, [r4, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8002774:	f89d 0014 	ldrb.w	r0, [sp, #20]
 8002778:	f89d 1015 	ldrb.w	r1, [sp, #21]
 800277c:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8002780:	b209      	sxth	r1, r1
 8002782:	80a1      	strh	r1, [r4, #4]
    /*** convert the RAW values into acceleration in 'g'
         we have to divide according to the Full scale value set in FS_SEL
         I have configured FS_SEL = 0. So I am dividing by 16384.0
         for more details check ACCEL_CONFIG Register              ****/

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8002784:	ee07 2a90 	vmov	s15, r2
 8002788:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800278c:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 80027c0 <MPU6050_Read_Accel+0x88>
 8002790:	ee26 6b05 	vmul.f64	d6, d6, d5
 8002794:	ed84 6b02 	vstr	d6, [r4, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8002798:	ee07 3a90 	vmov	s15, r3
 800279c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80027a0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80027a4:	ed84 7b04 	vstr	d7, [r4, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 80027a8:	ee07 1a90 	vmov	s15, r1
 80027ac:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80027b0:	ed9f 5b05 	vldr	d5, [pc, #20]	; 80027c8 <MPU6050_Read_Accel+0x90>
 80027b4:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80027b8:	ed84 6b06 	vstr	d6, [r4, #24]
}
 80027bc:	b006      	add	sp, #24
 80027be:	bd10      	pop	{r4, pc}
 80027c0:	00000000 	.word	0x00000000
 80027c4:	3f100000 	.word	0x3f100000
 80027c8:	00000000 	.word	0x00000000
 80027cc:	40cc2900 	.word	0x40cc2900

080027d0 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 80027d0:	b510      	push	{r4, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	460c      	mov	r4, r1
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from GYRO_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 80027d6:	2364      	movs	r3, #100	; 0x64
 80027d8:	9302      	str	r3, [sp, #8]
 80027da:	2306      	movs	r3, #6
 80027dc:	9301      	str	r3, [sp, #4]
 80027de:	ab04      	add	r3, sp, #16
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	2301      	movs	r3, #1
 80027e4:	2243      	movs	r2, #67	; 0x43
 80027e6:	21d0      	movs	r1, #208	; 0xd0
 80027e8:	f000 fda8 	bl	800333c <HAL_I2C_Mem_Read>

    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 80027ec:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80027f0:	f89d 1011 	ldrb.w	r1, [sp, #17]
 80027f4:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 80027f8:	b209      	sxth	r1, r1
 80027fa:	8421      	strh	r1, [r4, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80027fc:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8002800:	f89d 2013 	ldrb.w	r2, [sp, #19]
 8002804:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002808:	b212      	sxth	r2, r2
 800280a:	8462      	strh	r2, [r4, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 800280c:	f89d 0014 	ldrb.w	r0, [sp, #20]
 8002810:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8002814:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002818:	b21b      	sxth	r3, r3
 800281a:	84a3      	strh	r3, [r4, #36]	; 0x24
    /*** convert the RAW values into dps (�/s)
         we have to divide according to the Full scale value set in FS_SEL
         I have configured FS_SEL = 0. So I am dividing by 131.0
         for more details check GYRO_CONFIG Register              ****/

    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800281c:	ee07 1a90 	vmov	s15, r1
 8002820:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002824:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8002858 <MPU6050_Read_Gyro+0x88>
 8002828:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800282c:	ed84 5b0a 	vstr	d5, [r4, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8002830:	ee07 2a90 	vmov	s15, r2
 8002834:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002838:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800283c:	ed84 5b0c 	vstr	d5, [r4, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8002840:	ee07 3a90 	vmov	s15, r3
 8002844:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002848:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800284c:	ed84 5b0e 	vstr	d5, [r4, #56]	; 0x38
}
 8002850:	b006      	add	sp, #24
 8002852:	bd10      	pop	{r4, pc}
 8002854:	f3af 8000 	nop.w
 8002858:	00000000 	.word	0x00000000
 800285c:	40606000 	.word	0x40606000

08002860 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002860:	b500      	push	{lr}
 8002862:	b089      	sub	sp, #36	; 0x24
 8002864:	4601      	mov	r1, r0
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8002866:	2200      	movs	r2, #0
 8002868:	2037      	movs	r0, #55	; 0x37
 800286a:	f000 f93d 	bl	8002ae8 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800286e:	2037      	movs	r0, #55	; 0x37
 8002870:	f000 f970 	bl	8002b54 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8002874:	4b15      	ldr	r3, [pc, #84]	; (80028cc <HAL_InitTick+0x6c>)
 8002876:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002878:	f042 0220 	orr.w	r2, r2, #32
 800287c:	641a      	str	r2, [r3, #64]	; 0x40
 800287e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002880:	f003 0320 	and.w	r3, r3, #32
 8002884:	9301      	str	r3, [sp, #4]
 8002886:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002888:	a902      	add	r1, sp, #8
 800288a:	a803      	add	r0, sp, #12
 800288c:	f001 f9bc 	bl	8003c08 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002890:	f001 f99a 	bl	8003bc8 <HAL_RCC_GetPCLK1Freq>
 8002894:	0043      	lsls	r3, r0, #1

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002896:	480e      	ldr	r0, [pc, #56]	; (80028d0 <HAL_InitTick+0x70>)
 8002898:	fba0 2303 	umull	r2, r3, r0, r3
 800289c:	0c9b      	lsrs	r3, r3, #18
 800289e:	3b01      	subs	r3, #1

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80028a0:	480c      	ldr	r0, [pc, #48]	; (80028d4 <HAL_InitTick+0x74>)
 80028a2:	4a0d      	ldr	r2, [pc, #52]	; (80028d8 <HAL_InitTick+0x78>)
 80028a4:	6002      	str	r2, [r0, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 80028a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80028aa:	60c2      	str	r2, [r0, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80028ac:	6043      	str	r3, [r0, #4]
  htim7.Init.ClockDivision = 0;
 80028ae:	2300      	movs	r3, #0
 80028b0:	6103      	str	r3, [r0, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028b2:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 80028b4:	f001 fb6a 	bl	8003f8c <HAL_TIM_Base_Init>
 80028b8:	b118      	cbz	r0, 80028c2 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
  }

  /* Return function status */
  return HAL_ERROR;
 80028ba:	2001      	movs	r0, #1
}
 80028bc:	b009      	add	sp, #36	; 0x24
 80028be:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim7);
 80028c2:	4804      	ldr	r0, [pc, #16]	; (80028d4 <HAL_InitTick+0x74>)
 80028c4:	f001 f9c0 	bl	8003c48 <HAL_TIM_Base_Start_IT>
 80028c8:	e7f8      	b.n	80028bc <HAL_InitTick+0x5c>
 80028ca:	bf00      	nop
 80028cc:	40023800 	.word	0x40023800
 80028d0:	431bde83 	.word	0x431bde83
 80028d4:	20004a98 	.word	0x20004a98
 80028d8:	40001400 	.word	0x40001400

080028dc <TIM7_IRQHandler>:
  /* Enable TIM7 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim7, TIM_IT_UPDATE);
}

void TIM7_IRQHandler(void)
{
 80028dc:	b508      	push	{r3, lr}
  HAL_TIM_IRQHandler(&htim7);
 80028de:	4802      	ldr	r0, [pc, #8]	; (80028e8 <TIM7_IRQHandler+0xc>)
 80028e0:	f001 f9ff 	bl	8003ce2 <HAL_TIM_IRQHandler>
}
 80028e4:	bd08      	pop	{r3, pc}
 80028e6:	bf00      	nop
 80028e8:	20004a98 	.word	0x20004a98

080028ec <HAL_UART_MspInit>:

UART_HandleTypeDef USB_UART;
// Initialize Hardware Resources
// Peripheral's clock enable
// Peripheral's GPIO Configuration
void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 80028ec:	b530      	push	{r4, r5, lr}
 80028ee:	b08b      	sub	sp, #44	; 0x2c
	GPIO_InitTypeDef  GPIO_InitStruct;

	if (huart->Instance == USART1) {
 80028f0:	6803      	ldr	r3, [r0, #0]
 80028f2:	4a32      	ldr	r2, [pc, #200]	; (80029bc <HAL_UART_MspInit+0xd0>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d004      	beq.n	8002902 <HAL_UART_MspInit+0x16>
		
		// Enable Interrupt Mode
		HAL_NVIC_SetPriority(USART1_IRQn, 10, 0);
		HAL_NVIC_EnableIRQ(USART1_IRQn);

	} else if (huart->Instance == USART6) {
 80028f8:	4a31      	ldr	r2, [pc, #196]	; (80029c0 <HAL_UART_MspInit+0xd4>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d034      	beq.n	8002968 <HAL_UART_MspInit+0x7c>

		// Enable UART Clocking
		__USART6_CLK_ENABLE();

	}
}
 80028fe:	b00b      	add	sp, #44	; 0x2c
 8002900:	bd30      	pop	{r4, r5, pc}
		__GPIOA_CLK_ENABLE();
 8002902:	4c30      	ldr	r4, [pc, #192]	; (80029c4 <HAL_UART_MspInit+0xd8>)
 8002904:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002906:	f043 0301 	orr.w	r3, r3, #1
 800290a:	6323      	str	r3, [r4, #48]	; 0x30
 800290c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	9301      	str	r3, [sp, #4]
 8002914:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin       = GPIO_PIN_9;
 8002916:	f44f 7300 	mov.w	r3, #512	; 0x200
 800291a:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800291c:	2302      	movs	r3, #2
 800291e:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8002920:	2301      	movs	r3, #1
 8002922:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8002924:	2303      	movs	r3, #3
 8002926:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002928:	2307      	movs	r3, #7
 800292a:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //TX Config
 800292c:	4d26      	ldr	r5, [pc, #152]	; (80029c8 <HAL_UART_MspInit+0xdc>)
 800292e:	a905      	add	r1, sp, #20
 8002930:	4628      	mov	r0, r5
 8002932:	f000 f97b 	bl	8002c2c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002936:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800293a:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config
 800293c:	a905      	add	r1, sp, #20
 800293e:	4628      	mov	r0, r5
 8002940:	f000 f974 	bl	8002c2c <HAL_GPIO_Init>
		__USART1_CLK_ENABLE();
 8002944:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002946:	f043 0310 	orr.w	r3, r3, #16
 800294a:	6463      	str	r3, [r4, #68]	; 0x44
 800294c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800294e:	f003 0310 	and.w	r3, r3, #16
 8002952:	9302      	str	r3, [sp, #8]
 8002954:	9b02      	ldr	r3, [sp, #8]
		HAL_NVIC_SetPriority(USART1_IRQn, 10, 0);
 8002956:	2200      	movs	r2, #0
 8002958:	210a      	movs	r1, #10
 800295a:	2025      	movs	r0, #37	; 0x25
 800295c:	f000 f8c4 	bl	8002ae8 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002960:	2025      	movs	r0, #37	; 0x25
 8002962:	f000 f8f7 	bl	8002b54 <HAL_NVIC_EnableIRQ>
 8002966:	e7ca      	b.n	80028fe <HAL_UART_MspInit+0x12>
		__GPIOC_CLK_ENABLE();
 8002968:	4c16      	ldr	r4, [pc, #88]	; (80029c4 <HAL_UART_MspInit+0xd8>)
 800296a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800296c:	f043 0304 	orr.w	r3, r3, #4
 8002970:	6323      	str	r3, [r4, #48]	; 0x30
 8002972:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	9303      	str	r3, [sp, #12]
 800297a:	9b03      	ldr	r3, [sp, #12]
		GPIO_InitStruct.Pin       = GPIO_PIN_6;
 800297c:	2340      	movs	r3, #64	; 0x40
 800297e:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8002980:	2302      	movs	r3, #2
 8002982:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8002984:	2301      	movs	r3, #1
 8002986:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8002988:	2303      	movs	r3, #3
 800298a:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800298c:	2308      	movs	r3, #8
 800298e:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //TX Config
 8002990:	4d0e      	ldr	r5, [pc, #56]	; (80029cc <HAL_UART_MspInit+0xe0>)
 8002992:	a905      	add	r1, sp, #20
 8002994:	4628      	mov	r0, r5
 8002996:	f000 f949 	bl	8002c2c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 800299a:	2380      	movs	r3, #128	; 0x80
 800299c:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //RX Config
 800299e:	a905      	add	r1, sp, #20
 80029a0:	4628      	mov	r0, r5
 80029a2:	f000 f943 	bl	8002c2c <HAL_GPIO_Init>
		__USART6_CLK_ENABLE();
 80029a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80029a8:	f043 0320 	orr.w	r3, r3, #32
 80029ac:	6463      	str	r3, [r4, #68]	; 0x44
 80029ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80029b0:	f003 0320 	and.w	r3, r3, #32
 80029b4:	9304      	str	r3, [sp, #16]
 80029b6:	9b04      	ldr	r3, [sp, #16]
}
 80029b8:	e7a1      	b.n	80028fe <HAL_UART_MspInit+0x12>
 80029ba:	bf00      	nop
 80029bc:	40011000 	.word	0x40011000
 80029c0:	40011400 	.word	0x40011400
 80029c4:	40023800 	.word	0x40023800
 80029c8:	40020000 	.word	0x40020000
 80029cc:	40020800 	.word	0x40020800

080029d0 <initUart>:

//UART Initialization
void initUart(UART_HandleTypeDef* Uhand, uint32_t Baud, USART_TypeDef* Tgt) {
 80029d0:	b508      	push	{r3, lr}
	Uhand->Instance        = Tgt;
 80029d2:	6002      	str	r2, [r0, #0]

	Uhand->Init.BaudRate   = Baud;
 80029d4:	6041      	str	r1, [r0, #4]
	Uhand->Init.WordLength = UART_WORDLENGTH_8B;
 80029d6:	2200      	movs	r2, #0
 80029d8:	6082      	str	r2, [r0, #8]
	Uhand->Init.StopBits   = UART_STOPBITS_1;
 80029da:	60c2      	str	r2, [r0, #12]
	Uhand->Init.Parity     = UART_PARITY_NONE;
 80029dc:	6102      	str	r2, [r0, #16]
	Uhand->Init.Mode       = UART_MODE_TX_RX;
 80029de:	210c      	movs	r1, #12
 80029e0:	6141      	str	r1, [r0, #20]
	Uhand->Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80029e2:	6182      	str	r2, [r0, #24]

	HAL_UART_Init(Uhand);
 80029e4:	f002 f876 	bl	8004ad4 <HAL_UART_Init>
}
 80029e8:	bd08      	pop	{r3, pc}
	...

080029ec <_write>:

============================================================================= */


// Make printf(), putchar(), etc. default to work over USB UART
int _write(int file, char *ptr, int len) {
 80029ec:	b510      	push	{r4, lr}
 80029ee:	4614      	mov	r4, r2
	// HAL_UART_Transmit(&USB_UART, (uint8_t*) ptr, len, 1000);
	HAL_UART_Transmit_IT(&USB_UART, (uint8_t*) ptr, len);
 80029f0:	b292      	uxth	r2, r2
 80029f2:	4802      	ldr	r0, [pc, #8]	; (80029fc <_write+0x10>)
 80029f4:	f001 fb7c 	bl	80040f0 <HAL_UART_Transmit_IT>
	return len;
}
 80029f8:	4620      	mov	r0, r4
 80029fa:	bd10      	pop	{r4, pc}
 80029fc:	20004ae4 	.word	0x20004ae4

08002a00 <_read>:

// Make scanf(), getchar(), etc. default to work over USB UART
int _read(int file, char *ptr, int len) {
 8002a00:	b508      	push	{r3, lr}
	*ptr = 0x00; // Clear the character buffer because scanf() is finicky
 8002a02:	2200      	movs	r2, #0
 8002a04:	700a      	strb	r2, [r1, #0]
	len = 1; // Again because of scanf's finickiness, len must = 1
	HAL_UART_Receive(&USB_UART, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8002a06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	4802      	ldr	r0, [pc, #8]	; (8002a18 <_read+0x18>)
 8002a0e:	f001 ffa0 	bl	8004952 <HAL_UART_Receive>
	return len;
}
 8002a12:	2001      	movs	r0, #1
 8002a14:	bd08      	pop	{r3, pc}
 8002a16:	bf00      	nop
 8002a18:	20004ae4 	.word	0x20004ae4

08002a1c <_lseek>:
	}
  return i; // The way this is set up, it will always report the wrong size
}

// These functions need to be defined for compiler version gcc-arm version 11.3__attribute__((weak)) void _close(void){}
__attribute__((weak)) void _lseek(void){}
 8002a1c:	4770      	bx	lr

08002a1e <_fstat>:
__attribute__((weak)) void _fstat(void){}
 8002a1e:	4770      	bx	lr

08002a20 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a20:	480d      	ldr	r0, [pc, #52]	; (8002a58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a22:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 8002a24:	480d      	ldr	r0, [pc, #52]	; (8002a5c <LoopForever+0x6>)
  ldr r1, =_edata
 8002a26:	490e      	ldr	r1, [pc, #56]	; (8002a60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a28:	4a0e      	ldr	r2, [pc, #56]	; (8002a64 <LoopForever+0xe>)
  movs r3, #0
 8002a2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a2c:	e002      	b.n	8002a34 <LoopCopyDataInit>

08002a2e <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 8002a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a32:	3304      	adds	r3, #4

08002a34 <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 8002a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a36:	428c      	cmp	r4, r1



  bcc CopyDataInit
 8002a38:	d3f9      	bcc.n	8002a2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a3a:	4a0b      	ldr	r2, [pc, #44]	; (8002a68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a3c:	4c0b      	ldr	r4, [pc, #44]	; (8002a6c <LoopForever+0x16>)
  movs r3, #0
 8002a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a40:	e001      	b.n	8002a46 <LoopFillZerobss>

08002a42 <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 8002a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a44:	3204      	adds	r2, #4

08002a46 <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 8002a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a48:	d3fb      	bcc.n	8002a42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002a4a:	f000 f813 	bl	8002a74 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002a4e:	f002 f873 	bl	8004b38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a52:	f7ff fc13 	bl	800227c <main>

08002a56 <LoopForever>:

LoopForever:
    b LoopForever
 8002a56:	e7fe      	b.n	8002a56 <LoopForever>
  ldr   r0, =_estack
 8002a58:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a60:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002a64:	080055e0 	.word	0x080055e0
  ldr r2, =_sbss
 8002a68:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002a6c:	20004b84 	.word	0x20004b84

08002a70 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a70:	e7fe      	b.n	8002a70 <ADC_IRQHandler>
	...

08002a74 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a74:	4a03      	ldr	r2, [pc, #12]	; (8002a84 <SystemInit+0x10>)
 8002a76:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002a7a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a7e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a82:	4770      	bx	lr
 8002a84:	e000ed00 	.word	0xe000ed00

08002a88 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8002a88:	4770      	bx	lr
	...

08002a8c <HAL_Init>:
{
 8002a8c:	b508      	push	{r3, lr}
  __HAL_FLASH_ART_ENABLE();
 8002a8e:	4b09      	ldr	r3, [pc, #36]	; (8002ab4 <HAL_Init+0x28>)
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a96:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a9e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002aa0:	2003      	movs	r0, #3
 8002aa2:	f000 f80f 	bl	8002ac4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002aa6:	200f      	movs	r0, #15
 8002aa8:	f7ff feda 	bl	8002860 <HAL_InitTick>
  HAL_MspInit();
 8002aac:	f7ff ffec 	bl	8002a88 <HAL_MspInit>
}
 8002ab0:	2000      	movs	r0, #0
 8002ab2:	bd08      	pop	{r3, pc}
 8002ab4:	40023c00 	.word	0x40023c00

08002ab8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002ab8:	4b01      	ldr	r3, [pc, #4]	; (8002ac0 <HAL_GetTick+0x8>)
 8002aba:	6818      	ldr	r0, [r3, #0]
}
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	20004b6c 	.word	0x20004b6c

08002ac4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ac4:	4906      	ldr	r1, [pc, #24]	; (8002ae0 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8002ac6:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ac8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002acc:	041b      	lsls	r3, r3, #16
 8002ace:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ad0:	0200      	lsls	r0, r0, #8
 8002ad2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ad6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002ad8:	4a02      	ldr	r2, [pc, #8]	; (8002ae4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002ada:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8002adc:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002ade:	4770      	bx	lr
 8002ae0:	e000ed00 	.word	0xe000ed00
 8002ae4:	05fa0000 	.word	0x05fa0000

08002ae8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ae8:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002aea:	4b17      	ldr	r3, [pc, #92]	; (8002b48 <HAL_NVIC_SetPriority+0x60>)
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002af2:	f1c3 0c07 	rsb	ip, r3, #7
 8002af6:	f1bc 0f04 	cmp.w	ip, #4
 8002afa:	bf28      	it	cs
 8002afc:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b00:	f103 0e04 	add.w	lr, r3, #4
 8002b04:	f1be 0f06 	cmp.w	lr, #6
 8002b08:	d914      	bls.n	8002b34 <HAL_NVIC_SetPriority+0x4c>
 8002b0a:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b0c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8002b10:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002b14:	ea21 010c 	bic.w	r1, r1, ip
 8002b18:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b1a:	fa0e f303 	lsl.w	r3, lr, r3
 8002b1e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b22:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002b24:	2800      	cmp	r0, #0
 8002b26:	db07      	blt.n	8002b38 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b28:	0109      	lsls	r1, r1, #4
 8002b2a:	b2c9      	uxtb	r1, r1
 8002b2c:	4b07      	ldr	r3, [pc, #28]	; (8002b4c <HAL_NVIC_SetPriority+0x64>)
 8002b2e:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002b30:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b34:	2300      	movs	r3, #0
 8002b36:	e7e9      	b.n	8002b0c <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b38:	f000 000f 	and.w	r0, r0, #15
 8002b3c:	0109      	lsls	r1, r1, #4
 8002b3e:	b2c9      	uxtb	r1, r1
 8002b40:	4b03      	ldr	r3, [pc, #12]	; (8002b50 <HAL_NVIC_SetPriority+0x68>)
 8002b42:	5419      	strb	r1, [r3, r0]
 8002b44:	e7f4      	b.n	8002b30 <HAL_NVIC_SetPriority+0x48>
 8002b46:	bf00      	nop
 8002b48:	e000ed00 	.word	0xe000ed00
 8002b4c:	e000e400 	.word	0xe000e400
 8002b50:	e000ed14 	.word	0xe000ed14

08002b54 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002b54:	2800      	cmp	r0, #0
 8002b56:	db07      	blt.n	8002b68 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b58:	f000 021f 	and.w	r2, r0, #31
 8002b5c:	0940      	lsrs	r0, r0, #5
 8002b5e:	2301      	movs	r3, #1
 8002b60:	4093      	lsls	r3, r2
 8002b62:	4a02      	ldr	r2, [pc, #8]	; (8002b6c <HAL_NVIC_EnableIRQ+0x18>)
 8002b64:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	e000e100 	.word	0xe000e100

08002b70 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b70:	b570      	push	{r4, r5, r6, lr}
 8002b72:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b74:	6d86      	ldr	r6, [r0, #88]	; 0x58
  
  uint32_t tickstart = HAL_GetTick();
 8002b76:	f7ff ff9f 	bl	8002ab8 <HAL_GetTick>
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b7a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d006      	beq.n	8002b92 <HAL_DMA_Abort+0x22>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b84:	2380      	movs	r3, #128	; 0x80
 8002b86:	6563      	str	r3, [r4, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b88:	2300      	movs	r3, #0
 8002b8a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    
    return HAL_ERROR;
 8002b8e:	2001      	movs	r0, #1
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
  }
  return HAL_OK;
}
 8002b90:	bd70      	pop	{r4, r5, r6, pc}
 8002b92:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b94:	6822      	ldr	r2, [r4, #0]
 8002b96:	6813      	ldr	r3, [r2, #0]
 8002b98:	f023 0316 	bic.w	r3, r3, #22
 8002b9c:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b9e:	6822      	ldr	r2, [r4, #0]
 8002ba0:	6953      	ldr	r3, [r2, #20]
 8002ba2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ba6:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ba8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002baa:	b1e3      	cbz	r3, 8002be6 <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bac:	6822      	ldr	r2, [r4, #0]
 8002bae:	6813      	ldr	r3, [r2, #0]
 8002bb0:	f023 0308 	bic.w	r3, r3, #8
 8002bb4:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002bb6:	6822      	ldr	r2, [r4, #0]
 8002bb8:	6813      	ldr	r3, [r2, #0]
 8002bba:	f023 0301 	bic.w	r3, r3, #1
 8002bbe:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bc0:	6823      	ldr	r3, [r4, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f013 0f01 	tst.w	r3, #1
 8002bc8:	d011      	beq.n	8002bee <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bca:	f7ff ff75 	bl	8002ab8 <HAL_GetTick>
 8002bce:	1b43      	subs	r3, r0, r5
 8002bd0:	2b05      	cmp	r3, #5
 8002bd2:	d9f5      	bls.n	8002bc0 <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bd4:	2320      	movs	r3, #32
 8002bd6:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bd8:	2003      	movs	r0, #3
 8002bda:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8002bde:	2300      	movs	r3, #0
 8002be0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8002be4:	e7d4      	b.n	8002b90 <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002be6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1df      	bne.n	8002bac <HAL_DMA_Abort+0x3c>
 8002bec:	e7e3      	b.n	8002bb6 <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bee:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002bf0:	233f      	movs	r3, #63	; 0x3f
 8002bf2:	4093      	lsls	r3, r2
 8002bf4:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8002bfc:	2000      	movs	r0, #0
 8002bfe:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return HAL_OK;
 8002c02:	e7c5      	b.n	8002b90 <HAL_DMA_Abort+0x20>

08002c04 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c04:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d003      	beq.n	8002c16 <HAL_DMA_Abort_IT+0x12>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c0e:	2380      	movs	r3, #128	; 0x80
 8002c10:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8002c12:	2001      	movs	r0, #1
 8002c14:	4770      	bx	lr
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c16:	2305      	movs	r3, #5
 8002c18:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c1c:	6802      	ldr	r2, [r0, #0]
 8002c1e:	6813      	ldr	r3, [r2, #0]
 8002c20:	f023 0301 	bic.w	r3, r3, #1
 8002c24:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8002c26:	2000      	movs	r0, #0
}
 8002c28:	4770      	bx	lr
	...

08002c2c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	2b0f      	cmp	r3, #15
 8002c30:	f200 80ef 	bhi.w	8002e12 <HAL_GPIO_Init+0x1e6>
{
 8002c34:	b570      	push	{r4, r5, r6, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	e061      	b.n	8002cfe <HAL_GPIO_Init+0xd2>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c3a:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002c3c:	005e      	lsls	r6, r3, #1
 8002c3e:	2403      	movs	r4, #3
 8002c40:	40b4      	lsls	r4, r6
 8002c42:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8002c46:	68cc      	ldr	r4, [r1, #12]
 8002c48:	40b4      	lsls	r4, r6
 8002c4a:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8002c4c:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c4e:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c50:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c54:	684c      	ldr	r4, [r1, #4]
 8002c56:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8002c5a:	409a      	lsls	r2, r3
 8002c5c:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8002c5e:	6042      	str	r2, [r0, #4]
 8002c60:	e05b      	b.n	8002d1a <HAL_GPIO_Init+0xee>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002c62:	08dc      	lsrs	r4, r3, #3
 8002c64:	3408      	adds	r4, #8
 8002c66:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002c6a:	f003 0207 	and.w	r2, r3, #7
 8002c6e:	0095      	lsls	r5, r2, #2
 8002c70:	220f      	movs	r2, #15
 8002c72:	40aa      	lsls	r2, r5
 8002c74:	ea26 0e02 	bic.w	lr, r6, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002c78:	690a      	ldr	r2, [r1, #16]
 8002c7a:	40aa      	lsls	r2, r5
 8002c7c:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3] = temp;
 8002c80:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8002c84:	e05d      	b.n	8002d42 <HAL_GPIO_Init+0x116>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c86:	2209      	movs	r2, #9
 8002c88:	e000      	b.n	8002c8c <HAL_GPIO_Init+0x60>
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	fa02 f20e 	lsl.w	r2, r2, lr
 8002c90:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2] = temp;
 8002c92:	3402      	adds	r4, #2
 8002c94:	4d5f      	ldr	r5, [pc, #380]	; (8002e14 <HAL_GPIO_Init+0x1e8>)
 8002c96:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c9a:	4a5f      	ldr	r2, [pc, #380]	; (8002e18 <HAL_GPIO_Init+0x1ec>)
 8002c9c:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8002c9e:	ea6f 020c 	mvn.w	r2, ip
 8002ca2:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ca6:	684e      	ldr	r6, [r1, #4]
 8002ca8:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 8002cac:	d001      	beq.n	8002cb2 <HAL_GPIO_Init+0x86>
        {
          temp |= iocurrent;
 8002cae:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8002cb2:	4c59      	ldr	r4, [pc, #356]	; (8002e18 <HAL_GPIO_Init+0x1ec>)
 8002cb4:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8002cb6:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8002cb8:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002cbc:	684e      	ldr	r6, [r1, #4]
 8002cbe:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8002cc2:	d001      	beq.n	8002cc8 <HAL_GPIO_Init+0x9c>
        {
          temp |= iocurrent;
 8002cc4:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8002cc8:	4c53      	ldr	r4, [pc, #332]	; (8002e18 <HAL_GPIO_Init+0x1ec>)
 8002cca:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8002ccc:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8002cce:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002cd2:	684e      	ldr	r6, [r1, #4]
 8002cd4:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8002cd8:	d001      	beq.n	8002cde <HAL_GPIO_Init+0xb2>
        {
          temp |= iocurrent;
 8002cda:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8002cde:	4c4e      	ldr	r4, [pc, #312]	; (8002e18 <HAL_GPIO_Init+0x1ec>)
 8002ce0:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ce2:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8002ce4:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ce6:	684d      	ldr	r5, [r1, #4]
 8002ce8:	f415 3f80 	tst.w	r5, #65536	; 0x10000
 8002cec:	d001      	beq.n	8002cf2 <HAL_GPIO_Init+0xc6>
        {
          temp |= iocurrent;
 8002cee:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8002cf2:	4c49      	ldr	r4, [pc, #292]	; (8002e18 <HAL_GPIO_Init+0x1ec>)
 8002cf4:	6022      	str	r2, [r4, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	2b0f      	cmp	r3, #15
 8002cfa:	f200 8088 	bhi.w	8002e0e <HAL_GPIO_Init+0x1e2>
    ioposition = ((uint32_t)0x01) << position;
 8002cfe:	2201      	movs	r2, #1
 8002d00:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d02:	680c      	ldr	r4, [r1, #0]
 8002d04:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8002d08:	ea32 0404 	bics.w	r4, r2, r4
 8002d0c:	d1f3      	bne.n	8002cf6 <HAL_GPIO_Init+0xca>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d0e:	684c      	ldr	r4, [r1, #4]
 8002d10:	f004 0403 	and.w	r4, r4, #3
 8002d14:	3c01      	subs	r4, #1
 8002d16:	2c01      	cmp	r4, #1
 8002d18:	d98f      	bls.n	8002c3a <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d1a:	684a      	ldr	r2, [r1, #4]
 8002d1c:	f002 0203 	and.w	r2, r2, #3
 8002d20:	2a03      	cmp	r2, #3
 8002d22:	d009      	beq.n	8002d38 <HAL_GPIO_Init+0x10c>
        temp = GPIOx->PUPDR;
 8002d24:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002d26:	005d      	lsls	r5, r3, #1
 8002d28:	2203      	movs	r2, #3
 8002d2a:	40aa      	lsls	r2, r5
 8002d2c:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002d30:	688a      	ldr	r2, [r1, #8]
 8002d32:	40aa      	lsls	r2, r5
 8002d34:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8002d36:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d38:	684a      	ldr	r2, [r1, #4]
 8002d3a:	f002 0203 	and.w	r2, r2, #3
 8002d3e:	2a02      	cmp	r2, #2
 8002d40:	d08f      	beq.n	8002c62 <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 8002d42:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002d44:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8002d48:	2203      	movs	r2, #3
 8002d4a:	fa02 f20e 	lsl.w	r2, r2, lr
 8002d4e:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002d52:	684a      	ldr	r2, [r1, #4]
 8002d54:	f002 0203 	and.w	r2, r2, #3
 8002d58:	fa02 f20e 	lsl.w	r2, r2, lr
 8002d5c:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8002d5e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d60:	684a      	ldr	r2, [r1, #4]
 8002d62:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 8002d66:	d0c6      	beq.n	8002cf6 <HAL_GPIO_Init+0xca>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d68:	4a2c      	ldr	r2, [pc, #176]	; (8002e1c <HAL_GPIO_Init+0x1f0>)
 8002d6a:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8002d6c:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8002d70:	6454      	str	r4, [r2, #68]	; 0x44
 8002d72:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002d74:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002d78:	9201      	str	r2, [sp, #4]
 8002d7a:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8002d7c:	089c      	lsrs	r4, r3, #2
 8002d7e:	1ca5      	adds	r5, r4, #2
 8002d80:	4a24      	ldr	r2, [pc, #144]	; (8002e14 <HAL_GPIO_Init+0x1e8>)
 8002d82:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002d86:	f003 0203 	and.w	r2, r3, #3
 8002d8a:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 8002d8e:	220f      	movs	r2, #15
 8002d90:	fa02 f20e 	lsl.w	r2, r2, lr
 8002d94:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d98:	4a21      	ldr	r2, [pc, #132]	; (8002e20 <HAL_GPIO_Init+0x1f4>)
 8002d9a:	4290      	cmp	r0, r2
 8002d9c:	f43f af75 	beq.w	8002c8a <HAL_GPIO_Init+0x5e>
 8002da0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002da4:	4290      	cmp	r0, r2
 8002da6:	d022      	beq.n	8002dee <HAL_GPIO_Init+0x1c2>
 8002da8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002dac:	4290      	cmp	r0, r2
 8002dae:	d020      	beq.n	8002df2 <HAL_GPIO_Init+0x1c6>
 8002db0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002db4:	4290      	cmp	r0, r2
 8002db6:	d01e      	beq.n	8002df6 <HAL_GPIO_Init+0x1ca>
 8002db8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002dbc:	4290      	cmp	r0, r2
 8002dbe:	d01c      	beq.n	8002dfa <HAL_GPIO_Init+0x1ce>
 8002dc0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002dc4:	4290      	cmp	r0, r2
 8002dc6:	d01a      	beq.n	8002dfe <HAL_GPIO_Init+0x1d2>
 8002dc8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002dcc:	4290      	cmp	r0, r2
 8002dce:	d018      	beq.n	8002e02 <HAL_GPIO_Init+0x1d6>
 8002dd0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002dd4:	4290      	cmp	r0, r2
 8002dd6:	d016      	beq.n	8002e06 <HAL_GPIO_Init+0x1da>
 8002dd8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ddc:	4290      	cmp	r0, r2
 8002dde:	d014      	beq.n	8002e0a <HAL_GPIO_Init+0x1de>
 8002de0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002de4:	4290      	cmp	r0, r2
 8002de6:	f43f af4e 	beq.w	8002c86 <HAL_GPIO_Init+0x5a>
 8002dea:	220a      	movs	r2, #10
 8002dec:	e74e      	b.n	8002c8c <HAL_GPIO_Init+0x60>
 8002dee:	2201      	movs	r2, #1
 8002df0:	e74c      	b.n	8002c8c <HAL_GPIO_Init+0x60>
 8002df2:	2202      	movs	r2, #2
 8002df4:	e74a      	b.n	8002c8c <HAL_GPIO_Init+0x60>
 8002df6:	2203      	movs	r2, #3
 8002df8:	e748      	b.n	8002c8c <HAL_GPIO_Init+0x60>
 8002dfa:	2204      	movs	r2, #4
 8002dfc:	e746      	b.n	8002c8c <HAL_GPIO_Init+0x60>
 8002dfe:	2205      	movs	r2, #5
 8002e00:	e744      	b.n	8002c8c <HAL_GPIO_Init+0x60>
 8002e02:	2206      	movs	r2, #6
 8002e04:	e742      	b.n	8002c8c <HAL_GPIO_Init+0x60>
 8002e06:	2207      	movs	r2, #7
 8002e08:	e740      	b.n	8002c8c <HAL_GPIO_Init+0x60>
 8002e0a:	2208      	movs	r2, #8
 8002e0c:	e73e      	b.n	8002c8c <HAL_GPIO_Init+0x60>
      }
    }
  }
}
 8002e0e:	b002      	add	sp, #8
 8002e10:	bd70      	pop	{r4, r5, r6, pc}
 8002e12:	4770      	bx	lr
 8002e14:	40013800 	.word	0x40013800
 8002e18:	40013c00 	.word	0x40013c00
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	40020000 	.word	0x40020000

08002e24 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e24:	6803      	ldr	r3, [r0, #0]
 8002e26:	699a      	ldr	r2, [r3, #24]
 8002e28:	f012 0f02 	tst.w	r2, #2
 8002e2c:	d001      	beq.n	8002e32 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e2e:	2200      	movs	r2, #0
 8002e30:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e32:	6803      	ldr	r3, [r0, #0]
 8002e34:	699a      	ldr	r2, [r3, #24]
 8002e36:	f012 0f01 	tst.w	r2, #1
 8002e3a:	d103      	bne.n	8002e44 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002e3c:	699a      	ldr	r2, [r3, #24]
 8002e3e:	f042 0201 	orr.w	r2, r2, #1
 8002e42:	619a      	str	r2, [r3, #24]
  }
}
 8002e44:	4770      	bx	lr

08002e46 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002e46:	b410      	push	{r4}
 8002e48:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e4a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002e4e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e52:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e54:	4321      	orrs	r1, r4
 8002e56:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002e5a:	6802      	ldr	r2, [r0, #0]
 8002e5c:	6853      	ldr	r3, [r2, #4]
 8002e5e:	0d64      	lsrs	r4, r4, #21
 8002e60:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8002e64:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8002e68:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8002e6c:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8002e70:	f044 0403 	orr.w	r4, r4, #3
 8002e74:	ea23 0404 	bic.w	r4, r3, r4
 8002e78:	4321      	orrs	r1, r4
 8002e7a:	6051      	str	r1, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002e7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <I2C_IsErrorOccurred>:
{
 8002e82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e86:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 8002e88:	6803      	ldr	r3, [r0, #0]
 8002e8a:	699e      	ldr	r6, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002e8c:	f016 0610 	ands.w	r6, r6, #16
 8002e90:	d07e      	beq.n	8002f90 <I2C_IsErrorOccurred+0x10e>
 8002e92:	460d      	mov	r5, r1
 8002e94:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e96:	2210      	movs	r2, #16
 8002e98:	61da      	str	r2, [r3, #28]
  uint32_t error_code = 0;
 8002e9a:	2600      	movs	r6, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002e9c:	4637      	mov	r7, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e9e:	6823      	ldr	r3, [r4, #0]
 8002ea0:	6998      	ldr	r0, [r3, #24]
 8002ea2:	f010 0f20 	tst.w	r0, #32
 8002ea6:	d132      	bne.n	8002f0e <I2C_IsErrorOccurred+0x8c>
 8002ea8:	bb8f      	cbnz	r7, 8002f0e <I2C_IsErrorOccurred+0x8c>
      if (Timeout != HAL_MAX_DELAY)
 8002eaa:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002eae:	d0f6      	beq.n	8002e9e <I2C_IsErrorOccurred+0x1c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002eb0:	f7ff fe02 	bl	8002ab8 <HAL_GetTick>
 8002eb4:	eba0 0008 	sub.w	r0, r0, r8
 8002eb8:	42a8      	cmp	r0, r5
 8002eba:	d801      	bhi.n	8002ec0 <I2C_IsErrorOccurred+0x3e>
 8002ebc:	2d00      	cmp	r5, #0
 8002ebe:	d1ee      	bne.n	8002e9e <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002ec0:	6821      	ldr	r1, [r4, #0]
 8002ec2:	684a      	ldr	r2, [r1, #4]
 8002ec4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
          tmp2 = hi2c->Mode;
 8002ec8:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8002ecc:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002ece:	6988      	ldr	r0, [r1, #24]
 8002ed0:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8002ed4:	d004      	beq.n	8002ee0 <I2C_IsErrorOccurred+0x5e>
              (tmp2 != HAL_I2C_MODE_SLAVE))
 8002ed6:	3b20      	subs	r3, #32
 8002ed8:	bf18      	it	ne
 8002eda:	2301      	movne	r3, #1
              (tmp1 != I2C_CR2_STOP) && \
 8002edc:	b902      	cbnz	r2, 8002ee0 <I2C_IsErrorOccurred+0x5e>
 8002ede:	b973      	cbnz	r3, 8002efe <I2C_IsErrorOccurred+0x7c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ee0:	6823      	ldr	r3, [r4, #0]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	f013 0f20 	tst.w	r3, #32
 8002ee8:	d1d9      	bne.n	8002e9e <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002eea:	f7ff fde5 	bl	8002ab8 <HAL_GetTick>
 8002eee:	eba0 0008 	sub.w	r0, r0, r8
 8002ef2:	2819      	cmp	r0, #25
 8002ef4:	d9f4      	bls.n	8002ee0 <I2C_IsErrorOccurred+0x5e>
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002ef6:	f046 0620 	orr.w	r6, r6, #32
              status = HAL_ERROR;
 8002efa:	2701      	movs	r7, #1
              break;
 8002efc:	e7cf      	b.n	8002e9e <I2C_IsErrorOccurred+0x1c>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002efe:	684b      	ldr	r3, [r1, #4]
 8002f00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f04:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 8002f06:	f7ff fdd7 	bl	8002ab8 <HAL_GetTick>
 8002f0a:	4680      	mov	r8, r0
 8002f0c:	e7e8      	b.n	8002ee0 <I2C_IsErrorOccurred+0x5e>
    if (status == HAL_OK)
 8002f0e:	b90f      	cbnz	r7, 8002f14 <I2C_IsErrorOccurred+0x92>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f10:	2220      	movs	r2, #32
 8002f12:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8002f14:	f046 0604 	orr.w	r6, r6, #4
    status = HAL_ERROR;
 8002f18:	2501      	movs	r5, #1
  itflag = hi2c->Instance->ISR;
 8002f1a:	6822      	ldr	r2, [r4, #0]
 8002f1c:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002f1e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002f22:	d005      	beq.n	8002f30 <I2C_IsErrorOccurred+0xae>
    error_code |= HAL_I2C_ERROR_BERR;
 8002f24:	f046 0601 	orr.w	r6, r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002f28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f2c:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8002f2e:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002f30:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002f34:	d006      	beq.n	8002f44 <I2C_IsErrorOccurred+0xc2>
    error_code |= HAL_I2C_ERROR_OVR;
 8002f36:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f3a:	6822      	ldr	r2, [r4, #0]
 8002f3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f40:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8002f42:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002f44:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002f48:	d024      	beq.n	8002f94 <I2C_IsErrorOccurred+0x112>
    error_code |= HAL_I2C_ERROR_ARLO;
 8002f4a:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f4e:	6823      	ldr	r3, [r4, #0]
 8002f50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f54:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 8002f56:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 8002f58:	4620      	mov	r0, r4
 8002f5a:	f7ff ff63 	bl	8002e24 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8002f5e:	6822      	ldr	r2, [r4, #0]
 8002f60:	6853      	ldr	r3, [r2, #4]
 8002f62:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8002f66:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8002f6a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002f6e:	f023 0301 	bic.w	r3, r3, #1
 8002f72:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8002f74:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002f76:	431e      	orrs	r6, r3
 8002f78:	6466      	str	r6, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f7a:	2320      	movs	r3, #32
 8002f7c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f80:	2300      	movs	r3, #0
 8002f82:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002f86:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8002f8a:	4628      	mov	r0, r5
 8002f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8002f90:	2500      	movs	r5, #0
 8002f92:	e7c2      	b.n	8002f1a <I2C_IsErrorOccurred+0x98>
  if (status != HAL_OK)
 8002f94:	2d00      	cmp	r5, #0
 8002f96:	d0f8      	beq.n	8002f8a <I2C_IsErrorOccurred+0x108>
 8002f98:	e7de      	b.n	8002f58 <I2C_IsErrorOccurred+0xd6>

08002f9a <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8002f9a:	b570      	push	{r4, r5, r6, lr}
 8002f9c:	4604      	mov	r4, r0
 8002f9e:	460d      	mov	r5, r1
 8002fa0:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002fa2:	6823      	ldr	r3, [r4, #0]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	f013 0f02 	tst.w	r3, #2
 8002faa:	d11d      	bne.n	8002fe8 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fac:	4632      	mov	r2, r6
 8002fae:	4629      	mov	r1, r5
 8002fb0:	4620      	mov	r0, r4
 8002fb2:	f7ff ff66 	bl	8002e82 <I2C_IsErrorOccurred>
 8002fb6:	b9c8      	cbnz	r0, 8002fec <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8002fb8:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002fbc:	d0f1      	beq.n	8002fa2 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fbe:	f7ff fd7b 	bl	8002ab8 <HAL_GetTick>
 8002fc2:	1b80      	subs	r0, r0, r6
 8002fc4:	42a8      	cmp	r0, r5
 8002fc6:	d801      	bhi.n	8002fcc <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8002fc8:	2d00      	cmp	r5, #0
 8002fca:	d1ea      	bne.n	8002fa2 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fcc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002fce:	f043 0320 	orr.w	r3, r3, #32
 8002fd2:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002fd4:	2320      	movs	r3, #32
 8002fd6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002fe0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8002fe4:	2001      	movs	r0, #1
 8002fe6:	e000      	b.n	8002fea <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8002fe8:	2000      	movs	r0, #0
}
 8002fea:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002fec:	2001      	movs	r0, #1
 8002fee:	e7fc      	b.n	8002fea <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08002ff0 <I2C_WaitOnFlagUntilTimeout>:
{
 8002ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ff4:	4606      	mov	r6, r0
 8002ff6:	4688      	mov	r8, r1
 8002ff8:	4617      	mov	r7, r2
 8002ffa:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ffc:	6834      	ldr	r4, [r6, #0]
 8002ffe:	69a4      	ldr	r4, [r4, #24]
 8003000:	ea38 0304 	bics.w	r3, r8, r4
 8003004:	bf0c      	ite	eq
 8003006:	f04f 0c01 	moveq.w	ip, #1
 800300a:	f04f 0c00 	movne.w	ip, #0
 800300e:	45bc      	cmp	ip, r7
 8003010:	d118      	bne.n	8003044 <I2C_WaitOnFlagUntilTimeout+0x54>
    if (Timeout != HAL_MAX_DELAY)
 8003012:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8003016:	d0f1      	beq.n	8002ffc <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003018:	f7ff fd4e 	bl	8002ab8 <HAL_GetTick>
 800301c:	9b06      	ldr	r3, [sp, #24]
 800301e:	1ac0      	subs	r0, r0, r3
 8003020:	42a8      	cmp	r0, r5
 8003022:	d801      	bhi.n	8003028 <I2C_WaitOnFlagUntilTimeout+0x38>
 8003024:	2d00      	cmp	r5, #0
 8003026:	d1e9      	bne.n	8002ffc <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003028:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800302a:	f043 0320 	orr.w	r3, r3, #32
 800302e:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003030:	2320      	movs	r3, #32
 8003032:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003036:	2300      	movs	r3, #0
 8003038:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800303c:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8003040:	2001      	movs	r0, #1
 8003042:	e000      	b.n	8003046 <I2C_WaitOnFlagUntilTimeout+0x56>
  return HAL_OK;
 8003044:	2000      	movs	r0, #0
}
 8003046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800304c <I2C_RequestMemoryWrite>:
{
 800304c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003050:	b082      	sub	sp, #8
 8003052:	4604      	mov	r4, r0
 8003054:	4690      	mov	r8, r2
 8003056:	461d      	mov	r5, r3
 8003058:	9e08      	ldr	r6, [sp, #32]
 800305a:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800305c:	4b19      	ldr	r3, [pc, #100]	; (80030c4 <I2C_RequestMemoryWrite+0x78>)
 800305e:	9300      	str	r3, [sp, #0]
 8003060:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003064:	b2ea      	uxtb	r2, r5
 8003066:	f7ff feee 	bl	8002e46 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800306a:	463a      	mov	r2, r7
 800306c:	4631      	mov	r1, r6
 800306e:	4620      	mov	r0, r4
 8003070:	f7ff ff93 	bl	8002f9a <I2C_WaitOnTXISFlagUntilTimeout>
 8003074:	b9f8      	cbnz	r0, 80030b6 <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003076:	2d01      	cmp	r5, #1
 8003078:	d10e      	bne.n	8003098 <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800307a:	6823      	ldr	r3, [r4, #0]
 800307c:	fa5f f288 	uxtb.w	r2, r8
 8003080:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003082:	9700      	str	r7, [sp, #0]
 8003084:	4633      	mov	r3, r6
 8003086:	2200      	movs	r2, #0
 8003088:	2180      	movs	r1, #128	; 0x80
 800308a:	4620      	mov	r0, r4
 800308c:	f7ff ffb0 	bl	8002ff0 <I2C_WaitOnFlagUntilTimeout>
 8003090:	b9a8      	cbnz	r0, 80030be <I2C_RequestMemoryWrite+0x72>
}
 8003092:	b002      	add	sp, #8
 8003094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003098:	6823      	ldr	r3, [r4, #0]
 800309a:	ea4f 2218 	mov.w	r2, r8, lsr #8
 800309e:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030a0:	463a      	mov	r2, r7
 80030a2:	4631      	mov	r1, r6
 80030a4:	4620      	mov	r0, r4
 80030a6:	f7ff ff78 	bl	8002f9a <I2C_WaitOnTXISFlagUntilTimeout>
 80030aa:	b930      	cbnz	r0, 80030ba <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030ac:	6823      	ldr	r3, [r4, #0]
 80030ae:	fa5f f288 	uxtb.w	r2, r8
 80030b2:	629a      	str	r2, [r3, #40]	; 0x28
 80030b4:	e7e5      	b.n	8003082 <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 80030b6:	2001      	movs	r0, #1
 80030b8:	e7eb      	b.n	8003092 <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 80030ba:	2001      	movs	r0, #1
 80030bc:	e7e9      	b.n	8003092 <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 80030be:	2001      	movs	r0, #1
 80030c0:	e7e7      	b.n	8003092 <I2C_RequestMemoryWrite+0x46>
 80030c2:	bf00      	nop
 80030c4:	80002000 	.word	0x80002000

080030c8 <I2C_RequestMemoryRead>:
{
 80030c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030cc:	b082      	sub	sp, #8
 80030ce:	4604      	mov	r4, r0
 80030d0:	4690      	mov	r8, r2
 80030d2:	461d      	mov	r5, r3
 80030d4:	9e08      	ldr	r6, [sp, #32]
 80030d6:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80030d8:	4b18      	ldr	r3, [pc, #96]	; (800313c <I2C_RequestMemoryRead+0x74>)
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	2300      	movs	r3, #0
 80030de:	b2ea      	uxtb	r2, r5
 80030e0:	f7ff feb1 	bl	8002e46 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030e4:	463a      	mov	r2, r7
 80030e6:	4631      	mov	r1, r6
 80030e8:	4620      	mov	r0, r4
 80030ea:	f7ff ff56 	bl	8002f9a <I2C_WaitOnTXISFlagUntilTimeout>
 80030ee:	b9f8      	cbnz	r0, 8003130 <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030f0:	2d01      	cmp	r5, #1
 80030f2:	d10e      	bne.n	8003112 <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030f4:	6823      	ldr	r3, [r4, #0]
 80030f6:	fa5f f288 	uxtb.w	r2, r8
 80030fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80030fc:	9700      	str	r7, [sp, #0]
 80030fe:	4633      	mov	r3, r6
 8003100:	2200      	movs	r2, #0
 8003102:	2140      	movs	r1, #64	; 0x40
 8003104:	4620      	mov	r0, r4
 8003106:	f7ff ff73 	bl	8002ff0 <I2C_WaitOnFlagUntilTimeout>
 800310a:	b9a8      	cbnz	r0, 8003138 <I2C_RequestMemoryRead+0x70>
}
 800310c:	b002      	add	sp, #8
 800310e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003112:	6823      	ldr	r3, [r4, #0]
 8003114:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8003118:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800311a:	463a      	mov	r2, r7
 800311c:	4631      	mov	r1, r6
 800311e:	4620      	mov	r0, r4
 8003120:	f7ff ff3b 	bl	8002f9a <I2C_WaitOnTXISFlagUntilTimeout>
 8003124:	b930      	cbnz	r0, 8003134 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003126:	6823      	ldr	r3, [r4, #0]
 8003128:	fa5f f288 	uxtb.w	r2, r8
 800312c:	629a      	str	r2, [r3, #40]	; 0x28
 800312e:	e7e5      	b.n	80030fc <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 8003130:	2001      	movs	r0, #1
 8003132:	e7eb      	b.n	800310c <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 8003134:	2001      	movs	r0, #1
 8003136:	e7e9      	b.n	800310c <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 8003138:	2001      	movs	r0, #1
 800313a:	e7e7      	b.n	800310c <I2C_RequestMemoryRead+0x44>
 800313c:	80002000 	.word	0x80002000

08003140 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8003140:	b570      	push	{r4, r5, r6, lr}
 8003142:	4605      	mov	r5, r0
 8003144:	460c      	mov	r4, r1
 8003146:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003148:	682b      	ldr	r3, [r5, #0]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	f013 0f20 	tst.w	r3, #32
 8003150:	d11a      	bne.n	8003188 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003152:	4632      	mov	r2, r6
 8003154:	4621      	mov	r1, r4
 8003156:	4628      	mov	r0, r5
 8003158:	f7ff fe93 	bl	8002e82 <I2C_IsErrorOccurred>
 800315c:	b9b0      	cbnz	r0, 800318c <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800315e:	f7ff fcab 	bl	8002ab8 <HAL_GetTick>
 8003162:	1b80      	subs	r0, r0, r6
 8003164:	42a0      	cmp	r0, r4
 8003166:	d801      	bhi.n	800316c <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8003168:	2c00      	cmp	r4, #0
 800316a:	d1ed      	bne.n	8003148 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800316c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800316e:	f043 0320 	orr.w	r3, r3, #32
 8003172:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003174:	2320      	movs	r3, #32
 8003176:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800317a:	2300      	movs	r3, #0
 800317c:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003180:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8003184:	2001      	movs	r0, #1
}
 8003186:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8003188:	2000      	movs	r0, #0
 800318a:	e7fc      	b.n	8003186 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 800318c:	2001      	movs	r0, #1
 800318e:	e7fa      	b.n	8003186 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08003190 <HAL_I2C_Mem_Write>:
{
 8003190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003194:	b083      	sub	sp, #12
 8003196:	460d      	mov	r5, r1
 8003198:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800319c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800319e:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 80031a2:	b2c9      	uxtb	r1, r1
 80031a4:	2920      	cmp	r1, #32
 80031a6:	f040 80bc 	bne.w	8003322 <HAL_I2C_Mem_Write+0x192>
 80031aa:	4604      	mov	r4, r0
 80031ac:	4690      	mov	r8, r2
 80031ae:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 80031b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80031b2:	f1ba 0f00 	cmp.w	sl, #0
 80031b6:	bf18      	it	ne
 80031b8:	2b00      	cmpne	r3, #0
 80031ba:	d016      	beq.n	80031ea <HAL_I2C_Mem_Write+0x5a>
    __HAL_LOCK(hi2c);
 80031bc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	f000 80b2 	beq.w	800332a <HAL_I2C_Mem_Write+0x19a>
 80031c6:	f04f 0b01 	mov.w	fp, #1
 80031ca:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80031ce:	f7ff fc73 	bl	8002ab8 <HAL_GetTick>
 80031d2:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031d4:	9000      	str	r0, [sp, #0]
 80031d6:	2319      	movs	r3, #25
 80031d8:	465a      	mov	r2, fp
 80031da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031de:	4620      	mov	r0, r4
 80031e0:	f7ff ff06 	bl	8002ff0 <I2C_WaitOnFlagUntilTimeout>
 80031e4:	b130      	cbz	r0, 80031f4 <HAL_I2C_Mem_Write+0x64>
      return HAL_ERROR;
 80031e6:	2001      	movs	r0, #1
 80031e8:	e09c      	b.n	8003324 <HAL_I2C_Mem_Write+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80031ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031ee:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 80031f0:	2001      	movs	r0, #1
 80031f2:	e097      	b.n	8003324 <HAL_I2C_Mem_Write+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80031f4:	2321      	movs	r3, #33	; 0x21
 80031f6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031fa:	2340      	movs	r3, #64	; 0x40
 80031fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003200:	2300      	movs	r3, #0
 8003202:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8003204:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003206:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8003208:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800320c:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800320e:	9601      	str	r6, [sp, #4]
 8003210:	9700      	str	r7, [sp, #0]
 8003212:	464b      	mov	r3, r9
 8003214:	4642      	mov	r2, r8
 8003216:	4629      	mov	r1, r5
 8003218:	4620      	mov	r0, r4
 800321a:	f7ff ff17 	bl	800304c <I2C_RequestMemoryWrite>
 800321e:	b970      	cbnz	r0, 800323e <HAL_I2C_Mem_Write+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003220:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003222:	b29b      	uxth	r3, r3
 8003224:	2bff      	cmp	r3, #255	; 0xff
 8003226:	d90f      	bls.n	8003248 <HAL_I2C_Mem_Write+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003228:	22ff      	movs	r2, #255	; 0xff
 800322a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800322c:	2300      	movs	r3, #0
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003234:	4629      	mov	r1, r5
 8003236:	4620      	mov	r0, r4
 8003238:	f7ff fe05 	bl	8002e46 <I2C_TransferConfig>
 800323c:	e021      	b.n	8003282 <HAL_I2C_Mem_Write+0xf2>
      __HAL_UNLOCK(hi2c);
 800323e:	2300      	movs	r3, #0
 8003240:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003244:	4658      	mov	r0, fp
 8003246:	e06d      	b.n	8003324 <HAL_I2C_Mem_Write+0x194>
      hi2c->XferSize = hi2c->XferCount;
 8003248:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800324a:	b292      	uxth	r2, r2
 800324c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800324e:	2300      	movs	r3, #0
 8003250:	9300      	str	r3, [sp, #0]
 8003252:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003256:	b2d2      	uxtb	r2, r2
 8003258:	4629      	mov	r1, r5
 800325a:	4620      	mov	r0, r4
 800325c:	f7ff fdf3 	bl	8002e46 <I2C_TransferConfig>
 8003260:	e00f      	b.n	8003282 <HAL_I2C_Mem_Write+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 8003262:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003264:	b292      	uxth	r2, r2
 8003266:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003268:	2300      	movs	r3, #0
 800326a:	9300      	str	r3, [sp, #0]
 800326c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003270:	b2d2      	uxtb	r2, r2
 8003272:	4629      	mov	r1, r5
 8003274:	4620      	mov	r0, r4
 8003276:	f7ff fde6 	bl	8002e46 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800327a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800327c:	b29b      	uxth	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d033      	beq.n	80032ea <HAL_I2C_Mem_Write+0x15a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003282:	4632      	mov	r2, r6
 8003284:	4639      	mov	r1, r7
 8003286:	4620      	mov	r0, r4
 8003288:	f7ff fe87 	bl	8002f9a <I2C_WaitOnTXISFlagUntilTimeout>
 800328c:	2800      	cmp	r0, #0
 800328e:	d14e      	bne.n	800332e <HAL_I2C_Mem_Write+0x19e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003290:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003292:	6823      	ldr	r3, [r4, #0]
 8003294:	7812      	ldrb	r2, [r2, #0]
 8003296:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003298:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800329a:	3301      	adds	r3, #1
 800329c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800329e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	3b01      	subs	r3, #1
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80032a8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80032aa:	3b01      	subs	r3, #1
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032b0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80032b2:	b292      	uxth	r2, r2
 80032b4:	2a00      	cmp	r2, #0
 80032b6:	d0e0      	beq.n	800327a <HAL_I2C_Mem_Write+0xea>
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1de      	bne.n	800327a <HAL_I2C_Mem_Write+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032bc:	9600      	str	r6, [sp, #0]
 80032be:	463b      	mov	r3, r7
 80032c0:	2200      	movs	r2, #0
 80032c2:	2180      	movs	r1, #128	; 0x80
 80032c4:	4620      	mov	r0, r4
 80032c6:	f7ff fe93 	bl	8002ff0 <I2C_WaitOnFlagUntilTimeout>
 80032ca:	bb90      	cbnz	r0, 8003332 <HAL_I2C_Mem_Write+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032cc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	2bff      	cmp	r3, #255	; 0xff
 80032d2:	d9c6      	bls.n	8003262 <HAL_I2C_Mem_Write+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032d4:	22ff      	movs	r2, #255	; 0xff
 80032d6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032d8:	2300      	movs	r3, #0
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032e0:	4629      	mov	r1, r5
 80032e2:	4620      	mov	r0, r4
 80032e4:	f7ff fdaf 	bl	8002e46 <I2C_TransferConfig>
 80032e8:	e7c7      	b.n	800327a <HAL_I2C_Mem_Write+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032ea:	4632      	mov	r2, r6
 80032ec:	4639      	mov	r1, r7
 80032ee:	4620      	mov	r0, r4
 80032f0:	f7ff ff26 	bl	8003140 <I2C_WaitOnSTOPFlagUntilTimeout>
 80032f4:	b9f8      	cbnz	r0, 8003336 <HAL_I2C_Mem_Write+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032f6:	6823      	ldr	r3, [r4, #0]
 80032f8:	2220      	movs	r2, #32
 80032fa:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80032fc:	6821      	ldr	r1, [r4, #0]
 80032fe:	684b      	ldr	r3, [r1, #4]
 8003300:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8003304:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8003308:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800330c:	f023 0301 	bic.w	r3, r3, #1
 8003310:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003312:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003316:	2300      	movs	r3, #0
 8003318:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800331c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8003320:	e000      	b.n	8003324 <HAL_I2C_Mem_Write+0x194>
    return HAL_BUSY;
 8003322:	2002      	movs	r0, #2
}
 8003324:	b003      	add	sp, #12
 8003326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800332a:	2002      	movs	r0, #2
 800332c:	e7fa      	b.n	8003324 <HAL_I2C_Mem_Write+0x194>
        return HAL_ERROR;
 800332e:	2001      	movs	r0, #1
 8003330:	e7f8      	b.n	8003324 <HAL_I2C_Mem_Write+0x194>
          return HAL_ERROR;
 8003332:	2001      	movs	r0, #1
 8003334:	e7f6      	b.n	8003324 <HAL_I2C_Mem_Write+0x194>
      return HAL_ERROR;
 8003336:	2001      	movs	r0, #1
 8003338:	e7f4      	b.n	8003324 <HAL_I2C_Mem_Write+0x194>
	...

0800333c <HAL_I2C_Mem_Read>:
{
 800333c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003340:	b083      	sub	sp, #12
 8003342:	460d      	mov	r5, r1
 8003344:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8003348:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800334a:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 800334e:	b2c9      	uxtb	r1, r1
 8003350:	2920      	cmp	r1, #32
 8003352:	f040 80bd 	bne.w	80034d0 <HAL_I2C_Mem_Read+0x194>
 8003356:	4604      	mov	r4, r0
 8003358:	4690      	mov	r8, r2
 800335a:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 800335c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800335e:	f1ba 0f00 	cmp.w	sl, #0
 8003362:	bf18      	it	ne
 8003364:	2b00      	cmpne	r3, #0
 8003366:	d016      	beq.n	8003396 <HAL_I2C_Mem_Read+0x5a>
    __HAL_LOCK(hi2c);
 8003368:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800336c:	2b01      	cmp	r3, #1
 800336e:	f000 80b3 	beq.w	80034d8 <HAL_I2C_Mem_Read+0x19c>
 8003372:	f04f 0b01 	mov.w	fp, #1
 8003376:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800337a:	f7ff fb9d 	bl	8002ab8 <HAL_GetTick>
 800337e:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003380:	9000      	str	r0, [sp, #0]
 8003382:	2319      	movs	r3, #25
 8003384:	465a      	mov	r2, fp
 8003386:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800338a:	4620      	mov	r0, r4
 800338c:	f7ff fe30 	bl	8002ff0 <I2C_WaitOnFlagUntilTimeout>
 8003390:	b130      	cbz	r0, 80033a0 <HAL_I2C_Mem_Read+0x64>
      return HAL_ERROR;
 8003392:	2001      	movs	r0, #1
 8003394:	e09d      	b.n	80034d2 <HAL_I2C_Mem_Read+0x196>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003396:	f44f 7300 	mov.w	r3, #512	; 0x200
 800339a:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 800339c:	2001      	movs	r0, #1
 800339e:	e098      	b.n	80034d2 <HAL_I2C_Mem_Read+0x196>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80033a0:	2322      	movs	r3, #34	; 0x22
 80033a2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033a6:	2340      	movs	r3, #64	; 0x40
 80033a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033ac:	2300      	movs	r3, #0
 80033ae:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80033b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80033b2:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80033b4:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80033b8:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033ba:	9601      	str	r6, [sp, #4]
 80033bc:	9700      	str	r7, [sp, #0]
 80033be:	464b      	mov	r3, r9
 80033c0:	4642      	mov	r2, r8
 80033c2:	4629      	mov	r1, r5
 80033c4:	4620      	mov	r0, r4
 80033c6:	f7ff fe7f 	bl	80030c8 <I2C_RequestMemoryRead>
 80033ca:	b970      	cbnz	r0, 80033ea <HAL_I2C_Mem_Read+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033cc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	2bff      	cmp	r3, #255	; 0xff
 80033d2:	d90f      	bls.n	80033f4 <HAL_I2C_Mem_Read+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80033d4:	22ff      	movs	r2, #255	; 0xff
 80033d6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80033d8:	4b43      	ldr	r3, [pc, #268]	; (80034e8 <HAL_I2C_Mem_Read+0x1ac>)
 80033da:	9300      	str	r3, [sp, #0]
 80033dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033e0:	4629      	mov	r1, r5
 80033e2:	4620      	mov	r0, r4
 80033e4:	f7ff fd2f 	bl	8002e46 <I2C_TransferConfig>
 80033e8:	e021      	b.n	800342e <HAL_I2C_Mem_Read+0xf2>
      __HAL_UNLOCK(hi2c);
 80033ea:	2300      	movs	r3, #0
 80033ec:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80033f0:	4658      	mov	r0, fp
 80033f2:	e06e      	b.n	80034d2 <HAL_I2C_Mem_Read+0x196>
      hi2c->XferSize = hi2c->XferCount;
 80033f4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80033f6:	b292      	uxth	r2, r2
 80033f8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033fa:	4b3b      	ldr	r3, [pc, #236]	; (80034e8 <HAL_I2C_Mem_Read+0x1ac>)
 80033fc:	9300      	str	r3, [sp, #0]
 80033fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003402:	b2d2      	uxtb	r2, r2
 8003404:	4629      	mov	r1, r5
 8003406:	4620      	mov	r0, r4
 8003408:	f7ff fd1d 	bl	8002e46 <I2C_TransferConfig>
 800340c:	e00f      	b.n	800342e <HAL_I2C_Mem_Read+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 800340e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003410:	b292      	uxth	r2, r2
 8003412:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003414:	2300      	movs	r3, #0
 8003416:	9300      	str	r3, [sp, #0]
 8003418:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800341c:	b2d2      	uxtb	r2, r2
 800341e:	4629      	mov	r1, r5
 8003420:	4620      	mov	r0, r4
 8003422:	f7ff fd10 	bl	8002e46 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8003426:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003428:	b29b      	uxth	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d034      	beq.n	8003498 <HAL_I2C_Mem_Read+0x15c>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800342e:	9600      	str	r6, [sp, #0]
 8003430:	463b      	mov	r3, r7
 8003432:	2200      	movs	r2, #0
 8003434:	2104      	movs	r1, #4
 8003436:	4620      	mov	r0, r4
 8003438:	f7ff fdda 	bl	8002ff0 <I2C_WaitOnFlagUntilTimeout>
 800343c:	2800      	cmp	r0, #0
 800343e:	d14d      	bne.n	80034dc <HAL_I2C_Mem_Read+0x1a0>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003440:	6823      	ldr	r3, [r4, #0]
 8003442:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003444:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003446:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003448:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800344a:	3301      	adds	r3, #1
 800344c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800344e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8003450:	3a01      	subs	r2, #1
 8003452:	b292      	uxth	r2, r2
 8003454:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003456:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003458:	b29b      	uxth	r3, r3
 800345a:	3b01      	subs	r3, #1
 800345c:	b29b      	uxth	r3, r3
 800345e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003460:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003462:	b29b      	uxth	r3, r3
 8003464:	2b00      	cmp	r3, #0
 8003466:	d0de      	beq.n	8003426 <HAL_I2C_Mem_Read+0xea>
 8003468:	2a00      	cmp	r2, #0
 800346a:	d1dc      	bne.n	8003426 <HAL_I2C_Mem_Read+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800346c:	9600      	str	r6, [sp, #0]
 800346e:	463b      	mov	r3, r7
 8003470:	2180      	movs	r1, #128	; 0x80
 8003472:	4620      	mov	r0, r4
 8003474:	f7ff fdbc 	bl	8002ff0 <I2C_WaitOnFlagUntilTimeout>
 8003478:	bb90      	cbnz	r0, 80034e0 <HAL_I2C_Mem_Read+0x1a4>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800347a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800347c:	b29b      	uxth	r3, r3
 800347e:	2bff      	cmp	r3, #255	; 0xff
 8003480:	d9c5      	bls.n	800340e <HAL_I2C_Mem_Read+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003482:	22ff      	movs	r2, #255	; 0xff
 8003484:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003486:	2300      	movs	r3, #0
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800348e:	4629      	mov	r1, r5
 8003490:	4620      	mov	r0, r4
 8003492:	f7ff fcd8 	bl	8002e46 <I2C_TransferConfig>
 8003496:	e7c6      	b.n	8003426 <HAL_I2C_Mem_Read+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003498:	4632      	mov	r2, r6
 800349a:	4639      	mov	r1, r7
 800349c:	4620      	mov	r0, r4
 800349e:	f7ff fe4f 	bl	8003140 <I2C_WaitOnSTOPFlagUntilTimeout>
 80034a2:	b9f8      	cbnz	r0, 80034e4 <HAL_I2C_Mem_Read+0x1a8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034a4:	6823      	ldr	r3, [r4, #0]
 80034a6:	2220      	movs	r2, #32
 80034a8:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80034aa:	6821      	ldr	r1, [r4, #0]
 80034ac:	684b      	ldr	r3, [r1, #4]
 80034ae:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80034b2:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80034b6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80034ba:	f023 0301 	bic.w	r3, r3, #1
 80034be:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80034c0:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80034c4:	2300      	movs	r3, #0
 80034c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80034ca:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 80034ce:	e000      	b.n	80034d2 <HAL_I2C_Mem_Read+0x196>
    return HAL_BUSY;
 80034d0:	2002      	movs	r0, #2
}
 80034d2:	b003      	add	sp, #12
 80034d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80034d8:	2002      	movs	r0, #2
 80034da:	e7fa      	b.n	80034d2 <HAL_I2C_Mem_Read+0x196>
        return HAL_ERROR;
 80034dc:	2001      	movs	r0, #1
 80034de:	e7f8      	b.n	80034d2 <HAL_I2C_Mem_Read+0x196>
          return HAL_ERROR;
 80034e0:	2001      	movs	r0, #1
 80034e2:	e7f6      	b.n	80034d2 <HAL_I2C_Mem_Read+0x196>
      return HAL_ERROR;
 80034e4:	2001      	movs	r0, #1
 80034e6:	e7f4      	b.n	80034d2 <HAL_I2C_Mem_Read+0x196>
 80034e8:	80002400 	.word	0x80002400

080034ec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80034ec:	b510      	push	{r4, lr}
 80034ee:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80034f0:	4b1b      	ldr	r3, [pc, #108]	; (8003560 <HAL_PWREx_EnableOverDrive+0x74>)
 80034f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034f4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80034f8:	641a      	str	r2, [r3, #64]	; 0x40
 80034fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003500:	9301      	str	r3, [sp, #4]
 8003502:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003504:	4a17      	ldr	r2, [pc, #92]	; (8003564 <HAL_PWREx_EnableOverDrive+0x78>)
 8003506:	6813      	ldr	r3, [r2, #0]
 8003508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800350c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800350e:	f7ff fad3 	bl	8002ab8 <HAL_GetTick>
 8003512:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003514:	4b13      	ldr	r3, [pc, #76]	; (8003564 <HAL_PWREx_EnableOverDrive+0x78>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800351c:	d108      	bne.n	8003530 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800351e:	f7ff facb 	bl	8002ab8 <HAL_GetTick>
 8003522:	1b00      	subs	r0, r0, r4
 8003524:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003528:	d9f4      	bls.n	8003514 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 800352a:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 800352c:	b002      	add	sp, #8
 800352e:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003530:	4a0c      	ldr	r2, [pc, #48]	; (8003564 <HAL_PWREx_EnableOverDrive+0x78>)
 8003532:	6813      	ldr	r3, [r2, #0]
 8003534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003538:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800353a:	f7ff fabd 	bl	8002ab8 <HAL_GetTick>
 800353e:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003540:	4b08      	ldr	r3, [pc, #32]	; (8003564 <HAL_PWREx_EnableOverDrive+0x78>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003548:	d107      	bne.n	800355a <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800354a:	f7ff fab5 	bl	8002ab8 <HAL_GetTick>
 800354e:	1b00      	subs	r0, r0, r4
 8003550:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003554:	d9f4      	bls.n	8003540 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 8003556:	2003      	movs	r0, #3
 8003558:	e7e8      	b.n	800352c <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 800355a:	2000      	movs	r0, #0
 800355c:	e7e6      	b.n	800352c <HAL_PWREx_EnableOverDrive+0x40>
 800355e:	bf00      	nop
 8003560:	40023800 	.word	0x40023800
 8003564:	40007000 	.word	0x40007000

08003568 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003568:	2800      	cmp	r0, #0
 800356a:	f000 8206 	beq.w	800397a <HAL_RCC_OscConfig+0x412>
{
 800356e:	b570      	push	{r4, r5, r6, lr}
 8003570:	b082      	sub	sp, #8
 8003572:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003574:	6803      	ldr	r3, [r0, #0]
 8003576:	f013 0f01 	tst.w	r3, #1
 800357a:	d029      	beq.n	80035d0 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800357c:	4b95      	ldr	r3, [pc, #596]	; (80037d4 <HAL_RCC_OscConfig+0x26c>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f003 030c 	and.w	r3, r3, #12
 8003584:	2b04      	cmp	r3, #4
 8003586:	d01a      	beq.n	80035be <HAL_RCC_OscConfig+0x56>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003588:	4b92      	ldr	r3, [pc, #584]	; (80037d4 <HAL_RCC_OscConfig+0x26c>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f003 030c 	and.w	r3, r3, #12
 8003590:	2b08      	cmp	r3, #8
 8003592:	d00f      	beq.n	80035b4 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003594:	6863      	ldr	r3, [r4, #4]
 8003596:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800359a:	d040      	beq.n	800361e <HAL_RCC_OscConfig+0xb6>
 800359c:	2b00      	cmp	r3, #0
 800359e:	d154      	bne.n	800364a <HAL_RCC_OscConfig+0xe2>
 80035a0:	4b8c      	ldr	r3, [pc, #560]	; (80037d4 <HAL_RCC_OscConfig+0x26c>)
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80035a8:	601a      	str	r2, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80035b0:	601a      	str	r2, [r3, #0]
 80035b2:	e039      	b.n	8003628 <HAL_RCC_OscConfig+0xc0>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035b4:	4b87      	ldr	r3, [pc, #540]	; (80037d4 <HAL_RCC_OscConfig+0x26c>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80035bc:	d0ea      	beq.n	8003594 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035be:	4b85      	ldr	r3, [pc, #532]	; (80037d4 <HAL_RCC_OscConfig+0x26c>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80035c6:	d003      	beq.n	80035d0 <HAL_RCC_OscConfig+0x68>
 80035c8:	6863      	ldr	r3, [r4, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f000 81d7 	beq.w	800397e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035d0:	6823      	ldr	r3, [r4, #0]
 80035d2:	f013 0f02 	tst.w	r3, #2
 80035d6:	d074      	beq.n	80036c2 <HAL_RCC_OscConfig+0x15a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035d8:	4b7e      	ldr	r3, [pc, #504]	; (80037d4 <HAL_RCC_OscConfig+0x26c>)
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f013 0f0c 	tst.w	r3, #12
 80035e0:	d05e      	beq.n	80036a0 <HAL_RCC_OscConfig+0x138>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035e2:	4b7c      	ldr	r3, [pc, #496]	; (80037d4 <HAL_RCC_OscConfig+0x26c>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 030c 	and.w	r3, r3, #12
 80035ea:	2b08      	cmp	r3, #8
 80035ec:	d053      	beq.n	8003696 <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80035ee:	68e3      	ldr	r3, [r4, #12]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 8089 	beq.w	8003708 <HAL_RCC_OscConfig+0x1a0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035f6:	4a77      	ldr	r2, [pc, #476]	; (80037d4 <HAL_RCC_OscConfig+0x26c>)
 80035f8:	6813      	ldr	r3, [r2, #0]
 80035fa:	f043 0301 	orr.w	r3, r3, #1
 80035fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003600:	f7ff fa5a 	bl	8002ab8 <HAL_GetTick>
 8003604:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003606:	4b73      	ldr	r3, [pc, #460]	; (80037d4 <HAL_RCC_OscConfig+0x26c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f013 0f02 	tst.w	r3, #2
 800360e:	d172      	bne.n	80036f6 <HAL_RCC_OscConfig+0x18e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003610:	f7ff fa52 	bl	8002ab8 <HAL_GetTick>
 8003614:	1b40      	subs	r0, r0, r5
 8003616:	2802      	cmp	r0, #2
 8003618:	d9f5      	bls.n	8003606 <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 800361a:	2003      	movs	r0, #3
 800361c:	e1b4      	b.n	8003988 <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800361e:	4a6d      	ldr	r2, [pc, #436]	; (80037d4 <HAL_RCC_OscConfig+0x26c>)
 8003620:	6813      	ldr	r3, [r2, #0]
 8003622:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003626:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003628:	6863      	ldr	r3, [r4, #4]
 800362a:	b32b      	cbz	r3, 8003678 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 800362c:	f7ff fa44 	bl	8002ab8 <HAL_GetTick>
 8003630:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003632:	4b68      	ldr	r3, [pc, #416]	; (80037d4 <HAL_RCC_OscConfig+0x26c>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800363a:	d1c9      	bne.n	80035d0 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800363c:	f7ff fa3c 	bl	8002ab8 <HAL_GetTick>
 8003640:	1b40      	subs	r0, r0, r5
 8003642:	2864      	cmp	r0, #100	; 0x64
 8003644:	d9f5      	bls.n	8003632 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8003646:	2003      	movs	r0, #3
 8003648:	e19e      	b.n	8003988 <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800364a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800364e:	d009      	beq.n	8003664 <HAL_RCC_OscConfig+0xfc>
 8003650:	4b60      	ldr	r3, [pc, #384]	; (80037d4 <HAL_RCC_OscConfig+0x26c>)
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003658:	601a      	str	r2, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003660:	601a      	str	r2, [r3, #0]
 8003662:	e7e1      	b.n	8003628 <HAL_RCC_OscConfig+0xc0>
 8003664:	4b5b      	ldr	r3, [pc, #364]	; (80037d4 <HAL_RCC_OscConfig+0x26c>)
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800366c:	601a      	str	r2, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003674:	601a      	str	r2, [r3, #0]
 8003676:	e7d7      	b.n	8003628 <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 8003678:	f7ff fa1e 	bl	8002ab8 <HAL_GetTick>
 800367c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800367e:	4b55      	ldr	r3, [pc, #340]	; (80037d4 <HAL_RCC_OscConfig+0x26c>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003686:	d0a3      	beq.n	80035d0 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003688:	f7ff fa16 	bl	8002ab8 <HAL_GetTick>
 800368c:	1b40      	subs	r0, r0, r5
 800368e:	2864      	cmp	r0, #100	; 0x64
 8003690:	d9f5      	bls.n	800367e <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 8003692:	2003      	movs	r0, #3
 8003694:	e178      	b.n	8003988 <HAL_RCC_OscConfig+0x420>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003696:	4b4f      	ldr	r3, [pc, #316]	; (80037d4 <HAL_RCC_OscConfig+0x26c>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800369e:	d1a6      	bne.n	80035ee <HAL_RCC_OscConfig+0x86>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036a0:	4b4c      	ldr	r3, [pc, #304]	; (80037d4 <HAL_RCC_OscConfig+0x26c>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f013 0f02 	tst.w	r3, #2
 80036a8:	d003      	beq.n	80036b2 <HAL_RCC_OscConfig+0x14a>
 80036aa:	68e3      	ldr	r3, [r4, #12]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	f040 8168 	bne.w	8003982 <HAL_RCC_OscConfig+0x41a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b2:	4a48      	ldr	r2, [pc, #288]	; (80037d4 <HAL_RCC_OscConfig+0x26c>)
 80036b4:	6813      	ldr	r3, [r2, #0]
 80036b6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80036ba:	6921      	ldr	r1, [r4, #16]
 80036bc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80036c0:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036c2:	6823      	ldr	r3, [r4, #0]
 80036c4:	f013 0f08 	tst.w	r3, #8
 80036c8:	d046      	beq.n	8003758 <HAL_RCC_OscConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80036ca:	6963      	ldr	r3, [r4, #20]
 80036cc:	b383      	cbz	r3, 8003730 <HAL_RCC_OscConfig+0x1c8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ce:	4a41      	ldr	r2, [pc, #260]	; (80037d4 <HAL_RCC_OscConfig+0x26c>)
 80036d0:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80036d2:	f043 0301 	orr.w	r3, r3, #1
 80036d6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d8:	f7ff f9ee 	bl	8002ab8 <HAL_GetTick>
 80036dc:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036de:	4b3d      	ldr	r3, [pc, #244]	; (80037d4 <HAL_RCC_OscConfig+0x26c>)
 80036e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036e2:	f013 0f02 	tst.w	r3, #2
 80036e6:	d137      	bne.n	8003758 <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036e8:	f7ff f9e6 	bl	8002ab8 <HAL_GetTick>
 80036ec:	1b40      	subs	r0, r0, r5
 80036ee:	2802      	cmp	r0, #2
 80036f0:	d9f5      	bls.n	80036de <HAL_RCC_OscConfig+0x176>
        {
          return HAL_TIMEOUT;
 80036f2:	2003      	movs	r0, #3
 80036f4:	e148      	b.n	8003988 <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f6:	4a37      	ldr	r2, [pc, #220]	; (80037d4 <HAL_RCC_OscConfig+0x26c>)
 80036f8:	6813      	ldr	r3, [r2, #0]
 80036fa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80036fe:	6921      	ldr	r1, [r4, #16]
 8003700:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003704:	6013      	str	r3, [r2, #0]
 8003706:	e7dc      	b.n	80036c2 <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_DISABLE();
 8003708:	4a32      	ldr	r2, [pc, #200]	; (80037d4 <HAL_RCC_OscConfig+0x26c>)
 800370a:	6813      	ldr	r3, [r2, #0]
 800370c:	f023 0301 	bic.w	r3, r3, #1
 8003710:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003712:	f7ff f9d1 	bl	8002ab8 <HAL_GetTick>
 8003716:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003718:	4b2e      	ldr	r3, [pc, #184]	; (80037d4 <HAL_RCC_OscConfig+0x26c>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f013 0f02 	tst.w	r3, #2
 8003720:	d0cf      	beq.n	80036c2 <HAL_RCC_OscConfig+0x15a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003722:	f7ff f9c9 	bl	8002ab8 <HAL_GetTick>
 8003726:	1b40      	subs	r0, r0, r5
 8003728:	2802      	cmp	r0, #2
 800372a:	d9f5      	bls.n	8003718 <HAL_RCC_OscConfig+0x1b0>
            return HAL_TIMEOUT;
 800372c:	2003      	movs	r0, #3
 800372e:	e12b      	b.n	8003988 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003730:	4a28      	ldr	r2, [pc, #160]	; (80037d4 <HAL_RCC_OscConfig+0x26c>)
 8003732:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8003734:	f023 0301 	bic.w	r3, r3, #1
 8003738:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800373a:	f7ff f9bd 	bl	8002ab8 <HAL_GetTick>
 800373e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003740:	4b24      	ldr	r3, [pc, #144]	; (80037d4 <HAL_RCC_OscConfig+0x26c>)
 8003742:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003744:	f013 0f02 	tst.w	r3, #2
 8003748:	d006      	beq.n	8003758 <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800374a:	f7ff f9b5 	bl	8002ab8 <HAL_GetTick>
 800374e:	1b40      	subs	r0, r0, r5
 8003750:	2802      	cmp	r0, #2
 8003752:	d9f5      	bls.n	8003740 <HAL_RCC_OscConfig+0x1d8>
        {
          return HAL_TIMEOUT;
 8003754:	2003      	movs	r0, #3
 8003756:	e117      	b.n	8003988 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003758:	6823      	ldr	r3, [r4, #0]
 800375a:	f013 0f04 	tst.w	r3, #4
 800375e:	d07d      	beq.n	800385c <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003760:	4b1c      	ldr	r3, [pc, #112]	; (80037d4 <HAL_RCC_OscConfig+0x26c>)
 8003762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003764:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003768:	d11e      	bne.n	80037a8 <HAL_RCC_OscConfig+0x240>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800376a:	4b1a      	ldr	r3, [pc, #104]	; (80037d4 <HAL_RCC_OscConfig+0x26c>)
 800376c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800376e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003772:	641a      	str	r2, [r3, #64]	; 0x40
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800377a:	9301      	str	r3, [sp, #4]
 800377c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800377e:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003780:	4b15      	ldr	r3, [pc, #84]	; (80037d8 <HAL_RCC_OscConfig+0x270>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003788:	d010      	beq.n	80037ac <HAL_RCC_OscConfig+0x244>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800378a:	68a3      	ldr	r3, [r4, #8]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d025      	beq.n	80037dc <HAL_RCC_OscConfig+0x274>
 8003790:	2b00      	cmp	r3, #0
 8003792:	d13b      	bne.n	800380c <HAL_RCC_OscConfig+0x2a4>
 8003794:	4b0f      	ldr	r3, [pc, #60]	; (80037d4 <HAL_RCC_OscConfig+0x26c>)
 8003796:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003798:	f022 0201 	bic.w	r2, r2, #1
 800379c:	671a      	str	r2, [r3, #112]	; 0x70
 800379e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80037a0:	f022 0204 	bic.w	r2, r2, #4
 80037a4:	671a      	str	r2, [r3, #112]	; 0x70
 80037a6:	e01e      	b.n	80037e6 <HAL_RCC_OscConfig+0x27e>
  FlagStatus pwrclkchanged = RESET;
 80037a8:	2500      	movs	r5, #0
 80037aa:	e7e9      	b.n	8003780 <HAL_RCC_OscConfig+0x218>
      PWR->CR1 |= PWR_CR1_DBP;
 80037ac:	4a0a      	ldr	r2, [pc, #40]	; (80037d8 <HAL_RCC_OscConfig+0x270>)
 80037ae:	6813      	ldr	r3, [r2, #0]
 80037b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037b4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80037b6:	f7ff f97f 	bl	8002ab8 <HAL_GetTick>
 80037ba:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037bc:	4b06      	ldr	r3, [pc, #24]	; (80037d8 <HAL_RCC_OscConfig+0x270>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80037c4:	d1e1      	bne.n	800378a <HAL_RCC_OscConfig+0x222>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037c6:	f7ff f977 	bl	8002ab8 <HAL_GetTick>
 80037ca:	1b80      	subs	r0, r0, r6
 80037cc:	2864      	cmp	r0, #100	; 0x64
 80037ce:	d9f5      	bls.n	80037bc <HAL_RCC_OscConfig+0x254>
          return HAL_TIMEOUT;
 80037d0:	2003      	movs	r0, #3
 80037d2:	e0d9      	b.n	8003988 <HAL_RCC_OscConfig+0x420>
 80037d4:	40023800 	.word	0x40023800
 80037d8:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037dc:	4a72      	ldr	r2, [pc, #456]	; (80039a8 <HAL_RCC_OscConfig+0x440>)
 80037de:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80037e0:	f043 0301 	orr.w	r3, r3, #1
 80037e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037e6:	68a3      	ldr	r3, [r4, #8]
 80037e8:	b333      	cbz	r3, 8003838 <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ea:	f7ff f965 	bl	8002ab8 <HAL_GetTick>
 80037ee:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037f0:	4b6d      	ldr	r3, [pc, #436]	; (80039a8 <HAL_RCC_OscConfig+0x440>)
 80037f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f4:	f013 0f02 	tst.w	r3, #2
 80037f8:	d12f      	bne.n	800385a <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037fa:	f7ff f95d 	bl	8002ab8 <HAL_GetTick>
 80037fe:	1b80      	subs	r0, r0, r6
 8003800:	f241 3388 	movw	r3, #5000	; 0x1388
 8003804:	4298      	cmp	r0, r3
 8003806:	d9f3      	bls.n	80037f0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003808:	2003      	movs	r0, #3
 800380a:	e0bd      	b.n	8003988 <HAL_RCC_OscConfig+0x420>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800380c:	2b05      	cmp	r3, #5
 800380e:	d009      	beq.n	8003824 <HAL_RCC_OscConfig+0x2bc>
 8003810:	4b65      	ldr	r3, [pc, #404]	; (80039a8 <HAL_RCC_OscConfig+0x440>)
 8003812:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003814:	f022 0201 	bic.w	r2, r2, #1
 8003818:	671a      	str	r2, [r3, #112]	; 0x70
 800381a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800381c:	f022 0204 	bic.w	r2, r2, #4
 8003820:	671a      	str	r2, [r3, #112]	; 0x70
 8003822:	e7e0      	b.n	80037e6 <HAL_RCC_OscConfig+0x27e>
 8003824:	4b60      	ldr	r3, [pc, #384]	; (80039a8 <HAL_RCC_OscConfig+0x440>)
 8003826:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003828:	f042 0204 	orr.w	r2, r2, #4
 800382c:	671a      	str	r2, [r3, #112]	; 0x70
 800382e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003830:	f042 0201 	orr.w	r2, r2, #1
 8003834:	671a      	str	r2, [r3, #112]	; 0x70
 8003836:	e7d6      	b.n	80037e6 <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003838:	f7ff f93e 	bl	8002ab8 <HAL_GetTick>
 800383c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800383e:	4b5a      	ldr	r3, [pc, #360]	; (80039a8 <HAL_RCC_OscConfig+0x440>)
 8003840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003842:	f013 0f02 	tst.w	r3, #2
 8003846:	d008      	beq.n	800385a <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003848:	f7ff f936 	bl	8002ab8 <HAL_GetTick>
 800384c:	1b80      	subs	r0, r0, r6
 800384e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003852:	4298      	cmp	r0, r3
 8003854:	d9f3      	bls.n	800383e <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 8003856:	2003      	movs	r0, #3
 8003858:	e096      	b.n	8003988 <HAL_RCC_OscConfig+0x420>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800385a:	b9fd      	cbnz	r5, 800389c <HAL_RCC_OscConfig+0x334>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800385c:	69a3      	ldr	r3, [r4, #24]
 800385e:	2b00      	cmp	r3, #0
 8003860:	f000 8091 	beq.w	8003986 <HAL_RCC_OscConfig+0x41e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003864:	4a50      	ldr	r2, [pc, #320]	; (80039a8 <HAL_RCC_OscConfig+0x440>)
 8003866:	6892      	ldr	r2, [r2, #8]
 8003868:	f002 020c 	and.w	r2, r2, #12
 800386c:	2a08      	cmp	r2, #8
 800386e:	d059      	beq.n	8003924 <HAL_RCC_OscConfig+0x3bc>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003870:	2b02      	cmp	r3, #2
 8003872:	d019      	beq.n	80038a8 <HAL_RCC_OscConfig+0x340>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003874:	4a4c      	ldr	r2, [pc, #304]	; (80039a8 <HAL_RCC_OscConfig+0x440>)
 8003876:	6813      	ldr	r3, [r2, #0]
 8003878:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800387c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800387e:	f7ff f91b 	bl	8002ab8 <HAL_GetTick>
 8003882:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003884:	4b48      	ldr	r3, [pc, #288]	; (80039a8 <HAL_RCC_OscConfig+0x440>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800388c:	d048      	beq.n	8003920 <HAL_RCC_OscConfig+0x3b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800388e:	f7ff f913 	bl	8002ab8 <HAL_GetTick>
 8003892:	1b00      	subs	r0, r0, r4
 8003894:	2802      	cmp	r0, #2
 8003896:	d9f5      	bls.n	8003884 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8003898:	2003      	movs	r0, #3
 800389a:	e075      	b.n	8003988 <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_PWR_CLK_DISABLE();
 800389c:	4a42      	ldr	r2, [pc, #264]	; (80039a8 <HAL_RCC_OscConfig+0x440>)
 800389e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80038a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038a4:	6413      	str	r3, [r2, #64]	; 0x40
 80038a6:	e7d9      	b.n	800385c <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 80038a8:	4a3f      	ldr	r2, [pc, #252]	; (80039a8 <HAL_RCC_OscConfig+0x440>)
 80038aa:	6813      	ldr	r3, [r2, #0]
 80038ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038b0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80038b2:	f7ff f901 	bl	8002ab8 <HAL_GetTick>
 80038b6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038b8:	4b3b      	ldr	r3, [pc, #236]	; (80039a8 <HAL_RCC_OscConfig+0x440>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80038c0:	d006      	beq.n	80038d0 <HAL_RCC_OscConfig+0x368>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038c2:	f7ff f8f9 	bl	8002ab8 <HAL_GetTick>
 80038c6:	1b40      	subs	r0, r0, r5
 80038c8:	2802      	cmp	r0, #2
 80038ca:	d9f5      	bls.n	80038b8 <HAL_RCC_OscConfig+0x350>
            return HAL_TIMEOUT;
 80038cc:	2003      	movs	r0, #3
 80038ce:	e05b      	b.n	8003988 <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038d0:	69e3      	ldr	r3, [r4, #28]
 80038d2:	6a22      	ldr	r2, [r4, #32]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80038d8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80038dc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80038de:	0852      	lsrs	r2, r2, #1
 80038e0:	3a01      	subs	r2, #1
 80038e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80038e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80038e8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80038ec:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80038ee:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80038f2:	4a2d      	ldr	r2, [pc, #180]	; (80039a8 <HAL_RCC_OscConfig+0x440>)
 80038f4:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80038f6:	6813      	ldr	r3, [r2, #0]
 80038f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038fc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80038fe:	f7ff f8db 	bl	8002ab8 <HAL_GetTick>
 8003902:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003904:	4b28      	ldr	r3, [pc, #160]	; (80039a8 <HAL_RCC_OscConfig+0x440>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800390c:	d106      	bne.n	800391c <HAL_RCC_OscConfig+0x3b4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800390e:	f7ff f8d3 	bl	8002ab8 <HAL_GetTick>
 8003912:	1b00      	subs	r0, r0, r4
 8003914:	2802      	cmp	r0, #2
 8003916:	d9f5      	bls.n	8003904 <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 8003918:	2003      	movs	r0, #3
 800391a:	e035      	b.n	8003988 <HAL_RCC_OscConfig+0x420>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800391c:	2000      	movs	r0, #0
 800391e:	e033      	b.n	8003988 <HAL_RCC_OscConfig+0x420>
 8003920:	2000      	movs	r0, #0
 8003922:	e031      	b.n	8003988 <HAL_RCC_OscConfig+0x420>
      pll_config = RCC->PLLCFGR;
 8003924:	4a20      	ldr	r2, [pc, #128]	; (80039a8 <HAL_RCC_OscConfig+0x440>)
 8003926:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003928:	2b01      	cmp	r3, #1
 800392a:	d02f      	beq.n	800398c <HAL_RCC_OscConfig+0x424>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800392c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003930:	69e1      	ldr	r1, [r4, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003932:	428b      	cmp	r3, r1
 8003934:	d12c      	bne.n	8003990 <HAL_RCC_OscConfig+0x428>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003936:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 800393a:	6a21      	ldr	r1, [r4, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800393c:	428b      	cmp	r3, r1
 800393e:	d129      	bne.n	8003994 <HAL_RCC_OscConfig+0x42c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003940:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003942:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003946:	4013      	ands	r3, r2
 8003948:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 800394c:	d124      	bne.n	8003998 <HAL_RCC_OscConfig+0x430>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800394e:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 8003952:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003954:	085b      	lsrs	r3, r3, #1
 8003956:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003958:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 800395c:	d11e      	bne.n	800399c <HAL_RCC_OscConfig+0x434>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800395e:	f002 6370 	and.w	r3, r2, #251658240	; 0xf000000
 8003962:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003964:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 8003968:	d11a      	bne.n	80039a0 <HAL_RCC_OscConfig+0x438>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800396a:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 800396e:	6b23      	ldr	r3, [r4, #48]	; 0x30
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003970:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
 8003974:	d116      	bne.n	80039a4 <HAL_RCC_OscConfig+0x43c>
  return HAL_OK;
 8003976:	2000      	movs	r0, #0
 8003978:	e006      	b.n	8003988 <HAL_RCC_OscConfig+0x420>
    return HAL_ERROR;
 800397a:	2001      	movs	r0, #1
}
 800397c:	4770      	bx	lr
        return HAL_ERROR;
 800397e:	2001      	movs	r0, #1
 8003980:	e002      	b.n	8003988 <HAL_RCC_OscConfig+0x420>
        return HAL_ERROR;
 8003982:	2001      	movs	r0, #1
 8003984:	e000      	b.n	8003988 <HAL_RCC_OscConfig+0x420>
  return HAL_OK;
 8003986:	2000      	movs	r0, #0
}
 8003988:	b002      	add	sp, #8
 800398a:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800398c:	2001      	movs	r0, #1
 800398e:	e7fb      	b.n	8003988 <HAL_RCC_OscConfig+0x420>
 8003990:	2001      	movs	r0, #1
 8003992:	e7f9      	b.n	8003988 <HAL_RCC_OscConfig+0x420>
 8003994:	2001      	movs	r0, #1
 8003996:	e7f7      	b.n	8003988 <HAL_RCC_OscConfig+0x420>
 8003998:	2001      	movs	r0, #1
 800399a:	e7f5      	b.n	8003988 <HAL_RCC_OscConfig+0x420>
 800399c:	2001      	movs	r0, #1
 800399e:	e7f3      	b.n	8003988 <HAL_RCC_OscConfig+0x420>
 80039a0:	2001      	movs	r0, #1
 80039a2:	e7f1      	b.n	8003988 <HAL_RCC_OscConfig+0x420>
 80039a4:	2001      	movs	r0, #1
 80039a6:	e7ef      	b.n	8003988 <HAL_RCC_OscConfig+0x420>
 80039a8:	40023800 	.word	0x40023800

080039ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039ac:	b508      	push	{r3, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039ae:	4b25      	ldr	r3, [pc, #148]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x98>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f003 030c 	and.w	r3, r3, #12
 80039b6:	2b04      	cmp	r3, #4
 80039b8:	d03f      	beq.n	8003a3a <HAL_RCC_GetSysClockFreq+0x8e>
 80039ba:	2b08      	cmp	r3, #8
 80039bc:	d13f      	bne.n	8003a3e <HAL_RCC_GetSysClockFreq+0x92>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039be:	4b21      	ldr	r3, [pc, #132]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x98>)
 80039c0:	685a      	ldr	r2, [r3, #4]
 80039c2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80039cc:	d012      	beq.n	80039f4 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039ce:	4b1d      	ldr	r3, [pc, #116]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x98>)
 80039d0:	6859      	ldr	r1, [r3, #4]
 80039d2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80039d6:	481c      	ldr	r0, [pc, #112]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x9c>)
 80039d8:	2300      	movs	r3, #0
 80039da:	fba1 0100 	umull	r0, r1, r1, r0
 80039de:	f7fc fc2f 	bl	8000240 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80039e2:	4b18      	ldr	r3, [pc, #96]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x98>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80039ea:	3301      	adds	r3, #1
 80039ec:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80039ee:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80039f2:	e025      	b.n	8003a40 <HAL_RCC_GetSysClockFreq+0x94>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039f4:	4b13      	ldr	r3, [pc, #76]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x98>)
 80039f6:	6859      	ldr	r1, [r3, #4]
 80039f8:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 80039fc:	ea4f 114c 	mov.w	r1, ip, lsl #5
 8003a00:	ebb1 000c 	subs.w	r0, r1, ip
 8003a04:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8003a08:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8003a0c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003a10:	0181      	lsls	r1, r0, #6
 8003a12:	1a09      	subs	r1, r1, r0
 8003a14:	eb63 030e 	sbc.w	r3, r3, lr
 8003a18:	00db      	lsls	r3, r3, #3
 8003a1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a1e:	00c9      	lsls	r1, r1, #3
 8003a20:	eb11 0c0c 	adds.w	ip, r1, ip
 8003a24:	f143 0300 	adc.w	r3, r3, #0
 8003a28:	0299      	lsls	r1, r3, #10
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8003a30:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8003a34:	f7fc fc04 	bl	8000240 <__aeabi_uldivmod>
 8003a38:	e7d3      	b.n	80039e2 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8003a3a:	4803      	ldr	r0, [pc, #12]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003a3c:	e000      	b.n	8003a40 <HAL_RCC_GetSysClockFreq+0x94>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a3e:	4803      	ldr	r0, [pc, #12]	; (8003a4c <HAL_RCC_GetSysClockFreq+0xa0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003a40:	bd08      	pop	{r3, pc}
 8003a42:	bf00      	nop
 8003a44:	40023800 	.word	0x40023800
 8003a48:	017d7840 	.word	0x017d7840
 8003a4c:	00f42400 	.word	0x00f42400

08003a50 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003a50:	2800      	cmp	r0, #0
 8003a52:	f000 80a0 	beq.w	8003b96 <HAL_RCC_ClockConfig+0x146>
{
 8003a56:	b570      	push	{r4, r5, r6, lr}
 8003a58:	460d      	mov	r5, r1
 8003a5a:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a5c:	4b52      	ldr	r3, [pc, #328]	; (8003ba8 <HAL_RCC_ClockConfig+0x158>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 030f 	and.w	r3, r3, #15
 8003a64:	428b      	cmp	r3, r1
 8003a66:	d20b      	bcs.n	8003a80 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a68:	4a4f      	ldr	r2, [pc, #316]	; (8003ba8 <HAL_RCC_ClockConfig+0x158>)
 8003a6a:	6813      	ldr	r3, [r2, #0]
 8003a6c:	f023 030f 	bic.w	r3, r3, #15
 8003a70:	430b      	orrs	r3, r1
 8003a72:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a74:	6813      	ldr	r3, [r2, #0]
 8003a76:	f003 030f 	and.w	r3, r3, #15
 8003a7a:	428b      	cmp	r3, r1
 8003a7c:	f040 808d 	bne.w	8003b9a <HAL_RCC_ClockConfig+0x14a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a80:	6823      	ldr	r3, [r4, #0]
 8003a82:	f013 0f02 	tst.w	r3, #2
 8003a86:	d017      	beq.n	8003ab8 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a88:	f013 0f04 	tst.w	r3, #4
 8003a8c:	d004      	beq.n	8003a98 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a8e:	4a47      	ldr	r2, [pc, #284]	; (8003bac <HAL_RCC_ClockConfig+0x15c>)
 8003a90:	6893      	ldr	r3, [r2, #8]
 8003a92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a96:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a98:	6823      	ldr	r3, [r4, #0]
 8003a9a:	f013 0f08 	tst.w	r3, #8
 8003a9e:	d004      	beq.n	8003aaa <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003aa0:	4a42      	ldr	r2, [pc, #264]	; (8003bac <HAL_RCC_ClockConfig+0x15c>)
 8003aa2:	6893      	ldr	r3, [r2, #8]
 8003aa4:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003aa8:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003aaa:	4a40      	ldr	r2, [pc, #256]	; (8003bac <HAL_RCC_ClockConfig+0x15c>)
 8003aac:	6893      	ldr	r3, [r2, #8]
 8003aae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ab2:	68a1      	ldr	r1, [r4, #8]
 8003ab4:	430b      	orrs	r3, r1
 8003ab6:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ab8:	6823      	ldr	r3, [r4, #0]
 8003aba:	f013 0f01 	tst.w	r3, #1
 8003abe:	d031      	beq.n	8003b24 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ac0:	6863      	ldr	r3, [r4, #4]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d020      	beq.n	8003b08 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d025      	beq.n	8003b16 <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aca:	4a38      	ldr	r2, [pc, #224]	; (8003bac <HAL_RCC_ClockConfig+0x15c>)
 8003acc:	6812      	ldr	r2, [r2, #0]
 8003ace:	f012 0f02 	tst.w	r2, #2
 8003ad2:	d064      	beq.n	8003b9e <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ad4:	4935      	ldr	r1, [pc, #212]	; (8003bac <HAL_RCC_ClockConfig+0x15c>)
 8003ad6:	688a      	ldr	r2, [r1, #8]
 8003ad8:	f022 0203 	bic.w	r2, r2, #3
 8003adc:	4313      	orrs	r3, r2
 8003ade:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003ae0:	f7fe ffea 	bl	8002ab8 <HAL_GetTick>
 8003ae4:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ae6:	4b31      	ldr	r3, [pc, #196]	; (8003bac <HAL_RCC_ClockConfig+0x15c>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f003 030c 	and.w	r3, r3, #12
 8003aee:	6862      	ldr	r2, [r4, #4]
 8003af0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003af4:	d016      	beq.n	8003b24 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003af6:	f7fe ffdf 	bl	8002ab8 <HAL_GetTick>
 8003afa:	1b80      	subs	r0, r0, r6
 8003afc:	f241 3388 	movw	r3, #5000	; 0x1388
 8003b00:	4298      	cmp	r0, r3
 8003b02:	d9f0      	bls.n	8003ae6 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8003b04:	2003      	movs	r0, #3
 8003b06:	e045      	b.n	8003b94 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b08:	4a28      	ldr	r2, [pc, #160]	; (8003bac <HAL_RCC_ClockConfig+0x15c>)
 8003b0a:	6812      	ldr	r2, [r2, #0]
 8003b0c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8003b10:	d1e0      	bne.n	8003ad4 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8003b12:	2001      	movs	r0, #1
 8003b14:	e03e      	b.n	8003b94 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b16:	4a25      	ldr	r2, [pc, #148]	; (8003bac <HAL_RCC_ClockConfig+0x15c>)
 8003b18:	6812      	ldr	r2, [r2, #0]
 8003b1a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003b1e:	d1d9      	bne.n	8003ad4 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8003b20:	2001      	movs	r0, #1
 8003b22:	e037      	b.n	8003b94 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b24:	4b20      	ldr	r3, [pc, #128]	; (8003ba8 <HAL_RCC_ClockConfig+0x158>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 030f 	and.w	r3, r3, #15
 8003b2c:	42ab      	cmp	r3, r5
 8003b2e:	d90a      	bls.n	8003b46 <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b30:	4a1d      	ldr	r2, [pc, #116]	; (8003ba8 <HAL_RCC_ClockConfig+0x158>)
 8003b32:	6813      	ldr	r3, [r2, #0]
 8003b34:	f023 030f 	bic.w	r3, r3, #15
 8003b38:	432b      	orrs	r3, r5
 8003b3a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b3c:	6813      	ldr	r3, [r2, #0]
 8003b3e:	f003 030f 	and.w	r3, r3, #15
 8003b42:	42ab      	cmp	r3, r5
 8003b44:	d12d      	bne.n	8003ba2 <HAL_RCC_ClockConfig+0x152>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b46:	6823      	ldr	r3, [r4, #0]
 8003b48:	f013 0f04 	tst.w	r3, #4
 8003b4c:	d006      	beq.n	8003b5c <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b4e:	4a17      	ldr	r2, [pc, #92]	; (8003bac <HAL_RCC_ClockConfig+0x15c>)
 8003b50:	6893      	ldr	r3, [r2, #8]
 8003b52:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003b56:	68e1      	ldr	r1, [r4, #12]
 8003b58:	430b      	orrs	r3, r1
 8003b5a:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b5c:	6823      	ldr	r3, [r4, #0]
 8003b5e:	f013 0f08 	tst.w	r3, #8
 8003b62:	d007      	beq.n	8003b74 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b64:	4a11      	ldr	r2, [pc, #68]	; (8003bac <HAL_RCC_ClockConfig+0x15c>)
 8003b66:	6893      	ldr	r3, [r2, #8]
 8003b68:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003b6c:	6921      	ldr	r1, [r4, #16]
 8003b6e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003b72:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b74:	f7ff ff1a 	bl	80039ac <HAL_RCC_GetSysClockFreq>
 8003b78:	4b0c      	ldr	r3, [pc, #48]	; (8003bac <HAL_RCC_ClockConfig+0x15c>)
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003b80:	4a0b      	ldr	r2, [pc, #44]	; (8003bb0 <HAL_RCC_ClockConfig+0x160>)
 8003b82:	5cd3      	ldrb	r3, [r2, r3]
 8003b84:	40d8      	lsrs	r0, r3
 8003b86:	4b0b      	ldr	r3, [pc, #44]	; (8003bb4 <HAL_RCC_ClockConfig+0x164>)
 8003b88:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8003b8a:	4b0b      	ldr	r3, [pc, #44]	; (8003bb8 <HAL_RCC_ClockConfig+0x168>)
 8003b8c:	6818      	ldr	r0, [r3, #0]
 8003b8e:	f7fe fe67 	bl	8002860 <HAL_InitTick>
  return HAL_OK;
 8003b92:	2000      	movs	r0, #0
}
 8003b94:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003b96:	2001      	movs	r0, #1
}
 8003b98:	4770      	bx	lr
      return HAL_ERROR;
 8003b9a:	2001      	movs	r0, #1
 8003b9c:	e7fa      	b.n	8003b94 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8003b9e:	2001      	movs	r0, #1
 8003ba0:	e7f8      	b.n	8003b94 <HAL_RCC_ClockConfig+0x144>
      return HAL_ERROR;
 8003ba2:	2001      	movs	r0, #1
 8003ba4:	e7f6      	b.n	8003b94 <HAL_RCC_ClockConfig+0x144>
 8003ba6:	bf00      	nop
 8003ba8:	40023c00 	.word	0x40023c00
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	080054d4 	.word	0x080054d4
 8003bb4:	20000004 	.word	0x20000004
 8003bb8:	2000000c 	.word	0x2000000c

08003bbc <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8003bbc:	4b01      	ldr	r3, [pc, #4]	; (8003bc4 <HAL_RCC_GetHCLKFreq+0x8>)
 8003bbe:	6818      	ldr	r0, [r3, #0]
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	20000004 	.word	0x20000004

08003bc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bc8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003bca:	f7ff fff7 	bl	8003bbc <HAL_RCC_GetHCLKFreq>
 8003bce:	4b04      	ldr	r3, [pc, #16]	; (8003be0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003bd6:	4a03      	ldr	r2, [pc, #12]	; (8003be4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003bd8:	5cd3      	ldrb	r3, [r2, r3]
}
 8003bda:	40d8      	lsrs	r0, r3
 8003bdc:	bd08      	pop	{r3, pc}
 8003bde:	bf00      	nop
 8003be0:	40023800 	.word	0x40023800
 8003be4:	080054e4 	.word	0x080054e4

08003be8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003be8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003bea:	f7ff ffe7 	bl	8003bbc <HAL_RCC_GetHCLKFreq>
 8003bee:	4b04      	ldr	r3, [pc, #16]	; (8003c00 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003bf6:	4a03      	ldr	r2, [pc, #12]	; (8003c04 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003bf8:	5cd3      	ldrb	r3, [r2, r3]
}
 8003bfa:	40d8      	lsrs	r0, r3
 8003bfc:	bd08      	pop	{r3, pc}
 8003bfe:	bf00      	nop
 8003c00:	40023800 	.word	0x40023800
 8003c04:	080054e4 	.word	0x080054e4

08003c08 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c08:	230f      	movs	r3, #15
 8003c0a:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c0c:	4b0b      	ldr	r3, [pc, #44]	; (8003c3c <HAL_RCC_GetClockConfig+0x34>)
 8003c0e:	689a      	ldr	r2, [r3, #8]
 8003c10:	f002 0203 	and.w	r2, r2, #3
 8003c14:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003c16:	689a      	ldr	r2, [r3, #8]
 8003c18:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8003c1c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8003c24:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	08db      	lsrs	r3, r3, #3
 8003c2a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003c2e:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c30:	4b03      	ldr	r3, [pc, #12]	; (8003c40 <HAL_RCC_GetClockConfig+0x38>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 030f 	and.w	r3, r3, #15
 8003c38:	600b      	str	r3, [r1, #0]
}
 8003c3a:	4770      	bx	lr
 8003c3c:	40023800 	.word	0x40023800
 8003c40:	40023c00 	.word	0x40023c00

08003c44 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003c44:	4770      	bx	lr
	...

08003c48 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c48:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d13a      	bne.n	8003cc8 <HAL_TIM_Base_Start_IT+0x80>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c52:	2302      	movs	r3, #2
 8003c54:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c58:	6802      	ldr	r2, [r0, #0]
 8003c5a:	68d3      	ldr	r3, [r2, #12]
 8003c5c:	f043 0301 	orr.w	r3, r3, #1
 8003c60:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c62:	6803      	ldr	r3, [r0, #0]
 8003c64:	4a1a      	ldr	r2, [pc, #104]	; (8003cd0 <HAL_TIM_Base_Start_IT+0x88>)
 8003c66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c6a:	bf18      	it	ne
 8003c6c:	4293      	cmpne	r3, r2
 8003c6e:	d01d      	beq.n	8003cac <HAL_TIM_Base_Start_IT+0x64>
 8003c70:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d019      	beq.n	8003cac <HAL_TIM_Base_Start_IT+0x64>
 8003c78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d015      	beq.n	8003cac <HAL_TIM_Base_Start_IT+0x64>
 8003c80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d011      	beq.n	8003cac <HAL_TIM_Base_Start_IT+0x64>
 8003c88:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d00d      	beq.n	8003cac <HAL_TIM_Base_Start_IT+0x64>
 8003c90:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d009      	beq.n	8003cac <HAL_TIM_Base_Start_IT+0x64>
 8003c98:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d005      	beq.n	8003cac <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	f042 0201 	orr.w	r2, r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ca8:	2000      	movs	r0, #0
 8003caa:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cac:	6899      	ldr	r1, [r3, #8]
 8003cae:	4a09      	ldr	r2, [pc, #36]	; (8003cd4 <HAL_TIM_Base_Start_IT+0x8c>)
 8003cb0:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cb2:	2a06      	cmp	r2, #6
 8003cb4:	bf18      	it	ne
 8003cb6:	f5b2 3f80 	cmpne.w	r2, #65536	; 0x10000
 8003cba:	d007      	beq.n	8003ccc <HAL_TIM_Base_Start_IT+0x84>
      __HAL_TIM_ENABLE(htim);
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	f042 0201 	orr.w	r2, r2, #1
 8003cc2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003cc4:	2000      	movs	r0, #0
 8003cc6:	4770      	bx	lr
    return HAL_ERROR;
 8003cc8:	2001      	movs	r0, #1
 8003cca:	4770      	bx	lr
  return HAL_OK;
 8003ccc:	2000      	movs	r0, #0
}
 8003cce:	4770      	bx	lr
 8003cd0:	40010000 	.word	0x40010000
 8003cd4:	00010007 	.word	0x00010007

08003cd8 <HAL_TIM_PeriodElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003cd8:	4770      	bx	lr

08003cda <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cda:	4770      	bx	lr

08003cdc <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cdc:	4770      	bx	lr

08003cde <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cde:	4770      	bx	lr

08003ce0 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ce0:	4770      	bx	lr

08003ce2 <HAL_TIM_IRQHandler>:
{
 8003ce2:	b510      	push	{r4, lr}
 8003ce4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ce6:	6803      	ldr	r3, [r0, #0]
 8003ce8:	691a      	ldr	r2, [r3, #16]
 8003cea:	f012 0f02 	tst.w	r2, #2
 8003cee:	d011      	beq.n	8003d14 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003cf0:	68da      	ldr	r2, [r3, #12]
 8003cf2:	f012 0f02 	tst.w	r2, #2
 8003cf6:	d00d      	beq.n	8003d14 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003cf8:	f06f 0202 	mvn.w	r2, #2
 8003cfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d02:	6803      	ldr	r3, [r0, #0]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	f013 0f03 	tst.w	r3, #3
 8003d0a:	d079      	beq.n	8003e00 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8003d0c:	f7ff ffe6 	bl	8003cdc <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d10:	2300      	movs	r3, #0
 8003d12:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d14:	6823      	ldr	r3, [r4, #0]
 8003d16:	691a      	ldr	r2, [r3, #16]
 8003d18:	f012 0f04 	tst.w	r2, #4
 8003d1c:	d012      	beq.n	8003d44 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d1e:	68da      	ldr	r2, [r3, #12]
 8003d20:	f012 0f04 	tst.w	r2, #4
 8003d24:	d00e      	beq.n	8003d44 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d26:	f06f 0204 	mvn.w	r2, #4
 8003d2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d30:	6823      	ldr	r3, [r4, #0]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003d38:	d068      	beq.n	8003e0c <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8003d3a:	4620      	mov	r0, r4
 8003d3c:	f7ff ffce 	bl	8003cdc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d40:	2300      	movs	r3, #0
 8003d42:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d44:	6823      	ldr	r3, [r4, #0]
 8003d46:	691a      	ldr	r2, [r3, #16]
 8003d48:	f012 0f08 	tst.w	r2, #8
 8003d4c:	d012      	beq.n	8003d74 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d4e:	68da      	ldr	r2, [r3, #12]
 8003d50:	f012 0f08 	tst.w	r2, #8
 8003d54:	d00e      	beq.n	8003d74 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d56:	f06f 0208 	mvn.w	r2, #8
 8003d5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d5c:	2304      	movs	r3, #4
 8003d5e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d60:	6823      	ldr	r3, [r4, #0]
 8003d62:	69db      	ldr	r3, [r3, #28]
 8003d64:	f013 0f03 	tst.w	r3, #3
 8003d68:	d057      	beq.n	8003e1a <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8003d6a:	4620      	mov	r0, r4
 8003d6c:	f7ff ffb6 	bl	8003cdc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d70:	2300      	movs	r3, #0
 8003d72:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d74:	6823      	ldr	r3, [r4, #0]
 8003d76:	691a      	ldr	r2, [r3, #16]
 8003d78:	f012 0f10 	tst.w	r2, #16
 8003d7c:	d012      	beq.n	8003da4 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d7e:	68da      	ldr	r2, [r3, #12]
 8003d80:	f012 0f10 	tst.w	r2, #16
 8003d84:	d00e      	beq.n	8003da4 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d86:	f06f 0210 	mvn.w	r2, #16
 8003d8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d8c:	2308      	movs	r3, #8
 8003d8e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d90:	6823      	ldr	r3, [r4, #0]
 8003d92:	69db      	ldr	r3, [r3, #28]
 8003d94:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003d98:	d046      	beq.n	8003e28 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8003d9a:	4620      	mov	r0, r4
 8003d9c:	f7ff ff9e 	bl	8003cdc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003da0:	2300      	movs	r3, #0
 8003da2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003da4:	6823      	ldr	r3, [r4, #0]
 8003da6:	691a      	ldr	r2, [r3, #16]
 8003da8:	f012 0f01 	tst.w	r2, #1
 8003dac:	d003      	beq.n	8003db6 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003dae:	68da      	ldr	r2, [r3, #12]
 8003db0:	f012 0f01 	tst.w	r2, #1
 8003db4:	d13f      	bne.n	8003e36 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003db6:	6823      	ldr	r3, [r4, #0]
 8003db8:	691a      	ldr	r2, [r3, #16]
 8003dba:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003dbe:	d003      	beq.n	8003dc8 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003dc0:	68da      	ldr	r2, [r3, #12]
 8003dc2:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003dc6:	d13d      	bne.n	8003e44 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003dc8:	6823      	ldr	r3, [r4, #0]
 8003dca:	691a      	ldr	r2, [r3, #16]
 8003dcc:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003dd0:	d003      	beq.n	8003dda <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003dd2:	68da      	ldr	r2, [r3, #12]
 8003dd4:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003dd8:	d13b      	bne.n	8003e52 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003dda:	6823      	ldr	r3, [r4, #0]
 8003ddc:	691a      	ldr	r2, [r3, #16]
 8003dde:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003de2:	d003      	beq.n	8003dec <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003de4:	68da      	ldr	r2, [r3, #12]
 8003de6:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003dea:	d139      	bne.n	8003e60 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003dec:	6823      	ldr	r3, [r4, #0]
 8003dee:	691a      	ldr	r2, [r3, #16]
 8003df0:	f012 0f20 	tst.w	r2, #32
 8003df4:	d003      	beq.n	8003dfe <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003df6:	68da      	ldr	r2, [r3, #12]
 8003df8:	f012 0f20 	tst.w	r2, #32
 8003dfc:	d137      	bne.n	8003e6e <HAL_TIM_IRQHandler+0x18c>
}
 8003dfe:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e00:	f7ff ff6b 	bl	8003cda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e04:	4620      	mov	r0, r4
 8003e06:	f7ff ff6a 	bl	8003cde <HAL_TIM_PWM_PulseFinishedCallback>
 8003e0a:	e781      	b.n	8003d10 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e0c:	4620      	mov	r0, r4
 8003e0e:	f7ff ff64 	bl	8003cda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e12:	4620      	mov	r0, r4
 8003e14:	f7ff ff63 	bl	8003cde <HAL_TIM_PWM_PulseFinishedCallback>
 8003e18:	e792      	b.n	8003d40 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e1a:	4620      	mov	r0, r4
 8003e1c:	f7ff ff5d 	bl	8003cda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e20:	4620      	mov	r0, r4
 8003e22:	f7ff ff5c 	bl	8003cde <HAL_TIM_PWM_PulseFinishedCallback>
 8003e26:	e7a3      	b.n	8003d70 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e28:	4620      	mov	r0, r4
 8003e2a:	f7ff ff56 	bl	8003cda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e2e:	4620      	mov	r0, r4
 8003e30:	f7ff ff55 	bl	8003cde <HAL_TIM_PWM_PulseFinishedCallback>
 8003e34:	e7b4      	b.n	8003da0 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e36:	f06f 0201 	mvn.w	r2, #1
 8003e3a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e3c:	4620      	mov	r0, r4
 8003e3e:	f7ff ff4b 	bl	8003cd8 <HAL_TIM_PeriodElapsedCallback>
 8003e42:	e7b8      	b.n	8003db6 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e48:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003e4a:	4620      	mov	r0, r4
 8003e4c:	f000 f8cf 	bl	8003fee <HAL_TIMEx_BreakCallback>
 8003e50:	e7ba      	b.n	8003dc8 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003e52:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003e56:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8003e58:	4620      	mov	r0, r4
 8003e5a:	f000 f8c9 	bl	8003ff0 <HAL_TIMEx_Break2Callback>
 8003e5e:	e7bc      	b.n	8003dda <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e64:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003e66:	4620      	mov	r0, r4
 8003e68:	f7ff ff3a 	bl	8003ce0 <HAL_TIM_TriggerCallback>
 8003e6c:	e7be      	b.n	8003dec <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e6e:	f06f 0220 	mvn.w	r2, #32
 8003e72:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003e74:	4620      	mov	r0, r4
 8003e76:	f000 f8b9 	bl	8003fec <HAL_TIMEx_CommutCallback>
}
 8003e7a:	e7c0      	b.n	8003dfe <HAL_TIM_IRQHandler+0x11c>

08003e7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e7c:	b530      	push	{r4, r5, lr}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e7e:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e80:	4a3b      	ldr	r2, [pc, #236]	; (8003f70 <TIM_Base_SetConfig+0xf4>)
 8003e82:	4290      	cmp	r0, r2
 8003e84:	bf14      	ite	ne
 8003e86:	f04f 0e00 	movne.w	lr, #0
 8003e8a:	f04f 0e01 	moveq.w	lr, #1
 8003e8e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003e92:	bf14      	ite	ne
 8003e94:	4672      	movne	r2, lr
 8003e96:	f04e 0201 	orreq.w	r2, lr, #1
 8003e9a:	b9aa      	cbnz	r2, 8003ec8 <TIM_Base_SetConfig+0x4c>
 8003e9c:	4c35      	ldr	r4, [pc, #212]	; (8003f74 <TIM_Base_SetConfig+0xf8>)
 8003e9e:	42a0      	cmp	r0, r4
 8003ea0:	bf14      	ite	ne
 8003ea2:	2400      	movne	r4, #0
 8003ea4:	2401      	moveq	r4, #1
 8003ea6:	4d34      	ldr	r5, [pc, #208]	; (8003f78 <TIM_Base_SetConfig+0xfc>)
 8003ea8:	42a8      	cmp	r0, r5
 8003eaa:	d00d      	beq.n	8003ec8 <TIM_Base_SetConfig+0x4c>
 8003eac:	b964      	cbnz	r4, 8003ec8 <TIM_Base_SetConfig+0x4c>
 8003eae:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8003eb2:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
 8003eb6:	42a0      	cmp	r0, r4
 8003eb8:	bf14      	ite	ne
 8003eba:	2400      	movne	r4, #0
 8003ebc:	2401      	moveq	r4, #1
 8003ebe:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003ec2:	42a8      	cmp	r0, r5
 8003ec4:	d000      	beq.n	8003ec8 <TIM_Base_SetConfig+0x4c>
 8003ec6:	b11c      	cbz	r4, 8003ed0 <TIM_Base_SetConfig+0x54>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ec8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003ecc:	684c      	ldr	r4, [r1, #4]
 8003ece:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ed0:	2a00      	cmp	r2, #0
 8003ed2:	d133      	bne.n	8003f3c <TIM_Base_SetConfig+0xc0>
 8003ed4:	4a27      	ldr	r2, [pc, #156]	; (8003f74 <TIM_Base_SetConfig+0xf8>)
 8003ed6:	4290      	cmp	r0, r2
 8003ed8:	bf14      	ite	ne
 8003eda:	2200      	movne	r2, #0
 8003edc:	2201      	moveq	r2, #1
 8003ede:	4c26      	ldr	r4, [pc, #152]	; (8003f78 <TIM_Base_SetConfig+0xfc>)
 8003ee0:	42a0      	cmp	r0, r4
 8003ee2:	d02b      	beq.n	8003f3c <TIM_Base_SetConfig+0xc0>
 8003ee4:	bb52      	cbnz	r2, 8003f3c <TIM_Base_SetConfig+0xc0>
 8003ee6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003eea:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 8003eee:	4290      	cmp	r0, r2
 8003ef0:	bf14      	ite	ne
 8003ef2:	2200      	movne	r2, #0
 8003ef4:	2201      	moveq	r2, #1
 8003ef6:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8003efa:	42a0      	cmp	r0, r4
 8003efc:	d01e      	beq.n	8003f3c <TIM_Base_SetConfig+0xc0>
 8003efe:	b9ea      	cbnz	r2, 8003f3c <TIM_Base_SetConfig+0xc0>
 8003f00:	4a1e      	ldr	r2, [pc, #120]	; (8003f7c <TIM_Base_SetConfig+0x100>)
 8003f02:	4290      	cmp	r0, r2
 8003f04:	bf14      	ite	ne
 8003f06:	2200      	movne	r2, #0
 8003f08:	2201      	moveq	r2, #1
 8003f0a:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 8003f0e:	42a0      	cmp	r0, r4
 8003f10:	d014      	beq.n	8003f3c <TIM_Base_SetConfig+0xc0>
 8003f12:	b99a      	cbnz	r2, 8003f3c <TIM_Base_SetConfig+0xc0>
 8003f14:	4a1a      	ldr	r2, [pc, #104]	; (8003f80 <TIM_Base_SetConfig+0x104>)
 8003f16:	4290      	cmp	r0, r2
 8003f18:	bf14      	ite	ne
 8003f1a:	2200      	movne	r2, #0
 8003f1c:	2201      	moveq	r2, #1
 8003f1e:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8003f22:	42a0      	cmp	r0, r4
 8003f24:	d00a      	beq.n	8003f3c <TIM_Base_SetConfig+0xc0>
 8003f26:	b94a      	cbnz	r2, 8003f3c <TIM_Base_SetConfig+0xc0>
 8003f28:	4a16      	ldr	r2, [pc, #88]	; (8003f84 <TIM_Base_SetConfig+0x108>)
 8003f2a:	4290      	cmp	r0, r2
 8003f2c:	bf14      	ite	ne
 8003f2e:	2200      	movne	r2, #0
 8003f30:	2201      	moveq	r2, #1
 8003f32:	f5a4 3496 	sub.w	r4, r4, #76800	; 0x12c00
 8003f36:	42a0      	cmp	r0, r4
 8003f38:	d000      	beq.n	8003f3c <TIM_Base_SetConfig+0xc0>
 8003f3a:	b122      	cbz	r2, 8003f46 <TIM_Base_SetConfig+0xca>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f3c:	f423 7c40 	bic.w	ip, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f40:	68cb      	ldr	r3, [r1, #12]
 8003f42:	ea43 030c 	orr.w	r3, r3, ip
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f4a:	694a      	ldr	r2, [r1, #20]
 8003f4c:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8003f4e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f50:	688a      	ldr	r2, [r1, #8]
 8003f52:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f54:	680a      	ldr	r2, [r1, #0]
 8003f56:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f58:	4a0b      	ldr	r2, [pc, #44]	; (8003f88 <TIM_Base_SetConfig+0x10c>)
 8003f5a:	4290      	cmp	r0, r2
 8003f5c:	bf14      	ite	ne
 8003f5e:	4673      	movne	r3, lr
 8003f60:	f04e 0301 	orreq.w	r3, lr, #1
 8003f64:	b10b      	cbz	r3, 8003f6a <TIM_Base_SetConfig+0xee>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f66:	690b      	ldr	r3, [r1, #16]
 8003f68:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	6143      	str	r3, [r0, #20]
}
 8003f6e:	bd30      	pop	{r4, r5, pc}
 8003f70:	40010000 	.word	0x40010000
 8003f74:	40000800 	.word	0x40000800
 8003f78:	40000400 	.word	0x40000400
 8003f7c:	40014400 	.word	0x40014400
 8003f80:	40001800 	.word	0x40001800
 8003f84:	40002000 	.word	0x40002000
 8003f88:	40010400 	.word	0x40010400

08003f8c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003f8c:	b360      	cbz	r0, 8003fe8 <HAL_TIM_Base_Init+0x5c>
{
 8003f8e:	b510      	push	{r4, lr}
 8003f90:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003f92:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003f96:	b313      	cbz	r3, 8003fde <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8003f98:	2302      	movs	r3, #2
 8003f9a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f9e:	4621      	mov	r1, r4
 8003fa0:	f851 0b04 	ldr.w	r0, [r1], #4
 8003fa4:	f7ff ff6a 	bl	8003e7c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fae:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003fb2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003fb6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003fba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003fbe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fc6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003fca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003fce:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8003fd2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003fd6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003fda:	2000      	movs	r0, #0
}
 8003fdc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003fde:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003fe2:	f7ff fe2f 	bl	8003c44 <HAL_TIM_Base_MspInit>
 8003fe6:	e7d7      	b.n	8003f98 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003fe8:	2001      	movs	r0, #1
}
 8003fea:	4770      	bx	lr

08003fec <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fec:	4770      	bx	lr

08003fee <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fee:	4770      	bx	lr

08003ff0 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003ff0:	4770      	bx	lr

08003ff2 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ff2:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff4:	e852 3f00 	ldrex	r3, [r2]
 8003ff8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ffc:	e842 3100 	strex	r1, r3, [r2]
 8004000:	2900      	cmp	r1, #0
 8004002:	d1f6      	bne.n	8003ff2 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004004:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004006:	f102 0308 	add.w	r3, r2, #8
 800400a:	e853 3f00 	ldrex	r3, [r3]
 800400e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004012:	3208      	adds	r2, #8
 8004014:	e842 3100 	strex	r1, r3, [r2]
 8004018:	2900      	cmp	r1, #0
 800401a:	d1f3      	bne.n	8004004 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800401c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800401e:	2b01      	cmp	r3, #1
 8004020:	d006      	beq.n	8004030 <UART_EndRxTransfer+0x3e>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004022:	2320      	movs	r3, #32
 8004024:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004028:	2300      	movs	r3, #0
 800402a:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800402c:	6683      	str	r3, [r0, #104]	; 0x68
}
 800402e:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004030:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004032:	e852 3f00 	ldrex	r3, [r2]
 8004036:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403a:	e842 3100 	strex	r1, r3, [r2]
 800403e:	2900      	cmp	r1, #0
 8004040:	d1f6      	bne.n	8004030 <UART_EndRxTransfer+0x3e>
 8004042:	e7ee      	b.n	8004022 <UART_EndRxTransfer+0x30>

08004044 <UART_TxISR_8BIT>:
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004044:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8004046:	2b21      	cmp	r3, #33	; 0x21
 8004048:	d000      	beq.n	800404c <UART_TxISR_8BIT+0x8>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800404a:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 800404c:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8004050:	b29b      	uxth	r3, r3
 8004052:	b993      	cbnz	r3, 800407a <UART_TxISR_8BIT+0x36>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004054:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004056:	e852 3f00 	ldrex	r3, [r2]
 800405a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405e:	e842 3100 	strex	r1, r3, [r2]
 8004062:	2900      	cmp	r1, #0
 8004064:	d1f6      	bne.n	8004054 <UART_TxISR_8BIT+0x10>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004066:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004068:	e852 3f00 	ldrex	r3, [r2]
 800406c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004070:	e842 3100 	strex	r1, r3, [r2]
 8004074:	2900      	cmp	r1, #0
 8004076:	d1f6      	bne.n	8004066 <UART_TxISR_8BIT+0x22>
 8004078:	4770      	bx	lr
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800407a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800407c:	781a      	ldrb	r2, [r3, #0]
 800407e:	6803      	ldr	r3, [r0, #0]
 8004080:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004082:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004084:	3301      	adds	r3, #1
 8004086:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8004088:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 800408c:	b29b      	uxth	r3, r3
 800408e:	3b01      	subs	r3, #1
 8004090:	b29b      	uxth	r3, r3
 8004092:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
}
 8004096:	e7d8      	b.n	800404a <UART_TxISR_8BIT+0x6>

08004098 <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004098:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800409a:	2b21      	cmp	r3, #33	; 0x21
 800409c:	d000      	beq.n	80040a0 <UART_TxISR_16BIT+0x8>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800409e:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 80040a0:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	b993      	cbnz	r3, 80040ce <UART_TxISR_16BIT+0x36>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80040a8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040aa:	e852 3f00 	ldrex	r3, [r2]
 80040ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b2:	e842 3100 	strex	r1, r3, [r2]
 80040b6:	2900      	cmp	r1, #0
 80040b8:	d1f6      	bne.n	80040a8 <UART_TxISR_16BIT+0x10>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80040ba:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040bc:	e852 3f00 	ldrex	r3, [r2]
 80040c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c4:	e842 3100 	strex	r1, r3, [r2]
 80040c8:	2900      	cmp	r1, #0
 80040ca:	d1f6      	bne.n	80040ba <UART_TxISR_16BIT+0x22>
 80040cc:	4770      	bx	lr
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80040ce:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80040d0:	881b      	ldrh	r3, [r3, #0]
 80040d2:	6802      	ldr	r2, [r0, #0]
 80040d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040d8:	6293      	str	r3, [r2, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80040da:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80040dc:	3302      	adds	r3, #2
 80040de:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 80040e0:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	3b01      	subs	r3, #1
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
}
 80040ee:	e7d6      	b.n	800409e <UART_TxISR_16BIT+0x6>

080040f0 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 80040f0:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80040f2:	2b20      	cmp	r3, #32
 80040f4:	d125      	bne.n	8004142 <HAL_UART_Transmit_IT+0x52>
    if ((pData == NULL) || (Size == 0U))
 80040f6:	2a00      	cmp	r2, #0
 80040f8:	bf18      	it	ne
 80040fa:	2900      	cmpne	r1, #0
 80040fc:	d023      	beq.n	8004146 <HAL_UART_Transmit_IT+0x56>
    huart->pTxBuffPtr  = pData;
 80040fe:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004100:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    huart->TxXferCount = Size;
 8004104:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    huart->TxISR       = NULL;
 8004108:	2300      	movs	r3, #0
 800410a:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800410c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004110:	2321      	movs	r3, #33	; 0x21
 8004112:	67c3      	str	r3, [r0, #124]	; 0x7c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004114:	6883      	ldr	r3, [r0, #8]
 8004116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800411a:	d00c      	beq.n	8004136 <HAL_UART_Transmit_IT+0x46>
      huart->TxISR = UART_TxISR_8BIT;
 800411c:	4b0b      	ldr	r3, [pc, #44]	; (800414c <HAL_UART_Transmit_IT+0x5c>)
 800411e:	66c3      	str	r3, [r0, #108]	; 0x6c
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004120:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004122:	e852 3f00 	ldrex	r3, [r2]
 8004126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412a:	e842 3100 	strex	r1, r3, [r2]
 800412e:	2900      	cmp	r1, #0
 8004130:	d1f6      	bne.n	8004120 <HAL_UART_Transmit_IT+0x30>
    return HAL_OK;
 8004132:	2000      	movs	r0, #0
 8004134:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004136:	6903      	ldr	r3, [r0, #16]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d1ef      	bne.n	800411c <HAL_UART_Transmit_IT+0x2c>
      huart->TxISR = UART_TxISR_16BIT;
 800413c:	4b04      	ldr	r3, [pc, #16]	; (8004150 <HAL_UART_Transmit_IT+0x60>)
 800413e:	66c3      	str	r3, [r0, #108]	; 0x6c
 8004140:	e7ee      	b.n	8004120 <HAL_UART_Transmit_IT+0x30>
    return HAL_BUSY;
 8004142:	2002      	movs	r0, #2
 8004144:	4770      	bx	lr
      return HAL_ERROR;
 8004146:	2001      	movs	r0, #1
}
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	08004045 	.word	0x08004045
 8004150:	08004099 	.word	0x08004099

08004154 <HAL_UART_TxCpltCallback>:
}
 8004154:	4770      	bx	lr

08004156 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004156:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004158:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415a:	e852 3f00 	ldrex	r3, [r2]
 800415e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004162:	e842 3100 	strex	r1, r3, [r2]
 8004166:	2900      	cmp	r1, #0
 8004168:	d1f6      	bne.n	8004158 <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800416a:	2320      	movs	r3, #32
 800416c:	67c3      	str	r3, [r0, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800416e:	2300      	movs	r3, #0
 8004170:	66c3      	str	r3, [r0, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004172:	f7ff ffef 	bl	8004154 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004176:	bd08      	pop	{r3, pc}

08004178 <HAL_UART_ErrorCallback>:
}
 8004178:	4770      	bx	lr

0800417a <UART_DMAAbortOnError>:
{
 800417a:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800417c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800417e:	2300      	movs	r3, #0
 8004180:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004184:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8004188:	f7ff fff6 	bl	8004178 <HAL_UART_ErrorCallback>
}
 800418c:	bd08      	pop	{r3, pc}

0800418e <HAL_UARTEx_RxEventCallback>:
}
 800418e:	4770      	bx	lr

08004190 <HAL_UARTEx_WakeupCallback>:
}
 8004190:	4770      	bx	lr
	...

08004194 <HAL_UART_IRQHandler>:
{
 8004194:	b570      	push	{r4, r5, r6, lr}
 8004196:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004198:	6801      	ldr	r1, [r0, #0]
 800419a:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800419c:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800419e:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80041a0:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 80041a4:	401a      	ands	r2, r3
 80041a6:	d105      	bne.n	80041b4 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80041a8:	f013 0f20 	tst.w	r3, #32
 80041ac:	d002      	beq.n	80041b4 <HAL_UART_IRQHandler+0x20>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80041ae:	f010 0f20 	tst.w	r0, #32
 80041b2:	d120      	bne.n	80041f6 <HAL_UART_IRQHandler+0x62>
  if ((errorflags != 0U)
 80041b4:	b12a      	cbz	r2, 80041c2 <HAL_UART_IRQHandler+0x2e>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80041b6:	f015 0201 	ands.w	r2, r5, #1
 80041ba:	d122      	bne.n	8004202 <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80041bc:	4eae      	ldr	r6, [pc, #696]	; (8004478 <HAL_UART_IRQHandler+0x2e4>)
 80041be:	4230      	tst	r0, r6
 80041c0:	d11f      	bne.n	8004202 <HAL_UART_IRQHandler+0x6e>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041c2:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80041c4:	2a01      	cmp	r2, #1
 80041c6:	f000 80ab 	beq.w	8004320 <HAL_UART_IRQHandler+0x18c>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80041ca:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80041ce:	d003      	beq.n	80041d8 <HAL_UART_IRQHandler+0x44>
 80041d0:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 80041d4:	f040 813e 	bne.w	8004454 <HAL_UART_IRQHandler+0x2c0>
  if (((isrflags & USART_ISR_TXE) != 0U)
 80041d8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80041dc:	d003      	beq.n	80041e6 <HAL_UART_IRQHandler+0x52>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80041de:	f010 0f80 	tst.w	r0, #128	; 0x80
 80041e2:	f040 813e 	bne.w	8004462 <HAL_UART_IRQHandler+0x2ce>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80041e6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80041ea:	d003      	beq.n	80041f4 <HAL_UART_IRQHandler+0x60>
 80041ec:	f010 0f40 	tst.w	r0, #64	; 0x40
 80041f0:	f040 813e 	bne.w	8004470 <HAL_UART_IRQHandler+0x2dc>
}
 80041f4:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 80041f6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d0fb      	beq.n	80041f4 <HAL_UART_IRQHandler+0x60>
        huart->RxISR(huart);
 80041fc:	4620      	mov	r0, r4
 80041fe:	4798      	blx	r3
      return;
 8004200:	e7f8      	b.n	80041f4 <HAL_UART_IRQHandler+0x60>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004202:	f013 0f01 	tst.w	r3, #1
 8004206:	d009      	beq.n	800421c <HAL_UART_IRQHandler+0x88>
 8004208:	f410 7f80 	tst.w	r0, #256	; 0x100
 800420c:	d006      	beq.n	800421c <HAL_UART_IRQHandler+0x88>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800420e:	2501      	movs	r5, #1
 8004210:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004212:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8004216:	4329      	orrs	r1, r5
 8004218:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800421c:	f013 0f02 	tst.w	r3, #2
 8004220:	d009      	beq.n	8004236 <HAL_UART_IRQHandler+0xa2>
 8004222:	b142      	cbz	r2, 8004236 <HAL_UART_IRQHandler+0xa2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004224:	6821      	ldr	r1, [r4, #0]
 8004226:	2502      	movs	r5, #2
 8004228:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800422a:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800422e:	f041 0104 	orr.w	r1, r1, #4
 8004232:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004236:	f013 0f04 	tst.w	r3, #4
 800423a:	d009      	beq.n	8004250 <HAL_UART_IRQHandler+0xbc>
 800423c:	b142      	cbz	r2, 8004250 <HAL_UART_IRQHandler+0xbc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800423e:	6821      	ldr	r1, [r4, #0]
 8004240:	2504      	movs	r5, #4
 8004242:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004244:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8004248:	f041 0102 	orr.w	r1, r1, #2
 800424c:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004250:	f013 0f08 	tst.w	r3, #8
 8004254:	d00b      	beq.n	800426e <HAL_UART_IRQHandler+0xda>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004256:	f010 0f20 	tst.w	r0, #32
 800425a:	d100      	bne.n	800425e <HAL_UART_IRQHandler+0xca>
 800425c:	b13a      	cbz	r2, 800426e <HAL_UART_IRQHandler+0xda>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800425e:	6822      	ldr	r2, [r4, #0]
 8004260:	2108      	movs	r1, #8
 8004262:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004264:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8004268:	430a      	orrs	r2, r1
 800426a:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800426e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004272:	d00c      	beq.n	800428e <HAL_UART_IRQHandler+0xfa>
 8004274:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8004278:	d009      	beq.n	800428e <HAL_UART_IRQHandler+0xfa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800427a:	6822      	ldr	r2, [r4, #0]
 800427c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004280:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004282:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8004286:	f042 0220 	orr.w	r2, r2, #32
 800428a:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800428e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8004292:	2a00      	cmp	r2, #0
 8004294:	d0ae      	beq.n	80041f4 <HAL_UART_IRQHandler+0x60>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004296:	f013 0f20 	tst.w	r3, #32
 800429a:	d006      	beq.n	80042aa <HAL_UART_IRQHandler+0x116>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800429c:	f010 0f20 	tst.w	r0, #32
 80042a0:	d003      	beq.n	80042aa <HAL_UART_IRQHandler+0x116>
        if (huart->RxISR != NULL)
 80042a2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80042a4:	b10b      	cbz	r3, 80042aa <HAL_UART_IRQHandler+0x116>
          huart->RxISR(huart);
 80042a6:	4620      	mov	r0, r4
 80042a8:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 80042aa:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80042ae:	6823      	ldr	r3, [r4, #0]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80042b6:	d102      	bne.n	80042be <HAL_UART_IRQHandler+0x12a>
 80042b8:	f012 0f28 	tst.w	r2, #40	; 0x28
 80042bc:	d029      	beq.n	8004312 <HAL_UART_IRQHandler+0x17e>
        UART_EndRxTransfer(huart);
 80042be:	4620      	mov	r0, r4
 80042c0:	f7ff fe97 	bl	8003ff2 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042c4:	6823      	ldr	r3, [r4, #0]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80042cc:	d01d      	beq.n	800430a <HAL_UART_IRQHandler+0x176>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042ce:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d0:	f102 0308 	add.w	r3, r2, #8
 80042d4:	e853 3f00 	ldrex	r3, [r3]
 80042d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042dc:	3208      	adds	r2, #8
 80042de:	e842 3100 	strex	r1, r3, [r2]
 80042e2:	2900      	cmp	r1, #0
 80042e4:	d1f3      	bne.n	80042ce <HAL_UART_IRQHandler+0x13a>
          if (huart->hdmarx != NULL)
 80042e6:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80042e8:	b15b      	cbz	r3, 8004302 <HAL_UART_IRQHandler+0x16e>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80042ea:	4a64      	ldr	r2, [pc, #400]	; (800447c <HAL_UART_IRQHandler+0x2e8>)
 80042ec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042ee:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80042f0:	f7fe fc88 	bl	8002c04 <HAL_DMA_Abort_IT>
 80042f4:	2800      	cmp	r0, #0
 80042f6:	f43f af7d 	beq.w	80041f4 <HAL_UART_IRQHandler+0x60>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042fa:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80042fc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80042fe:	4798      	blx	r3
 8004300:	e778      	b.n	80041f4 <HAL_UART_IRQHandler+0x60>
            HAL_UART_ErrorCallback(huart);
 8004302:	4620      	mov	r0, r4
 8004304:	f7ff ff38 	bl	8004178 <HAL_UART_ErrorCallback>
 8004308:	e774      	b.n	80041f4 <HAL_UART_IRQHandler+0x60>
          HAL_UART_ErrorCallback(huart);
 800430a:	4620      	mov	r0, r4
 800430c:	f7ff ff34 	bl	8004178 <HAL_UART_ErrorCallback>
 8004310:	e770      	b.n	80041f4 <HAL_UART_IRQHandler+0x60>
        HAL_UART_ErrorCallback(huart);
 8004312:	4620      	mov	r0, r4
 8004314:	f7ff ff30 	bl	8004178 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004318:	2300      	movs	r3, #0
 800431a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    return;
 800431e:	e769      	b.n	80041f4 <HAL_UART_IRQHandler+0x60>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004320:	f013 0f10 	tst.w	r3, #16
 8004324:	f43f af51 	beq.w	80041ca <HAL_UART_IRQHandler+0x36>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004328:	f010 0f10 	tst.w	r0, #16
 800432c:	f43f af4d 	beq.w	80041ca <HAL_UART_IRQHandler+0x36>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004330:	2310      	movs	r3, #16
 8004332:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004334:	6823      	ldr	r3, [r4, #0]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f013 0f40 	tst.w	r3, #64	; 0x40
 800433c:	d050      	beq.n	80043e0 <HAL_UART_IRQHandler+0x24c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800433e:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8004340:	6813      	ldr	r3, [r2, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8004346:	2b00      	cmp	r3, #0
 8004348:	f43f af54 	beq.w	80041f4 <HAL_UART_IRQHandler+0x60>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800434c:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8004350:	4299      	cmp	r1, r3
 8004352:	f67f af4f 	bls.w	80041f4 <HAL_UART_IRQHandler+0x60>
        huart->RxXferCount = nb_remaining_rx_data;
 8004356:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800435a:	69d3      	ldr	r3, [r2, #28]
 800435c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004360:	d031      	beq.n	80043c6 <HAL_UART_IRQHandler+0x232>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004362:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004364:	e852 3f00 	ldrex	r3, [r2]
 8004368:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436c:	e842 3100 	strex	r1, r3, [r2]
 8004370:	2900      	cmp	r1, #0
 8004372:	d1f6      	bne.n	8004362 <HAL_UART_IRQHandler+0x1ce>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004374:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004376:	f102 0308 	add.w	r3, r2, #8
 800437a:	e853 3f00 	ldrex	r3, [r3]
 800437e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004382:	3208      	adds	r2, #8
 8004384:	e842 3100 	strex	r1, r3, [r2]
 8004388:	2900      	cmp	r1, #0
 800438a:	d1f3      	bne.n	8004374 <HAL_UART_IRQHandler+0x1e0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800438c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438e:	f102 0308 	add.w	r3, r2, #8
 8004392:	e853 3f00 	ldrex	r3, [r3]
 8004396:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800439a:	3208      	adds	r2, #8
 800439c:	e842 3100 	strex	r1, r3, [r2]
 80043a0:	2900      	cmp	r1, #0
 80043a2:	d1f3      	bne.n	800438c <HAL_UART_IRQHandler+0x1f8>
          huart->RxState = HAL_UART_STATE_READY;
 80043a4:	2320      	movs	r3, #32
 80043a6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043aa:	2300      	movs	r3, #0
 80043ac:	6623      	str	r3, [r4, #96]	; 0x60
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043ae:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b0:	e852 3f00 	ldrex	r3, [r2]
 80043b4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b8:	e842 3100 	strex	r1, r3, [r2]
 80043bc:	2900      	cmp	r1, #0
 80043be:	d1f6      	bne.n	80043ae <HAL_UART_IRQHandler+0x21a>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80043c0:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80043c2:	f7fe fbd5 	bl	8002b70 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043c6:	2302      	movs	r3, #2
 80043c8:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043ca:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 80043ce:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	1ac9      	subs	r1, r1, r3
 80043d6:	b289      	uxth	r1, r1
 80043d8:	4620      	mov	r0, r4
 80043da:	f7ff fed8 	bl	800418e <HAL_UARTEx_RxEventCallback>
      return;
 80043de:	e709      	b.n	80041f4 <HAL_UART_IRQHandler+0x60>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80043e0:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 80043e4:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	1ac9      	subs	r1, r1, r3
 80043ec:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 80043ee:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f43f aefd 	beq.w	80041f4 <HAL_UART_IRQHandler+0x60>
          && (nb_rx_data > 0U))
 80043fa:	2900      	cmp	r1, #0
 80043fc:	f43f aefa 	beq.w	80041f4 <HAL_UART_IRQHandler+0x60>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004400:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004402:	e852 3f00 	ldrex	r3, [r2]
 8004406:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440a:	e842 3000 	strex	r0, r3, [r2]
 800440e:	2800      	cmp	r0, #0
 8004410:	d1f6      	bne.n	8004400 <HAL_UART_IRQHandler+0x26c>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004412:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004414:	f102 0308 	add.w	r3, r2, #8
 8004418:	e853 3f00 	ldrex	r3, [r3]
 800441c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004420:	3208      	adds	r2, #8
 8004422:	e842 3000 	strex	r0, r3, [r2]
 8004426:	2800      	cmp	r0, #0
 8004428:	d1f3      	bne.n	8004412 <HAL_UART_IRQHandler+0x27e>
        huart->RxState = HAL_UART_STATE_READY;
 800442a:	2320      	movs	r3, #32
 800442c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004430:	2300      	movs	r3, #0
 8004432:	6623      	str	r3, [r4, #96]	; 0x60
        huart->RxISR = NULL;
 8004434:	66a3      	str	r3, [r4, #104]	; 0x68
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004436:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004438:	e852 3f00 	ldrex	r3, [r2]
 800443c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004440:	e842 3000 	strex	r0, r3, [r2]
 8004444:	2800      	cmp	r0, #0
 8004446:	d1f6      	bne.n	8004436 <HAL_UART_IRQHandler+0x2a2>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004448:	2302      	movs	r3, #2
 800444a:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800444c:	4620      	mov	r0, r4
 800444e:	f7ff fe9e 	bl	800418e <HAL_UARTEx_RxEventCallback>
      return;
 8004452:	e6cf      	b.n	80041f4 <HAL_UART_IRQHandler+0x60>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004454:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004458:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800445a:	4620      	mov	r0, r4
 800445c:	f7ff fe98 	bl	8004190 <HAL_UARTEx_WakeupCallback>
    return;
 8004460:	e6c8      	b.n	80041f4 <HAL_UART_IRQHandler+0x60>
    if (huart->TxISR != NULL)
 8004462:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004464:	2b00      	cmp	r3, #0
 8004466:	f43f aec5 	beq.w	80041f4 <HAL_UART_IRQHandler+0x60>
      huart->TxISR(huart);
 800446a:	4620      	mov	r0, r4
 800446c:	4798      	blx	r3
    return;
 800446e:	e6c1      	b.n	80041f4 <HAL_UART_IRQHandler+0x60>
    UART_EndTransmit_IT(huart);
 8004470:	4620      	mov	r0, r4
 8004472:	f7ff fe70 	bl	8004156 <UART_EndTransmit_IT>
    return;
 8004476:	e6bd      	b.n	80041f4 <HAL_UART_IRQHandler+0x60>
 8004478:	04000120 	.word	0x04000120
 800447c:	0800417b 	.word	0x0800417b

08004480 <UART_SetConfig>:
{
 8004480:	b510      	push	{r4, lr}
 8004482:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004484:	6883      	ldr	r3, [r0, #8]
 8004486:	6902      	ldr	r2, [r0, #16]
 8004488:	4313      	orrs	r3, r2
 800448a:	6942      	ldr	r2, [r0, #20]
 800448c:	4313      	orrs	r3, r2
 800448e:	69c2      	ldr	r2, [r0, #28]
 8004490:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004492:	6801      	ldr	r1, [r0, #0]
 8004494:	6808      	ldr	r0, [r1, #0]
 8004496:	4a93      	ldr	r2, [pc, #588]	; (80046e4 <UART_SetConfig+0x264>)
 8004498:	4002      	ands	r2, r0
 800449a:	4313      	orrs	r3, r2
 800449c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800449e:	6822      	ldr	r2, [r4, #0]
 80044a0:	6853      	ldr	r3, [r2, #4]
 80044a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80044a6:	68e1      	ldr	r1, [r4, #12]
 80044a8:	430b      	orrs	r3, r1
 80044aa:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044ac:	69a2      	ldr	r2, [r4, #24]
  tmpreg |= huart->Init.OneBitSampling;
 80044ae:	6a23      	ldr	r3, [r4, #32]
 80044b0:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044b2:	6821      	ldr	r1, [r4, #0]
 80044b4:	688b      	ldr	r3, [r1, #8]
 80044b6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80044ba:	4313      	orrs	r3, r2
 80044bc:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044be:	6823      	ldr	r3, [r4, #0]
 80044c0:	4a89      	ldr	r2, [pc, #548]	; (80046e8 <UART_SetConfig+0x268>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d019      	beq.n	80044fa <UART_SetConfig+0x7a>
 80044c6:	4a89      	ldr	r2, [pc, #548]	; (80046ec <UART_SetConfig+0x26c>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d029      	beq.n	8004520 <UART_SetConfig+0xa0>
 80044cc:	4a88      	ldr	r2, [pc, #544]	; (80046f0 <UART_SetConfig+0x270>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d03e      	beq.n	8004550 <UART_SetConfig+0xd0>
 80044d2:	4a88      	ldr	r2, [pc, #544]	; (80046f4 <UART_SetConfig+0x274>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d062      	beq.n	800459e <UART_SetConfig+0x11e>
 80044d8:	4a87      	ldr	r2, [pc, #540]	; (80046f8 <UART_SetConfig+0x278>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d071      	beq.n	80045c2 <UART_SetConfig+0x142>
 80044de:	4a87      	ldr	r2, [pc, #540]	; (80046fc <UART_SetConfig+0x27c>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	f000 8083 	beq.w	80045ec <UART_SetConfig+0x16c>
 80044e6:	4a86      	ldr	r2, [pc, #536]	; (8004700 <UART_SetConfig+0x280>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	f000 8094 	beq.w	8004616 <UART_SetConfig+0x196>
 80044ee:	4a85      	ldr	r2, [pc, #532]	; (8004704 <UART_SetConfig+0x284>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	f000 80a5 	beq.w	8004640 <UART_SetConfig+0x1c0>
 80044f6:	2310      	movs	r3, #16
 80044f8:	e03a      	b.n	8004570 <UART_SetConfig+0xf0>
 80044fa:	4b83      	ldr	r3, [pc, #524]	; (8004708 <UART_SetConfig+0x288>)
 80044fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004500:	f003 0303 	and.w	r3, r3, #3
 8004504:	2b03      	cmp	r3, #3
 8004506:	d809      	bhi.n	800451c <UART_SetConfig+0x9c>
 8004508:	e8df f003 	tbb	[pc, r3]
 800450c:	06ae0402 	.word	0x06ae0402
 8004510:	2301      	movs	r3, #1
 8004512:	e02d      	b.n	8004570 <UART_SetConfig+0xf0>
 8004514:	2304      	movs	r3, #4
 8004516:	e02b      	b.n	8004570 <UART_SetConfig+0xf0>
 8004518:	2308      	movs	r3, #8
 800451a:	e029      	b.n	8004570 <UART_SetConfig+0xf0>
 800451c:	2310      	movs	r3, #16
 800451e:	e027      	b.n	8004570 <UART_SetConfig+0xf0>
 8004520:	4b79      	ldr	r3, [pc, #484]	; (8004708 <UART_SetConfig+0x288>)
 8004522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004526:	f003 030c 	and.w	r3, r3, #12
 800452a:	2b0c      	cmp	r3, #12
 800452c:	d80e      	bhi.n	800454c <UART_SetConfig+0xcc>
 800452e:	e8df f003 	tbb	[pc, r3]
 8004532:	0d07      	.short	0x0d07
 8004534:	0d090d0d 	.word	0x0d090d0d
 8004538:	0d9d0d0d 	.word	0x0d9d0d0d
 800453c:	0d0d      	.short	0x0d0d
 800453e:	0b          	.byte	0x0b
 800453f:	00          	.byte	0x00
 8004540:	2300      	movs	r3, #0
 8004542:	e015      	b.n	8004570 <UART_SetConfig+0xf0>
 8004544:	2304      	movs	r3, #4
 8004546:	e013      	b.n	8004570 <UART_SetConfig+0xf0>
 8004548:	2308      	movs	r3, #8
 800454a:	e011      	b.n	8004570 <UART_SetConfig+0xf0>
 800454c:	2310      	movs	r3, #16
 800454e:	e00f      	b.n	8004570 <UART_SetConfig+0xf0>
 8004550:	4b6d      	ldr	r3, [pc, #436]	; (8004708 <UART_SetConfig+0x288>)
 8004552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004556:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800455a:	2b20      	cmp	r3, #32
 800455c:	f000 8088 	beq.w	8004670 <UART_SetConfig+0x1f0>
 8004560:	d819      	bhi.n	8004596 <UART_SetConfig+0x116>
 8004562:	2b00      	cmp	r3, #0
 8004564:	f000 8086 	beq.w	8004674 <UART_SetConfig+0x1f4>
 8004568:	2b10      	cmp	r3, #16
 800456a:	f040 8085 	bne.w	8004678 <UART_SetConfig+0x1f8>
 800456e:	2304      	movs	r3, #4
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004570:	69e0      	ldr	r0, [r4, #28]
 8004572:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004576:	f000 80ab 	beq.w	80046d0 <UART_SetConfig+0x250>
    switch (clocksource)
 800457a:	2b08      	cmp	r3, #8
 800457c:	f200 810c 	bhi.w	8004798 <UART_SetConfig+0x318>
 8004580:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004584:	00fb00e8 	.word	0x00fb00e8
 8004588:	010a00e6 	.word	0x010a00e6
 800458c:	010a00fe 	.word	0x010a00fe
 8004590:	010a010a 	.word	0x010a010a
 8004594:	0101      	.short	0x0101
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004596:	2b30      	cmp	r3, #48	; 0x30
 8004598:	d170      	bne.n	800467c <UART_SetConfig+0x1fc>
 800459a:	2308      	movs	r3, #8
 800459c:	e7e8      	b.n	8004570 <UART_SetConfig+0xf0>
 800459e:	4b5a      	ldr	r3, [pc, #360]	; (8004708 <UART_SetConfig+0x288>)
 80045a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80045a8:	2b80      	cmp	r3, #128	; 0x80
 80045aa:	d069      	beq.n	8004680 <UART_SetConfig+0x200>
 80045ac:	d805      	bhi.n	80045ba <UART_SetConfig+0x13a>
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d068      	beq.n	8004684 <UART_SetConfig+0x204>
 80045b2:	2b40      	cmp	r3, #64	; 0x40
 80045b4:	d168      	bne.n	8004688 <UART_SetConfig+0x208>
 80045b6:	2304      	movs	r3, #4
 80045b8:	e7da      	b.n	8004570 <UART_SetConfig+0xf0>
 80045ba:	2bc0      	cmp	r3, #192	; 0xc0
 80045bc:	d166      	bne.n	800468c <UART_SetConfig+0x20c>
 80045be:	2308      	movs	r3, #8
 80045c0:	e7d6      	b.n	8004570 <UART_SetConfig+0xf0>
 80045c2:	4b51      	ldr	r3, [pc, #324]	; (8004708 <UART_SetConfig+0x288>)
 80045c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045d0:	d05e      	beq.n	8004690 <UART_SetConfig+0x210>
 80045d2:	d806      	bhi.n	80045e2 <UART_SetConfig+0x162>
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d05d      	beq.n	8004694 <UART_SetConfig+0x214>
 80045d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045dc:	d15c      	bne.n	8004698 <UART_SetConfig+0x218>
 80045de:	2304      	movs	r3, #4
 80045e0:	e7c6      	b.n	8004570 <UART_SetConfig+0xf0>
 80045e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045e6:	d159      	bne.n	800469c <UART_SetConfig+0x21c>
 80045e8:	2308      	movs	r3, #8
 80045ea:	e7c1      	b.n	8004570 <UART_SetConfig+0xf0>
 80045ec:	4b46      	ldr	r3, [pc, #280]	; (8004708 <UART_SetConfig+0x288>)
 80045ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80045f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045fa:	d051      	beq.n	80046a0 <UART_SetConfig+0x220>
 80045fc:	d806      	bhi.n	800460c <UART_SetConfig+0x18c>
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d050      	beq.n	80046a4 <UART_SetConfig+0x224>
 8004602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004606:	d14f      	bne.n	80046a8 <UART_SetConfig+0x228>
 8004608:	2304      	movs	r3, #4
 800460a:	e7b1      	b.n	8004570 <UART_SetConfig+0xf0>
 800460c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004610:	d14c      	bne.n	80046ac <UART_SetConfig+0x22c>
 8004612:	2308      	movs	r3, #8
 8004614:	e7ac      	b.n	8004570 <UART_SetConfig+0xf0>
 8004616:	4b3c      	ldr	r3, [pc, #240]	; (8004708 <UART_SetConfig+0x288>)
 8004618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800461c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004620:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004624:	d044      	beq.n	80046b0 <UART_SetConfig+0x230>
 8004626:	d806      	bhi.n	8004636 <UART_SetConfig+0x1b6>
 8004628:	2b00      	cmp	r3, #0
 800462a:	d043      	beq.n	80046b4 <UART_SetConfig+0x234>
 800462c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004630:	d142      	bne.n	80046b8 <UART_SetConfig+0x238>
 8004632:	2304      	movs	r3, #4
 8004634:	e79c      	b.n	8004570 <UART_SetConfig+0xf0>
 8004636:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800463a:	d13f      	bne.n	80046bc <UART_SetConfig+0x23c>
 800463c:	2308      	movs	r3, #8
 800463e:	e797      	b.n	8004570 <UART_SetConfig+0xf0>
 8004640:	4b31      	ldr	r3, [pc, #196]	; (8004708 <UART_SetConfig+0x288>)
 8004642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004646:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800464a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800464e:	d037      	beq.n	80046c0 <UART_SetConfig+0x240>
 8004650:	d805      	bhi.n	800465e <UART_SetConfig+0x1de>
 8004652:	b3bb      	cbz	r3, 80046c4 <UART_SetConfig+0x244>
 8004654:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004658:	d136      	bne.n	80046c8 <UART_SetConfig+0x248>
 800465a:	2304      	movs	r3, #4
 800465c:	e788      	b.n	8004570 <UART_SetConfig+0xf0>
 800465e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004662:	d133      	bne.n	80046cc <UART_SetConfig+0x24c>
 8004664:	2308      	movs	r3, #8
 8004666:	e783      	b.n	8004570 <UART_SetConfig+0xf0>
 8004668:	2302      	movs	r3, #2
 800466a:	e781      	b.n	8004570 <UART_SetConfig+0xf0>
 800466c:	2302      	movs	r3, #2
 800466e:	e77f      	b.n	8004570 <UART_SetConfig+0xf0>
 8004670:	2302      	movs	r3, #2
 8004672:	e77d      	b.n	8004570 <UART_SetConfig+0xf0>
 8004674:	2300      	movs	r3, #0
 8004676:	e77b      	b.n	8004570 <UART_SetConfig+0xf0>
 8004678:	2310      	movs	r3, #16
 800467a:	e779      	b.n	8004570 <UART_SetConfig+0xf0>
 800467c:	2310      	movs	r3, #16
 800467e:	e777      	b.n	8004570 <UART_SetConfig+0xf0>
 8004680:	2302      	movs	r3, #2
 8004682:	e775      	b.n	8004570 <UART_SetConfig+0xf0>
 8004684:	2300      	movs	r3, #0
 8004686:	e773      	b.n	8004570 <UART_SetConfig+0xf0>
 8004688:	2310      	movs	r3, #16
 800468a:	e771      	b.n	8004570 <UART_SetConfig+0xf0>
 800468c:	2310      	movs	r3, #16
 800468e:	e76f      	b.n	8004570 <UART_SetConfig+0xf0>
 8004690:	2302      	movs	r3, #2
 8004692:	e76d      	b.n	8004570 <UART_SetConfig+0xf0>
 8004694:	2300      	movs	r3, #0
 8004696:	e76b      	b.n	8004570 <UART_SetConfig+0xf0>
 8004698:	2310      	movs	r3, #16
 800469a:	e769      	b.n	8004570 <UART_SetConfig+0xf0>
 800469c:	2310      	movs	r3, #16
 800469e:	e767      	b.n	8004570 <UART_SetConfig+0xf0>
 80046a0:	2302      	movs	r3, #2
 80046a2:	e765      	b.n	8004570 <UART_SetConfig+0xf0>
 80046a4:	2301      	movs	r3, #1
 80046a6:	e763      	b.n	8004570 <UART_SetConfig+0xf0>
 80046a8:	2310      	movs	r3, #16
 80046aa:	e761      	b.n	8004570 <UART_SetConfig+0xf0>
 80046ac:	2310      	movs	r3, #16
 80046ae:	e75f      	b.n	8004570 <UART_SetConfig+0xf0>
 80046b0:	2302      	movs	r3, #2
 80046b2:	e75d      	b.n	8004570 <UART_SetConfig+0xf0>
 80046b4:	2300      	movs	r3, #0
 80046b6:	e75b      	b.n	8004570 <UART_SetConfig+0xf0>
 80046b8:	2310      	movs	r3, #16
 80046ba:	e759      	b.n	8004570 <UART_SetConfig+0xf0>
 80046bc:	2310      	movs	r3, #16
 80046be:	e757      	b.n	8004570 <UART_SetConfig+0xf0>
 80046c0:	2302      	movs	r3, #2
 80046c2:	e755      	b.n	8004570 <UART_SetConfig+0xf0>
 80046c4:	2300      	movs	r3, #0
 80046c6:	e753      	b.n	8004570 <UART_SetConfig+0xf0>
 80046c8:	2310      	movs	r3, #16
 80046ca:	e751      	b.n	8004570 <UART_SetConfig+0xf0>
 80046cc:	2310      	movs	r3, #16
 80046ce:	e74f      	b.n	8004570 <UART_SetConfig+0xf0>
    switch (clocksource)
 80046d0:	2b08      	cmp	r3, #8
 80046d2:	d85b      	bhi.n	800478c <UART_SetConfig+0x30c>
 80046d4:	e8df f003 	tbb	[pc, r3]
 80046d8:	5a3a341a 	.word	0x5a3a341a
 80046dc:	5a5a5a37 	.word	0x5a5a5a37
 80046e0:	1e          	.byte	0x1e
 80046e1:	00          	.byte	0x00
 80046e2:	bf00      	nop
 80046e4:	efff69f3 	.word	0xefff69f3
 80046e8:	40011000 	.word	0x40011000
 80046ec:	40004400 	.word	0x40004400
 80046f0:	40004800 	.word	0x40004800
 80046f4:	40004c00 	.word	0x40004c00
 80046f8:	40005000 	.word	0x40005000
 80046fc:	40011400 	.word	0x40011400
 8004700:	40007800 	.word	0x40007800
 8004704:	40007c00 	.word	0x40007c00
 8004708:	40023800 	.word	0x40023800
        pclk = HAL_RCC_GetPCLK1Freq();
 800470c:	f7ff fa5c 	bl	8003bc8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004710:	2800      	cmp	r0, #0
 8004712:	d03d      	beq.n	8004790 <UART_SetConfig+0x310>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004714:	6862      	ldr	r2, [r4, #4]
 8004716:	0853      	lsrs	r3, r2, #1
 8004718:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800471c:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004720:	f1a0 0210 	sub.w	r2, r0, #16
 8004724:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8004728:	429a      	cmp	r2, r3
 800472a:	d833      	bhi.n	8004794 <UART_SetConfig+0x314>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800472c:	b283      	uxth	r3, r0
 800472e:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004732:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8004736:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 8004738:	6823      	ldr	r3, [r4, #0]
 800473a:	60d8      	str	r0, [r3, #12]
 800473c:	2000      	movs	r0, #0
 800473e:	e030      	b.n	80047a2 <UART_SetConfig+0x322>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004740:	f7ff fa52 	bl	8003be8 <HAL_RCC_GetPCLK2Freq>
        break;
 8004744:	e7e4      	b.n	8004710 <UART_SetConfig+0x290>
        pclk = HAL_RCC_GetSysClockFreq();
 8004746:	f7ff f931 	bl	80039ac <HAL_RCC_GetSysClockFreq>
        break;
 800474a:	e7e1      	b.n	8004710 <UART_SetConfig+0x290>
        pclk = (uint32_t) HSI_VALUE;
 800474c:	4817      	ldr	r0, [pc, #92]	; (80047ac <UART_SetConfig+0x32c>)
 800474e:	e7e1      	b.n	8004714 <UART_SetConfig+0x294>
    switch (clocksource)
 8004750:	4816      	ldr	r0, [pc, #88]	; (80047ac <UART_SetConfig+0x32c>)
 8004752:	e002      	b.n	800475a <UART_SetConfig+0x2da>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004754:	f7ff fa38 	bl	8003bc8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004758:	b300      	cbz	r0, 800479c <UART_SetConfig+0x31c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800475a:	6863      	ldr	r3, [r4, #4]
 800475c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8004760:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004764:	f1a0 0210 	sub.w	r2, r0, #16
 8004768:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800476c:	429a      	cmp	r2, r3
 800476e:	d817      	bhi.n	80047a0 <UART_SetConfig+0x320>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004770:	6823      	ldr	r3, [r4, #0]
 8004772:	b280      	uxth	r0, r0
 8004774:	60d8      	str	r0, [r3, #12]
 8004776:	2000      	movs	r0, #0
 8004778:	e013      	b.n	80047a2 <UART_SetConfig+0x322>
        pclk = HAL_RCC_GetPCLK2Freq();
 800477a:	f7ff fa35 	bl	8003be8 <HAL_RCC_GetPCLK2Freq>
        break;
 800477e:	e7eb      	b.n	8004758 <UART_SetConfig+0x2d8>
        pclk = HAL_RCC_GetSysClockFreq();
 8004780:	f7ff f914 	bl	80039ac <HAL_RCC_GetSysClockFreq>
        break;
 8004784:	e7e8      	b.n	8004758 <UART_SetConfig+0x2d8>
        pclk = (uint32_t) LSE_VALUE;
 8004786:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800478a:	e7e6      	b.n	800475a <UART_SetConfig+0x2da>
    switch (clocksource)
 800478c:	2001      	movs	r0, #1
 800478e:	e008      	b.n	80047a2 <UART_SetConfig+0x322>
 8004790:	2000      	movs	r0, #0
 8004792:	e006      	b.n	80047a2 <UART_SetConfig+0x322>
        ret = HAL_ERROR;
 8004794:	2001      	movs	r0, #1
 8004796:	e004      	b.n	80047a2 <UART_SetConfig+0x322>
    switch (clocksource)
 8004798:	2001      	movs	r0, #1
 800479a:	e002      	b.n	80047a2 <UART_SetConfig+0x322>
 800479c:	2000      	movs	r0, #0
 800479e:	e000      	b.n	80047a2 <UART_SetConfig+0x322>
        ret = HAL_ERROR;
 80047a0:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 80047a2:	2300      	movs	r3, #0
 80047a4:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 80047a6:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 80047a8:	bd10      	pop	{r4, pc}
 80047aa:	bf00      	nop
 80047ac:	00f42400 	.word	0x00f42400

080047b0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80047b2:	f013 0f01 	tst.w	r3, #1
 80047b6:	d006      	beq.n	80047c6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047b8:	6802      	ldr	r2, [r0, #0]
 80047ba:	6853      	ldr	r3, [r2, #4]
 80047bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80047c0:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80047c2:	430b      	orrs	r3, r1
 80047c4:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047c6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80047c8:	f013 0f02 	tst.w	r3, #2
 80047cc:	d006      	beq.n	80047dc <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047ce:	6802      	ldr	r2, [r0, #0]
 80047d0:	6853      	ldr	r3, [r2, #4]
 80047d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047d6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80047d8:	430b      	orrs	r3, r1
 80047da:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80047de:	f013 0f04 	tst.w	r3, #4
 80047e2:	d006      	beq.n	80047f2 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047e4:	6802      	ldr	r2, [r0, #0]
 80047e6:	6853      	ldr	r3, [r2, #4]
 80047e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047ec:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80047ee:	430b      	orrs	r3, r1
 80047f0:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047f2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80047f4:	f013 0f08 	tst.w	r3, #8
 80047f8:	d006      	beq.n	8004808 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047fa:	6802      	ldr	r2, [r0, #0]
 80047fc:	6853      	ldr	r3, [r2, #4]
 80047fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004802:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8004804:	430b      	orrs	r3, r1
 8004806:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004808:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800480a:	f013 0f10 	tst.w	r3, #16
 800480e:	d006      	beq.n	800481e <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004810:	6802      	ldr	r2, [r0, #0]
 8004812:	6893      	ldr	r3, [r2, #8]
 8004814:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004818:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800481a:	430b      	orrs	r3, r1
 800481c:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800481e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004820:	f013 0f20 	tst.w	r3, #32
 8004824:	d006      	beq.n	8004834 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004826:	6802      	ldr	r2, [r0, #0]
 8004828:	6893      	ldr	r3, [r2, #8]
 800482a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800482e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8004830:	430b      	orrs	r3, r1
 8004832:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004834:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004836:	f013 0f40 	tst.w	r3, #64	; 0x40
 800483a:	d00a      	beq.n	8004852 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800483c:	6802      	ldr	r2, [r0, #0]
 800483e:	6853      	ldr	r3, [r2, #4]
 8004840:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004844:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004846:	430b      	orrs	r3, r1
 8004848:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800484a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800484c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004850:	d00b      	beq.n	800486a <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004852:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004854:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004858:	d006      	beq.n	8004868 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800485a:	6802      	ldr	r2, [r0, #0]
 800485c:	6853      	ldr	r3, [r2, #4]
 800485e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004862:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004864:	430b      	orrs	r3, r1
 8004866:	6053      	str	r3, [r2, #4]
}
 8004868:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800486a:	6802      	ldr	r2, [r0, #0]
 800486c:	6853      	ldr	r3, [r2, #4]
 800486e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004872:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8004874:	430b      	orrs	r3, r1
 8004876:	6053      	str	r3, [r2, #4]
 8004878:	e7eb      	b.n	8004852 <UART_AdvFeatureConfig+0xa2>

0800487a <UART_WaitOnFlagUntilTimeout>:
{
 800487a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800487e:	4605      	mov	r5, r0
 8004880:	460f      	mov	r7, r1
 8004882:	4616      	mov	r6, r2
 8004884:	4699      	mov	r9, r3
 8004886:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800488a:	682c      	ldr	r4, [r5, #0]
 800488c:	69e4      	ldr	r4, [r4, #28]
 800488e:	ea37 0304 	bics.w	r3, r7, r4
 8004892:	bf0c      	ite	eq
 8004894:	f04f 0c01 	moveq.w	ip, #1
 8004898:	f04f 0c00 	movne.w	ip, #0
 800489c:	45b4      	cmp	ip, r6
 800489e:	d155      	bne.n	800494c <UART_WaitOnFlagUntilTimeout+0xd2>
    if (Timeout != HAL_MAX_DELAY)
 80048a0:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80048a4:	d0f1      	beq.n	800488a <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048a6:	f7fe f907 	bl	8002ab8 <HAL_GetTick>
 80048aa:	eba0 0009 	sub.w	r0, r0, r9
 80048ae:	4540      	cmp	r0, r8
 80048b0:	d82e      	bhi.n	8004910 <UART_WaitOnFlagUntilTimeout+0x96>
 80048b2:	f1b8 0f00 	cmp.w	r8, #0
 80048b6:	d02b      	beq.n	8004910 <UART_WaitOnFlagUntilTimeout+0x96>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80048b8:	682b      	ldr	r3, [r5, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	f012 0f04 	tst.w	r2, #4
 80048c0:	d0e3      	beq.n	800488a <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048c2:	69da      	ldr	r2, [r3, #28]
 80048c4:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80048c8:	d0df      	beq.n	800488a <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048ce:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048d0:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d2:	e852 3f00 	ldrex	r3, [r2]
 80048d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048da:	e842 3100 	strex	r1, r3, [r2]
 80048de:	2900      	cmp	r1, #0
 80048e0:	d1f6      	bne.n	80048d0 <UART_WaitOnFlagUntilTimeout+0x56>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048e2:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e4:	f102 0308 	add.w	r3, r2, #8
 80048e8:	e853 3f00 	ldrex	r3, [r3]
 80048ec:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f0:	3208      	adds	r2, #8
 80048f2:	e842 3100 	strex	r1, r3, [r2]
 80048f6:	2900      	cmp	r1, #0
 80048f8:	d1f3      	bne.n	80048e2 <UART_WaitOnFlagUntilTimeout+0x68>
          huart->gState = HAL_UART_STATE_READY;
 80048fa:	2320      	movs	r3, #32
 80048fc:	67eb      	str	r3, [r5, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80048fe:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004902:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8004906:	2300      	movs	r3, #0
 8004908:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
          return HAL_TIMEOUT;
 800490c:	2003      	movs	r0, #3
 800490e:	e01e      	b.n	800494e <UART_WaitOnFlagUntilTimeout+0xd4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004910:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004912:	e852 3f00 	ldrex	r3, [r2]
 8004916:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491a:	e842 3100 	strex	r1, r3, [r2]
 800491e:	2900      	cmp	r1, #0
 8004920:	d1f6      	bne.n	8004910 <UART_WaitOnFlagUntilTimeout+0x96>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004922:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004924:	f102 0308 	add.w	r3, r2, #8
 8004928:	e853 3f00 	ldrex	r3, [r3]
 800492c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004930:	3208      	adds	r2, #8
 8004932:	e842 3100 	strex	r1, r3, [r2]
 8004936:	2900      	cmp	r1, #0
 8004938:	d1f3      	bne.n	8004922 <UART_WaitOnFlagUntilTimeout+0xa8>
        huart->gState = HAL_UART_STATE_READY;
 800493a:	2320      	movs	r3, #32
 800493c:	67eb      	str	r3, [r5, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800493e:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
        __HAL_UNLOCK(huart);
 8004942:	2300      	movs	r3, #0
 8004944:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
        return HAL_TIMEOUT;
 8004948:	2003      	movs	r0, #3
 800494a:	e000      	b.n	800494e <UART_WaitOnFlagUntilTimeout+0xd4>
  return HAL_OK;
 800494c:	2000      	movs	r0, #0
}
 800494e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004952 <HAL_UART_Receive>:
{
 8004952:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004956:	b083      	sub	sp, #12
 8004958:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 800495a:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 800495e:	2b20      	cmp	r3, #32
 8004960:	d178      	bne.n	8004a54 <HAL_UART_Receive+0x102>
 8004962:	4604      	mov	r4, r0
 8004964:	460d      	mov	r5, r1
 8004966:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8004968:	2a00      	cmp	r2, #0
 800496a:	bf18      	it	ne
 800496c:	2900      	cmpne	r1, #0
 800496e:	d101      	bne.n	8004974 <HAL_UART_Receive+0x22>
      return  HAL_ERROR;
 8004970:	2001      	movs	r0, #1
 8004972:	e070      	b.n	8004a56 <HAL_UART_Receive+0x104>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004974:	2300      	movs	r3, #0
 8004976:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800497a:	2222      	movs	r2, #34	; 0x22
 800497c:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004980:	6603      	str	r3, [r0, #96]	; 0x60
    tickstart = HAL_GetTick();
 8004982:	f7fe f899 	bl	8002ab8 <HAL_GetTick>
 8004986:	4607      	mov	r7, r0
    huart->RxXferSize  = Size;
 8004988:	f8a4 8058 	strh.w	r8, [r4, #88]	; 0x58
    huart->RxXferCount = Size;
 800498c:	f8a4 805a 	strh.w	r8, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8004990:	68a3      	ldr	r3, [r4, #8]
 8004992:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004996:	d006      	beq.n	80049a6 <HAL_UART_Receive+0x54>
 8004998:	b9a3      	cbnz	r3, 80049c4 <HAL_UART_Receive+0x72>
 800499a:	6922      	ldr	r2, [r4, #16]
 800499c:	b972      	cbnz	r2, 80049bc <HAL_UART_Receive+0x6a>
 800499e:	22ff      	movs	r2, #255	; 0xff
 80049a0:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80049a4:	e014      	b.n	80049d0 <HAL_UART_Receive+0x7e>
 80049a6:	6922      	ldr	r2, [r4, #16]
 80049a8:	b922      	cbnz	r2, 80049b4 <HAL_UART_Receive+0x62>
 80049aa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80049ae:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80049b2:	e00d      	b.n	80049d0 <HAL_UART_Receive+0x7e>
 80049b4:	22ff      	movs	r2, #255	; 0xff
 80049b6:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80049ba:	e009      	b.n	80049d0 <HAL_UART_Receive+0x7e>
 80049bc:	227f      	movs	r2, #127	; 0x7f
 80049be:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80049c2:	e005      	b.n	80049d0 <HAL_UART_Receive+0x7e>
 80049c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049c8:	d00a      	beq.n	80049e0 <HAL_UART_Receive+0x8e>
 80049ca:	2200      	movs	r2, #0
 80049cc:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 80049d0:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049d8:	d00c      	beq.n	80049f4 <HAL_UART_Receive+0xa2>
      pdata16bits = NULL;
 80049da:	f04f 0900 	mov.w	r9, #0
 80049de:	e01f      	b.n	8004a20 <HAL_UART_Receive+0xce>
    UART_MASK_COMPUTATION(huart);
 80049e0:	6922      	ldr	r2, [r4, #16]
 80049e2:	b91a      	cbnz	r2, 80049ec <HAL_UART_Receive+0x9a>
 80049e4:	227f      	movs	r2, #127	; 0x7f
 80049e6:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80049ea:	e7f1      	b.n	80049d0 <HAL_UART_Receive+0x7e>
 80049ec:	223f      	movs	r2, #63	; 0x3f
 80049ee:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80049f2:	e7ed      	b.n	80049d0 <HAL_UART_Receive+0x7e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049f4:	6923      	ldr	r3, [r4, #16]
 80049f6:	b113      	cbz	r3, 80049fe <HAL_UART_Receive+0xac>
      pdata16bits = NULL;
 80049f8:	f04f 0900 	mov.w	r9, #0
 80049fc:	e010      	b.n	8004a20 <HAL_UART_Receive+0xce>
      pdata16bits = (uint16_t *) pData;
 80049fe:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 8004a00:	2500      	movs	r5, #0
 8004a02:	e00d      	b.n	8004a20 <HAL_UART_Receive+0xce>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004a04:	6823      	ldr	r3, [r4, #0]
 8004a06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a08:	fa5f f388 	uxtb.w	r3, r8
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	f805 3b01 	strb.w	r3, [r5], #1
      huart->RxXferCount--;
 8004a12:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 8004a16:	b292      	uxth	r2, r2
 8004a18:	3a01      	subs	r2, #1
 8004a1a:	b292      	uxth	r2, r2
 8004a1c:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004a20:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	b183      	cbz	r3, 8004a4a <HAL_UART_Receive+0xf8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004a28:	9600      	str	r6, [sp, #0]
 8004a2a:	463b      	mov	r3, r7
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	2120      	movs	r1, #32
 8004a30:	4620      	mov	r0, r4
 8004a32:	f7ff ff22 	bl	800487a <UART_WaitOnFlagUntilTimeout>
 8004a36:	b988      	cbnz	r0, 8004a5c <HAL_UART_Receive+0x10a>
      if (pdata8bits == NULL)
 8004a38:	2d00      	cmp	r5, #0
 8004a3a:	d1e3      	bne.n	8004a04 <HAL_UART_Receive+0xb2>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004a3c:	6823      	ldr	r3, [r4, #0]
 8004a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a40:	ea08 0303 	and.w	r3, r8, r3
 8004a44:	f829 3b02 	strh.w	r3, [r9], #2
        pdata16bits++;
 8004a48:	e7e3      	b.n	8004a12 <HAL_UART_Receive+0xc0>
    huart->RxState = HAL_UART_STATE_READY;
 8004a4a:	2320      	movs	r3, #32
 8004a4c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    return HAL_OK;
 8004a50:	2000      	movs	r0, #0
 8004a52:	e000      	b.n	8004a56 <HAL_UART_Receive+0x104>
    return HAL_BUSY;
 8004a54:	2002      	movs	r0, #2
}
 8004a56:	b003      	add	sp, #12
 8004a58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8004a5c:	2003      	movs	r0, #3
 8004a5e:	e7fa      	b.n	8004a56 <HAL_UART_Receive+0x104>

08004a60 <UART_CheckIdleState>:
{
 8004a60:	b530      	push	{r4, r5, lr}
 8004a62:	b083      	sub	sp, #12
 8004a64:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a66:	2300      	movs	r3, #0
 8004a68:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 8004a6c:	f7fe f824 	bl	8002ab8 <HAL_GetTick>
 8004a70:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a72:	6822      	ldr	r2, [r4, #0]
 8004a74:	6812      	ldr	r2, [r2, #0]
 8004a76:	f012 0f08 	tst.w	r2, #8
 8004a7a:	d10f      	bne.n	8004a9c <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a7c:	6823      	ldr	r3, [r4, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f013 0f04 	tst.w	r3, #4
 8004a84:	d118      	bne.n	8004ab8 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8004a86:	2320      	movs	r3, #32
 8004a88:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004a8a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a8e:	2000      	movs	r0, #0
 8004a90:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a92:	6660      	str	r0, [r4, #100]	; 0x64
  __HAL_UNLOCK(huart);
 8004a94:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
}
 8004a98:	b003      	add	sp, #12
 8004a9a:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004aa0:	9300      	str	r3, [sp, #0]
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004aaa:	4620      	mov	r0, r4
 8004aac:	f7ff fee5 	bl	800487a <UART_WaitOnFlagUntilTimeout>
 8004ab0:	2800      	cmp	r0, #0
 8004ab2:	d0e3      	beq.n	8004a7c <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8004ab4:	2003      	movs	r0, #3
 8004ab6:	e7ef      	b.n	8004a98 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ab8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004abc:	9300      	str	r3, [sp, #0]
 8004abe:	462b      	mov	r3, r5
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ac6:	4620      	mov	r0, r4
 8004ac8:	f7ff fed7 	bl	800487a <UART_WaitOnFlagUntilTimeout>
 8004acc:	2800      	cmp	r0, #0
 8004ace:	d0da      	beq.n	8004a86 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8004ad0:	2003      	movs	r0, #3
 8004ad2:	e7e1      	b.n	8004a98 <UART_CheckIdleState+0x38>

08004ad4 <HAL_UART_Init>:
  if (huart == NULL)
 8004ad4:	b368      	cbz	r0, 8004b32 <HAL_UART_Init+0x5e>
{
 8004ad6:	b510      	push	{r4, lr}
 8004ad8:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004ada:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8004adc:	b303      	cbz	r3, 8004b20 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8004ade:	2324      	movs	r3, #36	; 0x24
 8004ae0:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8004ae2:	6822      	ldr	r2, [r4, #0]
 8004ae4:	6813      	ldr	r3, [r2, #0]
 8004ae6:	f023 0301 	bic.w	r3, r3, #1
 8004aea:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004aec:	4620      	mov	r0, r4
 8004aee:	f7ff fcc7 	bl	8004480 <UART_SetConfig>
 8004af2:	2801      	cmp	r0, #1
 8004af4:	d013      	beq.n	8004b1e <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004af6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004af8:	b9bb      	cbnz	r3, 8004b2a <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004afa:	6822      	ldr	r2, [r4, #0]
 8004afc:	6853      	ldr	r3, [r2, #4]
 8004afe:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004b02:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b04:	6822      	ldr	r2, [r4, #0]
 8004b06:	6893      	ldr	r3, [r2, #8]
 8004b08:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8004b0c:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8004b0e:	6822      	ldr	r2, [r4, #0]
 8004b10:	6813      	ldr	r3, [r2, #0]
 8004b12:	f043 0301 	orr.w	r3, r3, #1
 8004b16:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8004b18:	4620      	mov	r0, r4
 8004b1a:	f7ff ffa1 	bl	8004a60 <UART_CheckIdleState>
}
 8004b1e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8004b20:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 8004b24:	f7fd fee2 	bl	80028ec <HAL_UART_MspInit>
 8004b28:	e7d9      	b.n	8004ade <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8004b2a:	4620      	mov	r0, r4
 8004b2c:	f7ff fe40 	bl	80047b0 <UART_AdvFeatureConfig>
 8004b30:	e7e3      	b.n	8004afa <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8004b32:	2001      	movs	r0, #1
}
 8004b34:	4770      	bx	lr
	...

08004b38 <__libc_init_array>:
 8004b38:	b570      	push	{r4, r5, r6, lr}
 8004b3a:	4d0d      	ldr	r5, [pc, #52]	; (8004b70 <__libc_init_array+0x38>)
 8004b3c:	4c0d      	ldr	r4, [pc, #52]	; (8004b74 <__libc_init_array+0x3c>)
 8004b3e:	1b64      	subs	r4, r4, r5
 8004b40:	10a4      	asrs	r4, r4, #2
 8004b42:	2600      	movs	r6, #0
 8004b44:	42a6      	cmp	r6, r4
 8004b46:	d109      	bne.n	8004b5c <__libc_init_array+0x24>
 8004b48:	4d0b      	ldr	r5, [pc, #44]	; (8004b78 <__libc_init_array+0x40>)
 8004b4a:	4c0c      	ldr	r4, [pc, #48]	; (8004b7c <__libc_init_array+0x44>)
 8004b4c:	f000 fc92 	bl	8005474 <_init>
 8004b50:	1b64      	subs	r4, r4, r5
 8004b52:	10a4      	asrs	r4, r4, #2
 8004b54:	2600      	movs	r6, #0
 8004b56:	42a6      	cmp	r6, r4
 8004b58:	d105      	bne.n	8004b66 <__libc_init_array+0x2e>
 8004b5a:	bd70      	pop	{r4, r5, r6, pc}
 8004b5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b60:	4798      	blx	r3
 8004b62:	3601      	adds	r6, #1
 8004b64:	e7ee      	b.n	8004b44 <__libc_init_array+0xc>
 8004b66:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b6a:	4798      	blx	r3
 8004b6c:	3601      	adds	r6, #1
 8004b6e:	e7f2      	b.n	8004b56 <__libc_init_array+0x1e>
 8004b70:	080055d8 	.word	0x080055d8
 8004b74:	080055d8 	.word	0x080055d8
 8004b78:	080055d8 	.word	0x080055d8
 8004b7c:	080055dc 	.word	0x080055dc

08004b80 <memcpy>:
 8004b80:	440a      	add	r2, r1
 8004b82:	4291      	cmp	r1, r2
 8004b84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004b88:	d100      	bne.n	8004b8c <memcpy+0xc>
 8004b8a:	4770      	bx	lr
 8004b8c:	b510      	push	{r4, lr}
 8004b8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b96:	4291      	cmp	r1, r2
 8004b98:	d1f9      	bne.n	8004b8e <memcpy+0xe>
 8004b9a:	bd10      	pop	{r4, pc}

08004b9c <memset>:
 8004b9c:	4402      	add	r2, r0
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d100      	bne.n	8004ba6 <memset+0xa>
 8004ba4:	4770      	bx	lr
 8004ba6:	f803 1b01 	strb.w	r1, [r3], #1
 8004baa:	e7f9      	b.n	8004ba0 <memset+0x4>

08004bac <setbuf>:
 8004bac:	2900      	cmp	r1, #0
 8004bae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bb2:	bf0c      	ite	eq
 8004bb4:	2202      	moveq	r2, #2
 8004bb6:	2200      	movne	r2, #0
 8004bb8:	f000 b800 	b.w	8004bbc <setvbuf>

08004bbc <setvbuf>:
 8004bbc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004bc0:	461d      	mov	r5, r3
 8004bc2:	4b5d      	ldr	r3, [pc, #372]	; (8004d38 <setvbuf+0x17c>)
 8004bc4:	681f      	ldr	r7, [r3, #0]
 8004bc6:	4604      	mov	r4, r0
 8004bc8:	460e      	mov	r6, r1
 8004bca:	4690      	mov	r8, r2
 8004bcc:	b127      	cbz	r7, 8004bd8 <setvbuf+0x1c>
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	b913      	cbnz	r3, 8004bd8 <setvbuf+0x1c>
 8004bd2:	4638      	mov	r0, r7
 8004bd4:	f000 f9d2 	bl	8004f7c <__sinit>
 8004bd8:	4b58      	ldr	r3, [pc, #352]	; (8004d3c <setvbuf+0x180>)
 8004bda:	429c      	cmp	r4, r3
 8004bdc:	d167      	bne.n	8004cae <setvbuf+0xf2>
 8004bde:	687c      	ldr	r4, [r7, #4]
 8004be0:	f1b8 0f02 	cmp.w	r8, #2
 8004be4:	d006      	beq.n	8004bf4 <setvbuf+0x38>
 8004be6:	f1b8 0f01 	cmp.w	r8, #1
 8004bea:	f200 809f 	bhi.w	8004d2c <setvbuf+0x170>
 8004bee:	2d00      	cmp	r5, #0
 8004bf0:	f2c0 809c 	blt.w	8004d2c <setvbuf+0x170>
 8004bf4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004bf6:	07db      	lsls	r3, r3, #31
 8004bf8:	d405      	bmi.n	8004c06 <setvbuf+0x4a>
 8004bfa:	89a3      	ldrh	r3, [r4, #12]
 8004bfc:	0598      	lsls	r0, r3, #22
 8004bfe:	d402      	bmi.n	8004c06 <setvbuf+0x4a>
 8004c00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c02:	f000 fa59 	bl	80050b8 <__retarget_lock_acquire_recursive>
 8004c06:	4621      	mov	r1, r4
 8004c08:	4638      	mov	r0, r7
 8004c0a:	f000 f923 	bl	8004e54 <_fflush_r>
 8004c0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c10:	b141      	cbz	r1, 8004c24 <setvbuf+0x68>
 8004c12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c16:	4299      	cmp	r1, r3
 8004c18:	d002      	beq.n	8004c20 <setvbuf+0x64>
 8004c1a:	4638      	mov	r0, r7
 8004c1c:	f000 fa7c 	bl	8005118 <_free_r>
 8004c20:	2300      	movs	r3, #0
 8004c22:	6363      	str	r3, [r4, #52]	; 0x34
 8004c24:	2300      	movs	r3, #0
 8004c26:	61a3      	str	r3, [r4, #24]
 8004c28:	6063      	str	r3, [r4, #4]
 8004c2a:	89a3      	ldrh	r3, [r4, #12]
 8004c2c:	0619      	lsls	r1, r3, #24
 8004c2e:	d503      	bpl.n	8004c38 <setvbuf+0x7c>
 8004c30:	6921      	ldr	r1, [r4, #16]
 8004c32:	4638      	mov	r0, r7
 8004c34:	f000 fa70 	bl	8005118 <_free_r>
 8004c38:	89a3      	ldrh	r3, [r4, #12]
 8004c3a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004c3e:	f023 0303 	bic.w	r3, r3, #3
 8004c42:	f1b8 0f02 	cmp.w	r8, #2
 8004c46:	81a3      	strh	r3, [r4, #12]
 8004c48:	d06c      	beq.n	8004d24 <setvbuf+0x168>
 8004c4a:	ab01      	add	r3, sp, #4
 8004c4c:	466a      	mov	r2, sp
 8004c4e:	4621      	mov	r1, r4
 8004c50:	4638      	mov	r0, r7
 8004c52:	f000 fa33 	bl	80050bc <__swhatbuf_r>
 8004c56:	89a3      	ldrh	r3, [r4, #12]
 8004c58:	4318      	orrs	r0, r3
 8004c5a:	81a0      	strh	r0, [r4, #12]
 8004c5c:	2d00      	cmp	r5, #0
 8004c5e:	d130      	bne.n	8004cc2 <setvbuf+0x106>
 8004c60:	9d00      	ldr	r5, [sp, #0]
 8004c62:	4628      	mov	r0, r5
 8004c64:	f000 fa50 	bl	8005108 <malloc>
 8004c68:	4606      	mov	r6, r0
 8004c6a:	2800      	cmp	r0, #0
 8004c6c:	d155      	bne.n	8004d1a <setvbuf+0x15e>
 8004c6e:	f8dd 9000 	ldr.w	r9, [sp]
 8004c72:	45a9      	cmp	r9, r5
 8004c74:	d14a      	bne.n	8004d0c <setvbuf+0x150>
 8004c76:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	60a2      	str	r2, [r4, #8]
 8004c7e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8004c82:	6022      	str	r2, [r4, #0]
 8004c84:	6122      	str	r2, [r4, #16]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c8c:	6162      	str	r2, [r4, #20]
 8004c8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004c90:	f043 0302 	orr.w	r3, r3, #2
 8004c94:	07d2      	lsls	r2, r2, #31
 8004c96:	81a3      	strh	r3, [r4, #12]
 8004c98:	d405      	bmi.n	8004ca6 <setvbuf+0xea>
 8004c9a:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004c9e:	d102      	bne.n	8004ca6 <setvbuf+0xea>
 8004ca0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ca2:	f000 fa0a 	bl	80050ba <__retarget_lock_release_recursive>
 8004ca6:	4628      	mov	r0, r5
 8004ca8:	b003      	add	sp, #12
 8004caa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004cae:	4b24      	ldr	r3, [pc, #144]	; (8004d40 <setvbuf+0x184>)
 8004cb0:	429c      	cmp	r4, r3
 8004cb2:	d101      	bne.n	8004cb8 <setvbuf+0xfc>
 8004cb4:	68bc      	ldr	r4, [r7, #8]
 8004cb6:	e793      	b.n	8004be0 <setvbuf+0x24>
 8004cb8:	4b22      	ldr	r3, [pc, #136]	; (8004d44 <setvbuf+0x188>)
 8004cba:	429c      	cmp	r4, r3
 8004cbc:	bf08      	it	eq
 8004cbe:	68fc      	ldreq	r4, [r7, #12]
 8004cc0:	e78e      	b.n	8004be0 <setvbuf+0x24>
 8004cc2:	2e00      	cmp	r6, #0
 8004cc4:	d0cd      	beq.n	8004c62 <setvbuf+0xa6>
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	b913      	cbnz	r3, 8004cd0 <setvbuf+0x114>
 8004cca:	4638      	mov	r0, r7
 8004ccc:	f000 f956 	bl	8004f7c <__sinit>
 8004cd0:	f1b8 0f01 	cmp.w	r8, #1
 8004cd4:	bf08      	it	eq
 8004cd6:	89a3      	ldrheq	r3, [r4, #12]
 8004cd8:	6026      	str	r6, [r4, #0]
 8004cda:	bf04      	itt	eq
 8004cdc:	f043 0301 	orreq.w	r3, r3, #1
 8004ce0:	81a3      	strheq	r3, [r4, #12]
 8004ce2:	89a2      	ldrh	r2, [r4, #12]
 8004ce4:	f012 0308 	ands.w	r3, r2, #8
 8004ce8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004cec:	d01c      	beq.n	8004d28 <setvbuf+0x16c>
 8004cee:	07d3      	lsls	r3, r2, #31
 8004cf0:	bf41      	itttt	mi
 8004cf2:	2300      	movmi	r3, #0
 8004cf4:	426d      	negmi	r5, r5
 8004cf6:	60a3      	strmi	r3, [r4, #8]
 8004cf8:	61a5      	strmi	r5, [r4, #24]
 8004cfa:	bf58      	it	pl
 8004cfc:	60a5      	strpl	r5, [r4, #8]
 8004cfe:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8004d00:	f015 0501 	ands.w	r5, r5, #1
 8004d04:	d115      	bne.n	8004d32 <setvbuf+0x176>
 8004d06:	f412 7f00 	tst.w	r2, #512	; 0x200
 8004d0a:	e7c8      	b.n	8004c9e <setvbuf+0xe2>
 8004d0c:	4648      	mov	r0, r9
 8004d0e:	f000 f9fb 	bl	8005108 <malloc>
 8004d12:	4606      	mov	r6, r0
 8004d14:	2800      	cmp	r0, #0
 8004d16:	d0ae      	beq.n	8004c76 <setvbuf+0xba>
 8004d18:	464d      	mov	r5, r9
 8004d1a:	89a3      	ldrh	r3, [r4, #12]
 8004d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d20:	81a3      	strh	r3, [r4, #12]
 8004d22:	e7d0      	b.n	8004cc6 <setvbuf+0x10a>
 8004d24:	2500      	movs	r5, #0
 8004d26:	e7a8      	b.n	8004c7a <setvbuf+0xbe>
 8004d28:	60a3      	str	r3, [r4, #8]
 8004d2a:	e7e8      	b.n	8004cfe <setvbuf+0x142>
 8004d2c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004d30:	e7b9      	b.n	8004ca6 <setvbuf+0xea>
 8004d32:	2500      	movs	r5, #0
 8004d34:	e7b7      	b.n	8004ca6 <setvbuf+0xea>
 8004d36:	bf00      	nop
 8004d38:	20000010 	.word	0x20000010
 8004d3c:	08005590 	.word	0x08005590
 8004d40:	080055b0 	.word	0x080055b0
 8004d44:	08005570 	.word	0x08005570

08004d48 <__sflush_r>:
 8004d48:	898a      	ldrh	r2, [r1, #12]
 8004d4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d4e:	4605      	mov	r5, r0
 8004d50:	0710      	lsls	r0, r2, #28
 8004d52:	460c      	mov	r4, r1
 8004d54:	d458      	bmi.n	8004e08 <__sflush_r+0xc0>
 8004d56:	684b      	ldr	r3, [r1, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	dc05      	bgt.n	8004d68 <__sflush_r+0x20>
 8004d5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	dc02      	bgt.n	8004d68 <__sflush_r+0x20>
 8004d62:	2000      	movs	r0, #0
 8004d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d6a:	2e00      	cmp	r6, #0
 8004d6c:	d0f9      	beq.n	8004d62 <__sflush_r+0x1a>
 8004d6e:	2300      	movs	r3, #0
 8004d70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004d74:	682f      	ldr	r7, [r5, #0]
 8004d76:	602b      	str	r3, [r5, #0]
 8004d78:	d032      	beq.n	8004de0 <__sflush_r+0x98>
 8004d7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004d7c:	89a3      	ldrh	r3, [r4, #12]
 8004d7e:	075a      	lsls	r2, r3, #29
 8004d80:	d505      	bpl.n	8004d8e <__sflush_r+0x46>
 8004d82:	6863      	ldr	r3, [r4, #4]
 8004d84:	1ac0      	subs	r0, r0, r3
 8004d86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d88:	b10b      	cbz	r3, 8004d8e <__sflush_r+0x46>
 8004d8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d8c:	1ac0      	subs	r0, r0, r3
 8004d8e:	2300      	movs	r3, #0
 8004d90:	4602      	mov	r2, r0
 8004d92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d94:	6a21      	ldr	r1, [r4, #32]
 8004d96:	4628      	mov	r0, r5
 8004d98:	47b0      	blx	r6
 8004d9a:	1c43      	adds	r3, r0, #1
 8004d9c:	89a3      	ldrh	r3, [r4, #12]
 8004d9e:	d106      	bne.n	8004dae <__sflush_r+0x66>
 8004da0:	6829      	ldr	r1, [r5, #0]
 8004da2:	291d      	cmp	r1, #29
 8004da4:	d82c      	bhi.n	8004e00 <__sflush_r+0xb8>
 8004da6:	4a2a      	ldr	r2, [pc, #168]	; (8004e50 <__sflush_r+0x108>)
 8004da8:	40ca      	lsrs	r2, r1
 8004daa:	07d6      	lsls	r6, r2, #31
 8004dac:	d528      	bpl.n	8004e00 <__sflush_r+0xb8>
 8004dae:	2200      	movs	r2, #0
 8004db0:	6062      	str	r2, [r4, #4]
 8004db2:	04d9      	lsls	r1, r3, #19
 8004db4:	6922      	ldr	r2, [r4, #16]
 8004db6:	6022      	str	r2, [r4, #0]
 8004db8:	d504      	bpl.n	8004dc4 <__sflush_r+0x7c>
 8004dba:	1c42      	adds	r2, r0, #1
 8004dbc:	d101      	bne.n	8004dc2 <__sflush_r+0x7a>
 8004dbe:	682b      	ldr	r3, [r5, #0]
 8004dc0:	b903      	cbnz	r3, 8004dc4 <__sflush_r+0x7c>
 8004dc2:	6560      	str	r0, [r4, #84]	; 0x54
 8004dc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004dc6:	602f      	str	r7, [r5, #0]
 8004dc8:	2900      	cmp	r1, #0
 8004dca:	d0ca      	beq.n	8004d62 <__sflush_r+0x1a>
 8004dcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004dd0:	4299      	cmp	r1, r3
 8004dd2:	d002      	beq.n	8004dda <__sflush_r+0x92>
 8004dd4:	4628      	mov	r0, r5
 8004dd6:	f000 f99f 	bl	8005118 <_free_r>
 8004dda:	2000      	movs	r0, #0
 8004ddc:	6360      	str	r0, [r4, #52]	; 0x34
 8004dde:	e7c1      	b.n	8004d64 <__sflush_r+0x1c>
 8004de0:	6a21      	ldr	r1, [r4, #32]
 8004de2:	2301      	movs	r3, #1
 8004de4:	4628      	mov	r0, r5
 8004de6:	47b0      	blx	r6
 8004de8:	1c41      	adds	r1, r0, #1
 8004dea:	d1c7      	bne.n	8004d7c <__sflush_r+0x34>
 8004dec:	682b      	ldr	r3, [r5, #0]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d0c4      	beq.n	8004d7c <__sflush_r+0x34>
 8004df2:	2b1d      	cmp	r3, #29
 8004df4:	d001      	beq.n	8004dfa <__sflush_r+0xb2>
 8004df6:	2b16      	cmp	r3, #22
 8004df8:	d101      	bne.n	8004dfe <__sflush_r+0xb6>
 8004dfa:	602f      	str	r7, [r5, #0]
 8004dfc:	e7b1      	b.n	8004d62 <__sflush_r+0x1a>
 8004dfe:	89a3      	ldrh	r3, [r4, #12]
 8004e00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e04:	81a3      	strh	r3, [r4, #12]
 8004e06:	e7ad      	b.n	8004d64 <__sflush_r+0x1c>
 8004e08:	690f      	ldr	r7, [r1, #16]
 8004e0a:	2f00      	cmp	r7, #0
 8004e0c:	d0a9      	beq.n	8004d62 <__sflush_r+0x1a>
 8004e0e:	0793      	lsls	r3, r2, #30
 8004e10:	680e      	ldr	r6, [r1, #0]
 8004e12:	bf08      	it	eq
 8004e14:	694b      	ldreq	r3, [r1, #20]
 8004e16:	600f      	str	r7, [r1, #0]
 8004e18:	bf18      	it	ne
 8004e1a:	2300      	movne	r3, #0
 8004e1c:	eba6 0807 	sub.w	r8, r6, r7
 8004e20:	608b      	str	r3, [r1, #8]
 8004e22:	f1b8 0f00 	cmp.w	r8, #0
 8004e26:	dd9c      	ble.n	8004d62 <__sflush_r+0x1a>
 8004e28:	6a21      	ldr	r1, [r4, #32]
 8004e2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004e2c:	4643      	mov	r3, r8
 8004e2e:	463a      	mov	r2, r7
 8004e30:	4628      	mov	r0, r5
 8004e32:	47b0      	blx	r6
 8004e34:	2800      	cmp	r0, #0
 8004e36:	dc06      	bgt.n	8004e46 <__sflush_r+0xfe>
 8004e38:	89a3      	ldrh	r3, [r4, #12]
 8004e3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e3e:	81a3      	strh	r3, [r4, #12]
 8004e40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e44:	e78e      	b.n	8004d64 <__sflush_r+0x1c>
 8004e46:	4407      	add	r7, r0
 8004e48:	eba8 0800 	sub.w	r8, r8, r0
 8004e4c:	e7e9      	b.n	8004e22 <__sflush_r+0xda>
 8004e4e:	bf00      	nop
 8004e50:	20400001 	.word	0x20400001

08004e54 <_fflush_r>:
 8004e54:	b538      	push	{r3, r4, r5, lr}
 8004e56:	690b      	ldr	r3, [r1, #16]
 8004e58:	4605      	mov	r5, r0
 8004e5a:	460c      	mov	r4, r1
 8004e5c:	b913      	cbnz	r3, 8004e64 <_fflush_r+0x10>
 8004e5e:	2500      	movs	r5, #0
 8004e60:	4628      	mov	r0, r5
 8004e62:	bd38      	pop	{r3, r4, r5, pc}
 8004e64:	b118      	cbz	r0, 8004e6e <_fflush_r+0x1a>
 8004e66:	6983      	ldr	r3, [r0, #24]
 8004e68:	b90b      	cbnz	r3, 8004e6e <_fflush_r+0x1a>
 8004e6a:	f000 f887 	bl	8004f7c <__sinit>
 8004e6e:	4b14      	ldr	r3, [pc, #80]	; (8004ec0 <_fflush_r+0x6c>)
 8004e70:	429c      	cmp	r4, r3
 8004e72:	d11b      	bne.n	8004eac <_fflush_r+0x58>
 8004e74:	686c      	ldr	r4, [r5, #4]
 8004e76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d0ef      	beq.n	8004e5e <_fflush_r+0xa>
 8004e7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004e80:	07d0      	lsls	r0, r2, #31
 8004e82:	d404      	bmi.n	8004e8e <_fflush_r+0x3a>
 8004e84:	0599      	lsls	r1, r3, #22
 8004e86:	d402      	bmi.n	8004e8e <_fflush_r+0x3a>
 8004e88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e8a:	f000 f915 	bl	80050b8 <__retarget_lock_acquire_recursive>
 8004e8e:	4628      	mov	r0, r5
 8004e90:	4621      	mov	r1, r4
 8004e92:	f7ff ff59 	bl	8004d48 <__sflush_r>
 8004e96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e98:	07da      	lsls	r2, r3, #31
 8004e9a:	4605      	mov	r5, r0
 8004e9c:	d4e0      	bmi.n	8004e60 <_fflush_r+0xc>
 8004e9e:	89a3      	ldrh	r3, [r4, #12]
 8004ea0:	059b      	lsls	r3, r3, #22
 8004ea2:	d4dd      	bmi.n	8004e60 <_fflush_r+0xc>
 8004ea4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ea6:	f000 f908 	bl	80050ba <__retarget_lock_release_recursive>
 8004eaa:	e7d9      	b.n	8004e60 <_fflush_r+0xc>
 8004eac:	4b05      	ldr	r3, [pc, #20]	; (8004ec4 <_fflush_r+0x70>)
 8004eae:	429c      	cmp	r4, r3
 8004eb0:	d101      	bne.n	8004eb6 <_fflush_r+0x62>
 8004eb2:	68ac      	ldr	r4, [r5, #8]
 8004eb4:	e7df      	b.n	8004e76 <_fflush_r+0x22>
 8004eb6:	4b04      	ldr	r3, [pc, #16]	; (8004ec8 <_fflush_r+0x74>)
 8004eb8:	429c      	cmp	r4, r3
 8004eba:	bf08      	it	eq
 8004ebc:	68ec      	ldreq	r4, [r5, #12]
 8004ebe:	e7da      	b.n	8004e76 <_fflush_r+0x22>
 8004ec0:	08005590 	.word	0x08005590
 8004ec4:	080055b0 	.word	0x080055b0
 8004ec8:	08005570 	.word	0x08005570

08004ecc <std>:
 8004ecc:	2300      	movs	r3, #0
 8004ece:	b510      	push	{r4, lr}
 8004ed0:	4604      	mov	r4, r0
 8004ed2:	e9c0 3300 	strd	r3, r3, [r0]
 8004ed6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004eda:	6083      	str	r3, [r0, #8]
 8004edc:	8181      	strh	r1, [r0, #12]
 8004ede:	6643      	str	r3, [r0, #100]	; 0x64
 8004ee0:	81c2      	strh	r2, [r0, #14]
 8004ee2:	6183      	str	r3, [r0, #24]
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	2208      	movs	r2, #8
 8004ee8:	305c      	adds	r0, #92	; 0x5c
 8004eea:	f7ff fe57 	bl	8004b9c <memset>
 8004eee:	4b05      	ldr	r3, [pc, #20]	; (8004f04 <std+0x38>)
 8004ef0:	6263      	str	r3, [r4, #36]	; 0x24
 8004ef2:	4b05      	ldr	r3, [pc, #20]	; (8004f08 <std+0x3c>)
 8004ef4:	62a3      	str	r3, [r4, #40]	; 0x28
 8004ef6:	4b05      	ldr	r3, [pc, #20]	; (8004f0c <std+0x40>)
 8004ef8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004efa:	4b05      	ldr	r3, [pc, #20]	; (8004f10 <std+0x44>)
 8004efc:	6224      	str	r4, [r4, #32]
 8004efe:	6323      	str	r3, [r4, #48]	; 0x30
 8004f00:	bd10      	pop	{r4, pc}
 8004f02:	bf00      	nop
 8004f04:	080052f9 	.word	0x080052f9
 8004f08:	0800531b 	.word	0x0800531b
 8004f0c:	08005353 	.word	0x08005353
 8004f10:	08005377 	.word	0x08005377

08004f14 <_cleanup_r>:
 8004f14:	4901      	ldr	r1, [pc, #4]	; (8004f1c <_cleanup_r+0x8>)
 8004f16:	f000 b8af 	b.w	8005078 <_fwalk_reent>
 8004f1a:	bf00      	nop
 8004f1c:	08004e55 	.word	0x08004e55

08004f20 <__sfmoreglue>:
 8004f20:	b570      	push	{r4, r5, r6, lr}
 8004f22:	2268      	movs	r2, #104	; 0x68
 8004f24:	1e4d      	subs	r5, r1, #1
 8004f26:	4355      	muls	r5, r2
 8004f28:	460e      	mov	r6, r1
 8004f2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004f2e:	f000 f95f 	bl	80051f0 <_malloc_r>
 8004f32:	4604      	mov	r4, r0
 8004f34:	b140      	cbz	r0, 8004f48 <__sfmoreglue+0x28>
 8004f36:	2100      	movs	r1, #0
 8004f38:	e9c0 1600 	strd	r1, r6, [r0]
 8004f3c:	300c      	adds	r0, #12
 8004f3e:	60a0      	str	r0, [r4, #8]
 8004f40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004f44:	f7ff fe2a 	bl	8004b9c <memset>
 8004f48:	4620      	mov	r0, r4
 8004f4a:	bd70      	pop	{r4, r5, r6, pc}

08004f4c <__sfp_lock_acquire>:
 8004f4c:	4801      	ldr	r0, [pc, #4]	; (8004f54 <__sfp_lock_acquire+0x8>)
 8004f4e:	f000 b8b3 	b.w	80050b8 <__retarget_lock_acquire_recursive>
 8004f52:	bf00      	nop
 8004f54:	20004b71 	.word	0x20004b71

08004f58 <__sfp_lock_release>:
 8004f58:	4801      	ldr	r0, [pc, #4]	; (8004f60 <__sfp_lock_release+0x8>)
 8004f5a:	f000 b8ae 	b.w	80050ba <__retarget_lock_release_recursive>
 8004f5e:	bf00      	nop
 8004f60:	20004b71 	.word	0x20004b71

08004f64 <__sinit_lock_acquire>:
 8004f64:	4801      	ldr	r0, [pc, #4]	; (8004f6c <__sinit_lock_acquire+0x8>)
 8004f66:	f000 b8a7 	b.w	80050b8 <__retarget_lock_acquire_recursive>
 8004f6a:	bf00      	nop
 8004f6c:	20004b72 	.word	0x20004b72

08004f70 <__sinit_lock_release>:
 8004f70:	4801      	ldr	r0, [pc, #4]	; (8004f78 <__sinit_lock_release+0x8>)
 8004f72:	f000 b8a2 	b.w	80050ba <__retarget_lock_release_recursive>
 8004f76:	bf00      	nop
 8004f78:	20004b72 	.word	0x20004b72

08004f7c <__sinit>:
 8004f7c:	b510      	push	{r4, lr}
 8004f7e:	4604      	mov	r4, r0
 8004f80:	f7ff fff0 	bl	8004f64 <__sinit_lock_acquire>
 8004f84:	69a3      	ldr	r3, [r4, #24]
 8004f86:	b11b      	cbz	r3, 8004f90 <__sinit+0x14>
 8004f88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f8c:	f7ff bff0 	b.w	8004f70 <__sinit_lock_release>
 8004f90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004f94:	6523      	str	r3, [r4, #80]	; 0x50
 8004f96:	4b13      	ldr	r3, [pc, #76]	; (8004fe4 <__sinit+0x68>)
 8004f98:	4a13      	ldr	r2, [pc, #76]	; (8004fe8 <__sinit+0x6c>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	62a2      	str	r2, [r4, #40]	; 0x28
 8004f9e:	42a3      	cmp	r3, r4
 8004fa0:	bf04      	itt	eq
 8004fa2:	2301      	moveq	r3, #1
 8004fa4:	61a3      	streq	r3, [r4, #24]
 8004fa6:	4620      	mov	r0, r4
 8004fa8:	f000 f820 	bl	8004fec <__sfp>
 8004fac:	6060      	str	r0, [r4, #4]
 8004fae:	4620      	mov	r0, r4
 8004fb0:	f000 f81c 	bl	8004fec <__sfp>
 8004fb4:	60a0      	str	r0, [r4, #8]
 8004fb6:	4620      	mov	r0, r4
 8004fb8:	f000 f818 	bl	8004fec <__sfp>
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	60e0      	str	r0, [r4, #12]
 8004fc0:	2104      	movs	r1, #4
 8004fc2:	6860      	ldr	r0, [r4, #4]
 8004fc4:	f7ff ff82 	bl	8004ecc <std>
 8004fc8:	68a0      	ldr	r0, [r4, #8]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	2109      	movs	r1, #9
 8004fce:	f7ff ff7d 	bl	8004ecc <std>
 8004fd2:	68e0      	ldr	r0, [r4, #12]
 8004fd4:	2202      	movs	r2, #2
 8004fd6:	2112      	movs	r1, #18
 8004fd8:	f7ff ff78 	bl	8004ecc <std>
 8004fdc:	2301      	movs	r3, #1
 8004fde:	61a3      	str	r3, [r4, #24]
 8004fe0:	e7d2      	b.n	8004f88 <__sinit+0xc>
 8004fe2:	bf00      	nop
 8004fe4:	0800556c 	.word	0x0800556c
 8004fe8:	08004f15 	.word	0x08004f15

08004fec <__sfp>:
 8004fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fee:	4607      	mov	r7, r0
 8004ff0:	f7ff ffac 	bl	8004f4c <__sfp_lock_acquire>
 8004ff4:	4b1e      	ldr	r3, [pc, #120]	; (8005070 <__sfp+0x84>)
 8004ff6:	681e      	ldr	r6, [r3, #0]
 8004ff8:	69b3      	ldr	r3, [r6, #24]
 8004ffa:	b913      	cbnz	r3, 8005002 <__sfp+0x16>
 8004ffc:	4630      	mov	r0, r6
 8004ffe:	f7ff ffbd 	bl	8004f7c <__sinit>
 8005002:	3648      	adds	r6, #72	; 0x48
 8005004:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005008:	3b01      	subs	r3, #1
 800500a:	d503      	bpl.n	8005014 <__sfp+0x28>
 800500c:	6833      	ldr	r3, [r6, #0]
 800500e:	b30b      	cbz	r3, 8005054 <__sfp+0x68>
 8005010:	6836      	ldr	r6, [r6, #0]
 8005012:	e7f7      	b.n	8005004 <__sfp+0x18>
 8005014:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005018:	b9d5      	cbnz	r5, 8005050 <__sfp+0x64>
 800501a:	4b16      	ldr	r3, [pc, #88]	; (8005074 <__sfp+0x88>)
 800501c:	60e3      	str	r3, [r4, #12]
 800501e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005022:	6665      	str	r5, [r4, #100]	; 0x64
 8005024:	f000 f847 	bl	80050b6 <__retarget_lock_init_recursive>
 8005028:	f7ff ff96 	bl	8004f58 <__sfp_lock_release>
 800502c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005030:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005034:	6025      	str	r5, [r4, #0]
 8005036:	61a5      	str	r5, [r4, #24]
 8005038:	2208      	movs	r2, #8
 800503a:	4629      	mov	r1, r5
 800503c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005040:	f7ff fdac 	bl	8004b9c <memset>
 8005044:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005048:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800504c:	4620      	mov	r0, r4
 800504e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005050:	3468      	adds	r4, #104	; 0x68
 8005052:	e7d9      	b.n	8005008 <__sfp+0x1c>
 8005054:	2104      	movs	r1, #4
 8005056:	4638      	mov	r0, r7
 8005058:	f7ff ff62 	bl	8004f20 <__sfmoreglue>
 800505c:	4604      	mov	r4, r0
 800505e:	6030      	str	r0, [r6, #0]
 8005060:	2800      	cmp	r0, #0
 8005062:	d1d5      	bne.n	8005010 <__sfp+0x24>
 8005064:	f7ff ff78 	bl	8004f58 <__sfp_lock_release>
 8005068:	230c      	movs	r3, #12
 800506a:	603b      	str	r3, [r7, #0]
 800506c:	e7ee      	b.n	800504c <__sfp+0x60>
 800506e:	bf00      	nop
 8005070:	0800556c 	.word	0x0800556c
 8005074:	ffff0001 	.word	0xffff0001

08005078 <_fwalk_reent>:
 8005078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800507c:	4606      	mov	r6, r0
 800507e:	4688      	mov	r8, r1
 8005080:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005084:	2700      	movs	r7, #0
 8005086:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800508a:	f1b9 0901 	subs.w	r9, r9, #1
 800508e:	d505      	bpl.n	800509c <_fwalk_reent+0x24>
 8005090:	6824      	ldr	r4, [r4, #0]
 8005092:	2c00      	cmp	r4, #0
 8005094:	d1f7      	bne.n	8005086 <_fwalk_reent+0xe>
 8005096:	4638      	mov	r0, r7
 8005098:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800509c:	89ab      	ldrh	r3, [r5, #12]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d907      	bls.n	80050b2 <_fwalk_reent+0x3a>
 80050a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80050a6:	3301      	adds	r3, #1
 80050a8:	d003      	beq.n	80050b2 <_fwalk_reent+0x3a>
 80050aa:	4629      	mov	r1, r5
 80050ac:	4630      	mov	r0, r6
 80050ae:	47c0      	blx	r8
 80050b0:	4307      	orrs	r7, r0
 80050b2:	3568      	adds	r5, #104	; 0x68
 80050b4:	e7e9      	b.n	800508a <_fwalk_reent+0x12>

080050b6 <__retarget_lock_init_recursive>:
 80050b6:	4770      	bx	lr

080050b8 <__retarget_lock_acquire_recursive>:
 80050b8:	4770      	bx	lr

080050ba <__retarget_lock_release_recursive>:
 80050ba:	4770      	bx	lr

080050bc <__swhatbuf_r>:
 80050bc:	b570      	push	{r4, r5, r6, lr}
 80050be:	460e      	mov	r6, r1
 80050c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050c4:	2900      	cmp	r1, #0
 80050c6:	b096      	sub	sp, #88	; 0x58
 80050c8:	4614      	mov	r4, r2
 80050ca:	461d      	mov	r5, r3
 80050cc:	da08      	bge.n	80050e0 <__swhatbuf_r+0x24>
 80050ce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	602a      	str	r2, [r5, #0]
 80050d6:	061a      	lsls	r2, r3, #24
 80050d8:	d410      	bmi.n	80050fc <__swhatbuf_r+0x40>
 80050da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050de:	e00e      	b.n	80050fe <__swhatbuf_r+0x42>
 80050e0:	466a      	mov	r2, sp
 80050e2:	f000 f96f 	bl	80053c4 <_fstat_r>
 80050e6:	2800      	cmp	r0, #0
 80050e8:	dbf1      	blt.n	80050ce <__swhatbuf_r+0x12>
 80050ea:	9a01      	ldr	r2, [sp, #4]
 80050ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80050f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80050f4:	425a      	negs	r2, r3
 80050f6:	415a      	adcs	r2, r3
 80050f8:	602a      	str	r2, [r5, #0]
 80050fa:	e7ee      	b.n	80050da <__swhatbuf_r+0x1e>
 80050fc:	2340      	movs	r3, #64	; 0x40
 80050fe:	2000      	movs	r0, #0
 8005100:	6023      	str	r3, [r4, #0]
 8005102:	b016      	add	sp, #88	; 0x58
 8005104:	bd70      	pop	{r4, r5, r6, pc}
	...

08005108 <malloc>:
 8005108:	4b02      	ldr	r3, [pc, #8]	; (8005114 <malloc+0xc>)
 800510a:	4601      	mov	r1, r0
 800510c:	6818      	ldr	r0, [r3, #0]
 800510e:	f000 b86f 	b.w	80051f0 <_malloc_r>
 8005112:	bf00      	nop
 8005114:	20000010 	.word	0x20000010

08005118 <_free_r>:
 8005118:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800511a:	2900      	cmp	r1, #0
 800511c:	d044      	beq.n	80051a8 <_free_r+0x90>
 800511e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005122:	9001      	str	r0, [sp, #4]
 8005124:	2b00      	cmp	r3, #0
 8005126:	f1a1 0404 	sub.w	r4, r1, #4
 800512a:	bfb8      	it	lt
 800512c:	18e4      	addlt	r4, r4, r3
 800512e:	f000 f96d 	bl	800540c <__malloc_lock>
 8005132:	4a1e      	ldr	r2, [pc, #120]	; (80051ac <_free_r+0x94>)
 8005134:	9801      	ldr	r0, [sp, #4]
 8005136:	6813      	ldr	r3, [r2, #0]
 8005138:	b933      	cbnz	r3, 8005148 <_free_r+0x30>
 800513a:	6063      	str	r3, [r4, #4]
 800513c:	6014      	str	r4, [r2, #0]
 800513e:	b003      	add	sp, #12
 8005140:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005144:	f000 b968 	b.w	8005418 <__malloc_unlock>
 8005148:	42a3      	cmp	r3, r4
 800514a:	d908      	bls.n	800515e <_free_r+0x46>
 800514c:	6825      	ldr	r5, [r4, #0]
 800514e:	1961      	adds	r1, r4, r5
 8005150:	428b      	cmp	r3, r1
 8005152:	bf01      	itttt	eq
 8005154:	6819      	ldreq	r1, [r3, #0]
 8005156:	685b      	ldreq	r3, [r3, #4]
 8005158:	1949      	addeq	r1, r1, r5
 800515a:	6021      	streq	r1, [r4, #0]
 800515c:	e7ed      	b.n	800513a <_free_r+0x22>
 800515e:	461a      	mov	r2, r3
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	b10b      	cbz	r3, 8005168 <_free_r+0x50>
 8005164:	42a3      	cmp	r3, r4
 8005166:	d9fa      	bls.n	800515e <_free_r+0x46>
 8005168:	6811      	ldr	r1, [r2, #0]
 800516a:	1855      	adds	r5, r2, r1
 800516c:	42a5      	cmp	r5, r4
 800516e:	d10b      	bne.n	8005188 <_free_r+0x70>
 8005170:	6824      	ldr	r4, [r4, #0]
 8005172:	4421      	add	r1, r4
 8005174:	1854      	adds	r4, r2, r1
 8005176:	42a3      	cmp	r3, r4
 8005178:	6011      	str	r1, [r2, #0]
 800517a:	d1e0      	bne.n	800513e <_free_r+0x26>
 800517c:	681c      	ldr	r4, [r3, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	6053      	str	r3, [r2, #4]
 8005182:	4421      	add	r1, r4
 8005184:	6011      	str	r1, [r2, #0]
 8005186:	e7da      	b.n	800513e <_free_r+0x26>
 8005188:	d902      	bls.n	8005190 <_free_r+0x78>
 800518a:	230c      	movs	r3, #12
 800518c:	6003      	str	r3, [r0, #0]
 800518e:	e7d6      	b.n	800513e <_free_r+0x26>
 8005190:	6825      	ldr	r5, [r4, #0]
 8005192:	1961      	adds	r1, r4, r5
 8005194:	428b      	cmp	r3, r1
 8005196:	bf04      	itt	eq
 8005198:	6819      	ldreq	r1, [r3, #0]
 800519a:	685b      	ldreq	r3, [r3, #4]
 800519c:	6063      	str	r3, [r4, #4]
 800519e:	bf04      	itt	eq
 80051a0:	1949      	addeq	r1, r1, r5
 80051a2:	6021      	streq	r1, [r4, #0]
 80051a4:	6054      	str	r4, [r2, #4]
 80051a6:	e7ca      	b.n	800513e <_free_r+0x26>
 80051a8:	b003      	add	sp, #12
 80051aa:	bd30      	pop	{r4, r5, pc}
 80051ac:	20004b74 	.word	0x20004b74

080051b0 <sbrk_aligned>:
 80051b0:	b570      	push	{r4, r5, r6, lr}
 80051b2:	4e0e      	ldr	r6, [pc, #56]	; (80051ec <sbrk_aligned+0x3c>)
 80051b4:	460c      	mov	r4, r1
 80051b6:	6831      	ldr	r1, [r6, #0]
 80051b8:	4605      	mov	r5, r0
 80051ba:	b911      	cbnz	r1, 80051c2 <sbrk_aligned+0x12>
 80051bc:	f000 f88c 	bl	80052d8 <_sbrk_r>
 80051c0:	6030      	str	r0, [r6, #0]
 80051c2:	4621      	mov	r1, r4
 80051c4:	4628      	mov	r0, r5
 80051c6:	f000 f887 	bl	80052d8 <_sbrk_r>
 80051ca:	1c43      	adds	r3, r0, #1
 80051cc:	d00a      	beq.n	80051e4 <sbrk_aligned+0x34>
 80051ce:	1cc4      	adds	r4, r0, #3
 80051d0:	f024 0403 	bic.w	r4, r4, #3
 80051d4:	42a0      	cmp	r0, r4
 80051d6:	d007      	beq.n	80051e8 <sbrk_aligned+0x38>
 80051d8:	1a21      	subs	r1, r4, r0
 80051da:	4628      	mov	r0, r5
 80051dc:	f000 f87c 	bl	80052d8 <_sbrk_r>
 80051e0:	3001      	adds	r0, #1
 80051e2:	d101      	bne.n	80051e8 <sbrk_aligned+0x38>
 80051e4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80051e8:	4620      	mov	r0, r4
 80051ea:	bd70      	pop	{r4, r5, r6, pc}
 80051ec:	20004b78 	.word	0x20004b78

080051f0 <_malloc_r>:
 80051f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051f4:	1ccd      	adds	r5, r1, #3
 80051f6:	f025 0503 	bic.w	r5, r5, #3
 80051fa:	3508      	adds	r5, #8
 80051fc:	2d0c      	cmp	r5, #12
 80051fe:	bf38      	it	cc
 8005200:	250c      	movcc	r5, #12
 8005202:	2d00      	cmp	r5, #0
 8005204:	4607      	mov	r7, r0
 8005206:	db01      	blt.n	800520c <_malloc_r+0x1c>
 8005208:	42a9      	cmp	r1, r5
 800520a:	d905      	bls.n	8005218 <_malloc_r+0x28>
 800520c:	230c      	movs	r3, #12
 800520e:	603b      	str	r3, [r7, #0]
 8005210:	2600      	movs	r6, #0
 8005212:	4630      	mov	r0, r6
 8005214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005218:	4e2e      	ldr	r6, [pc, #184]	; (80052d4 <_malloc_r+0xe4>)
 800521a:	f000 f8f7 	bl	800540c <__malloc_lock>
 800521e:	6833      	ldr	r3, [r6, #0]
 8005220:	461c      	mov	r4, r3
 8005222:	bb34      	cbnz	r4, 8005272 <_malloc_r+0x82>
 8005224:	4629      	mov	r1, r5
 8005226:	4638      	mov	r0, r7
 8005228:	f7ff ffc2 	bl	80051b0 <sbrk_aligned>
 800522c:	1c43      	adds	r3, r0, #1
 800522e:	4604      	mov	r4, r0
 8005230:	d14d      	bne.n	80052ce <_malloc_r+0xde>
 8005232:	6834      	ldr	r4, [r6, #0]
 8005234:	4626      	mov	r6, r4
 8005236:	2e00      	cmp	r6, #0
 8005238:	d140      	bne.n	80052bc <_malloc_r+0xcc>
 800523a:	6823      	ldr	r3, [r4, #0]
 800523c:	4631      	mov	r1, r6
 800523e:	4638      	mov	r0, r7
 8005240:	eb04 0803 	add.w	r8, r4, r3
 8005244:	f000 f848 	bl	80052d8 <_sbrk_r>
 8005248:	4580      	cmp	r8, r0
 800524a:	d13a      	bne.n	80052c2 <_malloc_r+0xd2>
 800524c:	6821      	ldr	r1, [r4, #0]
 800524e:	3503      	adds	r5, #3
 8005250:	1a6d      	subs	r5, r5, r1
 8005252:	f025 0503 	bic.w	r5, r5, #3
 8005256:	3508      	adds	r5, #8
 8005258:	2d0c      	cmp	r5, #12
 800525a:	bf38      	it	cc
 800525c:	250c      	movcc	r5, #12
 800525e:	4629      	mov	r1, r5
 8005260:	4638      	mov	r0, r7
 8005262:	f7ff ffa5 	bl	80051b0 <sbrk_aligned>
 8005266:	3001      	adds	r0, #1
 8005268:	d02b      	beq.n	80052c2 <_malloc_r+0xd2>
 800526a:	6823      	ldr	r3, [r4, #0]
 800526c:	442b      	add	r3, r5
 800526e:	6023      	str	r3, [r4, #0]
 8005270:	e00e      	b.n	8005290 <_malloc_r+0xa0>
 8005272:	6822      	ldr	r2, [r4, #0]
 8005274:	1b52      	subs	r2, r2, r5
 8005276:	d41e      	bmi.n	80052b6 <_malloc_r+0xc6>
 8005278:	2a0b      	cmp	r2, #11
 800527a:	d916      	bls.n	80052aa <_malloc_r+0xba>
 800527c:	1961      	adds	r1, r4, r5
 800527e:	42a3      	cmp	r3, r4
 8005280:	6025      	str	r5, [r4, #0]
 8005282:	bf18      	it	ne
 8005284:	6059      	strne	r1, [r3, #4]
 8005286:	6863      	ldr	r3, [r4, #4]
 8005288:	bf08      	it	eq
 800528a:	6031      	streq	r1, [r6, #0]
 800528c:	5162      	str	r2, [r4, r5]
 800528e:	604b      	str	r3, [r1, #4]
 8005290:	4638      	mov	r0, r7
 8005292:	f104 060b 	add.w	r6, r4, #11
 8005296:	f000 f8bf 	bl	8005418 <__malloc_unlock>
 800529a:	f026 0607 	bic.w	r6, r6, #7
 800529e:	1d23      	adds	r3, r4, #4
 80052a0:	1af2      	subs	r2, r6, r3
 80052a2:	d0b6      	beq.n	8005212 <_malloc_r+0x22>
 80052a4:	1b9b      	subs	r3, r3, r6
 80052a6:	50a3      	str	r3, [r4, r2]
 80052a8:	e7b3      	b.n	8005212 <_malloc_r+0x22>
 80052aa:	6862      	ldr	r2, [r4, #4]
 80052ac:	42a3      	cmp	r3, r4
 80052ae:	bf0c      	ite	eq
 80052b0:	6032      	streq	r2, [r6, #0]
 80052b2:	605a      	strne	r2, [r3, #4]
 80052b4:	e7ec      	b.n	8005290 <_malloc_r+0xa0>
 80052b6:	4623      	mov	r3, r4
 80052b8:	6864      	ldr	r4, [r4, #4]
 80052ba:	e7b2      	b.n	8005222 <_malloc_r+0x32>
 80052bc:	4634      	mov	r4, r6
 80052be:	6876      	ldr	r6, [r6, #4]
 80052c0:	e7b9      	b.n	8005236 <_malloc_r+0x46>
 80052c2:	230c      	movs	r3, #12
 80052c4:	603b      	str	r3, [r7, #0]
 80052c6:	4638      	mov	r0, r7
 80052c8:	f000 f8a6 	bl	8005418 <__malloc_unlock>
 80052cc:	e7a1      	b.n	8005212 <_malloc_r+0x22>
 80052ce:	6025      	str	r5, [r4, #0]
 80052d0:	e7de      	b.n	8005290 <_malloc_r+0xa0>
 80052d2:	bf00      	nop
 80052d4:	20004b74 	.word	0x20004b74

080052d8 <_sbrk_r>:
 80052d8:	b538      	push	{r3, r4, r5, lr}
 80052da:	4d06      	ldr	r5, [pc, #24]	; (80052f4 <_sbrk_r+0x1c>)
 80052dc:	2300      	movs	r3, #0
 80052de:	4604      	mov	r4, r0
 80052e0:	4608      	mov	r0, r1
 80052e2:	602b      	str	r3, [r5, #0]
 80052e4:	f000 f8b8 	bl	8005458 <_sbrk>
 80052e8:	1c43      	adds	r3, r0, #1
 80052ea:	d102      	bne.n	80052f2 <_sbrk_r+0x1a>
 80052ec:	682b      	ldr	r3, [r5, #0]
 80052ee:	b103      	cbz	r3, 80052f2 <_sbrk_r+0x1a>
 80052f0:	6023      	str	r3, [r4, #0]
 80052f2:	bd38      	pop	{r3, r4, r5, pc}
 80052f4:	20004b7c 	.word	0x20004b7c

080052f8 <__sread>:
 80052f8:	b510      	push	{r4, lr}
 80052fa:	460c      	mov	r4, r1
 80052fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005300:	f000 f890 	bl	8005424 <_read_r>
 8005304:	2800      	cmp	r0, #0
 8005306:	bfab      	itete	ge
 8005308:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800530a:	89a3      	ldrhlt	r3, [r4, #12]
 800530c:	181b      	addge	r3, r3, r0
 800530e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005312:	bfac      	ite	ge
 8005314:	6563      	strge	r3, [r4, #84]	; 0x54
 8005316:	81a3      	strhlt	r3, [r4, #12]
 8005318:	bd10      	pop	{r4, pc}

0800531a <__swrite>:
 800531a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800531e:	461f      	mov	r7, r3
 8005320:	898b      	ldrh	r3, [r1, #12]
 8005322:	05db      	lsls	r3, r3, #23
 8005324:	4605      	mov	r5, r0
 8005326:	460c      	mov	r4, r1
 8005328:	4616      	mov	r6, r2
 800532a:	d505      	bpl.n	8005338 <__swrite+0x1e>
 800532c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005330:	2302      	movs	r3, #2
 8005332:	2200      	movs	r2, #0
 8005334:	f000 f858 	bl	80053e8 <_lseek_r>
 8005338:	89a3      	ldrh	r3, [r4, #12]
 800533a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800533e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005342:	81a3      	strh	r3, [r4, #12]
 8005344:	4632      	mov	r2, r6
 8005346:	463b      	mov	r3, r7
 8005348:	4628      	mov	r0, r5
 800534a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800534e:	f000 b817 	b.w	8005380 <_write_r>

08005352 <__sseek>:
 8005352:	b510      	push	{r4, lr}
 8005354:	460c      	mov	r4, r1
 8005356:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800535a:	f000 f845 	bl	80053e8 <_lseek_r>
 800535e:	1c43      	adds	r3, r0, #1
 8005360:	89a3      	ldrh	r3, [r4, #12]
 8005362:	bf15      	itete	ne
 8005364:	6560      	strne	r0, [r4, #84]	; 0x54
 8005366:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800536a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800536e:	81a3      	strheq	r3, [r4, #12]
 8005370:	bf18      	it	ne
 8005372:	81a3      	strhne	r3, [r4, #12]
 8005374:	bd10      	pop	{r4, pc}

08005376 <__sclose>:
 8005376:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800537a:	f000 b813 	b.w	80053a4 <_close_r>
	...

08005380 <_write_r>:
 8005380:	b538      	push	{r3, r4, r5, lr}
 8005382:	4d07      	ldr	r5, [pc, #28]	; (80053a0 <_write_r+0x20>)
 8005384:	4604      	mov	r4, r0
 8005386:	4608      	mov	r0, r1
 8005388:	4611      	mov	r1, r2
 800538a:	2200      	movs	r2, #0
 800538c:	602a      	str	r2, [r5, #0]
 800538e:	461a      	mov	r2, r3
 8005390:	f7fd fb2c 	bl	80029ec <_write>
 8005394:	1c43      	adds	r3, r0, #1
 8005396:	d102      	bne.n	800539e <_write_r+0x1e>
 8005398:	682b      	ldr	r3, [r5, #0]
 800539a:	b103      	cbz	r3, 800539e <_write_r+0x1e>
 800539c:	6023      	str	r3, [r4, #0]
 800539e:	bd38      	pop	{r3, r4, r5, pc}
 80053a0:	20004b7c 	.word	0x20004b7c

080053a4 <_close_r>:
 80053a4:	b538      	push	{r3, r4, r5, lr}
 80053a6:	4d06      	ldr	r5, [pc, #24]	; (80053c0 <_close_r+0x1c>)
 80053a8:	2300      	movs	r3, #0
 80053aa:	4604      	mov	r4, r0
 80053ac:	4608      	mov	r0, r1
 80053ae:	602b      	str	r3, [r5, #0]
 80053b0:	f000 f84a 	bl	8005448 <_close>
 80053b4:	1c43      	adds	r3, r0, #1
 80053b6:	d102      	bne.n	80053be <_close_r+0x1a>
 80053b8:	682b      	ldr	r3, [r5, #0]
 80053ba:	b103      	cbz	r3, 80053be <_close_r+0x1a>
 80053bc:	6023      	str	r3, [r4, #0]
 80053be:	bd38      	pop	{r3, r4, r5, pc}
 80053c0:	20004b7c 	.word	0x20004b7c

080053c4 <_fstat_r>:
 80053c4:	b538      	push	{r3, r4, r5, lr}
 80053c6:	4d07      	ldr	r5, [pc, #28]	; (80053e4 <_fstat_r+0x20>)
 80053c8:	2300      	movs	r3, #0
 80053ca:	4604      	mov	r4, r0
 80053cc:	4608      	mov	r0, r1
 80053ce:	4611      	mov	r1, r2
 80053d0:	602b      	str	r3, [r5, #0]
 80053d2:	f7fd fb24 	bl	8002a1e <_fstat>
 80053d6:	1c43      	adds	r3, r0, #1
 80053d8:	d102      	bne.n	80053e0 <_fstat_r+0x1c>
 80053da:	682b      	ldr	r3, [r5, #0]
 80053dc:	b103      	cbz	r3, 80053e0 <_fstat_r+0x1c>
 80053de:	6023      	str	r3, [r4, #0]
 80053e0:	bd38      	pop	{r3, r4, r5, pc}
 80053e2:	bf00      	nop
 80053e4:	20004b7c 	.word	0x20004b7c

080053e8 <_lseek_r>:
 80053e8:	b538      	push	{r3, r4, r5, lr}
 80053ea:	4d07      	ldr	r5, [pc, #28]	; (8005408 <_lseek_r+0x20>)
 80053ec:	4604      	mov	r4, r0
 80053ee:	4608      	mov	r0, r1
 80053f0:	4611      	mov	r1, r2
 80053f2:	2200      	movs	r2, #0
 80053f4:	602a      	str	r2, [r5, #0]
 80053f6:	461a      	mov	r2, r3
 80053f8:	f7fd fb10 	bl	8002a1c <_lseek>
 80053fc:	1c43      	adds	r3, r0, #1
 80053fe:	d102      	bne.n	8005406 <_lseek_r+0x1e>
 8005400:	682b      	ldr	r3, [r5, #0]
 8005402:	b103      	cbz	r3, 8005406 <_lseek_r+0x1e>
 8005404:	6023      	str	r3, [r4, #0]
 8005406:	bd38      	pop	{r3, r4, r5, pc}
 8005408:	20004b7c 	.word	0x20004b7c

0800540c <__malloc_lock>:
 800540c:	4801      	ldr	r0, [pc, #4]	; (8005414 <__malloc_lock+0x8>)
 800540e:	f7ff be53 	b.w	80050b8 <__retarget_lock_acquire_recursive>
 8005412:	bf00      	nop
 8005414:	20004b70 	.word	0x20004b70

08005418 <__malloc_unlock>:
 8005418:	4801      	ldr	r0, [pc, #4]	; (8005420 <__malloc_unlock+0x8>)
 800541a:	f7ff be4e 	b.w	80050ba <__retarget_lock_release_recursive>
 800541e:	bf00      	nop
 8005420:	20004b70 	.word	0x20004b70

08005424 <_read_r>:
 8005424:	b538      	push	{r3, r4, r5, lr}
 8005426:	4d07      	ldr	r5, [pc, #28]	; (8005444 <_read_r+0x20>)
 8005428:	4604      	mov	r4, r0
 800542a:	4608      	mov	r0, r1
 800542c:	4611      	mov	r1, r2
 800542e:	2200      	movs	r2, #0
 8005430:	602a      	str	r2, [r5, #0]
 8005432:	461a      	mov	r2, r3
 8005434:	f7fd fae4 	bl	8002a00 <_read>
 8005438:	1c43      	adds	r3, r0, #1
 800543a:	d102      	bne.n	8005442 <_read_r+0x1e>
 800543c:	682b      	ldr	r3, [r5, #0]
 800543e:	b103      	cbz	r3, 8005442 <_read_r+0x1e>
 8005440:	6023      	str	r3, [r4, #0]
 8005442:	bd38      	pop	{r3, r4, r5, pc}
 8005444:	20004b7c 	.word	0x20004b7c

08005448 <_close>:
 8005448:	4b02      	ldr	r3, [pc, #8]	; (8005454 <_close+0xc>)
 800544a:	2258      	movs	r2, #88	; 0x58
 800544c:	601a      	str	r2, [r3, #0]
 800544e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005452:	4770      	bx	lr
 8005454:	20004b7c 	.word	0x20004b7c

08005458 <_sbrk>:
 8005458:	4a04      	ldr	r2, [pc, #16]	; (800546c <_sbrk+0x14>)
 800545a:	6811      	ldr	r1, [r2, #0]
 800545c:	4603      	mov	r3, r0
 800545e:	b909      	cbnz	r1, 8005464 <_sbrk+0xc>
 8005460:	4903      	ldr	r1, [pc, #12]	; (8005470 <_sbrk+0x18>)
 8005462:	6011      	str	r1, [r2, #0]
 8005464:	6810      	ldr	r0, [r2, #0]
 8005466:	4403      	add	r3, r0
 8005468:	6013      	str	r3, [r2, #0]
 800546a:	4770      	bx	lr
 800546c:	20004b80 	.word	0x20004b80
 8005470:	20004b88 	.word	0x20004b88

08005474 <_init>:
 8005474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005476:	bf00      	nop
 8005478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800547a:	bc08      	pop	{r3}
 800547c:	469e      	mov	lr, r3
 800547e:	4770      	bx	lr

08005480 <_fini>:
 8005480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005482:	bf00      	nop
 8005484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005486:	bc08      	pop	{r3}
 8005488:	469e      	mov	lr, r3
 800548a:	4770      	bx	lr
