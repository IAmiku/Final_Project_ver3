
Final_Project_ver3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000947c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d70  08009680  08009680  00019680  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b3f0  0800b3f0  00020110  2**0
                  CONTENTS
  4 .ARM          00000008  0800b3f0  0800b3f0  0001b3f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b3f8  0800b3f8  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b3f8  0800b3f8  0001b3f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b3fc  0800b3fc  0001b3fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  0800b400  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005204  20000110  0800b510  00020110  2**3
                  ALLOC
 10 ._user_heap_stack 00000404  20005314  0800b510  00025314  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002013e  2**0
                  CONTENTS, READONLY
 13 .debug_info   00035c81  00000000  00000000  00020181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005a3e  00000000  00000000  00055e02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00018aeb  00000000  00000000  0005b840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002138  00000000  00000000  00074330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001a58  00000000  00000000  00076468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00033b2c  00000000  00000000  00077ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00037ea3  00000000  00000000  000ab9ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00139358  00000000  00000000  000e388f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006c64  00000000  00000000  0021cbe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  0022384c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000110 	.word	0x20000110
 800021c:	00000000 	.word	0x00000000
 8000220:	08009664 	.word	0x08009664

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000114 	.word	0x20000114
 800023c:	08009664 	.word	0x08009664

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <NT35510_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t NT35510_Init(uint32_t ColorCoding, uint32_t orientation)
{
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	b0b1      	sub	sp, #196	; 0xc4
 80005f0:	4604      	mov	r4, r0
 80005f2:	460d      	mov	r5, r1
  NT35510_IO_Delay(120);
 80005f4:	2078      	movs	r0, #120	; 0x78
 80005f6:	f000 f971 	bl	80008dc <NT35510_IO_Delay>

/* ************************************************************************** */
/* Proprietary Initialization                                                 */
/* ************************************************************************** */
  const uint8_t nt35510_reg[]   = {0x55, 0xAA, 0x52, 0x08, 0x01, 0xF0};
 80005fa:	4ba9      	ldr	r3, [pc, #676]	; (80008a0 <NT35510_Init+0x2b4>)
 80005fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000600:	902e      	str	r0, [sp, #184]	; 0xb8
 8000602:	f8ad 10bc 	strh.w	r1, [sp, #188]	; 0xbc
  const uint8_t nt35510_reg1[]  = {0x03, 0x03, 0x03, 0xB0};
 8000606:	4ba7      	ldr	r3, [pc, #668]	; (80008a4 <NT35510_Init+0x2b8>)
 8000608:	932d      	str	r3, [sp, #180]	; 0xb4
  const uint8_t nt35510_reg2[]  = {0x46, 0x46, 0x46, 0xB6};
 800060a:	4ba7      	ldr	r3, [pc, #668]	; (80008a8 <NT35510_Init+0x2bc>)
 800060c:	932c      	str	r3, [sp, #176]	; 0xb0
  const uint8_t nt35510_reg3[]  = {0x03, 0x03, 0x03, 0xB1};
 800060e:	4ba7      	ldr	r3, [pc, #668]	; (80008ac <NT35510_Init+0x2c0>)
 8000610:	932b      	str	r3, [sp, #172]	; 0xac
  const uint8_t nt35510_reg4[]  = {0x36, 0x36, 0x36, 0xB7};
 8000612:	4ba7      	ldr	r3, [pc, #668]	; (80008b0 <NT35510_Init+0x2c4>)
 8000614:	932a      	str	r3, [sp, #168]	; 0xa8
  const uint8_t nt35510_reg5[]  = {0x00, 0x00, 0x02, 0xB2};
 8000616:	4ba7      	ldr	r3, [pc, #668]	; (80008b4 <NT35510_Init+0x2c8>)
 8000618:	9329      	str	r3, [sp, #164]	; 0xa4
  const uint8_t nt35510_reg6[]  = {0x26, 0x26, 0x26, 0xB8};
 800061a:	4ba7      	ldr	r3, [pc, #668]	; (80008b8 <NT35510_Init+0x2cc>)
 800061c:	9328      	str	r3, [sp, #160]	; 0xa0
  const uint8_t nt35510_reg7[]  = {0xBF, 0x01};
 800061e:	f240 13bf 	movw	r3, #447	; 0x1bf
 8000622:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
  const uint8_t nt35510_reg8[]  = {0x09, 0x09, 0x09, 0xB3};
 8000626:	4ba5      	ldr	r3, [pc, #660]	; (80008bc <NT35510_Init+0x2d0>)
 8000628:	9326      	str	r3, [sp, #152]	; 0x98
  const uint8_t nt35510_reg9[]  = {0x36, 0x36, 0x36, 0xB9};
 800062a:	4ba5      	ldr	r3, [pc, #660]	; (80008c0 <NT35510_Init+0x2d4>)
 800062c:	9325      	str	r3, [sp, #148]	; 0x94
  const uint8_t nt35510_reg10[] = {0x08, 0x08, 0x08, 0xB5};
 800062e:	4ba5      	ldr	r3, [pc, #660]	; (80008c4 <NT35510_Init+0x2d8>)
 8000630:	9324      	str	r3, [sp, #144]	; 0x90
  const uint8_t nt35510_reg12[] = {0x26, 0x26, 0x26, 0xBA};
 8000632:	4ba5      	ldr	r3, [pc, #660]	; (80008c8 <NT35510_Init+0x2dc>)
 8000634:	9323      	str	r3, [sp, #140]	; 0x8c
  const uint8_t nt35510_reg13[] = {0x00, 0x80, 0x00, 0xBC};
 8000636:	4ba5      	ldr	r3, [pc, #660]	; (80008cc <NT35510_Init+0x2e0>)
 8000638:	9322      	str	r3, [sp, #136]	; 0x88
  const uint8_t nt35510_reg14[] = {0x00, 0x80, 0x00, 0xBD};
 800063a:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 800063e:	9321      	str	r3, [sp, #132]	; 0x84
  const uint8_t nt35510_reg15[] = {0x00, 0x50, 0xBE};
 8000640:	4ba3      	ldr	r3, [pc, #652]	; (80008d0 <NT35510_Init+0x2e4>)
 8000642:	461a      	mov	r2, r3
 8000644:	f852 1b04 	ldr.w	r1, [r2], #4
 8000648:	f8ad 1080 	strh.w	r1, [sp, #128]	; 0x80
 800064c:	0c09      	lsrs	r1, r1, #16
 800064e:	f88d 1082 	strb.w	r1, [sp, #130]	; 0x82
  const uint8_t nt35510_reg16[] = {0x55, 0xAA, 0x52, 0x08, 0x00, 0xF0};
 8000652:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000656:	901e      	str	r0, [sp, #120]	; 0x78
 8000658:	f8ad 107c 	strh.w	r1, [sp, #124]	; 0x7c
  const uint8_t nt35510_reg17[] = {0xFC, 0x00, 0xB1};
 800065c:	68da      	ldr	r2, [r3, #12]
 800065e:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
 8000662:	0c12      	lsrs	r2, r2, #16
 8000664:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
  const uint8_t nt35510_reg18[] = {0xB6, 0x03};
 8000668:	f240 32b6 	movw	r2, #950	; 0x3b6
 800066c:	f8ad 2070 	strh.w	r2, [sp, #112]	; 0x70
  const uint8_t nt35510_reg19[] = {0xB5, 0x51};
 8000670:	f245 12b5 	movw	r2, #20917	; 0x51b5
 8000674:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
  const uint8_t nt35510_reg20[] = {0x00, 0x00, 0xB7};
 8000678:	691a      	ldr	r2, [r3, #16]
 800067a:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
 800067e:	0c12      	lsrs	r2, r2, #16
 8000680:	f88d 206a 	strb.w	r2, [sp, #106]	; 0x6a
  const uint8_t nt35510_reg21[] = {0x01, 0x02, 0x02, 0x02, 0xB8};
 8000684:	4a93      	ldr	r2, [pc, #588]	; (80008d4 <NT35510_Init+0x2e8>)
 8000686:	e892 0003 	ldmia.w	r2, {r0, r1}
 800068a:	9018      	str	r0, [sp, #96]	; 0x60
 800068c:	f88d 1064 	strb.w	r1, [sp, #100]	; 0x64
  const uint8_t nt35510_reg22[] = {0x00, 0x00, 0x00, 0xBC};
 8000690:	f04f 423c 	mov.w	r2, #3154116608	; 0xbc000000
 8000694:	9217      	str	r2, [sp, #92]	; 0x5c
  const uint8_t nt35510_reg23[] = {0x03, 0x00, 0x00, 0xCC};
 8000696:	4a90      	ldr	r2, [pc, #576]	; (80008d8 <NT35510_Init+0x2ec>)
 8000698:	9216      	str	r2, [sp, #88]	; 0x58
  const uint8_t nt35510_reg24[] = {0xBA, 0x01};
 800069a:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
 800069e:	f8ad 2054 	strh.w	r2, [sp, #84]	; 0x54
  const uint8_t nt35510_madctl_portrait[] = {NT35510_CMD_MADCTL ,0x00};
 80006a2:	2236      	movs	r2, #54	; 0x36
 80006a4:	f8ad 2050 	strh.w	r2, [sp, #80]	; 0x50
  const uint8_t nt35510_caset_portrait[] = {0x00, 0x00, 0x01, 0xDF ,NT35510_CMD_CASET};
 80006a8:	f103 0214 	add.w	r2, r3, #20
 80006ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006b0:	9012      	str	r0, [sp, #72]	; 0x48
 80006b2:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
  const uint8_t nt35510_raset_portrait[] = {0x00, 0x00, 0x03, 0x1F ,NT35510_CMD_RASET};
 80006b6:	f103 021c 	add.w	r2, r3, #28
 80006ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006be:	9010      	str	r0, [sp, #64]	; 0x40
 80006c0:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
  const uint8_t nt35510_madctl_landscape[] = {NT35510_CMD_MADCTL, 0x60};
 80006c4:	f246 0236 	movw	r2, #24630	; 0x6036
 80006c8:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
  const uint8_t nt35510_caset_landscape[] = {0x00, 0x00, 0x03, 0x1F ,NT35510_CMD_CASET};
 80006cc:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80006d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006d4:	900d      	str	r0, [sp, #52]	; 0x34
 80006d6:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  const uint8_t nt35510_raset_landscape[] = {0x00, 0x00, 0x01, 0xDF ,NT35510_CMD_RASET};
 80006da:	332c      	adds	r3, #44	; 0x2c
 80006dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006e0:	900b      	str	r0, [sp, #44]	; 0x2c
 80006e2:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
  const uint8_t nt35510_reg26[] = {NT35510_CMD_TEEON, 0x00};  /* Tear on */
 80006e6:	2335      	movs	r3, #53	; 0x35
 80006e8:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
  const uint8_t nt35510_reg27[] = {NT35510_CMD_SLPOUT, 0x00}; /* Sleep out */
 80006ec:	2311      	movs	r3, #17
 80006ee:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  const uint8_t nt35510_reg30[] = {NT35510_CMD_DISPON, 0x00};
 80006f2:	2329      	movs	r3, #41	; 0x29
 80006f4:	f8ad 3020 	strh.w	r3, [sp, #32]

  const uint8_t nt35510_reg31[] = {NT35510_CMD_WRDISBV, 0x7F};
 80006f8:	f647 7351 	movw	r3, #32593	; 0x7f51
 80006fc:	f8ad 301c 	strh.w	r3, [sp, #28]
  const uint8_t nt35510_reg32[] = {NT35510_CMD_WRCTRLD, 0x2C};
 8000700:	f642 4353 	movw	r3, #11347	; 0x2c53
 8000704:	f8ad 3018 	strh.w	r3, [sp, #24]
  const uint8_t nt35510_reg33[] = {NT35510_CMD_WRCABC, 0x02};
 8000708:	f240 2355 	movw	r3, #597	; 0x255
 800070c:	f8ad 3014 	strh.w	r3, [sp, #20]
  const uint8_t nt35510_reg34[] = {NT35510_CMD_WRCABCMB, 0xFF};
 8000710:	f64f 735e 	movw	r3, #65374	; 0xff5e
 8000714:	f8ad 3010 	strh.w	r3, [sp, #16]
  const uint8_t nt35510_reg35[] = {NT35510_CMD_RAMWR, 0x00};
 8000718:	232c      	movs	r3, #44	; 0x2c
 800071a:	f8ad 300c 	strh.w	r3, [sp, #12]
  const uint8_t nt35510_reg36[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB565};
 800071e:	f245 533a 	movw	r3, #21818	; 0x553a
 8000722:	f8ad 3008 	strh.w	r3, [sp, #8]
  const uint8_t nt35510_reg37[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB888};
 8000726:	f247 733a 	movw	r3, #30522	; 0x773a
 800072a:	f8ad 3004 	strh.w	r3, [sp, #4]

  DSI_IO_WriteCmd(5, (uint8_t *)nt35510_reg); /* LV2:  Page 1 enable */
 800072e:	a92e      	add	r1, sp, #184	; 0xb8
 8000730:	2005      	movs	r0, #5
 8000732:	f000 f9db 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg1);/* AVDD: 5.2V */
 8000736:	a92d      	add	r1, sp, #180	; 0xb4
 8000738:	2003      	movs	r0, #3
 800073a:	f000 f9d7 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg2);/* AVDD: Ratio */
 800073e:	a92c      	add	r1, sp, #176	; 0xb0
 8000740:	2003      	movs	r0, #3
 8000742:	f000 f9d3 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg3);/* AVEE: -5.2V */
 8000746:	a92b      	add	r1, sp, #172	; 0xac
 8000748:	2003      	movs	r0, #3
 800074a:	f000 f9cf 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg4);/* AVEE: Ratio */
 800074e:	a92a      	add	r1, sp, #168	; 0xa8
 8000750:	2003      	movs	r0, #3
 8000752:	f000 f9cb 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg5);/* VCL: -2.5V */
 8000756:	a929      	add	r1, sp, #164	; 0xa4
 8000758:	2003      	movs	r0, #3
 800075a:	f000 f9c7 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg6);/* VCL: Ratio */
 800075e:	a928      	add	r1, sp, #160	; 0xa0
 8000760:	2003      	movs	r0, #3
 8000762:	f000 f9c3 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg7);/* VGH: 15V (Free Pump) */
 8000766:	a927      	add	r1, sp, #156	; 0x9c
 8000768:	2001      	movs	r0, #1
 800076a:	f000 f9bf 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg8);
 800076e:	a926      	add	r1, sp, #152	; 0x98
 8000770:	2003      	movs	r0, #3
 8000772:	f000 f9bb 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg9);/* VGH: Ratio */
 8000776:	a925      	add	r1, sp, #148	; 0x94
 8000778:	2003      	movs	r0, #3
 800077a:	f000 f9b7 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg10);/* VGL_REG: -10V */
 800077e:	a924      	add	r1, sp, #144	; 0x90
 8000780:	2003      	movs	r0, #3
 8000782:	f000 f9b3 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg12);/* VGLX: Ratio */
 8000786:	a923      	add	r1, sp, #140	; 0x8c
 8000788:	2003      	movs	r0, #3
 800078a:	f000 f9af 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg13);/* VGMP/VGSP: 4.5V/0V */
 800078e:	a922      	add	r1, sp, #136	; 0x88
 8000790:	2003      	movs	r0, #3
 8000792:	f000 f9ab 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg14);/* VGMN/VGSN:-4.5V/0V */
 8000796:	a921      	add	r1, sp, #132	; 0x84
 8000798:	2003      	movs	r0, #3
 800079a:	f000 f9a7 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg15);/* VCOM: -1.325V */
 800079e:	a920      	add	r1, sp, #128	; 0x80
 80007a0:	2002      	movs	r0, #2
 80007a2:	f000 f9a3 	bl	8000aec <DSI_IO_WriteCmd>

/* ************************************************************************** */
/* Proprietary DCS Initialization                                             */
/* ************************************************************************** */
  DSI_IO_WriteCmd(5, (uint8_t *)nt35510_reg16);/* LV2: Page 0 enable */
 80007a6:	a91e      	add	r1, sp, #120	; 0x78
 80007a8:	2005      	movs	r0, #5
 80007aa:	f000 f99f 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg17);/* Display control */
 80007ae:	a91d      	add	r1, sp, #116	; 0x74
 80007b0:	2002      	movs	r0, #2
 80007b2:	f000 f99b 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg18);/* Src hold time */
 80007b6:	a91c      	add	r1, sp, #112	; 0x70
 80007b8:	2001      	movs	r0, #1
 80007ba:	f000 f997 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg19);
 80007be:	a91b      	add	r1, sp, #108	; 0x6c
 80007c0:	2001      	movs	r0, #1
 80007c2:	f000 f993 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg20);/* Gate EQ control */
 80007c6:	a91a      	add	r1, sp, #104	; 0x68
 80007c8:	2002      	movs	r0, #2
 80007ca:	f000 f98f 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(4, (uint8_t *)nt35510_reg21);/* Src EQ control(Mode2) */
 80007ce:	a918      	add	r1, sp, #96	; 0x60
 80007d0:	2004      	movs	r0, #4
 80007d2:	f000 f98b 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg22);/* Inv. mode(2-dot) */
 80007d6:	a917      	add	r1, sp, #92	; 0x5c
 80007d8:	2003      	movs	r0, #3
 80007da:	f000 f987 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg23);
 80007de:	a916      	add	r1, sp, #88	; 0x58
 80007e0:	2003      	movs	r0, #3
 80007e2:	f000 f983 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg24);
 80007e6:	a915      	add	r1, sp, #84	; 0x54
 80007e8:	2001      	movs	r0, #1
 80007ea:	f000 f97f 	bl	8000aec <DSI_IO_WriteCmd>
  /* Tear on */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg26);
 80007ee:	a90a      	add	r1, sp, #40	; 0x28
 80007f0:	2000      	movs	r0, #0
 80007f2:	f000 f97b 	bl	8000aec <DSI_IO_WriteCmd>
  /* Set Pixel color format to RGB888 */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg37);
 80007f6:	a901      	add	r1, sp, #4
 80007f8:	2000      	movs	r0, #0
 80007fa:	f000 f977 	bl	8000aec <DSI_IO_WriteCmd>
/* ************************************************************************** */
/* Standard DCS Initialization                                                */
/* ************************************************************************** */

  /* Add a delay, otherwise MADCTL not taken */
  NT35510_IO_Delay(200);
 80007fe:	20c8      	movs	r0, #200	; 0xc8
 8000800:	f000 f86c 	bl	80008dc <NT35510_IO_Delay>

  /* Configure orientation */
  if(orientation == NT35510_ORIENTATION_PORTRAIT)
 8000804:	2d00      	cmp	r5, #0
 8000806:	d134      	bne.n	8000872 <NT35510_Init+0x286>
  {
    DSI_IO_WriteCmd(1, (uint8_t *)nt35510_madctl_portrait);
 8000808:	a914      	add	r1, sp, #80	; 0x50
 800080a:	2001      	movs	r0, #1
 800080c:	f000 f96e 	bl	8000aec <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_caset_portrait);
 8000810:	a912      	add	r1, sp, #72	; 0x48
 8000812:	2004      	movs	r0, #4
 8000814:	f000 f96a 	bl	8000aec <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_raset_portrait);
 8000818:	a910      	add	r1, sp, #64	; 0x40
 800081a:	2004      	movs	r0, #4
 800081c:	f000 f966 	bl	8000aec <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(1, (uint8_t *)nt35510_madctl_landscape);
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_caset_landscape);
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_raset_landscape);
  }

  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg27);
 8000820:	a909      	add	r1, sp, #36	; 0x24
 8000822:	2000      	movs	r0, #0
 8000824:	f000 f962 	bl	8000aec <DSI_IO_WriteCmd>
  /* Wait for sleep out exit */
  NT35510_IO_Delay(120);
 8000828:	2078      	movs	r0, #120	; 0x78
 800082a:	f000 f857 	bl	80008dc <NT35510_IO_Delay>

  switch(ColorCoding)
 800082e:	b36c      	cbz	r4, 800088c <NT35510_Init+0x2a0>
 8000830:	2c02      	cmp	r4, #2
 8000832:	d130      	bne.n	8000896 <NT35510_Init+0x2aa>
  {
    case NT35510_FORMAT_RBG565 :
      /* Set Pixel color format to RGB565 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg36);
 8000834:	a902      	add	r1, sp, #8
 8000836:	2001      	movs	r0, #1
 8000838:	f000 f958 	bl	8000aec <DSI_IO_WriteCmd>
      break;
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg31);
 800083c:	a907      	add	r1, sp, #28
 800083e:	2001      	movs	r0, #1
 8000840:	f000 f954 	bl	8000aec <DSI_IO_WriteCmd>
  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg32);
 8000844:	a906      	add	r1, sp, #24
 8000846:	2001      	movs	r0, #1
 8000848:	f000 f950 	bl	8000aec <DSI_IO_WriteCmd>
  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg33);
 800084c:	a905      	add	r1, sp, #20
 800084e:	2001      	movs	r0, #1
 8000850:	f000 f94c 	bl	8000aec <DSI_IO_WriteCmd>
  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg34);
 8000854:	a904      	add	r1, sp, #16
 8000856:	2001      	movs	r0, #1
 8000858:	f000 f948 	bl	8000aec <DSI_IO_WriteCmd>
  /** CABC : Content Adaptive Backlight Control section end << */

  /* Display on */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg30);
 800085c:	a908      	add	r1, sp, #32
 800085e:	2000      	movs	r0, #0
 8000860:	f000 f944 	bl	8000aec <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg35);
 8000864:	a903      	add	r1, sp, #12
 8000866:	2000      	movs	r0, #0
 8000868:	f000 f940 	bl	8000aec <DSI_IO_WriteCmd>

  return 0;
}
 800086c:	2000      	movs	r0, #0
 800086e:	b031      	add	sp, #196	; 0xc4
 8000870:	bd30      	pop	{r4, r5, pc}
    DSI_IO_WriteCmd(1, (uint8_t *)nt35510_madctl_landscape);
 8000872:	a90f      	add	r1, sp, #60	; 0x3c
 8000874:	2001      	movs	r0, #1
 8000876:	f000 f939 	bl	8000aec <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_caset_landscape);
 800087a:	a90d      	add	r1, sp, #52	; 0x34
 800087c:	2004      	movs	r0, #4
 800087e:	f000 f935 	bl	8000aec <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_raset_landscape);
 8000882:	a90b      	add	r1, sp, #44	; 0x2c
 8000884:	2004      	movs	r0, #4
 8000886:	f000 f931 	bl	8000aec <DSI_IO_WriteCmd>
 800088a:	e7c9      	b.n	8000820 <NT35510_Init+0x234>
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg37);
 800088c:	a901      	add	r1, sp, #4
 800088e:	2001      	movs	r0, #1
 8000890:	f000 f92c 	bl	8000aec <DSI_IO_WriteCmd>
      break;
 8000894:	e7d2      	b.n	800083c <NT35510_Init+0x250>
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg37);
 8000896:	a901      	add	r1, sp, #4
 8000898:	2001      	movs	r0, #1
 800089a:	f000 f927 	bl	8000aec <DSI_IO_WriteCmd>
      break;
 800089e:	e7cd      	b.n	800083c <NT35510_Init+0x250>
 80008a0:	0800b210 	.word	0x0800b210
 80008a4:	b0030303 	.word	0xb0030303
 80008a8:	b6464646 	.word	0xb6464646
 80008ac:	b1030303 	.word	0xb1030303
 80008b0:	b7363636 	.word	0xb7363636
 80008b4:	b2020000 	.word	0xb2020000
 80008b8:	b8262626 	.word	0xb8262626
 80008bc:	b3090909 	.word	0xb3090909
 80008c0:	b9363636 	.word	0xb9363636
 80008c4:	b5080808 	.word	0xb5080808
 80008c8:	ba262626 	.word	0xba262626
 80008cc:	bc008000 	.word	0xbc008000
 80008d0:	08009680 	.word	0x08009680
 80008d4:	0800b218 	.word	0x0800b218
 80008d8:	cc000003 	.word	0xcc000003

080008dc <NT35510_IO_Delay>:
/**
  * @brief  NT35510 delay
  * @param  Delay: Delay in ms
  */
void NT35510_IO_Delay(uint32_t Delay)
{
 80008dc:	b508      	push	{r3, lr}
  HAL_Delay(Delay);
 80008de:	f002 ff2f 	bl	8003740 <HAL_Delay>
}
 80008e2:	bd08      	pop	{r3, pc}

080008e4 <LCD_IO_GetID>:
    return 0;
  }
#else 
  return LCD_DSI_ID; 
#endif /* USE_LCD_HDMI */
}
 80008e4:	2011      	movs	r0, #17
 80008e6:	4770      	bx	lr

080008e8 <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 80008e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008ea:	b083      	sub	sp, #12
 80008ec:	4604      	mov	r4, r0
 80008ee:	460d      	mov	r5, r1
 80008f0:	4616      	mov	r6, r2
 80008f2:	461f      	mov	r7, r3
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 80008f4:	4811      	ldr	r0, [pc, #68]	; (800093c <LL_FillBuffer+0x54>)
 80008f6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80008fa:	6043      	str	r3, [r0, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 80008fc:	2300      	movs	r3, #0
 80008fe:	6083      	str	r3, [r0, #8]
  hdma2d_discovery.Init.OutputOffset = OffLine;
 8000900:	9b08      	ldr	r3, [sp, #32]
 8000902:	60c3      	str	r3, [r0, #12]

  hdma2d_discovery.Instance = DMA2D;
 8000904:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <LL_FillBuffer+0x58>)
 8000906:	6003      	str	r3, [r0, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 8000908:	f003 ff5a 	bl	80047c0 <HAL_DMA2D_Init>
 800090c:	b108      	cbz	r0, 8000912 <LL_FillBuffer+0x2a>
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
      }
    }
  }
}
 800090e:	b003      	add	sp, #12
 8000910:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, LayerIndex) == HAL_OK)
 8000912:	4621      	mov	r1, r4
 8000914:	4809      	ldr	r0, [pc, #36]	; (800093c <LL_FillBuffer+0x54>)
 8000916:	f004 f849 	bl	80049ac <HAL_DMA2D_ConfigLayer>
 800091a:	2800      	cmp	r0, #0
 800091c:	d1f7      	bne.n	800090e <LL_FillBuffer+0x26>
      if (HAL_DMA2D_Start(&hdma2d_discovery, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800091e:	9700      	str	r7, [sp, #0]
 8000920:	4633      	mov	r3, r6
 8000922:	462a      	mov	r2, r5
 8000924:	9909      	ldr	r1, [sp, #36]	; 0x24
 8000926:	4805      	ldr	r0, [pc, #20]	; (800093c <LL_FillBuffer+0x54>)
 8000928:	f003 ff84 	bl	8004834 <HAL_DMA2D_Start>
 800092c:	2800      	cmp	r0, #0
 800092e:	d1ee      	bne.n	800090e <LL_FillBuffer+0x26>
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 8000930:	210a      	movs	r1, #10
 8000932:	4802      	ldr	r0, [pc, #8]	; (800093c <LL_FillBuffer+0x54>)
 8000934:	f003 ff9a 	bl	800486c <HAL_DMA2D_PollForTransfer>
}
 8000938:	e7e9      	b.n	800090e <LL_FillBuffer+0x26>
 800093a:	bf00      	nop
 800093c:	2000012c 	.word	0x2000012c
 8000940:	4002b000 	.word	0x4002b000

08000944 <BSP_LCD_Reset>:
{
 8000944:	b570      	push	{r4, r5, r6, lr}
 8000946:	b086      	sub	sp, #24
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000948:	4b14      	ldr	r3, [pc, #80]	; (800099c <BSP_LCD_Reset+0x58>)
 800094a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800094c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000950:	631a      	str	r2, [r3, #48]	; 0x30
 8000952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000954:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000958:	9300      	str	r3, [sp, #0]
 800095a:	9b00      	ldr	r3, [sp, #0]
    gpio_init_structure.Pin   = GPIO_PIN_15;
 800095c:	f44f 4500 	mov.w	r5, #32768	; 0x8000
 8000960:	9501      	str	r5, [sp, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000962:	2601      	movs	r6, #1
 8000964:	9602      	str	r6, [sp, #8]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 8000966:	9603      	str	r6, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8000968:	2303      	movs	r3, #3
 800096a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 800096c:	4c0c      	ldr	r4, [pc, #48]	; (80009a0 <BSP_LCD_Reset+0x5c>)
 800096e:	a901      	add	r1, sp, #4
 8000970:	4620      	mov	r0, r4
 8000972:	f004 fb9b 	bl	80050ac <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	4629      	mov	r1, r5
 800097a:	4620      	mov	r0, r4
 800097c:	f004 fc98 	bl	80052b0 <HAL_GPIO_WritePin>
    HAL_Delay(20); /* wait 20 ms */
 8000980:	2014      	movs	r0, #20
 8000982:	f002 fedd 	bl	8003740 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 8000986:	4632      	mov	r2, r6
 8000988:	4629      	mov	r1, r5
 800098a:	4620      	mov	r0, r4
 800098c:	f004 fc90 	bl	80052b0 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000990:	200a      	movs	r0, #10
 8000992:	f002 fed5 	bl	8003740 <HAL_Delay>
}
 8000996:	b006      	add	sp, #24
 8000998:	bd70      	pop	{r4, r5, r6, pc}
 800099a:	bf00      	nop
 800099c:	40023800 	.word	0x40023800
 80009a0:	40022400 	.word	0x40022400

080009a4 <BSP_LCD_GetXSize>:
}
 80009a4:	4b01      	ldr	r3, [pc, #4]	; (80009ac <BSP_LCD_GetXSize+0x8>)
 80009a6:	6818      	ldr	r0, [r3, #0]
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	20000000 	.word	0x20000000

080009b0 <BSP_LCD_GetYSize>:
}
 80009b0:	4b01      	ldr	r3, [pc, #4]	; (80009b8 <BSP_LCD_GetYSize+0x8>)
 80009b2:	6858      	ldr	r0, [r3, #4]
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	20000000 	.word	0x20000000

080009bc <BSP_LCD_LayerDefaultInit>:
{
 80009bc:	b570      	push	{r4, r5, r6, lr}
 80009be:	b08e      	sub	sp, #56	; 0x38
 80009c0:	4604      	mov	r4, r0
 80009c2:	460e      	mov	r6, r1
  Layercfg.WindowX0 = 0;
 80009c4:	2500      	movs	r5, #0
 80009c6:	9501      	str	r5, [sp, #4]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80009c8:	f7ff ffec 	bl	80009a4 <BSP_LCD_GetXSize>
 80009cc:	9002      	str	r0, [sp, #8]
  Layercfg.WindowY0 = 0;
 80009ce:	9503      	str	r5, [sp, #12]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80009d0:	f7ff ffee 	bl	80009b0 <BSP_LCD_GetYSize>
 80009d4:	9004      	str	r0, [sp, #16]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80009d6:	9505      	str	r5, [sp, #20]
  Layercfg.FBStartAdress = FB_Address;
 80009d8:	960a      	str	r6, [sp, #40]	; 0x28
  Layercfg.Alpha = 255;
 80009da:	23ff      	movs	r3, #255	; 0xff
 80009dc:	9306      	str	r3, [sp, #24]
  Layercfg.Alpha0 = 0;
 80009de:	9507      	str	r5, [sp, #28]
  Layercfg.Backcolor.Blue = 0;
 80009e0:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
  Layercfg.Backcolor.Green = 0;
 80009e4:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  Layercfg.Backcolor.Red = 0;
 80009e8:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80009ec:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009f0:	9308      	str	r3, [sp, #32]
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80009f2:	2307      	movs	r3, #7
 80009f4:	9309      	str	r3, [sp, #36]	; 0x24
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80009f6:	f7ff ffd5 	bl	80009a4 <BSP_LCD_GetXSize>
 80009fa:	900b      	str	r0, [sp, #44]	; 0x2c
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80009fc:	f7ff ffd8 	bl	80009b0 <BSP_LCD_GetYSize>
 8000a00:	900c      	str	r0, [sp, #48]	; 0x30
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex); 
 8000a02:	4d0c      	ldr	r5, [pc, #48]	; (8000a34 <BSP_LCD_LayerDefaultInit+0x78>)
 8000a04:	4622      	mov	r2, r4
 8000a06:	a901      	add	r1, sp, #4
 8000a08:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8000a0c:	f005 f9c6 	bl	8005d9c <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8000a10:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8000a14:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8000a18:	f04f 32ff 	mov.w	r2, #4294967295
 8000a1c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  DrawProp[LayerIndex].pFont     = &Font24;
 8000a20:	4a05      	ldr	r2, [pc, #20]	; (8000a38 <BSP_LCD_LayerDefaultInit+0x7c>)
 8000a22:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8000a26:	461d      	mov	r5, r3
 8000a28:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8000a2c:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
}
 8000a30:	b00e      	add	sp, #56	; 0x38
 8000a32:	bd70      	pop	{r4, r5, r6, pc}
 8000a34:	2000012c 	.word	0x2000012c
 8000a38:	2000000c 	.word	0x2000000c

08000a3c <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
 8000a3c:	4b01      	ldr	r3, [pc, #4]	; (8000a44 <BSP_LCD_SelectLayer+0x8>)
 8000a3e:	6598      	str	r0, [r3, #88]	; 0x58
}
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	2000012c 	.word	0x2000012c

08000a48 <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
 8000a48:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <BSP_LCD_SetTextColor+0x14>)
 8000a4a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a4c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000a50:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000a54:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
}
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	2000012c 	.word	0x2000012c

08000a60 <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = fonts;
 8000a60:	4b04      	ldr	r3, [pc, #16]	; (8000a74 <BSP_LCD_SetFont+0x14>)
 8000a62:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a64:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000a68:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000a6c:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
}
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	2000012c 	.word	0x2000012c

08000a78 <BSP_LCD_GetFont>:
  return DrawProp[ActiveLayer].pFont;
 8000a78:	4a04      	ldr	r2, [pc, #16]	; (8000a8c <BSP_LCD_GetFont+0x14>)
 8000a7a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8000a7c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000a80:	0099      	lsls	r1, r3, #2
 8000a82:	440a      	add	r2, r1
}
 8000a84:	f8d2 010c 	ldr.w	r0, [r2, #268]	; 0x10c
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	2000012c 	.word	0x2000012c

08000a90 <BSP_LCD_Clear>:
{
 8000a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a92:	b083      	sub	sp, #12
 8000a94:	4605      	mov	r5, r0
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8000a96:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <BSP_LCD_Clear+0x34>)
 8000a98:	6d9e      	ldr	r6, [r3, #88]	; 0x58
 8000a9a:	2234      	movs	r2, #52	; 0x34
 8000a9c:	fb02 3306 	mla	r3, r2, r6, r3
 8000aa0:	f8d3 70b8 	ldr.w	r7, [r3, #184]	; 0xb8
 8000aa4:	f7ff ff7e 	bl	80009a4 <BSP_LCD_GetXSize>
 8000aa8:	4604      	mov	r4, r0
 8000aaa:	f7ff ff81 	bl	80009b0 <BSP_LCD_GetYSize>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	9501      	str	r5, [sp, #4]
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	9200      	str	r2, [sp, #0]
 8000ab6:	4622      	mov	r2, r4
 8000ab8:	4639      	mov	r1, r7
 8000aba:	4630      	mov	r0, r6
 8000abc:	f7ff ff14 	bl	80008e8 <LL_FillBuffer>
}
 8000ac0:	b003      	add	sp, #12
 8000ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ac4:	2000012c 	.word	0x2000012c

08000ac8 <BSP_LCD_DisplayOn>:
{
 8000ac8:	b500      	push	{lr}
 8000aca:	b083      	sub	sp, #12
    HAL_DSI_ShortWrite(&(hdsi_discovery),
 8000acc:	4806      	ldr	r0, [pc, #24]	; (8000ae8 <BSP_LCD_DisplayOn+0x20>)
 8000ace:	2300      	movs	r3, #0
 8000ad0:	9300      	str	r3, [sp, #0]
 8000ad2:	2329      	movs	r3, #41	; 0x29
 8000ad4:	2215      	movs	r2, #21
 8000ad6:	f8d0 111c 	ldr.w	r1, [r0, #284]	; 0x11c
 8000ada:	f500 70c4 	add.w	r0, r0, #392	; 0x188
 8000ade:	f004 fa72 	bl	8004fc6 <HAL_DSI_ShortWrite>
}
 8000ae2:	b003      	add	sp, #12
 8000ae4:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ae8:	2000012c 	.word	0x2000012c

08000aec <DSI_IO_WriteCmd>:
{
 8000aec:	b500      	push	{lr}
 8000aee:	b083      	sub	sp, #12
  if(NbrParams <= 1)
 8000af0:	2801      	cmp	r0, #1
 8000af2:	d90b      	bls.n	8000b0c <DSI_IO_WriteCmd+0x20>
 8000af4:	4603      	mov	r3, r0
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8000af6:	5c0a      	ldrb	r2, [r1, r0]
 8000af8:	9101      	str	r1, [sp, #4]
 8000afa:	9200      	str	r2, [sp, #0]
 8000afc:	2239      	movs	r2, #57	; 0x39
 8000afe:	2100      	movs	r1, #0
 8000b00:	4807      	ldr	r0, [pc, #28]	; (8000b20 <DSI_IO_WriteCmd+0x34>)
 8000b02:	f004 fa73 	bl	8004fec <HAL_DSI_LongWrite>
}
 8000b06:	b003      	add	sp, #12
 8000b08:	f85d fb04 	ldr.w	pc, [sp], #4
   HAL_DSI_ShortWrite(&hdsi_discovery, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8000b0c:	784b      	ldrb	r3, [r1, #1]
 8000b0e:	9300      	str	r3, [sp, #0]
 8000b10:	780b      	ldrb	r3, [r1, #0]
 8000b12:	2215      	movs	r2, #21
 8000b14:	2100      	movs	r1, #0
 8000b16:	4802      	ldr	r0, [pc, #8]	; (8000b20 <DSI_IO_WriteCmd+0x34>)
 8000b18:	f004 fa55 	bl	8004fc6 <HAL_DSI_ShortWrite>
 8000b1c:	e7f3      	b.n	8000b06 <DSI_IO_WriteCmd+0x1a>
 8000b1e:	bf00      	nop
 8000b20:	200002b4 	.word	0x200002b4

08000b24 <BSP_LCD_MspInit>:
{
 8000b24:	b500      	push	{lr}
 8000b26:	b085      	sub	sp, #20
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000b28:	4b27      	ldr	r3, [pc, #156]	; (8000bc8 <BSP_LCD_MspInit+0xa4>)
 8000b2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b2c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000b30:	645a      	str	r2, [r3, #68]	; 0x44
 8000b32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b34:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8000b38:	9201      	str	r2, [sp, #4]
 8000b3a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_LTDC_FORCE_RESET();
 8000b3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b3e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000b42:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 8000b44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b46:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8000b4a:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8000b4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b4e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000b52:	631a      	str	r2, [r3, #48]	; 0x30
 8000b54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b56:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8000b5a:	9202      	str	r2, [sp, #8]
 8000b5c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_DMA2D_FORCE_RESET();
 8000b5e:	691a      	ldr	r2, [r3, #16]
 8000b60:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000b64:	611a      	str	r2, [r3, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 8000b66:	691a      	ldr	r2, [r3, #16]
 8000b68:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000b6c:	611a      	str	r2, [r3, #16]
  __HAL_RCC_DSI_CLK_ENABLE();
 8000b6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b70:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8000b74:	645a      	str	r2, [r3, #68]	; 0x44
 8000b76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b78:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8000b7c:	9203      	str	r2, [sp, #12]
 8000b7e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_DSI_FORCE_RESET();
 8000b80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b82:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8000b86:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 8000b88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b8a:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 8000b8e:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8000b90:	2200      	movs	r2, #0
 8000b92:	2103      	movs	r1, #3
 8000b94:	2058      	movs	r0, #88	; 0x58
 8000b96:	f003 fae7 	bl	8004168 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000b9a:	2058      	movs	r0, #88	; 0x58
 8000b9c:	f003 fb1a 	bl	80041d4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2103      	movs	r1, #3
 8000ba4:	205a      	movs	r0, #90	; 0x5a
 8000ba6:	f003 fadf 	bl	8004168 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000baa:	205a      	movs	r0, #90	; 0x5a
 8000bac:	f003 fb12 	bl	80041d4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2103      	movs	r1, #3
 8000bb4:	2062      	movs	r0, #98	; 0x62
 8000bb6:	f003 fad7 	bl	8004168 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8000bba:	2062      	movs	r0, #98	; 0x62
 8000bbc:	f003 fb0a 	bl	80041d4 <HAL_NVIC_EnableIRQ>
}
 8000bc0:	b005      	add	sp, #20
 8000bc2:	f85d fb04 	ldr.w	pc, [sp], #4
 8000bc6:	bf00      	nop
 8000bc8:	40023800 	.word	0x40023800

08000bcc <BSP_LCD_InitEx>:
{
 8000bcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000bd0:	b085      	sub	sp, #20
 8000bd2:	4606      	mov	r6, r0
  BSP_LCD_Reset();
 8000bd4:	f7ff feb6 	bl	8000944 <BSP_LCD_Reset>
  read_id = LCD_IO_GetID();
 8000bd8:	f7ff fe84 	bl	80008e4 <LCD_IO_GetID>
  if(read_id != LCD_DSI_ID)
 8000bdc:	2811      	cmp	r0, #17
 8000bde:	d003      	beq.n	8000be8 <BSP_LCD_InitEx+0x1c>
    return LCD_ERROR;  
 8000be0:	2001      	movs	r0, #1
}
 8000be2:	b005      	add	sp, #20
 8000be4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  BSP_LCD_MspInit();
 8000be8:	f7ff ff9c 	bl	8000b24 <BSP_LCD_MspInit>
  hdsi_discovery.Instance = DSI;
 8000bec:	4c65      	ldr	r4, [pc, #404]	; (8000d84 <BSP_LCD_InitEx+0x1b8>)
 8000bee:	4b66      	ldr	r3, [pc, #408]	; (8000d88 <BSP_LCD_InitEx+0x1bc>)
 8000bf0:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
  HAL_DSI_DeInit(&(hdsi_discovery));
 8000bf4:	f504 75c4 	add.w	r5, r4, #392	; 0x188
 8000bf8:	4628      	mov	r0, r5
 8000bfa:	f004 f83a 	bl	8004c72 <HAL_DSI_DeInit>
  dsiPllInit.PLLNDIV  = 100;
 8000bfe:	2364      	movs	r3, #100	; 0x64
 8000c00:	9301      	str	r3, [sp, #4]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 8000c02:	2305      	movs	r3, #5
 8000c04:	9302      	str	r3, [sp, #8]
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;
 8000c06:	2300      	movs	r3, #0
 8000c08:	9303      	str	r3, [sp, #12]
  hdsi_discovery.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 8000c10:	2304      	movs	r3, #4
 8000c12:	f8c4 3190 	str.w	r3, [r4, #400]	; 0x190
  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 8000c16:	eb0d 0103 	add.w	r1, sp, r3
 8000c1a:	4628      	mov	r0, r5
 8000c1c:	f003 ff62 	bl	8004ae4 <HAL_DSI_Init>
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 8000c20:	2e00      	cmp	r6, #0
 8000c22:	f040 80a7 	bne.w	8000d74 <BSP_LCD_InitEx+0x1a8>
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 8000c26:	4b59      	ldr	r3, [pc, #356]	; (8000d8c <BSP_LCD_InitEx+0x1c0>)
 8000c28:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000c2c:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 8000c2e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000c32:	605a      	str	r2, [r3, #4]
  HACT = lcd_x_size;
 8000c34:	4f55      	ldr	r7, [pc, #340]	; (8000d8c <BSP_LCD_InitEx+0x1c0>)
 8000c36:	683b      	ldr	r3, [r7, #0]
  VACT = lcd_y_size;
 8000c38:	687a      	ldr	r2, [r7, #4]
  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 8000c3a:	4c52      	ldr	r4, [pc, #328]	; (8000d84 <BSP_LCD_InitEx+0x1b8>)
 8000c3c:	2500      	movs	r5, #0
 8000c3e:	f8c4 511c 	str.w	r5, [r4, #284]	; 0x11c
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 8000c42:	2105      	movs	r1, #5
 8000c44:	f8c4 1120 	str.w	r1, [r4, #288]	; 0x120
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000c48:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8000c4c:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 8000c50:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 8000c54:	2102      	movs	r1, #2
 8000c56:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
  hdsivideo_handle.NullPacketSize = 0xFFF;
 8000c5a:	f640 71ff 	movw	r1, #4095	; 0xfff
 8000c5e:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
  hdsivideo_handle.NumberOfChunks = 0;
 8000c62:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 8000c66:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz)/LcdClock;
 8000c6a:	2104      	movs	r1, #4
 8000c6c:	f8c4 1144 	str.w	r1, [r4, #324]	; 0x144
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 8000c70:	214d      	movs	r1, #77	; 0x4d
 8000c72:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 8000c76:	3346      	adds	r3, #70	; 0x46
 8000c78:	f24f 4124 	movw	r1, #62500	; 0xf424
 8000c7c:	fb01 f303 	mul.w	r3, r1, r3
 8000c80:	4943      	ldr	r1, [pc, #268]	; (8000d90 <BSP_LCD_InitEx+0x1c4>)
 8000c82:	fba1 1303 	umull	r1, r3, r1, r3
 8000c86:	0b5b      	lsrs	r3, r3, #13
 8000c88:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
  hdsivideo_handle.VerticalSyncActive        = VSA;
 8000c8c:	2378      	movs	r3, #120	; 0x78
 8000c8e:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
  hdsivideo_handle.VerticalBackPorch         = VBP;
 8000c92:	2396      	movs	r3, #150	; 0x96
 8000c94:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 8000c98:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 8000c9c:	f8c4 215c 	str.w	r2, [r4, #348]	; 0x15c
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 8000ca0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ca4:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
  hdsivideo_handle.LPLargestPacketSize = 16;
 8000ca8:	2310      	movs	r3, #16
 8000caa:	f8c4 3164 	str.w	r3, [r4, #356]	; 0x164
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 8000cae:	f8c4 5168 	str.w	r5, [r4, #360]	; 0x168
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 8000cb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cb6:	f8c4 316c 	str.w	r3, [r4, #364]	; 0x16c
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 8000cba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cbe:	f8c4 3170 	str.w	r3, [r4, #368]	; 0x170
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 8000cc2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cc6:	f8c4 3174 	str.w	r3, [r4, #372]	; 0x174
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 8000cca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cce:	f8c4 3178 	str.w	r3, [r4, #376]	; 0x178
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 8000cd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cd6:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 8000cda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cde:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 8000ce2:	f504 798e 	add.w	r9, r4, #284	; 0x11c
 8000ce6:	f504 78c4 	add.w	r8, r4, #392	; 0x188
 8000cea:	4649      	mov	r1, r9
 8000cec:	4640      	mov	r0, r8
 8000cee:	f004 f80f 	bl	8004d10 <HAL_DSI_ConfigVideoMode>
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	6723      	str	r3, [r4, #112]	; 0x70
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 8000cf6:	2323      	movs	r3, #35	; 0x23
 8000cf8:	67a3      	str	r3, [r4, #120]	; 0x78
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	f103 0223 	add.w	r2, r3, #35	; 0x23
 8000d00:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 8000d04:	f103 0245 	add.w	r2, r3, #69	; 0x45
 8000d08:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  hltdc_discovery.LayerCfg->ImageWidth  = lcd_x_size;
 8000d0c:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000d16:	2308      	movs	r3, #8
 8000d18:	f8c4 31a4 	str.w	r3, [r4, #420]	; 0x1a4
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000d1c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000d20:	f8c4 31b8 	str.w	r3, [r4, #440]	; 0x1b8
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 8000d24:	2307      	movs	r3, #7
 8000d26:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000d2a:	f8c4 51d0 	str.w	r5, [r4, #464]	; 0x1d0
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000d2e:	f504 70d2 	add.w	r0, r4, #420	; 0x1a4
 8000d32:	f005 fc43 	bl	80065bc <HAL_RCCEx_PeriphCLKConfig>
  hltdc_discovery.Init.Backcolor.Blue = 0;
 8000d36:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
  hltdc_discovery.Init.Backcolor.Green = 0;
 8000d3a:	f884 5091 	strb.w	r5, [r4, #145]	; 0x91
  hltdc_discovery.Init.Backcolor.Red = 0;
 8000d3e:	f884 5092 	strb.w	r5, [r4, #146]	; 0x92
  hltdc_discovery.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000d42:	66e5      	str	r5, [r4, #108]	; 0x6c
  hltdc_discovery.Instance = LTDC;
 8000d44:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <BSP_LCD_InitEx+0x1c8>)
 8000d46:	f844 3f5c 	str.w	r3, [r4, #92]!
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 8000d4a:	4649      	mov	r1, r9
 8000d4c:	4620      	mov	r0, r4
 8000d4e:	f005 f859 	bl	8005e04 <HAL_LTDCEx_StructInitFromVideoConfig>
  HAL_LTDC_Init(&hltdc_discovery);
 8000d52:	4620      	mov	r0, r4
 8000d54:	f004 ffa8 	bl	8005ca8 <HAL_LTDC_Init>
  HAL_DSI_Start(&hdsi_discovery);
 8000d58:	4640      	mov	r0, r8
 8000d5a:	f004 f90d 	bl	8004f78 <HAL_DSI_Start>
  BSP_SDRAM_Init();
 8000d5e:	f000 fa47 	bl	80011f0 <BSP_SDRAM_Init>
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8000d62:	480d      	ldr	r0, [pc, #52]	; (8000d98 <BSP_LCD_InitEx+0x1cc>)
 8000d64:	f7ff fe7c 	bl	8000a60 <BSP_LCD_SetFont>
  NT35510_Init(NT35510_FORMAT_RGB888, orientation);
 8000d68:	4631      	mov	r1, r6
 8000d6a:	4628      	mov	r0, r5
 8000d6c:	f7ff fc3e 	bl	80005ec <NT35510_Init>
  return LCD_OK; 
 8000d70:	4628      	mov	r0, r5
 8000d72:	e736      	b.n	8000be2 <BSP_LCD_InitEx+0x16>
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 8000d74:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <BSP_LCD_InitEx+0x1c0>)
 8000d76:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000d7a:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 8000d7c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	e757      	b.n	8000c34 <BSP_LCD_InitEx+0x68>
 8000d84:	2000012c 	.word	0x2000012c
 8000d88:	40016c00 	.word	0x40016c00
 8000d8c:	20000000 	.word	0x20000000
 8000d90:	4c751ce3 	.word	0x4c751ce3
 8000d94:	40016800 	.word	0x40016800
 8000d98:	2000000c 	.word	0x2000000c

08000d9c <BSP_LCD_Init>:
{
 8000d9c:	b508      	push	{r3, lr}
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8000d9e:	2001      	movs	r0, #1
 8000da0:	f7ff ff14 	bl	8000bcc <BSP_LCD_InitEx>
}
 8000da4:	bd08      	pop	{r3, pc}
	...

08000da8 <BSP_LCD_DrawPixel>:
{
 8000da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000daa:	4604      	mov	r4, r0
 8000dac:	460e      	mov	r6, r1
 8000dae:	4615      	mov	r5, r2
  *(__IO uint32_t*) (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <BSP_LCD_DrawPixel+0x24>)
 8000db2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000db4:	2134      	movs	r1, #52	; 0x34
 8000db6:	fb01 3302 	mla	r3, r1, r2, r3
 8000dba:	f8d3 70b8 	ldr.w	r7, [r3, #184]	; 0xb8
 8000dbe:	f7ff fdf1 	bl	80009a4 <BSP_LCD_GetXSize>
 8000dc2:	fb00 4406 	mla	r4, r0, r6, r4
 8000dc6:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
}
 8000dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000dcc:	2000012c 	.word	0x2000012c

08000dd0 <DrawChar>:
{
 8000dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000dd4:	b083      	sub	sp, #12
 8000dd6:	4681      	mov	r9, r0
 8000dd8:	460e      	mov	r6, r1
 8000dda:	9200      	str	r2, [sp, #0]
  height = DrawProp[ActiveLayer].pFont->Height;
 8000ddc:	4b34      	ldr	r3, [pc, #208]	; (8000eb0 <DrawChar+0xe0>)
 8000dde:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000de0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000de4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000de8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8000dec:	88da      	ldrh	r2, [r3, #6]
 8000dee:	9201      	str	r2, [sp, #4]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8000df0:	889d      	ldrh	r5, [r3, #4]
  offset =  8 *((width + 7)/8) -  width ;
 8000df2:	f105 0b07 	add.w	fp, r5, #7
 8000df6:	ea4f 0beb 	mov.w	fp, fp, asr #3
 8000dfa:	ea4f 08cb 	mov.w	r8, fp, lsl #3
 8000dfe:	fa5f f888 	uxtb.w	r8, r8
 8000e02:	b2eb      	uxtb	r3, r5
 8000e04:	eba8 0803 	sub.w	r8, r8, r3
 8000e08:	fa5f f888 	uxtb.w	r8, r8
  for(i = 0; i < height; i++)
 8000e0c:	f04f 0a00 	mov.w	sl, #0
 8000e10:	e035      	b.n	8000e7e <DrawChar+0xae>
      line =  pchar[0];
 8000e12:	9a00      	ldr	r2, [sp, #0]
 8000e14:	5cd7      	ldrb	r7, [r2, r3]
    for (j = 0; j < width; j++)
 8000e16:	2400      	movs	r4, #0
 8000e18:	e014      	b.n	8000e44 <DrawChar+0x74>
      line =  (pchar[0]<< 8) | pchar[1];
 8000e1a:	9900      	ldr	r1, [sp, #0]
 8000e1c:	5ccb      	ldrb	r3, [r1, r3]
 8000e1e:	7857      	ldrb	r7, [r2, #1]
 8000e20:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
      break;
 8000e24:	e7f7      	b.n	8000e16 <DrawChar+0x46>
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8000e26:	4b22      	ldr	r3, [pc, #136]	; (8000eb0 <DrawChar+0xe0>)
 8000e28:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000e2a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000e2e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000e32:	eb09 0004 	add.w	r0, r9, r4
 8000e36:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8000e3a:	4631      	mov	r1, r6
 8000e3c:	b280      	uxth	r0, r0
 8000e3e:	f7ff ffb3 	bl	8000da8 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8000e42:	3401      	adds	r4, #1
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	d916      	bls.n	8000e76 <DrawChar+0xa6>
      if(line & (1 << (width- j + offset- 1)))
 8000e48:	1b2b      	subs	r3, r5, r4
 8000e4a:	4443      	add	r3, r8
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	2201      	movs	r2, #1
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	423b      	tst	r3, r7
 8000e56:	d0e6      	beq.n	8000e26 <DrawChar+0x56>
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8000e58:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <DrawChar+0xe0>)
 8000e5a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000e5c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000e60:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000e64:	eb09 0004 	add.w	r0, r9, r4
 8000e68:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	b280      	uxth	r0, r0
 8000e70:	f7ff ff9a 	bl	8000da8 <BSP_LCD_DrawPixel>
 8000e74:	e7e5      	b.n	8000e42 <DrawChar+0x72>
    Ypos++;
 8000e76:	3601      	adds	r6, #1
 8000e78:	b2b6      	uxth	r6, r6
  for(i = 0; i < height; i++)
 8000e7a:	f10a 0a01 	add.w	sl, sl, #1
 8000e7e:	9b01      	ldr	r3, [sp, #4]
 8000e80:	4553      	cmp	r3, sl
 8000e82:	d912      	bls.n	8000eaa <DrawChar+0xda>
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8000e84:	fb0a f30b 	mul.w	r3, sl, fp
 8000e88:	9a00      	ldr	r2, [sp, #0]
 8000e8a:	441a      	add	r2, r3
    switch(((width + 7)/8))
 8000e8c:	f1bb 0f01 	cmp.w	fp, #1
 8000e90:	d0bf      	beq.n	8000e12 <DrawChar+0x42>
 8000e92:	f1bb 0f02 	cmp.w	fp, #2
 8000e96:	d0c0      	beq.n	8000e1a <DrawChar+0x4a>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8000e98:	9900      	ldr	r1, [sp, #0]
 8000e9a:	5ccb      	ldrb	r3, [r1, r3]
 8000e9c:	7857      	ldrb	r7, [r2, #1]
 8000e9e:	023f      	lsls	r7, r7, #8
 8000ea0:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
 8000ea4:	7893      	ldrb	r3, [r2, #2]
 8000ea6:	431f      	orrs	r7, r3
      break;
 8000ea8:	e7b5      	b.n	8000e16 <DrawChar+0x46>
}
 8000eaa:	b003      	add	sp, #12
 8000eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000eb0:	2000012c 	.word	0x2000012c

08000eb4 <BSP_LCD_DisplayChar>:
{
 8000eb4:	b538      	push	{r3, r4, r5, lr}
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <BSP_LCD_DisplayChar+0x30>)
 8000eb8:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 8000eba:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8000ebe:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8000ec2:	f8d3 410c 	ldr.w	r4, [r3, #268]	; 0x10c
 8000ec6:	6825      	ldr	r5, [r4, #0]
 8000ec8:	f1a2 0320 	sub.w	r3, r2, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8000ecc:	88e2      	ldrh	r2, [r4, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000ece:	fb02 f303 	mul.w	r3, r2, r3
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8000ed2:	88a2      	ldrh	r2, [r4, #4]
 8000ed4:	3207      	adds	r2, #7
 8000ed6:	10d2      	asrs	r2, r2, #3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000ed8:	fb02 5203 	mla	r2, r2, r3, r5
 8000edc:	f7ff ff78 	bl	8000dd0 <DrawChar>
}
 8000ee0:	bd38      	pop	{r3, r4, r5, pc}
 8000ee2:	bf00      	nop
 8000ee4:	2000012c 	.word	0x2000012c

08000ee8 <BSP_LCD_DisplayStringAt>:
{
 8000ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000eec:	4604      	mov	r4, r0
 8000eee:	460e      	mov	r6, r1
 8000ef0:	4615      	mov	r5, r2
 8000ef2:	4698      	mov	r8, r3
  uint8_t  *ptr = Text;
 8000ef4:	4694      	mov	ip, r2
  uint32_t size = 0, xsize = 0;
 8000ef6:	2700      	movs	r7, #0
  while (*ptr++) size ++ ;
 8000ef8:	e000      	b.n	8000efc <BSP_LCD_DisplayStringAt+0x14>
 8000efa:	3701      	adds	r7, #1
 8000efc:	f81c 2b01 	ldrb.w	r2, [ip], #1
 8000f00:	2a00      	cmp	r2, #0
 8000f02:	d1fa      	bne.n	8000efa <BSP_LCD_DisplayStringAt+0x12>
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8000f04:	f7ff fd4e 	bl	80009a4 <BSP_LCD_GetXSize>
 8000f08:	4b2a      	ldr	r3, [pc, #168]	; (8000fb4 <BSP_LCD_DisplayStringAt+0xcc>)
 8000f0a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000f0c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000f10:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000f14:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8000f18:	889a      	ldrh	r2, [r3, #4]
 8000f1a:	fbb0 f0f2 	udiv	r0, r0, r2
  switch (Mode)
 8000f1e:	f1b8 0f01 	cmp.w	r8, #1
 8000f22:	d007      	beq.n	8000f34 <BSP_LCD_DisplayStringAt+0x4c>
 8000f24:	f1b8 0f02 	cmp.w	r8, #2
 8000f28:	d00c      	beq.n	8000f44 <BSP_LCD_DisplayStringAt+0x5c>
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8000f2a:	b223      	sxth	r3, r4
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	dd3e      	ble.n	8000fae <BSP_LCD_DisplayStringAt+0xc6>
    refcolumn = 1;
 8000f30:	2700      	movs	r7, #0
 8000f32:	e021      	b.n	8000f78 <BSP_LCD_DisplayStringAt+0x90>
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8000f34:	1bc0      	subs	r0, r0, r7
 8000f36:	fb00 f302 	mul.w	r3, r0, r2
 8000f3a:	f3c3 034f 	ubfx	r3, r3, #1, #16
 8000f3e:	4423      	add	r3, r4
 8000f40:	b29c      	uxth	r4, r3
      break;
 8000f42:	e7f2      	b.n	8000f2a <BSP_LCD_DisplayStringAt+0x42>
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8000f44:	1bc3      	subs	r3, r0, r7
 8000f46:	fb13 f302 	smulbb	r3, r3, r2
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	1b1b      	subs	r3, r3, r4
 8000f4e:	b29c      	uxth	r4, r3
      break;
 8000f50:	e7eb      	b.n	8000f2a <BSP_LCD_DisplayStringAt+0x42>
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8000f52:	4642      	mov	r2, r8
 8000f54:	4631      	mov	r1, r6
 8000f56:	4620      	mov	r0, r4
 8000f58:	f7ff ffac 	bl	8000eb4 <BSP_LCD_DisplayChar>
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8000f5c:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <BSP_LCD_DisplayStringAt+0xcc>)
 8000f5e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000f60:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000f64:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000f68:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8000f6c:	889b      	ldrh	r3, [r3, #4]
 8000f6e:	4423      	add	r3, r4
 8000f70:	b29c      	uxth	r4, r3
    Text++;
 8000f72:	3501      	adds	r5, #1
    i++;
 8000f74:	3701      	adds	r7, #1
 8000f76:	b2bf      	uxth	r7, r7
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8000f78:	f895 8000 	ldrb.w	r8, [r5]
 8000f7c:	f7ff fd12 	bl	80009a4 <BSP_LCD_GetXSize>
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <BSP_LCD_DisplayStringAt+0xcc>)
 8000f82:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000f84:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000f88:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000f8c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8000f90:	889a      	ldrh	r2, [r3, #4]
 8000f92:	fb02 0317 	mls	r3, r2, r7, r0
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	f1b8 0100 	subs.w	r1, r8, #0
 8000f9c:	bf18      	it	ne
 8000f9e:	2101      	movne	r1, #1
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	bf38      	it	cc
 8000fa4:	2100      	movcc	r1, #0
 8000fa6:	2900      	cmp	r1, #0
 8000fa8:	d1d3      	bne.n	8000f52 <BSP_LCD_DisplayStringAt+0x6a>
}
 8000faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    refcolumn = 1;
 8000fae:	2401      	movs	r4, #1
 8000fb0:	e7be      	b.n	8000f30 <BSP_LCD_DisplayStringAt+0x48>
 8000fb2:	bf00      	nop
 8000fb4:	2000012c 	.word	0x2000012c

08000fb8 <BSP_LCD_DisplayStringAtLine>:
{
 8000fb8:	b538      	push	{r3, r4, r5, lr}
 8000fba:	4605      	mov	r5, r0
 8000fbc:	460c      	mov	r4, r1
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8000fbe:	f7ff fd5b 	bl	8000a78 <BSP_LCD_GetFont>
 8000fc2:	88c3      	ldrh	r3, [r0, #6]
 8000fc4:	fb13 f105 	smulbb	r1, r3, r5
 8000fc8:	2303      	movs	r3, #3
 8000fca:	4622      	mov	r2, r4
 8000fcc:	b289      	uxth	r1, r1
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f7ff ff8a 	bl	8000ee8 <BSP_LCD_DisplayStringAt>
}
 8000fd4:	bd38      	pop	{r3, r4, r5, pc}
	...

08000fd8 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8000fd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000fdc:	b083      	sub	sp, #12
 8000fde:	4681      	mov	r9, r0
  __IO uint32_t tmpmrd = 0;
 8000fe0:	f04f 0800 	mov.w	r8, #0
 8000fe4:	f8cd 8004 	str.w	r8, [sp, #4]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8000fe8:	4c20      	ldr	r4, [pc, #128]	; (800106c <BSP_SDRAM_Initialization_sequence+0x94>)
 8000fea:	2601      	movs	r6, #1
 8000fec:	6026      	str	r6, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000fee:	2710      	movs	r7, #16
 8000ff0:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 8000ff2:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8000ff4:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000ff8:	19e5      	adds	r5, r4, r7
 8000ffa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ffe:	4621      	mov	r1, r4
 8001000:	4628      	mov	r0, r5
 8001002:	f005 fdfc 	bl	8006bfe <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8001006:	4630      	mov	r0, r6
 8001008:	f002 fb9a 	bl	8003740 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800100c:	2302      	movs	r3, #2
 800100e:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001010:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 8001012:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8001014:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8001018:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800101c:	4621      	mov	r1, r4
 800101e:	4628      	mov	r0, r5
 8001020:	f005 fded 	bl	8006bfe <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001024:	2303      	movs	r3, #3
 8001026:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001028:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 8;
 800102a:	2308      	movs	r3, #8
 800102c:	60a3      	str	r3, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 800102e:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001032:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001036:	4621      	mov	r1, r4
 8001038:	4628      	mov	r0, r5
 800103a:	f005 fde0 	bl	8006bfe <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800103e:	f44f 730c 	mov.w	r3, #560	; 0x230
 8001042:	9301      	str	r3, [sp, #4]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8001044:	2304      	movs	r3, #4
 8001046:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001048:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 800104a:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800104c:	9b01      	ldr	r3, [sp, #4]
 800104e:	60e3      	str	r3, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001050:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001054:	4621      	mov	r1, r4
 8001056:	4628      	mov	r0, r5
 8001058:	f005 fdd1 	bl	8006bfe <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 800105c:	4649      	mov	r1, r9
 800105e:	4628      	mov	r0, r5
 8001060:	f005 fdee 	bl	8006c40 <HAL_SDRAM_ProgramRefreshRate>
}
 8001064:	b003      	add	sp, #12
 8001066:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800106a:	bf00      	nop
 800106c:	20000360 	.word	0x20000360

08001070 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8001070:	b570      	push	{r4, r5, r6, lr}
 8001072:	b08e      	sub	sp, #56	; 0x38
 8001074:	4606      	mov	r6, r0
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001076:	4b55      	ldr	r3, [pc, #340]	; (80011cc <BSP_SDRAM_MspInit+0x15c>)
 8001078:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800107a:	f042 0201 	orr.w	r2, r2, #1
 800107e:	639a      	str	r2, [r3, #56]	; 0x38
 8001080:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001082:	f002 0201 	and.w	r2, r2, #1
 8001086:	9201      	str	r2, [sp, #4]
 8001088:	9a01      	ldr	r2, [sp, #4]
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800108a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800108c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001090:	631a      	str	r2, [r3, #48]	; 0x30
 8001092:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001094:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8001098:	9202      	str	r2, [sp, #8]
 800109a:	9a02      	ldr	r2, [sp, #8]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800109c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800109e:	f042 0208 	orr.w	r2, r2, #8
 80010a2:	631a      	str	r2, [r3, #48]	; 0x30
 80010a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010a6:	f002 0208 	and.w	r2, r2, #8
 80010aa:	9203      	str	r2, [sp, #12]
 80010ac:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010b0:	f042 0210 	orr.w	r2, r2, #16
 80010b4:	631a      	str	r2, [r3, #48]	; 0x30
 80010b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010b8:	f002 0210 	and.w	r2, r2, #16
 80010bc:	9204      	str	r2, [sp, #16]
 80010be:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010c2:	f042 0220 	orr.w	r2, r2, #32
 80010c6:	631a      	str	r2, [r3, #48]	; 0x30
 80010c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010ca:	f002 0220 	and.w	r2, r2, #32
 80010ce:	9205      	str	r2, [sp, #20]
 80010d0:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010d8:	631a      	str	r2, [r3, #48]	; 0x30
 80010da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010dc:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80010e0:	9206      	str	r2, [sp, #24]
 80010e2:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010ea:	631a      	str	r2, [r3, #48]	; 0x30
 80010ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010ee:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80010f2:	9207      	str	r2, [sp, #28]
 80010f4:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80010f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010fc:	631a      	str	r2, [r3, #48]	; 0x30
 80010fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001104:	9308      	str	r3, [sp, #32]
 8001106:	9b08      	ldr	r3, [sp, #32]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001108:	2302      	movs	r3, #2
 800110a:	930a      	str	r3, [sp, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800110c:	2301      	movs	r3, #1
 800110e:	930b      	str	r3, [sp, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8001110:	2503      	movs	r5, #3
 8001112:	950c      	str	r5, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8001114:	230c      	movs	r3, #12
 8001116:	930d      	str	r3, [sp, #52]	; 0x34
  
  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8001118:	f24c 7303 	movw	r3, #50947	; 0xc703
 800111c:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;
 
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800111e:	a909      	add	r1, sp, #36	; 0x24
 8001120:	482b      	ldr	r0, [pc, #172]	; (80011d0 <BSP_SDRAM_MspInit+0x160>)
 8001122:	f003 ffc3 	bl	80050ac <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8001126:	f64f 7383 	movw	r3, #65411	; 0xff83
 800112a:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
      
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800112c:	a909      	add	r1, sp, #36	; 0x24
 800112e:	4829      	ldr	r0, [pc, #164]	; (80011d4 <BSP_SDRAM_MspInit+0x164>)
 8001130:	f003 ffbc 	bl	80050ac <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8001134:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001138:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
    
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800113a:	a909      	add	r1, sp, #36	; 0x24
 800113c:	4826      	ldr	r0, [pc, #152]	; (80011d8 <BSP_SDRAM_MspInit+0x168>)
 800113e:	f003 ffb5 	bl	80050ac <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 8001142:	f248 1337 	movw	r3, #33079	; 0x8137
 8001146:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001148:	a909      	add	r1, sp, #36	; 0x24
 800114a:	4824      	ldr	r0, [pc, #144]	; (80011dc <BSP_SDRAM_MspInit+0x16c>)
 800114c:	f003 ffae 	bl	80050ac <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8001150:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8001154:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8001156:	a909      	add	r1, sp, #36	; 0x24
 8001158:	4821      	ldr	r0, [pc, #132]	; (80011e0 <BSP_SDRAM_MspInit+0x170>)
 800115a:	f003 ffa7 	bl	80050ac <HAL_GPIO_Init>
  
  /* GPIOI configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 800115e:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8001162:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 8001164:	a909      	add	r1, sp, #36	; 0x24
 8001166:	481f      	ldr	r0, [pc, #124]	; (80011e4 <BSP_SDRAM_MspInit+0x174>)
 8001168:	f003 ffa0 	bl	80050ac <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800116c:	4b1e      	ldr	r3, [pc, #120]	; (80011e8 <BSP_SDRAM_MspInit+0x178>)
 800116e:	2400      	movs	r4, #0
 8001170:	649c      	str	r4, [r3, #72]	; 0x48
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8001172:	2280      	movs	r2, #128	; 0x80
 8001174:	64da      	str	r2, [r3, #76]	; 0x4c
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8001176:	f44f 7200 	mov.w	r2, #512	; 0x200
 800117a:	651a      	str	r2, [r3, #80]	; 0x50
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800117c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001180:	655a      	str	r2, [r3, #84]	; 0x54
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001182:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001186:	659a      	str	r2, [r3, #88]	; 0x58
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001188:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800118c:	65da      	str	r2, [r3, #92]	; 0x5c
  dma_handle.Init.Mode                = DMA_NORMAL;
 800118e:	661c      	str	r4, [r3, #96]	; 0x60
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8001190:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001194:	665a      	str	r2, [r3, #100]	; 0x64
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8001196:	669c      	str	r4, [r3, #104]	; 0x68
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001198:	66dd      	str	r5, [r3, #108]	; 0x6c
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800119a:	671c      	str	r4, [r3, #112]	; 0x70
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800119c:	675c      	str	r4, [r3, #116]	; 0x74
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 800119e:	461d      	mov	r5, r3
 80011a0:	4a12      	ldr	r2, [pc, #72]	; (80011ec <BSP_SDRAM_MspInit+0x17c>)
 80011a2:	f845 2f44 	str.w	r2, [r5, #68]!
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80011a6:	6335      	str	r5, [r6, #48]	; 0x30
 80011a8:	67de      	str	r6, [r3, #124]	; 0x7c
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80011aa:	4628      	mov	r0, r5
 80011ac:	f003 f904 	bl	80043b8 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80011b0:	4628      	mov	r0, r5
 80011b2:	f003 f89b 	bl	80042ec <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80011b6:	4622      	mov	r2, r4
 80011b8:	210f      	movs	r1, #15
 80011ba:	2038      	movs	r0, #56	; 0x38
 80011bc:	f002 ffd4 	bl	8004168 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80011c0:	2038      	movs	r0, #56	; 0x38
 80011c2:	f003 f807 	bl	80041d4 <HAL_NVIC_EnableIRQ>
}
 80011c6:	b00e      	add	sp, #56	; 0x38
 80011c8:	bd70      	pop	{r4, r5, r6, pc}
 80011ca:	bf00      	nop
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40020c00 	.word	0x40020c00
 80011d4:	40021000 	.word	0x40021000
 80011d8:	40021400 	.word	0x40021400
 80011dc:	40021800 	.word	0x40021800
 80011e0:	40021c00 	.word	0x40021c00
 80011e4:	40022000 	.word	0x40022000
 80011e8:	20000360 	.word	0x20000360
 80011ec:	40026410 	.word	0x40026410

080011f0 <BSP_SDRAM_Init>:
{ 
 80011f0:	b538      	push	{r3, r4, r5, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80011f2:	4c20      	ldr	r4, [pc, #128]	; (8001274 <BSP_SDRAM_Init+0x84>)
 80011f4:	4b20      	ldr	r3, [pc, #128]	; (8001278 <BSP_SDRAM_Init+0x88>)
 80011f6:	6123      	str	r3, [r4, #16]
  Timing.LoadToActiveDelay    = 2;
 80011f8:	2302      	movs	r3, #2
 80011fa:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
  Timing.ExitSelfRefreshDelay = 7;
 80011fe:	2107      	movs	r1, #7
 8001200:	f8c4 10a8 	str.w	r1, [r4, #168]	; 0xa8
  Timing.SelfRefreshTime      = 4;
 8001204:	2204      	movs	r2, #4
 8001206:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
  Timing.RowCycleDelay        = 7;
 800120a:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
  Timing.WriteRecoveryTime    = 2;
 800120e:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
  Timing.RPDelay              = 2;
 8001212:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
  Timing.RCDDelay             = 2;
 8001216:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 800121a:	2100      	movs	r1, #0
 800121c:	6161      	str	r1, [r4, #20]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800121e:	61a1      	str	r1, [r4, #24]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8001220:	61e2      	str	r2, [r4, #28]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8001222:	2320      	movs	r3, #32
 8001224:	6223      	str	r3, [r4, #32]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001226:	2340      	movs	r3, #64	; 0x40
 8001228:	6263      	str	r3, [r4, #36]	; 0x24
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800122a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800122e:	62a3      	str	r3, [r4, #40]	; 0x28
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001230:	62e1      	str	r1, [r4, #44]	; 0x2c
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8001232:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001236:	6323      	str	r3, [r4, #48]	; 0x30
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8001238:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800123c:	6363      	str	r3, [r4, #52]	; 0x34
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800123e:	63a1      	str	r1, [r4, #56]	; 0x38
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8001240:	f104 0510 	add.w	r5, r4, #16
 8001244:	4628      	mov	r0, r5
 8001246:	f7ff ff13 	bl	8001070 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800124a:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
 800124e:	4628      	mov	r0, r5
 8001250:	f005 fcb5 	bl	8006bbe <HAL_SDRAM_Init>
 8001254:	b148      	cbz	r0, 800126a <BSP_SDRAM_Init+0x7a>
    sdramstatus = SDRAM_ERROR;
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <BSP_SDRAM_Init+0x8c>)
 8001258:	2201      	movs	r2, #1
 800125a:	701a      	strb	r2, [r3, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800125c:	f240 6003 	movw	r0, #1539	; 0x603
 8001260:	f7ff feba 	bl	8000fd8 <BSP_SDRAM_Initialization_sequence>
}
 8001264:	4b05      	ldr	r3, [pc, #20]	; (800127c <BSP_SDRAM_Init+0x8c>)
 8001266:	7818      	ldrb	r0, [r3, #0]
 8001268:	bd38      	pop	{r3, r4, r5, pc}
    sdramstatus = SDRAM_OK;
 800126a:	4b04      	ldr	r3, [pc, #16]	; (800127c <BSP_SDRAM_Init+0x8c>)
 800126c:	2200      	movs	r2, #0
 800126e:	701a      	strb	r2, [r3, #0]
 8001270:	e7f4      	b.n	800125c <BSP_SDRAM_Init+0x6c>
 8001272:	bf00      	nop
 8001274:	20000360 	.word	0x20000360
 8001278:	a0000140 	.word	0xa0000140
 800127c:	20000008 	.word	0x20000008

08001280 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001280:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8001284:	b97b      	cbnz	r3, 80012a6 <osKernelInitialize+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001286:	f3ef 8310 	mrs	r3, PRIMASK
 800128a:	b913      	cbnz	r3, 8001292 <osKernelInitialize+0x12>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800128c:	f3ef 8311 	mrs	r3, BASEPRI
 8001290:	b11b      	cbz	r3, 800129a <osKernelInitialize+0x1a>
 8001292:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <osKernelInitialize+0x38>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2b02      	cmp	r3, #2
 8001298:	d008      	beq.n	80012ac <osKernelInitialize+0x2c>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800129a:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <osKernelInitialize+0x38>)
 800129c:	6818      	ldr	r0, [r3, #0]
 800129e:	b940      	cbnz	r0, 80012b2 <osKernelInitialize+0x32>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80012a0:	2201      	movs	r2, #1
 80012a2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80012a4:	4770      	bx	lr
    stat = osErrorISR;
 80012a6:	f06f 0005 	mvn.w	r0, #5
 80012aa:	4770      	bx	lr
 80012ac:	f06f 0005 	mvn.w	r0, #5
 80012b0:	4770      	bx	lr
    } else {
      stat = osError;
 80012b2:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 80012b6:	4770      	bx	lr
 80012b8:	20000480 	.word	0x20000480

080012bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80012bc:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80012be:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80012c2:	b9a3      	cbnz	r3, 80012ee <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80012c4:	f3ef 8310 	mrs	r3, PRIMASK
 80012c8:	b913      	cbnz	r3, 80012d0 <osKernelStart+0x14>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80012ca:	f3ef 8311 	mrs	r3, BASEPRI
 80012ce:	b11b      	cbz	r3, 80012d8 <osKernelStart+0x1c>
 80012d0:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <osKernelStart+0x44>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d00d      	beq.n	80012f4 <osKernelStart+0x38>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 80012d8:	4b09      	ldr	r3, [pc, #36]	; (8001300 <osKernelStart+0x44>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d10c      	bne.n	80012fa <osKernelStart+0x3e>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80012e0:	4b07      	ldr	r3, [pc, #28]	; (8001300 <osKernelStart+0x44>)
 80012e2:	2202      	movs	r2, #2
 80012e4:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80012e6:	f000 ff4f 	bl	8002188 <vTaskStartScheduler>
      stat = osOK;
 80012ea:	2000      	movs	r0, #0
      stat = osError;
    }
  }

  return (stat);
}
 80012ec:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 80012ee:	f06f 0005 	mvn.w	r0, #5
 80012f2:	e7fb      	b.n	80012ec <osKernelStart+0x30>
 80012f4:	f06f 0005 	mvn.w	r0, #5
 80012f8:	e7f8      	b.n	80012ec <osKernelStart+0x30>
      stat = osError;
 80012fa:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 80012fe:	e7f5      	b.n	80012ec <osKernelStart+0x30>
 8001300:	20000480 	.word	0x20000480

08001304 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001306:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001308:	2400      	movs	r4, #0
 800130a:	9405      	str	r4, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800130c:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8001310:	2c00      	cmp	r4, #0
 8001312:	d138      	bne.n	8001386 <osThreadNew+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001314:	f3ef 8310 	mrs	r3, PRIMASK
 8001318:	b913      	cbnz	r3, 8001320 <osThreadNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800131a:	f3ef 8311 	mrs	r3, BASEPRI
 800131e:	b11b      	cbz	r3, 8001328 <osThreadNew+0x24>
 8001320:	4b2d      	ldr	r3, [pc, #180]	; (80013d8 <osThreadNew+0xd4>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b02      	cmp	r3, #2
 8001326:	d02e      	beq.n	8001386 <osThreadNew+0x82>
 8001328:	b368      	cbz	r0, 8001386 <osThreadNew+0x82>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800132a:	b322      	cbz	r2, 8001376 <osThreadNew+0x72>
      if (attr->name != NULL) {
 800132c:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800132e:	6993      	ldr	r3, [r2, #24]
 8001330:	b903      	cbnz	r3, 8001334 <osThreadNew+0x30>
    prio  = (UBaseType_t)osPriorityNormal;
 8001332:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001334:	1e5c      	subs	r4, r3, #1
 8001336:	2c37      	cmp	r4, #55	; 0x37
 8001338:	d849      	bhi.n	80013ce <osThreadNew+0xca>
 800133a:	6854      	ldr	r4, [r2, #4]
 800133c:	f014 0f01 	tst.w	r4, #1
 8001340:	d147      	bne.n	80013d2 <osThreadNew+0xce>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8001342:	6956      	ldr	r6, [r2, #20]
 8001344:	b16e      	cbz	r6, 8001362 <osThreadNew+0x5e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001346:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800134a:	6894      	ldr	r4, [r2, #8]
 800134c:	b12c      	cbz	r4, 800135a <osThreadNew+0x56>
 800134e:	68d7      	ldr	r7, [r2, #12]
 8001350:	2f5b      	cmp	r7, #91	; 0x5b
 8001352:	d902      	bls.n	800135a <osThreadNew+0x56>
 8001354:	6917      	ldr	r7, [r2, #16]
 8001356:	b107      	cbz	r7, 800135a <osThreadNew+0x56>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001358:	b9c6      	cbnz	r6, 800138c <osThreadNew+0x88>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800135a:	b12c      	cbz	r4, 8001368 <osThreadNew+0x64>
    mem  = -1;
 800135c:	f04f 34ff 	mov.w	r4, #4294967295
 8001360:	e00e      	b.n	8001380 <osThreadNew+0x7c>
    stack = configMINIMAL_STACK_SIZE;
 8001362:	f04f 0c80 	mov.w	ip, #128	; 0x80
 8001366:	e7f0      	b.n	800134a <osThreadNew+0x46>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001368:	68d4      	ldr	r4, [r2, #12]
 800136a:	b98c      	cbnz	r4, 8001390 <osThreadNew+0x8c>
 800136c:	6914      	ldr	r4, [r2, #16]
 800136e:	b194      	cbz	r4, 8001396 <osThreadNew+0x92>
    mem  = -1;
 8001370:	f04f 34ff 	mov.w	r4, #4294967295
 8001374:	e004      	b.n	8001380 <osThreadNew+0x7c>
    name = NULL;
 8001376:	4615      	mov	r5, r2
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 8001378:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 800137a:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 800137c:	f04f 0c80 	mov.w	ip, #128	; 0x80
    }

    if (mem == 1) {
 8001380:	2c01      	cmp	r4, #1
 8001382:	d00a      	beq.n	800139a <osThreadNew+0x96>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                    (StaticTask_t *)attr->cb_mem);
    }
    else {
      if (mem == 0) {
 8001384:	b1ac      	cbz	r4, 80013b2 <osThreadNew+0xae>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001386:	9805      	ldr	r0, [sp, #20]
}
 8001388:	b007      	add	sp, #28
 800138a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 800138c:	2401      	movs	r4, #1
 800138e:	e7f7      	b.n	8001380 <osThreadNew+0x7c>
    mem  = -1;
 8001390:	f04f 34ff 	mov.w	r4, #4294967295
 8001394:	e7f4      	b.n	8001380 <osThreadNew+0x7c>
          mem = 0;
 8001396:	2400      	movs	r4, #0
 8001398:	e7f2      	b.n	8001380 <osThreadNew+0x7c>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800139a:	6914      	ldr	r4, [r2, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800139c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800139e:	9202      	str	r2, [sp, #8]
 80013a0:	9401      	str	r4, [sp, #4]
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	460b      	mov	r3, r1
 80013a6:	4662      	mov	r2, ip
 80013a8:	4629      	mov	r1, r5
 80013aa:	f000 fe77 	bl	800209c <xTaskCreateStatic>
 80013ae:	9005      	str	r0, [sp, #20]
 80013b0:	e7e9      	b.n	8001386 <osThreadNew+0x82>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80013b2:	aa05      	add	r2, sp, #20
 80013b4:	9201      	str	r2, [sp, #4]
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	460b      	mov	r3, r1
 80013ba:	fa1f f28c 	uxth.w	r2, ip
 80013be:	4629      	mov	r1, r5
 80013c0:	f000 fead 	bl	800211e <xTaskCreate>
 80013c4:	2801      	cmp	r0, #1
 80013c6:	d0de      	beq.n	8001386 <osThreadNew+0x82>
          hTask = NULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	9305      	str	r3, [sp, #20]
 80013cc:	e7db      	b.n	8001386 <osThreadNew+0x82>
        return (NULL);
 80013ce:	2000      	movs	r0, #0
 80013d0:	e7da      	b.n	8001388 <osThreadNew+0x84>
 80013d2:	2000      	movs	r0, #0
 80013d4:	e7d8      	b.n	8001388 <osThreadNew+0x84>
 80013d6:	bf00      	nop
 80013d8:	20000480 	.word	0x20000480

080013dc <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 80013dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013e0:	b085      	sub	sp, #20
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80013e2:	f3ef 8305 	mrs	r3, IPSR
 80013e6:	9301      	str	r3, [sp, #4]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d14c      	bne.n	8001486 <osThreadFlagsWait+0xaa>
 80013ec:	4681      	mov	r9, r0
 80013ee:	468a      	mov	sl, r1
 80013f0:	4617      	mov	r7, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013f2:	f3ef 8310 	mrs	r3, PRIMASK
 80013f6:	b913      	cbnz	r3, 80013fe <osThreadFlagsWait+0x22>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80013f8:	f3ef 8311 	mrs	r3, BASEPRI
 80013fc:	b11b      	cbz	r3, 8001406 <osThreadFlagsWait+0x2a>
 80013fe:	4b29      	ldr	r3, [pc, #164]	; (80014a4 <osThreadFlagsWait+0xc8>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2b02      	cmp	r3, #2
 8001404:	d045      	beq.n	8001492 <osThreadFlagsWait+0xb6>
    rflags = (uint32_t)osErrorISR;
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8001406:	f1b9 0f00 	cmp.w	r9, #0
 800140a:	db45      	blt.n	8001498 <osThreadFlagsWait+0xbc>
    rflags = (uint32_t)osErrorParameter;
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800140c:	f01a 0f02 	tst.w	sl, #2
 8001410:	d007      	beq.n	8001422 <osThreadFlagsWait+0x46>
      clear = 0U;
 8001412:	f8dd 8004 	ldr.w	r8, [sp, #4]
    }

    rflags = 0U;
    tout   = timeout;

    t0 = xTaskGetTickCount();
 8001416:	f000 ff0d 	bl	8002234 <xTaskGetTickCount>
 800141a:	4683      	mov	fp, r0
    tout   = timeout;
 800141c:	463e      	mov	r6, r7
    rflags = 0U;
 800141e:	9d01      	ldr	r5, [sp, #4]
 8001420:	e023      	b.n	800146a <osThreadFlagsWait+0x8e>
      clear = flags;
 8001422:	46c8      	mov	r8, r9
 8001424:	e7f7      	b.n	8001416 <osThreadFlagsWait+0x3a>
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);

      if (rval == pdPASS) {
        rflags &= flags;
 8001426:	ea05 0509 	and.w	r5, r5, r9
        rflags |= nval;
 800142a:	9b03      	ldr	r3, [sp, #12]
 800142c:	431d      	orrs	r5, r3

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800142e:	f01a 0f01 	tst.w	sl, #1
 8001432:	d00d      	beq.n	8001450 <osThreadFlagsWait+0x74>
          if ((flags & rflags) == flags) {
 8001434:	ea39 0305 	bics.w	r3, r9, r5
 8001438:	d027      	beq.n	800148a <osThreadFlagsWait+0xae>
            break;
          } else {
            if (timeout == 0U) {
 800143a:	b387      	cbz	r7, 800149e <osThreadFlagsWait+0xc2>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800143c:	f000 fefa 	bl	8002234 <xTaskGetTickCount>
 8001440:	eba0 030b 	sub.w	r3, r0, fp

        if (td > tout) {
 8001444:	429e      	cmp	r6, r3
 8001446:	d30b      	bcc.n	8001460 <osThreadFlagsWait+0x84>
          tout  = 0;
        } else {
          tout -= td;
 8001448:	ebab 0000 	sub.w	r0, fp, r0
 800144c:	4406      	add	r6, r0
 800144e:	e00b      	b.n	8001468 <osThreadFlagsWait+0x8c>
          if ((flags & rflags) != 0) {
 8001450:	ea19 0f05 	tst.w	r9, r5
 8001454:	d119      	bne.n	800148a <osThreadFlagsWait+0xae>
            if (timeout == 0U) {
 8001456:	2f00      	cmp	r7, #0
 8001458:	d1f0      	bne.n	800143c <osThreadFlagsWait+0x60>
              rflags = (uint32_t)osErrorResource;
 800145a:	f06f 0502 	mvn.w	r5, #2
    }
    while (rval != pdFAIL);
  }

  /* Return flags before clearing */
  return (rflags);
 800145e:	e014      	b.n	800148a <osThreadFlagsWait+0xae>
          tout  = 0;
 8001460:	9e01      	ldr	r6, [sp, #4]
 8001462:	e001      	b.n	8001468 <osThreadFlagsWait+0x8c>
          rflags = (uint32_t)osErrorTimeout;
 8001464:	f06f 0501 	mvn.w	r5, #1
    while (rval != pdFAIL);
 8001468:	b17c      	cbz	r4, 800148a <osThreadFlagsWait+0xae>
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800146a:	4633      	mov	r3, r6
 800146c:	aa03      	add	r2, sp, #12
 800146e:	4641      	mov	r1, r8
 8001470:	2000      	movs	r0, #0
 8001472:	f001 f995 	bl	80027a0 <xTaskNotifyWait>
 8001476:	4604      	mov	r4, r0
      if (rval == pdPASS) {
 8001478:	2801      	cmp	r0, #1
 800147a:	d0d4      	beq.n	8001426 <osThreadFlagsWait+0x4a>
        if (timeout == 0) {
 800147c:	2f00      	cmp	r7, #0
 800147e:	d1f1      	bne.n	8001464 <osThreadFlagsWait+0x88>
          rflags = (uint32_t)osErrorResource;
 8001480:	f06f 0502 	mvn.w	r5, #2
 8001484:	e7f0      	b.n	8001468 <osThreadFlagsWait+0x8c>
    rflags = (uint32_t)osErrorISR;
 8001486:	f06f 0505 	mvn.w	r5, #5
}
 800148a:	4628      	mov	r0, r5
 800148c:	b005      	add	sp, #20
 800148e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rflags = (uint32_t)osErrorISR;
 8001492:	f06f 0505 	mvn.w	r5, #5
 8001496:	e7f8      	b.n	800148a <osThreadFlagsWait+0xae>
    rflags = (uint32_t)osErrorParameter;
 8001498:	f06f 0503 	mvn.w	r5, #3
 800149c:	e7f5      	b.n	800148a <osThreadFlagsWait+0xae>
              rflags = (uint32_t)osErrorResource;
 800149e:	f06f 0502 	mvn.w	r5, #2
 80014a2:	e7f2      	b.n	800148a <osThreadFlagsWait+0xae>
 80014a4:	20000480 	.word	0x20000480

080014a8 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 80014a8:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80014aa:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80014ae:	b983      	cbnz	r3, 80014d2 <osDelay+0x2a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80014b0:	f3ef 8310 	mrs	r3, PRIMASK
 80014b4:	b913      	cbnz	r3, 80014bc <osDelay+0x14>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80014b6:	f3ef 8311 	mrs	r3, BASEPRI
 80014ba:	b11b      	cbz	r3, 80014c4 <osDelay+0x1c>
 80014bc:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <osDelay+0x38>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d009      	beq.n	80014d8 <osDelay+0x30>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 80014c4:	b908      	cbnz	r0, 80014ca <osDelay+0x22>
    stat = osOK;
 80014c6:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 80014c8:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 80014ca:	f000 ffc1 	bl	8002450 <vTaskDelay>
    stat = osOK;
 80014ce:	2000      	movs	r0, #0
 80014d0:	e7fa      	b.n	80014c8 <osDelay+0x20>
    stat = osErrorISR;
 80014d2:	f06f 0005 	mvn.w	r0, #5
 80014d6:	e7f7      	b.n	80014c8 <osDelay+0x20>
 80014d8:	f06f 0005 	mvn.w	r0, #5
 80014dc:	e7f4      	b.n	80014c8 <osDelay+0x20>
 80014de:	bf00      	nop
 80014e0:	20000480 	.word	0x20000480

080014e4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80014e4:	b570      	push	{r4, r5, r6, lr}
 80014e6:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80014e8:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d147      	bne.n	8001580 <osMessageQueueNew+0x9c>
 80014f0:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80014f2:	f3ef 8310 	mrs	r3, PRIMASK
 80014f6:	b913      	cbnz	r3, 80014fe <osMessageQueueNew+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80014f8:	f3ef 8311 	mrs	r3, BASEPRI
 80014fc:	b11b      	cbz	r3, 8001506 <osMessageQueueNew+0x22>
 80014fe:	4b25      	ldr	r3, [pc, #148]	; (8001594 <osMessageQueueNew+0xb0>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2b02      	cmp	r3, #2
 8001504:	d040      	beq.n	8001588 <osMessageQueueNew+0xa4>
 8001506:	1e0b      	subs	r3, r1, #0
 8001508:	bf18      	it	ne
 800150a:	2301      	movne	r3, #1
 800150c:	2800      	cmp	r0, #0
 800150e:	d03d      	beq.n	800158c <osMessageQueueNew+0xa8>
 8001510:	2b00      	cmp	r3, #0
 8001512:	d03b      	beq.n	800158c <osMessageQueueNew+0xa8>
    mem = -1;

    if (attr != NULL) {
 8001514:	b36c      	cbz	r4, 8001572 <osMessageQueueNew+0x8e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8001516:	68a3      	ldr	r3, [r4, #8]
 8001518:	b14b      	cbz	r3, 800152e <osMessageQueueNew+0x4a>
 800151a:	68e2      	ldr	r2, [r4, #12]
 800151c:	2a4f      	cmp	r2, #79	; 0x4f
 800151e:	d906      	bls.n	800152e <osMessageQueueNew+0x4a>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8001520:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8001522:	b122      	cbz	r2, 800152e <osMessageQueueNew+0x4a>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8001524:	fb01 f500 	mul.w	r5, r1, r0
 8001528:	6966      	ldr	r6, [r4, #20]
 800152a:	42ae      	cmp	r6, r5
 800152c:	d21b      	bcs.n	8001566 <osMessageQueueNew+0x82>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800152e:	b173      	cbz	r3, 800154e <osMessageQueueNew+0x6a>
    mem = -1;
 8001530:	f04f 33ff 	mov.w	r3, #4294967295

    if (mem == 1) {
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
    }
    else {
      if (mem == 0) {
 8001534:	bb63      	cbnz	r3, 8001590 <osMessageQueueNew+0xac>
        hQueue = xQueueCreate (msg_count, msg_size);
 8001536:	2200      	movs	r2, #0
 8001538:	f000 f9e3 	bl	8001902 <xQueueGenericCreate>
 800153c:	4605      	mov	r5, r0
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800153e:	b305      	cbz	r5, 8001582 <osMessageQueueNew+0x9e>
      if (attr != NULL) {
 8001540:	b104      	cbz	r4, 8001544 <osMessageQueueNew+0x60>
        name = attr->name;
 8001542:	6824      	ldr	r4, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 8001544:	4621      	mov	r1, r4
 8001546:	4628      	mov	r0, r5
 8001548:	f000 fbf4 	bl	8001d34 <vQueueAddToRegistry>
 800154c:	e019      	b.n	8001582 <osMessageQueueNew+0x9e>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800154e:	68e3      	ldr	r3, [r4, #12]
 8001550:	b98b      	cbnz	r3, 8001576 <osMessageQueueNew+0x92>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8001552:	6923      	ldr	r3, [r4, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8001554:	b113      	cbz	r3, 800155c <osMessageQueueNew+0x78>
    mem = -1;
 8001556:	f04f 33ff 	mov.w	r3, #4294967295
 800155a:	e7eb      	b.n	8001534 <osMessageQueueNew+0x50>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800155c:	6963      	ldr	r3, [r4, #20]
 800155e:	b16b      	cbz	r3, 800157c <osMessageQueueNew+0x98>
    mem = -1;
 8001560:	f04f 33ff 	mov.w	r3, #4294967295
 8001564:	e7e6      	b.n	8001534 <osMessageQueueNew+0x50>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8001566:	2500      	movs	r5, #0
 8001568:	9500      	str	r5, [sp, #0]
 800156a:	f000 f96d 	bl	8001848 <xQueueGenericCreateStatic>
 800156e:	4605      	mov	r5, r0
 8001570:	e7e5      	b.n	800153e <osMessageQueueNew+0x5a>
      mem = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	e7de      	b.n	8001534 <osMessageQueueNew+0x50>
    mem = -1;
 8001576:	f04f 33ff 	mov.w	r3, #4294967295
 800157a:	e7db      	b.n	8001534 <osMessageQueueNew+0x50>
          mem = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	e7d9      	b.n	8001534 <osMessageQueueNew+0x50>
  hQueue = NULL;
 8001580:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8001582:	4628      	mov	r0, r5
 8001584:	b002      	add	sp, #8
 8001586:	bd70      	pop	{r4, r5, r6, pc}
  hQueue = NULL;
 8001588:	2500      	movs	r5, #0
 800158a:	e7fa      	b.n	8001582 <osMessageQueueNew+0x9e>
 800158c:	2500      	movs	r5, #0
 800158e:	e7f8      	b.n	8001582 <osMessageQueueNew+0x9e>
 8001590:	2500      	movs	r5, #0
  return ((osMessageQueueId_t)hQueue);
 8001592:	e7f6      	b.n	8001582 <osMessageQueueNew+0x9e>
 8001594:	20000480 	.word	0x20000480

08001598 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001598:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800159a:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <vApplicationGetIdleTaskMemory+0x18>)
 800159c:	1d1c      	adds	r4, r3, #4
 800159e:	6004      	str	r4, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80015a0:	3360      	adds	r3, #96	; 0x60
 80015a2:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80015a4:	2380      	movs	r3, #128	; 0x80
 80015a6:	6013      	str	r3, [r2, #0]
}
 80015a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	20000480 	.word	0x20000480

080015b4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80015b4:	b410      	push	{r4}
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <vApplicationGetTimerTaskMemory+0x1c>)
 80015b8:	f503 7418 	add.w	r4, r3, #608	; 0x260
 80015bc:	6004      	str	r4, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80015be:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80015c2:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80015c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015c8:	6013      	str	r3, [r2, #0]
}
 80015ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	20000480 	.word	0x20000480

080015d4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80015d4:	f100 0308 	add.w	r3, r0, #8
 80015d8:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80015da:	f04f 32ff 	mov.w	r2, #4294967295
 80015de:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80015e0:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80015e2:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80015e4:	2300      	movs	r3, #0
 80015e6:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80015e8:	4770      	bx	lr

080015ea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80015ee:	4770      	bx	lr

080015f0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80015f0:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80015f2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80015f4:	689a      	ldr	r2, [r3, #8]
 80015f6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80015f8:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80015fa:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80015fc:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80015fe:	6803      	ldr	r3, [r0, #0]
 8001600:	3301      	adds	r3, #1
 8001602:	6003      	str	r3, [r0, #0]
}
 8001604:	4770      	bx	lr

08001606 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001606:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001608:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800160a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800160e:	d011      	beq.n	8001634 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001610:	f100 0308 	add.w	r3, r0, #8
 8001614:	461c      	mov	r4, r3
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	42aa      	cmp	r2, r5
 800161c:	d9fa      	bls.n	8001614 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800161e:	6863      	ldr	r3, [r4, #4]
 8001620:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001622:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001624:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001626:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001628:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800162a:	6803      	ldr	r3, [r0, #0]
 800162c:	3301      	adds	r3, #1
 800162e:	6003      	str	r3, [r0, #0]
}
 8001630:	bc30      	pop	{r4, r5}
 8001632:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8001634:	6904      	ldr	r4, [r0, #16]
 8001636:	e7f2      	b.n	800161e <vListInsert+0x18>

08001638 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001638:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800163a:	6841      	ldr	r1, [r0, #4]
 800163c:	6882      	ldr	r2, [r0, #8]
 800163e:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001640:	6841      	ldr	r1, [r0, #4]
 8001642:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001644:	685a      	ldr	r2, [r3, #4]
 8001646:	4282      	cmp	r2, r0
 8001648:	d006      	beq.n	8001658 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800164a:	2200      	movs	r2, #0
 800164c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	3a01      	subs	r2, #1
 8001652:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001654:	6818      	ldr	r0, [r3, #0]
}
 8001656:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001658:	6882      	ldr	r2, [r0, #8]
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	e7f5      	b.n	800164a <uxListRemove+0x12>

0800165e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800165e:	b510      	push	{r4, lr}
 8001660:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001662:	f001 fb97 	bl	8002d94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001666:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001668:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800166a:	429a      	cmp	r2, r3
 800166c:	d004      	beq.n	8001678 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800166e:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8001670:	f001 fbb6 	bl	8002de0 <vPortExitCritical>

	return xReturn;
}
 8001674:	4620      	mov	r0, r4
 8001676:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8001678:	2401      	movs	r4, #1
 800167a:	e7f9      	b.n	8001670 <prvIsQueueFull+0x12>

0800167c <prvIsQueueEmpty>:
{
 800167c:	b510      	push	{r4, lr}
 800167e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8001680:	f001 fb88 	bl	8002d94 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001684:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001686:	b923      	cbnz	r3, 8001692 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8001688:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 800168a:	f001 fba9 	bl	8002de0 <vPortExitCritical>
}
 800168e:	4620      	mov	r0, r4
 8001690:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 8001692:	2400      	movs	r4, #0
 8001694:	e7f9      	b.n	800168a <prvIsQueueEmpty+0xe>

08001696 <prvCopyDataToQueue>:
{
 8001696:	b570      	push	{r4, r5, r6, lr}
 8001698:	4604      	mov	r4, r0
 800169a:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800169c:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800169e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80016a0:	b95a      	cbnz	r2, 80016ba <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80016a2:	6803      	ldr	r3, [r0, #0]
 80016a4:	b11b      	cbz	r3, 80016ae <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 80016a6:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80016a8:	3601      	adds	r6, #1
 80016aa:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80016ac:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80016ae:	6880      	ldr	r0, [r0, #8]
 80016b0:	f001 f828 	bl	8002704 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	60a3      	str	r3, [r4, #8]
 80016b8:	e7f6      	b.n	80016a8 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 80016ba:	b96d      	cbnz	r5, 80016d8 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80016bc:	6840      	ldr	r0, [r0, #4]
 80016be:	f006 fe62 	bl	8008386 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80016c2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80016c4:	6863      	ldr	r3, [r4, #4]
 80016c6:	4413      	add	r3, r2
 80016c8:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80016ca:	68a2      	ldr	r2, [r4, #8]
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d319      	bcc.n	8001704 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80016d0:	6823      	ldr	r3, [r4, #0]
 80016d2:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 80016d4:	4628      	mov	r0, r5
 80016d6:	e7e7      	b.n	80016a8 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80016d8:	68c0      	ldr	r0, [r0, #12]
 80016da:	f006 fe54 	bl	8008386 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80016de:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80016e0:	4251      	negs	r1, r2
 80016e2:	68e3      	ldr	r3, [r4, #12]
 80016e4:	1a9b      	subs	r3, r3, r2
 80016e6:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80016e8:	6822      	ldr	r2, [r4, #0]
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d202      	bcs.n	80016f4 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80016ee:	68a3      	ldr	r3, [r4, #8]
 80016f0:	440b      	add	r3, r1
 80016f2:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80016f4:	2d02      	cmp	r5, #2
 80016f6:	d001      	beq.n	80016fc <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 80016f8:	2000      	movs	r0, #0
 80016fa:	e7d5      	b.n	80016a8 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80016fc:	b126      	cbz	r6, 8001708 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 80016fe:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8001700:	2000      	movs	r0, #0
 8001702:	e7d1      	b.n	80016a8 <prvCopyDataToQueue+0x12>
 8001704:	4628      	mov	r0, r5
 8001706:	e7cf      	b.n	80016a8 <prvCopyDataToQueue+0x12>
 8001708:	2000      	movs	r0, #0
 800170a:	e7cd      	b.n	80016a8 <prvCopyDataToQueue+0x12>

0800170c <prvCopyDataFromQueue>:
{
 800170c:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800170e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001710:	b16a      	cbz	r2, 800172e <prvCopyDataFromQueue+0x22>
{
 8001712:	b510      	push	{r4, lr}
 8001714:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001716:	68d9      	ldr	r1, [r3, #12]
 8001718:	4411      	add	r1, r2
 800171a:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800171c:	689c      	ldr	r4, [r3, #8]
 800171e:	42a1      	cmp	r1, r4
 8001720:	d301      	bcc.n	8001726 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001722:	6819      	ldr	r1, [r3, #0]
 8001724:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001726:	68d9      	ldr	r1, [r3, #12]
 8001728:	f006 fe2d 	bl	8008386 <memcpy>
}
 800172c:	bd10      	pop	{r4, pc}
 800172e:	4770      	bx	lr

08001730 <prvUnlockQueue>:
{
 8001730:	b538      	push	{r3, r4, r5, lr}
 8001732:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8001734:	f001 fb2e 	bl	8002d94 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8001738:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 800173c:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800173e:	e001      	b.n	8001744 <prvUnlockQueue+0x14>
			--cTxLock;
 8001740:	3c01      	subs	r4, #1
 8001742:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001744:	2c00      	cmp	r4, #0
 8001746:	dd0a      	ble.n	800175e <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001748:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800174a:	b143      	cbz	r3, 800175e <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800174c:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001750:	f000 ff2a 	bl	80025a8 <xTaskRemoveFromEventList>
 8001754:	2800      	cmp	r0, #0
 8001756:	d0f3      	beq.n	8001740 <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8001758:	f000 ffbc 	bl	80026d4 <vTaskMissedYield>
 800175c:	e7f0      	b.n	8001740 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 800175e:	23ff      	movs	r3, #255	; 0xff
 8001760:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8001764:	f001 fb3c 	bl	8002de0 <vPortExitCritical>
	taskENTER_CRITICAL();
 8001768:	f001 fb14 	bl	8002d94 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800176c:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8001770:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001772:	e001      	b.n	8001778 <prvUnlockQueue+0x48>
				--cRxLock;
 8001774:	3c01      	subs	r4, #1
 8001776:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001778:	2c00      	cmp	r4, #0
 800177a:	dd0a      	ble.n	8001792 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800177c:	692b      	ldr	r3, [r5, #16]
 800177e:	b143      	cbz	r3, 8001792 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001780:	f105 0010 	add.w	r0, r5, #16
 8001784:	f000 ff10 	bl	80025a8 <xTaskRemoveFromEventList>
 8001788:	2800      	cmp	r0, #0
 800178a:	d0f3      	beq.n	8001774 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 800178c:	f000 ffa2 	bl	80026d4 <vTaskMissedYield>
 8001790:	e7f0      	b.n	8001774 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8001792:	23ff      	movs	r3, #255	; 0xff
 8001794:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8001798:	f001 fb22 	bl	8002de0 <vPortExitCritical>
}
 800179c:	bd38      	pop	{r3, r4, r5, pc}

0800179e <xQueueGenericReset>:
{
 800179e:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 80017a0:	b1e0      	cbz	r0, 80017dc <xQueueGenericReset+0x3e>
 80017a2:	460d      	mov	r5, r1
 80017a4:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80017a6:	f001 faf5 	bl	8002d94 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80017aa:	6823      	ldr	r3, [r4, #0]
 80017ac:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80017ae:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80017b0:	fb01 3002 	mla	r0, r1, r2, r3
 80017b4:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80017b6:	2000      	movs	r0, #0
 80017b8:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80017ba:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80017bc:	3a01      	subs	r2, #1
 80017be:	fb02 3301 	mla	r3, r2, r1, r3
 80017c2:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80017c4:	23ff      	movs	r3, #255	; 0xff
 80017c6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80017ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80017ce:	bb0d      	cbnz	r5, 8001814 <xQueueGenericReset+0x76>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80017d0:	6923      	ldr	r3, [r4, #16]
 80017d2:	b973      	cbnz	r3, 80017f2 <xQueueGenericReset+0x54>
	taskEXIT_CRITICAL();
 80017d4:	f001 fb04 	bl	8002de0 <vPortExitCritical>
}
 80017d8:	2001      	movs	r0, #1
 80017da:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80017dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017e0:	b672      	cpsid	i
 80017e2:	f383 8811 	msr	BASEPRI, r3
 80017e6:	f3bf 8f6f 	isb	sy
 80017ea:	f3bf 8f4f 	dsb	sy
 80017ee:	b662      	cpsie	i
	configASSERT( pxQueue );
 80017f0:	e7fe      	b.n	80017f0 <xQueueGenericReset+0x52>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80017f2:	f104 0010 	add.w	r0, r4, #16
 80017f6:	f000 fed7 	bl	80025a8 <xTaskRemoveFromEventList>
 80017fa:	2800      	cmp	r0, #0
 80017fc:	d0ea      	beq.n	80017d4 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 80017fe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001806:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800180a:	f3bf 8f4f 	dsb	sy
 800180e:	f3bf 8f6f 	isb	sy
 8001812:	e7df      	b.n	80017d4 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001814:	f104 0010 	add.w	r0, r4, #16
 8001818:	f7ff fedc 	bl	80015d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800181c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001820:	f7ff fed8 	bl	80015d4 <vListInitialise>
 8001824:	e7d6      	b.n	80017d4 <xQueueGenericReset+0x36>

08001826 <prvInitialiseNewQueue>:
{
 8001826:	b538      	push	{r3, r4, r5, lr}
 8001828:	461d      	mov	r5, r3
 800182a:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 800182c:	460b      	mov	r3, r1
 800182e:	b949      	cbnz	r1, 8001844 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001830:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8001832:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001834:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001836:	2101      	movs	r1, #1
 8001838:	4620      	mov	r0, r4
 800183a:	f7ff ffb0 	bl	800179e <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800183e:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 8001842:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001844:	6022      	str	r2, [r4, #0]
 8001846:	e7f4      	b.n	8001832 <prvInitialiseNewQueue+0xc>

08001848 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001848:	b950      	cbnz	r0, 8001860 <xQueueGenericCreateStatic+0x18>
 800184a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800184e:	b672      	cpsid	i
 8001850:	f383 8811 	msr	BASEPRI, r3
 8001854:	f3bf 8f6f 	isb	sy
 8001858:	f3bf 8f4f 	dsb	sy
 800185c:	b662      	cpsie	i
 800185e:	e7fe      	b.n	800185e <xQueueGenericCreateStatic+0x16>
	{
 8001860:	b510      	push	{r4, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	461c      	mov	r4, r3
		configASSERT( pxStaticQueue != NULL );
 8001866:	b193      	cbz	r3, 800188e <xQueueGenericCreateStatic+0x46>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001868:	1e0b      	subs	r3, r1, #0
 800186a:	bf18      	it	ne
 800186c:	2301      	movne	r3, #1
 800186e:	2a00      	cmp	r2, #0
 8001870:	bf08      	it	eq
 8001872:	f043 0301 	orreq.w	r3, r3, #1
 8001876:	b9ab      	cbnz	r3, 80018a4 <xQueueGenericCreateStatic+0x5c>
 8001878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800187c:	b672      	cpsid	i
 800187e:	f383 8811 	msr	BASEPRI, r3
 8001882:	f3bf 8f6f 	isb	sy
 8001886:	f3bf 8f4f 	dsb	sy
 800188a:	b662      	cpsie	i
 800188c:	e7fe      	b.n	800188c <xQueueGenericCreateStatic+0x44>
 800188e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001892:	b672      	cpsid	i
 8001894:	f383 8811 	msr	BASEPRI, r3
 8001898:	f3bf 8f6f 	isb	sy
 800189c:	f3bf 8f4f 	dsb	sy
 80018a0:	b662      	cpsie	i
		configASSERT( pxStaticQueue != NULL );
 80018a2:	e7fe      	b.n	80018a2 <xQueueGenericCreateStatic+0x5a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80018a4:	fab1 f381 	clz	r3, r1
 80018a8:	095b      	lsrs	r3, r3, #5
 80018aa:	2a00      	cmp	r2, #0
 80018ac:	bf18      	it	ne
 80018ae:	f043 0301 	orrne.w	r3, r3, #1
 80018b2:	b953      	cbnz	r3, 80018ca <xQueueGenericCreateStatic+0x82>
 80018b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018b8:	b672      	cpsid	i
 80018ba:	f383 8811 	msr	BASEPRI, r3
 80018be:	f3bf 8f6f 	isb	sy
 80018c2:	f3bf 8f4f 	dsb	sy
 80018c6:	b662      	cpsie	i
 80018c8:	e7fe      	b.n	80018c8 <xQueueGenericCreateStatic+0x80>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80018ca:	2350      	movs	r3, #80	; 0x50
 80018cc:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 80018ce:	9b03      	ldr	r3, [sp, #12]
 80018d0:	2b50      	cmp	r3, #80	; 0x50
 80018d2:	d00a      	beq.n	80018ea <xQueueGenericCreateStatic+0xa2>
 80018d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018d8:	b672      	cpsid	i
 80018da:	f383 8811 	msr	BASEPRI, r3
 80018de:	f3bf 8f6f 	isb	sy
 80018e2:	f3bf 8f4f 	dsb	sy
 80018e6:	b662      	cpsie	i
 80018e8:	e7fe      	b.n	80018e8 <xQueueGenericCreateStatic+0xa0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80018ea:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80018ec:	2301      	movs	r3, #1
 80018ee:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80018f2:	9400      	str	r4, [sp, #0]
 80018f4:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80018f8:	f7ff ff95 	bl	8001826 <prvInitialiseNewQueue>
	}
 80018fc:	4620      	mov	r0, r4
 80018fe:	b004      	add	sp, #16
 8001900:	bd10      	pop	{r4, pc}

08001902 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001902:	b950      	cbnz	r0, 800191a <xQueueGenericCreate+0x18>
 8001904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001908:	b672      	cpsid	i
 800190a:	f383 8811 	msr	BASEPRI, r3
 800190e:	f3bf 8f6f 	isb	sy
 8001912:	f3bf 8f4f 	dsb	sy
 8001916:	b662      	cpsie	i
 8001918:	e7fe      	b.n	8001918 <xQueueGenericCreate+0x16>
	{
 800191a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800191c:	b083      	sub	sp, #12
 800191e:	460c      	mov	r4, r1
 8001920:	4615      	mov	r5, r2
 8001922:	4607      	mov	r7, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 8001924:	b1a1      	cbz	r1, 8001950 <xQueueGenericCreate+0x4e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001926:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800192a:	3050      	adds	r0, #80	; 0x50
 800192c:	f001 fbbc 	bl	80030a8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8001930:	4606      	mov	r6, r0
 8001932:	b150      	cbz	r0, 800194a <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001934:	2300      	movs	r3, #0
 8001936:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800193a:	9000      	str	r0, [sp, #0]
 800193c:	462b      	mov	r3, r5
 800193e:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8001942:	4621      	mov	r1, r4
 8001944:	4638      	mov	r0, r7
 8001946:	f7ff ff6e 	bl	8001826 <prvInitialiseNewQueue>
	}
 800194a:	4630      	mov	r0, r6
 800194c:	b003      	add	sp, #12
 800194e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xQueueSizeInBytes = ( size_t ) 0;
 8001950:	4608      	mov	r0, r1
 8001952:	e7ea      	b.n	800192a <xQueueGenericCreate+0x28>

08001954 <xQueueGenericSend>:
{
 8001954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001956:	b085      	sub	sp, #20
 8001958:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800195a:	b198      	cbz	r0, 8001984 <xQueueGenericSend+0x30>
 800195c:	460f      	mov	r7, r1
 800195e:	461d      	mov	r5, r3
 8001960:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001962:	b1d1      	cbz	r1, 800199a <xQueueGenericSend+0x46>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001964:	2d02      	cmp	r5, #2
 8001966:	d126      	bne.n	80019b6 <xQueueGenericSend+0x62>
 8001968:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800196a:	2b01      	cmp	r3, #1
 800196c:	d023      	beq.n	80019b6 <xQueueGenericSend+0x62>
 800196e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001972:	b672      	cpsid	i
 8001974:	f383 8811 	msr	BASEPRI, r3
 8001978:	f3bf 8f6f 	isb	sy
 800197c:	f3bf 8f4f 	dsb	sy
 8001980:	b662      	cpsie	i
 8001982:	e7fe      	b.n	8001982 <xQueueGenericSend+0x2e>
 8001984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001988:	b672      	cpsid	i
 800198a:	f383 8811 	msr	BASEPRI, r3
 800198e:	f3bf 8f6f 	isb	sy
 8001992:	f3bf 8f4f 	dsb	sy
 8001996:	b662      	cpsie	i
	configASSERT( pxQueue );
 8001998:	e7fe      	b.n	8001998 <xQueueGenericSend+0x44>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800199a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800199c:	2b00      	cmp	r3, #0
 800199e:	d0e1      	beq.n	8001964 <xQueueGenericSend+0x10>
 80019a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019a4:	b672      	cpsid	i
 80019a6:	f383 8811 	msr	BASEPRI, r3
 80019aa:	f3bf 8f6f 	isb	sy
 80019ae:	f3bf 8f4f 	dsb	sy
 80019b2:	b662      	cpsie	i
 80019b4:	e7fe      	b.n	80019b4 <xQueueGenericSend+0x60>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80019b6:	f000 fe95 	bl	80026e4 <xTaskGetSchedulerState>
 80019ba:	4606      	mov	r6, r0
 80019bc:	b968      	cbnz	r0, 80019da <xQueueGenericSend+0x86>
 80019be:	9b01      	ldr	r3, [sp, #4]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d04a      	beq.n	8001a5a <xQueueGenericSend+0x106>
 80019c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019c8:	b672      	cpsid	i
 80019ca:	f383 8811 	msr	BASEPRI, r3
 80019ce:	f3bf 8f6f 	isb	sy
 80019d2:	f3bf 8f4f 	dsb	sy
 80019d6:	b662      	cpsie	i
 80019d8:	e7fe      	b.n	80019d8 <xQueueGenericSend+0x84>
 80019da:	2600      	movs	r6, #0
 80019dc:	e03d      	b.n	8001a5a <xQueueGenericSend+0x106>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80019de:	462a      	mov	r2, r5
 80019e0:	4639      	mov	r1, r7
 80019e2:	4620      	mov	r0, r4
 80019e4:	f7ff fe57 	bl	8001696 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80019e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019ea:	b97b      	cbnz	r3, 8001a0c <xQueueGenericSend+0xb8>
					else if( xYieldRequired != pdFALSE )
 80019ec:	b148      	cbz	r0, 8001a02 <xQueueGenericSend+0xae>
						queueYIELD_IF_USING_PREEMPTION();
 80019ee:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80019f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019f6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80019fa:	f3bf 8f4f 	dsb	sy
 80019fe:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8001a02:	f001 f9ed 	bl	8002de0 <vPortExitCritical>
				return pdPASS;
 8001a06:	2001      	movs	r0, #1
}
 8001a08:	b005      	add	sp, #20
 8001a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001a0c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001a10:	f000 fdca 	bl	80025a8 <xTaskRemoveFromEventList>
 8001a14:	2800      	cmp	r0, #0
 8001a16:	d0f4      	beq.n	8001a02 <xQueueGenericSend+0xae>
							queueYIELD_IF_USING_PREEMPTION();
 8001a18:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001a1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a20:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001a24:	f3bf 8f4f 	dsb	sy
 8001a28:	f3bf 8f6f 	isb	sy
 8001a2c:	e7e9      	b.n	8001a02 <xQueueGenericSend+0xae>
					taskEXIT_CRITICAL();
 8001a2e:	f001 f9d7 	bl	8002de0 <vPortExitCritical>
					return errQUEUE_FULL;
 8001a32:	2000      	movs	r0, #0
 8001a34:	e7e8      	b.n	8001a08 <xQueueGenericSend+0xb4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001a36:	a802      	add	r0, sp, #8
 8001a38:	f000 fdfc 	bl	8002634 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001a3c:	2601      	movs	r6, #1
 8001a3e:	e019      	b.n	8001a74 <xQueueGenericSend+0x120>
		prvLockQueue( pxQueue );
 8001a40:	2300      	movs	r3, #0
 8001a42:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001a46:	e021      	b.n	8001a8c <xQueueGenericSend+0x138>
 8001a48:	2300      	movs	r3, #0
 8001a4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001a4e:	e023      	b.n	8001a98 <xQueueGenericSend+0x144>
				prvUnlockQueue( pxQueue );
 8001a50:	4620      	mov	r0, r4
 8001a52:	f7ff fe6d 	bl	8001730 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001a56:	f000 fc81 	bl	800235c <xTaskResumeAll>
		taskENTER_CRITICAL();
 8001a5a:	f001 f99b 	bl	8002d94 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001a5e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001a60:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d3bb      	bcc.n	80019de <xQueueGenericSend+0x8a>
 8001a66:	2d02      	cmp	r5, #2
 8001a68:	d0b9      	beq.n	80019de <xQueueGenericSend+0x8a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001a6a:	9b01      	ldr	r3, [sp, #4]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d0de      	beq.n	8001a2e <xQueueGenericSend+0xda>
				else if( xEntryTimeSet == pdFALSE )
 8001a70:	2e00      	cmp	r6, #0
 8001a72:	d0e0      	beq.n	8001a36 <xQueueGenericSend+0xe2>
		taskEXIT_CRITICAL();
 8001a74:	f001 f9b4 	bl	8002de0 <vPortExitCritical>
		vTaskSuspendAll();
 8001a78:	f000 fbd2 	bl	8002220 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001a7c:	f001 f98a 	bl	8002d94 <vPortEnterCritical>
 8001a80:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8001a84:	b252      	sxtb	r2, r2
 8001a86:	f1b2 3fff 	cmp.w	r2, #4294967295
 8001a8a:	d0d9      	beq.n	8001a40 <xQueueGenericSend+0xec>
 8001a8c:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8001a90:	b252      	sxtb	r2, r2
 8001a92:	f1b2 3fff 	cmp.w	r2, #4294967295
 8001a96:	d0d7      	beq.n	8001a48 <xQueueGenericSend+0xf4>
 8001a98:	f001 f9a2 	bl	8002de0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001a9c:	a901      	add	r1, sp, #4
 8001a9e:	a802      	add	r0, sp, #8
 8001aa0:	f000 fdd2 	bl	8002648 <xTaskCheckForTimeOut>
 8001aa4:	b9d8      	cbnz	r0, 8001ade <xQueueGenericSend+0x18a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001aa6:	4620      	mov	r0, r4
 8001aa8:	f7ff fdd9 	bl	800165e <prvIsQueueFull>
 8001aac:	2800      	cmp	r0, #0
 8001aae:	d0cf      	beq.n	8001a50 <xQueueGenericSend+0xfc>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001ab0:	9901      	ldr	r1, [sp, #4]
 8001ab2:	f104 0010 	add.w	r0, r4, #16
 8001ab6:	f000 fd3b 	bl	8002530 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001aba:	4620      	mov	r0, r4
 8001abc:	f7ff fe38 	bl	8001730 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001ac0:	f000 fc4c 	bl	800235c <xTaskResumeAll>
 8001ac4:	2800      	cmp	r0, #0
 8001ac6:	d1c8      	bne.n	8001a5a <xQueueGenericSend+0x106>
					portYIELD_WITHIN_API();
 8001ac8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001acc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ad0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001ad4:	f3bf 8f4f 	dsb	sy
 8001ad8:	f3bf 8f6f 	isb	sy
 8001adc:	e7bd      	b.n	8001a5a <xQueueGenericSend+0x106>
			prvUnlockQueue( pxQueue );
 8001ade:	4620      	mov	r0, r4
 8001ae0:	f7ff fe26 	bl	8001730 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001ae4:	f000 fc3a 	bl	800235c <xTaskResumeAll>
			return errQUEUE_FULL;
 8001ae8:	2000      	movs	r0, #0
 8001aea:	e78d      	b.n	8001a08 <xQueueGenericSend+0xb4>

08001aec <xQueueGenericSendFromISR>:
{
 8001aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8001af0:	b1a0      	cbz	r0, 8001b1c <xQueueGenericSendFromISR+0x30>
 8001af2:	460f      	mov	r7, r1
 8001af4:	4616      	mov	r6, r2
 8001af6:	461c      	mov	r4, r3
 8001af8:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001afa:	b1d1      	cbz	r1, 8001b32 <xQueueGenericSendFromISR+0x46>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001afc:	2c02      	cmp	r4, #2
 8001afe:	d126      	bne.n	8001b4e <xQueueGenericSendFromISR+0x62>
 8001b00:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d023      	beq.n	8001b4e <xQueueGenericSendFromISR+0x62>
 8001b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b0a:	b672      	cpsid	i
 8001b0c:	f383 8811 	msr	BASEPRI, r3
 8001b10:	f3bf 8f6f 	isb	sy
 8001b14:	f3bf 8f4f 	dsb	sy
 8001b18:	b662      	cpsie	i
 8001b1a:	e7fe      	b.n	8001b1a <xQueueGenericSendFromISR+0x2e>
 8001b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b20:	b672      	cpsid	i
 8001b22:	f383 8811 	msr	BASEPRI, r3
 8001b26:	f3bf 8f6f 	isb	sy
 8001b2a:	f3bf 8f4f 	dsb	sy
 8001b2e:	b662      	cpsie	i
	configASSERT( pxQueue );
 8001b30:	e7fe      	b.n	8001b30 <xQueueGenericSendFromISR+0x44>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001b32:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d0e1      	beq.n	8001afc <xQueueGenericSendFromISR+0x10>
 8001b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b3c:	b672      	cpsid	i
 8001b3e:	f383 8811 	msr	BASEPRI, r3
 8001b42:	f3bf 8f6f 	isb	sy
 8001b46:	f3bf 8f4f 	dsb	sy
 8001b4a:	b662      	cpsie	i
 8001b4c:	e7fe      	b.n	8001b4c <xQueueGenericSendFromISR+0x60>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001b4e:	f001 fa25 	bl	8002f9c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001b52:	f3ef 8811 	mrs	r8, BASEPRI
 8001b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b5a:	b672      	cpsid	i
 8001b5c:	f383 8811 	msr	BASEPRI, r3
 8001b60:	f3bf 8f6f 	isb	sy
 8001b64:	f3bf 8f4f 	dsb	sy
 8001b68:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001b6a:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001b6c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d306      	bcc.n	8001b80 <xQueueGenericSendFromISR+0x94>
 8001b72:	2c02      	cmp	r4, #2
 8001b74:	d004      	beq.n	8001b80 <xQueueGenericSendFromISR+0x94>
			xReturn = errQUEUE_FULL;
 8001b76:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001b78:	f388 8811 	msr	BASEPRI, r8
}
 8001b7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8001b80:	f895 9045 	ldrb.w	r9, [r5, #69]	; 0x45
 8001b84:	fa4f f989 	sxtb.w	r9, r9
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001b88:	4622      	mov	r2, r4
 8001b8a:	4639      	mov	r1, r7
 8001b8c:	4628      	mov	r0, r5
 8001b8e:	f7ff fd82 	bl	8001696 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8001b92:	f1b9 3fff 	cmp.w	r9, #4294967295
 8001b96:	d006      	beq.n	8001ba6 <xQueueGenericSendFromISR+0xba>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001b98:	f109 0301 	add.w	r3, r9, #1
 8001b9c:	b25b      	sxtb	r3, r3
 8001b9e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 8001ba2:	2001      	movs	r0, #1
 8001ba4:	e7e8      	b.n	8001b78 <xQueueGenericSendFromISR+0x8c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001ba6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001ba8:	b90b      	cbnz	r3, 8001bae <xQueueGenericSendFromISR+0xc2>
			xReturn = pdPASS;
 8001baa:	2001      	movs	r0, #1
 8001bac:	e7e4      	b.n	8001b78 <xQueueGenericSendFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001bae:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001bb2:	f000 fcf9 	bl	80025a8 <xTaskRemoveFromEventList>
 8001bb6:	b118      	cbz	r0, 8001bc0 <xQueueGenericSendFromISR+0xd4>
							if( pxHigherPriorityTaskWoken != NULL )
 8001bb8:	b126      	cbz	r6, 8001bc4 <xQueueGenericSendFromISR+0xd8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001bba:	2001      	movs	r0, #1
 8001bbc:	6030      	str	r0, [r6, #0]
 8001bbe:	e7db      	b.n	8001b78 <xQueueGenericSendFromISR+0x8c>
			xReturn = pdPASS;
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	e7d9      	b.n	8001b78 <xQueueGenericSendFromISR+0x8c>
 8001bc4:	2001      	movs	r0, #1
 8001bc6:	e7d7      	b.n	8001b78 <xQueueGenericSendFromISR+0x8c>

08001bc8 <xQueueReceive>:
{
 8001bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8001bce:	b1a0      	cbz	r0, 8001bfa <xQueueReceive+0x32>
 8001bd0:	460f      	mov	r7, r1
 8001bd2:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001bd4:	b1e1      	cbz	r1, 8001c10 <xQueueReceive+0x48>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001bd6:	f000 fd85 	bl	80026e4 <xTaskGetSchedulerState>
 8001bda:	4606      	mov	r6, r0
 8001bdc:	bb30      	cbnz	r0, 8001c2c <xQueueReceive+0x64>
 8001bde:	9b01      	ldr	r3, [sp, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d064      	beq.n	8001cae <xQueueReceive+0xe6>
	__asm volatile
 8001be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001be8:	b672      	cpsid	i
 8001bea:	f383 8811 	msr	BASEPRI, r3
 8001bee:	f3bf 8f6f 	isb	sy
 8001bf2:	f3bf 8f4f 	dsb	sy
 8001bf6:	b662      	cpsie	i
 8001bf8:	e7fe      	b.n	8001bf8 <xQueueReceive+0x30>
 8001bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bfe:	b672      	cpsid	i
 8001c00:	f383 8811 	msr	BASEPRI, r3
 8001c04:	f3bf 8f6f 	isb	sy
 8001c08:	f3bf 8f4f 	dsb	sy
 8001c0c:	b662      	cpsie	i
	configASSERT( ( pxQueue ) );
 8001c0e:	e7fe      	b.n	8001c0e <xQueueReceive+0x46>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001c10:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d0df      	beq.n	8001bd6 <xQueueReceive+0xe>
 8001c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c1a:	b672      	cpsid	i
 8001c1c:	f383 8811 	msr	BASEPRI, r3
 8001c20:	f3bf 8f6f 	isb	sy
 8001c24:	f3bf 8f4f 	dsb	sy
 8001c28:	b662      	cpsie	i
 8001c2a:	e7fe      	b.n	8001c2a <xQueueReceive+0x62>
 8001c2c:	2600      	movs	r6, #0
 8001c2e:	e03e      	b.n	8001cae <xQueueReceive+0xe6>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001c30:	4639      	mov	r1, r7
 8001c32:	4620      	mov	r0, r4
 8001c34:	f7ff fd6a 	bl	800170c <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001c38:	3d01      	subs	r5, #1
 8001c3a:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001c3c:	6923      	ldr	r3, [r4, #16]
 8001c3e:	b923      	cbnz	r3, 8001c4a <xQueueReceive+0x82>
				taskEXIT_CRITICAL();
 8001c40:	f001 f8ce 	bl	8002de0 <vPortExitCritical>
				return pdPASS;
 8001c44:	2001      	movs	r0, #1
}
 8001c46:	b005      	add	sp, #20
 8001c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001c4a:	f104 0010 	add.w	r0, r4, #16
 8001c4e:	f000 fcab 	bl	80025a8 <xTaskRemoveFromEventList>
 8001c52:	2800      	cmp	r0, #0
 8001c54:	d0f4      	beq.n	8001c40 <xQueueReceive+0x78>
						queueYIELD_IF_USING_PREEMPTION();
 8001c56:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001c5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c5e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001c62:	f3bf 8f4f 	dsb	sy
 8001c66:	f3bf 8f6f 	isb	sy
 8001c6a:	e7e9      	b.n	8001c40 <xQueueReceive+0x78>
					taskEXIT_CRITICAL();
 8001c6c:	f001 f8b8 	bl	8002de0 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8001c70:	2000      	movs	r0, #0
 8001c72:	e7e8      	b.n	8001c46 <xQueueReceive+0x7e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001c74:	a802      	add	r0, sp, #8
 8001c76:	f000 fcdd 	bl	8002634 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001c7a:	2601      	movs	r6, #1
 8001c7c:	e021      	b.n	8001cc2 <xQueueReceive+0xfa>
		prvLockQueue( pxQueue );
 8001c7e:	2300      	movs	r3, #0
 8001c80:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001c84:	e029      	b.n	8001cda <xQueueReceive+0x112>
 8001c86:	2300      	movs	r3, #0
 8001c88:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001c8c:	e02b      	b.n	8001ce6 <xQueueReceive+0x11e>
				prvUnlockQueue( pxQueue );
 8001c8e:	4620      	mov	r0, r4
 8001c90:	f7ff fd4e 	bl	8001730 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001c94:	f000 fb62 	bl	800235c <xTaskResumeAll>
 8001c98:	e009      	b.n	8001cae <xQueueReceive+0xe6>
			prvUnlockQueue( pxQueue );
 8001c9a:	4620      	mov	r0, r4
 8001c9c:	f7ff fd48 	bl	8001730 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001ca0:	f000 fb5c 	bl	800235c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001ca4:	4620      	mov	r0, r4
 8001ca6:	f7ff fce9 	bl	800167c <prvIsQueueEmpty>
 8001caa:	2800      	cmp	r0, #0
 8001cac:	d13f      	bne.n	8001d2e <xQueueReceive+0x166>
		taskENTER_CRITICAL();
 8001cae:	f001 f871 	bl	8002d94 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001cb2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001cb4:	2d00      	cmp	r5, #0
 8001cb6:	d1bb      	bne.n	8001c30 <xQueueReceive+0x68>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001cb8:	9b01      	ldr	r3, [sp, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0d6      	beq.n	8001c6c <xQueueReceive+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 8001cbe:	2e00      	cmp	r6, #0
 8001cc0:	d0d8      	beq.n	8001c74 <xQueueReceive+0xac>
		taskEXIT_CRITICAL();
 8001cc2:	f001 f88d 	bl	8002de0 <vPortExitCritical>
		vTaskSuspendAll();
 8001cc6:	f000 faab 	bl	8002220 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001cca:	f001 f863 	bl	8002d94 <vPortEnterCritical>
 8001cce:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001cd2:	b25b      	sxtb	r3, r3
 8001cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd8:	d0d1      	beq.n	8001c7e <xQueueReceive+0xb6>
 8001cda:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001cde:	b25b      	sxtb	r3, r3
 8001ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce4:	d0cf      	beq.n	8001c86 <xQueueReceive+0xbe>
 8001ce6:	f001 f87b 	bl	8002de0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001cea:	a901      	add	r1, sp, #4
 8001cec:	a802      	add	r0, sp, #8
 8001cee:	f000 fcab 	bl	8002648 <xTaskCheckForTimeOut>
 8001cf2:	2800      	cmp	r0, #0
 8001cf4:	d1d1      	bne.n	8001c9a <xQueueReceive+0xd2>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001cf6:	4620      	mov	r0, r4
 8001cf8:	f7ff fcc0 	bl	800167c <prvIsQueueEmpty>
 8001cfc:	2800      	cmp	r0, #0
 8001cfe:	d0c6      	beq.n	8001c8e <xQueueReceive+0xc6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001d00:	9901      	ldr	r1, [sp, #4]
 8001d02:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001d06:	f000 fc13 	bl	8002530 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001d0a:	4620      	mov	r0, r4
 8001d0c:	f7ff fd10 	bl	8001730 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001d10:	f000 fb24 	bl	800235c <xTaskResumeAll>
 8001d14:	2800      	cmp	r0, #0
 8001d16:	d1ca      	bne.n	8001cae <xQueueReceive+0xe6>
					portYIELD_WITHIN_API();
 8001d18:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001d1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d20:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001d24:	f3bf 8f4f 	dsb	sy
 8001d28:	f3bf 8f6f 	isb	sy
 8001d2c:	e7bf      	b.n	8001cae <xQueueReceive+0xe6>
				return errQUEUE_EMPTY;
 8001d2e:	2000      	movs	r0, #0
 8001d30:	e789      	b.n	8001c46 <xQueueReceive+0x7e>
	...

08001d34 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001d34:	2300      	movs	r3, #0
 8001d36:	2b07      	cmp	r3, #7
 8001d38:	d80c      	bhi.n	8001d54 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001d3a:	4a07      	ldr	r2, [pc, #28]	; (8001d58 <vQueueAddToRegistry+0x24>)
 8001d3c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001d40:	b10a      	cbz	r2, 8001d46 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001d42:	3301      	adds	r3, #1
 8001d44:	e7f7      	b.n	8001d36 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001d46:	4a04      	ldr	r2, [pc, #16]	; (8001d58 <vQueueAddToRegistry+0x24>)
 8001d48:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001d4c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8001d50:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8001d52:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	20000b3c 	.word	0x20000b3c

08001d5c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001d5c:	b570      	push	{r4, r5, r6, lr}
 8001d5e:	4604      	mov	r4, r0
 8001d60:	460d      	mov	r5, r1
 8001d62:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001d64:	f001 f816 	bl	8002d94 <vPortEnterCritical>
 8001d68:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001d6c:	b25b      	sxtb	r3, r3
 8001d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d72:	d00d      	beq.n	8001d90 <vQueueWaitForMessageRestricted+0x34>
 8001d74:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001d78:	b25b      	sxtb	r3, r3
 8001d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d7e:	d00b      	beq.n	8001d98 <vQueueWaitForMessageRestricted+0x3c>
 8001d80:	f001 f82e 	bl	8002de0 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001d84:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001d86:	b15b      	cbz	r3, 8001da0 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8001d88:	4620      	mov	r0, r4
 8001d8a:	f7ff fcd1 	bl	8001730 <prvUnlockQueue>
	}
 8001d8e:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8001d90:	2300      	movs	r3, #0
 8001d92:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001d96:	e7ed      	b.n	8001d74 <vQueueWaitForMessageRestricted+0x18>
 8001d98:	2300      	movs	r3, #0
 8001d9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001d9e:	e7ef      	b.n	8001d80 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001da0:	4632      	mov	r2, r6
 8001da2:	4629      	mov	r1, r5
 8001da4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001da8:	f000 fbde 	bl	8002568 <vTaskPlaceOnEventListRestricted>
 8001dac:	e7ec      	b.n	8001d88 <vQueueWaitForMessageRestricted+0x2c>
	...

08001db0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001db0:	4b07      	ldr	r3, [pc, #28]	; (8001dd0 <prvResetNextTaskUnblockTime+0x20>)
 8001db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	b923      	cbnz	r3, 8001dc2 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001db8:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <prvResetNextTaskUnblockTime+0x20>)
 8001dba:	f04f 32ff 	mov.w	r2, #4294967295
 8001dbe:	62da      	str	r2, [r3, #44]	; 0x2c
 8001dc0:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001dc2:	4b03      	ldr	r3, [pc, #12]	; (8001dd0 <prvResetNextTaskUnblockTime+0x20>)
 8001dc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dc6:	68d2      	ldr	r2, [r2, #12]
 8001dc8:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001dca:	6852      	ldr	r2, [r2, #4]
 8001dcc:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 8001dce:	4770      	bx	lr
 8001dd0:	20000b7c 	.word	0x20000b7c

08001dd4 <prvInitialiseNewTask>:
{
 8001dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001dd8:	4680      	mov	r8, r0
 8001dda:	460d      	mov	r5, r1
 8001ddc:	4617      	mov	r7, r2
 8001dde:	4699      	mov	r9, r3
 8001de0:	9e08      	ldr	r6, [sp, #32]
 8001de2:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8001de6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001de8:	0092      	lsls	r2, r2, #2
 8001dea:	21a5      	movs	r1, #165	; 0xa5
 8001dec:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001dee:	f006 fa54 	bl	800829a <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001df2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001df4:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8001df8:	443a      	add	r2, r7
 8001dfa:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001dfe:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8001e02:	b3a5      	cbz	r5, 8001e6e <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001e04:	f04f 0c00 	mov.w	ip, #0
 8001e08:	f1bc 0f0f 	cmp.w	ip, #15
 8001e0c:	d809      	bhi.n	8001e22 <prvInitialiseNewTask+0x4e>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001e0e:	f815 300c 	ldrb.w	r3, [r5, ip]
 8001e12:	eb04 020c 	add.w	r2, r4, ip
 8001e16:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8001e1a:	b113      	cbz	r3, 8001e22 <prvInitialiseNewTask+0x4e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001e1c:	f10c 0c01 	add.w	ip, ip, #1
 8001e20:	e7f2      	b.n	8001e08 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001e22:	2300      	movs	r3, #0
 8001e24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001e28:	2e37      	cmp	r6, #55	; 0x37
 8001e2a:	d900      	bls.n	8001e2e <prvInitialiseNewTask+0x5a>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001e2c:	2637      	movs	r6, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8001e2e:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8001e30:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8001e32:	2500      	movs	r5, #0
 8001e34:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001e36:	1d20      	adds	r0, r4, #4
 8001e38:	f7ff fbd7 	bl	80015ea <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001e3c:	f104 0018 	add.w	r0, r4, #24
 8001e40:	f7ff fbd3 	bl	80015ea <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001e44:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e46:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
 8001e4a:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001e4c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8001e4e:	6565      	str	r5, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001e50:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001e54:	464a      	mov	r2, r9
 8001e56:	4641      	mov	r1, r8
 8001e58:	4638      	mov	r0, r7
 8001e5a:	f000 ff6f 	bl	8002d3c <pxPortInitialiseStack>
 8001e5e:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8001e60:	f1ba 0f00 	cmp.w	sl, #0
 8001e64:	d001      	beq.n	8001e6a <prvInitialiseNewTask+0x96>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001e66:	f8ca 4000 	str.w	r4, [sl]
}
 8001e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8001e74:	e7d8      	b.n	8001e28 <prvInitialiseNewTask+0x54>
	...

08001e78 <prvInitialiseTaskLists>:
{
 8001e78:	b570      	push	{r4, r5, r6, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001e7a:	2400      	movs	r4, #0
 8001e7c:	e007      	b.n	8001e8e <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001e7e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8001e82:	0093      	lsls	r3, r2, #2
 8001e84:	4810      	ldr	r0, [pc, #64]	; (8001ec8 <prvInitialiseTaskLists+0x50>)
 8001e86:	4418      	add	r0, r3
 8001e88:	f7ff fba4 	bl	80015d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001e8c:	3401      	adds	r4, #1
 8001e8e:	2c37      	cmp	r4, #55	; 0x37
 8001e90:	d9f5      	bls.n	8001e7e <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8001e92:	4c0e      	ldr	r4, [pc, #56]	; (8001ecc <prvInitialiseTaskLists+0x54>)
 8001e94:	f504 6692 	add.w	r6, r4, #1168	; 0x490
 8001e98:	4630      	mov	r0, r6
 8001e9a:	f7ff fb9b 	bl	80015d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001e9e:	f204 45a4 	addw	r5, r4, #1188	; 0x4a4
 8001ea2:	4628      	mov	r0, r5
 8001ea4:	f7ff fb96 	bl	80015d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001ea8:	f104 0014 	add.w	r0, r4, #20
 8001eac:	f7ff fb92 	bl	80015d4 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8001eb0:	f504 6097 	add.w	r0, r4, #1208	; 0x4b8
 8001eb4:	f7ff fb8e 	bl	80015d4 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8001eb8:	4620      	mov	r0, r4
 8001eba:	f7ff fb8b 	bl	80015d4 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8001ebe:	62a6      	str	r6, [r4, #40]	; 0x28
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001ec0:	f8c4 54cc 	str.w	r5, [r4, #1228]	; 0x4cc
}
 8001ec4:	bd70      	pop	{r4, r5, r6, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20000bac 	.word	0x20000bac
 8001ecc:	20000b7c 	.word	0x20000b7c

08001ed0 <prvAddNewTaskToReadyList>:
{
 8001ed0:	b538      	push	{r3, r4, r5, lr}
 8001ed2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8001ed4:	f000 ff5e 	bl	8002d94 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8001ed8:	4b28      	ldr	r3, [pc, #160]	; (8001f7c <prvAddNewTaskToReadyList+0xac>)
 8001eda:	f8d3 24d0 	ldr.w	r2, [r3, #1232]	; 0x4d0
 8001ede:	3201      	adds	r2, #1
 8001ee0:	f8c3 24d0 	str.w	r2, [r3, #1232]	; 0x4d0
		if( pxCurrentTCB == NULL )
 8001ee4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8001ee8:	b173      	cbz	r3, 8001f08 <prvAddNewTaskToReadyList+0x38>
			if( xSchedulerRunning == pdFALSE )
 8001eea:	4b24      	ldr	r3, [pc, #144]	; (8001f7c <prvAddNewTaskToReadyList+0xac>)
 8001eec:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 8001ef0:	b98b      	cbnz	r3, 8001f16 <prvAddNewTaskToReadyList+0x46>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001ef2:	4b22      	ldr	r3, [pc, #136]	; (8001f7c <prvAddNewTaskToReadyList+0xac>)
 8001ef4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8001ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001efa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d80a      	bhi.n	8001f16 <prvAddNewTaskToReadyList+0x46>
					pxCurrentTCB = pxNewTCB;
 8001f00:	4b1e      	ldr	r3, [pc, #120]	; (8001f7c <prvAddNewTaskToReadyList+0xac>)
 8001f02:	f8c3 44d4 	str.w	r4, [r3, #1236]	; 0x4d4
 8001f06:	e006      	b.n	8001f16 <prvAddNewTaskToReadyList+0x46>
			pxCurrentTCB = pxNewTCB;
 8001f08:	4b1c      	ldr	r3, [pc, #112]	; (8001f7c <prvAddNewTaskToReadyList+0xac>)
 8001f0a:	f8c3 44d4 	str.w	r4, [r3, #1236]	; 0x4d4
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001f0e:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d02e      	beq.n	8001f74 <prvAddNewTaskToReadyList+0xa4>
		uxTaskNumber++;
 8001f16:	4a19      	ldr	r2, [pc, #100]	; (8001f7c <prvAddNewTaskToReadyList+0xac>)
 8001f18:	f8d2 34dc 	ldr.w	r3, [r2, #1244]	; 0x4dc
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	f8c2 34dc 	str.w	r3, [r2, #1244]	; 0x4dc
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001f22:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8001f24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f26:	f8d2 24e0 	ldr.w	r2, [r2, #1248]	; 0x4e0
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d902      	bls.n	8001f34 <prvAddNewTaskToReadyList+0x64>
 8001f2e:	4a13      	ldr	r2, [pc, #76]	; (8001f7c <prvAddNewTaskToReadyList+0xac>)
 8001f30:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
 8001f34:	4d11      	ldr	r5, [pc, #68]	; (8001f7c <prvAddNewTaskToReadyList+0xac>)
 8001f36:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8001f3a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001f3e:	1d21      	adds	r1, r4, #4
 8001f40:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001f44:	f7ff fb54 	bl	80015f0 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8001f48:	f000 ff4a 	bl	8002de0 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8001f4c:	f8d5 34d8 	ldr.w	r3, [r5, #1240]	; 0x4d8
 8001f50:	b17b      	cbz	r3, 8001f72 <prvAddNewTaskToReadyList+0xa2>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001f52:	f8d5 34d4 	ldr.w	r3, [r5, #1236]	; 0x4d4
 8001f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f58:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d209      	bcs.n	8001f72 <prvAddNewTaskToReadyList+0xa2>
			taskYIELD_IF_USING_PREEMPTION();
 8001f5e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f66:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001f6a:	f3bf 8f4f 	dsb	sy
 8001f6e:	f3bf 8f6f 	isb	sy
}
 8001f72:	bd38      	pop	{r3, r4, r5, pc}
				prvInitialiseTaskLists();
 8001f74:	f7ff ff80 	bl	8001e78 <prvInitialiseTaskLists>
 8001f78:	e7cd      	b.n	8001f16 <prvAddNewTaskToReadyList+0x46>
 8001f7a:	bf00      	nop
 8001f7c:	20000b7c 	.word	0x20000b7c

08001f80 <prvDeleteTCB>:
	{
 8001f80:	b510      	push	{r4, lr}
 8001f82:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8001f84:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
 8001f88:	b173      	cbz	r3, 8001fa8 <prvDeleteTCB+0x28>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d013      	beq.n	8001fb6 <prvDeleteTCB+0x36>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d010      	beq.n	8001fb4 <prvDeleteTCB+0x34>
 8001f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f96:	b672      	cpsid	i
 8001f98:	f383 8811 	msr	BASEPRI, r3
 8001f9c:	f3bf 8f6f 	isb	sy
 8001fa0:	f3bf 8f4f 	dsb	sy
 8001fa4:	b662      	cpsie	i
 8001fa6:	e7fe      	b.n	8001fa6 <prvDeleteTCB+0x26>
				vPortFree( pxTCB->pxStack );
 8001fa8:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8001faa:	f001 f8ef 	bl	800318c <vPortFree>
				vPortFree( pxTCB );
 8001fae:	4620      	mov	r0, r4
 8001fb0:	f001 f8ec 	bl	800318c <vPortFree>
	}
 8001fb4:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8001fb6:	f001 f8e9 	bl	800318c <vPortFree>
 8001fba:	e7fb      	b.n	8001fb4 <prvDeleteTCB+0x34>

08001fbc <prvCheckTasksWaitingTermination>:
{
 8001fbc:	b538      	push	{r3, r4, r5, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001fbe:	e017      	b.n	8001ff0 <prvCheckTasksWaitingTermination+0x34>
			taskENTER_CRITICAL();
 8001fc0:	f000 fee8 	bl	8002d94 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001fc4:	4c0d      	ldr	r4, [pc, #52]	; (8001ffc <prvCheckTasksWaitingTermination+0x40>)
 8001fc6:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
 8001fca:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001fcc:	1d28      	adds	r0, r5, #4
 8001fce:	f7ff fb33 	bl	8001638 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001fd2:	f8d4 34d0 	ldr.w	r3, [r4, #1232]	; 0x4d0
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	f8c4 34d0 	str.w	r3, [r4, #1232]	; 0x4d0
				--uxDeletedTasksWaitingCleanUp;
 8001fdc:	f8d4 34e4 	ldr.w	r3, [r4, #1252]	; 0x4e4
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	f8c4 34e4 	str.w	r3, [r4, #1252]	; 0x4e4
			taskEXIT_CRITICAL();
 8001fe6:	f000 fefb 	bl	8002de0 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8001fea:	4628      	mov	r0, r5
 8001fec:	f7ff ffc8 	bl	8001f80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001ff0:	4b02      	ldr	r3, [pc, #8]	; (8001ffc <prvCheckTasksWaitingTermination+0x40>)
 8001ff2:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1e2      	bne.n	8001fc0 <prvCheckTasksWaitingTermination+0x4>
}
 8001ffa:	bd38      	pop	{r3, r4, r5, pc}
 8001ffc:	20000b7c 	.word	0x20000b7c

08002000 <prvIdleTask>:
{
 8002000:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8002002:	f7ff ffdb 	bl	8001fbc <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002006:	4b07      	ldr	r3, [pc, #28]	; (8002024 <prvIdleTask+0x24>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	2b01      	cmp	r3, #1
 800200c:	d9f9      	bls.n	8002002 <prvIdleTask+0x2>
				taskYIELD();
 800200e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002016:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800201a:	f3bf 8f4f 	dsb	sy
 800201e:	f3bf 8f6f 	isb	sy
 8002022:	e7ee      	b.n	8002002 <prvIdleTask+0x2>
 8002024:	20000b7c 	.word	0x20000b7c

08002028 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002028:	b570      	push	{r4, r5, r6, lr}
 800202a:	4604      	mov	r4, r0
 800202c:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800202e:	4b1a      	ldr	r3, [pc, #104]	; (8002098 <prvAddCurrentTaskToDelayedList+0x70>)
 8002030:	f8d3 64e8 	ldr.w	r6, [r3, #1256]	; 0x4e8
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002034:	f8d3 04d4 	ldr.w	r0, [r3, #1236]	; 0x4d4
 8002038:	3004      	adds	r0, #4
 800203a:	f7ff fafd 	bl	8001638 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800203e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002042:	bf14      	ite	ne
 8002044:	2300      	movne	r3, #0
 8002046:	2301      	moveq	r3, #1
 8002048:	2d00      	cmp	r5, #0
 800204a:	bf08      	it	eq
 800204c:	2300      	moveq	r3, #0
 800204e:	b97b      	cbnz	r3, 8002070 <prvAddCurrentTaskToDelayedList+0x48>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002050:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002052:	4b11      	ldr	r3, [pc, #68]	; (8002098 <prvAddCurrentTaskToDelayedList+0x70>)
 8002054:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8002058:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800205a:	42a6      	cmp	r6, r4
 800205c:	d90f      	bls.n	800207e <prvAddCurrentTaskToDelayedList+0x56>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800205e:	4b0e      	ldr	r3, [pc, #56]	; (8002098 <prvAddCurrentTaskToDelayedList+0x70>)
 8002060:	f8d3 04cc 	ldr.w	r0, [r3, #1228]	; 0x4cc
 8002064:	f8d3 14d4 	ldr.w	r1, [r3, #1236]	; 0x4d4
 8002068:	3104      	adds	r1, #4
 800206a:	f7ff facc 	bl	8001606 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800206e:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002070:	4809      	ldr	r0, [pc, #36]	; (8002098 <prvAddCurrentTaskToDelayedList+0x70>)
 8002072:	f8d0 14d4 	ldr.w	r1, [r0, #1236]	; 0x4d4
 8002076:	3104      	adds	r1, #4
 8002078:	f7ff faba 	bl	80015f0 <vListInsertEnd>
 800207c:	e7f7      	b.n	800206e <prvAddCurrentTaskToDelayedList+0x46>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800207e:	4d06      	ldr	r5, [pc, #24]	; (8002098 <prvAddCurrentTaskToDelayedList+0x70>)
 8002080:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8002082:	f8d5 14d4 	ldr.w	r1, [r5, #1236]	; 0x4d4
 8002086:	3104      	adds	r1, #4
 8002088:	f7ff fabd 	bl	8001606 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800208c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800208e:	42a3      	cmp	r3, r4
 8002090:	d9ed      	bls.n	800206e <prvAddCurrentTaskToDelayedList+0x46>
					xNextTaskUnblockTime = xTimeToWake;
 8002092:	62ec      	str	r4, [r5, #44]	; 0x2c
}
 8002094:	e7eb      	b.n	800206e <prvAddCurrentTaskToDelayedList+0x46>
 8002096:	bf00      	nop
 8002098:	20000b7c 	.word	0x20000b7c

0800209c <xTaskCreateStatic>:
	{
 800209c:	b530      	push	{r4, r5, lr}
 800209e:	b087      	sub	sp, #28
 80020a0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 80020a2:	b18c      	cbz	r4, 80020c8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80020a4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80020a6:	b1d5      	cbz	r5, 80020de <xTaskCreateStatic+0x42>
			volatile size_t xSize = sizeof( StaticTask_t );
 80020a8:	255c      	movs	r5, #92	; 0x5c
 80020aa:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80020ac:	9d04      	ldr	r5, [sp, #16]
 80020ae:	2d5c      	cmp	r5, #92	; 0x5c
 80020b0:	d020      	beq.n	80020f4 <xTaskCreateStatic+0x58>
 80020b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020b6:	b672      	cpsid	i
 80020b8:	f383 8811 	msr	BASEPRI, r3
 80020bc:	f3bf 8f6f 	isb	sy
 80020c0:	f3bf 8f4f 	dsb	sy
 80020c4:	b662      	cpsie	i
 80020c6:	e7fe      	b.n	80020c6 <xTaskCreateStatic+0x2a>
 80020c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020cc:	b672      	cpsid	i
 80020ce:	f383 8811 	msr	BASEPRI, r3
 80020d2:	f3bf 8f6f 	isb	sy
 80020d6:	f3bf 8f4f 	dsb	sy
 80020da:	b662      	cpsie	i
		configASSERT( puxStackBuffer != NULL );
 80020dc:	e7fe      	b.n	80020dc <xTaskCreateStatic+0x40>
 80020de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020e2:	b672      	cpsid	i
 80020e4:	f383 8811 	msr	BASEPRI, r3
 80020e8:	f3bf 8f6f 	isb	sy
 80020ec:	f3bf 8f4f 	dsb	sy
 80020f0:	b662      	cpsie	i
		configASSERT( pxTaskBuffer != NULL );
 80020f2:	e7fe      	b.n	80020f2 <xTaskCreateStatic+0x56>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80020f4:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80020f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80020f8:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80020fa:	2402      	movs	r4, #2
 80020fc:	f885 4059 	strb.w	r4, [r5, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002100:	2400      	movs	r4, #0
 8002102:	9403      	str	r4, [sp, #12]
 8002104:	9502      	str	r5, [sp, #8]
 8002106:	ac05      	add	r4, sp, #20
 8002108:	9401      	str	r4, [sp, #4]
 800210a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800210c:	9400      	str	r4, [sp, #0]
 800210e:	f7ff fe61 	bl	8001dd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002112:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002114:	f7ff fedc 	bl	8001ed0 <prvAddNewTaskToReadyList>
	}
 8002118:	9805      	ldr	r0, [sp, #20]
 800211a:	b007      	add	sp, #28
 800211c:	bd30      	pop	{r4, r5, pc}

0800211e <xTaskCreate>:
	{
 800211e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002122:	b085      	sub	sp, #20
 8002124:	4607      	mov	r7, r0
 8002126:	4688      	mov	r8, r1
 8002128:	4614      	mov	r4, r2
 800212a:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800212c:	0090      	lsls	r0, r2, #2
 800212e:	f000 ffbb 	bl	80030a8 <pvPortMalloc>
			if( pxStack != NULL )
 8002132:	b300      	cbz	r0, 8002176 <xTaskCreate+0x58>
 8002134:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002136:	205c      	movs	r0, #92	; 0x5c
 8002138:	f000 ffb6 	bl	80030a8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800213c:	4605      	mov	r5, r0
 800213e:	b1b0      	cbz	r0, 800216e <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 8002140:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8002144:	b1e5      	cbz	r5, 8002180 <xTaskCreate+0x62>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002146:	2300      	movs	r3, #0
 8002148:	f885 3059 	strb.w	r3, [r5, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800214c:	9303      	str	r3, [sp, #12]
 800214e:	9502      	str	r5, [sp, #8]
 8002150:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002152:	9301      	str	r3, [sp, #4]
 8002154:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002156:	9300      	str	r3, [sp, #0]
 8002158:	4633      	mov	r3, r6
 800215a:	4622      	mov	r2, r4
 800215c:	4641      	mov	r1, r8
 800215e:	4638      	mov	r0, r7
 8002160:	f7ff fe38 	bl	8001dd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002164:	4628      	mov	r0, r5
 8002166:	f7ff feb3 	bl	8001ed0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800216a:	2001      	movs	r0, #1
 800216c:	e005      	b.n	800217a <xTaskCreate+0x5c>
					vPortFree( pxStack );
 800216e:	4648      	mov	r0, r9
 8002170:	f001 f80c 	bl	800318c <vPortFree>
 8002174:	e7e6      	b.n	8002144 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002176:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800217a:	b005      	add	sp, #20
 800217c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002180:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8002184:	e7f9      	b.n	800217a <xTaskCreate+0x5c>
	...

08002188 <vTaskStartScheduler>:
{
 8002188:	b510      	push	{r4, lr}
 800218a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800218c:	2400      	movs	r4, #0
 800218e:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002190:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002192:	aa07      	add	r2, sp, #28
 8002194:	a906      	add	r1, sp, #24
 8002196:	a805      	add	r0, sp, #20
 8002198:	f7ff f9fe 	bl	8001598 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800219c:	9b05      	ldr	r3, [sp, #20]
 800219e:	9302      	str	r3, [sp, #8]
 80021a0:	9b06      	ldr	r3, [sp, #24]
 80021a2:	9301      	str	r3, [sp, #4]
 80021a4:	9400      	str	r4, [sp, #0]
 80021a6:	4623      	mov	r3, r4
 80021a8:	9a07      	ldr	r2, [sp, #28]
 80021aa:	491a      	ldr	r1, [pc, #104]	; (8002214 <vTaskStartScheduler+0x8c>)
 80021ac:	481a      	ldr	r0, [pc, #104]	; (8002218 <vTaskStartScheduler+0x90>)
 80021ae:	f7ff ff75 	bl	800209c <xTaskCreateStatic>
 80021b2:	4b1a      	ldr	r3, [pc, #104]	; (800221c <vTaskStartScheduler+0x94>)
 80021b4:	f8c3 04f0 	str.w	r0, [r3, #1264]	; 0x4f0
		if( xIdleTaskHandle != NULL )
 80021b8:	b140      	cbz	r0, 80021cc <vTaskStartScheduler+0x44>
			xReturn = xTimerCreateTimerTask();
 80021ba:	f000 fba9 	bl	8002910 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80021be:	2801      	cmp	r0, #1
 80021c0:	d006      	beq.n	80021d0 <vTaskStartScheduler+0x48>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80021c2:	f1b0 3fff 	cmp.w	r0, #4294967295
 80021c6:	d01a      	beq.n	80021fe <vTaskStartScheduler+0x76>
}
 80021c8:	b008      	add	sp, #32
 80021ca:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 80021cc:	2000      	movs	r0, #0
 80021ce:	e7f6      	b.n	80021be <vTaskStartScheduler+0x36>
 80021d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021d4:	b672      	cpsid	i
 80021d6:	f383 8811 	msr	BASEPRI, r3
 80021da:	f3bf 8f6f 	isb	sy
 80021de:	f3bf 8f4f 	dsb	sy
 80021e2:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 80021e4:	4b0d      	ldr	r3, [pc, #52]	; (800221c <vTaskStartScheduler+0x94>)
 80021e6:	f04f 32ff 	mov.w	r2, #4294967295
 80021ea:	62da      	str	r2, [r3, #44]	; 0x2c
		xSchedulerRunning = pdTRUE;
 80021ec:	2201      	movs	r2, #1
 80021ee:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80021f2:	2200      	movs	r2, #0
 80021f4:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
		if( xPortStartScheduler() != pdFALSE )
 80021f8:	f000 fe68 	bl	8002ecc <xPortStartScheduler>
 80021fc:	e7e4      	b.n	80021c8 <vTaskStartScheduler+0x40>
 80021fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002202:	b672      	cpsid	i
 8002204:	f383 8811 	msr	BASEPRI, r3
 8002208:	f3bf 8f6f 	isb	sy
 800220c:	f3bf 8f4f 	dsb	sy
 8002210:	b662      	cpsie	i
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002212:	e7fe      	b.n	8002212 <vTaskStartScheduler+0x8a>
 8002214:	0800b220 	.word	0x0800b220
 8002218:	08002001 	.word	0x08002001
 800221c:	20000b7c 	.word	0x20000b7c

08002220 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8002220:	4a03      	ldr	r2, [pc, #12]	; (8002230 <vTaskSuspendAll+0x10>)
 8002222:	f8d2 34ec 	ldr.w	r3, [r2, #1260]	; 0x4ec
 8002226:	3301      	adds	r3, #1
 8002228:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
}
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	20000b7c 	.word	0x20000b7c

08002234 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8002234:	4b01      	ldr	r3, [pc, #4]	; (800223c <xTaskGetTickCount+0x8>)
 8002236:	f8d3 04e8 	ldr.w	r0, [r3, #1256]	; 0x4e8
}
 800223a:	4770      	bx	lr
 800223c:	20000b7c 	.word	0x20000b7c

08002240 <xTaskIncrementTick>:
{
 8002240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002244:	4b44      	ldr	r3, [pc, #272]	; (8002358 <xTaskIncrementTick+0x118>)
 8002246:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800224a:	2b00      	cmp	r3, #0
 800224c:	d172      	bne.n	8002334 <xTaskIncrementTick+0xf4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800224e:	4b42      	ldr	r3, [pc, #264]	; (8002358 <xTaskIncrementTick+0x118>)
 8002250:	f8d3 54e8 	ldr.w	r5, [r3, #1256]	; 0x4e8
 8002254:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8002256:	f8c3 54e8 	str.w	r5, [r3, #1256]	; 0x4e8
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800225a:	b9dd      	cbnz	r5, 8002294 <xTaskIncrementTick+0x54>
			taskSWITCH_DELAYED_LISTS();
 800225c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	b153      	cbz	r3, 8002278 <xTaskIncrementTick+0x38>
 8002262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002266:	b672      	cpsid	i
 8002268:	f383 8811 	msr	BASEPRI, r3
 800226c:	f3bf 8f6f 	isb	sy
 8002270:	f3bf 8f4f 	dsb	sy
 8002274:	b662      	cpsie	i
 8002276:	e7fe      	b.n	8002276 <xTaskIncrementTick+0x36>
 8002278:	4b37      	ldr	r3, [pc, #220]	; (8002358 <xTaskIncrementTick+0x118>)
 800227a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800227c:	f8d3 14cc 	ldr.w	r1, [r3, #1228]	; 0x4cc
 8002280:	6299      	str	r1, [r3, #40]	; 0x28
 8002282:	f8c3 24cc 	str.w	r2, [r3, #1228]	; 0x4cc
 8002286:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	; 0x4f4
 800228a:	3201      	adds	r2, #1
 800228c:	f8c3 24f4 	str.w	r2, [r3, #1268]	; 0x4f4
 8002290:	f7ff fd8e 	bl	8001db0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002294:	4b30      	ldr	r3, [pc, #192]	; (8002358 <xTaskIncrementTick+0x118>)
 8002296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002298:	42ab      	cmp	r3, r5
 800229a:	d940      	bls.n	800231e <xTaskIncrementTick+0xde>
BaseType_t xSwitchRequired = pdFALSE;
 800229c:	f04f 0800 	mov.w	r8, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80022a0:	4a2d      	ldr	r2, [pc, #180]	; (8002358 <xTaskIncrementTick+0x118>)
 80022a2:	f8d2 34d4 	ldr.w	r3, [r2, #1236]	; 0x4d4
 80022a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80022ac:	0099      	lsls	r1, r3, #2
 80022ae:	440a      	add	r2, r1
 80022b0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d946      	bls.n	8002344 <xTaskIncrementTick+0x104>
				xSwitchRequired = pdTRUE;
 80022b6:	f04f 0801 	mov.w	r8, #1
 80022ba:	e043      	b.n	8002344 <xTaskIncrementTick+0x104>
							xSwitchRequired = pdTRUE;
 80022bc:	f04f 0801 	mov.w	r8, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80022c0:	4b25      	ldr	r3, [pc, #148]	; (8002358 <xTaskIncrementTick+0x118>)
 80022c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	b36b      	cbz	r3, 8002324 <xTaskIncrementTick+0xe4>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80022c8:	4b23      	ldr	r3, [pc, #140]	; (8002358 <xTaskIncrementTick+0x118>)
 80022ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80022d0:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 80022d2:	429d      	cmp	r5, r3
 80022d4:	d32b      	bcc.n	800232e <xTaskIncrementTick+0xee>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80022d6:	1d27      	adds	r7, r4, #4
 80022d8:	4638      	mov	r0, r7
 80022da:	f7ff f9ad 	bl	8001638 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80022de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80022e0:	b11b      	cbz	r3, 80022ea <xTaskIncrementTick+0xaa>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80022e2:	f104 0018 	add.w	r0, r4, #24
 80022e6:	f7ff f9a7 	bl	8001638 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80022ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80022ec:	4a1a      	ldr	r2, [pc, #104]	; (8002358 <xTaskIncrementTick+0x118>)
 80022ee:	f8d2 24e0 	ldr.w	r2, [r2, #1248]	; 0x4e0
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d902      	bls.n	80022fc <xTaskIncrementTick+0xbc>
 80022f6:	4a18      	ldr	r2, [pc, #96]	; (8002358 <xTaskIncrementTick+0x118>)
 80022f8:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
 80022fc:	4e16      	ldr	r6, [pc, #88]	; (8002358 <xTaskIncrementTick+0x118>)
 80022fe:	f106 0030 	add.w	r0, r6, #48	; 0x30
 8002302:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002306:	009a      	lsls	r2, r3, #2
 8002308:	4639      	mov	r1, r7
 800230a:	4410      	add	r0, r2
 800230c:	f7ff f970 	bl	80015f0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002310:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002312:	f8d6 34d4 	ldr.w	r3, [r6, #1236]	; 0x4d4
 8002316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002318:	429a      	cmp	r2, r3
 800231a:	d2cf      	bcs.n	80022bc <xTaskIncrementTick+0x7c>
 800231c:	e7d0      	b.n	80022c0 <xTaskIncrementTick+0x80>
BaseType_t xSwitchRequired = pdFALSE;
 800231e:	f04f 0800 	mov.w	r8, #0
 8002322:	e7cd      	b.n	80022c0 <xTaskIncrementTick+0x80>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002324:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <xTaskIncrementTick+0x118>)
 8002326:	f04f 32ff 	mov.w	r2, #4294967295
 800232a:	62da      	str	r2, [r3, #44]	; 0x2c
					break;
 800232c:	e7b8      	b.n	80022a0 <xTaskIncrementTick+0x60>
						xNextTaskUnblockTime = xItemValue;
 800232e:	4a0a      	ldr	r2, [pc, #40]	; (8002358 <xTaskIncrementTick+0x118>)
 8002330:	62d3      	str	r3, [r2, #44]	; 0x2c
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002332:	e7b5      	b.n	80022a0 <xTaskIncrementTick+0x60>
		++uxPendedTicks;
 8002334:	4a08      	ldr	r2, [pc, #32]	; (8002358 <xTaskIncrementTick+0x118>)
 8002336:	f8d2 34f8 	ldr.w	r3, [r2, #1272]	; 0x4f8
 800233a:	3301      	adds	r3, #1
 800233c:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
BaseType_t xSwitchRequired = pdFALSE;
 8002340:	f04f 0800 	mov.w	r8, #0
		if( xYieldPending != pdFALSE )
 8002344:	4b04      	ldr	r3, [pc, #16]	; (8002358 <xTaskIncrementTick+0x118>)
 8002346:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800234a:	b10b      	cbz	r3, 8002350 <xTaskIncrementTick+0x110>
			xSwitchRequired = pdTRUE;
 800234c:	f04f 0801 	mov.w	r8, #1
}
 8002350:	4640      	mov	r0, r8
 8002352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002356:	bf00      	nop
 8002358:	20000b7c 	.word	0x20000b7c

0800235c <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 800235c:	4b3b      	ldr	r3, [pc, #236]	; (800244c <xTaskResumeAll+0xf0>)
 800235e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002362:	b953      	cbnz	r3, 800237a <xTaskResumeAll+0x1e>
 8002364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002368:	b672      	cpsid	i
 800236a:	f383 8811 	msr	BASEPRI, r3
 800236e:	f3bf 8f6f 	isb	sy
 8002372:	f3bf 8f4f 	dsb	sy
 8002376:	b662      	cpsie	i
 8002378:	e7fe      	b.n	8002378 <xTaskResumeAll+0x1c>
{
 800237a:	b570      	push	{r4, r5, r6, lr}
	taskENTER_CRITICAL();
 800237c:	f000 fd0a 	bl	8002d94 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8002380:	4b32      	ldr	r3, [pc, #200]	; (800244c <xTaskResumeAll+0xf0>)
 8002382:	f8d3 24ec 	ldr.w	r2, [r3, #1260]	; 0x4ec
 8002386:	3a01      	subs	r2, #1
 8002388:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800238c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002390:	2b00      	cmp	r3, #0
 8002392:	d156      	bne.n	8002442 <xTaskResumeAll+0xe6>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002394:	4b2d      	ldr	r3, [pc, #180]	; (800244c <xTaskResumeAll+0xf0>)
 8002396:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
 800239a:	b90b      	cbnz	r3, 80023a0 <xTaskResumeAll+0x44>
BaseType_t xAlreadyYielded = pdFALSE;
 800239c:	2400      	movs	r4, #0
 800239e:	e051      	b.n	8002444 <xTaskResumeAll+0xe8>
TCB_t *pxTCB = NULL;
 80023a0:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80023a2:	4b2a      	ldr	r3, [pc, #168]	; (800244c <xTaskResumeAll+0xf0>)
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	b32b      	cbz	r3, 80023f4 <xTaskResumeAll+0x98>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80023a8:	4d28      	ldr	r5, [pc, #160]	; (800244c <xTaskResumeAll+0xf0>)
 80023aa:	6a2b      	ldr	r3, [r5, #32]
 80023ac:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80023ae:	f104 0018 	add.w	r0, r4, #24
 80023b2:	f7ff f941 	bl	8001638 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80023b6:	1d26      	adds	r6, r4, #4
 80023b8:	4630      	mov	r0, r6
 80023ba:	f7ff f93d 	bl	8001638 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80023be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80023c0:	f8d5 24e0 	ldr.w	r2, [r5, #1248]	; 0x4e0
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d901      	bls.n	80023cc <xTaskResumeAll+0x70>
 80023c8:	f8c5 34e0 	str.w	r3, [r5, #1248]	; 0x4e0
 80023cc:	4d1f      	ldr	r5, [pc, #124]	; (800244c <xTaskResumeAll+0xf0>)
 80023ce:	f105 0030 	add.w	r0, r5, #48	; 0x30
 80023d2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80023d6:	4631      	mov	r1, r6
 80023d8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80023dc:	f7ff f908 	bl	80015f0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80023e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80023e2:	f8d5 34d4 	ldr.w	r3, [r5, #1236]	; 0x4d4
 80023e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d3da      	bcc.n	80023a2 <xTaskResumeAll+0x46>
						xYieldPending = pdTRUE;
 80023ec:	2201      	movs	r2, #1
 80023ee:	f8c5 24fc 	str.w	r2, [r5, #1276]	; 0x4fc
 80023f2:	e7d6      	b.n	80023a2 <xTaskResumeAll+0x46>
				if( pxTCB != NULL )
 80023f4:	b10c      	cbz	r4, 80023fa <xTaskResumeAll+0x9e>
					prvResetNextTaskUnblockTime();
 80023f6:	f7ff fcdb 	bl	8001db0 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80023fa:	4b14      	ldr	r3, [pc, #80]	; (800244c <xTaskResumeAll+0xf0>)
 80023fc:	f8d3 44f8 	ldr.w	r4, [r3, #1272]	; 0x4f8
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002400:	b98c      	cbnz	r4, 8002426 <xTaskResumeAll+0xca>
				if( xYieldPending != pdFALSE )
 8002402:	4b12      	ldr	r3, [pc, #72]	; (800244c <xTaskResumeAll+0xf0>)
 8002404:	f8d3 44fc 	ldr.w	r4, [r3, #1276]	; 0x4fc
 8002408:	b1e4      	cbz	r4, 8002444 <xTaskResumeAll+0xe8>
					taskYIELD_IF_USING_PREEMPTION();
 800240a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800240e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002412:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002416:	f3bf 8f4f 	dsb	sy
 800241a:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800241e:	2401      	movs	r4, #1
 8002420:	e010      	b.n	8002444 <xTaskResumeAll+0xe8>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002422:	3c01      	subs	r4, #1
 8002424:	d008      	beq.n	8002438 <xTaskResumeAll+0xdc>
							if( xTaskIncrementTick() != pdFALSE )
 8002426:	f7ff ff0b 	bl	8002240 <xTaskIncrementTick>
 800242a:	2800      	cmp	r0, #0
 800242c:	d0f9      	beq.n	8002422 <xTaskResumeAll+0xc6>
								xYieldPending = pdTRUE;
 800242e:	4b07      	ldr	r3, [pc, #28]	; (800244c <xTaskResumeAll+0xf0>)
 8002430:	2201      	movs	r2, #1
 8002432:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
 8002436:	e7f4      	b.n	8002422 <xTaskResumeAll+0xc6>
						uxPendedTicks = 0;
 8002438:	4b04      	ldr	r3, [pc, #16]	; (800244c <xTaskResumeAll+0xf0>)
 800243a:	2200      	movs	r2, #0
 800243c:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
 8002440:	e7df      	b.n	8002402 <xTaskResumeAll+0xa6>
BaseType_t xAlreadyYielded = pdFALSE;
 8002442:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002444:	f000 fccc 	bl	8002de0 <vPortExitCritical>
}
 8002448:	4620      	mov	r0, r4
 800244a:	bd70      	pop	{r4, r5, r6, pc}
 800244c:	20000b7c 	.word	0x20000b7c

08002450 <vTaskDelay>:
	{
 8002450:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002452:	b1c0      	cbz	r0, 8002486 <vTaskDelay+0x36>
 8002454:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8002456:	4b11      	ldr	r3, [pc, #68]	; (800249c <vTaskDelay+0x4c>)
 8002458:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800245c:	b153      	cbz	r3, 8002474 <vTaskDelay+0x24>
 800245e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002462:	b672      	cpsid	i
 8002464:	f383 8811 	msr	BASEPRI, r3
 8002468:	f3bf 8f6f 	isb	sy
 800246c:	f3bf 8f4f 	dsb	sy
 8002470:	b662      	cpsie	i
 8002472:	e7fe      	b.n	8002472 <vTaskDelay+0x22>
			vTaskSuspendAll();
 8002474:	f7ff fed4 	bl	8002220 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002478:	2100      	movs	r1, #0
 800247a:	4620      	mov	r0, r4
 800247c:	f7ff fdd4 	bl	8002028 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8002480:	f7ff ff6c 	bl	800235c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8002484:	b948      	cbnz	r0, 800249a <vTaskDelay+0x4a>
			portYIELD_WITHIN_API();
 8002486:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800248a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800248e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002492:	f3bf 8f4f 	dsb	sy
 8002496:	f3bf 8f6f 	isb	sy
	}
 800249a:	bd10      	pop	{r4, pc}
 800249c:	20000b7c 	.word	0x20000b7c

080024a0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80024a0:	4b22      	ldr	r3, [pc, #136]	; (800252c <vTaskSwitchContext+0x8c>)
 80024a2:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80024a6:	b123      	cbz	r3, 80024b2 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 80024a8:	4b20      	ldr	r3, [pc, #128]	; (800252c <vTaskSwitchContext+0x8c>)
 80024aa:	2201      	movs	r2, #1
 80024ac:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
 80024b0:	4770      	bx	lr
		xYieldPending = pdFALSE;
 80024b2:	4b1e      	ldr	r3, [pc, #120]	; (800252c <vTaskSwitchContext+0x8c>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80024ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80024be:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80024c2:	0091      	lsls	r1, r2, #2
 80024c4:	4a19      	ldr	r2, [pc, #100]	; (800252c <vTaskSwitchContext+0x8c>)
 80024c6:	440a      	add	r2, r1
 80024c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80024ca:	b96a      	cbnz	r2, 80024e8 <vTaskSwitchContext+0x48>
 80024cc:	b10b      	cbz	r3, 80024d2 <vTaskSwitchContext+0x32>
 80024ce:	3b01      	subs	r3, #1
 80024d0:	e7f5      	b.n	80024be <vTaskSwitchContext+0x1e>
 80024d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d6:	b672      	cpsid	i
 80024d8:	f383 8811 	msr	BASEPRI, r3
 80024dc:	f3bf 8f6f 	isb	sy
 80024e0:	f3bf 8f4f 	dsb	sy
 80024e4:	b662      	cpsie	i
 80024e6:	e7fe      	b.n	80024e6 <vTaskSwitchContext+0x46>
 80024e8:	4a10      	ldr	r2, [pc, #64]	; (800252c <vTaskSwitchContext+0x8c>)
 80024ea:	4411      	add	r1, r2
 80024ec:	6b48      	ldr	r0, [r1, #52]	; 0x34
 80024ee:	6840      	ldr	r0, [r0, #4]
 80024f0:	6348      	str	r0, [r1, #52]	; 0x34
 80024f2:	3230      	adds	r2, #48	; 0x30
 80024f4:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 80024f8:	ea4f 018c 	mov.w	r1, ip, lsl #2
 80024fc:	3108      	adds	r1, #8
 80024fe:	440a      	add	r2, r1
 8002500:	4290      	cmp	r0, r2
 8002502:	d00b      	beq.n	800251c <vTaskSwitchContext+0x7c>
 8002504:	4909      	ldr	r1, [pc, #36]	; (800252c <vTaskSwitchContext+0x8c>)
 8002506:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 800250a:	0082      	lsls	r2, r0, #2
 800250c:	440a      	add	r2, r1
 800250e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002510:	68d2      	ldr	r2, [r2, #12]
 8002512:	f8c1 24d4 	str.w	r2, [r1, #1236]	; 0x4d4
 8002516:	f8c1 34e0 	str.w	r3, [r1, #1248]	; 0x4e0
}
 800251a:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800251c:	6840      	ldr	r0, [r0, #4]
 800251e:	4662      	mov	r2, ip
 8002520:	0091      	lsls	r1, r2, #2
 8002522:	4a02      	ldr	r2, [pc, #8]	; (800252c <vTaskSwitchContext+0x8c>)
 8002524:	440a      	add	r2, r1
 8002526:	6350      	str	r0, [r2, #52]	; 0x34
 8002528:	e7ec      	b.n	8002504 <vTaskSwitchContext+0x64>
 800252a:	bf00      	nop
 800252c:	20000b7c 	.word	0x20000b7c

08002530 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8002530:	b160      	cbz	r0, 800254c <vTaskPlaceOnEventList+0x1c>
{
 8002532:	b510      	push	{r4, lr}
 8002534:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002536:	4a0b      	ldr	r2, [pc, #44]	; (8002564 <vTaskPlaceOnEventList+0x34>)
 8002538:	f8d2 14d4 	ldr.w	r1, [r2, #1236]	; 0x4d4
 800253c:	3118      	adds	r1, #24
 800253e:	f7ff f862 	bl	8001606 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002542:	2101      	movs	r1, #1
 8002544:	4620      	mov	r0, r4
 8002546:	f7ff fd6f 	bl	8002028 <prvAddCurrentTaskToDelayedList>
}
 800254a:	bd10      	pop	{r4, pc}
 800254c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002550:	b672      	cpsid	i
 8002552:	f383 8811 	msr	BASEPRI, r3
 8002556:	f3bf 8f6f 	isb	sy
 800255a:	f3bf 8f4f 	dsb	sy
 800255e:	b662      	cpsie	i
	configASSERT( pxEventList );
 8002560:	e7fe      	b.n	8002560 <vTaskPlaceOnEventList+0x30>
 8002562:	bf00      	nop
 8002564:	20000b7c 	.word	0x20000b7c

08002568 <vTaskPlaceOnEventListRestricted>:
	{
 8002568:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 800256a:	b178      	cbz	r0, 800258c <vTaskPlaceOnEventListRestricted+0x24>
 800256c:	460d      	mov	r5, r1
 800256e:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002570:	4a0c      	ldr	r2, [pc, #48]	; (80025a4 <vTaskPlaceOnEventListRestricted+0x3c>)
 8002572:	f8d2 14d4 	ldr.w	r1, [r2, #1236]	; 0x4d4
 8002576:	3118      	adds	r1, #24
 8002578:	f7ff f83a 	bl	80015f0 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 800257c:	b10c      	cbz	r4, 8002582 <vTaskPlaceOnEventListRestricted+0x1a>
			xTicksToWait = portMAX_DELAY;
 800257e:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002582:	4621      	mov	r1, r4
 8002584:	4628      	mov	r0, r5
 8002586:	f7ff fd4f 	bl	8002028 <prvAddCurrentTaskToDelayedList>
	}
 800258a:	bd38      	pop	{r3, r4, r5, pc}
 800258c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002590:	b672      	cpsid	i
 8002592:	f383 8811 	msr	BASEPRI, r3
 8002596:	f3bf 8f6f 	isb	sy
 800259a:	f3bf 8f4f 	dsb	sy
 800259e:	b662      	cpsie	i
		configASSERT( pxEventList );
 80025a0:	e7fe      	b.n	80025a0 <vTaskPlaceOnEventListRestricted+0x38>
 80025a2:	bf00      	nop
 80025a4:	20000b7c 	.word	0x20000b7c

080025a8 <xTaskRemoveFromEventList>:
{
 80025a8:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80025aa:	68c3      	ldr	r3, [r0, #12]
 80025ac:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80025ae:	b34c      	cbz	r4, 8002604 <xTaskRemoveFromEventList+0x5c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80025b0:	f104 0518 	add.w	r5, r4, #24
 80025b4:	4628      	mov	r0, r5
 80025b6:	f7ff f83f 	bl	8001638 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80025ba:	4b1b      	ldr	r3, [pc, #108]	; (8002628 <xTaskRemoveFromEventList+0x80>)
 80025bc:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80025c0:	bb5b      	cbnz	r3, 800261a <xTaskRemoveFromEventList+0x72>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80025c2:	1d25      	adds	r5, r4, #4
 80025c4:	4628      	mov	r0, r5
 80025c6:	f7ff f837 	bl	8001638 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80025ca:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80025cc:	4b16      	ldr	r3, [pc, #88]	; (8002628 <xTaskRemoveFromEventList+0x80>)
 80025ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80025d2:	4298      	cmp	r0, r3
 80025d4:	d902      	bls.n	80025dc <xTaskRemoveFromEventList+0x34>
 80025d6:	4b14      	ldr	r3, [pc, #80]	; (8002628 <xTaskRemoveFromEventList+0x80>)
 80025d8:	f8c3 04e0 	str.w	r0, [r3, #1248]	; 0x4e0
 80025dc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80025e0:	4629      	mov	r1, r5
 80025e2:	4b12      	ldr	r3, [pc, #72]	; (800262c <xTaskRemoveFromEventList+0x84>)
 80025e4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80025e8:	f7ff f802 	bl	80015f0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80025ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80025ee:	4b0e      	ldr	r3, [pc, #56]	; (8002628 <xTaskRemoveFromEventList+0x80>)
 80025f0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 80025f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d914      	bls.n	8002624 <xTaskRemoveFromEventList+0x7c>
		xYieldPending = pdTRUE;
 80025fa:	2001      	movs	r0, #1
 80025fc:	4b0a      	ldr	r3, [pc, #40]	; (8002628 <xTaskRemoveFromEventList+0x80>)
 80025fe:	f8c3 04fc 	str.w	r0, [r3, #1276]	; 0x4fc
}
 8002602:	bd38      	pop	{r3, r4, r5, pc}
 8002604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002608:	b672      	cpsid	i
 800260a:	f383 8811 	msr	BASEPRI, r3
 800260e:	f3bf 8f6f 	isb	sy
 8002612:	f3bf 8f4f 	dsb	sy
 8002616:	b662      	cpsie	i
	configASSERT( pxUnblockedTCB );
 8002618:	e7fe      	b.n	8002618 <xTaskRemoveFromEventList+0x70>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800261a:	4629      	mov	r1, r5
 800261c:	4804      	ldr	r0, [pc, #16]	; (8002630 <xTaskRemoveFromEventList+0x88>)
 800261e:	f7fe ffe7 	bl	80015f0 <vListInsertEnd>
 8002622:	e7e3      	b.n	80025ec <xTaskRemoveFromEventList+0x44>
		xReturn = pdFALSE;
 8002624:	2000      	movs	r0, #0
	return xReturn;
 8002626:	e7ec      	b.n	8002602 <xTaskRemoveFromEventList+0x5a>
 8002628:	20000b7c 	.word	0x20000b7c
 800262c:	20000bac 	.word	0x20000bac
 8002630:	20000b90 	.word	0x20000b90

08002634 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002634:	4b03      	ldr	r3, [pc, #12]	; (8002644 <vTaskInternalSetTimeOutState+0x10>)
 8002636:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	; 0x4f4
 800263a:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800263c:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8002640:	6043      	str	r3, [r0, #4]
}
 8002642:	4770      	bx	lr
 8002644:	20000b7c 	.word	0x20000b7c

08002648 <xTaskCheckForTimeOut>:
{
 8002648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800264a:	b1d8      	cbz	r0, 8002684 <xTaskCheckForTimeOut+0x3c>
 800264c:	460c      	mov	r4, r1
 800264e:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8002650:	b319      	cbz	r1, 800269a <xTaskCheckForTimeOut+0x52>
	taskENTER_CRITICAL();
 8002652:	f000 fb9f 	bl	8002d94 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8002656:	4b1e      	ldr	r3, [pc, #120]	; (80026d0 <xTaskCheckForTimeOut+0x88>)
 8002658:	f8d3 14e8 	ldr.w	r1, [r3, #1256]	; 0x4e8
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800265c:	686b      	ldr	r3, [r5, #4]
 800265e:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 8002660:	6822      	ldr	r2, [r4, #0]
 8002662:	f1b2 3fff 	cmp.w	r2, #4294967295
 8002666:	d02b      	beq.n	80026c0 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002668:	4e19      	ldr	r6, [pc, #100]	; (80026d0 <xTaskCheckForTimeOut+0x88>)
 800266a:	f8d6 64f4 	ldr.w	r6, [r6, #1268]	; 0x4f4
 800266e:	682f      	ldr	r7, [r5, #0]
 8002670:	42b7      	cmp	r7, r6
 8002672:	d001      	beq.n	8002678 <xTaskCheckForTimeOut+0x30>
 8002674:	428b      	cmp	r3, r1
 8002676:	d928      	bls.n	80026ca <xTaskCheckForTimeOut+0x82>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002678:	4282      	cmp	r2, r0
 800267a:	d819      	bhi.n	80026b0 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait = 0;
 800267c:	2300      	movs	r3, #0
 800267e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8002680:	2401      	movs	r4, #1
 8002682:	e01e      	b.n	80026c2 <xTaskCheckForTimeOut+0x7a>
 8002684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002688:	b672      	cpsid	i
 800268a:	f383 8811 	msr	BASEPRI, r3
 800268e:	f3bf 8f6f 	isb	sy
 8002692:	f3bf 8f4f 	dsb	sy
 8002696:	b662      	cpsie	i
	configASSERT( pxTimeOut );
 8002698:	e7fe      	b.n	8002698 <xTaskCheckForTimeOut+0x50>
 800269a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800269e:	b672      	cpsid	i
 80026a0:	f383 8811 	msr	BASEPRI, r3
 80026a4:	f3bf 8f6f 	isb	sy
 80026a8:	f3bf 8f4f 	dsb	sy
 80026ac:	b662      	cpsie	i
	configASSERT( pxTicksToWait );
 80026ae:	e7fe      	b.n	80026ae <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait -= xElapsedTime;
 80026b0:	1a5b      	subs	r3, r3, r1
 80026b2:	4413      	add	r3, r2
 80026b4:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80026b6:	4628      	mov	r0, r5
 80026b8:	f7ff ffbc 	bl	8002634 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80026bc:	2400      	movs	r4, #0
 80026be:	e000      	b.n	80026c2 <xTaskCheckForTimeOut+0x7a>
				xReturn = pdFALSE;
 80026c0:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80026c2:	f000 fb8d 	bl	8002de0 <vPortExitCritical>
}
 80026c6:	4620      	mov	r0, r4
 80026c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 80026ca:	2401      	movs	r4, #1
 80026cc:	e7f9      	b.n	80026c2 <xTaskCheckForTimeOut+0x7a>
 80026ce:	bf00      	nop
 80026d0:	20000b7c 	.word	0x20000b7c

080026d4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80026d4:	4b02      	ldr	r3, [pc, #8]	; (80026e0 <vTaskMissedYield+0xc>)
 80026d6:	2201      	movs	r2, #1
 80026d8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
}
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	20000b7c 	.word	0x20000b7c

080026e4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80026e4:	4b06      	ldr	r3, [pc, #24]	; (8002700 <xTaskGetSchedulerState+0x1c>)
 80026e6:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 80026ea:	b13b      	cbz	r3, 80026fc <xTaskGetSchedulerState+0x18>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80026ec:	4b04      	ldr	r3, [pc, #16]	; (8002700 <xTaskGetSchedulerState+0x1c>)
 80026ee:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80026f2:	b10b      	cbz	r3, 80026f8 <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_SUSPENDED;
 80026f4:	2000      	movs	r0, #0
	}
 80026f6:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 80026f8:	2002      	movs	r0, #2
 80026fa:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80026fc:	2001      	movs	r0, #1
 80026fe:	4770      	bx	lr
 8002700:	20000b7c 	.word	0x20000b7c

08002704 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8002704:	2800      	cmp	r0, #0
 8002706:	d042      	beq.n	800278e <xTaskPriorityDisinherit+0x8a>
	{
 8002708:	b538      	push	{r3, r4, r5, lr}
 800270a:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 800270c:	4b22      	ldr	r3, [pc, #136]	; (8002798 <xTaskPriorityDisinherit+0x94>)
 800270e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8002712:	4283      	cmp	r3, r0
 8002714:	d00a      	beq.n	800272c <xTaskPriorityDisinherit+0x28>
 8002716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800271a:	b672      	cpsid	i
 800271c:	f383 8811 	msr	BASEPRI, r3
 8002720:	f3bf 8f6f 	isb	sy
 8002724:	f3bf 8f4f 	dsb	sy
 8002728:	b662      	cpsie	i
 800272a:	e7fe      	b.n	800272a <xTaskPriorityDisinherit+0x26>
			configASSERT( pxTCB->uxMutexesHeld );
 800272c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800272e:	b953      	cbnz	r3, 8002746 <xTaskPriorityDisinherit+0x42>
 8002730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002734:	b672      	cpsid	i
 8002736:	f383 8811 	msr	BASEPRI, r3
 800273a:	f3bf 8f6f 	isb	sy
 800273e:	f3bf 8f4f 	dsb	sy
 8002742:	b662      	cpsie	i
 8002744:	e7fe      	b.n	8002744 <xTaskPriorityDisinherit+0x40>
			( pxTCB->uxMutexesHeld )--;
 8002746:	3b01      	subs	r3, #1
 8002748:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800274a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800274c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800274e:	4291      	cmp	r1, r2
 8002750:	d01f      	beq.n	8002792 <xTaskPriorityDisinherit+0x8e>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002752:	b10b      	cbz	r3, 8002758 <xTaskPriorityDisinherit+0x54>
	BaseType_t xReturn = pdFALSE;
 8002754:	2000      	movs	r0, #0
	}
 8002756:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002758:	1d05      	adds	r5, r0, #4
 800275a:	4628      	mov	r0, r5
 800275c:	f7fe ff6c 	bl	8001638 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002760:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002762:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002764:	f1c0 0338 	rsb	r3, r0, #56	; 0x38
 8002768:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800276a:	4b0b      	ldr	r3, [pc, #44]	; (8002798 <xTaskPriorityDisinherit+0x94>)
 800276c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002770:	4298      	cmp	r0, r3
 8002772:	d902      	bls.n	800277a <xTaskPriorityDisinherit+0x76>
 8002774:	4b08      	ldr	r3, [pc, #32]	; (8002798 <xTaskPriorityDisinherit+0x94>)
 8002776:	f8c3 04e0 	str.w	r0, [r3, #1248]	; 0x4e0
 800277a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800277e:	4629      	mov	r1, r5
 8002780:	4b06      	ldr	r3, [pc, #24]	; (800279c <xTaskPriorityDisinherit+0x98>)
 8002782:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002786:	f7fe ff33 	bl	80015f0 <vListInsertEnd>
					xReturn = pdTRUE;
 800278a:	2001      	movs	r0, #1
 800278c:	e7e3      	b.n	8002756 <xTaskPriorityDisinherit+0x52>
	BaseType_t xReturn = pdFALSE;
 800278e:	2000      	movs	r0, #0
	}
 8002790:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8002792:	2000      	movs	r0, #0
 8002794:	e7df      	b.n	8002756 <xTaskPriorityDisinherit+0x52>
 8002796:	bf00      	nop
 8002798:	20000b7c 	.word	0x20000b7c
 800279c:	20000bac 	.word	0x20000bac

080027a0 <xTaskNotifyWait>:
	{
 80027a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027a2:	4606      	mov	r6, r0
 80027a4:	460f      	mov	r7, r1
 80027a6:	4614      	mov	r4, r2
 80027a8:	461d      	mov	r5, r3
		taskENTER_CRITICAL();
 80027aa:	f000 faf3 	bl	8002d94 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80027ae:	4b25      	ldr	r3, [pc, #148]	; (8002844 <xTaskNotifyWait+0xa4>)
 80027b0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 80027b4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80027b8:	b2d2      	uxtb	r2, r2
 80027ba:	2a02      	cmp	r2, #2
 80027bc:	d00c      	beq.n	80027d8 <xTaskNotifyWait+0x38>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80027be:	4a21      	ldr	r2, [pc, #132]	; (8002844 <xTaskNotifyWait+0xa4>)
 80027c0:	f8d2 14d4 	ldr.w	r1, [r2, #1236]	; 0x4d4
 80027c4:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 80027c6:	ea23 0306 	bic.w	r3, r3, r6
 80027ca:	654b      	str	r3, [r1, #84]	; 0x54
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80027cc:	f8d2 34d4 	ldr.w	r3, [r2, #1236]	; 0x4d4
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				if( xTicksToWait > ( TickType_t ) 0 )
 80027d6:	b9e5      	cbnz	r5, 8002812 <xTaskNotifyWait+0x72>
		taskEXIT_CRITICAL();
 80027d8:	f000 fb02 	bl	8002de0 <vPortExitCritical>
		taskENTER_CRITICAL();
 80027dc:	f000 fada 	bl	8002d94 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 80027e0:	b124      	cbz	r4, 80027ec <xTaskNotifyWait+0x4c>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80027e2:	4b18      	ldr	r3, [pc, #96]	; (8002844 <xTaskNotifyWait+0xa4>)
 80027e4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 80027e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ea:	6023      	str	r3, [r4, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80027ec:	4b15      	ldr	r3, [pc, #84]	; (8002844 <xTaskNotifyWait+0xa4>)
 80027ee:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 80027f2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d019      	beq.n	8002830 <xTaskNotifyWait+0x90>
				xReturn = pdFALSE;
 80027fc:	2400      	movs	r4, #0
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80027fe:	4b11      	ldr	r3, [pc, #68]	; (8002844 <xTaskNotifyWait+0xa4>)
 8002800:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8002804:	2200      	movs	r2, #0
 8002806:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		taskEXIT_CRITICAL();
 800280a:	f000 fae9 	bl	8002de0 <vPortExitCritical>
	}
 800280e:	4620      	mov	r0, r4
 8002810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002812:	4611      	mov	r1, r2
 8002814:	4628      	mov	r0, r5
 8002816:	f7ff fc07 	bl	8002028 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800281a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800281e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002822:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002826:	f3bf 8f4f 	dsb	sy
 800282a:	f3bf 8f6f 	isb	sy
 800282e:	e7d3      	b.n	80027d8 <xTaskNotifyWait+0x38>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8002830:	4b04      	ldr	r3, [pc, #16]	; (8002844 <xTaskNotifyWait+0xa4>)
 8002832:	f8d3 24d4 	ldr.w	r2, [r3, #1236]	; 0x4d4
 8002836:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002838:	ea23 0307 	bic.w	r3, r3, r7
 800283c:	6553      	str	r3, [r2, #84]	; 0x54
				xReturn = pdTRUE;
 800283e:	2401      	movs	r4, #1
 8002840:	e7dd      	b.n	80027fe <xTaskNotifyWait+0x5e>
 8002842:	bf00      	nop
 8002844:	20000b7c 	.word	0x20000b7c

08002848 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002848:	4b06      	ldr	r3, [pc, #24]	; (8002864 <prvGetNextExpireTime+0x1c>)
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	6813      	ldr	r3, [r2, #0]
 800284e:	b92b      	cbnz	r3, 800285c <prvGetNextExpireTime+0x14>
 8002850:	2301      	movs	r3, #1
 8002852:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002854:	b923      	cbnz	r3, 8002860 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002856:	68d3      	ldr	r3, [r2, #12]
 8002858:	6818      	ldr	r0, [r3, #0]
 800285a:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800285c:	2300      	movs	r3, #0
 800285e:	e7f8      	b.n	8002852 <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8002860:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 8002862:	4770      	bx	lr
 8002864:	2000107c 	.word	0x2000107c

08002868 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8002868:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800286a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800286c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800286e:	4291      	cmp	r1, r2
 8002870:	d80c      	bhi.n	800288c <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002872:	1ad2      	subs	r2, r2, r3
 8002874:	6983      	ldr	r3, [r0, #24]
 8002876:	429a      	cmp	r2, r3
 8002878:	d301      	bcc.n	800287e <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800287a:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 800287c:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800287e:	1d01      	adds	r1, r0, #4
 8002880:	4b0b      	ldr	r3, [pc, #44]	; (80028b0 <prvInsertTimerInActiveList+0x48>)
 8002882:	6858      	ldr	r0, [r3, #4]
 8002884:	f7fe febf 	bl	8001606 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8002888:	2000      	movs	r0, #0
 800288a:	e7f7      	b.n	800287c <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800288c:	429a      	cmp	r2, r3
 800288e:	bf2c      	ite	cs
 8002890:	2200      	movcs	r2, #0
 8002892:	2201      	movcc	r2, #1
 8002894:	4299      	cmp	r1, r3
 8002896:	bf38      	it	cc
 8002898:	2200      	movcc	r2, #0
 800289a:	b10a      	cbz	r2, 80028a0 <prvInsertTimerInActiveList+0x38>
			xProcessTimerNow = pdTRUE;
 800289c:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800289e:	e7ed      	b.n	800287c <prvInsertTimerInActiveList+0x14>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80028a0:	1d01      	adds	r1, r0, #4
 80028a2:	4b03      	ldr	r3, [pc, #12]	; (80028b0 <prvInsertTimerInActiveList+0x48>)
 80028a4:	6818      	ldr	r0, [r3, #0]
 80028a6:	f7fe feae 	bl	8001606 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80028aa:	2000      	movs	r0, #0
 80028ac:	e7e6      	b.n	800287c <prvInsertTimerInActiveList+0x14>
 80028ae:	bf00      	nop
 80028b0:	2000107c 	.word	0x2000107c

080028b4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80028b4:	b570      	push	{r4, r5, r6, lr}
 80028b6:	b082      	sub	sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80028b8:	f000 fa6c 	bl	8002d94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80028bc:	4b12      	ldr	r3, [pc, #72]	; (8002908 <prvCheckForValidListAndQueue+0x54>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	b11b      	cbz	r3, 80028ca <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80028c2:	f000 fa8d 	bl	8002de0 <vPortExitCritical>
}
 80028c6:	b002      	add	sp, #8
 80028c8:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
 80028ca:	4c0f      	ldr	r4, [pc, #60]	; (8002908 <prvCheckForValidListAndQueue+0x54>)
 80028cc:	f104 060c 	add.w	r6, r4, #12
 80028d0:	4630      	mov	r0, r6
 80028d2:	f7fe fe7f 	bl	80015d4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80028d6:	f104 0520 	add.w	r5, r4, #32
 80028da:	4628      	mov	r0, r5
 80028dc:	f7fe fe7a 	bl	80015d4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80028e0:	6026      	str	r6, [r4, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80028e2:	6065      	str	r5, [r4, #4]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80028e4:	2300      	movs	r3, #0
 80028e6:	9300      	str	r3, [sp, #0]
 80028e8:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80028ec:	f104 0284 	add.w	r2, r4, #132	; 0x84
 80028f0:	2110      	movs	r1, #16
 80028f2:	200a      	movs	r0, #10
 80028f4:	f7fe ffa8 	bl	8001848 <xQueueGenericCreateStatic>
 80028f8:	60a0      	str	r0, [r4, #8]
				if( xTimerQueue != NULL )
 80028fa:	2800      	cmp	r0, #0
 80028fc:	d0e1      	beq.n	80028c2 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80028fe:	4903      	ldr	r1, [pc, #12]	; (800290c <prvCheckForValidListAndQueue+0x58>)
 8002900:	f7ff fa18 	bl	8001d34 <vQueueAddToRegistry>
 8002904:	e7dd      	b.n	80028c2 <prvCheckForValidListAndQueue+0xe>
 8002906:	bf00      	nop
 8002908:	2000107c 	.word	0x2000107c
 800290c:	0800b228 	.word	0x0800b228

08002910 <xTimerCreateTimerTask>:
{
 8002910:	b510      	push	{r4, lr}
 8002912:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8002914:	f7ff ffce 	bl	80028b4 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8002918:	4b14      	ldr	r3, [pc, #80]	; (800296c <xTimerCreateTimerTask+0x5c>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	b1d3      	cbz	r3, 8002954 <xTimerCreateTimerTask+0x44>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800291e:	2400      	movs	r4, #0
 8002920:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8002922:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8002924:	aa07      	add	r2, sp, #28
 8002926:	a906      	add	r1, sp, #24
 8002928:	a805      	add	r0, sp, #20
 800292a:	f7fe fe43 	bl	80015b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800292e:	9b05      	ldr	r3, [sp, #20]
 8002930:	9302      	str	r3, [sp, #8]
 8002932:	9b06      	ldr	r3, [sp, #24]
 8002934:	9301      	str	r3, [sp, #4]
 8002936:	2302      	movs	r3, #2
 8002938:	9300      	str	r3, [sp, #0]
 800293a:	4623      	mov	r3, r4
 800293c:	9a07      	ldr	r2, [sp, #28]
 800293e:	490c      	ldr	r1, [pc, #48]	; (8002970 <xTimerCreateTimerTask+0x60>)
 8002940:	480c      	ldr	r0, [pc, #48]	; (8002974 <xTimerCreateTimerTask+0x64>)
 8002942:	f7ff fbab 	bl	800209c <xTaskCreateStatic>
 8002946:	4b09      	ldr	r3, [pc, #36]	; (800296c <xTimerCreateTimerTask+0x5c>)
 8002948:	f8c3 0124 	str.w	r0, [r3, #292]	; 0x124
			if( xTimerTaskHandle != NULL )
 800294c:	b110      	cbz	r0, 8002954 <xTimerCreateTimerTask+0x44>
}
 800294e:	2001      	movs	r0, #1
 8002950:	b008      	add	sp, #32
 8002952:	bd10      	pop	{r4, pc}
 8002954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002958:	b672      	cpsid	i
 800295a:	f383 8811 	msr	BASEPRI, r3
 800295e:	f3bf 8f6f 	isb	sy
 8002962:	f3bf 8f4f 	dsb	sy
 8002966:	b662      	cpsie	i
	configASSERT( xReturn );
 8002968:	e7fe      	b.n	8002968 <xTimerCreateTimerTask+0x58>
 800296a:	bf00      	nop
 800296c:	2000107c 	.word	0x2000107c
 8002970:	0800b230 	.word	0x0800b230
 8002974:	08002ca1 	.word	0x08002ca1

08002978 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8002978:	b1b8      	cbz	r0, 80029aa <xTimerGenericCommand+0x32>
 800297a:	469c      	mov	ip, r3
 800297c:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 800297e:	4819      	ldr	r0, [pc, #100]	; (80029e4 <xTimerGenericCommand+0x6c>)
 8002980:	6880      	ldr	r0, [r0, #8]
 8002982:	b368      	cbz	r0, 80029e0 <xTimerGenericCommand+0x68>
{
 8002984:	b500      	push	{lr}
 8002986:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8002988:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800298a:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800298c:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800298e:	2905      	cmp	r1, #5
 8002990:	dc1e      	bgt.n	80029d0 <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002992:	f7ff fea7 	bl	80026e4 <xTaskGetSchedulerState>
 8002996:	2802      	cmp	r0, #2
 8002998:	d012      	beq.n	80029c0 <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800299a:	2300      	movs	r3, #0
 800299c:	461a      	mov	r2, r3
 800299e:	4669      	mov	r1, sp
 80029a0:	4810      	ldr	r0, [pc, #64]	; (80029e4 <xTimerGenericCommand+0x6c>)
 80029a2:	6880      	ldr	r0, [r0, #8]
 80029a4:	f7fe ffd6 	bl	8001954 <xQueueGenericSend>
 80029a8:	e017      	b.n	80029da <xTimerGenericCommand+0x62>
 80029aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ae:	b672      	cpsid	i
 80029b0:	f383 8811 	msr	BASEPRI, r3
 80029b4:	f3bf 8f6f 	isb	sy
 80029b8:	f3bf 8f4f 	dsb	sy
 80029bc:	b662      	cpsie	i
	configASSERT( xTimer );
 80029be:	e7fe      	b.n	80029be <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80029c0:	2300      	movs	r3, #0
 80029c2:	9a06      	ldr	r2, [sp, #24]
 80029c4:	4669      	mov	r1, sp
 80029c6:	4807      	ldr	r0, [pc, #28]	; (80029e4 <xTimerGenericCommand+0x6c>)
 80029c8:	6880      	ldr	r0, [r0, #8]
 80029ca:	f7fe ffc3 	bl	8001954 <xQueueGenericSend>
 80029ce:	e004      	b.n	80029da <xTimerGenericCommand+0x62>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80029d0:	2300      	movs	r3, #0
 80029d2:	4662      	mov	r2, ip
 80029d4:	4669      	mov	r1, sp
 80029d6:	f7ff f889 	bl	8001aec <xQueueGenericSendFromISR>
}
 80029da:	b005      	add	sp, #20
 80029dc:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 80029e0:	2000      	movs	r0, #0
}
 80029e2:	4770      	bx	lr
 80029e4:	2000107c 	.word	0x2000107c

080029e8 <prvSwitchTimerLists>:
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80029e8:	4b22      	ldr	r3, [pc, #136]	; (8002a74 <prvSwitchTimerLists+0x8c>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	2a00      	cmp	r2, #0
 80029f0:	d03b      	beq.n	8002a6a <prvSwitchTimerLists+0x82>
{
 80029f2:	b570      	push	{r4, r5, r6, lr}
 80029f4:	b082      	sub	sp, #8
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029fa:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80029fc:	1d25      	adds	r5, r4, #4
 80029fe:	4628      	mov	r0, r5
 8002a00:	f7fe fe1a 	bl	8001638 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002a04:	6a23      	ldr	r3, [r4, #32]
 8002a06:	4620      	mov	r0, r4
 8002a08:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002a0a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8002a0e:	f013 0f04 	tst.w	r3, #4
 8002a12:	d10a      	bne.n	8002a2a <prvSwitchTimerLists+0x42>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002a14:	4b17      	ldr	r3, [pc, #92]	; (8002a74 <prvSwitchTimerLists+0x8c>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	2a00      	cmp	r2, #0
 8002a1c:	d1eb      	bne.n	80029f6 <prvSwitchTimerLists+0xe>
	pxCurrentTimerList = pxOverflowTimerList;
 8002a1e:	4a15      	ldr	r2, [pc, #84]	; (8002a74 <prvSwitchTimerLists+0x8c>)
 8002a20:	6851      	ldr	r1, [r2, #4]
 8002a22:	6011      	str	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8002a24:	6053      	str	r3, [r2, #4]
}
 8002a26:	b002      	add	sp, #8
 8002a28:	bd70      	pop	{r4, r5, r6, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002a2a:	69a3      	ldr	r3, [r4, #24]
 8002a2c:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8002a2e:	429e      	cmp	r6, r3
 8002a30:	d207      	bcs.n	8002a42 <prvSwitchTimerLists+0x5a>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002a32:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002a34:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002a36:	4629      	mov	r1, r5
 8002a38:	4b0e      	ldr	r3, [pc, #56]	; (8002a74 <prvSwitchTimerLists+0x8c>)
 8002a3a:	6818      	ldr	r0, [r3, #0]
 8002a3c:	f7fe fde3 	bl	8001606 <vListInsert>
 8002a40:	e7e8      	b.n	8002a14 <prvSwitchTimerLists+0x2c>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002a42:	2100      	movs	r1, #0
 8002a44:	9100      	str	r1, [sp, #0]
 8002a46:	460b      	mov	r3, r1
 8002a48:	4632      	mov	r2, r6
 8002a4a:	4620      	mov	r0, r4
 8002a4c:	f7ff ff94 	bl	8002978 <xTimerGenericCommand>
				configASSERT( xResult );
 8002a50:	2800      	cmp	r0, #0
 8002a52:	d1df      	bne.n	8002a14 <prvSwitchTimerLists+0x2c>
 8002a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a58:	b672      	cpsid	i
 8002a5a:	f383 8811 	msr	BASEPRI, r3
 8002a5e:	f3bf 8f6f 	isb	sy
 8002a62:	f3bf 8f4f 	dsb	sy
 8002a66:	b662      	cpsie	i
 8002a68:	e7fe      	b.n	8002a68 <prvSwitchTimerLists+0x80>
	pxCurrentTimerList = pxOverflowTimerList;
 8002a6a:	4a02      	ldr	r2, [pc, #8]	; (8002a74 <prvSwitchTimerLists+0x8c>)
 8002a6c:	6851      	ldr	r1, [r2, #4]
 8002a6e:	6011      	str	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8002a70:	6053      	str	r3, [r2, #4]
 8002a72:	4770      	bx	lr
 8002a74:	2000107c 	.word	0x2000107c

08002a78 <prvSampleTimeNow>:
{
 8002a78:	b538      	push	{r3, r4, r5, lr}
 8002a7a:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 8002a7c:	f7ff fbda 	bl	8002234 <xTaskGetTickCount>
 8002a80:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 8002a82:	4b08      	ldr	r3, [pc, #32]	; (8002aa4 <prvSampleTimeNow+0x2c>)
 8002a84:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8002a88:	4283      	cmp	r3, r0
 8002a8a:	d806      	bhi.n	8002a9a <prvSampleTimeNow+0x22>
		*pxTimerListsWereSwitched = pdFALSE;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 8002a90:	4b04      	ldr	r3, [pc, #16]	; (8002aa4 <prvSampleTimeNow+0x2c>)
 8002a92:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
}
 8002a96:	4620      	mov	r0, r4
 8002a98:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 8002a9a:	f7ff ffa5 	bl	80029e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	602b      	str	r3, [r5, #0]
 8002aa2:	e7f5      	b.n	8002a90 <prvSampleTimeNow+0x18>
 8002aa4:	2000107c 	.word	0x2000107c

08002aa8 <prvProcessExpiredTimer>:
{
 8002aa8:	b570      	push	{r4, r5, r6, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	4606      	mov	r6, r0
 8002aae:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ab0:	4918      	ldr	r1, [pc, #96]	; (8002b14 <prvProcessExpiredTimer+0x6c>)
 8002ab2:	6809      	ldr	r1, [r1, #0]
 8002ab4:	68c9      	ldr	r1, [r1, #12]
 8002ab6:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002ab8:	1d20      	adds	r0, r4, #4
 8002aba:	f7fe fdbd 	bl	8001638 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002abe:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
 8002ac2:	f01c 0f04 	tst.w	ip, #4
 8002ac6:	d108      	bne.n	8002ada <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002ac8:	f02c 0c01 	bic.w	ip, ip, #1
 8002acc:	f884 c028 	strb.w	ip, [r4, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002ad0:	6a23      	ldr	r3, [r4, #32]
 8002ad2:	4620      	mov	r0, r4
 8002ad4:	4798      	blx	r3
}
 8002ad6:	b002      	add	sp, #8
 8002ad8:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002ada:	69a1      	ldr	r1, [r4, #24]
 8002adc:	4633      	mov	r3, r6
 8002ade:	462a      	mov	r2, r5
 8002ae0:	4431      	add	r1, r6
 8002ae2:	4620      	mov	r0, r4
 8002ae4:	f7ff fec0 	bl	8002868 <prvInsertTimerInActiveList>
 8002ae8:	2800      	cmp	r0, #0
 8002aea:	d0f1      	beq.n	8002ad0 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002aec:	2100      	movs	r1, #0
 8002aee:	9100      	str	r1, [sp, #0]
 8002af0:	460b      	mov	r3, r1
 8002af2:	4632      	mov	r2, r6
 8002af4:	4620      	mov	r0, r4
 8002af6:	f7ff ff3f 	bl	8002978 <xTimerGenericCommand>
			configASSERT( xResult );
 8002afa:	2800      	cmp	r0, #0
 8002afc:	d1e8      	bne.n	8002ad0 <prvProcessExpiredTimer+0x28>
 8002afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b02:	b672      	cpsid	i
 8002b04:	f383 8811 	msr	BASEPRI, r3
 8002b08:	f3bf 8f6f 	isb	sy
 8002b0c:	f3bf 8f4f 	dsb	sy
 8002b10:	b662      	cpsie	i
 8002b12:	e7fe      	b.n	8002b12 <prvProcessExpiredTimer+0x6a>
 8002b14:	2000107c 	.word	0x2000107c

08002b18 <prvProcessTimerOrBlockTask>:
{
 8002b18:	b570      	push	{r4, r5, r6, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	4606      	mov	r6, r0
 8002b1e:	460c      	mov	r4, r1
	vTaskSuspendAll();
 8002b20:	f7ff fb7e 	bl	8002220 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002b24:	a801      	add	r0, sp, #4
 8002b26:	f7ff ffa7 	bl	8002a78 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8002b2a:	9b01      	ldr	r3, [sp, #4]
 8002b2c:	bb3b      	cbnz	r3, 8002b7e <prvProcessTimerOrBlockTask+0x66>
 8002b2e:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002b30:	42b0      	cmp	r0, r6
 8002b32:	bf28      	it	cs
 8002b34:	2c00      	cmpcs	r4, #0
 8002b36:	d019      	beq.n	8002b6c <prvProcessTimerOrBlockTask+0x54>
				if( xListWasEmpty != pdFALSE )
 8002b38:	b124      	cbz	r4, 8002b44 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002b3a:	4a13      	ldr	r2, [pc, #76]	; (8002b88 <prvProcessTimerOrBlockTask+0x70>)
 8002b3c:	6852      	ldr	r2, [r2, #4]
 8002b3e:	6812      	ldr	r2, [r2, #0]
 8002b40:	b9da      	cbnz	r2, 8002b7a <prvProcessTimerOrBlockTask+0x62>
 8002b42:	2401      	movs	r4, #1
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002b44:	4622      	mov	r2, r4
 8002b46:	1b71      	subs	r1, r6, r5
 8002b48:	4b0f      	ldr	r3, [pc, #60]	; (8002b88 <prvProcessTimerOrBlockTask+0x70>)
 8002b4a:	6898      	ldr	r0, [r3, #8]
 8002b4c:	f7ff f906 	bl	8001d5c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8002b50:	f7ff fc04 	bl	800235c <xTaskResumeAll>
 8002b54:	b9a8      	cbnz	r0, 8002b82 <prvProcessTimerOrBlockTask+0x6a>
					portYIELD_WITHIN_API();
 8002b56:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b5e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002b62:	f3bf 8f4f 	dsb	sy
 8002b66:	f3bf 8f6f 	isb	sy
 8002b6a:	e00a      	b.n	8002b82 <prvProcessTimerOrBlockTask+0x6a>
				( void ) xTaskResumeAll();
 8002b6c:	f7ff fbf6 	bl	800235c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002b70:	4629      	mov	r1, r5
 8002b72:	4630      	mov	r0, r6
 8002b74:	f7ff ff98 	bl	8002aa8 <prvProcessExpiredTimer>
 8002b78:	e003      	b.n	8002b82 <prvProcessTimerOrBlockTask+0x6a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002b7a:	461c      	mov	r4, r3
 8002b7c:	e7e2      	b.n	8002b44 <prvProcessTimerOrBlockTask+0x2c>
			( void ) xTaskResumeAll();
 8002b7e:	f7ff fbed 	bl	800235c <xTaskResumeAll>
}
 8002b82:	b002      	add	sp, #8
 8002b84:	bd70      	pop	{r4, r5, r6, pc}
 8002b86:	bf00      	nop
 8002b88:	2000107c 	.word	0x2000107c

08002b8c <prvProcessReceivedCommands>:
{
 8002b8c:	b510      	push	{r4, lr}
 8002b8e:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002b90:	e002      	b.n	8002b98 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002b92:	9b04      	ldr	r3, [sp, #16]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	da0f      	bge.n	8002bb8 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002b98:	2200      	movs	r2, #0
 8002b9a:	a904      	add	r1, sp, #16
 8002b9c:	4b3f      	ldr	r3, [pc, #252]	; (8002c9c <prvProcessReceivedCommands+0x110>)
 8002b9e:	6898      	ldr	r0, [r3, #8]
 8002ba0:	f7ff f812 	bl	8001bc8 <xQueueReceive>
 8002ba4:	2800      	cmp	r0, #0
 8002ba6:	d077      	beq.n	8002c98 <prvProcessReceivedCommands+0x10c>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8002ba8:	9b04      	ldr	r3, [sp, #16]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	daf1      	bge.n	8002b92 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8002bae:	9907      	ldr	r1, [sp, #28]
 8002bb0:	9806      	ldr	r0, [sp, #24]
 8002bb2:	9b05      	ldr	r3, [sp, #20]
 8002bb4:	4798      	blx	r3
 8002bb6:	e7ec      	b.n	8002b92 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002bb8:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002bba:	6963      	ldr	r3, [r4, #20]
 8002bbc:	b113      	cbz	r3, 8002bc4 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002bbe:	1d20      	adds	r0, r4, #4
 8002bc0:	f7fe fd3a 	bl	8001638 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002bc4:	a803      	add	r0, sp, #12
 8002bc6:	f7ff ff57 	bl	8002a78 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8002bca:	9b04      	ldr	r3, [sp, #16]
 8002bcc:	2b09      	cmp	r3, #9
 8002bce:	d8e3      	bhi.n	8002b98 <prvProcessReceivedCommands+0xc>
 8002bd0:	e8df f003 	tbb	[pc, r3]
 8002bd4:	32050505 	.word	0x32050505
 8002bd8:	05055439 	.word	0x05055439
 8002bdc:	3932      	.short	0x3932
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002bde:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8002be2:	f043 0301 	orr.w	r3, r3, #1
 8002be6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002bea:	9b05      	ldr	r3, [sp, #20]
 8002bec:	69a1      	ldr	r1, [r4, #24]
 8002bee:	4602      	mov	r2, r0
 8002bf0:	4419      	add	r1, r3
 8002bf2:	4620      	mov	r0, r4
 8002bf4:	f7ff fe38 	bl	8002868 <prvInsertTimerInActiveList>
 8002bf8:	2800      	cmp	r0, #0
 8002bfa:	d0cd      	beq.n	8002b98 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002bfc:	6a23      	ldr	r3, [r4, #32]
 8002bfe:	4620      	mov	r0, r4
 8002c00:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002c02:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8002c06:	f013 0f04 	tst.w	r3, #4
 8002c0a:	d0c5      	beq.n	8002b98 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002c0c:	69a2      	ldr	r2, [r4, #24]
 8002c0e:	2100      	movs	r1, #0
 8002c10:	9100      	str	r1, [sp, #0]
 8002c12:	460b      	mov	r3, r1
 8002c14:	9805      	ldr	r0, [sp, #20]
 8002c16:	4402      	add	r2, r0
 8002c18:	4620      	mov	r0, r4
 8002c1a:	f7ff fead 	bl	8002978 <xTimerGenericCommand>
							configASSERT( xResult );
 8002c1e:	2800      	cmp	r0, #0
 8002c20:	d1ba      	bne.n	8002b98 <prvProcessReceivedCommands+0xc>
 8002c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c26:	b672      	cpsid	i
 8002c28:	f383 8811 	msr	BASEPRI, r3
 8002c2c:	f3bf 8f6f 	isb	sy
 8002c30:	f3bf 8f4f 	dsb	sy
 8002c34:	b662      	cpsie	i
 8002c36:	e7fe      	b.n	8002c36 <prvProcessReceivedCommands+0xaa>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002c38:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8002c3c:	f023 0301 	bic.w	r3, r3, #1
 8002c40:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					break;
 8002c44:	e7a8      	b.n	8002b98 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002c46:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8002c4a:	f043 0301 	orr.w	r3, r3, #1
 8002c4e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002c52:	9905      	ldr	r1, [sp, #20]
 8002c54:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002c56:	b131      	cbz	r1, 8002c66 <prvProcessReceivedCommands+0xda>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002c58:	4603      	mov	r3, r0
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	4401      	add	r1, r0
 8002c5e:	4620      	mov	r0, r4
 8002c60:	f7ff fe02 	bl	8002868 <prvInsertTimerInActiveList>
					break;
 8002c64:	e798      	b.n	8002b98 <prvProcessReceivedCommands+0xc>
 8002c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c6a:	b672      	cpsid	i
 8002c6c:	f383 8811 	msr	BASEPRI, r3
 8002c70:	f3bf 8f6f 	isb	sy
 8002c74:	f3bf 8f4f 	dsb	sy
 8002c78:	b662      	cpsie	i
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002c7a:	e7fe      	b.n	8002c7a <prvProcessReceivedCommands+0xee>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002c7c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8002c80:	f013 0f02 	tst.w	r3, #2
 8002c84:	d004      	beq.n	8002c90 <prvProcessReceivedCommands+0x104>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002c86:	f023 0301 	bic.w	r3, r3, #1
 8002c8a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8002c8e:	e783      	b.n	8002b98 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 8002c90:	4620      	mov	r0, r4
 8002c92:	f000 fa7b 	bl	800318c <vPortFree>
 8002c96:	e77f      	b.n	8002b98 <prvProcessReceivedCommands+0xc>
}
 8002c98:	b008      	add	sp, #32
 8002c9a:	bd10      	pop	{r4, pc}
 8002c9c:	2000107c 	.word	0x2000107c

08002ca0 <prvTimerTask>:
{
 8002ca0:	b500      	push	{lr}
 8002ca2:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002ca4:	a801      	add	r0, sp, #4
 8002ca6:	f7ff fdcf 	bl	8002848 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002caa:	9901      	ldr	r1, [sp, #4]
 8002cac:	f7ff ff34 	bl	8002b18 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 8002cb0:	f7ff ff6c 	bl	8002b8c <prvProcessReceivedCommands>
	for( ;; )
 8002cb4:	e7f6      	b.n	8002ca4 <prvTimerTask+0x4>
	...

08002cb8 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002cb8:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002cbe:	4b0f      	ldr	r3, [pc, #60]	; (8002cfc <prvTaskExitError+0x44>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc6:	d00a      	beq.n	8002cde <prvTaskExitError+0x26>
 8002cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ccc:	b672      	cpsid	i
 8002cce:	f383 8811 	msr	BASEPRI, r3
 8002cd2:	f3bf 8f6f 	isb	sy
 8002cd6:	f3bf 8f4f 	dsb	sy
 8002cda:	b662      	cpsie	i
 8002cdc:	e7fe      	b.n	8002cdc <prvTaskExitError+0x24>
 8002cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce2:	b672      	cpsid	i
 8002ce4:	f383 8811 	msr	BASEPRI, r3
 8002ce8:	f3bf 8f6f 	isb	sy
 8002cec:	f3bf 8f4f 	dsb	sy
 8002cf0:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002cf2:	9b01      	ldr	r3, [sp, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d0fc      	beq.n	8002cf2 <prvTaskExitError+0x3a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002cf8:	b002      	add	sp, #8
 8002cfa:	4770      	bx	lr
 8002cfc:	20000014 	.word	0x20000014

08002d00 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002d00:	4808      	ldr	r0, [pc, #32]	; (8002d24 <prvPortStartFirstTask+0x24>)
 8002d02:	6800      	ldr	r0, [r0, #0]
 8002d04:	6800      	ldr	r0, [r0, #0]
 8002d06:	f380 8808 	msr	MSP, r0
 8002d0a:	f04f 0000 	mov.w	r0, #0
 8002d0e:	f380 8814 	msr	CONTROL, r0
 8002d12:	b662      	cpsie	i
 8002d14:	b661      	cpsie	f
 8002d16:	f3bf 8f4f 	dsb	sy
 8002d1a:	f3bf 8f6f 	isb	sy
 8002d1e:	df00      	svc	0
 8002d20:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002d22:	0000      	.short	0x0000
 8002d24:	e000ed08 	.word	0xe000ed08

08002d28 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002d28:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002d38 <vPortEnableVFP+0x10>
 8002d2c:	6801      	ldr	r1, [r0, #0]
 8002d2e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002d32:	6001      	str	r1, [r0, #0]
 8002d34:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002d36:	0000      	.short	0x0000
 8002d38:	e000ed88 	.word	0xe000ed88

08002d3c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002d3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d40:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002d44:	f021 0101 	bic.w	r1, r1, #1
 8002d48:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002d4c:	4b05      	ldr	r3, [pc, #20]	; (8002d64 <pxPortInitialiseStack+0x28>)
 8002d4e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002d52:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002d56:	f06f 0302 	mvn.w	r3, #2
 8002d5a:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8002d5e:	3844      	subs	r0, #68	; 0x44
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	08002cb9 	.word	0x08002cb9
	...

08002d70 <SVC_Handler>:
	__asm volatile (
 8002d70:	4b07      	ldr	r3, [pc, #28]	; (8002d90 <pxCurrentTCBConst2>)
 8002d72:	6819      	ldr	r1, [r3, #0]
 8002d74:	6808      	ldr	r0, [r1, #0]
 8002d76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d7a:	f380 8809 	msr	PSP, r0
 8002d7e:	f3bf 8f6f 	isb	sy
 8002d82:	f04f 0000 	mov.w	r0, #0
 8002d86:	f380 8811 	msr	BASEPRI, r0
 8002d8a:	4770      	bx	lr
 8002d8c:	f3af 8000 	nop.w

08002d90 <pxCurrentTCBConst2>:
 8002d90:	20001050 	.word	0x20001050

08002d94 <vPortEnterCritical>:
 8002d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d98:	b672      	cpsid	i
 8002d9a:	f383 8811 	msr	BASEPRI, r3
 8002d9e:	f3bf 8f6f 	isb	sy
 8002da2:	f3bf 8f4f 	dsb	sy
 8002da6:	b662      	cpsie	i
	uxCriticalNesting++;
 8002da8:	4a0c      	ldr	r2, [pc, #48]	; (8002ddc <vPortEnterCritical+0x48>)
 8002daa:	6813      	ldr	r3, [r2, #0]
 8002dac:	3301      	adds	r3, #1
 8002dae:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d000      	beq.n	8002db6 <vPortEnterCritical+0x22>
}
 8002db4:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002db6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002dba:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8002dbe:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002dc2:	d0f7      	beq.n	8002db4 <vPortEnterCritical+0x20>
 8002dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc8:	b672      	cpsid	i
 8002dca:	f383 8811 	msr	BASEPRI, r3
 8002dce:	f3bf 8f6f 	isb	sy
 8002dd2:	f3bf 8f4f 	dsb	sy
 8002dd6:	b662      	cpsie	i
 8002dd8:	e7fe      	b.n	8002dd8 <vPortEnterCritical+0x44>
 8002dda:	bf00      	nop
 8002ddc:	20000014 	.word	0x20000014

08002de0 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8002de0:	4b0a      	ldr	r3, [pc, #40]	; (8002e0c <vPortExitCritical+0x2c>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	b953      	cbnz	r3, 8002dfc <vPortExitCritical+0x1c>
 8002de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dea:	b672      	cpsid	i
 8002dec:	f383 8811 	msr	BASEPRI, r3
 8002df0:	f3bf 8f6f 	isb	sy
 8002df4:	f3bf 8f4f 	dsb	sy
 8002df8:	b662      	cpsie	i
 8002dfa:	e7fe      	b.n	8002dfa <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	4a03      	ldr	r2, [pc, #12]	; (8002e0c <vPortExitCritical+0x2c>)
 8002e00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002e02:	b90b      	cbnz	r3, 8002e08 <vPortExitCritical+0x28>
	__asm volatile
 8002e04:	f383 8811 	msr	BASEPRI, r3
}
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	20000014 	.word	0x20000014

08002e10 <PendSV_Handler>:
	__asm volatile
 8002e10:	f3ef 8009 	mrs	r0, PSP
 8002e14:	f3bf 8f6f 	isb	sy
 8002e18:	4b15      	ldr	r3, [pc, #84]	; (8002e70 <pxCurrentTCBConst>)
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	f01e 0f10 	tst.w	lr, #16
 8002e20:	bf08      	it	eq
 8002e22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002e26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e2a:	6010      	str	r0, [r2, #0]
 8002e2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002e30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002e34:	b672      	cpsid	i
 8002e36:	f380 8811 	msr	BASEPRI, r0
 8002e3a:	f3bf 8f4f 	dsb	sy
 8002e3e:	f3bf 8f6f 	isb	sy
 8002e42:	b662      	cpsie	i
 8002e44:	f7ff fb2c 	bl	80024a0 <vTaskSwitchContext>
 8002e48:	f04f 0000 	mov.w	r0, #0
 8002e4c:	f380 8811 	msr	BASEPRI, r0
 8002e50:	bc09      	pop	{r0, r3}
 8002e52:	6819      	ldr	r1, [r3, #0]
 8002e54:	6808      	ldr	r0, [r1, #0]
 8002e56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e5a:	f01e 0f10 	tst.w	lr, #16
 8002e5e:	bf08      	it	eq
 8002e60:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002e64:	f380 8809 	msr	PSP, r0
 8002e68:	f3bf 8f6f 	isb	sy
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop

08002e70 <pxCurrentTCBConst>:
 8002e70:	20001050 	.word	0x20001050

08002e74 <SysTick_Handler>:
{
 8002e74:	b508      	push	{r3, lr}
	__asm volatile
 8002e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e7a:	b672      	cpsid	i
 8002e7c:	f383 8811 	msr	BASEPRI, r3
 8002e80:	f3bf 8f6f 	isb	sy
 8002e84:	f3bf 8f4f 	dsb	sy
 8002e88:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 8002e8a:	f7ff f9d9 	bl	8002240 <xTaskIncrementTick>
 8002e8e:	b128      	cbz	r0, 8002e9c <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002e90:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002e94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e98:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	f383 8811 	msr	BASEPRI, r3
}
 8002ea2:	bd08      	pop	{r3, pc}

08002ea4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002ea4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002eac:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002eae:	4b05      	ldr	r3, [pc, #20]	; (8002ec4 <vPortSetupTimerInterrupt+0x20>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4905      	ldr	r1, [pc, #20]	; (8002ec8 <vPortSetupTimerInterrupt+0x24>)
 8002eb4:	fba1 1303 	umull	r1, r3, r1, r3
 8002eb8:	099b      	lsrs	r3, r3, #6
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002ebe:	2307      	movs	r3, #7
 8002ec0:	6113      	str	r3, [r2, #16]
}
 8002ec2:	4770      	bx	lr
 8002ec4:	200000a8 	.word	0x200000a8
 8002ec8:	10624dd3 	.word	0x10624dd3

08002ecc <xPortStartScheduler>:
{
 8002ecc:	b530      	push	{r4, r5, lr}
 8002ece:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002ed0:	4b2f      	ldr	r3, [pc, #188]	; (8002f90 <xPortStartScheduler+0xc4>)
 8002ed2:	781a      	ldrb	r2, [r3, #0]
 8002ed4:	b2d2      	uxtb	r2, r2
 8002ed6:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002ed8:	22ff      	movs	r2, #255	; 0xff
 8002eda:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002ee4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002ee8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002eec:	4a29      	ldr	r2, [pc, #164]	; (8002f94 <xPortStartScheduler+0xc8>)
 8002eee:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002ef0:	2307      	movs	r3, #7
 8002ef2:	6053      	str	r3, [r2, #4]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ef4:	e009      	b.n	8002f0a <xPortStartScheduler+0x3e>
			ulMaxPRIGROUPValue--;
 8002ef6:	4a27      	ldr	r2, [pc, #156]	; (8002f94 <xPortStartScheduler+0xc8>)
 8002ef8:	6853      	ldr	r3, [r2, #4]
 8002efa:	3b01      	subs	r3, #1
 8002efc:	6053      	str	r3, [r2, #4]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002efe:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f0a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002f0e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002f12:	d1f0      	bne.n	8002ef6 <xPortStartScheduler+0x2a>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002f14:	4b1f      	ldr	r3, [pc, #124]	; (8002f94 <xPortStartScheduler+0xc8>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	2b03      	cmp	r3, #3
 8002f1a:	d00a      	beq.n	8002f32 <xPortStartScheduler+0x66>
	__asm volatile
 8002f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f20:	b672      	cpsid	i
 8002f22:	f383 8811 	msr	BASEPRI, r3
 8002f26:	f3bf 8f6f 	isb	sy
 8002f2a:	f3bf 8f4f 	dsb	sy
 8002f2e:	b662      	cpsie	i
 8002f30:	e7fe      	b.n	8002f30 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002f32:	021b      	lsls	r3, r3, #8
 8002f34:	4a17      	ldr	r2, [pc, #92]	; (8002f94 <xPortStartScheduler+0xc8>)
 8002f36:	6053      	str	r3, [r2, #4]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002f38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f3c:	6053      	str	r3, [r2, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002f3e:	9b01      	ldr	r3, [sp, #4]
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	4a13      	ldr	r2, [pc, #76]	; (8002f90 <xPortStartScheduler+0xc4>)
 8002f44:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002f46:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 8002f4a:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8002f4e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f52:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002f56:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8002f5a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002f5e:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8002f62:	f7ff ff9f 	bl	8002ea4 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8002f66:	2500      	movs	r5, #0
 8002f68:	4b0b      	ldr	r3, [pc, #44]	; (8002f98 <xPortStartScheduler+0xcc>)
 8002f6a:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8002f6c:	f7ff fedc 	bl	8002d28 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002f70:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8002f74:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002f78:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8002f7c:	f7ff fec0 	bl	8002d00 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8002f80:	f7ff fa8e 	bl	80024a0 <vTaskSwitchContext>
	prvTaskExitError();
 8002f84:	f7ff fe98 	bl	8002cb8 <prvTaskExitError>
}
 8002f88:	4628      	mov	r0, r5
 8002f8a:	b003      	add	sp, #12
 8002f8c:	bd30      	pop	{r4, r5, pc}
 8002f8e:	bf00      	nop
 8002f90:	e000e400 	.word	0xe000e400
 8002f94:	200011a8 	.word	0x200011a8
 8002f98:	20000014 	.word	0x20000014

08002f9c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8002f9c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002fa0:	2b0f      	cmp	r3, #15
 8002fa2:	d911      	bls.n	8002fc8 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002fa4:	4a13      	ldr	r2, [pc, #76]	; (8002ff4 <vPortValidateInterruptPriority+0x58>)
 8002fa6:	5c9b      	ldrb	r3, [r3, r2]
 8002fa8:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002faa:	4a13      	ldr	r2, [pc, #76]	; (8002ff8 <vPortValidateInterruptPriority+0x5c>)
 8002fac:	7812      	ldrb	r2, [r2, #0]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d90a      	bls.n	8002fc8 <vPortValidateInterruptPriority+0x2c>
 8002fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb6:	b672      	cpsid	i
 8002fb8:	f383 8811 	msr	BASEPRI, r3
 8002fbc:	f3bf 8f6f 	isb	sy
 8002fc0:	f3bf 8f4f 	dsb	sy
 8002fc4:	b662      	cpsie	i
 8002fc6:	e7fe      	b.n	8002fc6 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002fc8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002fcc:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8002fd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002fd4:	4a08      	ldr	r2, [pc, #32]	; (8002ff8 <vPortValidateInterruptPriority+0x5c>)
 8002fd6:	6852      	ldr	r2, [r2, #4]
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d90a      	bls.n	8002ff2 <vPortValidateInterruptPriority+0x56>
 8002fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe0:	b672      	cpsid	i
 8002fe2:	f383 8811 	msr	BASEPRI, r3
 8002fe6:	f3bf 8f6f 	isb	sy
 8002fea:	f3bf 8f4f 	dsb	sy
 8002fee:	b662      	cpsie	i
 8002ff0:	e7fe      	b.n	8002ff0 <vPortValidateInterruptPriority+0x54>
	}
 8002ff2:	4770      	bx	lr
 8002ff4:	e000e3f0 	.word	0xe000e3f0
 8002ff8:	200011a8 	.word	0x200011a8

08002ffc <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002ffc:	4a10      	ldr	r2, [pc, #64]	; (8003040 <prvHeapInit+0x44>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002ffe:	f012 0f07 	tst.w	r2, #7
 8003002:	d01a      	beq.n	800303a <prvHeapInit+0x3e>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003004:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003006:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800300a:	f5c1 5370 	rsb	r3, r1, #15360	; 0x3c00
 800300e:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003010:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003012:	490c      	ldr	r1, [pc, #48]	; (8003044 <prvHeapInit+0x48>)
 8003014:	600a      	str	r2, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003016:	2000      	movs	r0, #0
 8003018:	6048      	str	r0, [r1, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800301a:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800301c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800301e:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8003022:	608b      	str	r3, [r1, #8]
	pxEnd->xBlockSize = 0;
 8003024:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003026:	6018      	str	r0, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003028:	1a98      	subs	r0, r3, r2
 800302a:	6050      	str	r0, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800302c:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800302e:	60c8      	str	r0, [r1, #12]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003030:	6108      	str	r0, [r1, #16]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003032:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003036:	614b      	str	r3, [r1, #20]
}
 8003038:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800303a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800303e:	e7e8      	b.n	8003012 <prvHeapInit+0x16>
 8003040:	200011c8 	.word	0x200011c8
 8003044:	200011b0 	.word	0x200011b0

08003048 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003048:	4b16      	ldr	r3, [pc, #88]	; (80030a4 <prvInsertBlockIntoFreeList+0x5c>)
 800304a:	461a      	mov	r2, r3
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4283      	cmp	r3, r0
 8003050:	d3fb      	bcc.n	800304a <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003052:	6851      	ldr	r1, [r2, #4]
 8003054:	eb02 0c01 	add.w	ip, r2, r1
 8003058:	4584      	cmp	ip, r0
 800305a:	d009      	beq.n	8003070 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800305c:	6841      	ldr	r1, [r0, #4]
 800305e:	eb00 0c01 	add.w	ip, r0, r1
 8003062:	4563      	cmp	r3, ip
 8003064:	d009      	beq.n	800307a <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003066:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003068:	4290      	cmp	r0, r2
 800306a:	d019      	beq.n	80030a0 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800306c:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 800306e:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003070:	6840      	ldr	r0, [r0, #4]
 8003072:	4401      	add	r1, r0
 8003074:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8003076:	4610      	mov	r0, r2
 8003078:	e7f0      	b.n	800305c <prvInsertBlockIntoFreeList+0x14>
{
 800307a:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800307c:	4c09      	ldr	r4, [pc, #36]	; (80030a4 <prvInsertBlockIntoFreeList+0x5c>)
 800307e:	68a4      	ldr	r4, [r4, #8]
 8003080:	42a3      	cmp	r3, r4
 8003082:	d00b      	beq.n	800309c <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	4419      	add	r1, r3
 8003088:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800308a:	6813      	ldr	r3, [r2, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8003090:	4290      	cmp	r0, r2
 8003092:	d000      	beq.n	8003096 <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003094:	6010      	str	r0, [r2, #0]
	}
}
 8003096:	f85d 4b04 	ldr.w	r4, [sp], #4
 800309a:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800309c:	6004      	str	r4, [r0, #0]
 800309e:	e7f7      	b.n	8003090 <prvInsertBlockIntoFreeList+0x48>
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	200011b0 	.word	0x200011b0

080030a8 <pvPortMalloc>:
{
 80030a8:	b570      	push	{r4, r5, r6, lr}
 80030aa:	4605      	mov	r5, r0
	vTaskSuspendAll();
 80030ac:	f7ff f8b8 	bl	8002220 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80030b0:	4b35      	ldr	r3, [pc, #212]	; (8003188 <pvPortMalloc+0xe0>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	b1a3      	cbz	r3, 80030e0 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80030b6:	4b34      	ldr	r3, [pc, #208]	; (8003188 <pvPortMalloc+0xe0>)
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	421d      	tst	r5, r3
 80030bc:	d14b      	bne.n	8003156 <pvPortMalloc+0xae>
			if( xWantedSize > 0 )
 80030be:	b135      	cbz	r5, 80030ce <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 80030c0:	3508      	adds	r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80030c2:	f015 0f07 	tst.w	r5, #7
 80030c6:	d002      	beq.n	80030ce <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80030c8:	f025 0507 	bic.w	r5, r5, #7
 80030cc:	3508      	adds	r5, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80030ce:	2d00      	cmp	r5, #0
 80030d0:	d043      	beq.n	800315a <pvPortMalloc+0xb2>
 80030d2:	4b2d      	ldr	r3, [pc, #180]	; (8003188 <pvPortMalloc+0xe0>)
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	42ab      	cmp	r3, r5
 80030d8:	d350      	bcc.n	800317c <pvPortMalloc+0xd4>
				pxBlock = xStart.pxNextFreeBlock;
 80030da:	4a2b      	ldr	r2, [pc, #172]	; (8003188 <pvPortMalloc+0xe0>)
 80030dc:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80030de:	e004      	b.n	80030ea <pvPortMalloc+0x42>
			prvHeapInit();
 80030e0:	f7ff ff8c 	bl	8002ffc <prvHeapInit>
 80030e4:	e7e7      	b.n	80030b6 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 80030e6:	4622      	mov	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 80030e8:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80030ea:	6863      	ldr	r3, [r4, #4]
 80030ec:	42ab      	cmp	r3, r5
 80030ee:	d202      	bcs.n	80030f6 <pvPortMalloc+0x4e>
 80030f0:	6823      	ldr	r3, [r4, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1f7      	bne.n	80030e6 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 80030f6:	4b24      	ldr	r3, [pc, #144]	; (8003188 <pvPortMalloc+0xe0>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	42a3      	cmp	r3, r4
 80030fc:	d040      	beq.n	8003180 <pvPortMalloc+0xd8>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80030fe:	6816      	ldr	r6, [r2, #0]
 8003100:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003102:	6823      	ldr	r3, [r4, #0]
 8003104:	6013      	str	r3, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003106:	6863      	ldr	r3, [r4, #4]
 8003108:	1b5b      	subs	r3, r3, r5
 800310a:	2b10      	cmp	r3, #16
 800310c:	d912      	bls.n	8003134 <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800310e:	1960      	adds	r0, r4, r5
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003110:	f010 0f07 	tst.w	r0, #7
 8003114:	d00a      	beq.n	800312c <pvPortMalloc+0x84>
 8003116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800311a:	b672      	cpsid	i
 800311c:	f383 8811 	msr	BASEPRI, r3
 8003120:	f3bf 8f6f 	isb	sy
 8003124:	f3bf 8f4f 	dsb	sy
 8003128:	b662      	cpsie	i
 800312a:	e7fe      	b.n	800312a <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800312c:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800312e:	6065      	str	r5, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003130:	f7ff ff8a 	bl	8003048 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003134:	6861      	ldr	r1, [r4, #4]
 8003136:	4a14      	ldr	r2, [pc, #80]	; (8003188 <pvPortMalloc+0xe0>)
 8003138:	6913      	ldr	r3, [r2, #16]
 800313a:	1a5b      	subs	r3, r3, r1
 800313c:	6113      	str	r3, [r2, #16]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800313e:	68d2      	ldr	r2, [r2, #12]
 8003140:	4293      	cmp	r3, r2
 8003142:	d201      	bcs.n	8003148 <pvPortMalloc+0xa0>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003144:	4a10      	ldr	r2, [pc, #64]	; (8003188 <pvPortMalloc+0xe0>)
 8003146:	60d3      	str	r3, [r2, #12]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003148:	4b0f      	ldr	r3, [pc, #60]	; (8003188 <pvPortMalloc+0xe0>)
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	430b      	orrs	r3, r1
 800314e:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003150:	2300      	movs	r3, #0
 8003152:	6023      	str	r3, [r4, #0]
 8003154:	e002      	b.n	800315c <pvPortMalloc+0xb4>
void *pvReturn = NULL;
 8003156:	2600      	movs	r6, #0
 8003158:	e000      	b.n	800315c <pvPortMalloc+0xb4>
 800315a:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 800315c:	f7ff f8fe 	bl	800235c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003160:	f016 0f07 	tst.w	r6, #7
 8003164:	d00e      	beq.n	8003184 <pvPortMalloc+0xdc>
 8003166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800316a:	b672      	cpsid	i
 800316c:	f383 8811 	msr	BASEPRI, r3
 8003170:	f3bf 8f6f 	isb	sy
 8003174:	f3bf 8f4f 	dsb	sy
 8003178:	b662      	cpsie	i
 800317a:	e7fe      	b.n	800317a <pvPortMalloc+0xd2>
void *pvReturn = NULL;
 800317c:	2600      	movs	r6, #0
 800317e:	e7ed      	b.n	800315c <pvPortMalloc+0xb4>
 8003180:	2600      	movs	r6, #0
 8003182:	e7eb      	b.n	800315c <pvPortMalloc+0xb4>
}
 8003184:	4630      	mov	r0, r6
 8003186:	bd70      	pop	{r4, r5, r6, pc}
 8003188:	200011b0 	.word	0x200011b0

0800318c <vPortFree>:
	if( pv != NULL )
 800318c:	2800      	cmp	r0, #0
 800318e:	d034      	beq.n	80031fa <vPortFree+0x6e>
{
 8003190:	b538      	push	{r3, r4, r5, lr}
 8003192:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8003194:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003198:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800319c:	4a17      	ldr	r2, [pc, #92]	; (80031fc <vPortFree+0x70>)
 800319e:	6952      	ldr	r2, [r2, #20]
 80031a0:	4213      	tst	r3, r2
 80031a2:	d10a      	bne.n	80031ba <vPortFree+0x2e>
 80031a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a8:	b672      	cpsid	i
 80031aa:	f383 8811 	msr	BASEPRI, r3
 80031ae:	f3bf 8f6f 	isb	sy
 80031b2:	f3bf 8f4f 	dsb	sy
 80031b6:	b662      	cpsie	i
 80031b8:	e7fe      	b.n	80031b8 <vPortFree+0x2c>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80031ba:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80031be:	b151      	cbz	r1, 80031d6 <vPortFree+0x4a>
 80031c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c4:	b672      	cpsid	i
 80031c6:	f383 8811 	msr	BASEPRI, r3
 80031ca:	f3bf 8f6f 	isb	sy
 80031ce:	f3bf 8f4f 	dsb	sy
 80031d2:	b662      	cpsie	i
 80031d4:	e7fe      	b.n	80031d4 <vPortFree+0x48>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80031d6:	ea23 0302 	bic.w	r3, r3, r2
 80031da:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80031de:	f7ff f81f 	bl	8002220 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80031e2:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80031e6:	4a05      	ldr	r2, [pc, #20]	; (80031fc <vPortFree+0x70>)
 80031e8:	6913      	ldr	r3, [r2, #16]
 80031ea:	440b      	add	r3, r1
 80031ec:	6113      	str	r3, [r2, #16]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80031ee:	4628      	mov	r0, r5
 80031f0:	f7ff ff2a 	bl	8003048 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 80031f4:	f7ff f8b2 	bl	800235c <xTaskResumeAll>
}
 80031f8:	bd38      	pop	{r3, r4, r5, pc}
 80031fa:	4770      	bx	lr
 80031fc:	200011b0 	.word	0x200011b0

08003200 <LCD_Thread>:

	while (1) {

	}
}
void LCD_Thread(void *argument){
 8003200:	b508      	push	{r3, lr}
	BSP_LCD_Init();
 8003202:	f7fd fdcb 	bl	8000d9c <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0,LCD_FB_START_ADDRESS);
 8003206:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800320a:	2000      	movs	r0, #0
 800320c:	f7fd fbd6 	bl	80009bc <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(0);
 8003210:	2000      	movs	r0, #0
 8003212:	f7fd fc13 	bl	8000a3c <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 8003216:	f7fd fc57 	bl	8000ac8 <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_RED);
 800321a:	4808      	ldr	r0, [pc, #32]	; (800323c <LCD_Thread+0x3c>)
 800321c:	f7fd fc38 	bl	8000a90 <BSP_LCD_Clear>

	BSP_LCD_SetTextColor(LCD_COLOR_DARKGRAY);
 8003220:	4807      	ldr	r0, [pc, #28]	; (8003240 <LCD_Thread+0x40>)
 8003222:	f7fd fc11 	bl	8000a48 <BSP_LCD_SetTextColor>
	char* text = "Hello World!";
	BSP_LCD_DisplayStringAtLine(0, (uint8_t *)text);
 8003226:	4907      	ldr	r1, [pc, #28]	; (8003244 <LCD_Thread+0x44>)
 8003228:	2000      	movs	r0, #0
 800322a:	f7fd fec5 	bl	8000fb8 <BSP_LCD_DisplayStringAtLine>
	while(1){
		osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever); // Wait forever until thread flag 1 is set.
 800322e:	f04f 32ff 	mov.w	r2, #4294967295
 8003232:	2100      	movs	r1, #0
 8003234:	2001      	movs	r0, #1
 8003236:	f7fe f8d1 	bl	80013dc <osThreadFlagsWait>
	while(1){
 800323a:	e7f8      	b.n	800322e <LCD_Thread+0x2e>
 800323c:	ffff0000 	.word	0xffff0000
 8003240:	ff404040 	.word	0xff404040
 8003244:	0800b238 	.word	0x0800b238

08003248 <main>:
int main(void) {
 8003248:	b508      	push	{r3, lr}
	Sys_Init();
 800324a:	f000 fc29 	bl	8003aa0 <Sys_Init>
	osKernelInitialize();
 800324e:	f7fe f817 	bl	8001280 <osKernelInitialize>
	GyroThreadHandle = osThreadNew(Gyro_Thread, NULL, &Gyro_Thread_attributes);
 8003252:	4d10      	ldr	r5, [pc, #64]	; (8003294 <main+0x4c>)
 8003254:	462a      	mov	r2, r5
 8003256:	2100      	movs	r1, #0
 8003258:	480f      	ldr	r0, [pc, #60]	; (8003298 <main+0x50>)
 800325a:	f7fe f853 	bl	8001304 <osThreadNew>
 800325e:	4c0f      	ldr	r4, [pc, #60]	; (800329c <main+0x54>)
 8003260:	6020      	str	r0, [r4, #0]
	UART_ThreadHandle = osThreadNew(UART_Thread, NULL, &UART_Thread_attributes);
 8003262:	f105 0224 	add.w	r2, r5, #36	; 0x24
 8003266:	2100      	movs	r1, #0
 8003268:	480d      	ldr	r0, [pc, #52]	; (80032a0 <main+0x58>)
 800326a:	f7fe f84b 	bl	8001304 <osThreadNew>
 800326e:	6060      	str	r0, [r4, #4]
	uartQueueHandle = osMessageQueueNew(1, sizeof(MPU6050_t),
 8003270:	f105 0248 	add.w	r2, r5, #72	; 0x48
 8003274:	2158      	movs	r1, #88	; 0x58
 8003276:	2001      	movs	r0, #1
 8003278:	f7fe f934 	bl	80014e4 <osMessageQueueNew>
 800327c:	60a0      	str	r0, [r4, #8]
	LCD_ThreadHandle = osThreadNew(LCD_Thread, NULL, &LCD_Thread_attributes );
 800327e:	f105 0260 	add.w	r2, r5, #96	; 0x60
 8003282:	2100      	movs	r1, #0
 8003284:	4807      	ldr	r0, [pc, #28]	; (80032a4 <main+0x5c>)
 8003286:	f7fe f83d 	bl	8001304 <osThreadNew>
 800328a:	60e0      	str	r0, [r4, #12]
	osKernelStart();
 800328c:	f7fe f816 	bl	80012bc <osKernelStart>
	while (1) {
 8003290:	e7fe      	b.n	8003290 <main+0x48>
 8003292:	bf00      	nop
 8003294:	0800b16c 	.word	0x0800b16c
 8003298:	080033b9 	.word	0x080033b9
 800329c:	20004dc8 	.word	0x20004dc8
 80032a0:	08003735 	.word	0x08003735
 80032a4:	08003201 	.word	0x08003201

080032a8 <USART1_IRQHandler>:
void USART1_IRQHandler(void) {
 80032a8:	b508      	push	{r3, lr}
	HAL_UART_IRQHandler(&USB_UART);
 80032aa:	4802      	ldr	r0, [pc, #8]	; (80032b4 <USART1_IRQHandler+0xc>)
 80032ac:	f004 f888 	bl	80073c0 <HAL_UART_IRQHandler>
}
 80032b0:	bd08      	pop	{r3, pc}
 80032b2:	bf00      	nop
 80032b4:	20005138 	.word	0x20005138

080032b8 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void) {
 80032b8:	b508      	push	{r3, lr}
	HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80032ba:	4802      	ldr	r0, [pc, #8]	; (80032c4 <DMA2_Stream1_IRQHandler+0xc>)
 80032bc:	f001 f946 	bl	800454c <HAL_DMA_IRQHandler>
}
 80032c0:	bd08      	pop	{r3, pc}
 80032c2:	bf00      	nop
 80032c4:	20004dd8 	.word	0x20004dd8

080032c8 <DMA2_Stream5_IRQHandler>:
void DMA2_Stream5_IRQHandler(void) {
 80032c8:	b508      	push	{r3, lr}
	HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80032ca:	4802      	ldr	r0, [pc, #8]	; (80032d4 <DMA2_Stream5_IRQHandler+0xc>)
 80032cc:	f001 f93e 	bl	800454c <HAL_DMA_IRQHandler>
}
 80032d0:	bd08      	pop	{r3, pc}
 80032d2:	bf00      	nop
 80032d4:	20004e38 	.word	0x20004e38

080032d8 <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void) {
 80032d8:	b508      	push	{r3, lr}
    HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80032da:	4802      	ldr	r0, [pc, #8]	; (80032e4 <DMA2_Stream6_IRQHandler+0xc>)
 80032dc:	f001 f936 	bl	800454c <HAL_DMA_IRQHandler>
}
 80032e0:	bd08      	pop	{r3, pc}
 80032e2:	bf00      	nop
 80032e4:	20004e98 	.word	0x20004e98

080032e8 <DMA2_Stream7_IRQHandler>:
void DMA2_Stream7_IRQHandler(void) {
 80032e8:	b510      	push	{r4, lr}
    HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80032ea:	4c05      	ldr	r4, [pc, #20]	; (8003300 <DMA2_Stream7_IRQHandler+0x18>)
 80032ec:	f504 7098 	add.w	r0, r4, #304	; 0x130
 80032f0:	f001 f92c 	bl	800454c <HAL_DMA_IRQHandler>
    HAL_UART_AbortReceive(&DISCO_UART);// Cancel receving attemp
 80032f4:	f504 70c8 	add.w	r0, r4, #400	; 0x190
 80032f8:	f003 ff98 	bl	800722c <HAL_UART_AbortReceive>
}
 80032fc:	bd10      	pop	{r4, pc}
 80032fe:	bf00      	nop
 8003300:	20004dc8 	.word	0x20004dc8

08003304 <HAL_UART_TxCpltCallback>:
}
 8003304:	4770      	bx	lr
	...

08003308 <I2C_init>:
void I2C_init() {
 8003308:	b500      	push	{lr}
 800330a:	b087      	sub	sp, #28
	hi2c1.Instance = I2C1;
 800330c:	4822      	ldr	r0, [pc, #136]	; (8003398 <I2C_init+0x90>)
 800330e:	4b23      	ldr	r3, [pc, #140]	; (800339c <I2C_init+0x94>)
 8003310:	f8c0 3270 	str.w	r3, [r0, #624]	; 0x270
	hi2c1.Init.Timing = 0x00506682;
 8003314:	4b22      	ldr	r3, [pc, #136]	; (80033a0 <I2C_init+0x98>)
 8003316:	f8c0 3274 	str.w	r3, [r0, #628]	; 0x274
	hi2c1.Init.OwnAddress1 = 0;
 800331a:	2300      	movs	r3, #0
 800331c:	f8c0 3278 	str.w	r3, [r0, #632]	; 0x278
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003320:	2201      	movs	r2, #1
 8003322:	f8c0 227c 	str.w	r2, [r0, #636]	; 0x27c
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003326:	f8c0 3280 	str.w	r3, [r0, #640]	; 0x280
	hi2c1.Init.OwnAddress2 = 0;
 800332a:	f8c0 3284 	str.w	r3, [r0, #644]	; 0x284
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800332e:	f8c0 3288 	str.w	r3, [r0, #648]	; 0x288
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003332:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003336:	f8c0 3290 	str.w	r3, [r0, #656]	; 0x290
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800333a:	f500 701c 	add.w	r0, r0, #624	; 0x270
 800333e:	f002 f973 	bl	8005628 <HAL_I2C_Init>
 8003342:	b9e0      	cbnz	r0, 800337e <I2C_init+0x76>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003344:	2100      	movs	r1, #0
 8003346:	4817      	ldr	r0, [pc, #92]	; (80033a4 <I2C_init+0x9c>)
 8003348:	f002 fb7a 	bl	8005a40 <HAL_I2CEx_ConfigAnalogFilter>
 800334c:	b9d8      	cbnz	r0, 8003386 <I2C_init+0x7e>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800334e:	2100      	movs	r1, #0
 8003350:	4814      	ldr	r0, [pc, #80]	; (80033a4 <I2C_init+0x9c>)
 8003352:	f002 fba3 	bl	8005a9c <HAL_I2CEx_ConfigDigitalFilter>
 8003356:	b9d0      	cbnz	r0, 800338e <I2C_init+0x86>
	gpio_init.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8003358:	f44f 7340 	mov.w	r3, #768	; 0x300
 800335c:	9301      	str	r3, [sp, #4]
	gpio_init.Mode = GPIO_MODE_AF_OD;
 800335e:	2312      	movs	r3, #18
 8003360:	9302      	str	r3, [sp, #8]
	gpio_init.Pull = GPIO_PULLUP;
 8003362:	2301      	movs	r3, #1
 8003364:	9303      	str	r3, [sp, #12]
	gpio_init.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003366:	2303      	movs	r3, #3
 8003368:	9304      	str	r3, [sp, #16]
	gpio_init.Alternate = GPIO_AF4_I2C1;
 800336a:	2304      	movs	r3, #4
 800336c:	9305      	str	r3, [sp, #20]
	HAL_GPIO_Init(GPIOB, &gpio_init);
 800336e:	eb0d 0103 	add.w	r1, sp, r3
 8003372:	480d      	ldr	r0, [pc, #52]	; (80033a8 <I2C_init+0xa0>)
 8003374:	f001 fe9a 	bl	80050ac <HAL_GPIO_Init>
}
 8003378:	b007      	add	sp, #28
 800337a:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("I2C init failed\n\r");
 800337e:	480b      	ldr	r0, [pc, #44]	; (80033ac <I2C_init+0xa4>)
 8003380:	f004 fe60 	bl	8008044 <iprintf>
 8003384:	e7de      	b.n	8003344 <I2C_init+0x3c>
		printf("I2C analog filter init failed\n\r");
 8003386:	480a      	ldr	r0, [pc, #40]	; (80033b0 <I2C_init+0xa8>)
 8003388:	f004 fe5c 	bl	8008044 <iprintf>
 800338c:	e7df      	b.n	800334e <I2C_init+0x46>
		printf("I2C digital filter init failed\n\r");
 800338e:	4809      	ldr	r0, [pc, #36]	; (80033b4 <I2C_init+0xac>)
 8003390:	f004 fe58 	bl	8008044 <iprintf>
 8003394:	e7e0      	b.n	8003358 <I2C_init+0x50>
 8003396:	bf00      	nop
 8003398:	20004dc8 	.word	0x20004dc8
 800339c:	40005400 	.word	0x40005400
 80033a0:	00506682 	.word	0x00506682
 80033a4:	20005038 	.word	0x20005038
 80033a8:	40020400 	.word	0x40020400
 80033ac:	0800b248 	.word	0x0800b248
 80033b0:	0800b25c 	.word	0x0800b25c
 80033b4:	0800b27c 	.word	0x0800b27c

080033b8 <Gyro_Thread>:
void Gyro_Thread(void *argument) {
 80033b8:	b570      	push	{r4, r5, r6, lr}
 80033ba:	b0a2      	sub	sp, #136	; 0x88
	I2C_init();
 80033bc:	f7ff ffa4 	bl	8003308 <I2C_init>
	MPU6050_Init(&hi2c1);
 80033c0:	4832      	ldr	r0, [pc, #200]	; (800348c <Gyro_Thread+0xd4>)
 80033c2:	f000 fb89 	bl	8003ad8 <MPU6050_Init>
	osDelay(1000);
 80033c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80033ca:	f7fe f86d 	bl	80014a8 <osDelay>
		MPU6050_Read_All(&hi2c1, &mpu6050);
 80033ce:	4c30      	ldr	r4, [pc, #192]	; (8003490 <Gyro_Thread+0xd8>)
 80033d0:	f504 7132 	add.w	r1, r4, #712	; 0x2c8
 80033d4:	f504 701c 	add.w	r0, r4, #624	; 0x270
 80033d8:	f000 fc32 	bl	8003c40 <MPU6050_Read_All>
		int16_t acc_x = (int16_t) mpu6050.Ax;
 80033dc:	ed94 7bb4 	vldr	d7, [r4, #720]	; 0x2d0
 80033e0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
		int16_t acc_y = (int16_t) mpu6050.Ay;
 80033e4:	ed94 7bb6 	vldr	d7, [r4, #728]	; 0x2d8
 80033e8:	eebd 6bc7 	vcvt.s32.f64	s12, d7
		int16_t acc_z = (int16_t) mpu6050.Az;
 80033ec:	ed94 7bb8 	vldr	d7, [r4, #736]	; 0x2e0
 80033f0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80033f4:	ee17 3a10 	vmov	r3, s14
 80033f8:	b21b      	sxth	r3, r3
		int16_t gyro_x = (int16_t) mpu6050.Gx; //Kalman_getAngle(&kalman, mpu6050.Gx, mpu6050.Ax, );
 80033fa:	ed94 7bbc 	vldr	d7, [r4, #752]	; 0x2f0
 80033fe:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8003402:	ee17 2a10 	vmov	r2, s14
 8003406:	b212      	sxth	r2, r2
		int16_t gyro_y = (int16_t) mpu6050.Gy;
 8003408:	ed94 7bbe 	vldr	d7, [r4, #760]	; 0x2f8
 800340c:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8003410:	ee17 1a10 	vmov	r1, s14
 8003414:	b209      	sxth	r1, r1
		int16_t gyro_z = (int16_t) mpu6050.Gz;
 8003416:	ed94 7bc0 	vldr	d7, [r4, #768]	; 0x300
 800341a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800341e:	ee17 0a10 	vmov	r0, s14
 8003422:	b200      	sxth	r0, r0
		int16_t ang_x = (int16_t) mpu6050.KalmanAngleX;
 8003424:	ed94 7bc4 	vldr	d7, [r4, #784]	; 0x310
 8003428:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800342c:	ee17 5a10 	vmov	r5, s14
 8003430:	b22d      	sxth	r5, r5
		int16_t ang_y = (int16_t) mpu6050.KalmanAngleY;// NOT WORKING
 8003432:	ed94 7bc6 	vldr	d7, [r4, #792]	; 0x318
 8003436:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800343a:	ee17 6a10 	vmov	r6, s14
 800343e:	b236      	sxth	r6, r6
		int16_t temperature = (int16_t) mpu6050.Temperature;
 8003440:	edd4 7ac2 	vldr	s15, [r4, #776]	; 0x308
 8003444:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003448:	ee17 4a90 	vmov	r4, s15
 800344c:	b224      	sxth	r4, r4
		sprintf(message,"\033[0m\033[44;33m\033[2J\033[;H"
 800344e:	9606      	str	r6, [sp, #24]
 8003450:	9505      	str	r5, [sp, #20]
 8003452:	9404      	str	r4, [sp, #16]
 8003454:	9003      	str	r0, [sp, #12]
 8003456:	9102      	str	r1, [sp, #8]
 8003458:	9201      	str	r2, [sp, #4]
 800345a:	9300      	str	r3, [sp, #0]
 800345c:	ee16 3a10 	vmov	r3, s12
 8003460:	b21b      	sxth	r3, r3
 8003462:	ee16 2a90 	vmov	r2, s13
 8003466:	b212      	sxth	r2, r2
 8003468:	490a      	ldr	r1, [pc, #40]	; (8003494 <Gyro_Thread+0xdc>)
 800346a:	a809      	add	r0, sp, #36	; 0x24
 800346c:	f004 feb2 	bl	80081d4 <siprintf>
		volatile HAL_StatusTypeDef status=HAL_UART_Transmit_DMA(&USB_UART, message,strlen(message));
 8003470:	a809      	add	r0, sp, #36	; 0x24
 8003472:	f7fc fee5 	bl	8000240 <strlen>
 8003476:	b282      	uxth	r2, r0
 8003478:	a909      	add	r1, sp, #36	; 0x24
 800347a:	4807      	ldr	r0, [pc, #28]	; (8003498 <Gyro_Thread+0xe0>)
 800347c:	f003 fe8c 	bl	8007198 <HAL_UART_Transmit_DMA>
 8003480:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
		osDelay(100);
 8003484:	2064      	movs	r0, #100	; 0x64
 8003486:	f7fe f80f 	bl	80014a8 <osDelay>
	while(1) {
 800348a:	e7a0      	b.n	80033ce <Gyro_Thread+0x16>
 800348c:	20005038 	.word	0x20005038
 8003490:	20004dc8 	.word	0x20004dc8
 8003494:	0800b2a0 	.word	0x0800b2a0
 8003498:	20005138 	.word	0x20005138

0800349c <DMA_init>:
void DMA_init() {
 800349c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034a0:	b082      	sub	sp, #8
	__HAL_RCC_DMA2_CLK_ENABLE();
 80034a2:	4b52      	ldr	r3, [pc, #328]	; (80035ec <DMA_init+0x150>)
 80034a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034a6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80034aa:	631a      	str	r2, [r3, #48]	; 0x30
 80034ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034b2:	9301      	str	r3, [sp, #4]
 80034b4:	9b01      	ldr	r3, [sp, #4]
	hdma_usart1_tx.Instance = DMA2_Stream7;
 80034b6:	4c4e      	ldr	r4, [pc, #312]	; (80035f0 <DMA_init+0x154>)
 80034b8:	4b4e      	ldr	r3, [pc, #312]	; (80035f4 <DMA_init+0x158>)
 80034ba:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
	hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80034be:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80034c2:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
	hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034c6:	2640      	movs	r6, #64	; 0x40
 80034c8:	f8c4 6138 	str.w	r6, [r4, #312]	; 0x138
	hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034cc:	2300      	movs	r3, #0
 80034ce:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
	hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80034d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80034d6:	f8c4 1140 	str.w	r1, [r4, #320]	; 0x140
	hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034da:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
	hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034de:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
	hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80034e2:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
	hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80034e6:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
	hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034ea:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
	hdma_usart1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80034ee:	2203      	movs	r2, #3
 80034f0:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
	hdma_usart1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80034f4:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
	hdma_usart1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80034f8:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
	hdma_usart1_rx.Instance = DMA2_Stream5;
 80034fc:	4d3e      	ldr	r5, [pc, #248]	; (80035f8 <DMA_init+0x15c>)
 80034fe:	6725      	str	r5, [r4, #112]	; 0x70
	hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003500:	6760      	str	r0, [r4, #116]	; 0x74
	hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003502:	67a3      	str	r3, [r4, #120]	; 0x78
	hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003504:	67e3      	str	r3, [r4, #124]	; 0x7c
	hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003506:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
	hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800350a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800350e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003512:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003516:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800351a:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
	hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800351e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	hdma_usart1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003522:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	hdma_usart1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8003526:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	hdma_usart1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800352a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	hdma_usart6_tx.Instance = DMA2_Stream6;
 800352e:	3518      	adds	r5, #24
 8003530:	f8c4 50d0 	str.w	r5, [r4, #208]	; 0xd0
	hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8003534:	f04f 6520 	mov.w	r5, #167772160	; 0xa000000
 8003538:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
	hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800353c:	f8c4 60d8 	str.w	r6, [r4, #216]	; 0xd8
	hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003540:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
	hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003544:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
	hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003548:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
	hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800354c:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
	hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8003550:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
	hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003554:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
	hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003558:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
	hdma_usart6_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800355c:	f8c4 20f8 	str.w	r2, [r4, #248]	; 0xf8
	hdma_usart6_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8003560:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
	hdma_usart6_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003564:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
	hdma_usart6_rx.Instance = DMA2_Stream1;
 8003568:	4e24      	ldr	r6, [pc, #144]	; (80035fc <DMA_init+0x160>)
 800356a:	6126      	str	r6, [r4, #16]
	hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800356c:	6165      	str	r5, [r4, #20]
	hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800356e:	61a3      	str	r3, [r4, #24]
	hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003570:	61e3      	str	r3, [r4, #28]
	hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003572:	6221      	str	r1, [r4, #32]
	hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003574:	6263      	str	r3, [r4, #36]	; 0x24
	hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003576:	62a3      	str	r3, [r4, #40]	; 0x28
	hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8003578:	62e3      	str	r3, [r4, #44]	; 0x2c
	hdma_usart6_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800357a:	6320      	str	r0, [r4, #48]	; 0x30
	hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800357c:	6363      	str	r3, [r4, #52]	; 0x34
	hdma_usart6_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800357e:	63a2      	str	r2, [r4, #56]	; 0x38
	hdma_usart6_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8003580:	63e3      	str	r3, [r4, #60]	; 0x3c
	hdma_usart6_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003582:	6423      	str	r3, [r4, #64]	; 0x40
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);    // UART RX
 8003584:	2039      	movs	r0, #57	; 0x39
 8003586:	f000 fe25 	bl	80041d4 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);    // USB RX
 800358a:	2044      	movs	r0, #68	; 0x44
 800358c:	f000 fe22 	bl	80041d4 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);    // UART TX
 8003590:	2045      	movs	r0, #69	; 0x45
 8003592:	f000 fe1f 	bl	80041d4 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);    // USB TX
 8003596:	2046      	movs	r0, #70	; 0x46
 8003598:	f000 fe1c 	bl	80041d4 <HAL_NVIC_EnableIRQ>
	HAL_DMA_Init(&hdma_usart1_rx);
 800359c:	f104 0770 	add.w	r7, r4, #112	; 0x70
 80035a0:	4638      	mov	r0, r7
 80035a2:	f000 fea3 	bl	80042ec <HAL_DMA_Init>
	HAL_DMA_Init(&hdma_usart1_tx);
 80035a6:	f504 7898 	add.w	r8, r4, #304	; 0x130
 80035aa:	4640      	mov	r0, r8
 80035ac:	f000 fe9e 	bl	80042ec <HAL_DMA_Init>
	HAL_DMA_Init(&hdma_usart6_rx);
 80035b0:	f104 0510 	add.w	r5, r4, #16
 80035b4:	4628      	mov	r0, r5
 80035b6:	f000 fe99 	bl	80042ec <HAL_DMA_Init>
	HAL_DMA_Init(&hdma_usart6_tx);
 80035ba:	f104 06d0 	add.w	r6, r4, #208	; 0xd0
 80035be:	4630      	mov	r0, r6
 80035c0:	f000 fe94 	bl	80042ec <HAL_DMA_Init>
	__HAL_LINKDMA(&USB_UART, hdmatx, hdma_usart1_tx);
 80035c4:	4b0e      	ldr	r3, [pc, #56]	; (8003600 <DMA_init+0x164>)
 80035c6:	f8c3 8070 	str.w	r8, [r3, #112]	; 0x70
 80035ca:	f8c4 3168 	str.w	r3, [r4, #360]	; 0x168
	__HAL_LINKDMA(&USB_UART, hdmarx, hdma_usart1_rx);
 80035ce:	675f      	str	r7, [r3, #116]	; 0x74
 80035d0:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	__HAL_LINKDMA(&DISCO_UART, hdmatx, hdma_usart6_tx);
 80035d4:	f8c4 6200 	str.w	r6, [r4, #512]	; 0x200
 80035d8:	f504 73c8 	add.w	r3, r4, #400	; 0x190
 80035dc:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
	__HAL_LINKDMA(&DISCO_UART, hdmarx, hdma_usart6_rx);
 80035e0:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
 80035e4:	64a3      	str	r3, [r4, #72]	; 0x48
}
 80035e6:	b002      	add	sp, #8
 80035e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035ec:	40023800 	.word	0x40023800
 80035f0:	20004dc8 	.word	0x20004dc8
 80035f4:	400264b8 	.word	0x400264b8
 80035f8:	40026488 	.word	0x40026488
 80035fc:	40026428 	.word	0x40026428
 8003600:	20005138 	.word	0x20005138

08003604 <UART_init>:
void UART_init() {
 8003604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003608:	b08a      	sub	sp, #40	; 0x28
	USB_UART_ptr->Instance = USART1;
 800360a:	4843      	ldr	r0, [pc, #268]	; (8003718 <UART_init+0x114>)
 800360c:	4b43      	ldr	r3, [pc, #268]	; (800371c <UART_init+0x118>)
 800360e:	6003      	str	r3, [r0, #0]
	USB_UART_ptr->Init.BaudRate = 115200;
 8003610:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003614:	6043      	str	r3, [r0, #4]
	USB_UART_ptr->Init.WordLength = UART_WORDLENGTH_8B;
 8003616:	2400      	movs	r4, #0
 8003618:	6084      	str	r4, [r0, #8]
	USB_UART_ptr->Init.StopBits = UART_STOPBITS_1;
 800361a:	60c4      	str	r4, [r0, #12]
	USB_UART_ptr->Init.Parity = UART_PARITY_NONE;
 800361c:	6104      	str	r4, [r0, #16]
	USB_UART_ptr->Init.Mode = UART_MODE_TX_RX;
 800361e:	250c      	movs	r5, #12
 8003620:	6145      	str	r5, [r0, #20]
	USB_UART_ptr->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003622:	6184      	str	r4, [r0, #24]
	HAL_UART_Init(&USB_UART);
 8003624:	f004 fb6a 	bl	8007cfc <HAL_UART_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003628:	4622      	mov	r2, r4
 800362a:	2105      	movs	r1, #5
 800362c:	2025      	movs	r0, #37	; 0x25
 800362e:	f000 fd9b 	bl	8004168 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003632:	2025      	movs	r0, #37	; 0x25
 8003634:	f000 fdce 	bl	80041d4 <HAL_NVIC_EnableIRQ>
	DISCO_UART_ptr->Instance = USART6;
 8003638:	4839      	ldr	r0, [pc, #228]	; (8003720 <UART_init+0x11c>)
 800363a:	4b3a      	ldr	r3, [pc, #232]	; (8003724 <UART_init+0x120>)
 800363c:	f8c0 3190 	str.w	r3, [r0, #400]	; 0x190
	DISCO_UART_ptr->Init.BaudRate = 38400;
 8003640:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8003644:	f8c0 3194 	str.w	r3, [r0, #404]	; 0x194
	DISCO_UART_ptr->Init.WordLength = UART_WORDLENGTH_8B;
 8003648:	f8c0 4198 	str.w	r4, [r0, #408]	; 0x198
	DISCO_UART_ptr->Init.StopBits = UART_STOPBITS_1;
 800364c:	f8c0 419c 	str.w	r4, [r0, #412]	; 0x19c
	DISCO_UART_ptr->Init.Parity = UART_PARITY_NONE;
 8003650:	f8c0 41a0 	str.w	r4, [r0, #416]	; 0x1a0
	DISCO_UART_ptr->Init.Mode = UART_MODE_TX_RX;
 8003654:	f8c0 51a4 	str.w	r5, [r0, #420]	; 0x1a4
	DISCO_UART_ptr->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003658:	f8c0 41a8 	str.w	r4, [r0, #424]	; 0x1a8
	HAL_UART_Init(&DISCO_UART);
 800365c:	f500 70c8 	add.w	r0, r0, #400	; 0x190
 8003660:	f004 fb4c 	bl	8007cfc <HAL_UART_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 1);
 8003664:	2201      	movs	r2, #1
 8003666:	2105      	movs	r1, #5
 8003668:	2047      	movs	r0, #71	; 0x47
 800366a:	f000 fd7d 	bl	8004168 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART6_IRQn);
 800366e:	2047      	movs	r0, #71	; 0x47
 8003670:	f000 fdb0 	bl	80041d4 <HAL_NVIC_EnableIRQ>
	__GPIOA_CLK_ENABLE();
 8003674:	4c2c      	ldr	r4, [pc, #176]	; (8003728 <UART_init+0x124>)
 8003676:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003678:	f043 0301 	orr.w	r3, r3, #1
 800367c:	6323      	str	r3, [r4, #48]	; 0x30
 800367e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	9301      	str	r3, [sp, #4]
 8003686:	9b01      	ldr	r3, [sp, #4]
	GPIO_InitStruct.Pin       = GPIO_PIN_9;
 8003688:	f44f 7300 	mov.w	r3, #512	; 0x200
 800368c:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800368e:	2702      	movs	r7, #2
 8003690:	9706      	str	r7, [sp, #24]
	GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8003692:	2601      	movs	r6, #1
 8003694:	9607      	str	r6, [sp, #28]
	GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8003696:	2503      	movs	r5, #3
 8003698:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800369a:	2307      	movs	r3, #7
 800369c:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //TX Config
 800369e:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8003730 <UART_init+0x12c>
 80036a2:	a905      	add	r1, sp, #20
 80036a4:	4640      	mov	r0, r8
 80036a6:	f001 fd01 	bl	80050ac <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 80036aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036ae:	9305      	str	r3, [sp, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config
 80036b0:	a905      	add	r1, sp, #20
 80036b2:	4640      	mov	r0, r8
 80036b4:	f001 fcfa 	bl	80050ac <HAL_GPIO_Init>
	__USART1_CLK_ENABLE();
 80036b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80036ba:	f043 0310 	orr.w	r3, r3, #16
 80036be:	6463      	str	r3, [r4, #68]	; 0x44
 80036c0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80036c2:	f003 0310 	and.w	r3, r3, #16
 80036c6:	9302      	str	r3, [sp, #8]
 80036c8:	9b02      	ldr	r3, [sp, #8]
	__GPIOC_CLK_ENABLE();
 80036ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80036cc:	f043 0304 	orr.w	r3, r3, #4
 80036d0:	6323      	str	r3, [r4, #48]	; 0x30
 80036d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80036d4:	f003 0304 	and.w	r3, r3, #4
 80036d8:	9303      	str	r3, [sp, #12]
 80036da:	9b03      	ldr	r3, [sp, #12]
	GPIO_InitStruct.Pin       = GPIO_PIN_6;
 80036dc:	2340      	movs	r3, #64	; 0x40
 80036de:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80036e0:	9706      	str	r7, [sp, #24]
	GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80036e2:	9607      	str	r6, [sp, #28]
	GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 80036e4:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80036e6:	2308      	movs	r3, #8
 80036e8:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //TX Config
 80036ea:	4d10      	ldr	r5, [pc, #64]	; (800372c <UART_init+0x128>)
 80036ec:	a905      	add	r1, sp, #20
 80036ee:	4628      	mov	r0, r5
 80036f0:	f001 fcdc 	bl	80050ac <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 80036f4:	2380      	movs	r3, #128	; 0x80
 80036f6:	9305      	str	r3, [sp, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //RX Config
 80036f8:	a905      	add	r1, sp, #20
 80036fa:	4628      	mov	r0, r5
 80036fc:	f001 fcd6 	bl	80050ac <HAL_GPIO_Init>
	__USART6_CLK_ENABLE();
 8003700:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003702:	f043 0320 	orr.w	r3, r3, #32
 8003706:	6463      	str	r3, [r4, #68]	; 0x44
 8003708:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800370a:	f003 0320 	and.w	r3, r3, #32
 800370e:	9304      	str	r3, [sp, #16]
 8003710:	9b04      	ldr	r3, [sp, #16]
}
 8003712:	b00a      	add	sp, #40	; 0x28
 8003714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003718:	20005138 	.word	0x20005138
 800371c:	40011000 	.word	0x40011000
 8003720:	20004dc8 	.word	0x20004dc8
 8003724:	40011400 	.word	0x40011400
 8003728:	40023800 	.word	0x40023800
 800372c:	40020800 	.word	0x40020800
 8003730:	40020000 	.word	0x40020000

08003734 <UART_Thread>:
void UART_Thread(void *argument) {
 8003734:	b508      	push	{r3, lr}
	DMA_init();
 8003736:	f7ff feb1 	bl	800349c <DMA_init>
	UART_init();
 800373a:	f7ff ff63 	bl	8003604 <UART_init>
	while (1) {
 800373e:	e7fe      	b.n	800373e <UART_Thread+0xa>

08003740 <HAL_Delay>:
	}
}


void HAL_Delay( uint32_t ulDelayMs )
{
 8003740:	b508      	push	{r3, lr}
    vTaskDelay(ulDelayMs);
 8003742:	f7fe fe85 	bl	8002450 <vTaskDelay>
}
 8003746:	bd08      	pop	{r3, pc}

08003748 <SystemClock_Config>:
  *            Main regulator output voltage  = Scale1 mode
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
void SystemClock_Config(void) {
 8003748:	b500      	push	{lr}
 800374a:	b093      	sub	sp, #76	; 0x4c
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800374c:	2301      	movs	r3, #1
 800374e:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003750:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003754:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003756:	2302      	movs	r3, #2
 8003758:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800375a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800375e:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.PLL.PLLM = 25;
 8003760:	2219      	movs	r2, #25
 8003762:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 432;
 8003764:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8003768:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800376a:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800376c:	2309      	movs	r3, #9
 800376e:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = 7;
 8003770:	2307      	movs	r3, #7
 8003772:	930c      	str	r3, [sp, #48]	; 0x30

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8003774:	4668      	mov	r0, sp
 8003776:	f002 fbb1 	bl	8005edc <HAL_RCC_OscConfig>
  if(ret != HAL_OK) {
 800377a:	b100      	cbz	r0, 800377e <SystemClock_Config+0x36>
    while(1) { ; }
 800377c:	e7fe      	b.n	800377c <SystemClock_Config+0x34>
  }

  /* Activate the OverDrive to reach the 216 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
 800377e:	f002 fb6f 	bl	8005e60 <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK) {
 8003782:	b100      	cbz	r0, 8003786 <SystemClock_Config+0x3e>
    while(1) { ; }
 8003784:	e7fe      	b.n	8003784 <SystemClock_Config+0x3c>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8003786:	230f      	movs	r3, #15
 8003788:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800378a:	2302      	movs	r3, #2
 800378c:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800378e:	2300      	movs	r3, #0
 8003790:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003792:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003796:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003798:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800379c:	9311      	str	r3, [sp, #68]	; 0x44

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 800379e:	2107      	movs	r1, #7
 80037a0:	a80d      	add	r0, sp, #52	; 0x34
 80037a2:	f002 fe11 	bl	80063c8 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK) {
 80037a6:	b100      	cbz	r0, 80037aa <SystemClock_Config+0x62>
    while(1) { ; }
 80037a8:	e7fe      	b.n	80037a8 <SystemClock_Config+0x60>
  }
}
 80037aa:	b013      	add	sp, #76	; 0x4c
 80037ac:	f85d fb04 	ldr.w	pc, [sp], #4

080037b0 <CPU_CACHE_Enable>:

// Enables CPU Instruction and Data Caches
void CPU_CACHE_Enable(void) {
 80037b0:	b410      	push	{r4}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80037b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80037b6:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80037ba:	4b1c      	ldr	r3, [pc, #112]	; (800382c <CPU_CACHE_Enable+0x7c>)
 80037bc:	2100      	movs	r1, #0
 80037be:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80037c2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80037c6:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80037ca:	695a      	ldr	r2, [r3, #20]
 80037cc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80037d0:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80037d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80037d6:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80037da:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80037de:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80037e2:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80037e6:	f3c4 304e 	ubfx	r0, r4, #13, #15
 80037ea:	e000      	b.n	80037ee <CPU_CACHE_Enable+0x3e>
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
    } while(sets-- != 0U);
 80037ec:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80037ee:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80037f2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80037f6:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 80037fa:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 80037fe:	490b      	ldr	r1, [pc, #44]	; (800382c <CPU_CACHE_Enable+0x7c>)
 8003800:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8003804:	4613      	mov	r3, r2
 8003806:	3a01      	subs	r2, #1
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1f2      	bne.n	80037f2 <CPU_CACHE_Enable+0x42>
    } while(sets-- != 0U);
 800380c:	1e43      	subs	r3, r0, #1
 800380e:	2800      	cmp	r0, #0
 8003810:	d1ec      	bne.n	80037ec <CPU_CACHE_Enable+0x3c>
 8003812:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8003816:	694b      	ldr	r3, [r1, #20]
 8003818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800381c:	614b      	str	r3, [r1, #20]
 800381e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003822:	f3bf 8f6f 	isb	sy
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 8003826:	f85d 4b04 	ldr.w	r4, [sp], #4
 800382a:	4770      	bx	lr
 800382c:	e000ed00 	.word	0xe000ed00

08003830 <Clock_Inits>:
	initUart(&USB_UART, 115200, USART1);
	setbuf(stdout, NULL);
}

// Initializes clocks for various peripherals. Some might need to be added!
void Clock_Inits(void) {
 8003830:	b0a2      	sub	sp, #136	; 0x88
	// Clock all GPIO ports and Timers.
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003832:	4b9a      	ldr	r3, [pc, #616]	; (8003a9c <Clock_Inits+0x26c>)
 8003834:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003836:	f042 0201 	orr.w	r2, r2, #1
 800383a:	631a      	str	r2, [r3, #48]	; 0x30
 800383c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800383e:	f002 0201 	and.w	r2, r2, #1
 8003842:	9200      	str	r2, [sp, #0]
 8003844:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003846:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003848:	f042 0202 	orr.w	r2, r2, #2
 800384c:	631a      	str	r2, [r3, #48]	; 0x30
 800384e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003850:	f002 0202 	and.w	r2, r2, #2
 8003854:	9201      	str	r2, [sp, #4]
 8003856:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003858:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800385a:	f042 0204 	orr.w	r2, r2, #4
 800385e:	631a      	str	r2, [r3, #48]	; 0x30
 8003860:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003862:	f002 0204 	and.w	r2, r2, #4
 8003866:	9202      	str	r2, [sp, #8]
 8003868:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800386a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800386c:	f042 0208 	orr.w	r2, r2, #8
 8003870:	631a      	str	r2, [r3, #48]	; 0x30
 8003872:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003874:	f002 0208 	and.w	r2, r2, #8
 8003878:	9203      	str	r2, [sp, #12]
 800387a:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800387c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800387e:	f042 0210 	orr.w	r2, r2, #16
 8003882:	631a      	str	r2, [r3, #48]	; 0x30
 8003884:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003886:	f002 0210 	and.w	r2, r2, #16
 800388a:	9204      	str	r2, [sp, #16]
 800388c:	9a04      	ldr	r2, [sp, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800388e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003890:	f042 0220 	orr.w	r2, r2, #32
 8003894:	631a      	str	r2, [r3, #48]	; 0x30
 8003896:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003898:	f002 0220 	and.w	r2, r2, #32
 800389c:	9205      	str	r2, [sp, #20]
 800389e:	9a05      	ldr	r2, [sp, #20]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80038a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038a6:	631a      	str	r2, [r3, #48]	; 0x30
 80038a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038aa:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80038ae:	9206      	str	r2, [sp, #24]
 80038b0:	9a06      	ldr	r2, [sp, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80038b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80038b8:	631a      	str	r2, [r3, #48]	; 0x30
 80038ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038bc:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80038c0:	9207      	str	r2, [sp, #28]
 80038c2:	9a07      	ldr	r2, [sp, #28]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 80038c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038ca:	631a      	str	r2, [r3, #48]	; 0x30
 80038cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038ce:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80038d2:	9208      	str	r2, [sp, #32]
 80038d4:	9a08      	ldr	r2, [sp, #32]
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 80038d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038dc:	631a      	str	r2, [r3, #48]	; 0x30
 80038de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038e0:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80038e4:	9209      	str	r2, [sp, #36]	; 0x24
 80038e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
	__HAL_RCC_GPIOK_CLK_ENABLE();
 80038e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038ee:	631a      	str	r2, [r3, #48]	; 0x30
 80038f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038f2:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80038f6:	920a      	str	r2, [sp, #40]	; 0x28
 80038f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 80038fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003900:	645a      	str	r2, [r3, #68]	; 0x44
 8003902:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003904:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003908:	920b      	str	r2, [sp, #44]	; 0x2c
 800390a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	__HAL_RCC_TIM1_CLK_ENABLE();
 800390c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800390e:	f042 0201 	orr.w	r2, r2, #1
 8003912:	645a      	str	r2, [r3, #68]	; 0x44
 8003914:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003916:	f002 0201 	and.w	r2, r2, #1
 800391a:	920c      	str	r2, [sp, #48]	; 0x30
 800391c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	__HAL_RCC_TIM2_CLK_ENABLE();
 800391e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003920:	f042 0201 	orr.w	r2, r2, #1
 8003924:	641a      	str	r2, [r3, #64]	; 0x40
 8003926:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003928:	f002 0201 	and.w	r2, r2, #1
 800392c:	920d      	str	r2, [sp, #52]	; 0x34
 800392e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	__HAL_RCC_TIM3_CLK_ENABLE();
 8003930:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003932:	f042 0202 	orr.w	r2, r2, #2
 8003936:	641a      	str	r2, [r3, #64]	; 0x40
 8003938:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800393a:	f002 0202 	and.w	r2, r2, #2
 800393e:	920e      	str	r2, [sp, #56]	; 0x38
 8003940:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	__HAL_RCC_TIM4_CLK_ENABLE();
 8003942:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003944:	f042 0204 	orr.w	r2, r2, #4
 8003948:	641a      	str	r2, [r3, #64]	; 0x40
 800394a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800394c:	f002 0204 	and.w	r2, r2, #4
 8003950:	920f      	str	r2, [sp, #60]	; 0x3c
 8003952:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
	__HAL_RCC_TIM5_CLK_ENABLE();
 8003954:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003956:	f042 0208 	orr.w	r2, r2, #8
 800395a:	641a      	str	r2, [r3, #64]	; 0x40
 800395c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800395e:	f002 0208 	and.w	r2, r2, #8
 8003962:	9210      	str	r2, [sp, #64]	; 0x40
 8003964:	9a10      	ldr	r2, [sp, #64]	; 0x40
	__HAL_RCC_TIM6_CLK_ENABLE();
 8003966:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003968:	f042 0210 	orr.w	r2, r2, #16
 800396c:	641a      	str	r2, [r3, #64]	; 0x40
 800396e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003970:	f002 0210 	and.w	r2, r2, #16
 8003974:	9211      	str	r2, [sp, #68]	; 0x44
 8003976:	9a11      	ldr	r2, [sp, #68]	; 0x44
	__HAL_RCC_TIM7_CLK_ENABLE();
 8003978:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800397a:	f042 0220 	orr.w	r2, r2, #32
 800397e:	641a      	str	r2, [r3, #64]	; 0x40
 8003980:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003982:	f002 0220 	and.w	r2, r2, #32
 8003986:	9212      	str	r2, [sp, #72]	; 0x48
 8003988:	9a12      	ldr	r2, [sp, #72]	; 0x48
	__HAL_RCC_TIM8_CLK_ENABLE();
 800398a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800398c:	f042 0202 	orr.w	r2, r2, #2
 8003990:	645a      	str	r2, [r3, #68]	; 0x44
 8003992:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003994:	f002 0202 	and.w	r2, r2, #2
 8003998:	9213      	str	r2, [sp, #76]	; 0x4c
 800399a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
	__HAL_RCC_TIM9_CLK_ENABLE();
 800399c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800399e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80039a2:	645a      	str	r2, [r3, #68]	; 0x44
 80039a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039a6:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 80039aa:	9214      	str	r2, [sp, #80]	; 0x50
 80039ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
	__HAL_RCC_TIM10_CLK_ENABLE();
 80039ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039b0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80039b4:	645a      	str	r2, [r3, #68]	; 0x44
 80039b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039b8:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80039bc:	9215      	str	r2, [sp, #84]	; 0x54
 80039be:	9a15      	ldr	r2, [sp, #84]	; 0x54
	__HAL_RCC_TIM11_CLK_ENABLE();
 80039c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039c2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80039c6:	645a      	str	r2, [r3, #68]	; 0x44
 80039c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039ca:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80039ce:	9216      	str	r2, [sp, #88]	; 0x58
 80039d0:	9a16      	ldr	r2, [sp, #88]	; 0x58
	__HAL_RCC_TIM12_CLK_ENABLE();
 80039d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039d8:	641a      	str	r2, [r3, #64]	; 0x40
 80039da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039dc:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80039e0:	9217      	str	r2, [sp, #92]	; 0x5c
 80039e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
	__HAL_RCC_TIM13_CLK_ENABLE();
 80039e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80039ea:	641a      	str	r2, [r3, #64]	; 0x40
 80039ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039ee:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80039f2:	9218      	str	r2, [sp, #96]	; 0x60
 80039f4:	9a18      	ldr	r2, [sp, #96]	; 0x60
	__HAL_RCC_TIM14_CLK_ENABLE();
 80039f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039fc:	641a      	str	r2, [r3, #64]	; 0x40
 80039fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a00:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8003a04:	9219      	str	r2, [sp, #100]	; 0x64
 8003a06:	9a19      	ldr	r2, [sp, #100]	; 0x64

	// Enable SPI2 clock
	__HAL_RCC_SPI2_CLK_ENABLE();
 8003a08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a0e:	641a      	str	r2, [r3, #64]	; 0x40
 8003a10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a12:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003a16:	921a      	str	r2, [sp, #104]	; 0x68
 8003a18:	9a1a      	ldr	r2, [sp, #104]	; 0x68

	// ADC and DAC
	__HAL_RCC_DAC_CLK_ENABLE();
 8003a1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a1c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003a20:	641a      	str	r2, [r3, #64]	; 0x40
 8003a22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a24:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8003a28:	921b      	str	r2, [sp, #108]	; 0x6c
 8003a2a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
	__HAL_RCC_ADC1_CLK_ENABLE();
 8003a2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a32:	645a      	str	r2, [r3, #68]	; 0x44
 8003a34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a36:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8003a3a:	921c      	str	r2, [sp, #112]	; 0x70
 8003a3c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
	__HAL_RCC_ADC2_CLK_ENABLE();
 8003a3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a44:	645a      	str	r2, [r3, #68]	; 0x44
 8003a46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a48:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003a4c:	921d      	str	r2, [sp, #116]	; 0x74
 8003a4e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
	__HAL_RCC_ADC3_CLK_ENABLE();
 8003a50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a52:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a56:	645a      	str	r2, [r3, #68]	; 0x44
 8003a58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a5a:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8003a5e:	921e      	str	r2, [sp, #120]	; 0x78
 8003a60:	9a1e      	ldr	r2, [sp, #120]	; 0x78

	// DMA Clocks
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003a62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a64:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003a68:	631a      	str	r2, [r3, #48]	; 0x30
 8003a6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a6c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003a70:	921f      	str	r2, [sp, #124]	; 0x7c
 8003a72:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
	__HAL_RCC_DMA2_CLK_ENABLE();
 8003a74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a76:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003a7a:	631a      	str	r2, [r3, #48]	; 0x30
 8003a7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a7e:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8003a82:	9220      	str	r2, [sp, #128]	; 0x80
 8003a84:	9a20      	ldr	r2, [sp, #128]	; 0x80

	// I2C Clock
	__HAL_RCC_I2C1_CLK_ENABLE();
 8003a86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a88:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003a8c:	641a      	str	r2, [r3, #64]	; 0x40
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a94:	9321      	str	r3, [sp, #132]	; 0x84
 8003a96:	9b21      	ldr	r3, [sp, #132]	; 0x84

}
 8003a98:	b022      	add	sp, #136	; 0x88
 8003a9a:	4770      	bx	lr
 8003a9c:	40023800 	.word	0x40023800

08003aa0 <Sys_Init>:
void Sys_Init(void) {
 8003aa0:	b508      	push	{r3, lr}
	CPU_CACHE_Enable();		// Enable CPU Caching
 8003aa2:	f7ff fe85 	bl	80037b0 <CPU_CACHE_Enable>
	HAL_Init();				// Initialize HAL
 8003aa6:	f000 fb31 	bl	800410c <HAL_Init>
	SystemClock_Config(); 	// Configure the system clock to 216 MHz
 8003aaa:	f7ff fe4d 	bl	8003748 <SystemClock_Config>
	Clock_Inits();
 8003aae:	f7ff febf 	bl	8003830 <Clock_Inits>
	initUart(&USB_UART, 115200, USART1);
 8003ab2:	4a06      	ldr	r2, [pc, #24]	; (8003acc <Sys_Init+0x2c>)
 8003ab4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8003ab8:	4805      	ldr	r0, [pc, #20]	; (8003ad0 <Sys_Init+0x30>)
 8003aba:	f000 fac7 	bl	800404c <initUart>
	setbuf(stdout, NULL);
 8003abe:	4b05      	ldr	r3, [pc, #20]	; (8003ad4 <Sys_Init+0x34>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	6898      	ldr	r0, [r3, #8]
 8003ac6:	f004 facf 	bl	8008068 <setbuf>
}
 8003aca:	bd08      	pop	{r3, pc}
 8003acc:	40011000 	.word	0x40011000
 8003ad0:	20005138 	.word	0x20005138
 8003ad4:	2000010c 	.word	0x2000010c

08003ad8 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8003ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003adc:	b086      	sub	sp, #24
 8003ade:	4605      	mov	r5, r0
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8003ae0:	2364      	movs	r3, #100	; 0x64
 8003ae2:	9302      	str	r3, [sp, #8]
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	9301      	str	r3, [sp, #4]
 8003ae8:	f10d 0217 	add.w	r2, sp, #23
 8003aec:	9200      	str	r2, [sp, #0]
 8003aee:	2275      	movs	r2, #117	; 0x75
 8003af0:	21d0      	movs	r1, #208	; 0xd0
 8003af2:	f001 fecd 	bl	8005890 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8003af6:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8003afa:	2b68      	cmp	r3, #104	; 0x68
 8003afc:	d003      	beq.n	8003b06 <MPU6050_Init+0x2e>
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
        return 0;
    }
    return 1;
 8003afe:	2001      	movs	r0, #1
}
 8003b00:	b006      	add	sp, #24
 8003b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        Data = 0;
 8003b06:	2400      	movs	r4, #0
 8003b08:	f88d 4016 	strb.w	r4, [sp, #22]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8003b0c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8003b10:	f8cd 8008 	str.w	r8, [sp, #8]
 8003b14:	2601      	movs	r6, #1
 8003b16:	9601      	str	r6, [sp, #4]
 8003b18:	f10d 0716 	add.w	r7, sp, #22
 8003b1c:	9700      	str	r7, [sp, #0]
 8003b1e:	4633      	mov	r3, r6
 8003b20:	226b      	movs	r2, #107	; 0x6b
 8003b22:	21d0      	movs	r1, #208	; 0xd0
 8003b24:	4628      	mov	r0, r5
 8003b26:	f001 fddd 	bl	80056e4 <HAL_I2C_Mem_Write>
        Data = 0x07;
 8003b2a:	2307      	movs	r3, #7
 8003b2c:	f88d 3016 	strb.w	r3, [sp, #22]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8003b30:	f8cd 8008 	str.w	r8, [sp, #8]
 8003b34:	9601      	str	r6, [sp, #4]
 8003b36:	9700      	str	r7, [sp, #0]
 8003b38:	4633      	mov	r3, r6
 8003b3a:	2219      	movs	r2, #25
 8003b3c:	21d0      	movs	r1, #208	; 0xd0
 8003b3e:	4628      	mov	r0, r5
 8003b40:	f001 fdd0 	bl	80056e4 <HAL_I2C_Mem_Write>
        Data = 0x00;
 8003b44:	f88d 4016 	strb.w	r4, [sp, #22]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8003b48:	f8cd 8008 	str.w	r8, [sp, #8]
 8003b4c:	9601      	str	r6, [sp, #4]
 8003b4e:	9700      	str	r7, [sp, #0]
 8003b50:	4633      	mov	r3, r6
 8003b52:	221c      	movs	r2, #28
 8003b54:	21d0      	movs	r1, #208	; 0xd0
 8003b56:	4628      	mov	r0, r5
 8003b58:	f001 fdc4 	bl	80056e4 <HAL_I2C_Mem_Write>
        Data = 0x00;
 8003b5c:	f88d 4016 	strb.w	r4, [sp, #22]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8003b60:	f8cd 8008 	str.w	r8, [sp, #8]
 8003b64:	9601      	str	r6, [sp, #4]
 8003b66:	9700      	str	r7, [sp, #0]
 8003b68:	4633      	mov	r3, r6
 8003b6a:	221b      	movs	r2, #27
 8003b6c:	21d0      	movs	r1, #208	; 0xd0
 8003b6e:	4628      	mov	r0, r5
 8003b70:	f001 fdb8 	bl	80056e4 <HAL_I2C_Mem_Write>
        return 0;
 8003b74:	4620      	mov	r0, r4
 8003b76:	e7c3      	b.n	8003b00 <MPU6050_Init+0x28>

08003b78 <Kalman_getAngle>:
        DataStruct->Gx = -DataStruct->Gx;
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
}

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8003b78:	ed2d 8b04 	vpush	{d8-d9}
 8003b7c:	b084      	sub	sp, #16
    double rate = newRate - Kalman->bias;
 8003b7e:	ed90 8b08 	vldr	d8, [r0, #32]
 8003b82:	ee31 1b48 	vsub.f64	d1, d1, d8
    Kalman->angle += dt * rate;
 8003b86:	ed90 6b06 	vldr	d6, [r0, #24]
 8003b8a:	ee01 6b02 	vmla.f64	d6, d1, d2
 8003b8e:	ed80 6b06 	vstr	d6, [r0, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8003b92:	ed90 4b10 	vldr	d4, [r0, #64]	; 0x40
 8003b96:	ee24 7b02 	vmul.f64	d7, d4, d2
 8003b9a:	ed90 3b0c 	vldr	d3, [r0, #48]	; 0x30
 8003b9e:	ee37 9b43 	vsub.f64	d9, d7, d3
 8003ba2:	ed90 1b0e 	vldr	d1, [r0, #56]	; 0x38
 8003ba6:	ee39 9b41 	vsub.f64	d9, d9, d1
 8003baa:	ed90 5b00 	vldr	d5, [r0]
 8003bae:	ee39 9b05 	vadd.f64	d9, d9, d5
 8003bb2:	ed90 5b0a 	vldr	d5, [r0, #40]	; 0x28
 8003bb6:	ee09 5b02 	vmla.f64	d5, d9, d2
 8003bba:	ed80 5b0a 	vstr	d5, [r0, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8003bbe:	ee33 3b47 	vsub.f64	d3, d3, d7
 8003bc2:	ed80 3b0c 	vstr	d3, [r0, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8003bc6:	ee31 7b47 	vsub.f64	d7, d1, d7
 8003bca:	ed80 7b0e 	vstr	d7, [r0, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8003bce:	ed90 1b02 	vldr	d1, [r0, #8]
 8003bd2:	ee01 4b02 	vmla.f64	d4, d1, d2
 8003bd6:	ed80 4b10 	vstr	d4, [r0, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8003bda:	ed90 2b04 	vldr	d2, [r0, #16]
 8003bde:	ee35 2b02 	vadd.f64	d2, d5, d2
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8003be2:	ee85 9b02 	vdiv.f64	d9, d5, d2
 8003be6:	ed8d 9b00 	vstr	d9, [sp]
    K[1] = Kalman->P[1][0] / S;
 8003bea:	ee87 1b02 	vdiv.f64	d1, d7, d2
 8003bee:	ed8d 1b02 	vstr	d1, [sp, #8]

    double y = newAngle - Kalman->angle;
 8003bf2:	ee30 2b46 	vsub.f64	d2, d0, d6
    Kalman->angle += K[0] * y;
 8003bf6:	ee09 6b02 	vmla.f64	d6, d9, d2
 8003bfa:	eeb0 0b46 	vmov.f64	d0, d6
 8003bfe:	ed80 6b06 	vstr	d6, [r0, #24]
    Kalman->bias += K[1] * y;
 8003c02:	ee01 8b02 	vmla.f64	d8, d1, d2
 8003c06:	ed80 8b08 	vstr	d8, [r0, #32]

    double P00_temp = Kalman->P[0][0];
    double P01_temp = Kalman->P[0][1];

    Kalman->P[0][0] -= K[0] * P00_temp;
 8003c0a:	eeb0 6b45 	vmov.f64	d6, d5
 8003c0e:	ee05 6b49 	vmls.f64	d6, d5, d9
 8003c12:	ed80 6b0a 	vstr	d6, [r0, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8003c16:	eeb0 6b43 	vmov.f64	d6, d3
 8003c1a:	ee03 6b49 	vmls.f64	d6, d3, d9
 8003c1e:	ed80 6b0c 	vstr	d6, [r0, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8003c22:	ee05 7b41 	vmls.f64	d7, d5, d1
 8003c26:	ed80 7b0e 	vstr	d7, [r0, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8003c2a:	ee03 4b41 	vmls.f64	d4, d3, d1
 8003c2e:	ed80 4b10 	vstr	d4, [r0, #64]	; 0x40

    return Kalman->angle;
};
 8003c32:	b004      	add	sp, #16
 8003c34:	ecbd 8b04 	vpop	{d8-d9}
 8003c38:	4770      	bx	lr
 8003c3a:	0000      	movs	r0, r0
 8003c3c:	0000      	movs	r0, r0
	...

08003c40 <MPU6050_Read_All>:
{
 8003c40:	b570      	push	{r4, r5, r6, lr}
 8003c42:	ed2d 8b04 	vpush	{d8-d9}
 8003c46:	b088      	sub	sp, #32
 8003c48:	460c      	mov	r4, r1
    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8003c4a:	2364      	movs	r3, #100	; 0x64
 8003c4c:	9302      	str	r3, [sp, #8]
 8003c4e:	230e      	movs	r3, #14
 8003c50:	9301      	str	r3, [sp, #4]
 8003c52:	ab04      	add	r3, sp, #16
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	2301      	movs	r3, #1
 8003c58:	223b      	movs	r2, #59	; 0x3b
 8003c5a:	21d0      	movs	r1, #208	; 0xd0
 8003c5c:	f001 fe18 	bl	8005890 <HAL_I2C_Mem_Read>
    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8003c60:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8003c64:	f89d 2011 	ldrb.w	r2, [sp, #17]
 8003c68:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003c6c:	b212      	sxth	r2, r2
 8003c6e:	8022      	strh	r2, [r4, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8003c70:	f89d 1012 	ldrb.w	r1, [sp, #18]
 8003c74:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8003c78:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003c7c:	b21b      	sxth	r3, r3
 8003c7e:	8063      	strh	r3, [r4, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8003c80:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8003c84:	f89d 5015 	ldrb.w	r5, [sp, #21]
 8003c88:	ea45 2501 	orr.w	r5, r5, r1, lsl #8
 8003c8c:	b22d      	sxth	r5, r5
 8003c8e:	80a5      	strh	r5, [r4, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8003c90:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8003c94:	0209      	lsls	r1, r1, #8
 8003c96:	b209      	sxth	r1, r1
 8003c98:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8003c9c:	4301      	orrs	r1, r0
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8003c9e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8003ca2:	f89d e019 	ldrb.w	lr, [sp, #25]
 8003ca6:	ea4e 2e00 	orr.w	lr, lr, r0, lsl #8
 8003caa:	fa0f fe8e 	sxth.w	lr, lr
 8003cae:	f8a4 e020 	strh.w	lr, [r4, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8003cb2:	f89d 001a 	ldrb.w	r0, [sp, #26]
 8003cb6:	f89d c01b 	ldrb.w	ip, [sp, #27]
 8003cba:	ea4c 2c00 	orr.w	ip, ip, r0, lsl #8
 8003cbe:	fa0f fc8c 	sxth.w	ip, ip
 8003cc2:	f8a4 c022 	strh.w	ip, [r4, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8003cc6:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8003cca:	f89d 001d 	ldrb.w	r0, [sp, #29]
 8003cce:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 8003cd2:	b200      	sxth	r0, r0
 8003cd4:	84a0      	strh	r0, [r4, #36]	; 0x24
    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8003cd6:	ee07 2a90 	vmov	s15, r2
 8003cda:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003cde:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8003e88 <MPU6050_Read_All+0x248>
 8003ce2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003ce6:	ed84 7b02 	vstr	d7, [r4, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8003cea:	ee07 3a90 	vmov	s15, r3
 8003cee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003cf2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003cf6:	ed84 7b04 	vstr	d7, [r4, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8003cfa:	ee07 5a90 	vmov	s15, r5
 8003cfe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003d02:	ed9f 5b63 	vldr	d5, [pc, #396]	; 8003e90 <MPU6050_Read_All+0x250>
 8003d06:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8003d0a:	ed84 6b06 	vstr	d6, [r4, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8003d0e:	ee07 1a90 	vmov	s15, r1
 8003d12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d16:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8003ec8 <MPU6050_Read_All+0x288>
 8003d1a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003d1e:	eddf 7a6b 	vldr	s15, [pc, #428]	; 8003ecc <MPU6050_Read_All+0x28c>
 8003d22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d26:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8003d2a:	ee07 ea90 	vmov	s15, lr
 8003d2e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003d32:	ed9f 6b59 	vldr	d6, [pc, #356]	; 8003e98 <MPU6050_Read_All+0x258>
 8003d36:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8003d3a:	ed84 5b0a 	vstr	d5, [r4, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8003d3e:	ee07 ca90 	vmov	s15, ip
 8003d42:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003d46:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8003d4a:	ed84 5b0c 	vstr	d5, [r4, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8003d4e:	ee07 0a90 	vmov	s15, r0
 8003d52:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003d56:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8003d5a:	ed84 5b0e 	vstr	d5, [r4, #56]	; 0x38
    double dt = (double)(xTaskGetTickCount() - timer) / 1000;
 8003d5e:	f7fe fa69 	bl	8002234 <xTaskGetTickCount>
 8003d62:	4d5b      	ldr	r5, [pc, #364]	; (8003ed0 <MPU6050_Read_All+0x290>)
 8003d64:	682b      	ldr	r3, [r5, #0]
 8003d66:	1ac0      	subs	r0, r0, r3
 8003d68:	ee07 0a90 	vmov	s15, r0
 8003d6c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003d70:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 8003ea0 <MPU6050_Read_All+0x260>
 8003d74:	ee87 8b06 	vdiv.f64	d8, d7, d6
    timer = xTaskGetTickCount();
 8003d78:	f7fe fa5c 	bl	8002234 <xTaskGetTickCount>
 8003d7c:	6028      	str	r0, [r5, #0]
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8003d7e:	f9b4 5000 	ldrsh.w	r5, [r4]
 8003d82:	f9b4 6004 	ldrsh.w	r6, [r4, #4]
 8003d86:	fb06 f306 	mul.w	r3, r6, r6
 8003d8a:	fb05 3305 	mla	r3, r5, r5, r3
 8003d8e:	ee00 3a10 	vmov	s0, r3
    double roll_sqrt = sqrt(
 8003d92:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 8003d96:	f005 fa5f 	bl	8009258 <sqrt>
    if (roll_sqrt != 0.0)
 8003d9a:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8003d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003da2:	d061      	beq.n	8003e68 <MPU6050_Read_All+0x228>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8003da4:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8003da8:	ee07 3a10 	vmov	s14, r3
 8003dac:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8003db0:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8003db4:	f005 fa70 	bl	8009298 <atan>
 8003db8:	ed9f 9b3b 	vldr	d9, [pc, #236]	; 8003ea8 <MPU6050_Read_All+0x268>
 8003dbc:	ee20 9b09 	vmul.f64	d9, d0, d9
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8003dc0:	426b      	negs	r3, r5
 8003dc2:	ee00 3a10 	vmov	s0, r3
 8003dc6:	ee07 6a90 	vmov	s15, r6
 8003dca:	eeb8 1be7 	vcvt.f64.s32	d1, s15
 8003dce:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 8003dd2:	f005 fa3c 	bl	800924e <atan2>
 8003dd6:	ed9f 7b34 	vldr	d7, [pc, #208]	; 8003ea8 <MPU6050_Read_All+0x268>
 8003dda:	ee20 0b07 	vmul.f64	d0, d0, d7
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8003dde:	ed9f 7b34 	vldr	d7, [pc, #208]	; 8003eb0 <MPU6050_Read_All+0x270>
 8003de2:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8003de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dea:	d508      	bpl.n	8003dfe <MPU6050_Read_All+0x1be>
 8003dec:	ed94 6b14 	vldr	d6, [r4, #80]	; 0x50
 8003df0:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8003eb8 <MPU6050_Read_All+0x278>
 8003df4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dfc:	dc0f      	bgt.n	8003e1e <MPU6050_Read_All+0x1de>
 8003dfe:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8003eb8 <MPU6050_Read_All+0x278>
 8003e02:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8003e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e0a:	dd30      	ble.n	8003e6e <MPU6050_Read_All+0x22e>
 8003e0c:	ed94 6b14 	vldr	d6, [r4, #80]	; 0x50
 8003e10:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8003eb0 <MPU6050_Read_All+0x270>
 8003e14:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e1c:	d527      	bpl.n	8003e6e <MPU6050_Read_All+0x22e>
        KalmanY.angle = pitch;
 8003e1e:	4b2d      	ldr	r3, [pc, #180]	; (8003ed4 <MPU6050_Read_All+0x294>)
 8003e20:	ed83 0b06 	vstr	d0, [r3, #24]
        DataStruct->KalmanAngleY = pitch;
 8003e24:	ed84 0b14 	vstr	d0, [r4, #80]	; 0x50
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8003e28:	ed94 7b14 	vldr	d7, [r4, #80]	; 0x50
 8003e2c:	eeb0 7bc7 	vabs.f64	d7, d7
 8003e30:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8003eb8 <MPU6050_Read_All+0x278>
 8003e34:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e3c:	dd05      	ble.n	8003e4a <MPU6050_Read_All+0x20a>
        DataStruct->Gx = -DataStruct->Gx;
 8003e3e:	ed94 7b0a 	vldr	d7, [r4, #40]	; 0x28
 8003e42:	eeb1 7b47 	vneg.f64	d7, d7
 8003e46:	ed84 7b0a 	vstr	d7, [r4, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8003e4a:	eeb0 2b48 	vmov.f64	d2, d8
 8003e4e:	ed94 1b0a 	vldr	d1, [r4, #40]	; 0x28
 8003e52:	eeb0 0b49 	vmov.f64	d0, d9
 8003e56:	4820      	ldr	r0, [pc, #128]	; (8003ed8 <MPU6050_Read_All+0x298>)
 8003e58:	f7ff fe8e 	bl	8003b78 <Kalman_getAngle>
 8003e5c:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
}
 8003e60:	b008      	add	sp, #32
 8003e62:	ecbd 8b04 	vpop	{d8-d9}
 8003e66:	bd70      	pop	{r4, r5, r6, pc}
        roll = 0.0;
 8003e68:	ed9f 9b15 	vldr	d9, [pc, #84]	; 8003ec0 <MPU6050_Read_All+0x280>
 8003e6c:	e7a8      	b.n	8003dc0 <MPU6050_Read_All+0x180>
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8003e6e:	eeb0 2b48 	vmov.f64	d2, d8
 8003e72:	ed94 1b0c 	vldr	d1, [r4, #48]	; 0x30
 8003e76:	4817      	ldr	r0, [pc, #92]	; (8003ed4 <MPU6050_Read_All+0x294>)
 8003e78:	f7ff fe7e 	bl	8003b78 <Kalman_getAngle>
 8003e7c:	ed84 0b14 	vstr	d0, [r4, #80]	; 0x50
 8003e80:	e7d2      	b.n	8003e28 <MPU6050_Read_All+0x1e8>
 8003e82:	bf00      	nop
 8003e84:	f3af 8000 	nop.w
 8003e88:	00000000 	.word	0x00000000
 8003e8c:	3f100000 	.word	0x3f100000
 8003e90:	00000000 	.word	0x00000000
 8003e94:	40cc2900 	.word	0x40cc2900
 8003e98:	00000000 	.word	0x00000000
 8003e9c:	40606000 	.word	0x40606000
 8003ea0:	00000000 	.word	0x00000000
 8003ea4:	408f4000 	.word	0x408f4000
 8003ea8:	1a63c1f8 	.word	0x1a63c1f8
 8003eac:	404ca5dc 	.word	0x404ca5dc
 8003eb0:	00000000 	.word	0x00000000
 8003eb4:	c0568000 	.word	0xc0568000
 8003eb8:	00000000 	.word	0x00000000
 8003ebc:	40568000 	.word	0x40568000
	...
 8003ec8:	43aa0000 	.word	0x43aa0000
 8003ecc:	42121eb8 	.word	0x42121eb8
 8003ed0:	200050e8 	.word	0x200050e8
 8003ed4:	20000018 	.word	0x20000018
 8003ed8:	20000060 	.word	0x20000060

08003edc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003edc:	b500      	push	{lr}
 8003ede:	b089      	sub	sp, #36	; 0x24
 8003ee0:	4601      	mov	r1, r0
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	2037      	movs	r0, #55	; 0x37
 8003ee6:	f000 f93f 	bl	8004168 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003eea:	2037      	movs	r0, #55	; 0x37
 8003eec:	f000 f972 	bl	80041d4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8003ef0:	4b15      	ldr	r3, [pc, #84]	; (8003f48 <HAL_InitTick+0x6c>)
 8003ef2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ef4:	f042 0220 	orr.w	r2, r2, #32
 8003ef8:	641a      	str	r2, [r3, #64]	; 0x40
 8003efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efc:	f003 0320 	and.w	r3, r3, #32
 8003f00:	9301      	str	r3, [sp, #4]
 8003f02:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003f04:	a902      	add	r1, sp, #8
 8003f06:	a803      	add	r0, sp, #12
 8003f08:	f002 fb3a 	bl	8006580 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003f0c:	f002 fb18 	bl	8006540 <HAL_RCC_GetPCLK1Freq>
 8003f10:	0043      	lsls	r3, r0, #1

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003f12:	4a0e      	ldr	r2, [pc, #56]	; (8003f4c <HAL_InitTick+0x70>)
 8003f14:	fba2 2303 	umull	r2, r3, r2, r3
 8003f18:	0c9b      	lsrs	r3, r3, #18
 8003f1a:	3b01      	subs	r3, #1

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8003f1c:	480c      	ldr	r0, [pc, #48]	; (8003f50 <HAL_InitTick+0x74>)
 8003f1e:	4a0d      	ldr	r2, [pc, #52]	; (8003f54 <HAL_InitTick+0x78>)
 8003f20:	6002      	str	r2, [r0, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8003f22:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003f26:	60c2      	str	r2, [r0, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8003f28:	6043      	str	r3, [r0, #4]
  htim7.Init.ClockDivision = 0;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	6103      	str	r3, [r0, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f2e:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8003f30:	f003 f842 	bl	8006fb8 <HAL_TIM_Base_Init>
 8003f34:	b118      	cbz	r0, 8003f3e <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
  }

  /* Return function status */
  return HAL_ERROR;
 8003f36:	2001      	movs	r0, #1
}
 8003f38:	b009      	add	sp, #36	; 0x24
 8003f3a:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim7);
 8003f3e:	4804      	ldr	r0, [pc, #16]	; (8003f50 <HAL_InitTick+0x74>)
 8003f40:	f002 fe98 	bl	8006c74 <HAL_TIM_Base_Start_IT>
 8003f44:	e7f8      	b.n	8003f38 <HAL_InitTick+0x5c>
 8003f46:	bf00      	nop
 8003f48:	40023800 	.word	0x40023800
 8003f4c:	431bde83 	.word	0x431bde83
 8003f50:	200050ec 	.word	0x200050ec
 8003f54:	40001400 	.word	0x40001400

08003f58 <TIM7_IRQHandler>:
  /* Enable TIM7 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim7, TIM_IT_UPDATE);
}

void TIM7_IRQHandler(void)
{
 8003f58:	b508      	push	{r3, lr}
  HAL_TIM_IRQHandler(&htim7);
 8003f5a:	4802      	ldr	r0, [pc, #8]	; (8003f64 <TIM7_IRQHandler+0xc>)
 8003f5c:	f002 fed7 	bl	8006d0e <HAL_TIM_IRQHandler>
}
 8003f60:	bd08      	pop	{r3, pc}
 8003f62:	bf00      	nop
 8003f64:	200050ec 	.word	0x200050ec

08003f68 <HAL_UART_MspInit>:

UART_HandleTypeDef USB_UART;
// Initialize Hardware Resources
// Peripheral's clock enable
// Peripheral's GPIO Configuration
void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 8003f68:	b530      	push	{r4, r5, lr}
 8003f6a:	b08b      	sub	sp, #44	; 0x2c
	GPIO_InitTypeDef  GPIO_InitStruct;

	if (huart->Instance == USART1) {
 8003f6c:	6803      	ldr	r3, [r0, #0]
 8003f6e:	4a32      	ldr	r2, [pc, #200]	; (8004038 <HAL_UART_MspInit+0xd0>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d004      	beq.n	8003f7e <HAL_UART_MspInit+0x16>
		
		// Enable Interrupt Mode
		HAL_NVIC_SetPriority(USART1_IRQn, 10, 0);
		HAL_NVIC_EnableIRQ(USART1_IRQn);

	} else if (huart->Instance == USART6) {
 8003f74:	4a31      	ldr	r2, [pc, #196]	; (800403c <HAL_UART_MspInit+0xd4>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d034      	beq.n	8003fe4 <HAL_UART_MspInit+0x7c>

		// Enable UART Clocking
		__USART6_CLK_ENABLE();

	}
}
 8003f7a:	b00b      	add	sp, #44	; 0x2c
 8003f7c:	bd30      	pop	{r4, r5, pc}
		__GPIOA_CLK_ENABLE();
 8003f7e:	4c30      	ldr	r4, [pc, #192]	; (8004040 <HAL_UART_MspInit+0xd8>)
 8003f80:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003f82:	f043 0301 	orr.w	r3, r3, #1
 8003f86:	6323      	str	r3, [r4, #48]	; 0x30
 8003f88:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	9301      	str	r3, [sp, #4]
 8003f90:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin       = GPIO_PIN_9;
 8003f92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f96:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8003f98:	2302      	movs	r3, #2
 8003f9a:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003fa4:	2307      	movs	r3, #7
 8003fa6:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //TX Config
 8003fa8:	4d26      	ldr	r5, [pc, #152]	; (8004044 <HAL_UART_MspInit+0xdc>)
 8003faa:	a905      	add	r1, sp, #20
 8003fac:	4628      	mov	r0, r5
 8003fae:	f001 f87d 	bl	80050ac <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003fb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fb6:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config
 8003fb8:	a905      	add	r1, sp, #20
 8003fba:	4628      	mov	r0, r5
 8003fbc:	f001 f876 	bl	80050ac <HAL_GPIO_Init>
		__USART1_CLK_ENABLE();
 8003fc0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003fc2:	f043 0310 	orr.w	r3, r3, #16
 8003fc6:	6463      	str	r3, [r4, #68]	; 0x44
 8003fc8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003fca:	f003 0310 	and.w	r3, r3, #16
 8003fce:	9302      	str	r3, [sp, #8]
 8003fd0:	9b02      	ldr	r3, [sp, #8]
		HAL_NVIC_SetPriority(USART1_IRQn, 10, 0);
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	210a      	movs	r1, #10
 8003fd6:	2025      	movs	r0, #37	; 0x25
 8003fd8:	f000 f8c6 	bl	8004168 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003fdc:	2025      	movs	r0, #37	; 0x25
 8003fde:	f000 f8f9 	bl	80041d4 <HAL_NVIC_EnableIRQ>
 8003fe2:	e7ca      	b.n	8003f7a <HAL_UART_MspInit+0x12>
		__GPIOC_CLK_ENABLE();
 8003fe4:	4c16      	ldr	r4, [pc, #88]	; (8004040 <HAL_UART_MspInit+0xd8>)
 8003fe6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003fe8:	f043 0304 	orr.w	r3, r3, #4
 8003fec:	6323      	str	r3, [r4, #48]	; 0x30
 8003fee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003ff0:	f003 0304 	and.w	r3, r3, #4
 8003ff4:	9303      	str	r3, [sp, #12]
 8003ff6:	9b03      	ldr	r3, [sp, #12]
		GPIO_InitStruct.Pin       = GPIO_PIN_6;
 8003ff8:	2340      	movs	r3, #64	; 0x40
 8003ffa:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8004000:	2301      	movs	r3, #1
 8004002:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8004004:	2303      	movs	r3, #3
 8004006:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004008:	2308      	movs	r3, #8
 800400a:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //TX Config
 800400c:	4d0e      	ldr	r5, [pc, #56]	; (8004048 <HAL_UART_MspInit+0xe0>)
 800400e:	a905      	add	r1, sp, #20
 8004010:	4628      	mov	r0, r5
 8004012:	f001 f84b 	bl	80050ac <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004016:	2380      	movs	r3, #128	; 0x80
 8004018:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //RX Config
 800401a:	a905      	add	r1, sp, #20
 800401c:	4628      	mov	r0, r5
 800401e:	f001 f845 	bl	80050ac <HAL_GPIO_Init>
		__USART6_CLK_ENABLE();
 8004022:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004024:	f043 0320 	orr.w	r3, r3, #32
 8004028:	6463      	str	r3, [r4, #68]	; 0x44
 800402a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800402c:	f003 0320 	and.w	r3, r3, #32
 8004030:	9304      	str	r3, [sp, #16]
 8004032:	9b04      	ldr	r3, [sp, #16]
}
 8004034:	e7a1      	b.n	8003f7a <HAL_UART_MspInit+0x12>
 8004036:	bf00      	nop
 8004038:	40011000 	.word	0x40011000
 800403c:	40011400 	.word	0x40011400
 8004040:	40023800 	.word	0x40023800
 8004044:	40020000 	.word	0x40020000
 8004048:	40020800 	.word	0x40020800

0800404c <initUart>:

//UART Initialization
void initUart(UART_HandleTypeDef* Uhand, uint32_t Baud, USART_TypeDef* Tgt) {
 800404c:	b508      	push	{r3, lr}
	Uhand->Instance        = Tgt;
 800404e:	6002      	str	r2, [r0, #0]

	Uhand->Init.BaudRate   = Baud;
 8004050:	6041      	str	r1, [r0, #4]
	Uhand->Init.WordLength = UART_WORDLENGTH_8B;
 8004052:	2200      	movs	r2, #0
 8004054:	6082      	str	r2, [r0, #8]
	Uhand->Init.StopBits   = UART_STOPBITS_1;
 8004056:	60c2      	str	r2, [r0, #12]
	Uhand->Init.Parity     = UART_PARITY_NONE;
 8004058:	6102      	str	r2, [r0, #16]
	Uhand->Init.Mode       = UART_MODE_TX_RX;
 800405a:	210c      	movs	r1, #12
 800405c:	6141      	str	r1, [r0, #20]
	Uhand->Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800405e:	6182      	str	r2, [r0, #24]

	HAL_UART_Init(Uhand);
 8004060:	f003 fe4c 	bl	8007cfc <HAL_UART_Init>
}
 8004064:	bd08      	pop	{r3, pc}
	...

08004068 <_write>:

============================================================================= */


// Make printf(), putchar(), etc. default to work over USB UART
int _write(int file, char *ptr, int len) {
 8004068:	b510      	push	{r4, lr}
 800406a:	4614      	mov	r4, r2
	// HAL_UART_Transmit(&USB_UART, (uint8_t*) ptr, len, 1000);
	HAL_UART_Transmit_IT(&USB_UART, (uint8_t*) ptr, len);
 800406c:	b292      	uxth	r2, r2
 800406e:	4802      	ldr	r0, [pc, #8]	; (8004078 <_write+0x10>)
 8004070:	f003 f860 	bl	8007134 <HAL_UART_Transmit_IT>
	return len;
}
 8004074:	4620      	mov	r0, r4
 8004076:	bd10      	pop	{r4, pc}
 8004078:	20005138 	.word	0x20005138

0800407c <_read>:

// Make scanf(), getchar(), etc. default to work over USB UART
int _read(int file, char *ptr, int len) {
 800407c:	b508      	push	{r3, lr}
	*ptr = 0x00; // Clear the character buffer because scanf() is finicky
 800407e:	2200      	movs	r2, #0
 8004080:	700a      	strb	r2, [r1, #0]
	len = 1; // Again because of scanf's finickiness, len must = 1
	HAL_UART_Receive(&USB_UART, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8004082:	f04f 33ff 	mov.w	r3, #4294967295
 8004086:	2201      	movs	r2, #1
 8004088:	4802      	ldr	r0, [pc, #8]	; (8004094 <_read+0x18>)
 800408a:	f003 fd76 	bl	8007b7a <HAL_UART_Receive>
	return len;
}
 800408e:	2001      	movs	r0, #1
 8004090:	bd08      	pop	{r3, pc}
 8004092:	bf00      	nop
 8004094:	20005138 	.word	0x20005138

08004098 <_lseek>:
	}
  return i; // The way this is set up, it will always report the wrong size
}

// These functions need to be defined for compiler version gcc-arm version 11.3__attribute__((weak)) void _close(void){}
__attribute__((weak)) void _lseek(void){}
 8004098:	4770      	bx	lr

0800409a <_fstat>:
__attribute__((weak)) void _fstat(void){}
 800409a:	4770      	bx	lr

0800409c <_isatty>:
__attribute__((weak)) void _getpid(void){}
__attribute__((weak)) void _ispid(void){}
__attribute__((weak)) void _kill(void){}
__attribute__((weak)) void _isatty(void){}
 800409c:	4770      	bx	lr
	...

080040a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80040a0:	480d      	ldr	r0, [pc, #52]	; (80040d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80040a2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 80040a4:	480d      	ldr	r0, [pc, #52]	; (80040dc <LoopForever+0x6>)
  ldr r1, =_edata
 80040a6:	490e      	ldr	r1, [pc, #56]	; (80040e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80040a8:	4a0e      	ldr	r2, [pc, #56]	; (80040e4 <LoopForever+0xe>)
  movs r3, #0
 80040aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80040ac:	e002      	b.n	80040b4 <LoopCopyDataInit>

080040ae <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 80040ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040b2:	3304      	adds	r3, #4

080040b4 <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 80040b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040b6:	428c      	cmp	r4, r1



  bcc CopyDataInit
 80040b8:	d3f9      	bcc.n	80040ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040ba:	4a0b      	ldr	r2, [pc, #44]	; (80040e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80040bc:	4c0b      	ldr	r4, [pc, #44]	; (80040ec <LoopForever+0x16>)
  movs r3, #0
 80040be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040c0:	e001      	b.n	80040c6 <LoopFillZerobss>

080040c2 <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 80040c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040c4:	3204      	adds	r2, #4

080040c6 <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 80040c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80040c8:	d3fb      	bcc.n	80040c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80040ca:	f000 f813 	bl	80040f4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80040ce:	f004 f933 	bl	8008338 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80040d2:	f7ff f8b9 	bl	8003248 <main>

080040d6 <LoopForever>:

LoopForever:
    b LoopForever
 80040d6:	e7fe      	b.n	80040d6 <LoopForever>
  ldr   r0, =_estack
 80040d8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80040dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80040e0:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 80040e4:	0800b400 	.word	0x0800b400
  ldr r2, =_sbss
 80040e8:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 80040ec:	20005314 	.word	0x20005314

080040f0 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80040f0:	e7fe      	b.n	80040f0 <ADC_IRQHandler>
	...

080040f4 <SystemInit>:
 * @retval None
 */
void SystemInit(void) {
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 80040f4:	4a03      	ldr	r2, [pc, #12]	; (8004104 <SystemInit+0x10>)
 80040f6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80040fa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80040fe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004102:	4770      	bx	lr
 8004104:	e000ed00 	.word	0xe000ed00

08004108 <HAL_MspInit>:
 */
__weak void HAL_MspInit(void) {
	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_MspInit could be implemented in the user file
	 */
}
 8004108:	4770      	bx	lr
	...

0800410c <HAL_Init>:
HAL_StatusTypeDef HAL_Init(void) {
 800410c:	b508      	push	{r3, lr}
  __HAL_FLASH_ART_ENABLE();
 800410e:	4b09      	ldr	r3, [pc, #36]	; (8004134 <HAL_Init+0x28>)
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004116:	601a      	str	r2, [r3, #0]
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800411e:	601a      	str	r2, [r3, #0]
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004120:	2003      	movs	r0, #3
 8004122:	f000 f80f 	bl	8004144 <HAL_NVIC_SetPriorityGrouping>
	HAL_InitTick(TICK_INT_PRIORITY);
 8004126:	200f      	movs	r0, #15
 8004128:	f7ff fed8 	bl	8003edc <HAL_InitTick>
	HAL_MspInit();
 800412c:	f7ff ffec 	bl	8004108 <HAL_MspInit>
}
 8004130:	2000      	movs	r0, #0
 8004132:	bd08      	pop	{r3, pc}
 8004134:	40023c00 	.word	0x40023c00

08004138 <HAL_GetTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
 *       implementations in user file.
 * @retval tick value
 */
__weak uint32_t HAL_GetTick(void) {
	return uwTick;
 8004138:	4b01      	ldr	r3, [pc, #4]	; (8004140 <HAL_GetTick+0x8>)
 800413a:	6818      	ldr	r0, [r3, #0]
}
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	200051c0 	.word	0x200051c0

08004144 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004144:	4906      	ldr	r1, [pc, #24]	; (8004160 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8004146:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004148:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800414c:	041b      	lsls	r3, r3, #16
 800414e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004150:	0200      	lsls	r0, r0, #8
 8004152:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004156:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8004158:	4a02      	ldr	r2, [pc, #8]	; (8004164 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800415a:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 800415c:	60ca      	str	r2, [r1, #12]
	/* Check the parameters */
	assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

	/* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
	NVIC_SetPriorityGrouping(PriorityGroup);
}
 800415e:	4770      	bx	lr
 8004160:	e000ed00 	.word	0xe000ed00
 8004164:	05fa0000 	.word	0x05fa0000

08004168 <HAL_NVIC_SetPriority>:
 *         This parameter can be a value between 0 and 15
 *         A lower priority value indicates a higher priority.          
 * @retval None
 */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority,
		uint32_t SubPriority) {
 8004168:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800416a:	4b17      	ldr	r3, [pc, #92]	; (80041c8 <HAL_NVIC_SetPriority+0x60>)
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004172:	f1c3 0c07 	rsb	ip, r3, #7
 8004176:	f1bc 0f04 	cmp.w	ip, #4
 800417a:	bf28      	it	cs
 800417c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004180:	f103 0e04 	add.w	lr, r3, #4
 8004184:	f1be 0f06 	cmp.w	lr, #6
 8004188:	d914      	bls.n	80041b4 <HAL_NVIC_SetPriority+0x4c>
 800418a:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800418c:	f04f 3eff 	mov.w	lr, #4294967295
 8004190:	fa0e fc0c 	lsl.w	ip, lr, ip
 8004194:	ea21 010c 	bic.w	r1, r1, ip
 8004198:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800419a:	fa0e fe03 	lsl.w	lr, lr, r3
 800419e:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041a2:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 80041a4:	2800      	cmp	r0, #0
 80041a6:	db07      	blt.n	80041b8 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041a8:	0112      	lsls	r2, r2, #4
 80041aa:	b2d2      	uxtb	r2, r2
 80041ac:	4b07      	ldr	r3, [pc, #28]	; (80041cc <HAL_NVIC_SetPriority+0x64>)
 80041ae:	541a      	strb	r2, [r3, r0]

	prioritygroup = NVIC_GetPriorityGrouping();

	NVIC_SetPriority(IRQn,
			NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80041b0:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041b4:	2300      	movs	r3, #0
 80041b6:	e7e9      	b.n	800418c <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041b8:	f000 000f 	and.w	r0, r0, #15
 80041bc:	0112      	lsls	r2, r2, #4
 80041be:	b2d2      	uxtb	r2, r2
 80041c0:	4b03      	ldr	r3, [pc, #12]	; (80041d0 <HAL_NVIC_SetPriority+0x68>)
 80041c2:	541a      	strb	r2, [r3, r0]
 80041c4:	e7f4      	b.n	80041b0 <HAL_NVIC_SetPriority+0x48>
 80041c6:	bf00      	nop
 80041c8:	e000ed00 	.word	0xe000ed00
 80041cc:	e000e400 	.word	0xe000e400
 80041d0:	e000ed14 	.word	0xe000ed14

080041d4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80041d4:	2800      	cmp	r0, #0
 80041d6:	db07      	blt.n	80041e8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041d8:	f000 021f 	and.w	r2, r0, #31
 80041dc:	0940      	lsrs	r0, r0, #5
 80041de:	2301      	movs	r3, #1
 80041e0:	4093      	lsls	r3, r2
 80041e2:	4a02      	ldr	r2, [pc, #8]	; (80041ec <HAL_NVIC_EnableIRQ+0x18>)
 80041e4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
	/* Check the parameters */
	assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

	/* Enable interrupt */
	NVIC_EnableIRQ(IRQn);
}
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	e000e100 	.word	0xe000e100

080041f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041f0:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80041f2:	6805      	ldr	r5, [r0, #0]
 80041f4:	682c      	ldr	r4, [r5, #0]
 80041f6:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 80041fa:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80041fc:	6804      	ldr	r4, [r0, #0]
 80041fe:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004200:	6883      	ldr	r3, [r0, #8]
 8004202:	2b40      	cmp	r3, #64	; 0x40
 8004204:	d005      	beq.n	8004212 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8004206:	6803      	ldr	r3, [r0, #0]
 8004208:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 800420a:	6803      	ldr	r3, [r0, #0]
 800420c:	60da      	str	r2, [r3, #12]
  }
}
 800420e:	bc30      	pop	{r4, r5}
 8004210:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8004212:	6803      	ldr	r3, [r0, #0]
 8004214:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8004216:	6803      	ldr	r3, [r0, #0]
 8004218:	60d9      	str	r1, [r3, #12]
 800421a:	e7f8      	b.n	800420e <DMA_SetConfig+0x1e>

0800421c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800421c:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800421e:	6801      	ldr	r1, [r0, #0]
 8004220:	b2ca      	uxtb	r2, r1
 8004222:	3a10      	subs	r2, #16
 8004224:	4b0a      	ldr	r3, [pc, #40]	; (8004250 <DMA_CalcBaseAndBitshift+0x34>)
 8004226:	fba3 4302 	umull	r4, r3, r3, r2
 800422a:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800422c:	4c09      	ldr	r4, [pc, #36]	; (8004254 <DMA_CalcBaseAndBitshift+0x38>)
 800422e:	5ce3      	ldrb	r3, [r4, r3]
 8004230:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004232:	2a5f      	cmp	r2, #95	; 0x5f
 8004234:	d907      	bls.n	8004246 <DMA_CalcBaseAndBitshift+0x2a>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004236:	4b08      	ldr	r3, [pc, #32]	; (8004258 <DMA_CalcBaseAndBitshift+0x3c>)
 8004238:	400b      	ands	r3, r1
 800423a:	3304      	adds	r3, #4
 800423c:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 800423e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8004240:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004244:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004246:	4b04      	ldr	r3, [pc, #16]	; (8004258 <DMA_CalcBaseAndBitshift+0x3c>)
 8004248:	400b      	ands	r3, r1
 800424a:	6583      	str	r3, [r0, #88]	; 0x58
 800424c:	e7f7      	b.n	800423e <DMA_CalcBaseAndBitshift+0x22>
 800424e:	bf00      	nop
 8004250:	aaaaaaab 	.word	0xaaaaaaab
 8004254:	0800b208 	.word	0x0800b208
 8004258:	fffffc00 	.word	0xfffffc00

0800425c <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800425c:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800425e:	6982      	ldr	r2, [r0, #24]
 8004260:	b992      	cbnz	r2, 8004288 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8004262:	2b01      	cmp	r3, #1
 8004264:	d00a      	beq.n	800427c <DMA_CheckFifoParam+0x20>
 8004266:	2b02      	cmp	r3, #2
 8004268:	d002      	beq.n	8004270 <DMA_CheckFifoParam+0x14>
 800426a:	b10b      	cbz	r3, 8004270 <DMA_CheckFifoParam+0x14>
 800426c:	2000      	movs	r0, #0
 800426e:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004270:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004272:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004276:	d128      	bne.n	80042ca <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8004278:	2000      	movs	r0, #0
 800427a:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800427c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800427e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004282:	d024      	beq.n	80042ce <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8004284:	2000      	movs	r0, #0
 8004286:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004288:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800428c:	d009      	beq.n	80042a2 <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800428e:	2b02      	cmp	r3, #2
 8004290:	d925      	bls.n	80042de <DMA_CheckFifoParam+0x82>
 8004292:	2b03      	cmp	r3, #3
 8004294:	d125      	bne.n	80042e2 <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004296:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004298:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800429c:	d123      	bne.n	80042e6 <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 800429e:	2000      	movs	r0, #0
 80042a0:	4770      	bx	lr
    switch (tmp)
 80042a2:	2b03      	cmp	r3, #3
 80042a4:	d803      	bhi.n	80042ae <DMA_CheckFifoParam+0x52>
 80042a6:	e8df f003 	tbb	[pc, r3]
 80042aa:	0414      	.short	0x0414
 80042ac:	0a14      	.short	0x0a14
 80042ae:	2000      	movs	r0, #0
 80042b0:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042b2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80042b4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80042b8:	d10d      	bne.n	80042d6 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 80042ba:	2000      	movs	r0, #0
 80042bc:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042be:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80042c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042c4:	d009      	beq.n	80042da <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 80042c6:	2000      	movs	r0, #0
 80042c8:	4770      	bx	lr
        status = HAL_ERROR;
 80042ca:	2001      	movs	r0, #1
 80042cc:	4770      	bx	lr
        status = HAL_ERROR;
 80042ce:	2001      	movs	r0, #1
 80042d0:	4770      	bx	lr
      status = HAL_ERROR;
 80042d2:	2001      	movs	r0, #1
 80042d4:	4770      	bx	lr
        status = HAL_ERROR;
 80042d6:	2001      	movs	r0, #1
 80042d8:	4770      	bx	lr
        status = HAL_ERROR;
 80042da:	2001      	movs	r0, #1
 80042dc:	4770      	bx	lr
      status = HAL_ERROR;
 80042de:	2001      	movs	r0, #1
 80042e0:	4770      	bx	lr
    switch (tmp)
 80042e2:	2000      	movs	r0, #0
 80042e4:	4770      	bx	lr
      {
        status = HAL_ERROR;
 80042e6:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 80042e8:	4770      	bx	lr
	...

080042ec <HAL_DMA_Init>:
{
 80042ec:	b570      	push	{r4, r5, r6, lr}
 80042ee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80042f0:	f7ff ff22 	bl	8004138 <HAL_GetTick>
  if(hdma == NULL)
 80042f4:	2c00      	cmp	r4, #0
 80042f6:	d05b      	beq.n	80043b0 <HAL_DMA_Init+0xc4>
 80042f8:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 80042fa:	2302      	movs	r3, #2
 80042fc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8004300:	2300      	movs	r3, #0
 8004302:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8004306:	6822      	ldr	r2, [r4, #0]
 8004308:	6813      	ldr	r3, [r2, #0]
 800430a:	f023 0301 	bic.w	r3, r3, #1
 800430e:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004310:	6823      	ldr	r3, [r4, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	f012 0f01 	tst.w	r2, #1
 8004318:	d00a      	beq.n	8004330 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800431a:	f7ff ff0d 	bl	8004138 <HAL_GetTick>
 800431e:	1b43      	subs	r3, r0, r5
 8004320:	2b05      	cmp	r3, #5
 8004322:	d9f5      	bls.n	8004310 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004324:	2320      	movs	r3, #32
 8004326:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004328:	2003      	movs	r0, #3
 800432a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800432e:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8004330:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004332:	4920      	ldr	r1, [pc, #128]	; (80043b4 <HAL_DMA_Init+0xc8>)
 8004334:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004336:	6862      	ldr	r2, [r4, #4]
 8004338:	68a0      	ldr	r0, [r4, #8]
 800433a:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800433c:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800433e:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004340:	6920      	ldr	r0, [r4, #16]
 8004342:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004344:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004346:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004348:	69a0      	ldr	r0, [r4, #24]
 800434a:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 800434c:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800434e:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8004350:	6a20      	ldr	r0, [r4, #32]
 8004352:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004354:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004356:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004358:	2904      	cmp	r1, #4
 800435a:	d01e      	beq.n	800439a <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 800435c:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 800435e:	6826      	ldr	r6, [r4, #0]
 8004360:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004362:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8004366:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004368:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800436a:	2b04      	cmp	r3, #4
 800436c:	d107      	bne.n	800437e <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 800436e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004370:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004372:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004374:	b11b      	cbz	r3, 800437e <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004376:	4620      	mov	r0, r4
 8004378:	f7ff ff70 	bl	800425c <DMA_CheckFifoParam>
 800437c:	b990      	cbnz	r0, 80043a4 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 800437e:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004380:	4620      	mov	r0, r4
 8004382:	f7ff ff4b 	bl	800421c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004386:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004388:	233f      	movs	r3, #63	; 0x3f
 800438a:	4093      	lsls	r3, r2
 800438c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800438e:	2000      	movs	r0, #0
 8004390:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8004392:	2301      	movs	r3, #1
 8004394:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8004398:	e7c9      	b.n	800432e <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800439a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800439c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800439e:	4301      	orrs	r1, r0
 80043a0:	430a      	orrs	r2, r1
 80043a2:	e7db      	b.n	800435c <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80043a4:	2340      	movs	r3, #64	; 0x40
 80043a6:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80043a8:	2001      	movs	r0, #1
 80043aa:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 80043ae:	e7be      	b.n	800432e <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 80043b0:	2001      	movs	r0, #1
 80043b2:	e7bc      	b.n	800432e <HAL_DMA_Init+0x42>
 80043b4:	e010803f 	.word	0xe010803f

080043b8 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 80043b8:	2800      	cmp	r0, #0
 80043ba:	d02d      	beq.n	8004418 <HAL_DMA_DeInit+0x60>
{
 80043bc:	b538      	push	{r3, r4, r5, lr}
 80043be:	4605      	mov	r5, r0
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80043c0:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
 80043c4:	b2c0      	uxtb	r0, r0
 80043c6:	2802      	cmp	r0, #2
 80043c8:	d025      	beq.n	8004416 <HAL_DMA_DeInit+0x5e>
  __HAL_DMA_DISABLE(hdma);
 80043ca:	682a      	ldr	r2, [r5, #0]
 80043cc:	6813      	ldr	r3, [r2, #0]
 80043ce:	f023 0301 	bic.w	r3, r3, #1
 80043d2:	6013      	str	r3, [r2, #0]
  hdma->Instance->CR   = 0U;
 80043d4:	682b      	ldr	r3, [r5, #0]
 80043d6:	2400      	movs	r4, #0
 80043d8:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 80043da:	682b      	ldr	r3, [r5, #0]
 80043dc:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 80043de:	682b      	ldr	r3, [r5, #0]
 80043e0:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 80043e2:	682b      	ldr	r3, [r5, #0]
 80043e4:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 80043e6:	682b      	ldr	r3, [r5, #0]
 80043e8:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80043ea:	682b      	ldr	r3, [r5, #0]
 80043ec:	2221      	movs	r2, #33	; 0x21
 80043ee:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80043f0:	4628      	mov	r0, r5
 80043f2:	f7ff ff13 	bl	800421c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043f6:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80043f8:	233f      	movs	r3, #63	; 0x3f
 80043fa:	4093      	lsls	r3, r2
 80043fc:	6083      	str	r3, [r0, #8]
  hdma->XferCpltCallback = NULL;
 80043fe:	63ec      	str	r4, [r5, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004400:	642c      	str	r4, [r5, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004402:	646c      	str	r4, [r5, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004404:	64ac      	str	r4, [r5, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004406:	64ec      	str	r4, [r5, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8004408:	652c      	str	r4, [r5, #80]	; 0x50
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800440a:	656c      	str	r4, [r5, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_RESET;
 800440c:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8004410:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  return HAL_OK;
 8004414:	4620      	mov	r0, r4
}
 8004416:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004418:	2001      	movs	r0, #1
}
 800441a:	4770      	bx	lr

0800441c <HAL_DMA_Start_IT>:
{
 800441c:	b538      	push	{r3, r4, r5, lr}
 800441e:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004420:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8004422:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8004426:	2801      	cmp	r0, #1
 8004428:	d030      	beq.n	800448c <HAL_DMA_Start_IT+0x70>
 800442a:	2001      	movs	r0, #1
 800442c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8004430:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 8004434:	b2c0      	uxtb	r0, r0
 8004436:	2801      	cmp	r0, #1
 8004438:	d004      	beq.n	8004444 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 800443a:	2300      	movs	r3, #0
 800443c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_BUSY;
 8004440:	2002      	movs	r0, #2
}
 8004442:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8004444:	2002      	movs	r0, #2
 8004446:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800444a:	2000      	movs	r0, #0
 800444c:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800444e:	4620      	mov	r0, r4
 8004450:	f7ff fece 	bl	80041f0 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004454:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004456:	233f      	movs	r3, #63	; 0x3f
 8004458:	4093      	lsls	r3, r2
 800445a:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800445c:	6822      	ldr	r2, [r4, #0]
 800445e:	6813      	ldr	r3, [r2, #0]
 8004460:	f043 0316 	orr.w	r3, r3, #22
 8004464:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004466:	6822      	ldr	r2, [r4, #0]
 8004468:	6953      	ldr	r3, [r2, #20]
 800446a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800446e:	6153      	str	r3, [r2, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8004470:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004472:	b123      	cbz	r3, 800447e <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CR  |= DMA_IT_HT;
 8004474:	6822      	ldr	r2, [r4, #0]
 8004476:	6813      	ldr	r3, [r2, #0]
 8004478:	f043 0308 	orr.w	r3, r3, #8
 800447c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 800447e:	6822      	ldr	r2, [r4, #0]
 8004480:	6813      	ldr	r3, [r2, #0]
 8004482:	f043 0301 	orr.w	r3, r3, #1
 8004486:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004488:	2000      	movs	r0, #0
 800448a:	e7da      	b.n	8004442 <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 800448c:	2002      	movs	r0, #2
 800448e:	e7d8      	b.n	8004442 <HAL_DMA_Start_IT+0x26>

08004490 <HAL_DMA_Abort>:
{
 8004490:	b570      	push	{r4, r5, r6, lr}
 8004492:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004494:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8004496:	f7ff fe4f 	bl	8004138 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800449a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d006      	beq.n	80044b2 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044a4:	2380      	movs	r3, #128	; 0x80
 80044a6:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80044a8:	2300      	movs	r3, #0
 80044aa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 80044ae:	2001      	movs	r0, #1
}
 80044b0:	bd70      	pop	{r4, r5, r6, pc}
 80044b2:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80044b4:	6822      	ldr	r2, [r4, #0]
 80044b6:	6813      	ldr	r3, [r2, #0]
 80044b8:	f023 0316 	bic.w	r3, r3, #22
 80044bc:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80044be:	6822      	ldr	r2, [r4, #0]
 80044c0:	6953      	ldr	r3, [r2, #20]
 80044c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044c6:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80044c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80044ca:	b1e3      	cbz	r3, 8004506 <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044cc:	6822      	ldr	r2, [r4, #0]
 80044ce:	6813      	ldr	r3, [r2, #0]
 80044d0:	f023 0308 	bic.w	r3, r3, #8
 80044d4:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80044d6:	6822      	ldr	r2, [r4, #0]
 80044d8:	6813      	ldr	r3, [r2, #0]
 80044da:	f023 0301 	bic.w	r3, r3, #1
 80044de:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044e0:	6823      	ldr	r3, [r4, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f013 0f01 	tst.w	r3, #1
 80044e8:	d011      	beq.n	800450e <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80044ea:	f7ff fe25 	bl	8004138 <HAL_GetTick>
 80044ee:	1b43      	subs	r3, r0, r5
 80044f0:	2b05      	cmp	r3, #5
 80044f2:	d9f5      	bls.n	80044e0 <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80044f4:	2320      	movs	r3, #32
 80044f6:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80044f8:	2003      	movs	r0, #3
 80044fa:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80044fe:	2300      	movs	r3, #0
 8004500:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8004504:	e7d4      	b.n	80044b0 <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004506:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1df      	bne.n	80044cc <HAL_DMA_Abort+0x3c>
 800450c:	e7e3      	b.n	80044d6 <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800450e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004510:	233f      	movs	r3, #63	; 0x3f
 8004512:	4093      	lsls	r3, r2
 8004514:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8004516:	2301      	movs	r3, #1
 8004518:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 800451c:	2000      	movs	r0, #0
 800451e:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return HAL_OK;
 8004522:	e7c5      	b.n	80044b0 <HAL_DMA_Abort+0x20>

08004524 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004524:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b02      	cmp	r3, #2
 800452c:	d003      	beq.n	8004536 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800452e:	2380      	movs	r3, #128	; 0x80
 8004530:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8004532:	2001      	movs	r0, #1
 8004534:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8004536:	2305      	movs	r3, #5
 8004538:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800453c:	6802      	ldr	r2, [r0, #0]
 800453e:	6813      	ldr	r3, [r2, #0]
 8004540:	f023 0301 	bic.w	r3, r3, #1
 8004544:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8004546:	2000      	movs	r0, #0
}
 8004548:	4770      	bx	lr
	...

0800454c <HAL_DMA_IRQHandler>:
{
 800454c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800454e:	b083      	sub	sp, #12
 8004550:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
 8004552:	2300      	movs	r3, #0
 8004554:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;
 8004556:	4b72      	ldr	r3, [pc, #456]	; (8004720 <HAL_DMA_IRQHandler+0x1d4>)
 8004558:	681d      	ldr	r5, [r3, #0]
 800455a:	4b72      	ldr	r3, [pc, #456]	; (8004724 <HAL_DMA_IRQHandler+0x1d8>)
 800455c:	fba3 3505 	umull	r3, r5, r3, r5
 8004560:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004562:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8004564:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004566:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8004568:	2308      	movs	r3, #8
 800456a:	4093      	lsls	r3, r2
 800456c:	4233      	tst	r3, r6
 800456e:	d010      	beq.n	8004592 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004570:	6803      	ldr	r3, [r0, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	f012 0f04 	tst.w	r2, #4
 8004578:	d00b      	beq.n	8004592 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	f022 0204 	bic.w	r2, r2, #4
 8004580:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004582:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8004584:	2308      	movs	r3, #8
 8004586:	4093      	lsls	r3, r2
 8004588:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800458a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800458c:	f043 0301 	orr.w	r3, r3, #1
 8004590:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004592:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004594:	2301      	movs	r3, #1
 8004596:	4093      	lsls	r3, r2
 8004598:	4233      	tst	r3, r6
 800459a:	d009      	beq.n	80045b0 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800459c:	6822      	ldr	r2, [r4, #0]
 800459e:	6952      	ldr	r2, [r2, #20]
 80045a0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80045a4:	d004      	beq.n	80045b0 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80045a6:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80045a8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80045aa:	f043 0302 	orr.w	r3, r3, #2
 80045ae:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80045b0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80045b2:	2304      	movs	r3, #4
 80045b4:	4093      	lsls	r3, r2
 80045b6:	4233      	tst	r3, r6
 80045b8:	d009      	beq.n	80045ce <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80045ba:	6822      	ldr	r2, [r4, #0]
 80045bc:	6812      	ldr	r2, [r2, #0]
 80045be:	f012 0f02 	tst.w	r2, #2
 80045c2:	d004      	beq.n	80045ce <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80045c4:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80045c6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80045c8:	f043 0304 	orr.w	r3, r3, #4
 80045cc:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80045ce:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80045d0:	2310      	movs	r3, #16
 80045d2:	4093      	lsls	r3, r2
 80045d4:	4233      	tst	r3, r6
 80045d6:	d024      	beq.n	8004622 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80045d8:	6822      	ldr	r2, [r4, #0]
 80045da:	6812      	ldr	r2, [r2, #0]
 80045dc:	f012 0f08 	tst.w	r2, #8
 80045e0:	d01f      	beq.n	8004622 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80045e2:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80045e4:	6823      	ldr	r3, [r4, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80045ec:	d00d      	beq.n	800460a <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80045f4:	d104      	bne.n	8004600 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 80045f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80045f8:	b19b      	cbz	r3, 8004622 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 80045fa:	4620      	mov	r0, r4
 80045fc:	4798      	blx	r3
 80045fe:	e010      	b.n	8004622 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004600:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004602:	b173      	cbz	r3, 8004622 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8004604:	4620      	mov	r0, r4
 8004606:	4798      	blx	r3
 8004608:	e00b      	b.n	8004622 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004610:	d103      	bne.n	800461a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	f022 0208 	bic.w	r2, r2, #8
 8004618:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800461a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800461c:	b10b      	cbz	r3, 8004622 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 800461e:	4620      	mov	r0, r4
 8004620:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004622:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004624:	2320      	movs	r3, #32
 8004626:	4093      	lsls	r3, r2
 8004628:	4233      	tst	r3, r6
 800462a:	d055      	beq.n	80046d8 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800462c:	6822      	ldr	r2, [r4, #0]
 800462e:	6812      	ldr	r2, [r2, #0]
 8004630:	f012 0f10 	tst.w	r2, #16
 8004634:	d050      	beq.n	80046d8 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004636:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004638:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b05      	cmp	r3, #5
 8004640:	d00e      	beq.n	8004660 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004642:	6823      	ldr	r3, [r4, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800464a:	d033      	beq.n	80046b4 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8004652:	d12a      	bne.n	80046aa <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8004654:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004656:	2b00      	cmp	r3, #0
 8004658:	d03e      	beq.n	80046d8 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 800465a:	4620      	mov	r0, r4
 800465c:	4798      	blx	r3
 800465e:	e03b      	b.n	80046d8 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004660:	6822      	ldr	r2, [r4, #0]
 8004662:	6813      	ldr	r3, [r2, #0]
 8004664:	f023 0316 	bic.w	r3, r3, #22
 8004668:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800466a:	6822      	ldr	r2, [r4, #0]
 800466c:	6953      	ldr	r3, [r2, #20]
 800466e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004672:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004674:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004676:	b1a3      	cbz	r3, 80046a2 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004678:	6822      	ldr	r2, [r4, #0]
 800467a:	6813      	ldr	r3, [r2, #0]
 800467c:	f023 0308 	bic.w	r3, r3, #8
 8004680:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004682:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004684:	233f      	movs	r3, #63	; 0x3f
 8004686:	4093      	lsls	r3, r2
 8004688:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 800468a:	2301      	movs	r3, #1
 800468c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8004690:	2300      	movs	r3, #0
 8004692:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8004696:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004698:	2b00      	cmp	r3, #0
 800469a:	d03f      	beq.n	800471c <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 800469c:	4620      	mov	r0, r4
 800469e:	4798      	blx	r3
        return;
 80046a0:	e03c      	b.n	800471c <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80046a2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1e7      	bne.n	8004678 <HAL_DMA_IRQHandler+0x12c>
 80046a8:	e7eb      	b.n	8004682 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 80046aa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80046ac:	b1a3      	cbz	r3, 80046d8 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 80046ae:	4620      	mov	r0, r4
 80046b0:	4798      	blx	r3
 80046b2:	e011      	b.n	80046d8 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	f412 7f80 	tst.w	r2, #256	; 0x100
 80046ba:	d109      	bne.n	80046d0 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	f022 0210 	bic.w	r2, r2, #16
 80046c2:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80046c4:	2301      	movs	r3, #1
 80046c6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 80046ca:	2300      	movs	r3, #0
 80046cc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 80046d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80046d2:	b10b      	cbz	r3, 80046d8 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 80046d4:	4620      	mov	r0, r4
 80046d6:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80046d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80046da:	b1fb      	cbz	r3, 800471c <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80046dc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80046de:	f013 0f01 	tst.w	r3, #1
 80046e2:	d017      	beq.n	8004714 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 80046e4:	2305      	movs	r3, #5
 80046e6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80046ea:	6822      	ldr	r2, [r4, #0]
 80046ec:	6813      	ldr	r3, [r2, #0]
 80046ee:	f023 0301 	bic.w	r3, r3, #1
 80046f2:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 80046f4:	9b01      	ldr	r3, [sp, #4]
 80046f6:	3301      	adds	r3, #1
 80046f8:	9301      	str	r3, [sp, #4]
 80046fa:	42ab      	cmp	r3, r5
 80046fc:	d804      	bhi.n	8004708 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80046fe:	6823      	ldr	r3, [r4, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f013 0f01 	tst.w	r3, #1
 8004706:	d1f5      	bne.n	80046f4 <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 8004708:	2301      	movs	r3, #1
 800470a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 800470e:	2300      	movs	r3, #0
 8004710:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8004714:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004716:	b10b      	cbz	r3, 800471c <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8004718:	4620      	mov	r0, r4
 800471a:	4798      	blx	r3
}
 800471c:	b003      	add	sp, #12
 800471e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004720:	200000a8 	.word	0x200000a8
 8004724:	1b4e81b5 	.word	0x1b4e81b5

08004728 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8004728:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 800472a:	4770      	bx	lr

0800472c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 800472c:	b430      	push	{r4, r5}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800472e:	6805      	ldr	r5, [r0, #0]
 8004730:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 8004732:	f004 4c40 	and.w	ip, r4, #3221225472	; 0xc0000000
 8004736:	9c02      	ldr	r4, [sp, #8]
 8004738:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800473c:	ea4c 0404 	orr.w	r4, ip, r4
 8004740:	646c      	str	r4, [r5, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004742:	6803      	ldr	r3, [r0, #0]
 8004744:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004746:	6843      	ldr	r3, [r0, #4]
 8004748:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800474c:	d003      	beq.n	8004756 <DMA2D_SetConfig+0x2a>
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800474e:	6803      	ldr	r3, [r0, #0]
 8004750:	60d9      	str	r1, [r3, #12]
  }
}
 8004752:	bc30      	pop	{r4, r5}
 8004754:	4770      	bx	lr
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004756:	f001 4c7f 	and.w	ip, r1, #4278190080	; 0xff000000
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800475a:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800475e:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004762:	b2ca      	uxtb	r2, r1
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004764:	6884      	ldr	r4, [r0, #8]
 8004766:	b19c      	cbz	r4, 8004790 <DMA2D_SetConfig+0x64>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004768:	2c01      	cmp	r4, #1
 800476a:	d00f      	beq.n	800478c <DMA2D_SetConfig+0x60>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800476c:	2c02      	cmp	r4, #2
 800476e:	d012      	beq.n	8004796 <DMA2D_SetConfig+0x6a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004770:	2c03      	cmp	r4, #3
 8004772:	d018      	beq.n	80047a6 <DMA2D_SetConfig+0x7a>
      tmp1 = (tmp1 >> 28U);
 8004774:	ea4f 7c1c 	mov.w	ip, ip, lsr #28
      tmp2 = (tmp2 >> 20U);
 8004778:	0d1b      	lsrs	r3, r3, #20
      tmp3 = (tmp3 >> 12U);
 800477a:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800477c:	021b      	lsls	r3, r3, #8
 800477e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8004782:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
 8004786:	ea43 1112 	orr.w	r1, r3, r2, lsr #4
 800478a:	e001      	b.n	8004790 <DMA2D_SetConfig+0x64>
      tmp = (tmp3 | tmp2 | tmp4);
 800478c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004790:	6803      	ldr	r3, [r0, #0]
 8004792:	6399      	str	r1, [r3, #56]	; 0x38
 8004794:	e7dd      	b.n	8004752 <DMA2D_SetConfig+0x26>
      tmp2 = (tmp2 >> 19U);
 8004796:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 10U);
 8004798:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800479a:	02db      	lsls	r3, r3, #11
 800479c:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 80047a0:	ea43 01d2 	orr.w	r1, r3, r2, lsr #3
 80047a4:	e7f4      	b.n	8004790 <DMA2D_SetConfig+0x64>
      tmp1 = (tmp1 >> 31U);
 80047a6:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
      tmp2 = (tmp2 >> 19U);
 80047aa:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 80047ac:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80047ae:	029b      	lsls	r3, r3, #10
 80047b0:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 80047b4:	ea43 33cc 	orr.w	r3, r3, ip, lsl #15
 80047b8:	ea43 01d2 	orr.w	r1, r3, r2, lsr #3
 80047bc:	e7e8      	b.n	8004790 <DMA2D_SetConfig+0x64>

080047be <HAL_DMA2D_MspInit>:
}
 80047be:	4770      	bx	lr

080047c0 <HAL_DMA2D_Init>:
  if (hdma2d == NULL)
 80047c0:	2800      	cmp	r0, #0
 80047c2:	d032      	beq.n	800482a <HAL_DMA2D_Init+0x6a>
{
 80047c4:	b510      	push	{r4, lr}
 80047c6:	4604      	mov	r4, r0
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80047c8:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80047cc:	b343      	cbz	r3, 8004820 <HAL_DMA2D_Init+0x60>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80047ce:	2302      	movs	r3, #2
 80047d0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80047d4:	6822      	ldr	r2, [r4, #0]
 80047d6:	6813      	ldr	r3, [r2, #0]
 80047d8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80047dc:	6861      	ldr	r1, [r4, #4]
 80047de:	430b      	orrs	r3, r1
 80047e0:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80047e2:	6822      	ldr	r2, [r4, #0]
 80047e4:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80047e6:	f023 0307 	bic.w	r3, r3, #7
 80047ea:	68a1      	ldr	r1, [r4, #8]
 80047ec:	430b      	orrs	r3, r1
 80047ee:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80047f0:	6822      	ldr	r2, [r4, #0]
 80047f2:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80047f4:	4b0e      	ldr	r3, [pc, #56]	; (8004830 <HAL_DMA2D_Init+0x70>)
 80047f6:	400b      	ands	r3, r1
 80047f8:	68e1      	ldr	r1, [r4, #12]
 80047fa:	430b      	orrs	r3, r1
 80047fc:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80047fe:	6821      	ldr	r1, [r4, #0]
 8004800:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8004802:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004806:	6920      	ldr	r0, [r4, #16]
 8004808:	6962      	ldr	r2, [r4, #20]
 800480a:	0552      	lsls	r2, r2, #21
 800480c:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
 8004810:	4313      	orrs	r3, r2
 8004812:	634b      	str	r3, [r1, #52]	; 0x34
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004814:	2000      	movs	r0, #0
 8004816:	6560      	str	r0, [r4, #84]	; 0x54
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004818:	2301      	movs	r3, #1
 800481a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 800481e:	bd10      	pop	{r4, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8004820:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_DMA2D_MspInit(hdma2d);
 8004824:	f7ff ffcb 	bl	80047be <HAL_DMA2D_MspInit>
 8004828:	e7d1      	b.n	80047ce <HAL_DMA2D_Init+0xe>
    return HAL_ERROR;
 800482a:	2001      	movs	r0, #1
}
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	ffffc000 	.word	0xffffc000

08004834 <HAL_DMA2D_Start>:
{
 8004834:	b510      	push	{r4, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	4604      	mov	r4, r0
  __HAL_LOCK(hdma2d);
 800483a:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 800483e:	2801      	cmp	r0, #1
 8004840:	d012      	beq.n	8004868 <HAL_DMA2D_Start+0x34>
 8004842:	2001      	movs	r0, #1
 8004844:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004848:	2002      	movs	r0, #2
 800484a:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800484e:	9804      	ldr	r0, [sp, #16]
 8004850:	9000      	str	r0, [sp, #0]
 8004852:	4620      	mov	r0, r4
 8004854:	f7ff ff6a 	bl	800472c <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8004858:	6822      	ldr	r2, [r4, #0]
 800485a:	6813      	ldr	r3, [r2, #0]
 800485c:	f043 0301 	orr.w	r3, r3, #1
 8004860:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8004862:	2000      	movs	r0, #0
}
 8004864:	b002      	add	sp, #8
 8004866:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdma2d);
 8004868:	2002      	movs	r0, #2
 800486a:	e7fb      	b.n	8004864 <HAL_DMA2D_Start+0x30>

0800486c <HAL_DMA2D_PollForTransfer>:
{
 800486c:	b570      	push	{r4, r5, r6, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	4604      	mov	r4, r0
 8004872:	460d      	mov	r5, r1
  __IO uint32_t isrflags = 0x0U;
 8004874:	2300      	movs	r3, #0
 8004876:	9301      	str	r3, [sp, #4]
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004878:	6803      	ldr	r3, [r0, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f013 0f01 	tst.w	r3, #1
 8004880:	d111      	bne.n	80048a6 <HAL_DMA2D_PollForTransfer+0x3a>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004882:	6822      	ldr	r2, [r4, #0]
 8004884:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004886:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004888:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 800488a:	f013 0f20 	tst.w	r3, #32
 800488e:	d147      	bne.n	8004920 <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8004890:	6823      	ldr	r3, [r4, #0]
 8004892:	2212      	movs	r2, #18
 8004894:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004896:	2301      	movs	r3, #1
 8004898:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hdma2d);
 800489c:	2000      	movs	r0, #0
 800489e:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
}
 80048a2:	b002      	add	sp, #8
 80048a4:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 80048a6:	f7ff fc47 	bl	8004138 <HAL_GetTick>
 80048aa:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80048ac:	6823      	ldr	r3, [r4, #0]
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	f012 0f02 	tst.w	r2, #2
 80048b4:	d1e5      	bne.n	8004882 <HAL_DMA2D_PollForTransfer+0x16>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80048b6:	685a      	ldr	r2, [r3, #4]
 80048b8:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80048ba:	9a01      	ldr	r2, [sp, #4]
 80048bc:	f012 0f21 	tst.w	r2, #33	; 0x21
 80048c0:	d114      	bne.n	80048ec <HAL_DMA2D_PollForTransfer+0x80>
      if (Timeout != HAL_MAX_DELAY)
 80048c2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80048c6:	d0f1      	beq.n	80048ac <HAL_DMA2D_PollForTransfer+0x40>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80048c8:	f7ff fc36 	bl	8004138 <HAL_GetTick>
 80048cc:	1b80      	subs	r0, r0, r6
 80048ce:	42a8      	cmp	r0, r5
 80048d0:	d801      	bhi.n	80048d6 <HAL_DMA2D_PollForTransfer+0x6a>
 80048d2:	2d00      	cmp	r5, #0
 80048d4:	d1ea      	bne.n	80048ac <HAL_DMA2D_PollForTransfer+0x40>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80048d6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80048d8:	f043 0320 	orr.w	r3, r3, #32
 80048dc:	6563      	str	r3, [r4, #84]	; 0x54
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80048de:	2003      	movs	r0, #3
 80048e0:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
          __HAL_UNLOCK(hdma2d);
 80048e4:	2300      	movs	r3, #0
 80048e6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
          return HAL_TIMEOUT;
 80048ea:	e7da      	b.n	80048a2 <HAL_DMA2D_PollForTransfer+0x36>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80048ec:	9a01      	ldr	r2, [sp, #4]
 80048ee:	f012 0f20 	tst.w	r2, #32
 80048f2:	d003      	beq.n	80048fc <HAL_DMA2D_PollForTransfer+0x90>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80048f4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80048f6:	f042 0202 	orr.w	r2, r2, #2
 80048fa:	6562      	str	r2, [r4, #84]	; 0x54
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80048fc:	9a01      	ldr	r2, [sp, #4]
 80048fe:	f012 0f01 	tst.w	r2, #1
 8004902:	d003      	beq.n	800490c <HAL_DMA2D_PollForTransfer+0xa0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004904:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004906:	f042 0201 	orr.w	r2, r2, #1
 800490a:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800490c:	2221      	movs	r2, #33	; 0x21
 800490e:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004910:	2304      	movs	r3, #4
 8004912:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hdma2d);
 8004916:	2300      	movs	r3, #0
 8004918:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        return HAL_ERROR;
 800491c:	2001      	movs	r0, #1
 800491e:	e7c0      	b.n	80048a2 <HAL_DMA2D_PollForTransfer+0x36>
    tickstart = HAL_GetTick();
 8004920:	f7ff fc0a 	bl	8004138 <HAL_GetTick>
 8004924:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004926:	6823      	ldr	r3, [r4, #0]
 8004928:	685a      	ldr	r2, [r3, #4]
 800492a:	f012 0f10 	tst.w	r2, #16
 800492e:	d1af      	bne.n	8004890 <HAL_DMA2D_PollForTransfer+0x24>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004930:	685a      	ldr	r2, [r3, #4]
 8004932:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004934:	9a01      	ldr	r2, [sp, #4]
 8004936:	f012 0f29 	tst.w	r2, #41	; 0x29
 800493a:	d114      	bne.n	8004966 <HAL_DMA2D_PollForTransfer+0xfa>
      if (Timeout != HAL_MAX_DELAY)
 800493c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004940:	d0f1      	beq.n	8004926 <HAL_DMA2D_PollForTransfer+0xba>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004942:	f7ff fbf9 	bl	8004138 <HAL_GetTick>
 8004946:	1b80      	subs	r0, r0, r6
 8004948:	42a8      	cmp	r0, r5
 800494a:	d801      	bhi.n	8004950 <HAL_DMA2D_PollForTransfer+0xe4>
 800494c:	2d00      	cmp	r5, #0
 800494e:	d1ea      	bne.n	8004926 <HAL_DMA2D_PollForTransfer+0xba>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004950:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004952:	f043 0320 	orr.w	r3, r3, #32
 8004956:	6563      	str	r3, [r4, #84]	; 0x54
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004958:	2003      	movs	r0, #3
 800495a:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
          __HAL_UNLOCK(hdma2d);
 800495e:	2300      	movs	r3, #0
 8004960:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
          return HAL_TIMEOUT;
 8004964:	e79d      	b.n	80048a2 <HAL_DMA2D_PollForTransfer+0x36>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004966:	9a01      	ldr	r2, [sp, #4]
 8004968:	f012 0f08 	tst.w	r2, #8
 800496c:	d003      	beq.n	8004976 <HAL_DMA2D_PollForTransfer+0x10a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800496e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004970:	f042 0204 	orr.w	r2, r2, #4
 8004974:	6562      	str	r2, [r4, #84]	; 0x54
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004976:	9a01      	ldr	r2, [sp, #4]
 8004978:	f012 0f20 	tst.w	r2, #32
 800497c:	d003      	beq.n	8004986 <HAL_DMA2D_PollForTransfer+0x11a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800497e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004980:	f042 0202 	orr.w	r2, r2, #2
 8004984:	6562      	str	r2, [r4, #84]	; 0x54
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004986:	9a01      	ldr	r2, [sp, #4]
 8004988:	f012 0f01 	tst.w	r2, #1
 800498c:	d003      	beq.n	8004996 <HAL_DMA2D_PollForTransfer+0x12a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800498e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004990:	f042 0201 	orr.w	r2, r2, #1
 8004994:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004996:	2229      	movs	r2, #41	; 0x29
 8004998:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800499a:	2304      	movs	r3, #4
 800499c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hdma2d);
 80049a0:	2300      	movs	r3, #0
 80049a2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        return HAL_ERROR;
 80049a6:	2001      	movs	r0, #1
 80049a8:	e77b      	b.n	80048a2 <HAL_DMA2D_PollForTransfer+0x36>
	...

080049ac <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 80049ac:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 80049b0:	2a01      	cmp	r2, #1
 80049b2:	d067      	beq.n	8004a84 <HAL_DMA2D_ConfigLayer+0xd8>
{
 80049b4:	b430      	push	{r4, r5}
 80049b6:	4603      	mov	r3, r0
  __HAL_LOCK(hdma2d);
 80049b8:	2201      	movs	r2, #1
 80049ba:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80049be:	2202      	movs	r2, #2
 80049c0:	f880 2051 	strb.w	r2, [r0, #81]	; 0x51
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80049c4:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 80049c8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80049cc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80049ce:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80049d0:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 80049d4:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80049d6:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80049da:	6b40      	ldr	r0, [r0, #52]	; 0x34
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80049dc:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80049e0:	3c09      	subs	r4, #9
 80049e2:	2c01      	cmp	r4, #1
 80049e4:	d920      	bls.n	8004a28 <HAL_DMA2D_ConfigLayer+0x7c>
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80049e6:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 80049ea:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80049ee:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80049f0:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80049f4:	bb59      	cbnz	r1, 8004a4e <HAL_DMA2D_ConfigLayer+0xa2>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80049f6:	681c      	ldr	r4, [r3, #0]
 80049f8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80049fa:	4823      	ldr	r0, [pc, #140]	; (8004a88 <HAL_DMA2D_ConfigLayer+0xdc>)
 80049fc:	4028      	ands	r0, r5
 80049fe:	4310      	orrs	r0, r2
 8004a00:	6260      	str	r0, [r4, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004a02:	6818      	ldr	r0, [r3, #0]
 8004a04:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8004a08:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8004a0c:	6a14      	ldr	r4, [r2, #32]
 8004a0e:	6184      	str	r4, [r0, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004a10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a12:	3a09      	subs	r2, #9
 8004a14:	2a01      	cmp	r2, #1
 8004a16:	d910      	bls.n	8004a3a <HAL_DMA2D_ConfigLayer+0x8e>
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hdma2d);
 8004a1e:	2000      	movs	r0, #0
 8004a20:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
}
 8004a24:	bc30      	pop	{r4, r5}
 8004a26:	4770      	bx	lr
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004a28:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8004a2c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8004a30:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8004a32:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
 8004a36:	4302      	orrs	r2, r0
 8004a38:	e7dc      	b.n	80049f4 <HAL_DMA2D_ConfigLayer+0x48>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004a3a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8004a3e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8004a42:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8004a44:	6819      	ldr	r1, [r3, #0]
 8004a46:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004a4a:	628a      	str	r2, [r1, #40]	; 0x28
 8004a4c:	e7e4      	b.n	8004a18 <HAL_DMA2D_ConfigLayer+0x6c>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004a4e:	681c      	ldr	r4, [r3, #0]
 8004a50:	69e5      	ldr	r5, [r4, #28]
 8004a52:	480d      	ldr	r0, [pc, #52]	; (8004a88 <HAL_DMA2D_ConfigLayer+0xdc>)
 8004a54:	4028      	ands	r0, r5
 8004a56:	4310      	orrs	r0, r2
 8004a58:	61e0      	str	r0, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004a5a:	6818      	ldr	r0, [r3, #0]
 8004a5c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8004a60:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8004a64:	6a14      	ldr	r4, [r2, #32]
 8004a66:	6104      	str	r4, [r0, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004a68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a6a:	3a09      	subs	r2, #9
 8004a6c:	2a01      	cmp	r2, #1
 8004a6e:	d8d3      	bhi.n	8004a18 <HAL_DMA2D_ConfigLayer+0x6c>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004a70:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8004a74:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8004a78:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8004a7a:	6819      	ldr	r1, [r3, #0]
 8004a7c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004a80:	620a      	str	r2, [r1, #32]
 8004a82:	e7c9      	b.n	8004a18 <HAL_DMA2D_ConfigLayer+0x6c>
  __HAL_LOCK(hdma2d);
 8004a84:	2002      	movs	r0, #2
}
 8004a86:	4770      	bx	lr
 8004a88:	00ccfff0 	.word	0x00ccfff0

08004a8c <DSI_ConfigPacketHeader>:
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8004a8c:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8004a90:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8004a94:	9b00      	ldr	r3, [sp, #0]
 8004a96:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004a9a:	66c2      	str	r2, [r0, #108]	; 0x6c
}
 8004a9c:	4770      	bx	lr

08004a9e <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8004a9e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004aa2:	4605      	mov	r5, r0
 8004aa4:	4689      	mov	r9, r1
 8004aa6:	4617      	mov	r7, r2
 8004aa8:	4698      	mov	r8, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8004aaa:	f7ff fb45 	bl	8004138 <HAL_GetTick>
 8004aae:	4606      	mov	r6, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004ab0:	682c      	ldr	r4, [r5, #0]
 8004ab2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8004ab4:	f013 0f01 	tst.w	r3, #1
 8004ab8:	d107      	bne.n	8004aca <DSI_ShortWrite+0x2c>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004aba:	f7ff fb3d 	bl	8004138 <HAL_GetTick>
 8004abe:	1b80      	subs	r0, r0, r6
 8004ac0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004ac4:	d9f4      	bls.n	8004ab0 <DSI_ShortWrite+0x12>
    {
      return HAL_TIMEOUT;
 8004ac6:	2003      	movs	r0, #3
 8004ac8:	e008      	b.n	8004adc <DSI_ShortWrite+0x3e>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8004aca:	ea47 1389 	orr.w	r3, r7, r9, lsl #6
 8004ace:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
 8004ad2:	9a08      	ldr	r2, [sp, #32]
 8004ad4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ad8:	66e3      	str	r3, [r4, #108]	; 0x6c

  return HAL_OK;
 8004ada:	2000      	movs	r0, #0
}
 8004adc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004ae0 <HAL_DSI_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 8004ae0:	4770      	bx	lr
	...

08004ae4 <HAL_DSI_Init>:
  if (hdsi == NULL)
 8004ae4:	2800      	cmp	r0, #0
 8004ae6:	f000 80bd 	beq.w	8004c64 <HAL_DSI_Init+0x180>
{
 8004aea:	b570      	push	{r4, r5, r6, lr}
 8004aec:	b082      	sub	sp, #8
 8004aee:	460d      	mov	r5, r1
 8004af0:	4604      	mov	r4, r0
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8004af2:	7c43      	ldrb	r3, [r0, #17]
 8004af4:	b31b      	cbz	r3, 8004b3e <HAL_DSI_Init+0x5a>
  hdsi->State = HAL_DSI_STATE_BUSY;
 8004af6:	2303      	movs	r3, #3
 8004af8:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 8004afa:	2300      	movs	r3, #0
 8004afc:	9300      	str	r3, [sp, #0]
 8004afe:	6822      	ldr	r2, [r4, #0]
 8004b00:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8004b04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b08:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
 8004b0c:	6823      	ldr	r3, [r4, #0]
 8004b0e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8004b12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b16:	9300      	str	r3, [sp, #0]
 8004b18:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 8004b1a:	f7ff fb0d 	bl	8004138 <HAL_GetTick>
 8004b1e:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8004b20:	6823      	ldr	r3, [r4, #0]
 8004b22:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8004b26:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8004b2a:	d10b      	bne.n	8004b44 <HAL_DSI_Init+0x60>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004b2c:	f7ff fb04 	bl	8004138 <HAL_GetTick>
 8004b30:	1b80      	subs	r0, r0, r6
 8004b32:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004b36:	d9f3      	bls.n	8004b20 <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 8004b38:	2003      	movs	r0, #3
}
 8004b3a:	b002      	add	sp, #8
 8004b3c:	bd70      	pop	{r4, r5, r6, pc}
    HAL_DSI_MspInit(hdsi);
 8004b3e:	f7ff ffcf 	bl	8004ae0 <HAL_DSI_MspInit>
 8004b42:	e7d8      	b.n	8004af6 <HAL_DSI_Init+0x12>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8004b44:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8004b48:	4a47      	ldr	r2, [pc, #284]	; (8004c68 <HAL_DSI_Init+0x184>)
 8004b4a:	400a      	ands	r2, r1
 8004b4c:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8004b50:	6821      	ldr	r1, [r4, #0]
 8004b52:	f8d1 2430 	ldr.w	r2, [r1, #1072]	; 0x430
 8004b56:	6828      	ldr	r0, [r5, #0]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8004b58:	686b      	ldr	r3, [r5, #4]
 8004b5a:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8004b5c:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8004b60:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8004b62:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8004b66:	4313      	orrs	r3, r2
 8004b68:	f8c1 3430 	str.w	r3, [r1, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	9301      	str	r3, [sp, #4]
 8004b70:	6822      	ldr	r2, [r4, #0]
 8004b72:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8004b76:	f043 0301 	orr.w	r3, r3, #1
 8004b7a:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
 8004b7e:	6823      	ldr	r3, [r4, #0]
 8004b80:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8004b84:	f003 0301 	and.w	r3, r3, #1
 8004b88:	9301      	str	r3, [sp, #4]
 8004b8a:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 8004b8c:	2001      	movs	r0, #1
 8004b8e:	f7fe fdd7 	bl	8003740 <HAL_Delay>
  tickstart = HAL_GetTick();
 8004b92:	f7ff fad1 	bl	8004138 <HAL_GetTick>
 8004b96:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8004b98:	6823      	ldr	r3, [r4, #0]
 8004b9a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8004b9e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004ba2:	d107      	bne.n	8004bb4 <HAL_DSI_Init+0xd0>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004ba4:	f7ff fac8 	bl	8004138 <HAL_GetTick>
 8004ba8:	1b80      	subs	r0, r0, r6
 8004baa:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004bae:	d9f3      	bls.n	8004b98 <HAL_DSI_Init+0xb4>
      return HAL_TIMEOUT;
 8004bb0:	2003      	movs	r0, #3
 8004bb2:	e7c2      	b.n	8004b3a <HAL_DSI_Init+0x56>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8004bb4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004bb8:	f042 0206 	orr.w	r2, r2, #6
 8004bbc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8004bc0:	6822      	ldr	r2, [r4, #0]
 8004bc2:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004bc6:	f023 0303 	bic.w	r3, r3, #3
 8004bca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8004bce:	6822      	ldr	r2, [r4, #0]
 8004bd0:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004bd4:	6861      	ldr	r1, [r4, #4]
 8004bd6:	430b      	orrs	r3, r1
 8004bd8:	f043 0301 	orr.w	r3, r3, #1
 8004bdc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8004be0:	6822      	ldr	r2, [r4, #0]
 8004be2:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 8004be6:	f023 0303 	bic.w	r3, r3, #3
 8004bea:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8004bee:	6822      	ldr	r2, [r4, #0]
 8004bf0:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 8004bf4:	68e1      	ldr	r1, [r4, #12]
 8004bf6:	430b      	orrs	r3, r1
 8004bf8:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8004bfc:	6822      	ldr	r2, [r4, #0]
 8004bfe:	6893      	ldr	r3, [r2, #8]
 8004c00:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c04:	6093      	str	r3, [r2, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8004c06:	6822      	ldr	r2, [r4, #0]
 8004c08:	6893      	ldr	r3, [r2, #8]
 8004c0a:	68a1      	ldr	r1, [r4, #8]
 8004c0c:	430b      	orrs	r3, r1
 8004c0e:	6093      	str	r3, [r2, #8]
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8004c10:	686b      	ldr	r3, [r5, #4]
 8004c12:	b903      	cbnz	r3, 8004c16 <HAL_DSI_Init+0x132>
 8004c14:	2301      	movs	r3, #1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8004c16:	4a15      	ldr	r2, [pc, #84]	; (8004c6c <HAL_DSI_Init+0x188>)
 8004c18:	fb02 f303 	mul.w	r3, r2, r3
 8004c1c:	68aa      	ldr	r2, [r5, #8]
 8004c1e:	f002 0203 	and.w	r2, r2, #3
 8004c22:	4093      	lsls	r3, r2
 8004c24:	682a      	ldr	r2, [r5, #0]
 8004c26:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8004c2a:	fb01 f202 	mul.w	r2, r1, r2
 8004c2e:	fbb3 f3f2 	udiv	r3, r3, r2
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8004c32:	6821      	ldr	r1, [r4, #0]
 8004c34:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
 8004c38:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8004c3c:	f8c1 2418 	str.w	r2, [r1, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8004c40:	6821      	ldr	r1, [r4, #0]
 8004c42:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
 8004c46:	4313      	orrs	r3, r2
 8004c48:	f8c1 3418 	str.w	r3, [r1, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 8004c4c:	6823      	ldr	r3, [r4, #0]
 8004c4e:	2000      	movs	r0, #0
 8004c50:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8004c54:	6823      	ldr	r3, [r4, #0]
 8004c56:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8004c5a:	61a0      	str	r0, [r4, #24]
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8004c5c:	6160      	str	r0, [r4, #20]
  hdsi->State = HAL_DSI_STATE_READY;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	7463      	strb	r3, [r4, #17]
  return HAL_OK;
 8004c62:	e76a      	b.n	8004b3a <HAL_DSI_Init+0x56>
    return HAL_ERROR;
 8004c64:	2001      	movs	r0, #1
}
 8004c66:	4770      	bx	lr
 8004c68:	fffc8603 	.word	0xfffc8603
 8004c6c:	003d0900 	.word	0x003d0900

08004c70 <HAL_DSI_MspDeInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspDeInit could be implemented in the user file
   */
}
 8004c70:	4770      	bx	lr

08004c72 <HAL_DSI_DeInit>:
  if (hdsi == NULL)
 8004c72:	2800      	cmp	r0, #0
 8004c74:	d04a      	beq.n	8004d0c <HAL_DSI_DeInit+0x9a>
{
 8004c76:	b530      	push	{r4, r5, lr}
 8004c78:	b085      	sub	sp, #20
 8004c7a:	4604      	mov	r4, r0
  hdsi->State = HAL_DSI_STATE_BUSY;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	7443      	strb	r3, [r0, #17]
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8004c80:	2500      	movs	r5, #0
 8004c82:	9500      	str	r5, [sp, #0]
 8004c84:	6802      	ldr	r2, [r0, #0]
 8004c86:	f8d2 3404 	ldr.w	r3, [r2, #1028]	; 0x404
 8004c8a:	f023 0308 	bic.w	r3, r3, #8
 8004c8e:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
 8004c92:	6803      	ldr	r3, [r0, #0]
 8004c94:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8004c98:	f002 0208 	and.w	r2, r2, #8
 8004c9c:	9200      	str	r2, [sp, #0]
 8004c9e:	9a00      	ldr	r2, [sp, #0]
  __HAL_DSI_DISABLE(hdsi);
 8004ca0:	9501      	str	r5, [sp, #4]
 8004ca2:	685a      	ldr	r2, [r3, #4]
 8004ca4:	f022 0201 	bic.w	r2, r2, #1
 8004ca8:	605a      	str	r2, [r3, #4]
 8004caa:	6803      	ldr	r3, [r0, #0]
 8004cac:	685a      	ldr	r2, [r3, #4]
 8004cae:	f002 0201 	and.w	r2, r2, #1
 8004cb2:	9201      	str	r2, [sp, #4]
 8004cb4:	9a01      	ldr	r2, [sp, #4]
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8004cb6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004cba:	f022 0206 	bic.w	r2, r2, #6
 8004cbe:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  __HAL_DSI_PLL_DISABLE(hdsi);
 8004cc2:	9502      	str	r5, [sp, #8]
 8004cc4:	6802      	ldr	r2, [r0, #0]
 8004cc6:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8004cca:	f023 0301 	bic.w	r3, r3, #1
 8004cce:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
 8004cd2:	6803      	ldr	r3, [r0, #0]
 8004cd4:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8004cd8:	f002 0201 	and.w	r2, r2, #1
 8004cdc:	9202      	str	r2, [sp, #8]
 8004cde:	9a02      	ldr	r2, [sp, #8]
  __HAL_DSI_REG_DISABLE(hdsi);
 8004ce0:	9503      	str	r5, [sp, #12]
 8004ce2:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8004ce6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004cea:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8004cee:	6803      	ldr	r3, [r0, #0]
 8004cf0:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8004cf4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cf8:	9303      	str	r3, [sp, #12]
 8004cfa:	9b03      	ldr	r3, [sp, #12]
  HAL_DSI_MspDeInit(hdsi);
 8004cfc:	f7ff ffb8 	bl	8004c70 <HAL_DSI_MspDeInit>
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8004d00:	6165      	str	r5, [r4, #20]
  hdsi->State = HAL_DSI_STATE_RESET;
 8004d02:	7465      	strb	r5, [r4, #17]
  __HAL_UNLOCK(hdsi);
 8004d04:	7425      	strb	r5, [r4, #16]
  return HAL_OK;
 8004d06:	4628      	mov	r0, r5
}
 8004d08:	b005      	add	sp, #20
 8004d0a:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8004d0c:	2001      	movs	r0, #1
}
 8004d0e:	4770      	bx	lr

08004d10 <HAL_DSI_ConfigVideoMode>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004d10:	7c02      	ldrb	r2, [r0, #16]
 8004d12:	2a01      	cmp	r2, #1
 8004d14:	f000 8123 	beq.w	8004f5e <HAL_DSI_ConfigVideoMode+0x24e>
{
 8004d18:	b430      	push	{r4, r5}
 8004d1a:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	7402      	strb	r2, [r0, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8004d20:	6800      	ldr	r0, [r0, #0]
 8004d22:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8004d24:	f022 0201 	bic.w	r2, r2, #1
 8004d28:	6342      	str	r2, [r0, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8004d2a:	6818      	ldr	r0, [r3, #0]
 8004d2c:	f8d0 2400 	ldr.w	r2, [r0, #1024]	; 0x400
 8004d30:	f022 0201 	bic.w	r2, r2, #1
 8004d34:	f8c0 2400 	str.w	r2, [r0, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8004d38:	6818      	ldr	r0, [r3, #0]
 8004d3a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004d3c:	f022 0203 	bic.w	r2, r2, #3
 8004d40:	6382      	str	r2, [r0, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8004d42:	6818      	ldr	r0, [r3, #0]
 8004d44:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004d46:	68cc      	ldr	r4, [r1, #12]
 8004d48:	4322      	orrs	r2, r4
 8004d4a:	6382      	str	r2, [r0, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8004d4c:	6818      	ldr	r0, [r3, #0]
 8004d4e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004d50:	4a84      	ldr	r2, [pc, #528]	; (8004f64 <HAL_DSI_ConfigVideoMode+0x254>)
 8004d52:	4022      	ands	r2, r4
 8004d54:	63c2      	str	r2, [r0, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8004d56:	6818      	ldr	r0, [r3, #0]
 8004d58:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8004d5a:	690c      	ldr	r4, [r1, #16]
 8004d5c:	4322      	orrs	r2, r4
 8004d5e:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8004d60:	6818      	ldr	r0, [r3, #0]
 8004d62:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004d64:	4c80      	ldr	r4, [pc, #512]	; (8004f68 <HAL_DSI_ConfigVideoMode+0x258>)
 8004d66:	4022      	ands	r2, r4
 8004d68:	6402      	str	r2, [r0, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8004d6a:	6818      	ldr	r0, [r3, #0]
 8004d6c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004d6e:	694d      	ldr	r5, [r1, #20]
 8004d70:	432a      	orrs	r2, r5
 8004d72:	6402      	str	r2, [r0, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8004d74:	6818      	ldr	r0, [r3, #0]
 8004d76:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004d78:	4022      	ands	r2, r4
 8004d7a:	6442      	str	r2, [r0, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8004d7c:	6818      	ldr	r0, [r3, #0]
 8004d7e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004d80:	698c      	ldr	r4, [r1, #24]
 8004d82:	4322      	orrs	r2, r4
 8004d84:	6442      	str	r2, [r0, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8004d86:	6818      	ldr	r0, [r3, #0]
 8004d88:	68c2      	ldr	r2, [r0, #12]
 8004d8a:	f022 0203 	bic.w	r2, r2, #3
 8004d8e:	60c2      	str	r2, [r0, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8004d90:	6818      	ldr	r0, [r3, #0]
 8004d92:	68c2      	ldr	r2, [r0, #12]
 8004d94:	680c      	ldr	r4, [r1, #0]
 8004d96:	4322      	orrs	r2, r4
 8004d98:	60c2      	str	r2, [r0, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8004d9a:	6818      	ldr	r0, [r3, #0]
 8004d9c:	6942      	ldr	r2, [r0, #20]
 8004d9e:	f022 0207 	bic.w	r2, r2, #7
 8004da2:	6142      	str	r2, [r0, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8004da4:	681c      	ldr	r4, [r3, #0]
 8004da6:	6960      	ldr	r0, [r4, #20]
 8004da8:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8004daa:	6a0d      	ldr	r5, [r1, #32]
 8004dac:	432a      	orrs	r2, r5
 8004dae:	69cd      	ldr	r5, [r1, #28]
 8004db0:	432a      	orrs	r2, r5
 8004db2:	4302      	orrs	r2, r0
 8004db4:	6162      	str	r2, [r4, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8004db6:	6818      	ldr	r0, [r3, #0]
 8004db8:	6902      	ldr	r2, [r0, #16]
 8004dba:	f022 020f 	bic.w	r2, r2, #15
 8004dbe:	6102      	str	r2, [r0, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8004dc0:	6818      	ldr	r0, [r3, #0]
 8004dc2:	6902      	ldr	r2, [r0, #16]
 8004dc4:	684c      	ldr	r4, [r1, #4]
 8004dc6:	4322      	orrs	r2, r4
 8004dc8:	6102      	str	r2, [r0, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8004dca:	6818      	ldr	r0, [r3, #0]
 8004dcc:	f8d0 2400 	ldr.w	r2, [r0, #1024]	; 0x400
 8004dd0:	f022 020e 	bic.w	r2, r2, #14
 8004dd4:	f8c0 2400 	str.w	r2, [r0, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8004dd8:	6818      	ldr	r0, [r3, #0]
 8004dda:	f8d0 2400 	ldr.w	r2, [r0, #1024]	; 0x400
 8004dde:	684c      	ldr	r4, [r1, #4]
 8004de0:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8004de4:	f8c0 2400 	str.w	r2, [r0, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8004de8:	684a      	ldr	r2, [r1, #4]
 8004dea:	2a03      	cmp	r2, #3
 8004dec:	f000 80ac 	beq.w	8004f48 <HAL_DSI_ConfigVideoMode+0x238>
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8004df0:	6818      	ldr	r0, [r3, #0]
 8004df2:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8004df4:	4c5d      	ldr	r4, [pc, #372]	; (8004f6c <HAL_DSI_ConfigVideoMode+0x25c>)
 8004df6:	4022      	ands	r2, r4
 8004df8:	6482      	str	r2, [r0, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8004dfa:	6818      	ldr	r0, [r3, #0]
 8004dfc:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8004dfe:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8004e00:	432a      	orrs	r2, r5
 8004e02:	6482      	str	r2, [r0, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8004e04:	6818      	ldr	r0, [r3, #0]
 8004e06:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8004e08:	4022      	ands	r2, r4
 8004e0a:	64c2      	str	r2, [r0, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8004e0c:	6818      	ldr	r0, [r3, #0]
 8004e0e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8004e10:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8004e12:	4322      	orrs	r2, r4
 8004e14:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8004e16:	6818      	ldr	r0, [r3, #0]
 8004e18:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8004e1a:	4a55      	ldr	r2, [pc, #340]	; (8004f70 <HAL_DSI_ConfigVideoMode+0x260>)
 8004e1c:	4022      	ands	r2, r4
 8004e1e:	6502      	str	r2, [r0, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8004e20:	6818      	ldr	r0, [r3, #0]
 8004e22:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8004e24:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 8004e26:	4322      	orrs	r2, r4
 8004e28:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8004e2a:	681c      	ldr	r4, [r3, #0]
 8004e2c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004e2e:	4851      	ldr	r0, [pc, #324]	; (8004f74 <HAL_DSI_ConfigVideoMode+0x264>)
 8004e30:	4002      	ands	r2, r0
 8004e32:	6562      	str	r2, [r4, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8004e34:	681c      	ldr	r4, [r3, #0]
 8004e36:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004e38:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8004e3a:	432a      	orrs	r2, r5
 8004e3c:	6562      	str	r2, [r4, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8004e3e:	681c      	ldr	r4, [r3, #0]
 8004e40:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8004e42:	4002      	ands	r2, r0
 8004e44:	65a2      	str	r2, [r4, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8004e46:	681c      	ldr	r4, [r3, #0]
 8004e48:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8004e4a:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 8004e4c:	432a      	orrs	r2, r5
 8004e4e:	65a2      	str	r2, [r4, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8004e50:	681c      	ldr	r4, [r3, #0]
 8004e52:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004e54:	4002      	ands	r2, r0
 8004e56:	65e2      	str	r2, [r4, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8004e58:	6818      	ldr	r0, [r3, #0]
 8004e5a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8004e5c:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8004e5e:	4322      	orrs	r2, r4
 8004e60:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8004e62:	6818      	ldr	r0, [r3, #0]
 8004e64:	6e04      	ldr	r4, [r0, #96]	; 0x60
 8004e66:	4a3f      	ldr	r2, [pc, #252]	; (8004f64 <HAL_DSI_ConfigVideoMode+0x254>)
 8004e68:	4022      	ands	r2, r4
 8004e6a:	6602      	str	r2, [r0, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8004e6c:	6818      	ldr	r0, [r3, #0]
 8004e6e:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8004e70:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 8004e72:	4322      	orrs	r2, r4
 8004e74:	6602      	str	r2, [r0, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8004e76:	6818      	ldr	r0, [r3, #0]
 8004e78:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004e7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e7e:	6382      	str	r2, [r0, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8004e80:	6818      	ldr	r0, [r3, #0]
 8004e82:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004e84:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 8004e86:	4322      	orrs	r2, r4
 8004e88:	6382      	str	r2, [r0, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8004e8a:	6818      	ldr	r0, [r3, #0]
 8004e8c:	6982      	ldr	r2, [r0, #24]
 8004e8e:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8004e92:	6182      	str	r2, [r0, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8004e94:	6818      	ldr	r0, [r3, #0]
 8004e96:	6982      	ldr	r2, [r0, #24]
 8004e98:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 8004e9a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8004e9e:	6182      	str	r2, [r0, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8004ea0:	6818      	ldr	r0, [r3, #0]
 8004ea2:	6982      	ldr	r2, [r0, #24]
 8004ea4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004ea8:	6182      	str	r2, [r0, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8004eaa:	6818      	ldr	r0, [r3, #0]
 8004eac:	6982      	ldr	r2, [r0, #24]
 8004eae:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8004eb0:	4322      	orrs	r2, r4
 8004eb2:	6182      	str	r2, [r0, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8004eb4:	6818      	ldr	r0, [r3, #0]
 8004eb6:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004eb8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ebc:	6382      	str	r2, [r0, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8004ebe:	6818      	ldr	r0, [r3, #0]
 8004ec0:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004ec2:	6d0c      	ldr	r4, [r1, #80]	; 0x50
 8004ec4:	4322      	orrs	r2, r4
 8004ec6:	6382      	str	r2, [r0, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8004ec8:	6818      	ldr	r0, [r3, #0]
 8004eca:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004ecc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ed0:	6382      	str	r2, [r0, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8004ed2:	6818      	ldr	r0, [r3, #0]
 8004ed4:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004ed6:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8004ed8:	4322      	orrs	r2, r4
 8004eda:	6382      	str	r2, [r0, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8004edc:	6818      	ldr	r0, [r3, #0]
 8004ede:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004ee0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ee4:	6382      	str	r2, [r0, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8004ee6:	6818      	ldr	r0, [r3, #0]
 8004ee8:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004eea:	6d8c      	ldr	r4, [r1, #88]	; 0x58
 8004eec:	4322      	orrs	r2, r4
 8004eee:	6382      	str	r2, [r0, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8004ef0:	6818      	ldr	r0, [r3, #0]
 8004ef2:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004ef4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ef8:	6382      	str	r2, [r0, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8004efa:	6818      	ldr	r0, [r3, #0]
 8004efc:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004efe:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
 8004f00:	4322      	orrs	r2, r4
 8004f02:	6382      	str	r2, [r0, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8004f04:	6818      	ldr	r0, [r3, #0]
 8004f06:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004f08:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004f0c:	6382      	str	r2, [r0, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8004f0e:	6818      	ldr	r0, [r3, #0]
 8004f10:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004f12:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 8004f14:	4322      	orrs	r2, r4
 8004f16:	6382      	str	r2, [r0, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8004f18:	6818      	ldr	r0, [r3, #0]
 8004f1a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004f1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f20:	6382      	str	r2, [r0, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8004f22:	6818      	ldr	r0, [r3, #0]
 8004f24:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004f26:	6e4c      	ldr	r4, [r1, #100]	; 0x64
 8004f28:	4322      	orrs	r2, r4
 8004f2a:	6382      	str	r2, [r0, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8004f2c:	6818      	ldr	r0, [r3, #0]
 8004f2e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004f30:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f34:	6382      	str	r2, [r0, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8004f36:	6818      	ldr	r0, [r3, #0]
 8004f38:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004f3a:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	6382      	str	r2, [r0, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004f40:	2000      	movs	r0, #0
 8004f42:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
}
 8004f44:	bc30      	pop	{r4, r5}
 8004f46:	4770      	bx	lr
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8004f48:	6818      	ldr	r0, [r3, #0]
 8004f4a:	6902      	ldr	r2, [r0, #16]
 8004f4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f50:	6102      	str	r2, [r0, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8004f52:	6818      	ldr	r0, [r3, #0]
 8004f54:	6902      	ldr	r2, [r0, #16]
 8004f56:	688c      	ldr	r4, [r1, #8]
 8004f58:	4322      	orrs	r2, r4
 8004f5a:	6102      	str	r2, [r0, #16]
 8004f5c:	e748      	b.n	8004df0 <HAL_DSI_ConfigVideoMode+0xe0>
  __HAL_LOCK(hdsi);
 8004f5e:	2002      	movs	r0, #2
}
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	ffffc000 	.word	0xffffc000
 8004f68:	ffffe000 	.word	0xffffe000
 8004f6c:	fffff000 	.word	0xfffff000
 8004f70:	ffff8000 	.word	0xffff8000
 8004f74:	fffffc00 	.word	0xfffffc00

08004f78 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004f78:	7c02      	ldrb	r2, [r0, #16]
 8004f7a:	2a01      	cmp	r2, #1
 8004f7c:	d021      	beq.n	8004fc2 <HAL_DSI_Start+0x4a>
{
 8004f7e:	b082      	sub	sp, #8
 8004f80:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8004f82:	2201      	movs	r2, #1
 8004f84:	7402      	strb	r2, [r0, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8004f86:	2000      	movs	r0, #0
 8004f88:	9000      	str	r0, [sp, #0]
 8004f8a:	6819      	ldr	r1, [r3, #0]
 8004f8c:	684a      	ldr	r2, [r1, #4]
 8004f8e:	f042 0201 	orr.w	r2, r2, #1
 8004f92:	604a      	str	r2, [r1, #4]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	6851      	ldr	r1, [r2, #4]
 8004f98:	f001 0101 	and.w	r1, r1, #1
 8004f9c:	9100      	str	r1, [sp, #0]
 8004f9e:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8004fa0:	9001      	str	r0, [sp, #4]
 8004fa2:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
 8004fa6:	f041 0108 	orr.w	r1, r1, #8
 8004faa:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 8004fb4:	f002 0208 	and.w	r2, r2, #8
 8004fb8:	9201      	str	r2, [sp, #4]
 8004fba:	9a01      	ldr	r2, [sp, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004fbc:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
}
 8004fbe:	b002      	add	sp, #8
 8004fc0:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8004fc2:	2002      	movs	r0, #2
}
 8004fc4:	4770      	bx	lr

08004fc6 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8004fc6:	b510      	push	{r4, lr}
 8004fc8:	b082      	sub	sp, #8
 8004fca:	4604      	mov	r4, r0
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8004fcc:	7c00      	ldrb	r0, [r0, #16]
 8004fce:	2801      	cmp	r0, #1
 8004fd0:	d00a      	beq.n	8004fe8 <HAL_DSI_ShortWrite+0x22>
 8004fd2:	2001      	movs	r0, #1
 8004fd4:	7420      	strb	r0, [r4, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8004fd6:	9804      	ldr	r0, [sp, #16]
 8004fd8:	9000      	str	r0, [sp, #0]
 8004fda:	4620      	mov	r0, r4
 8004fdc:	f7ff fd5f 	bl	8004a9e <DSI_ShortWrite>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	7423      	strb	r3, [r4, #16]

  return status;
}
 8004fe4:	b002      	add	sp, #8
 8004fe6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdsi);
 8004fe8:	2002      	movs	r0, #2
 8004fea:	e7fb      	b.n	8004fe4 <HAL_DSI_ShortWrite+0x1e>

08004fec <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8004fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ff0:	b082      	sub	sp, #8
 8004ff2:	461d      	mov	r5, r3
 8004ff4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8004ff6:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8004ffa:	7c03      	ldrb	r3, [r0, #16]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d053      	beq.n	80050a8 <HAL_DSI_LongWrite+0xbc>
 8005000:	4604      	mov	r4, r0
 8005002:	468a      	mov	sl, r1
 8005004:	4617      	mov	r7, r2
 8005006:	2301      	movs	r3, #1
 8005008:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 800500a:	f7ff f895 	bl	8004138 <HAL_GetTick>
 800500e:	4681      	mov	r9, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8005010:	6822      	ldr	r2, [r4, #0]
 8005012:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8005014:	f013 0f01 	tst.w	r3, #1
 8005018:	d10a      	bne.n	8005030 <HAL_DSI_LongWrite+0x44>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800501a:	f7ff f88d 	bl	8004138 <HAL_GetTick>
 800501e:	eba0 0009 	sub.w	r0, r0, r9
 8005022:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005026:	d9f3      	bls.n	8005010 <HAL_DSI_LongWrite+0x24>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8005028:	2300      	movs	r3, #0
 800502a:	7423      	strb	r3, [r4, #16]

      return HAL_TIMEOUT;
 800502c:	2003      	movs	r0, #3
 800502e:	e038      	b.n	80050a2 <HAL_DSI_LongWrite+0xb6>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8005030:	46ac      	mov	ip, r5
 8005032:	2d03      	cmp	r5, #3
 8005034:	bf28      	it	cs
 8005036:	f04f 0c03 	movcs.w	ip, #3

  for (count = 0U; count < nbBytes; count++)
 800503a:	2300      	movs	r3, #0
 800503c:	e005      	b.n	800504a <HAL_DSI_LongWrite+0x5e>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800503e:	f818 1003 	ldrb.w	r1, [r8, r3]
 8005042:	3301      	adds	r3, #1
 8005044:	00d8      	lsls	r0, r3, #3
 8005046:	4081      	lsls	r1, r0
 8005048:	430e      	orrs	r6, r1
  for (count = 0U; count < nbBytes; count++)
 800504a:	4563      	cmp	r3, ip
 800504c:	d3f7      	bcc.n	800503e <HAL_DSI_LongWrite+0x52>
  }
  hdsi->Instance->GPDR = fifoword;
 800504e:	6716      	str	r6, [r2, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8005050:	eba5 060c 	sub.w	r6, r5, ip
  pparams += nbBytes;
 8005054:	eb08 000c 	add.w	r0, r8, ip
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8005058:	e00f      	b.n	800507a <HAL_DSI_LongWrite+0x8e>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
    fifoword = 0U;
    for (count = 0U; count < nbBytes; count++)
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800505a:	f810 e00c 	ldrb.w	lr, [r0, ip]
 800505e:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8005062:	fa0e fe02 	lsl.w	lr, lr, r2
 8005066:	ea43 030e 	orr.w	r3, r3, lr
    for (count = 0U; count < nbBytes; count++)
 800506a:	f10c 0c01 	add.w	ip, ip, #1
 800506e:	458c      	cmp	ip, r1
 8005070:	d3f3      	bcc.n	800505a <HAL_DSI_LongWrite+0x6e>
    }
    hdsi->Instance->GPDR = fifoword;
 8005072:	6822      	ldr	r2, [r4, #0]
 8005074:	6713      	str	r3, [r2, #112]	; 0x70

    uicounter -= nbBytes;
 8005076:	1a76      	subs	r6, r6, r1
    pparams += nbBytes;
 8005078:	4408      	add	r0, r1
  while (uicounter != 0U)
 800507a:	b136      	cbz	r6, 800508a <HAL_DSI_LongWrite+0x9e>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800507c:	4631      	mov	r1, r6
 800507e:	2e04      	cmp	r6, #4
 8005080:	bf28      	it	cs
 8005082:	2104      	movcs	r1, #4
    fifoword = 0U;
 8005084:	2300      	movs	r3, #0
    for (count = 0U; count < nbBytes; count++)
 8005086:	469c      	mov	ip, r3
 8005088:	e7f1      	b.n	800506e <HAL_DSI_LongWrite+0x82>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 800508a:	1c6b      	adds	r3, r5, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 800508c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005090:	9200      	str	r2, [sp, #0]
 8005092:	b2db      	uxtb	r3, r3
 8005094:	463a      	mov	r2, r7
 8005096:	4651      	mov	r1, sl
 8005098:	6820      	ldr	r0, [r4, #0]
 800509a:	f7ff fcf7 	bl	8004a8c <DSI_ConfigPacketHeader>
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800509e:	2000      	movs	r0, #0
 80050a0:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 80050a2:	b002      	add	sp, #8
 80050a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hdsi);
 80050a8:	2002      	movs	r0, #2
 80050aa:	e7fa      	b.n	80050a2 <HAL_DSI_LongWrite+0xb6>

080050ac <HAL_GPIO_Init>:
	assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
	assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
	assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

	/* Configure the port pins */
	for (position = 0; position < GPIO_NUMBER; position++) {
 80050ac:	2300      	movs	r3, #0
 80050ae:	2b0f      	cmp	r3, #15
 80050b0:	f200 80f4 	bhi.w	800529c <HAL_GPIO_Init+0x1f0>
void HAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init) {
 80050b4:	b570      	push	{r4, r5, r6, lr}
 80050b6:	b082      	sub	sp, #8
 80050b8:	e066      	b.n	8005188 <HAL_GPIO_Init+0xdc>
			if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT)
					|| ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)) {
				/* Check the Speed parameter */
				assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
				/* Configure the IO Speed */
				temp = GPIOx->OSPEEDR;
 80050ba:	6885      	ldr	r5, [r0, #8]
				temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80050bc:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80050c0:	2403      	movs	r4, #3
 80050c2:	fa04 f40e 	lsl.w	r4, r4, lr
 80050c6:	ea25 0504 	bic.w	r5, r5, r4
				temp |= (GPIO_Init->Speed << (position * 2));
 80050ca:	68cc      	ldr	r4, [r1, #12]
 80050cc:	fa04 f40e 	lsl.w	r4, r4, lr
 80050d0:	432c      	orrs	r4, r5
				GPIOx->OSPEEDR = temp;
 80050d2:	6084      	str	r4, [r0, #8]

				/* Configure the IO Output Type */
				temp = GPIOx->OTYPER;
 80050d4:	6844      	ldr	r4, [r0, #4]
				temp &= ~(GPIO_OTYPER_OT_0 << position);
 80050d6:	ea24 0402 	bic.w	r4, r4, r2
				temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos)
 80050da:	684a      	ldr	r2, [r1, #4]
 80050dc:	f3c2 1200 	ubfx	r2, r2, #4, #1
						<< position);
 80050e0:	409a      	lsls	r2, r3
				temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos)
 80050e2:	4322      	orrs	r2, r4
				GPIOx->OTYPER = temp;
 80050e4:	6042      	str	r2, [r0, #4]
 80050e6:	e05d      	b.n	80051a4 <HAL_GPIO_Init+0xf8>
			if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
				/* Check the Alternate function parameter */
				assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

				/* Configure Alternate function mapped with the current IO */
				temp = GPIOx->AFR[position >> 3];
 80050e8:	08dc      	lsrs	r4, r3, #3
 80050ea:	3408      	adds	r4, #8
 80050ec:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
				temp &= ~((uint32_t) 0xF
						<< ((uint32_t) (position & (uint32_t) 0x07) * 4));
 80050f0:	f003 0507 	and.w	r5, r3, #7
 80050f4:	00ad      	lsls	r5, r5, #2
 80050f6:	f04f 0e0f 	mov.w	lr, #15
 80050fa:	fa0e fe05 	lsl.w	lr, lr, r5
				temp &= ~((uint32_t) 0xF
 80050fe:	ea22 0e0e 	bic.w	lr, r2, lr
				temp |= ((uint32_t) (GPIO_Init->Alternate)
 8005102:	690a      	ldr	r2, [r1, #16]
						<< (((uint32_t) position & (uint32_t) 0x07) * 4));
 8005104:	40aa      	lsls	r2, r5
				temp |= ((uint32_t) (GPIO_Init->Alternate)
 8005106:	ea42 020e 	orr.w	r2, r2, lr
				GPIOx->AFR[position >> 3] = temp;
 800510a:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 800510e:	e05d      	b.n	80051cc <HAL_GPIO_Init+0x120>
				/* Enable SYSCFG Clock */
				__HAL_RCC_SYSCFG_CLK_ENABLE();

				temp = SYSCFG->EXTICR[position >> 2];
				temp &= ~(((uint32_t) 0x0F) << (4 * (position & 0x03)));
				temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 8005110:	2209      	movs	r2, #9
 8005112:	e000      	b.n	8005116 <HAL_GPIO_Init+0x6a>
 8005114:	2200      	movs	r2, #0
						<< (4 * (position & 0x03)));
 8005116:	fa02 f20e 	lsl.w	r2, r2, lr
				temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 800511a:	432a      	orrs	r2, r5
				SYSCFG->EXTICR[position >> 2] = temp;
 800511c:	3402      	adds	r4, #2
 800511e:	4d60      	ldr	r5, [pc, #384]	; (80052a0 <HAL_GPIO_Init+0x1f4>)
 8005120:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

				/* Clear Rising Falling edge configuration */
				temp = EXTI->RTSR;
 8005124:	4a5f      	ldr	r2, [pc, #380]	; (80052a4 <HAL_GPIO_Init+0x1f8>)
 8005126:	6894      	ldr	r4, [r2, #8]
				temp &= ~((uint32_t) iocurrent);
 8005128:	ea6f 020c 	mvn.w	r2, ip
 800512c:	ea24 050c 	bic.w	r5, r4, ip
				if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u) {
 8005130:	684e      	ldr	r6, [r1, #4]
 8005132:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 8005136:	d001      	beq.n	800513c <HAL_GPIO_Init+0x90>
					temp |= iocurrent;
 8005138:	ea4c 0504 	orr.w	r5, ip, r4
				}
				EXTI->RTSR = temp;
 800513c:	4c59      	ldr	r4, [pc, #356]	; (80052a4 <HAL_GPIO_Init+0x1f8>)
 800513e:	60a5      	str	r5, [r4, #8]

				temp = EXTI->FTSR;
 8005140:	68e4      	ldr	r4, [r4, #12]
				temp &= ~((uint32_t) iocurrent);
 8005142:	ea02 0504 	and.w	r5, r2, r4
				if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u) {
 8005146:	684e      	ldr	r6, [r1, #4]
 8005148:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 800514c:	d001      	beq.n	8005152 <HAL_GPIO_Init+0xa6>
					temp |= iocurrent;
 800514e:	ea4c 0504 	orr.w	r5, ip, r4
				}
				EXTI->FTSR = temp;
 8005152:	4c54      	ldr	r4, [pc, #336]	; (80052a4 <HAL_GPIO_Init+0x1f8>)
 8005154:	60e5      	str	r5, [r4, #12]

				temp = EXTI->EMR;
 8005156:	6864      	ldr	r4, [r4, #4]
				temp &= ~((uint32_t) iocurrent);
 8005158:	ea02 0504 	and.w	r5, r2, r4
				if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u) {
 800515c:	684e      	ldr	r6, [r1, #4]
 800515e:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8005162:	d001      	beq.n	8005168 <HAL_GPIO_Init+0xbc>
					temp |= iocurrent;
 8005164:	ea4c 0504 	orr.w	r5, ip, r4
				}
				EXTI->EMR = temp;
 8005168:	4c4e      	ldr	r4, [pc, #312]	; (80052a4 <HAL_GPIO_Init+0x1f8>)
 800516a:	6065      	str	r5, [r4, #4]

				/* Clear EXTI line configuration */
				temp = EXTI->IMR;
 800516c:	6824      	ldr	r4, [r4, #0]
				temp &= ~((uint32_t) iocurrent);
 800516e:	4022      	ands	r2, r4
				if ((GPIO_Init->Mode & EXTI_IT) != 0x00u) {
 8005170:	684d      	ldr	r5, [r1, #4]
 8005172:	f415 3f80 	tst.w	r5, #65536	; 0x10000
 8005176:	d001      	beq.n	800517c <HAL_GPIO_Init+0xd0>
					temp |= iocurrent;
 8005178:	ea4c 0204 	orr.w	r2, ip, r4
				}
				EXTI->IMR = temp;
 800517c:	4c49      	ldr	r4, [pc, #292]	; (80052a4 <HAL_GPIO_Init+0x1f8>)
 800517e:	6022      	str	r2, [r4, #0]
	for (position = 0; position < GPIO_NUMBER; position++) {
 8005180:	3301      	adds	r3, #1
 8005182:	2b0f      	cmp	r3, #15
 8005184:	f200 8088 	bhi.w	8005298 <HAL_GPIO_Init+0x1ec>
		ioposition = ((uint32_t) 0x01) << position;
 8005188:	2201      	movs	r2, #1
 800518a:	409a      	lsls	r2, r3
		iocurrent = (uint32_t) (GPIO_Init->Pin) & ioposition;
 800518c:	680c      	ldr	r4, [r1, #0]
 800518e:	ea04 0c02 	and.w	ip, r4, r2
		if (iocurrent == ioposition) {
 8005192:	ea32 0404 	bics.w	r4, r2, r4
 8005196:	d1f3      	bne.n	8005180 <HAL_GPIO_Init+0xd4>
			if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT)
 8005198:	684c      	ldr	r4, [r1, #4]
 800519a:	f004 0403 	and.w	r4, r4, #3
					|| ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)) {
 800519e:	3c01      	subs	r4, #1
			if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT)
 80051a0:	2c01      	cmp	r4, #1
 80051a2:	d98a      	bls.n	80050ba <HAL_GPIO_Init+0xe>
			if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) {
 80051a4:	684a      	ldr	r2, [r1, #4]
 80051a6:	f002 0203 	and.w	r2, r2, #3
 80051aa:	2a03      	cmp	r2, #3
 80051ac:	d009      	beq.n	80051c2 <HAL_GPIO_Init+0x116>
				temp = GPIOx->PUPDR;
 80051ae:	68c4      	ldr	r4, [r0, #12]
				temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80051b0:	005d      	lsls	r5, r3, #1
 80051b2:	2203      	movs	r2, #3
 80051b4:	40aa      	lsls	r2, r5
 80051b6:	ea24 0402 	bic.w	r4, r4, r2
				temp |= ((GPIO_Init->Pull) << (position * 2));
 80051ba:	688a      	ldr	r2, [r1, #8]
 80051bc:	40aa      	lsls	r2, r5
 80051be:	4322      	orrs	r2, r4
				GPIOx->PUPDR = temp;
 80051c0:	60c2      	str	r2, [r0, #12]
			if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
 80051c2:	684a      	ldr	r2, [r1, #4]
 80051c4:	f002 0203 	and.w	r2, r2, #3
 80051c8:	2a02      	cmp	r2, #2
 80051ca:	d08d      	beq.n	80050e8 <HAL_GPIO_Init+0x3c>
			temp = GPIOx->MODER;
 80051cc:	6804      	ldr	r4, [r0, #0]
			temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80051ce:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80051d2:	2203      	movs	r2, #3
 80051d4:	fa02 f20e 	lsl.w	r2, r2, lr
 80051d8:	ea24 0402 	bic.w	r4, r4, r2
			temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80051dc:	684a      	ldr	r2, [r1, #4]
 80051de:	f002 0203 	and.w	r2, r2, #3
 80051e2:	fa02 f20e 	lsl.w	r2, r2, lr
 80051e6:	4322      	orrs	r2, r4
			GPIOx->MODER = temp;
 80051e8:	6002      	str	r2, [r0, #0]
			if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u) {
 80051ea:	684a      	ldr	r2, [r1, #4]
 80051ec:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 80051f0:	d0c6      	beq.n	8005180 <HAL_GPIO_Init+0xd4>
				__HAL_RCC_SYSCFG_CLK_ENABLE();
 80051f2:	4a2d      	ldr	r2, [pc, #180]	; (80052a8 <HAL_GPIO_Init+0x1fc>)
 80051f4:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80051f6:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80051fa:	6454      	str	r4, [r2, #68]	; 0x44
 80051fc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80051fe:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005202:	9201      	str	r2, [sp, #4]
 8005204:	9a01      	ldr	r2, [sp, #4]
				temp = SYSCFG->EXTICR[position >> 2];
 8005206:	089c      	lsrs	r4, r3, #2
 8005208:	1ca5      	adds	r5, r4, #2
 800520a:	4a25      	ldr	r2, [pc, #148]	; (80052a0 <HAL_GPIO_Init+0x1f4>)
 800520c:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
				temp &= ~(((uint32_t) 0x0F) << (4 * (position & 0x03)));
 8005210:	f003 0e03 	and.w	lr, r3, #3
 8005214:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8005218:	220f      	movs	r2, #15
 800521a:	fa02 f20e 	lsl.w	r2, r2, lr
 800521e:	ea25 0502 	bic.w	r5, r5, r2
				temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 8005222:	4a22      	ldr	r2, [pc, #136]	; (80052ac <HAL_GPIO_Init+0x200>)
 8005224:	4290      	cmp	r0, r2
 8005226:	f43f af75 	beq.w	8005114 <HAL_GPIO_Init+0x68>
 800522a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800522e:	4290      	cmp	r0, r2
 8005230:	d022      	beq.n	8005278 <HAL_GPIO_Init+0x1cc>
 8005232:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005236:	4290      	cmp	r0, r2
 8005238:	d020      	beq.n	800527c <HAL_GPIO_Init+0x1d0>
 800523a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800523e:	4290      	cmp	r0, r2
 8005240:	d01e      	beq.n	8005280 <HAL_GPIO_Init+0x1d4>
 8005242:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005246:	4290      	cmp	r0, r2
 8005248:	d01c      	beq.n	8005284 <HAL_GPIO_Init+0x1d8>
 800524a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800524e:	4290      	cmp	r0, r2
 8005250:	d01a      	beq.n	8005288 <HAL_GPIO_Init+0x1dc>
 8005252:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005256:	4290      	cmp	r0, r2
 8005258:	d018      	beq.n	800528c <HAL_GPIO_Init+0x1e0>
 800525a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800525e:	4290      	cmp	r0, r2
 8005260:	d016      	beq.n	8005290 <HAL_GPIO_Init+0x1e4>
 8005262:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005266:	4290      	cmp	r0, r2
 8005268:	d014      	beq.n	8005294 <HAL_GPIO_Init+0x1e8>
 800526a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800526e:	4290      	cmp	r0, r2
 8005270:	f43f af4e 	beq.w	8005110 <HAL_GPIO_Init+0x64>
 8005274:	220a      	movs	r2, #10
 8005276:	e74e      	b.n	8005116 <HAL_GPIO_Init+0x6a>
 8005278:	2201      	movs	r2, #1
 800527a:	e74c      	b.n	8005116 <HAL_GPIO_Init+0x6a>
 800527c:	2202      	movs	r2, #2
 800527e:	e74a      	b.n	8005116 <HAL_GPIO_Init+0x6a>
 8005280:	2203      	movs	r2, #3
 8005282:	e748      	b.n	8005116 <HAL_GPIO_Init+0x6a>
 8005284:	2204      	movs	r2, #4
 8005286:	e746      	b.n	8005116 <HAL_GPIO_Init+0x6a>
 8005288:	2205      	movs	r2, #5
 800528a:	e744      	b.n	8005116 <HAL_GPIO_Init+0x6a>
 800528c:	2206      	movs	r2, #6
 800528e:	e742      	b.n	8005116 <HAL_GPIO_Init+0x6a>
 8005290:	2207      	movs	r2, #7
 8005292:	e740      	b.n	8005116 <HAL_GPIO_Init+0x6a>
 8005294:	2208      	movs	r2, #8
 8005296:	e73e      	b.n	8005116 <HAL_GPIO_Init+0x6a>
			}
		}
	}
}
 8005298:	b002      	add	sp, #8
 800529a:	bd70      	pop	{r4, r5, r6, pc}
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	40013800 	.word	0x40013800
 80052a4:	40013c00 	.word	0x40013c00
 80052a8:	40023800 	.word	0x40023800
 80052ac:	40020000 	.word	0x40020000

080052b0 <HAL_GPIO_WritePin>:
		GPIO_PinState PinState) {
	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));
	assert_param(IS_GPIO_PIN_ACTION(PinState));

	if (PinState != GPIO_PIN_RESET) {
 80052b0:	b10a      	cbz	r2, 80052b6 <HAL_GPIO_WritePin+0x6>
		GPIOx->BSRR = GPIO_Pin;
 80052b2:	6181      	str	r1, [r0, #24]
 80052b4:	4770      	bx	lr
	} else {
		GPIOx->BSRR = (uint32_t) GPIO_Pin << 16;
 80052b6:	0409      	lsls	r1, r1, #16
 80052b8:	6181      	str	r1, [r0, #24]
	}
}
 80052ba:	4770      	bx	lr

080052bc <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80052bc:	6803      	ldr	r3, [r0, #0]
 80052be:	699a      	ldr	r2, [r3, #24]
 80052c0:	f012 0f02 	tst.w	r2, #2
 80052c4:	d001      	beq.n	80052ca <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 80052c6:	2200      	movs	r2, #0
 80052c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052ca:	6803      	ldr	r3, [r0, #0]
 80052cc:	699a      	ldr	r2, [r3, #24]
 80052ce:	f012 0f01 	tst.w	r2, #1
 80052d2:	d103      	bne.n	80052dc <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80052d4:	699a      	ldr	r2, [r3, #24]
 80052d6:	f042 0201 	orr.w	r2, r2, #1
 80052da:	619a      	str	r2, [r3, #24]
  }
}
 80052dc:	4770      	bx	lr

080052de <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80052de:	b410      	push	{r4}
 80052e0:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052e2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80052e6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80052ea:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052ec:	4321      	orrs	r1, r4
 80052ee:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80052f2:	6802      	ldr	r2, [r0, #0]
 80052f4:	6853      	ldr	r3, [r2, #4]
 80052f6:	0d64      	lsrs	r4, r4, #21
 80052f8:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 80052fc:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8005300:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8005304:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8005308:	f044 0403 	orr.w	r4, r4, #3
 800530c:	ea23 0304 	bic.w	r3, r3, r4
 8005310:	430b      	orrs	r3, r1
 8005312:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005314:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005318:	4770      	bx	lr

0800531a <I2C_IsErrorOccurred>:
{
 800531a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800531e:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 8005320:	6803      	ldr	r3, [r0, #0]
 8005322:	699e      	ldr	r6, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005324:	f016 0610 	ands.w	r6, r6, #16
 8005328:	d07e      	beq.n	8005428 <I2C_IsErrorOccurred+0x10e>
 800532a:	460d      	mov	r5, r1
 800532c:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800532e:	2210      	movs	r2, #16
 8005330:	61da      	str	r2, [r3, #28]
  uint32_t error_code = 0;
 8005332:	2600      	movs	r6, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005334:	4637      	mov	r7, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005336:	6823      	ldr	r3, [r4, #0]
 8005338:	6998      	ldr	r0, [r3, #24]
 800533a:	f010 0f20 	tst.w	r0, #32
 800533e:	d132      	bne.n	80053a6 <I2C_IsErrorOccurred+0x8c>
 8005340:	bb8f      	cbnz	r7, 80053a6 <I2C_IsErrorOccurred+0x8c>
      if (Timeout != HAL_MAX_DELAY)
 8005342:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005346:	d0f6      	beq.n	8005336 <I2C_IsErrorOccurred+0x1c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005348:	f7fe fef6 	bl	8004138 <HAL_GetTick>
 800534c:	eba0 0008 	sub.w	r0, r0, r8
 8005350:	42a8      	cmp	r0, r5
 8005352:	d801      	bhi.n	8005358 <I2C_IsErrorOccurred+0x3e>
 8005354:	2d00      	cmp	r5, #0
 8005356:	d1ee      	bne.n	8005336 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005358:	6821      	ldr	r1, [r4, #0]
 800535a:	684a      	ldr	r2, [r1, #4]
 800535c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
          tmp2 = hi2c->Mode;
 8005360:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8005364:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005366:	6988      	ldr	r0, [r1, #24]
 8005368:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800536c:	d004      	beq.n	8005378 <I2C_IsErrorOccurred+0x5e>
              (tmp2 != HAL_I2C_MODE_SLAVE))
 800536e:	3b20      	subs	r3, #32
 8005370:	bf18      	it	ne
 8005372:	2301      	movne	r3, #1
              (tmp1 != I2C_CR2_STOP) && \
 8005374:	b902      	cbnz	r2, 8005378 <I2C_IsErrorOccurred+0x5e>
 8005376:	b973      	cbnz	r3, 8005396 <I2C_IsErrorOccurred+0x7c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005378:	6823      	ldr	r3, [r4, #0]
 800537a:	699b      	ldr	r3, [r3, #24]
 800537c:	f013 0f20 	tst.w	r3, #32
 8005380:	d1d9      	bne.n	8005336 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005382:	f7fe fed9 	bl	8004138 <HAL_GetTick>
 8005386:	eba0 0008 	sub.w	r0, r0, r8
 800538a:	2819      	cmp	r0, #25
 800538c:	d9f4      	bls.n	8005378 <I2C_IsErrorOccurred+0x5e>
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800538e:	f046 0620 	orr.w	r6, r6, #32
              status = HAL_ERROR;
 8005392:	2701      	movs	r7, #1
              break;
 8005394:	e7cf      	b.n	8005336 <I2C_IsErrorOccurred+0x1c>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005396:	684b      	ldr	r3, [r1, #4]
 8005398:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800539c:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 800539e:	f7fe fecb 	bl	8004138 <HAL_GetTick>
 80053a2:	4680      	mov	r8, r0
 80053a4:	e7e8      	b.n	8005378 <I2C_IsErrorOccurred+0x5e>
    if (status == HAL_OK)
 80053a6:	b90f      	cbnz	r7, 80053ac <I2C_IsErrorOccurred+0x92>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053a8:	2220      	movs	r2, #32
 80053aa:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 80053ac:	f046 0604 	orr.w	r6, r6, #4
    status = HAL_ERROR;
 80053b0:	2501      	movs	r5, #1
  itflag = hi2c->Instance->ISR;
 80053b2:	6822      	ldr	r2, [r4, #0]
 80053b4:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80053b6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80053ba:	d005      	beq.n	80053c8 <I2C_IsErrorOccurred+0xae>
    error_code |= HAL_I2C_ERROR_BERR;
 80053bc:	f046 0601 	orr.w	r6, r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80053c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80053c4:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 80053c6:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80053c8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80053cc:	d006      	beq.n	80053dc <I2C_IsErrorOccurred+0xc2>
    error_code |= HAL_I2C_ERROR_OVR;
 80053ce:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80053d2:	6822      	ldr	r2, [r4, #0]
 80053d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80053d8:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 80053da:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80053dc:	f413 7f00 	tst.w	r3, #512	; 0x200
 80053e0:	d024      	beq.n	800542c <I2C_IsErrorOccurred+0x112>
    error_code |= HAL_I2C_ERROR_ARLO;
 80053e2:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80053e6:	6823      	ldr	r3, [r4, #0]
 80053e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053ec:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 80053ee:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 80053f0:	4620      	mov	r0, r4
 80053f2:	f7ff ff63 	bl	80052bc <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80053f6:	6822      	ldr	r2, [r4, #0]
 80053f8:	6853      	ldr	r3, [r2, #4]
 80053fa:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80053fe:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005402:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005406:	f023 0301 	bic.w	r3, r3, #1
 800540a:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 800540c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800540e:	4333      	orrs	r3, r6
 8005410:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005412:	2320      	movs	r3, #32
 8005414:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005418:	2300      	movs	r3, #0
 800541a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800541e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005422:	4628      	mov	r0, r5
 8005424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8005428:	2500      	movs	r5, #0
 800542a:	e7c2      	b.n	80053b2 <I2C_IsErrorOccurred+0x98>
  if (status != HAL_OK)
 800542c:	2d00      	cmp	r5, #0
 800542e:	d0f8      	beq.n	8005422 <I2C_IsErrorOccurred+0x108>
 8005430:	e7de      	b.n	80053f0 <I2C_IsErrorOccurred+0xd6>

08005432 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8005432:	b570      	push	{r4, r5, r6, lr}
 8005434:	4604      	mov	r4, r0
 8005436:	460d      	mov	r5, r1
 8005438:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800543a:	6823      	ldr	r3, [r4, #0]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	f013 0f02 	tst.w	r3, #2
 8005442:	d11d      	bne.n	8005480 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005444:	4632      	mov	r2, r6
 8005446:	4629      	mov	r1, r5
 8005448:	4620      	mov	r0, r4
 800544a:	f7ff ff66 	bl	800531a <I2C_IsErrorOccurred>
 800544e:	b9c8      	cbnz	r0, 8005484 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8005450:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005454:	d0f1      	beq.n	800543a <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005456:	f7fe fe6f 	bl	8004138 <HAL_GetTick>
 800545a:	1b80      	subs	r0, r0, r6
 800545c:	42a8      	cmp	r0, r5
 800545e:	d801      	bhi.n	8005464 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8005460:	2d00      	cmp	r5, #0
 8005462:	d1ea      	bne.n	800543a <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005464:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005466:	f043 0320 	orr.w	r3, r3, #32
 800546a:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800546c:	2320      	movs	r3, #32
 800546e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005472:	2300      	movs	r3, #0
 8005474:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8005478:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 800547c:	2001      	movs	r0, #1
 800547e:	e000      	b.n	8005482 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8005480:	2000      	movs	r0, #0
}
 8005482:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8005484:	2001      	movs	r0, #1
 8005486:	e7fc      	b.n	8005482 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08005488 <I2C_WaitOnFlagUntilTimeout>:
{
 8005488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800548c:	4606      	mov	r6, r0
 800548e:	4688      	mov	r8, r1
 8005490:	4617      	mov	r7, r2
 8005492:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005494:	6834      	ldr	r4, [r6, #0]
 8005496:	69a4      	ldr	r4, [r4, #24]
 8005498:	ea38 0404 	bics.w	r4, r8, r4
 800549c:	bf0c      	ite	eq
 800549e:	2401      	moveq	r4, #1
 80054a0:	2400      	movne	r4, #0
 80054a2:	42bc      	cmp	r4, r7
 80054a4:	d118      	bne.n	80054d8 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80054a6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80054aa:	d0f3      	beq.n	8005494 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ac:	f7fe fe44 	bl	8004138 <HAL_GetTick>
 80054b0:	9b06      	ldr	r3, [sp, #24]
 80054b2:	1ac0      	subs	r0, r0, r3
 80054b4:	42a8      	cmp	r0, r5
 80054b6:	d801      	bhi.n	80054bc <I2C_WaitOnFlagUntilTimeout+0x34>
 80054b8:	2d00      	cmp	r5, #0
 80054ba:	d1eb      	bne.n	8005494 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054bc:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80054be:	f043 0320 	orr.w	r3, r3, #32
 80054c2:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80054c4:	2320      	movs	r3, #32
 80054c6:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054ca:	2300      	movs	r3, #0
 80054cc:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80054d0:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 80054d4:	2001      	movs	r0, #1
 80054d6:	e000      	b.n	80054da <I2C_WaitOnFlagUntilTimeout+0x52>
  return HAL_OK;
 80054d8:	2000      	movs	r0, #0
}
 80054da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080054e0 <I2C_RequestMemoryWrite>:
{
 80054e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054e4:	b082      	sub	sp, #8
 80054e6:	4604      	mov	r4, r0
 80054e8:	4690      	mov	r8, r2
 80054ea:	461d      	mov	r5, r3
 80054ec:	9e08      	ldr	r6, [sp, #32]
 80054ee:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80054f0:	4b19      	ldr	r3, [pc, #100]	; (8005558 <I2C_RequestMemoryWrite+0x78>)
 80054f2:	9300      	str	r3, [sp, #0]
 80054f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80054f8:	b2ea      	uxtb	r2, r5
 80054fa:	f7ff fef0 	bl	80052de <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054fe:	463a      	mov	r2, r7
 8005500:	4631      	mov	r1, r6
 8005502:	4620      	mov	r0, r4
 8005504:	f7ff ff95 	bl	8005432 <I2C_WaitOnTXISFlagUntilTimeout>
 8005508:	b9f8      	cbnz	r0, 800554a <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800550a:	2d01      	cmp	r5, #1
 800550c:	d10e      	bne.n	800552c <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800550e:	6823      	ldr	r3, [r4, #0]
 8005510:	fa5f f288 	uxtb.w	r2, r8
 8005514:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005516:	9700      	str	r7, [sp, #0]
 8005518:	4633      	mov	r3, r6
 800551a:	2200      	movs	r2, #0
 800551c:	2180      	movs	r1, #128	; 0x80
 800551e:	4620      	mov	r0, r4
 8005520:	f7ff ffb2 	bl	8005488 <I2C_WaitOnFlagUntilTimeout>
 8005524:	b9a8      	cbnz	r0, 8005552 <I2C_RequestMemoryWrite+0x72>
}
 8005526:	b002      	add	sp, #8
 8005528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800552c:	6823      	ldr	r3, [r4, #0]
 800552e:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8005532:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005534:	463a      	mov	r2, r7
 8005536:	4631      	mov	r1, r6
 8005538:	4620      	mov	r0, r4
 800553a:	f7ff ff7a 	bl	8005432 <I2C_WaitOnTXISFlagUntilTimeout>
 800553e:	b930      	cbnz	r0, 800554e <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005540:	6823      	ldr	r3, [r4, #0]
 8005542:	fa5f f288 	uxtb.w	r2, r8
 8005546:	629a      	str	r2, [r3, #40]	; 0x28
 8005548:	e7e5      	b.n	8005516 <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 800554a:	2001      	movs	r0, #1
 800554c:	e7eb      	b.n	8005526 <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 800554e:	2001      	movs	r0, #1
 8005550:	e7e9      	b.n	8005526 <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 8005552:	2001      	movs	r0, #1
 8005554:	e7e7      	b.n	8005526 <I2C_RequestMemoryWrite+0x46>
 8005556:	bf00      	nop
 8005558:	80002000 	.word	0x80002000

0800555c <I2C_RequestMemoryRead>:
{
 800555c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005560:	b082      	sub	sp, #8
 8005562:	4604      	mov	r4, r0
 8005564:	4690      	mov	r8, r2
 8005566:	461d      	mov	r5, r3
 8005568:	9e08      	ldr	r6, [sp, #32]
 800556a:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800556c:	4b18      	ldr	r3, [pc, #96]	; (80055d0 <I2C_RequestMemoryRead+0x74>)
 800556e:	9300      	str	r3, [sp, #0]
 8005570:	2300      	movs	r3, #0
 8005572:	b2ea      	uxtb	r2, r5
 8005574:	f7ff feb3 	bl	80052de <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005578:	463a      	mov	r2, r7
 800557a:	4631      	mov	r1, r6
 800557c:	4620      	mov	r0, r4
 800557e:	f7ff ff58 	bl	8005432 <I2C_WaitOnTXISFlagUntilTimeout>
 8005582:	b9f8      	cbnz	r0, 80055c4 <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005584:	2d01      	cmp	r5, #1
 8005586:	d10e      	bne.n	80055a6 <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005588:	6823      	ldr	r3, [r4, #0]
 800558a:	fa5f f288 	uxtb.w	r2, r8
 800558e:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005590:	9700      	str	r7, [sp, #0]
 8005592:	4633      	mov	r3, r6
 8005594:	2200      	movs	r2, #0
 8005596:	2140      	movs	r1, #64	; 0x40
 8005598:	4620      	mov	r0, r4
 800559a:	f7ff ff75 	bl	8005488 <I2C_WaitOnFlagUntilTimeout>
 800559e:	b9a8      	cbnz	r0, 80055cc <I2C_RequestMemoryRead+0x70>
}
 80055a0:	b002      	add	sp, #8
 80055a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80055a6:	6823      	ldr	r3, [r4, #0]
 80055a8:	ea4f 2218 	mov.w	r2, r8, lsr #8
 80055ac:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055ae:	463a      	mov	r2, r7
 80055b0:	4631      	mov	r1, r6
 80055b2:	4620      	mov	r0, r4
 80055b4:	f7ff ff3d 	bl	8005432 <I2C_WaitOnTXISFlagUntilTimeout>
 80055b8:	b930      	cbnz	r0, 80055c8 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80055ba:	6823      	ldr	r3, [r4, #0]
 80055bc:	fa5f f288 	uxtb.w	r2, r8
 80055c0:	629a      	str	r2, [r3, #40]	; 0x28
 80055c2:	e7e5      	b.n	8005590 <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 80055c4:	2001      	movs	r0, #1
 80055c6:	e7eb      	b.n	80055a0 <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 80055c8:	2001      	movs	r0, #1
 80055ca:	e7e9      	b.n	80055a0 <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 80055cc:	2001      	movs	r0, #1
 80055ce:	e7e7      	b.n	80055a0 <I2C_RequestMemoryRead+0x44>
 80055d0:	80002000 	.word	0x80002000

080055d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80055d4:	b570      	push	{r4, r5, r6, lr}
 80055d6:	4605      	mov	r5, r0
 80055d8:	460c      	mov	r4, r1
 80055da:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80055dc:	682b      	ldr	r3, [r5, #0]
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	f013 0f20 	tst.w	r3, #32
 80055e4:	d11a      	bne.n	800561c <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80055e6:	4632      	mov	r2, r6
 80055e8:	4621      	mov	r1, r4
 80055ea:	4628      	mov	r0, r5
 80055ec:	f7ff fe95 	bl	800531a <I2C_IsErrorOccurred>
 80055f0:	b9b0      	cbnz	r0, 8005620 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055f2:	f7fe fda1 	bl	8004138 <HAL_GetTick>
 80055f6:	1b80      	subs	r0, r0, r6
 80055f8:	42a0      	cmp	r0, r4
 80055fa:	d801      	bhi.n	8005600 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 80055fc:	2c00      	cmp	r4, #0
 80055fe:	d1ed      	bne.n	80055dc <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005600:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8005602:	f043 0320 	orr.w	r3, r3, #32
 8005606:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005608:	2320      	movs	r3, #32
 800560a:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800560e:	2300      	movs	r3, #0
 8005610:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005614:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8005618:	2001      	movs	r0, #1
}
 800561a:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800561c:	2000      	movs	r0, #0
 800561e:	e7fc      	b.n	800561a <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8005620:	2001      	movs	r0, #1
 8005622:	e7fa      	b.n	800561a <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08005624 <HAL_I2C_MspInit>:
}
 8005624:	4770      	bx	lr
	...

08005628 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8005628:	2800      	cmp	r0, #0
 800562a:	d057      	beq.n	80056dc <HAL_I2C_Init+0xb4>
{
 800562c:	b510      	push	{r4, lr}
 800562e:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005630:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005634:	2b00      	cmp	r3, #0
 8005636:	d041      	beq.n	80056bc <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005638:	2324      	movs	r3, #36	; 0x24
 800563a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800563e:	6822      	ldr	r2, [r4, #0]
 8005640:	6813      	ldr	r3, [r2, #0]
 8005642:	f023 0301 	bic.w	r3, r3, #1
 8005646:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005648:	6863      	ldr	r3, [r4, #4]
 800564a:	6822      	ldr	r2, [r4, #0]
 800564c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8005650:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005652:	6822      	ldr	r2, [r4, #0]
 8005654:	6893      	ldr	r3, [r2, #8]
 8005656:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800565a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800565c:	68e3      	ldr	r3, [r4, #12]
 800565e:	2b01      	cmp	r3, #1
 8005660:	d031      	beq.n	80056c6 <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005662:	68a3      	ldr	r3, [r4, #8]
 8005664:	6822      	ldr	r2, [r4, #0]
 8005666:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 800566a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800566c:	68e3      	ldr	r3, [r4, #12]
 800566e:	2b02      	cmp	r3, #2
 8005670:	d02f      	beq.n	80056d2 <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005672:	6822      	ldr	r2, [r4, #0]
 8005674:	6851      	ldr	r1, [r2, #4]
 8005676:	4b1a      	ldr	r3, [pc, #104]	; (80056e0 <HAL_I2C_Init+0xb8>)
 8005678:	430b      	orrs	r3, r1
 800567a:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800567c:	6822      	ldr	r2, [r4, #0]
 800567e:	68d3      	ldr	r3, [r2, #12]
 8005680:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005684:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005686:	6923      	ldr	r3, [r4, #16]
 8005688:	6962      	ldr	r2, [r4, #20]
 800568a:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800568c:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800568e:	6822      	ldr	r2, [r4, #0]
 8005690:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005694:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005696:	69e3      	ldr	r3, [r4, #28]
 8005698:	6a21      	ldr	r1, [r4, #32]
 800569a:	6822      	ldr	r2, [r4, #0]
 800569c:	430b      	orrs	r3, r1
 800569e:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 80056a0:	6822      	ldr	r2, [r4, #0]
 80056a2:	6813      	ldr	r3, [r2, #0]
 80056a4:	f043 0301 	orr.w	r3, r3, #1
 80056a8:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056aa:	2000      	movs	r0, #0
 80056ac:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80056ae:	2320      	movs	r3, #32
 80056b0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80056b4:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056b6:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80056ba:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80056bc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80056c0:	f7ff ffb0 	bl	8005624 <HAL_I2C_MspInit>
 80056c4:	e7b8      	b.n	8005638 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80056c6:	68a3      	ldr	r3, [r4, #8]
 80056c8:	6822      	ldr	r2, [r4, #0]
 80056ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056ce:	6093      	str	r3, [r2, #8]
 80056d0:	e7cc      	b.n	800566c <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80056d2:	6823      	ldr	r3, [r4, #0]
 80056d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056d8:	605a      	str	r2, [r3, #4]
 80056da:	e7ca      	b.n	8005672 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 80056dc:	2001      	movs	r0, #1
}
 80056de:	4770      	bx	lr
 80056e0:	02008000 	.word	0x02008000

080056e4 <HAL_I2C_Mem_Write>:
{
 80056e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056e8:	b083      	sub	sp, #12
 80056ea:	460d      	mov	r5, r1
 80056ec:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 80056f0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80056f2:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 80056f6:	b2c9      	uxtb	r1, r1
 80056f8:	2920      	cmp	r1, #32
 80056fa:	f040 80bc 	bne.w	8005876 <HAL_I2C_Mem_Write+0x192>
 80056fe:	4604      	mov	r4, r0
 8005700:	4690      	mov	r8, r2
 8005702:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8005704:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005706:	f1ba 0f00 	cmp.w	sl, #0
 800570a:	bf18      	it	ne
 800570c:	2b00      	cmpne	r3, #0
 800570e:	d016      	beq.n	800573e <HAL_I2C_Mem_Write+0x5a>
    __HAL_LOCK(hi2c);
 8005710:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005714:	2b01      	cmp	r3, #1
 8005716:	f000 80b2 	beq.w	800587e <HAL_I2C_Mem_Write+0x19a>
 800571a:	f04f 0b01 	mov.w	fp, #1
 800571e:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8005722:	f7fe fd09 	bl	8004138 <HAL_GetTick>
 8005726:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005728:	9000      	str	r0, [sp, #0]
 800572a:	2319      	movs	r3, #25
 800572c:	465a      	mov	r2, fp
 800572e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005732:	4620      	mov	r0, r4
 8005734:	f7ff fea8 	bl	8005488 <I2C_WaitOnFlagUntilTimeout>
 8005738:	b130      	cbz	r0, 8005748 <HAL_I2C_Mem_Write+0x64>
      return HAL_ERROR;
 800573a:	2001      	movs	r0, #1
 800573c:	e09c      	b.n	8005878 <HAL_I2C_Mem_Write+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800573e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005742:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8005744:	2001      	movs	r0, #1
 8005746:	e097      	b.n	8005878 <HAL_I2C_Mem_Write+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005748:	2321      	movs	r3, #33	; 0x21
 800574a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800574e:	2340      	movs	r3, #64	; 0x40
 8005750:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005754:	2300      	movs	r3, #0
 8005756:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8005758:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800575a:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800575c:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005760:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005762:	9601      	str	r6, [sp, #4]
 8005764:	9700      	str	r7, [sp, #0]
 8005766:	464b      	mov	r3, r9
 8005768:	4642      	mov	r2, r8
 800576a:	4629      	mov	r1, r5
 800576c:	4620      	mov	r0, r4
 800576e:	f7ff feb7 	bl	80054e0 <I2C_RequestMemoryWrite>
 8005772:	b970      	cbnz	r0, 8005792 <HAL_I2C_Mem_Write+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005774:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005776:	b29b      	uxth	r3, r3
 8005778:	2bff      	cmp	r3, #255	; 0xff
 800577a:	d90f      	bls.n	800579c <HAL_I2C_Mem_Write+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800577c:	22ff      	movs	r2, #255	; 0xff
 800577e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005780:	2300      	movs	r3, #0
 8005782:	9300      	str	r3, [sp, #0]
 8005784:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005788:	4629      	mov	r1, r5
 800578a:	4620      	mov	r0, r4
 800578c:	f7ff fda7 	bl	80052de <I2C_TransferConfig>
 8005790:	e021      	b.n	80057d6 <HAL_I2C_Mem_Write+0xf2>
      __HAL_UNLOCK(hi2c);
 8005792:	2300      	movs	r3, #0
 8005794:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005798:	4658      	mov	r0, fp
 800579a:	e06d      	b.n	8005878 <HAL_I2C_Mem_Write+0x194>
      hi2c->XferSize = hi2c->XferCount;
 800579c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800579e:	b292      	uxth	r2, r2
 80057a0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80057a2:	2300      	movs	r3, #0
 80057a4:	9300      	str	r3, [sp, #0]
 80057a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057aa:	b2d2      	uxtb	r2, r2
 80057ac:	4629      	mov	r1, r5
 80057ae:	4620      	mov	r0, r4
 80057b0:	f7ff fd95 	bl	80052de <I2C_TransferConfig>
 80057b4:	e00f      	b.n	80057d6 <HAL_I2C_Mem_Write+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 80057b6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80057b8:	b292      	uxth	r2, r2
 80057ba:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80057bc:	2300      	movs	r3, #0
 80057be:	9300      	str	r3, [sp, #0]
 80057c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057c4:	b2d2      	uxtb	r2, r2
 80057c6:	4629      	mov	r1, r5
 80057c8:	4620      	mov	r0, r4
 80057ca:	f7ff fd88 	bl	80052de <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80057ce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d033      	beq.n	800583e <HAL_I2C_Mem_Write+0x15a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057d6:	4632      	mov	r2, r6
 80057d8:	4639      	mov	r1, r7
 80057da:	4620      	mov	r0, r4
 80057dc:	f7ff fe29 	bl	8005432 <I2C_WaitOnTXISFlagUntilTimeout>
 80057e0:	2800      	cmp	r0, #0
 80057e2:	d14e      	bne.n	8005882 <HAL_I2C_Mem_Write+0x19e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80057e4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80057e6:	6823      	ldr	r3, [r4, #0]
 80057e8:	7812      	ldrb	r2, [r2, #0]
 80057ea:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80057ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057ee:	3301      	adds	r3, #1
 80057f0:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80057f2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	3b01      	subs	r3, #1
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80057fc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80057fe:	3b01      	subs	r3, #1
 8005800:	b29b      	uxth	r3, r3
 8005802:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005804:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005806:	b292      	uxth	r2, r2
 8005808:	2a00      	cmp	r2, #0
 800580a:	d0e0      	beq.n	80057ce <HAL_I2C_Mem_Write+0xea>
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1de      	bne.n	80057ce <HAL_I2C_Mem_Write+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005810:	9600      	str	r6, [sp, #0]
 8005812:	463b      	mov	r3, r7
 8005814:	2200      	movs	r2, #0
 8005816:	2180      	movs	r1, #128	; 0x80
 8005818:	4620      	mov	r0, r4
 800581a:	f7ff fe35 	bl	8005488 <I2C_WaitOnFlagUntilTimeout>
 800581e:	bb90      	cbnz	r0, 8005886 <HAL_I2C_Mem_Write+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005820:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005822:	b29b      	uxth	r3, r3
 8005824:	2bff      	cmp	r3, #255	; 0xff
 8005826:	d9c6      	bls.n	80057b6 <HAL_I2C_Mem_Write+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005828:	22ff      	movs	r2, #255	; 0xff
 800582a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800582c:	2300      	movs	r3, #0
 800582e:	9300      	str	r3, [sp, #0]
 8005830:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005834:	4629      	mov	r1, r5
 8005836:	4620      	mov	r0, r4
 8005838:	f7ff fd51 	bl	80052de <I2C_TransferConfig>
 800583c:	e7c7      	b.n	80057ce <HAL_I2C_Mem_Write+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800583e:	4632      	mov	r2, r6
 8005840:	4639      	mov	r1, r7
 8005842:	4620      	mov	r0, r4
 8005844:	f7ff fec6 	bl	80055d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005848:	b9f8      	cbnz	r0, 800588a <HAL_I2C_Mem_Write+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800584a:	6823      	ldr	r3, [r4, #0]
 800584c:	2220      	movs	r2, #32
 800584e:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005850:	6821      	ldr	r1, [r4, #0]
 8005852:	684b      	ldr	r3, [r1, #4]
 8005854:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8005858:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800585c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005860:	f023 0301 	bic.w	r3, r3, #1
 8005864:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005866:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800586a:	2300      	movs	r3, #0
 800586c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8005870:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8005874:	e000      	b.n	8005878 <HAL_I2C_Mem_Write+0x194>
    return HAL_BUSY;
 8005876:	2002      	movs	r0, #2
}
 8005878:	b003      	add	sp, #12
 800587a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800587e:	2002      	movs	r0, #2
 8005880:	e7fa      	b.n	8005878 <HAL_I2C_Mem_Write+0x194>
        return HAL_ERROR;
 8005882:	2001      	movs	r0, #1
 8005884:	e7f8      	b.n	8005878 <HAL_I2C_Mem_Write+0x194>
          return HAL_ERROR;
 8005886:	2001      	movs	r0, #1
 8005888:	e7f6      	b.n	8005878 <HAL_I2C_Mem_Write+0x194>
      return HAL_ERROR;
 800588a:	2001      	movs	r0, #1
 800588c:	e7f4      	b.n	8005878 <HAL_I2C_Mem_Write+0x194>
	...

08005890 <HAL_I2C_Mem_Read>:
{
 8005890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005894:	b083      	sub	sp, #12
 8005896:	460d      	mov	r5, r1
 8005898:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800589c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800589e:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 80058a2:	b2c9      	uxtb	r1, r1
 80058a4:	2920      	cmp	r1, #32
 80058a6:	f040 80bd 	bne.w	8005a24 <HAL_I2C_Mem_Read+0x194>
 80058aa:	4604      	mov	r4, r0
 80058ac:	4690      	mov	r8, r2
 80058ae:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 80058b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80058b2:	f1ba 0f00 	cmp.w	sl, #0
 80058b6:	bf18      	it	ne
 80058b8:	2b00      	cmpne	r3, #0
 80058ba:	d016      	beq.n	80058ea <HAL_I2C_Mem_Read+0x5a>
    __HAL_LOCK(hi2c);
 80058bc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	f000 80b3 	beq.w	8005a2c <HAL_I2C_Mem_Read+0x19c>
 80058c6:	f04f 0b01 	mov.w	fp, #1
 80058ca:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80058ce:	f7fe fc33 	bl	8004138 <HAL_GetTick>
 80058d2:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80058d4:	9000      	str	r0, [sp, #0]
 80058d6:	2319      	movs	r3, #25
 80058d8:	465a      	mov	r2, fp
 80058da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80058de:	4620      	mov	r0, r4
 80058e0:	f7ff fdd2 	bl	8005488 <I2C_WaitOnFlagUntilTimeout>
 80058e4:	b130      	cbz	r0, 80058f4 <HAL_I2C_Mem_Read+0x64>
      return HAL_ERROR;
 80058e6:	2001      	movs	r0, #1
 80058e8:	e09d      	b.n	8005a26 <HAL_I2C_Mem_Read+0x196>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80058ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058ee:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 80058f0:	2001      	movs	r0, #1
 80058f2:	e098      	b.n	8005a26 <HAL_I2C_Mem_Read+0x196>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80058f4:	2322      	movs	r3, #34	; 0x22
 80058f6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80058fa:	2340      	movs	r3, #64	; 0x40
 80058fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005900:	2300      	movs	r3, #0
 8005902:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8005904:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005906:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8005908:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800590c:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800590e:	9601      	str	r6, [sp, #4]
 8005910:	9700      	str	r7, [sp, #0]
 8005912:	464b      	mov	r3, r9
 8005914:	4642      	mov	r2, r8
 8005916:	4629      	mov	r1, r5
 8005918:	4620      	mov	r0, r4
 800591a:	f7ff fe1f 	bl	800555c <I2C_RequestMemoryRead>
 800591e:	b970      	cbnz	r0, 800593e <HAL_I2C_Mem_Read+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005920:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005922:	b29b      	uxth	r3, r3
 8005924:	2bff      	cmp	r3, #255	; 0xff
 8005926:	d90f      	bls.n	8005948 <HAL_I2C_Mem_Read+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005928:	22ff      	movs	r2, #255	; 0xff
 800592a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800592c:	4b43      	ldr	r3, [pc, #268]	; (8005a3c <HAL_I2C_Mem_Read+0x1ac>)
 800592e:	9300      	str	r3, [sp, #0]
 8005930:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005934:	4629      	mov	r1, r5
 8005936:	4620      	mov	r0, r4
 8005938:	f7ff fcd1 	bl	80052de <I2C_TransferConfig>
 800593c:	e021      	b.n	8005982 <HAL_I2C_Mem_Read+0xf2>
      __HAL_UNLOCK(hi2c);
 800593e:	2300      	movs	r3, #0
 8005940:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005944:	4658      	mov	r0, fp
 8005946:	e06e      	b.n	8005a26 <HAL_I2C_Mem_Read+0x196>
      hi2c->XferSize = hi2c->XferCount;
 8005948:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800594a:	b292      	uxth	r2, r2
 800594c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800594e:	4b3b      	ldr	r3, [pc, #236]	; (8005a3c <HAL_I2C_Mem_Read+0x1ac>)
 8005950:	9300      	str	r3, [sp, #0]
 8005952:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005956:	b2d2      	uxtb	r2, r2
 8005958:	4629      	mov	r1, r5
 800595a:	4620      	mov	r0, r4
 800595c:	f7ff fcbf 	bl	80052de <I2C_TransferConfig>
 8005960:	e00f      	b.n	8005982 <HAL_I2C_Mem_Read+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 8005962:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005964:	b292      	uxth	r2, r2
 8005966:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005968:	2300      	movs	r3, #0
 800596a:	9300      	str	r3, [sp, #0]
 800596c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005970:	b2d2      	uxtb	r2, r2
 8005972:	4629      	mov	r1, r5
 8005974:	4620      	mov	r0, r4
 8005976:	f7ff fcb2 	bl	80052de <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800597a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800597c:	b29b      	uxth	r3, r3
 800597e:	2b00      	cmp	r3, #0
 8005980:	d034      	beq.n	80059ec <HAL_I2C_Mem_Read+0x15c>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005982:	9600      	str	r6, [sp, #0]
 8005984:	463b      	mov	r3, r7
 8005986:	2200      	movs	r2, #0
 8005988:	2104      	movs	r1, #4
 800598a:	4620      	mov	r0, r4
 800598c:	f7ff fd7c 	bl	8005488 <I2C_WaitOnFlagUntilTimeout>
 8005990:	2800      	cmp	r0, #0
 8005992:	d14d      	bne.n	8005a30 <HAL_I2C_Mem_Read+0x1a0>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005994:	6823      	ldr	r3, [r4, #0]
 8005996:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005998:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800599a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800599c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800599e:	3301      	adds	r3, #1
 80059a0:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80059a2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80059a4:	3a01      	subs	r2, #1
 80059a6:	b292      	uxth	r2, r2
 80059a8:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80059aa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	3b01      	subs	r3, #1
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80059b4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d0de      	beq.n	800597a <HAL_I2C_Mem_Read+0xea>
 80059bc:	2a00      	cmp	r2, #0
 80059be:	d1dc      	bne.n	800597a <HAL_I2C_Mem_Read+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80059c0:	9600      	str	r6, [sp, #0]
 80059c2:	463b      	mov	r3, r7
 80059c4:	2180      	movs	r1, #128	; 0x80
 80059c6:	4620      	mov	r0, r4
 80059c8:	f7ff fd5e 	bl	8005488 <I2C_WaitOnFlagUntilTimeout>
 80059cc:	bb90      	cbnz	r0, 8005a34 <HAL_I2C_Mem_Read+0x1a4>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059ce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	2bff      	cmp	r3, #255	; 0xff
 80059d4:	d9c5      	bls.n	8005962 <HAL_I2C_Mem_Read+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80059d6:	22ff      	movs	r2, #255	; 0xff
 80059d8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80059da:	2300      	movs	r3, #0
 80059dc:	9300      	str	r3, [sp, #0]
 80059de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80059e2:	4629      	mov	r1, r5
 80059e4:	4620      	mov	r0, r4
 80059e6:	f7ff fc7a 	bl	80052de <I2C_TransferConfig>
 80059ea:	e7c6      	b.n	800597a <HAL_I2C_Mem_Read+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059ec:	4632      	mov	r2, r6
 80059ee:	4639      	mov	r1, r7
 80059f0:	4620      	mov	r0, r4
 80059f2:	f7ff fdef 	bl	80055d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80059f6:	b9f8      	cbnz	r0, 8005a38 <HAL_I2C_Mem_Read+0x1a8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059f8:	6823      	ldr	r3, [r4, #0]
 80059fa:	2220      	movs	r2, #32
 80059fc:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80059fe:	6821      	ldr	r1, [r4, #0]
 8005a00:	684b      	ldr	r3, [r1, #4]
 8005a02:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8005a06:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005a0a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005a0e:	f023 0301 	bic.w	r3, r3, #1
 8005a12:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005a14:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8005a1e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8005a22:	e000      	b.n	8005a26 <HAL_I2C_Mem_Read+0x196>
    return HAL_BUSY;
 8005a24:	2002      	movs	r0, #2
}
 8005a26:	b003      	add	sp, #12
 8005a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8005a2c:	2002      	movs	r0, #2
 8005a2e:	e7fa      	b.n	8005a26 <HAL_I2C_Mem_Read+0x196>
        return HAL_ERROR;
 8005a30:	2001      	movs	r0, #1
 8005a32:	e7f8      	b.n	8005a26 <HAL_I2C_Mem_Read+0x196>
          return HAL_ERROR;
 8005a34:	2001      	movs	r0, #1
 8005a36:	e7f6      	b.n	8005a26 <HAL_I2C_Mem_Read+0x196>
      return HAL_ERROR;
 8005a38:	2001      	movs	r0, #1
 8005a3a:	e7f4      	b.n	8005a26 <HAL_I2C_Mem_Read+0x196>
 8005a3c:	80002400 	.word	0x80002400

08005a40 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005a40:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a42:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8005a46:	b2d2      	uxtb	r2, r2
 8005a48:	2a20      	cmp	r2, #32
 8005a4a:	d123      	bne.n	8005a94 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a4c:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8005a50:	2a01      	cmp	r2, #1
 8005a52:	d021      	beq.n	8005a98 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8005a54:	2201      	movs	r2, #1
 8005a56:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a5a:	2224      	movs	r2, #36	; 0x24
 8005a5c:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a60:	6800      	ldr	r0, [r0, #0]
 8005a62:	6802      	ldr	r2, [r0, #0]
 8005a64:	f022 0201 	bic.w	r2, r2, #1
 8005a68:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005a6a:	6818      	ldr	r0, [r3, #0]
 8005a6c:	6802      	ldr	r2, [r0, #0]
 8005a6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005a72:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005a74:	6818      	ldr	r0, [r3, #0]
 8005a76:	6802      	ldr	r2, [r0, #0]
 8005a78:	4311      	orrs	r1, r2
 8005a7a:	6001      	str	r1, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a7c:	6819      	ldr	r1, [r3, #0]
 8005a7e:	680a      	ldr	r2, [r1, #0]
 8005a80:	f042 0201 	orr.w	r2, r2, #1
 8005a84:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a86:	2220      	movs	r2, #32
 8005a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a8c:	2000      	movs	r0, #0
 8005a8e:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 8005a92:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8005a94:	2002      	movs	r0, #2
 8005a96:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8005a98:	2002      	movs	r0, #2
  }
}
 8005a9a:	4770      	bx	lr

08005a9c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005a9c:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a9e:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8005aa2:	b2d2      	uxtb	r2, r2
 8005aa4:	2a20      	cmp	r2, #32
 8005aa6:	d121      	bne.n	8005aec <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005aa8:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8005aac:	2a01      	cmp	r2, #1
 8005aae:	d01f      	beq.n	8005af0 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ab6:	2224      	movs	r2, #36	; 0x24
 8005ab8:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005abc:	6800      	ldr	r0, [r0, #0]
 8005abe:	6802      	ldr	r2, [r0, #0]
 8005ac0:	f022 0201 	bic.w	r2, r2, #1
 8005ac4:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005ac6:	6818      	ldr	r0, [r3, #0]
 8005ac8:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005aca:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005ace:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005ad2:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ad4:	6819      	ldr	r1, [r3, #0]
 8005ad6:	680a      	ldr	r2, [r1, #0]
 8005ad8:	f042 0201 	orr.w	r2, r2, #1
 8005adc:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ade:	2220      	movs	r2, #32
 8005ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ae4:	2000      	movs	r0, #0
 8005ae6:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 8005aea:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8005aec:	2002      	movs	r0, #2
 8005aee:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8005af0:	2002      	movs	r0, #2
  }
}
 8005af2:	4770      	bx	lr

08005af4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005af4:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005af6:	684d      	ldr	r5, [r1, #4]
 8005af8:	6803      	ldr	r3, [r0, #0]
 8005afa:	68dc      	ldr	r4, [r3, #12]
 8005afc:	f3c4 440b 	ubfx	r4, r4, #16, #12
 8005b00:	4425      	add	r5, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005b02:	ea4f 1cc2 	mov.w	ip, r2, lsl #7
 8005b06:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8005b0a:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 8005b0e:	f404 4470 	and.w	r4, r4, #61440	; 0xf000
 8005b12:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005b16:	680b      	ldr	r3, [r1, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005b18:	6804      	ldr	r4, [r0, #0]
 8005b1a:	68e6      	ldr	r6, [r4, #12]
 8005b1c:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005b20:	4433      	add	r3, r6
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005b22:	3301      	adds	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005b24:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005b28:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005b2c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005b30:	68cd      	ldr	r5, [r1, #12]
 8005b32:	6803      	ldr	r3, [r0, #0]
 8005b34:	68dc      	ldr	r4, [r3, #12]
 8005b36:	f3c4 040a 	ubfx	r4, r4, #0, #11
 8005b3a:	4425      	add	r5, r4
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005b3c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8005b40:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8005b44:	f404 4470 	and.w	r4, r4, #61440	; 0xf000
 8005b48:	f8c3 408c 	str.w	r4, [r3, #140]	; 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005b4c:	688b      	ldr	r3, [r1, #8]
 8005b4e:	6804      	ldr	r4, [r0, #0]
 8005b50:	68e6      	ldr	r6, [r4, #12]
 8005b52:	f3c6 0e0a 	ubfx	lr, r6, #0, #11
 8005b56:	4473      	add	r3, lr
 8005b58:	3301      	adds	r3, #1
 8005b5a:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 8005b5e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8005b62:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005b66:	6803      	ldr	r3, [r0, #0]
 8005b68:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8005b6c:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 8005b70:	f024 0407 	bic.w	r4, r4, #7
 8005b74:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005b78:	6803      	ldr	r3, [r0, #0]
 8005b7a:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8005b7e:	690c      	ldr	r4, [r1, #16]
 8005b80:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005b84:	f891 e031 	ldrb.w	lr, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005b88:	f891 6032 	ldrb.w	r6, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005b8c:	698d      	ldr	r5, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005b8e:	6803      	ldr	r3, [r0, #0]
 8005b90:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8005b94:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
 8005b98:	2400      	movs	r4, #0
 8005b9a:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005b9e:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 8005ba2:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 8005ba6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8005baa:	6806      	ldr	r6, [r0, #0]
 8005bac:	eb06 1ec2 	add.w	lr, r6, r2, lsl #7
 8005bb0:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8005bb4:	f8ce 309c 	str.w	r3, [lr, #156]	; 0x9c
 8005bb8:	f10e 0e84 	add.w	lr, lr, #132	; 0x84

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005bbc:	6803      	ldr	r3, [r0, #0]
 8005bbe:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8005bc2:	f8d3 5098 	ldr.w	r5, [r3, #152]	; 0x98
 8005bc6:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8005bca:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005bce:	6803      	ldr	r3, [r0, #0]
 8005bd0:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8005bd4:	694d      	ldr	r5, [r1, #20]
 8005bd6:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005bda:	6803      	ldr	r3, [r0, #0]
 8005bdc:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8005be0:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 8005be4:	4d2d      	ldr	r5, [pc, #180]	; (8005c9c <LTDC_SetConfig+0x1a8>)
 8005be6:	4035      	ands	r5, r6
 8005be8:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005bec:	6a0d      	ldr	r5, [r1, #32]
 8005bee:	6803      	ldr	r3, [r0, #0]
 8005bf0:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8005bf4:	69ce      	ldr	r6, [r1, #28]
 8005bf6:	4335      	orrs	r5, r6
 8005bf8:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005bfc:	6803      	ldr	r3, [r0, #0]
 8005bfe:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8005c02:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 8005c06:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005c0a:	6803      	ldr	r3, [r0, #0]
 8005c0c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8005c10:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8005c12:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005c16:	690b      	ldr	r3, [r1, #16]
 8005c18:	b183      	cbz	r3, 8005c3c <LTDC_SetConfig+0x148>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	2b06      	cmp	r3, #6
 8005c1e:	d805      	bhi.n	8005c2c <LTDC_SetConfig+0x138>
 8005c20:	e8df f003 	tbb	[pc, r3]
 8005c24:	0608063a 	.word	0x0608063a
 8005c28:	0404      	.short	0x0404
 8005c2a:	0a          	.byte	0x0a
 8005c2b:	00          	.byte	0x00
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005c2c:	2501      	movs	r5, #1
 8005c2e:	e006      	b.n	8005c3e <LTDC_SetConfig+0x14a>
 8005c30:	2502      	movs	r5, #2
 8005c32:	e004      	b.n	8005c3e <LTDC_SetConfig+0x14a>
 8005c34:	2502      	movs	r5, #2
 8005c36:	e002      	b.n	8005c3e <LTDC_SetConfig+0x14a>
 8005c38:	2502      	movs	r5, #2
 8005c3a:	e000      	b.n	8005c3e <LTDC_SetConfig+0x14a>
    tmp = 4U;
 8005c3c:	2504      	movs	r5, #4
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005c3e:	6803      	ldr	r3, [r0, #0]
 8005c40:	4463      	add	r3, ip
 8005c42:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005c46:	f002 22e0 	and.w	r2, r2, #3758153728	; 0xe000e000
 8005c4a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005c4e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8005c50:	fb05 f403 	mul.w	r4, r5, r3
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005c54:	684b      	ldr	r3, [r1, #4]
 8005c56:	680a      	ldr	r2, [r1, #0]
 8005c58:	1a9b      	subs	r3, r3, r2
 8005c5a:	fb05 f303 	mul.w	r3, r5, r3
 8005c5e:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005c60:	6802      	ldr	r2, [r0, #0]
 8005c62:	4462      	add	r2, ip
 8005c64:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005c68:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005c6c:	6803      	ldr	r3, [r0, #0]
 8005c6e:	4463      	add	r3, ip
 8005c70:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8005c74:	4a0a      	ldr	r2, [pc, #40]	; (8005ca0 <LTDC_SetConfig+0x1ac>)
 8005c76:	4022      	ands	r2, r4
 8005c78:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005c7c:	6803      	ldr	r3, [r0, #0]
 8005c7e:	4463      	add	r3, ip
 8005c80:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005c82:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005c86:	6803      	ldr	r3, [r0, #0]
 8005c88:	4463      	add	r3, ip
 8005c8a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005c8e:	f042 0201 	orr.w	r2, r2, #1
 8005c92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8005c96:	bd70      	pop	{r4, r5, r6, pc}
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005c98:	2503      	movs	r5, #3
 8005c9a:	e7d0      	b.n	8005c3e <LTDC_SetConfig+0x14a>
 8005c9c:	fffff8f8 	.word	0xfffff8f8
 8005ca0:	fffff800 	.word	0xfffff800

08005ca4 <HAL_LTDC_MspInit>:
}
 8005ca4:	4770      	bx	lr
	...

08005ca8 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 8005ca8:	2800      	cmp	r0, #0
 8005caa:	d072      	beq.n	8005d92 <HAL_LTDC_Init+0xea>
{
 8005cac:	b538      	push	{r3, r4, r5, lr}
 8005cae:	4604      	mov	r4, r0
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005cb0:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d067      	beq.n	8005d88 <HAL_LTDC_Init+0xe0>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005cb8:	2302      	movs	r3, #2
 8005cba:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005cbe:	6822      	ldr	r2, [r4, #0]
 8005cc0:	6993      	ldr	r3, [r2, #24]
 8005cc2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005cc6:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005cc8:	6821      	ldr	r1, [r4, #0]
 8005cca:	698a      	ldr	r2, [r1, #24]
 8005ccc:	6863      	ldr	r3, [r4, #4]
 8005cce:	68a0      	ldr	r0, [r4, #8]
 8005cd0:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005cd2:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005cd4:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005cd6:	6920      	ldr	r0, [r4, #16]
 8005cd8:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005cde:	6821      	ldr	r1, [r4, #0]
 8005ce0:	688a      	ldr	r2, [r1, #8]
 8005ce2:	4b2d      	ldr	r3, [pc, #180]	; (8005d98 <HAL_LTDC_Init+0xf0>)
 8005ce4:	401a      	ands	r2, r3
 8005ce6:	608a      	str	r2, [r1, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005ce8:	6820      	ldr	r0, [r4, #0]
 8005cea:	6882      	ldr	r2, [r0, #8]
 8005cec:	69a1      	ldr	r1, [r4, #24]
 8005cee:	6965      	ldr	r5, [r4, #20]
 8005cf0:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8005cf4:	430a      	orrs	r2, r1
 8005cf6:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005cf8:	6821      	ldr	r1, [r4, #0]
 8005cfa:	68ca      	ldr	r2, [r1, #12]
 8005cfc:	401a      	ands	r2, r3
 8005cfe:	60ca      	str	r2, [r1, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005d00:	6820      	ldr	r0, [r4, #0]
 8005d02:	68c2      	ldr	r2, [r0, #12]
 8005d04:	6a21      	ldr	r1, [r4, #32]
 8005d06:	69e5      	ldr	r5, [r4, #28]
 8005d08:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8005d0c:	430a      	orrs	r2, r1
 8005d0e:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005d10:	6821      	ldr	r1, [r4, #0]
 8005d12:	690a      	ldr	r2, [r1, #16]
 8005d14:	401a      	ands	r2, r3
 8005d16:	610a      	str	r2, [r1, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005d18:	6820      	ldr	r0, [r4, #0]
 8005d1a:	6902      	ldr	r2, [r0, #16]
 8005d1c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005d1e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005d20:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8005d24:	430a      	orrs	r2, r1
 8005d26:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005d28:	6821      	ldr	r1, [r4, #0]
 8005d2a:	694a      	ldr	r2, [r1, #20]
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005d30:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005d32:	6821      	ldr	r1, [r4, #0]
 8005d34:	694b      	ldr	r3, [r1, #20]
 8005d36:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005d38:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005d40:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005d44:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8005d48:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005d4a:	6821      	ldr	r1, [r4, #0]
 8005d4c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005d4e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005d52:	62ca      	str	r2, [r1, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005d54:	6821      	ldr	r1, [r4, #0]
 8005d56:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005d58:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8005d5c:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8005d60:	4303      	orrs	r3, r0
 8005d62:	4313      	orrs	r3, r2
 8005d64:	62cb      	str	r3, [r1, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005d66:	6822      	ldr	r2, [r4, #0]
 8005d68:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8005d6a:	f043 0306 	orr.w	r3, r3, #6
 8005d6e:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8005d70:	6822      	ldr	r2, [r4, #0]
 8005d72:	6993      	ldr	r3, [r2, #24]
 8005d74:	f043 0301 	orr.w	r3, r3, #1
 8005d78:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005d7a:	2000      	movs	r0, #0
 8005d7c:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8005d80:	2301      	movs	r3, #1
 8005d82:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8005d86:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 8005d88:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8005d8c:	f7ff ff8a 	bl	8005ca4 <HAL_LTDC_MspInit>
 8005d90:	e792      	b.n	8005cb8 <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 8005d92:	2001      	movs	r0, #1
}
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	f000f800 	.word	0xf000f800

08005d9c <HAL_LTDC_ConfigLayer>:
{
 8005d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 8005d9e:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d02c      	beq.n	8005e00 <HAL_LTDC_ConfigLayer+0x64>
 8005da6:	4604      	mov	r4, r0
 8005da8:	460d      	mov	r5, r1
 8005daa:	4616      	mov	r6, r2
 8005dac:	2701      	movs	r7, #1
 8005dae:	f880 70a0 	strb.w	r7, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005db2:	2302      	movs	r3, #2
 8005db4:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005db8:	f04f 0c34 	mov.w	ip, #52	; 0x34
 8005dbc:	fb0c 0c02 	mla	ip, ip, r2, r0
 8005dc0:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
 8005dc4:	468e      	mov	lr, r1
 8005dc6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8005dca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005dce:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8005dd2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005dd6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8005dda:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005dde:	f8de 3000 	ldr.w	r3, [lr]
 8005de2:	f8cc 3000 	str.w	r3, [ip]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005de6:	4632      	mov	r2, r6
 8005de8:	4629      	mov	r1, r5
 8005dea:	4620      	mov	r0, r4
 8005dec:	f7ff fe82 	bl	8005af4 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005df0:	6823      	ldr	r3, [r4, #0]
 8005df2:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005df4:	f884 70a1 	strb.w	r7, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8005df8:	2000      	movs	r0, #0
 8005dfa:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8005dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hltdc);
 8005e00:	2002      	movs	r0, #2
 8005e02:	e7fc      	b.n	8005dfe <HAL_LTDC_ConfigLayer+0x62>

08005e04 <HAL_LTDCEx_StructInitFromVideoConfig>:

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == \
 8005e04:	6a4b      	ldr	r3, [r1, #36]	; 0x24
                            DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 8005e06:	b10b      	cbz	r3, 8005e0c <HAL_LTDCEx_StructInitFromVideoConfig+0x8>
 8005e08:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == \
 8005e0c:	60c3      	str	r3, [r0, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 8005e0e:	6a0b      	ldr	r3, [r1, #32]
 8005e10:	bb0b      	cbnz	r3, 8005e56 <HAL_LTDCEx_StructInitFromVideoConfig+0x52>
 8005e12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005e16:	6083      	str	r3, [r0, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 8005e18:	69cb      	ldr	r3, [r1, #28]
 8005e1a:	b9f3      	cbnz	r3, 8005e5a <HAL_LTDCEx_StructInitFromVideoConfig+0x56>
 8005e1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005e20:	6043      	str	r3, [r0, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 8005e22:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8005e24:	3b01      	subs	r3, #1
 8005e26:	6183      	str	r3, [r0, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 8005e28:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8005e2a:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 8005e2c:	4413      	add	r3, r2
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	6203      	str	r3, [r0, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8005e32:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8005e34:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 8005e36:	4413      	add	r3, r2
                                   VidCfg->VerticalActive - 1U;
 8005e38:	6c0a      	ldr	r2, [r1, #64]	; 0x40
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8005e3a:	4413      	add	r3, r2
                                   VidCfg->VerticalActive - 1U;
 8005e3c:	3b01      	subs	r3, #1
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8005e3e:	6283      	str	r3, [r0, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8005e40:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8005e42:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 8005e44:	4413      	add	r3, r2
                                   VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 8005e46:	6c0a      	ldr	r2, [r1, #64]	; 0x40
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8005e48:	4413      	add	r3, r2
                                   VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 8005e4a:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8005e4c:	4413      	add	r3, r2
 8005e4e:	3b01      	subs	r3, #1
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8005e50:	6303      	str	r3, [r0, #48]	; 0x30

  return HAL_OK;
}
 8005e52:	2000      	movs	r0, #0
 8005e54:	4770      	bx	lr
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 8005e56:	2300      	movs	r3, #0
 8005e58:	e7dd      	b.n	8005e16 <HAL_LTDCEx_StructInitFromVideoConfig+0x12>
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	e7e0      	b.n	8005e20 <HAL_LTDCEx_StructInitFromVideoConfig+0x1c>
	...

08005e60 <HAL_PWREx_EnableOverDrive>:
 *         critical tasks and when the system clock source is either HSI or HSE. 
 *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
 *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void) {
 8005e60:	b510      	push	{r4, lr}
 8005e62:	b082      	sub	sp, #8
	uint32_t tickstart = 0;

	__HAL_RCC_PWR_CLK_ENABLE();
 8005e64:	4b1b      	ldr	r3, [pc, #108]	; (8005ed4 <HAL_PWREx_EnableOverDrive+0x74>)
 8005e66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e68:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005e6c:	641a      	str	r2, [r3, #64]	; 0x40
 8005e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e74:	9301      	str	r3, [sp, #4]
 8005e76:	9b01      	ldr	r3, [sp, #4]

	/* Enable the Over-drive to extend the clock frequency to 216 MHz */
	__HAL_PWR_OVERDRIVE_ENABLE();
 8005e78:	4a17      	ldr	r2, [pc, #92]	; (8005ed8 <HAL_PWREx_EnableOverDrive+0x78>)
 8005e7a:	6813      	ldr	r3, [r2, #0]
 8005e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e80:	6013      	str	r3, [r2, #0]

	/* Get tick */
	tickstart = HAL_GetTick();
 8005e82:	f7fe f959 	bl	8004138 <HAL_GetTick>
 8005e86:	4604      	mov	r4, r0

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY)) {
 8005e88:	4b13      	ldr	r3, [pc, #76]	; (8005ed8 <HAL_PWREx_EnableOverDrive+0x78>)
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005e90:	d108      	bne.n	8005ea4 <HAL_PWREx_EnableOverDrive+0x44>
		if ((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE) {
 8005e92:	f7fe f951 	bl	8004138 <HAL_GetTick>
 8005e96:	1b00      	subs	r0, r0, r4
 8005e98:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005e9c:	d9f4      	bls.n	8005e88 <HAL_PWREx_EnableOverDrive+0x28>
			return HAL_TIMEOUT;
 8005e9e:	2003      	movs	r0, #3
		if ((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE) {
			return HAL_TIMEOUT;
		}
	}
	return HAL_OK;
}
 8005ea0:	b002      	add	sp, #8
 8005ea2:	bd10      	pop	{r4, pc}
	__HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005ea4:	4a0c      	ldr	r2, [pc, #48]	; (8005ed8 <HAL_PWREx_EnableOverDrive+0x78>)
 8005ea6:	6813      	ldr	r3, [r2, #0]
 8005ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005eac:	6013      	str	r3, [r2, #0]
	tickstart = HAL_GetTick();
 8005eae:	f7fe f943 	bl	8004138 <HAL_GetTick>
 8005eb2:	4604      	mov	r4, r0
	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY)) {
 8005eb4:	4b08      	ldr	r3, [pc, #32]	; (8005ed8 <HAL_PWREx_EnableOverDrive+0x78>)
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005ebc:	d107      	bne.n	8005ece <HAL_PWREx_EnableOverDrive+0x6e>
		if ((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE) {
 8005ebe:	f7fe f93b 	bl	8004138 <HAL_GetTick>
 8005ec2:	1b00      	subs	r0, r0, r4
 8005ec4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005ec8:	d9f4      	bls.n	8005eb4 <HAL_PWREx_EnableOverDrive+0x54>
			return HAL_TIMEOUT;
 8005eca:	2003      	movs	r0, #3
 8005ecc:	e7e8      	b.n	8005ea0 <HAL_PWREx_EnableOverDrive+0x40>
	return HAL_OK;
 8005ece:	2000      	movs	r0, #0
 8005ed0:	e7e6      	b.n	8005ea0 <HAL_PWREx_EnableOverDrive+0x40>
 8005ed2:	bf00      	nop
 8005ed4:	40023800 	.word	0x40023800
 8005ed8:	40007000 	.word	0x40007000

08005edc <HAL_RCC_OscConfig>:
	uint32_t tickstart;
	uint32_t pll_config;
	FlagStatus pwrclkchanged = RESET;

	/* Check Null pointer */
	if (RCC_OscInitStruct == NULL) {
 8005edc:	2800      	cmp	r0, #0
 8005ede:	f000 8206 	beq.w	80062ee <HAL_RCC_OscConfig+0x412>
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef *RCC_OscInitStruct) {
 8005ee2:	b570      	push	{r4, r5, r6, lr}
 8005ee4:	b082      	sub	sp, #8
 8005ee6:	4604      	mov	r4, r0

	/* Check the parameters */
	assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

	/*------------------------------- HSE Configuration ------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE)
 8005ee8:	6803      	ldr	r3, [r0, #0]
 8005eea:	f013 0f01 	tst.w	r3, #1
 8005eee:	d029      	beq.n	8005f44 <HAL_RCC_OscConfig+0x68>
			== RCC_OSCILLATORTYPE_HSE) {
		/* Check the parameters */
		assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
		/* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ef0:	4b95      	ldr	r3, [pc, #596]	; (8006148 <HAL_RCC_OscConfig+0x26c>)
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f003 030c 	and.w	r3, r3, #12
 8005ef8:	2b04      	cmp	r3, #4
 8005efa:	d01a      	beq.n	8005f32 <HAL_RCC_OscConfig+0x56>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE()
 8005efc:	4b92      	ldr	r3, [pc, #584]	; (8006148 <HAL_RCC_OscConfig+0x26c>)
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	f003 030c 	and.w	r3, r3, #12
 8005f04:	2b08      	cmp	r3, #8
 8005f06:	d00f      	beq.n	8005f28 <HAL_RCC_OscConfig+0x4c>
					&& (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
				return HAL_ERROR;
			}
		} else {
			/* Set the new HSE configuration ---------------------------------------*/
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f08:	6863      	ldr	r3, [r4, #4]
 8005f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f0e:	d040      	beq.n	8005f92 <HAL_RCC_OscConfig+0xb6>
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d154      	bne.n	8005fbe <HAL_RCC_OscConfig+0xe2>
 8005f14:	4b8c      	ldr	r3, [pc, #560]	; (8006148 <HAL_RCC_OscConfig+0x26c>)
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005f1c:	601a      	str	r2, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005f24:	601a      	str	r2, [r3, #0]
 8005f26:	e039      	b.n	8005f9c <HAL_RCC_OscConfig+0xc0>
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 8005f28:	4b87      	ldr	r3, [pc, #540]	; (8006148 <HAL_RCC_OscConfig+0x26c>)
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8005f30:	d0ea      	beq.n	8005f08 <HAL_RCC_OscConfig+0x2c>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f32:	4b85      	ldr	r3, [pc, #532]	; (8006148 <HAL_RCC_OscConfig+0x26c>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005f3a:	d003      	beq.n	8005f44 <HAL_RCC_OscConfig+0x68>
					&& (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 8005f3c:	6863      	ldr	r3, [r4, #4]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	f000 81d7 	beq.w	80062f2 <HAL_RCC_OscConfig+0x416>
				}
			}
		}
	}
	/*----------------------------- HSI Configuration --------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI)
 8005f44:	6823      	ldr	r3, [r4, #0]
 8005f46:	f013 0f02 	tst.w	r3, #2
 8005f4a:	d074      	beq.n	8006036 <HAL_RCC_OscConfig+0x15a>
		assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
		assert_param(
				IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

		/* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005f4c:	4b7e      	ldr	r3, [pc, #504]	; (8006148 <HAL_RCC_OscConfig+0x26c>)
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	f013 0f0c 	tst.w	r3, #12
 8005f54:	d05e      	beq.n	8006014 <HAL_RCC_OscConfig+0x138>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE()
 8005f56:	4b7c      	ldr	r3, [pc, #496]	; (8006148 <HAL_RCC_OscConfig+0x26c>)
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	f003 030c 	and.w	r3, r3, #12
 8005f5e:	2b08      	cmp	r3, #8
 8005f60:	d053      	beq.n	800600a <HAL_RCC_OscConfig+0x12e>
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
						RCC_OscInitStruct->HSICalibrationValue);
			}
		} else {
			/* Check the HSI State */
			if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF) {
 8005f62:	68e3      	ldr	r3, [r4, #12]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f000 8089 	beq.w	800607c <HAL_RCC_OscConfig+0x1a0>
				/* Enable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_ENABLE();
 8005f6a:	4a77      	ldr	r2, [pc, #476]	; (8006148 <HAL_RCC_OscConfig+0x26c>)
 8005f6c:	6813      	ldr	r3, [r2, #0]
 8005f6e:	f043 0301 	orr.w	r3, r3, #1
 8005f72:	6013      	str	r3, [r2, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8005f74:	f7fe f8e0 	bl	8004138 <HAL_GetTick>
 8005f78:	4605      	mov	r5, r0

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8005f7a:	4b73      	ldr	r3, [pc, #460]	; (8006148 <HAL_RCC_OscConfig+0x26c>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f013 0f02 	tst.w	r3, #2
 8005f82:	d172      	bne.n	800606a <HAL_RCC_OscConfig+0x18e>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8005f84:	f7fe f8d8 	bl	8004138 <HAL_GetTick>
 8005f88:	1b40      	subs	r0, r0, r5
 8005f8a:	2802      	cmp	r0, #2
 8005f8c:	d9f5      	bls.n	8005f7a <HAL_RCC_OscConfig+0x9e>
						return HAL_TIMEOUT;
 8005f8e:	2003      	movs	r0, #3
 8005f90:	e1b4      	b.n	80062fc <HAL_RCC_OscConfig+0x420>
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f92:	4a6d      	ldr	r2, [pc, #436]	; (8006148 <HAL_RCC_OscConfig+0x26c>)
 8005f94:	6813      	ldr	r3, [r2, #0]
 8005f96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f9a:	6013      	str	r3, [r2, #0]
			if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF) {
 8005f9c:	6863      	ldr	r3, [r4, #4]
 8005f9e:	b32b      	cbz	r3, 8005fec <HAL_RCC_OscConfig+0x110>
				tickstart = HAL_GetTick();
 8005fa0:	f7fe f8ca 	bl	8004138 <HAL_GetTick>
 8005fa4:	4605      	mov	r5, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8005fa6:	4b68      	ldr	r3, [pc, #416]	; (8006148 <HAL_RCC_OscConfig+0x26c>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005fae:	d1c9      	bne.n	8005f44 <HAL_RCC_OscConfig+0x68>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8005fb0:	f7fe f8c2 	bl	8004138 <HAL_GetTick>
 8005fb4:	1b40      	subs	r0, r0, r5
 8005fb6:	2864      	cmp	r0, #100	; 0x64
 8005fb8:	d9f5      	bls.n	8005fa6 <HAL_RCC_OscConfig+0xca>
						return HAL_TIMEOUT;
 8005fba:	2003      	movs	r0, #3
 8005fbc:	e19e      	b.n	80062fc <HAL_RCC_OscConfig+0x420>
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fbe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fc2:	d009      	beq.n	8005fd8 <HAL_RCC_OscConfig+0xfc>
 8005fc4:	4b60      	ldr	r3, [pc, #384]	; (8006148 <HAL_RCC_OscConfig+0x26c>)
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005fcc:	601a      	str	r2, [r3, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005fd4:	601a      	str	r2, [r3, #0]
 8005fd6:	e7e1      	b.n	8005f9c <HAL_RCC_OscConfig+0xc0>
 8005fd8:	4b5b      	ldr	r3, [pc, #364]	; (8006148 <HAL_RCC_OscConfig+0x26c>)
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005fe0:	601a      	str	r2, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005fe8:	601a      	str	r2, [r3, #0]
 8005fea:	e7d7      	b.n	8005f9c <HAL_RCC_OscConfig+0xc0>
				tickstart = HAL_GetTick();
 8005fec:	f7fe f8a4 	bl	8004138 <HAL_GetTick>
 8005ff0:	4605      	mov	r5, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 8005ff2:	4b55      	ldr	r3, [pc, #340]	; (8006148 <HAL_RCC_OscConfig+0x26c>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005ffa:	d0a3      	beq.n	8005f44 <HAL_RCC_OscConfig+0x68>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8005ffc:	f7fe f89c 	bl	8004138 <HAL_GetTick>
 8006000:	1b40      	subs	r0, r0, r5
 8006002:	2864      	cmp	r0, #100	; 0x64
 8006004:	d9f5      	bls.n	8005ff2 <HAL_RCC_OscConfig+0x116>
						return HAL_TIMEOUT;
 8006006:	2003      	movs	r0, #3
 8006008:	e178      	b.n	80062fc <HAL_RCC_OscConfig+0x420>
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 800600a:	4b4f      	ldr	r3, [pc, #316]	; (8006148 <HAL_RCC_OscConfig+0x26c>)
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8006012:	d1a6      	bne.n	8005f62 <HAL_RCC_OscConfig+0x86>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006014:	4b4c      	ldr	r3, [pc, #304]	; (8006148 <HAL_RCC_OscConfig+0x26c>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f013 0f02 	tst.w	r3, #2
 800601c:	d003      	beq.n	8006026 <HAL_RCC_OscConfig+0x14a>
					&& (RCC_OscInitStruct->HSIState != RCC_HSI_ON)) {
 800601e:	68e3      	ldr	r3, [r4, #12]
 8006020:	2b01      	cmp	r3, #1
 8006022:	f040 8168 	bne.w	80062f6 <HAL_RCC_OscConfig+0x41a>
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 8006026:	4a48      	ldr	r2, [pc, #288]	; (8006148 <HAL_RCC_OscConfig+0x26c>)
 8006028:	6813      	ldr	r3, [r2, #0]
 800602a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800602e:	6921      	ldr	r1, [r4, #16]
 8006030:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006034:	6013      	str	r3, [r2, #0]
				}
			}
		}
	}
	/*------------------------------ LSI Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI)
 8006036:	6823      	ldr	r3, [r4, #0]
 8006038:	f013 0f08 	tst.w	r3, #8
 800603c:	d046      	beq.n	80060cc <HAL_RCC_OscConfig+0x1f0>
			== RCC_OSCILLATORTYPE_LSI) {
		/* Check the parameters */
		assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

		/* Check the LSI State */
		if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF) {
 800603e:	6963      	ldr	r3, [r4, #20]
 8006040:	b383      	cbz	r3, 80060a4 <HAL_RCC_OscConfig+0x1c8>
			/* Enable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_ENABLE();
 8006042:	4a41      	ldr	r2, [pc, #260]	; (8006148 <HAL_RCC_OscConfig+0x26c>)
 8006044:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8006046:	f043 0301 	orr.w	r3, r3, #1
 800604a:	6753      	str	r3, [r2, #116]	; 0x74

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 800604c:	f7fe f874 	bl	8004138 <HAL_GetTick>
 8006050:	4605      	mov	r5, r0

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 8006052:	4b3d      	ldr	r3, [pc, #244]	; (8006148 <HAL_RCC_OscConfig+0x26c>)
 8006054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006056:	f013 0f02 	tst.w	r3, #2
 800605a:	d137      	bne.n	80060cc <HAL_RCC_OscConfig+0x1f0>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 800605c:	f7fe f86c 	bl	8004138 <HAL_GetTick>
 8006060:	1b40      	subs	r0, r0, r5
 8006062:	2802      	cmp	r0, #2
 8006064:	d9f5      	bls.n	8006052 <HAL_RCC_OscConfig+0x176>
					return HAL_TIMEOUT;
 8006066:	2003      	movs	r0, #3
 8006068:	e148      	b.n	80062fc <HAL_RCC_OscConfig+0x420>
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 800606a:	4a37      	ldr	r2, [pc, #220]	; (8006148 <HAL_RCC_OscConfig+0x26c>)
 800606c:	6813      	ldr	r3, [r2, #0]
 800606e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006072:	6921      	ldr	r1, [r4, #16]
 8006074:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006078:	6013      	str	r3, [r2, #0]
 800607a:	e7dc      	b.n	8006036 <HAL_RCC_OscConfig+0x15a>
				__HAL_RCC_HSI_DISABLE();
 800607c:	4a32      	ldr	r2, [pc, #200]	; (8006148 <HAL_RCC_OscConfig+0x26c>)
 800607e:	6813      	ldr	r3, [r2, #0]
 8006080:	f023 0301 	bic.w	r3, r3, #1
 8006084:	6013      	str	r3, [r2, #0]
				tickstart = HAL_GetTick();
 8006086:	f7fe f857 	bl	8004138 <HAL_GetTick>
 800608a:	4605      	mov	r5, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 800608c:	4b2e      	ldr	r3, [pc, #184]	; (8006148 <HAL_RCC_OscConfig+0x26c>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f013 0f02 	tst.w	r3, #2
 8006094:	d0cf      	beq.n	8006036 <HAL_RCC_OscConfig+0x15a>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8006096:	f7fe f84f 	bl	8004138 <HAL_GetTick>
 800609a:	1b40      	subs	r0, r0, r5
 800609c:	2802      	cmp	r0, #2
 800609e:	d9f5      	bls.n	800608c <HAL_RCC_OscConfig+0x1b0>
						return HAL_TIMEOUT;
 80060a0:	2003      	movs	r0, #3
 80060a2:	e12b      	b.n	80062fc <HAL_RCC_OscConfig+0x420>
				}
			}
		} else {
			/* Disable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_DISABLE();
 80060a4:	4a28      	ldr	r2, [pc, #160]	; (8006148 <HAL_RCC_OscConfig+0x26c>)
 80060a6:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80060a8:	f023 0301 	bic.w	r3, r3, #1
 80060ac:	6753      	str	r3, [r2, #116]	; 0x74

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 80060ae:	f7fe f843 	bl	8004138 <HAL_GetTick>
 80060b2:	4605      	mov	r5, r0

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 80060b4:	4b24      	ldr	r3, [pc, #144]	; (8006148 <HAL_RCC_OscConfig+0x26c>)
 80060b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060b8:	f013 0f02 	tst.w	r3, #2
 80060bc:	d006      	beq.n	80060cc <HAL_RCC_OscConfig+0x1f0>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 80060be:	f7fe f83b 	bl	8004138 <HAL_GetTick>
 80060c2:	1b40      	subs	r0, r0, r5
 80060c4:	2802      	cmp	r0, #2
 80060c6:	d9f5      	bls.n	80060b4 <HAL_RCC_OscConfig+0x1d8>
					return HAL_TIMEOUT;
 80060c8:	2003      	movs	r0, #3
 80060ca:	e117      	b.n	80062fc <HAL_RCC_OscConfig+0x420>
				}
			}
		}
	}
	/*------------------------------ LSE Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE)
 80060cc:	6823      	ldr	r3, [r4, #0]
 80060ce:	f013 0f04 	tst.w	r3, #4
 80060d2:	d07d      	beq.n	80061d0 <HAL_RCC_OscConfig+0x2f4>
		/* Check the parameters */
		assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

		/* Update LSE configuration in Backup Domain control register    */
		/* Requires to enable write access to Backup Domain of necessary */
		if (__HAL_RCC_PWR_IS_CLK_DISABLED()) {
 80060d4:	4b1c      	ldr	r3, [pc, #112]	; (8006148 <HAL_RCC_OscConfig+0x26c>)
 80060d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80060dc:	d11e      	bne.n	800611c <HAL_RCC_OscConfig+0x240>
			/* Enable Power Clock*/
			__HAL_RCC_PWR_CLK_ENABLE();
 80060de:	4b1a      	ldr	r3, [pc, #104]	; (8006148 <HAL_RCC_OscConfig+0x26c>)
 80060e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060e2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80060e6:	641a      	str	r2, [r3, #64]	; 0x40
 80060e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060ee:	9301      	str	r3, [sp, #4]
 80060f0:	9b01      	ldr	r3, [sp, #4]
			pwrclkchanged = SET;
 80060f2:	2501      	movs	r5, #1
		}

		if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP)) {
 80060f4:	4b15      	ldr	r3, [pc, #84]	; (800614c <HAL_RCC_OscConfig+0x270>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80060fc:	d010      	beq.n	8006120 <HAL_RCC_OscConfig+0x244>
				}
			}
		}

		/* Set the new LSE configuration -----------------------------------------*/
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060fe:	68a3      	ldr	r3, [r4, #8]
 8006100:	2b01      	cmp	r3, #1
 8006102:	d025      	beq.n	8006150 <HAL_RCC_OscConfig+0x274>
 8006104:	2b00      	cmp	r3, #0
 8006106:	d13b      	bne.n	8006180 <HAL_RCC_OscConfig+0x2a4>
 8006108:	4b0f      	ldr	r3, [pc, #60]	; (8006148 <HAL_RCC_OscConfig+0x26c>)
 800610a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800610c:	f022 0201 	bic.w	r2, r2, #1
 8006110:	671a      	str	r2, [r3, #112]	; 0x70
 8006112:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006114:	f022 0204 	bic.w	r2, r2, #4
 8006118:	671a      	str	r2, [r3, #112]	; 0x70
 800611a:	e01e      	b.n	800615a <HAL_RCC_OscConfig+0x27e>
	FlagStatus pwrclkchanged = RESET;
 800611c:	2500      	movs	r5, #0
 800611e:	e7e9      	b.n	80060f4 <HAL_RCC_OscConfig+0x218>
			PWR->CR1 |= PWR_CR1_DBP;
 8006120:	4a0a      	ldr	r2, [pc, #40]	; (800614c <HAL_RCC_OscConfig+0x270>)
 8006122:	6813      	ldr	r3, [r2, #0]
 8006124:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006128:	6013      	str	r3, [r2, #0]
			tickstart = HAL_GetTick();
 800612a:	f7fe f805 	bl	8004138 <HAL_GetTick>
 800612e:	4606      	mov	r6, r0
			while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP)) {
 8006130:	4b06      	ldr	r3, [pc, #24]	; (800614c <HAL_RCC_OscConfig+0x270>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006138:	d1e1      	bne.n	80060fe <HAL_RCC_OscConfig+0x222>
				if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 800613a:	f7fd fffd 	bl	8004138 <HAL_GetTick>
 800613e:	1b80      	subs	r0, r0, r6
 8006140:	2864      	cmp	r0, #100	; 0x64
 8006142:	d9f5      	bls.n	8006130 <HAL_RCC_OscConfig+0x254>
					return HAL_TIMEOUT;
 8006144:	2003      	movs	r0, #3
 8006146:	e0d9      	b.n	80062fc <HAL_RCC_OscConfig+0x420>
 8006148:	40023800 	.word	0x40023800
 800614c:	40007000 	.word	0x40007000
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006150:	4a72      	ldr	r2, [pc, #456]	; (800631c <HAL_RCC_OscConfig+0x440>)
 8006152:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8006154:	f043 0301 	orr.w	r3, r3, #1
 8006158:	6713      	str	r3, [r2, #112]	; 0x70
		/* Check the LSE State */
		if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF) {
 800615a:	68a3      	ldr	r3, [r4, #8]
 800615c:	b333      	cbz	r3, 80061ac <HAL_RCC_OscConfig+0x2d0>
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 800615e:	f7fd ffeb 	bl	8004138 <HAL_GetTick>
 8006162:	4606      	mov	r6, r0

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 8006164:	4b6d      	ldr	r3, [pc, #436]	; (800631c <HAL_RCC_OscConfig+0x440>)
 8006166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006168:	f013 0f02 	tst.w	r3, #2
 800616c:	d12f      	bne.n	80061ce <HAL_RCC_OscConfig+0x2f2>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 800616e:	f7fd ffe3 	bl	8004138 <HAL_GetTick>
 8006172:	1b80      	subs	r0, r0, r6
 8006174:	f241 3388 	movw	r3, #5000	; 0x1388
 8006178:	4298      	cmp	r0, r3
 800617a:	d9f3      	bls.n	8006164 <HAL_RCC_OscConfig+0x288>
					return HAL_TIMEOUT;
 800617c:	2003      	movs	r0, #3
 800617e:	e0bd      	b.n	80062fc <HAL_RCC_OscConfig+0x420>
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006180:	2b05      	cmp	r3, #5
 8006182:	d009      	beq.n	8006198 <HAL_RCC_OscConfig+0x2bc>
 8006184:	4b65      	ldr	r3, [pc, #404]	; (800631c <HAL_RCC_OscConfig+0x440>)
 8006186:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006188:	f022 0201 	bic.w	r2, r2, #1
 800618c:	671a      	str	r2, [r3, #112]	; 0x70
 800618e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006190:	f022 0204 	bic.w	r2, r2, #4
 8006194:	671a      	str	r2, [r3, #112]	; 0x70
 8006196:	e7e0      	b.n	800615a <HAL_RCC_OscConfig+0x27e>
 8006198:	4b60      	ldr	r3, [pc, #384]	; (800631c <HAL_RCC_OscConfig+0x440>)
 800619a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800619c:	f042 0204 	orr.w	r2, r2, #4
 80061a0:	671a      	str	r2, [r3, #112]	; 0x70
 80061a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80061a4:	f042 0201 	orr.w	r2, r2, #1
 80061a8:	671a      	str	r2, [r3, #112]	; 0x70
 80061aa:	e7d6      	b.n	800615a <HAL_RCC_OscConfig+0x27e>
				}
			}
		} else {
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 80061ac:	f7fd ffc4 	bl	8004138 <HAL_GetTick>
 80061b0:	4606      	mov	r6, r0

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 80061b2:	4b5a      	ldr	r3, [pc, #360]	; (800631c <HAL_RCC_OscConfig+0x440>)
 80061b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061b6:	f013 0f02 	tst.w	r3, #2
 80061ba:	d008      	beq.n	80061ce <HAL_RCC_OscConfig+0x2f2>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 80061bc:	f7fd ffbc 	bl	8004138 <HAL_GetTick>
 80061c0:	1b80      	subs	r0, r0, r6
 80061c2:	f241 3388 	movw	r3, #5000	; 0x1388
 80061c6:	4298      	cmp	r0, r3
 80061c8:	d9f3      	bls.n	80061b2 <HAL_RCC_OscConfig+0x2d6>
					return HAL_TIMEOUT;
 80061ca:	2003      	movs	r0, #3
 80061cc:	e096      	b.n	80062fc <HAL_RCC_OscConfig+0x420>
				}
			}
		}

		/* Restore clock configuration if changed */
		if (pwrclkchanged == SET) {
 80061ce:	b9fd      	cbnz	r5, 8006210 <HAL_RCC_OscConfig+0x334>
		}
	}
	/*-------------------------------- PLL Configuration -----------------------*/
	/* Check the parameters */
	assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
	if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE) {
 80061d0:	69a3      	ldr	r3, [r4, #24]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	f000 8091 	beq.w	80062fa <HAL_RCC_OscConfig+0x41e>
		/* Check if the PLL is used as system clock or not */
		if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {
 80061d8:	4a50      	ldr	r2, [pc, #320]	; (800631c <HAL_RCC_OscConfig+0x440>)
 80061da:	6892      	ldr	r2, [r2, #8]
 80061dc:	f002 020c 	and.w	r2, r2, #12
 80061e0:	2a08      	cmp	r2, #8
 80061e2:	d059      	beq.n	8006298 <HAL_RCC_OscConfig+0x3bc>
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON) {
 80061e4:	2b02      	cmp	r3, #2
 80061e6:	d019      	beq.n	800621c <HAL_RCC_OscConfig+0x340>
						return HAL_TIMEOUT;
					}
				}
			} else {
				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 80061e8:	4a4c      	ldr	r2, [pc, #304]	; (800631c <HAL_RCC_OscConfig+0x440>)
 80061ea:	6813      	ldr	r3, [r2, #0]
 80061ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061f0:	6013      	str	r3, [r2, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 80061f2:	f7fd ffa1 	bl	8004138 <HAL_GetTick>
 80061f6:	4604      	mov	r4, r0

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 80061f8:	4b48      	ldr	r3, [pc, #288]	; (800631c <HAL_RCC_OscConfig+0x440>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006200:	d048      	beq.n	8006294 <HAL_RCC_OscConfig+0x3b8>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8006202:	f7fd ff99 	bl	8004138 <HAL_GetTick>
 8006206:	1b00      	subs	r0, r0, r4
 8006208:	2802      	cmp	r0, #2
 800620a:	d9f5      	bls.n	80061f8 <HAL_RCC_OscConfig+0x31c>
						return HAL_TIMEOUT;
 800620c:	2003      	movs	r0, #3
 800620e:	e075      	b.n	80062fc <HAL_RCC_OscConfig+0x420>
			__HAL_RCC_PWR_CLK_DISABLE();
 8006210:	4a42      	ldr	r2, [pc, #264]	; (800631c <HAL_RCC_OscConfig+0x440>)
 8006212:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006214:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006218:	6413      	str	r3, [r2, #64]	; 0x40
 800621a:	e7d9      	b.n	80061d0 <HAL_RCC_OscConfig+0x2f4>
				__HAL_RCC_PLL_DISABLE();
 800621c:	4a3f      	ldr	r2, [pc, #252]	; (800631c <HAL_RCC_OscConfig+0x440>)
 800621e:	6813      	ldr	r3, [r2, #0]
 8006220:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006224:	6013      	str	r3, [r2, #0]
				tickstart = HAL_GetTick();
 8006226:	f7fd ff87 	bl	8004138 <HAL_GetTick>
 800622a:	4605      	mov	r5, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 800622c:	4b3b      	ldr	r3, [pc, #236]	; (800631c <HAL_RCC_OscConfig+0x440>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006234:	d006      	beq.n	8006244 <HAL_RCC_OscConfig+0x368>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8006236:	f7fd ff7f 	bl	8004138 <HAL_GetTick>
 800623a:	1b40      	subs	r0, r0, r5
 800623c:	2802      	cmp	r0, #2
 800623e:	d9f5      	bls.n	800622c <HAL_RCC_OscConfig+0x350>
						return HAL_TIMEOUT;
 8006240:	2003      	movs	r0, #3
 8006242:	e05b      	b.n	80062fc <HAL_RCC_OscConfig+0x420>
				__HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006244:	69e3      	ldr	r3, [r4, #28]
 8006246:	6a22      	ldr	r2, [r4, #32]
 8006248:	4313      	orrs	r3, r2
 800624a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800624c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8006250:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006252:	0852      	lsrs	r2, r2, #1
 8006254:	3a01      	subs	r2, #1
 8006256:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800625a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800625c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006260:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006262:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8006266:	4a2d      	ldr	r2, [pc, #180]	; (800631c <HAL_RCC_OscConfig+0x440>)
 8006268:	6053      	str	r3, [r2, #4]
				__HAL_RCC_PLL_ENABLE();
 800626a:	6813      	ldr	r3, [r2, #0]
 800626c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006270:	6013      	str	r3, [r2, #0]
				tickstart = HAL_GetTick();
 8006272:	f7fd ff61 	bl	8004138 <HAL_GetTick>
 8006276:	4604      	mov	r4, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8006278:	4b28      	ldr	r3, [pc, #160]	; (800631c <HAL_RCC_OscConfig+0x440>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006280:	d106      	bne.n	8006290 <HAL_RCC_OscConfig+0x3b4>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8006282:	f7fd ff59 	bl	8004138 <HAL_GetTick>
 8006286:	1b00      	subs	r0, r0, r4
 8006288:	2802      	cmp	r0, #2
 800628a:	d9f5      	bls.n	8006278 <HAL_RCC_OscConfig+0x39c>
						return HAL_TIMEOUT;
 800628c:	2003      	movs	r0, #3
 800628e:	e035      	b.n	80062fc <HAL_RCC_OscConfig+0x420>
					{
				return HAL_ERROR;
			}
		}
	}
	return HAL_OK;
 8006290:	2000      	movs	r0, #0
 8006292:	e033      	b.n	80062fc <HAL_RCC_OscConfig+0x420>
 8006294:	2000      	movs	r0, #0
 8006296:	e031      	b.n	80062fc <HAL_RCC_OscConfig+0x420>
			pll_config = RCC->PLLCFGR;
 8006298:	4a20      	ldr	r2, [pc, #128]	; (800631c <HAL_RCC_OscConfig+0x440>)
 800629a:	6852      	ldr	r2, [r2, #4]
			if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800629c:	2b01      	cmp	r3, #1
 800629e:	d02f      	beq.n	8006300 <HAL_RCC_OscConfig+0x424>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 80062a0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
							!= RCC_OscInitStruct->PLL.PLLSource)
 80062a4:	69e1      	ldr	r1, [r4, #28]
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 80062a6:	428b      	cmp	r3, r1
 80062a8:	d12c      	bne.n	8006304 <HAL_RCC_OscConfig+0x428>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 80062aa:	f002 033f 	and.w	r3, r2, #63	; 0x3f
							!= RCC_OscInitStruct->PLL.PLLM)
 80062ae:	6a21      	ldr	r1, [r4, #32]
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 80062b0:	428b      	cmp	r3, r1
 80062b2:	d129      	bne.n	8006308 <HAL_RCC_OscConfig+0x42c>
							!= (RCC_OscInitStruct->PLL.PLLN
 80062b4:	6a61      	ldr	r1, [r4, #36]	; 0x24
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)
 80062b6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80062ba:	4013      	ands	r3, r2
 80062bc:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 80062c0:	d124      	bne.n	800630c <HAL_RCC_OscConfig+0x430>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)
 80062c2:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
							!= ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U)
 80062c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80062c8:	085b      	lsrs	r3, r3, #1
 80062ca:	3b01      	subs	r3, #1
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)
 80062cc:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 80062d0:	d11e      	bne.n	8006310 <HAL_RCC_OscConfig+0x434>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 80062d2:	f002 6370 	and.w	r3, r2, #251658240	; 0xf000000
							!= (RCC_OscInitStruct->PLL.PLLQ
 80062d6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 80062d8:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 80062dc:	d11a      	bne.n	8006314 <HAL_RCC_OscConfig+0x438>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)
 80062de:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
							!= (RCC_OscInitStruct->PLL.PLLR
 80062e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)
 80062e4:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
 80062e8:	d116      	bne.n	8006318 <HAL_RCC_OscConfig+0x43c>
	return HAL_OK;
 80062ea:	2000      	movs	r0, #0
 80062ec:	e006      	b.n	80062fc <HAL_RCC_OscConfig+0x420>
		return HAL_ERROR;
 80062ee:	2001      	movs	r0, #1
}
 80062f0:	4770      	bx	lr
				return HAL_ERROR;
 80062f2:	2001      	movs	r0, #1
 80062f4:	e002      	b.n	80062fc <HAL_RCC_OscConfig+0x420>
				return HAL_ERROR;
 80062f6:	2001      	movs	r0, #1
 80062f8:	e000      	b.n	80062fc <HAL_RCC_OscConfig+0x420>
	return HAL_OK;
 80062fa:	2000      	movs	r0, #0
}
 80062fc:	b002      	add	sp, #8
 80062fe:	bd70      	pop	{r4, r5, r6, pc}
				return HAL_ERROR;
 8006300:	2001      	movs	r0, #1
 8006302:	e7fb      	b.n	80062fc <HAL_RCC_OscConfig+0x420>
 8006304:	2001      	movs	r0, #1
 8006306:	e7f9      	b.n	80062fc <HAL_RCC_OscConfig+0x420>
 8006308:	2001      	movs	r0, #1
 800630a:	e7f7      	b.n	80062fc <HAL_RCC_OscConfig+0x420>
 800630c:	2001      	movs	r0, #1
 800630e:	e7f5      	b.n	80062fc <HAL_RCC_OscConfig+0x420>
 8006310:	2001      	movs	r0, #1
 8006312:	e7f3      	b.n	80062fc <HAL_RCC_OscConfig+0x420>
 8006314:	2001      	movs	r0, #1
 8006316:	e7f1      	b.n	80062fc <HAL_RCC_OscConfig+0x420>
 8006318:	2001      	movs	r0, #1
 800631a:	e7ef      	b.n	80062fc <HAL_RCC_OscConfig+0x420>
 800631c:	40023800 	.word	0x40023800

08006320 <HAL_RCC_GetSysClockFreq>:
 *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
 *
 *
 * @retval SYSCLK frequency
 */
uint32_t HAL_RCC_GetSysClockFreq(void) {
 8006320:	b508      	push	{r3, lr}
	uint32_t pllm = 0, pllvco = 0, pllp = 0;
	uint32_t sysclockfreq = 0;

	/* Get SYSCLK source -------------------------------------------------------*/
	switch (RCC->CFGR & RCC_CFGR_SWS) {
 8006322:	4b26      	ldr	r3, [pc, #152]	; (80063bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	f003 030c 	and.w	r3, r3, #12
 800632a:	2b04      	cmp	r3, #4
 800632c:	d041      	beq.n	80063b2 <HAL_RCC_GetSysClockFreq+0x92>
 800632e:	2b08      	cmp	r3, #8
 8006330:	d141      	bne.n	80063b6 <HAL_RCC_GetSysClockFreq+0x96>
	}
	case RCC_SYSCLKSOURCE_STATUS_PLLCLK: /* PLL used as system clock  source */
	{
		/* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
		 SYSCLK = PLL_VCO / PLLP */
		pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006332:	4b22      	ldr	r3, [pc, #136]	; (80063bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8006334:	685a      	ldr	r2, [r3, #4]
 8006336:	f002 023f 	and.w	r2, r2, #63	; 0x3f
		if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI) {
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8006340:	d012      	beq.n	8006368 <HAL_RCC_GetSysClockFreq+0x48>
			/* HSE used as PLL clock source */
			pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8006342:	4b1e      	ldr	r3, [pc, #120]	; (80063bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8006344:	6859      	ldr	r1, [r3, #4]
 8006346:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800634a:	481d      	ldr	r0, [pc, #116]	; (80063c0 <HAL_RCC_GetSysClockFreq+0xa0>)
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 800634c:	2300      	movs	r3, #0
 800634e:	fba1 0100 	umull	r0, r1, r1, r0
 8006352:	f7f9 ffcd 	bl	80002f0 <__aeabi_uldivmod>
			pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
		}
		pllp =
				((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos)
 8006356:	4b19      	ldr	r3, [pc, #100]	; (80063bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	f3c3 4301 	ubfx	r3, r3, #16, #2
						+ 1) * 2);
 800635e:	3301      	adds	r3, #1
		pllp =
 8006360:	005b      	lsls	r3, r3, #1

		sysclockfreq = pllvco / pllp;
 8006362:	fbb0 f0f3 	udiv	r0, r0, r3
		break;
 8006366:	e027      	b.n	80063b8 <HAL_RCC_GetSysClockFreq+0x98>
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8006368:	4b14      	ldr	r3, [pc, #80]	; (80063bc <HAL_RCC_GetSysClockFreq+0x9c>)
 800636a:	6858      	ldr	r0, [r3, #4]
 800636c:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8006370:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8006374:	ebbc 0c00 	subs.w	ip, ip, r0
 8006378:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800637c:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8006380:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8006384:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8006388:	ebb1 010c 	subs.w	r1, r1, ip
 800638c:	eb63 030e 	sbc.w	r3, r3, lr
 8006390:	00db      	lsls	r3, r3, #3
 8006392:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006396:	00c9      	lsls	r1, r1, #3
 8006398:	eb11 0c00 	adds.w	ip, r1, r0
 800639c:	f143 0300 	adc.w	r3, r3, #0
 80063a0:	0299      	lsls	r1, r3, #10
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 80063a2:	2300      	movs	r3, #0
 80063a4:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80063a8:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80063ac:	f7f9 ffa0 	bl	80002f0 <__aeabi_uldivmod>
 80063b0:	e7d1      	b.n	8006356 <HAL_RCC_GetSysClockFreq+0x36>
		sysclockfreq = HSE_VALUE;
 80063b2:	4803      	ldr	r0, [pc, #12]	; (80063c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80063b4:	e000      	b.n	80063b8 <HAL_RCC_GetSysClockFreq+0x98>
	switch (RCC->CFGR & RCC_CFGR_SWS) {
 80063b6:	4803      	ldr	r0, [pc, #12]	; (80063c4 <HAL_RCC_GetSysClockFreq+0xa4>)
		sysclockfreq = HSI_VALUE;
		break;
	}
	}
	return sysclockfreq;
}
 80063b8:	bd08      	pop	{r3, pc}
 80063ba:	bf00      	nop
 80063bc:	40023800 	.word	0x40023800
 80063c0:	017d7840 	.word	0x017d7840
 80063c4:	00f42400 	.word	0x00f42400

080063c8 <HAL_RCC_ClockConfig>:
	if (RCC_ClkInitStruct == NULL) {
 80063c8:	2800      	cmp	r0, #0
 80063ca:	f000 80a0 	beq.w	800650e <HAL_RCC_ClockConfig+0x146>
		uint32_t FLatency) {
 80063ce:	b570      	push	{r4, r5, r6, lr}
 80063d0:	460d      	mov	r5, r1
 80063d2:	4604      	mov	r4, r0
	if (FLatency > __HAL_FLASH_GET_LATENCY()) {
 80063d4:	4b52      	ldr	r3, [pc, #328]	; (8006520 <HAL_RCC_ClockConfig+0x158>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 030f 	and.w	r3, r3, #15
 80063dc:	428b      	cmp	r3, r1
 80063de:	d20b      	bcs.n	80063f8 <HAL_RCC_ClockConfig+0x30>
		__HAL_FLASH_SET_LATENCY(FLatency);
 80063e0:	4a4f      	ldr	r2, [pc, #316]	; (8006520 <HAL_RCC_ClockConfig+0x158>)
 80063e2:	6813      	ldr	r3, [r2, #0]
 80063e4:	f023 030f 	bic.w	r3, r3, #15
 80063e8:	430b      	orrs	r3, r1
 80063ea:	6013      	str	r3, [r2, #0]
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 80063ec:	6813      	ldr	r3, [r2, #0]
 80063ee:	f003 030f 	and.w	r3, r3, #15
 80063f2:	428b      	cmp	r3, r1
 80063f4:	f040 808d 	bne.w	8006512 <HAL_RCC_ClockConfig+0x14a>
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK)
 80063f8:	6823      	ldr	r3, [r4, #0]
 80063fa:	f013 0f02 	tst.w	r3, #2
 80063fe:	d017      	beq.n	8006430 <HAL_RCC_ClockConfig+0x68>
		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 8006400:	f013 0f04 	tst.w	r3, #4
 8006404:	d004      	beq.n	8006410 <HAL_RCC_ClockConfig+0x48>
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006406:	4a47      	ldr	r2, [pc, #284]	; (8006524 <HAL_RCC_ClockConfig+0x15c>)
 8006408:	6893      	ldr	r3, [r2, #8]
 800640a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800640e:	6093      	str	r3, [r2, #8]
		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 8006410:	6823      	ldr	r3, [r4, #0]
 8006412:	f013 0f08 	tst.w	r3, #8
 8006416:	d004      	beq.n	8006422 <HAL_RCC_ClockConfig+0x5a>
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006418:	4a42      	ldr	r2, [pc, #264]	; (8006524 <HAL_RCC_ClockConfig+0x15c>)
 800641a:	6893      	ldr	r3, [r2, #8]
 800641c:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006420:	6093      	str	r3, [r2, #8]
		MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006422:	4a40      	ldr	r2, [pc, #256]	; (8006524 <HAL_RCC_ClockConfig+0x15c>)
 8006424:	6893      	ldr	r3, [r2, #8]
 8006426:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800642a:	68a1      	ldr	r1, [r4, #8]
 800642c:	430b      	orrs	r3, r1
 800642e:	6093      	str	r3, [r2, #8]
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK)
 8006430:	6823      	ldr	r3, [r4, #0]
 8006432:	f013 0f01 	tst.w	r3, #1
 8006436:	d031      	beq.n	800649c <HAL_RCC_ClockConfig+0xd4>
		if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 8006438:	6863      	ldr	r3, [r4, #4]
 800643a:	2b01      	cmp	r3, #1
 800643c:	d020      	beq.n	8006480 <HAL_RCC_ClockConfig+0xb8>
		else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) {
 800643e:	2b02      	cmp	r3, #2
 8006440:	d025      	beq.n	800648e <HAL_RCC_ClockConfig+0xc6>
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8006442:	4a38      	ldr	r2, [pc, #224]	; (8006524 <HAL_RCC_ClockConfig+0x15c>)
 8006444:	6812      	ldr	r2, [r2, #0]
 8006446:	f012 0f02 	tst.w	r2, #2
 800644a:	d064      	beq.n	8006516 <HAL_RCC_ClockConfig+0x14e>
		__HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800644c:	4935      	ldr	r1, [pc, #212]	; (8006524 <HAL_RCC_ClockConfig+0x15c>)
 800644e:	688a      	ldr	r2, [r1, #8]
 8006450:	f022 0203 	bic.w	r2, r2, #3
 8006454:	4313      	orrs	r3, r2
 8006456:	608b      	str	r3, [r1, #8]
		tickstart = HAL_GetTick();
 8006458:	f7fd fe6e 	bl	8004138 <HAL_GetTick>
 800645c:	4606      	mov	r6, r0
		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 800645e:	4b31      	ldr	r3, [pc, #196]	; (8006524 <HAL_RCC_ClockConfig+0x15c>)
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f003 030c 	and.w	r3, r3, #12
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
 8006466:	6862      	ldr	r2, [r4, #4]
 8006468:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800646c:	d016      	beq.n	800649c <HAL_RCC_ClockConfig+0xd4>
			if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 800646e:	f7fd fe63 	bl	8004138 <HAL_GetTick>
 8006472:	1b80      	subs	r0, r0, r6
 8006474:	f241 3388 	movw	r3, #5000	; 0x1388
 8006478:	4298      	cmp	r0, r3
 800647a:	d9f0      	bls.n	800645e <HAL_RCC_ClockConfig+0x96>
				return HAL_TIMEOUT;
 800647c:	2003      	movs	r0, #3
 800647e:	e045      	b.n	800650c <HAL_RCC_ClockConfig+0x144>
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8006480:	4a28      	ldr	r2, [pc, #160]	; (8006524 <HAL_RCC_ClockConfig+0x15c>)
 8006482:	6812      	ldr	r2, [r2, #0]
 8006484:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8006488:	d1e0      	bne.n	800644c <HAL_RCC_ClockConfig+0x84>
				return HAL_ERROR;
 800648a:	2001      	movs	r0, #1
 800648c:	e03e      	b.n	800650c <HAL_RCC_ClockConfig+0x144>
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 800648e:	4a25      	ldr	r2, [pc, #148]	; (8006524 <HAL_RCC_ClockConfig+0x15c>)
 8006490:	6812      	ldr	r2, [r2, #0]
 8006492:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8006496:	d1d9      	bne.n	800644c <HAL_RCC_ClockConfig+0x84>
				return HAL_ERROR;
 8006498:	2001      	movs	r0, #1
 800649a:	e037      	b.n	800650c <HAL_RCC_ClockConfig+0x144>
	if (FLatency < __HAL_FLASH_GET_LATENCY()) {
 800649c:	4b20      	ldr	r3, [pc, #128]	; (8006520 <HAL_RCC_ClockConfig+0x158>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 030f 	and.w	r3, r3, #15
 80064a4:	42ab      	cmp	r3, r5
 80064a6:	d90a      	bls.n	80064be <HAL_RCC_ClockConfig+0xf6>
		__HAL_FLASH_SET_LATENCY(FLatency);
 80064a8:	4a1d      	ldr	r2, [pc, #116]	; (8006520 <HAL_RCC_ClockConfig+0x158>)
 80064aa:	6813      	ldr	r3, [r2, #0]
 80064ac:	f023 030f 	bic.w	r3, r3, #15
 80064b0:	432b      	orrs	r3, r5
 80064b2:	6013      	str	r3, [r2, #0]
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 80064b4:	6813      	ldr	r3, [r2, #0]
 80064b6:	f003 030f 	and.w	r3, r3, #15
 80064ba:	42ab      	cmp	r3, r5
 80064bc:	d12d      	bne.n	800651a <HAL_RCC_ClockConfig+0x152>
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 80064be:	6823      	ldr	r3, [r4, #0]
 80064c0:	f013 0f04 	tst.w	r3, #4
 80064c4:	d006      	beq.n	80064d4 <HAL_RCC_ClockConfig+0x10c>
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1,
 80064c6:	4a17      	ldr	r2, [pc, #92]	; (8006524 <HAL_RCC_ClockConfig+0x15c>)
 80064c8:	6893      	ldr	r3, [r2, #8]
 80064ca:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80064ce:	68e1      	ldr	r1, [r4, #12]
 80064d0:	430b      	orrs	r3, r1
 80064d2:	6093      	str	r3, [r2, #8]
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 80064d4:	6823      	ldr	r3, [r4, #0]
 80064d6:	f013 0f08 	tst.w	r3, #8
 80064da:	d007      	beq.n	80064ec <HAL_RCC_ClockConfig+0x124>
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2,
 80064dc:	4a11      	ldr	r2, [pc, #68]	; (8006524 <HAL_RCC_ClockConfig+0x15c>)
 80064de:	6893      	ldr	r3, [r2, #8]
 80064e0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80064e4:	6921      	ldr	r1, [r4, #16]
 80064e6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80064ea:	6093      	str	r3, [r2, #8]
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 80064ec:	f7ff ff18 	bl	8006320 <HAL_RCC_GetSysClockFreq>
			>> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80064f0:	4b0c      	ldr	r3, [pc, #48]	; (8006524 <HAL_RCC_ClockConfig+0x15c>)
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80064f8:	4a0b      	ldr	r2, [pc, #44]	; (8006528 <HAL_RCC_ClockConfig+0x160>)
 80064fa:	5cd3      	ldrb	r3, [r2, r3]
 80064fc:	40d8      	lsrs	r0, r3
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 80064fe:	4b0b      	ldr	r3, [pc, #44]	; (800652c <HAL_RCC_ClockConfig+0x164>)
 8006500:	6018      	str	r0, [r3, #0]
	HAL_InitTick(uwTickPrio);
 8006502:	4b0b      	ldr	r3, [pc, #44]	; (8006530 <HAL_RCC_ClockConfig+0x168>)
 8006504:	6818      	ldr	r0, [r3, #0]
 8006506:	f7fd fce9 	bl	8003edc <HAL_InitTick>
	return HAL_OK;
 800650a:	2000      	movs	r0, #0
}
 800650c:	bd70      	pop	{r4, r5, r6, pc}
		return HAL_ERROR;
 800650e:	2001      	movs	r0, #1
}
 8006510:	4770      	bx	lr
			return HAL_ERROR;
 8006512:	2001      	movs	r0, #1
 8006514:	e7fa      	b.n	800650c <HAL_RCC_ClockConfig+0x144>
				return HAL_ERROR;
 8006516:	2001      	movs	r0, #1
 8006518:	e7f8      	b.n	800650c <HAL_RCC_ClockConfig+0x144>
			return HAL_ERROR;
 800651a:	2001      	movs	r0, #1
 800651c:	e7f6      	b.n	800650c <HAL_RCC_ClockConfig+0x144>
 800651e:	bf00      	nop
 8006520:	40023c00 	.word	0x40023c00
 8006524:	40023800 	.word	0x40023800
 8006528:	0800b1f0 	.word	0x0800b1f0
 800652c:	200000a8 	.word	0x200000a8
 8006530:	200000b0 	.word	0x200000b0

08006534 <HAL_RCC_GetHCLKFreq>:
 * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
 * @retval HCLK frequency
 */
uint32_t HAL_RCC_GetHCLKFreq(void) {
	return SystemCoreClock;
}
 8006534:	4b01      	ldr	r3, [pc, #4]	; (800653c <HAL_RCC_GetHCLKFreq+0x8>)
 8006536:	6818      	ldr	r0, [r3, #0]
 8006538:	4770      	bx	lr
 800653a:	bf00      	nop
 800653c:	200000a8 	.word	0x200000a8

08006540 <HAL_RCC_GetPCLK1Freq>:
 * @brief  Returns the PCLK1 frequency
 * @note   Each time PCLK1 changes, this function must be called to update the
 *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK1 frequency
 */
uint32_t HAL_RCC_GetPCLK1Freq(void) {
 8006540:	b508      	push	{r3, lr}
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (HAL_RCC_GetHCLKFreq()
 8006542:	f7ff fff7 	bl	8006534 <HAL_RCC_GetHCLKFreq>
			>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006546:	4b04      	ldr	r3, [pc, #16]	; (8006558 <HAL_RCC_GetPCLK1Freq+0x18>)
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800654e:	4a03      	ldr	r2, [pc, #12]	; (800655c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006550:	5cd3      	ldrb	r3, [r2, r3]
}
 8006552:	40d8      	lsrs	r0, r3
 8006554:	bd08      	pop	{r3, pc}
 8006556:	bf00      	nop
 8006558:	40023800 	.word	0x40023800
 800655c:	0800b200 	.word	0x0800b200

08006560 <HAL_RCC_GetPCLK2Freq>:
 * @brief  Returns the PCLK2 frequency
 * @note   Each time PCLK2 changes, this function must be called to update the
 *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK2 frequency
 */
uint32_t HAL_RCC_GetPCLK2Freq(void) {
 8006560:	b508      	push	{r3, lr}
	/* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
	return (HAL_RCC_GetHCLKFreq()
 8006562:	f7ff ffe7 	bl	8006534 <HAL_RCC_GetHCLKFreq>
			>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006566:	4b04      	ldr	r3, [pc, #16]	; (8006578 <HAL_RCC_GetPCLK2Freq+0x18>)
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800656e:	4a03      	ldr	r2, [pc, #12]	; (800657c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006570:	5cd3      	ldrb	r3, [r2, r3]
}
 8006572:	40d8      	lsrs	r0, r3
 8006574:	bd08      	pop	{r3, pc}
 8006576:	bf00      	nop
 8006578:	40023800 	.word	0x40023800
 800657c:	0800b200 	.word	0x0800b200

08006580 <HAL_RCC_GetClockConfig>:
 * @retval None
 */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct,
		uint32_t *pFLatency) {
	/* Set all possible values for the Clock type parameter --------------------*/
	RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 8006580:	230f      	movs	r3, #15
 8006582:	6003      	str	r3, [r0, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

	/* Get the SYSCLK configuration --------------------------------------------*/
	RCC_ClkInitStruct->SYSCLKSource = (uint32_t) (RCC->CFGR & RCC_CFGR_SW);
 8006584:	4b0b      	ldr	r3, [pc, #44]	; (80065b4 <HAL_RCC_GetClockConfig+0x34>)
 8006586:	689a      	ldr	r2, [r3, #8]
 8006588:	f002 0203 	and.w	r2, r2, #3
 800658c:	6042      	str	r2, [r0, #4]

	/* Get the HCLK configuration ----------------------------------------------*/
	RCC_ClkInitStruct->AHBCLKDivider = (uint32_t) (RCC->CFGR & RCC_CFGR_HPRE);
 800658e:	689a      	ldr	r2, [r3, #8]
 8006590:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8006594:	6082      	str	r2, [r0, #8]

	/* Get the APB1 configuration ----------------------------------------------*/
	RCC_ClkInitStruct->APB1CLKDivider = (uint32_t) (RCC->CFGR & RCC_CFGR_PPRE1);
 8006596:	689a      	ldr	r2, [r3, #8]
 8006598:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800659c:	60c2      	str	r2, [r0, #12]

	/* Get the APB2 configuration ----------------------------------------------*/
	RCC_ClkInitStruct->APB2CLKDivider = (uint32_t) ((RCC->CFGR & RCC_CFGR_PPRE2)
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	08db      	lsrs	r3, r3, #3
 80065a2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80065a6:	6103      	str	r3, [r0, #16]
			>> 3);

	/* Get the Flash Wait State (Latency) configuration ------------------------*/
	*pFLatency = (uint32_t) (FLASH->ACR & FLASH_ACR_LATENCY);
 80065a8:	4b03      	ldr	r3, [pc, #12]	; (80065b8 <HAL_RCC_GetClockConfig+0x38>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 030f 	and.w	r3, r3, #15
 80065b0:	600b      	str	r3, [r1, #0]
}
 80065b2:	4770      	bx	lr
 80065b4:	40023800 	.word	0x40023800
 80065b8:	40023c00 	.word	0x40023c00

080065bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065be:	b083      	sub	sp, #12
 80065c0:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80065c2:	6806      	ldr	r6, [r0, #0]
 80065c4:	f016 0601 	ands.w	r6, r6, #1
 80065c8:	d00d      	beq.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80065ca:	4bb5      	ldr	r3, [pc, #724]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80065cc:	689a      	ldr	r2, [r3, #8]
 80065ce:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80065d2:	609a      	str	r2, [r3, #8]
 80065d4:	689a      	ldr	r2, [r3, #8]
 80065d6:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80065d8:	430a      	orrs	r2, r1
 80065da:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80065dc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80065de:	2b00      	cmp	r3, #0
 80065e0:	f000 8167 	beq.w	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  uint32_t plli2sused = 0;
 80065e4:	2600      	movs	r6, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80065e6:	6825      	ldr	r5, [r4, #0]
 80065e8:	f415 2500 	ands.w	r5, r5, #524288	; 0x80000
 80065ec:	d011      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80065ee:	4aac      	ldr	r2, [pc, #688]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80065f0:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80065f4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80065f8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80065fa:	430b      	orrs	r3, r1
 80065fc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006600:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006602:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006606:	f000 8156 	beq.w	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800660a:	2b00      	cmp	r3, #0
 800660c:	f000 8155 	beq.w	80068ba <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  uint32_t pllsaiused = 0;
 8006610:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006612:	6823      	ldr	r3, [r4, #0]
 8006614:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8006618:	d00f      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x7e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800661a:	4aa1      	ldr	r2, [pc, #644]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800661c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8006620:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8006624:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006626:	430b      	orrs	r3, r1
 8006628:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800662c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800662e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006632:	f000 8144 	beq.w	80068be <HAL_RCCEx_PeriphCLKConfig+0x302>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006636:	b903      	cbnz	r3, 800663a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      pllsaiused = 1;
 8006638:	2501      	movs	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800663a:	6823      	ldr	r3, [r4, #0]
 800663c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8006640:	d000      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
      plli2sused = 1;
 8006642:	2601      	movs	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006644:	f013 0f20 	tst.w	r3, #32
 8006648:	f040 813b 	bne.w	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x306>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800664c:	6823      	ldr	r3, [r4, #0]
 800664e:	f013 0f10 	tst.w	r3, #16
 8006652:	d00c      	beq.n	800666e <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006654:	4b92      	ldr	r3, [pc, #584]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006656:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800665a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800665e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8006662:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006666:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006668:	430a      	orrs	r2, r1
 800666a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800666e:	6823      	ldr	r3, [r4, #0]
 8006670:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006674:	d008      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006676:	4a8a      	ldr	r2, [pc, #552]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006678:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800667c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006680:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006682:	430b      	orrs	r3, r1
 8006684:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006688:	6823      	ldr	r3, [r4, #0]
 800668a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800668e:	d008      	beq.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006690:	4a83      	ldr	r2, [pc, #524]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006692:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006696:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800669a:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800669c:	430b      	orrs	r3, r1
 800669e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80066a2:	6823      	ldr	r3, [r4, #0]
 80066a4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80066a8:	d008      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80066aa:	4a7d      	ldr	r2, [pc, #500]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80066ac:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80066b0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80066b4:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80066b6:	430b      	orrs	r3, r1
 80066b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80066bc:	6823      	ldr	r3, [r4, #0]
 80066be:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80066c2:	d008      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80066c4:	4a76      	ldr	r2, [pc, #472]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80066c6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80066ca:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80066ce:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80066d0:	430b      	orrs	r3, r1
 80066d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80066d6:	6823      	ldr	r3, [r4, #0]
 80066d8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80066dc:	d008      	beq.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80066de:	4a70      	ldr	r2, [pc, #448]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80066e0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80066e4:	f023 0303 	bic.w	r3, r3, #3
 80066e8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80066ea:	430b      	orrs	r3, r1
 80066ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80066f0:	6823      	ldr	r3, [r4, #0]
 80066f2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80066f6:	d008      	beq.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80066f8:	4a69      	ldr	r2, [pc, #420]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80066fa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80066fe:	f023 030c 	bic.w	r3, r3, #12
 8006702:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006704:	430b      	orrs	r3, r1
 8006706:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800670a:	6823      	ldr	r3, [r4, #0]
 800670c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006710:	d008      	beq.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006712:	4a63      	ldr	r2, [pc, #396]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006714:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006718:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800671c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800671e:	430b      	orrs	r3, r1
 8006720:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006724:	6823      	ldr	r3, [r4, #0]
 8006726:	f413 7f00 	tst.w	r3, #512	; 0x200
 800672a:	d008      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800672c:	4a5c      	ldr	r2, [pc, #368]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800672e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006732:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006736:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8006738:	430b      	orrs	r3, r1
 800673a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800673e:	6823      	ldr	r3, [r4, #0]
 8006740:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006744:	d008      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006746:	4a56      	ldr	r2, [pc, #344]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006748:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800674c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006750:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8006752:	430b      	orrs	r3, r1
 8006754:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006758:	6823      	ldr	r3, [r4, #0]
 800675a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800675e:	d008      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006760:	4a4f      	ldr	r2, [pc, #316]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006762:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006766:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800676a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800676c:	430b      	orrs	r3, r1
 800676e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006772:	6823      	ldr	r3, [r4, #0]
 8006774:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8006778:	d008      	beq.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800677a:	4a49      	ldr	r2, [pc, #292]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800677c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006780:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006784:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006786:	430b      	orrs	r3, r1
 8006788:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800678c:	6823      	ldr	r3, [r4, #0]
 800678e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8006792:	d008      	beq.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006794:	4a42      	ldr	r2, [pc, #264]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006796:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800679a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800679e:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80067a0:	430b      	orrs	r3, r1
 80067a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80067a6:	6823      	ldr	r3, [r4, #0]
 80067a8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80067ac:	d008      	beq.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80067ae:	4a3c      	ldr	r2, [pc, #240]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80067b0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80067b4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80067b8:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80067ba:	430b      	orrs	r3, r1
 80067bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80067c0:	6823      	ldr	r3, [r4, #0]
 80067c2:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80067c6:	d00d      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80067c8:	4a35      	ldr	r2, [pc, #212]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80067ca:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80067ce:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80067d2:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80067d4:	430b      	orrs	r3, r1
 80067d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80067da:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80067dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067e0:	f000 80d5 	beq.w	800698e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80067e4:	6823      	ldr	r3, [r4, #0]
 80067e6:	f013 0f08 	tst.w	r3, #8
 80067ea:	d000      	beq.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    pllsaiused = 1;
 80067ec:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80067ee:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80067f2:	d008      	beq.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80067f4:	4a2a      	ldr	r2, [pc, #168]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80067f6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80067fa:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80067fe:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8006800:	430b      	orrs	r3, r1
 8006802:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006806:	6823      	ldr	r3, [r4, #0]
 8006808:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800680c:	d009      	beq.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800680e:	4a24      	ldr	r2, [pc, #144]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006810:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006814:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006818:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800681c:	430b      	orrs	r3, r1
 800681e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006822:	6823      	ldr	r3, [r4, #0]
 8006824:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8006828:	d009      	beq.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x282>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800682a:	4a1d      	ldr	r2, [pc, #116]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800682c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006830:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006834:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8006838:	430b      	orrs	r3, r1
 800683a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800683e:	6823      	ldr	r3, [r4, #0]
 8006840:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8006844:	d009      	beq.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006846:	4a16      	ldr	r2, [pc, #88]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006848:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800684c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006850:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8006854:	430b      	orrs	r3, r1
 8006856:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800685a:	6823      	ldr	r3, [r4, #0]
 800685c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8006860:	d009      	beq.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006862:	4a0f      	ldr	r2, [pc, #60]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006864:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8006868:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800686c:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8006870:	430b      	orrs	r3, r1
 8006872:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006876:	b926      	cbnz	r6, 8006882 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
 8006878:	6823      	ldr	r3, [r4, #0]
 800687a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800687e:	f000 8106 	beq.w	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006882:	4a07      	ldr	r2, [pc, #28]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006884:	6813      	ldr	r3, [r2, #0]
 8006886:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800688a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800688c:	f7fd fc54 	bl	8004138 <HAL_GetTick>
 8006890:	4606      	mov	r6, r0

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006892:	4b03      	ldr	r3, [pc, #12]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800689a:	d07a      	beq.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
 800689c:	e002      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 800689e:	bf00      	nop
 80068a0:	40023800 	.word	0x40023800
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80068a4:	f7fd fc48 	bl	8004138 <HAL_GetTick>
 80068a8:	1b80      	subs	r0, r0, r6
 80068aa:	2864      	cmp	r0, #100	; 0x64
 80068ac:	d9f1      	bls.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068ae:	2003      	movs	r0, #3
 80068b0:	e0f0      	b.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
      plli2sused = 1;
 80068b2:	2601      	movs	r6, #1
 80068b4:	e697      	b.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1;
 80068b6:	2601      	movs	r6, #1
 80068b8:	e6a7      	b.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x4e>
      pllsaiused = 1;
 80068ba:	2501      	movs	r5, #1
 80068bc:	e6a9      	b.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x56>
      plli2sused = 1;
 80068be:	2601      	movs	r6, #1
 80068c0:	e6b9      	b.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    __HAL_RCC_PWR_CLK_ENABLE();
 80068c2:	4b7f      	ldr	r3, [pc, #508]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80068c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068c6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80068ca:	641a      	str	r2, [r3, #64]	; 0x40
 80068cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068d2:	9301      	str	r3, [sp, #4]
 80068d4:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80068d6:	4a7b      	ldr	r2, [pc, #492]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 80068d8:	6813      	ldr	r3, [r2, #0]
 80068da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068de:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80068e0:	f7fd fc2a 	bl	8004138 <HAL_GetTick>
 80068e4:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80068e6:	4b77      	ldr	r3, [pc, #476]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f413 7f80 	tst.w	r3, #256	; 0x100
 80068ee:	d106      	bne.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x342>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068f0:	f7fd fc22 	bl	8004138 <HAL_GetTick>
 80068f4:	1bc0      	subs	r0, r0, r7
 80068f6:	2864      	cmp	r0, #100	; 0x64
 80068f8:	d9f5      	bls.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x32a>
        return HAL_TIMEOUT;
 80068fa:	2003      	movs	r0, #3
 80068fc:	e0ca      	b.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80068fe:	4b70      	ldr	r3, [pc, #448]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006902:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8006906:	d015      	beq.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8006908:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800690a:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800690e:	429a      	cmp	r2, r3
 8006910:	d010      	beq.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x378>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006912:	4b6b      	ldr	r3, [pc, #428]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006914:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006916:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800691a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800691c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8006920:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006922:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8006924:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8006928:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 800692a:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800692c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800692e:	f013 0f01 	tst.w	r3, #1
 8006932:	d112      	bne.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006934:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006936:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800693a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800693e:	d01d      	beq.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8006940:	4a5f      	ldr	r2, [pc, #380]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006942:	6893      	ldr	r3, [r2, #8]
 8006944:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006948:	6093      	str	r3, [r2, #8]
 800694a:	495d      	ldr	r1, [pc, #372]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800694c:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 800694e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006950:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8006954:	4313      	orrs	r3, r2
 8006956:	670b      	str	r3, [r1, #112]	; 0x70
 8006958:	e678      	b.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x90>
        tickstart = HAL_GetTick();
 800695a:	f7fd fbed 	bl	8004138 <HAL_GetTick>
 800695e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006960:	4b57      	ldr	r3, [pc, #348]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006964:	f013 0f02 	tst.w	r3, #2
 8006968:	d1e4      	bne.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x378>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800696a:	f7fd fbe5 	bl	8004138 <HAL_GetTick>
 800696e:	1bc0      	subs	r0, r0, r7
 8006970:	f241 3388 	movw	r3, #5000	; 0x1388
 8006974:	4298      	cmp	r0, r3
 8006976:	d9f3      	bls.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
            return HAL_TIMEOUT;
 8006978:	2003      	movs	r0, #3
 800697a:	e08b      	b.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800697c:	4850      	ldr	r0, [pc, #320]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800697e:	6882      	ldr	r2, [r0, #8]
 8006980:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8006984:	4950      	ldr	r1, [pc, #320]	; (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006986:	4019      	ands	r1, r3
 8006988:	430a      	orrs	r2, r1
 800698a:	6082      	str	r2, [r0, #8]
 800698c:	e7dd      	b.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x38e>
      pllsaiused = 1;
 800698e:	2501      	movs	r5, #1
 8006990:	e728      	b.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x228>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006992:	6823      	ldr	r3, [r4, #0]
 8006994:	f013 0f01 	tst.w	r3, #1
 8006998:	d013      	beq.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800699a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800699c:	b98b      	cbnz	r3, 80069c2 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800699e:	4a48      	ldr	r2, [pc, #288]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80069a0:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80069a4:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80069a8:	6860      	ldr	r0, [r4, #4]
 80069aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80069ae:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80069b2:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80069b6:	430b      	orrs	r3, r1
 80069b8:	68a1      	ldr	r1, [r4, #8]
 80069ba:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80069be:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80069c2:	6823      	ldr	r3, [r4, #0]
 80069c4:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80069c8:	d003      	beq.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80069ca:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80069cc:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80069d0:	d006      	beq.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x424>
 80069d2:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80069d6:	d01e      	beq.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x45a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80069d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80069da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069de:	d11a      	bne.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x45a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80069e0:	4a37      	ldr	r2, [pc, #220]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80069e2:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80069e6:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80069ea:	6860      	ldr	r0, [r4, #4]
 80069ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80069f0:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80069f4:	68e0      	ldr	r0, [r4, #12]
 80069f6:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80069fa:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80069fe:	430b      	orrs	r3, r1
 8006a00:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006a04:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8006a08:	f023 031f 	bic.w	r3, r3, #31
 8006a0c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006a0e:	3901      	subs	r1, #1
 8006a10:	430b      	orrs	r3, r1
 8006a12:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006a16:	6823      	ldr	r3, [r4, #0]
 8006a18:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8006a1c:	d011      	beq.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x486>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006a1e:	4a28      	ldr	r2, [pc, #160]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006a20:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006a24:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006a28:	6866      	ldr	r6, [r4, #4]
 8006a2a:	6923      	ldr	r3, [r4, #16]
 8006a2c:	041b      	lsls	r3, r3, #16
 8006a2e:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8006a32:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8006a36:	4303      	orrs	r3, r0
 8006a38:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8006a3c:	430b      	orrs	r3, r1
 8006a3e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006a42:	6823      	ldr	r3, [r4, #0]
 8006a44:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006a48:	d00d      	beq.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006a4a:	6862      	ldr	r2, [r4, #4]
 8006a4c:	6923      	ldr	r3, [r4, #16]
 8006a4e:	041b      	lsls	r3, r3, #16
 8006a50:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8006a54:	68e2      	ldr	r2, [r4, #12]
 8006a56:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006a5a:	68a2      	ldr	r2, [r4, #8]
 8006a5c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8006a60:	4a17      	ldr	r2, [pc, #92]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006a62:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006a66:	4a16      	ldr	r2, [pc, #88]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006a68:	6813      	ldr	r3, [r2, #0]
 8006a6a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a70:	f7fd fb62 	bl	8004138 <HAL_GetTick>
 8006a74:	4606      	mov	r6, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a76:	4b12      	ldr	r3, [pc, #72]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8006a7e:	d106      	bne.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006a80:	f7fd fb5a 	bl	8004138 <HAL_GetTick>
 8006a84:	1b80      	subs	r0, r0, r6
 8006a86:	2864      	cmp	r0, #100	; 0x64
 8006a88:	d9f5      	bls.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a8a:	2003      	movs	r0, #3
 8006a8c:	e002      	b.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006a8e:	2d01      	cmp	r5, #1
 8006a90:	d002      	beq.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8006a92:	2000      	movs	r0, #0
}
 8006a94:	b003      	add	sp, #12
 8006a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 8006a98:	4a09      	ldr	r2, [pc, #36]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006a9a:	6813      	ldr	r3, [r2, #0]
 8006a9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006aa0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006aa2:	f7fd fb49 	bl	8004138 <HAL_GetTick>
 8006aa6:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006aa8:	4b05      	ldr	r3, [pc, #20]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8006ab0:	d00c      	beq.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x510>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006ab2:	f7fd fb41 	bl	8004138 <HAL_GetTick>
 8006ab6:	1b40      	subs	r0, r0, r5
 8006ab8:	2864      	cmp	r0, #100	; 0x64
 8006aba:	d9f5      	bls.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
        return HAL_TIMEOUT;
 8006abc:	2003      	movs	r0, #3
 8006abe:	e7e9      	b.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8006ac0:	40023800 	.word	0x40023800
 8006ac4:	40007000 	.word	0x40007000
 8006ac8:	0ffffcff 	.word	0x0ffffcff
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006acc:	6823      	ldr	r3, [r4, #0]
 8006ace:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8006ad2:	d001      	beq.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x51c>
 8006ad4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006ad6:	b122      	cbz	r2, 8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8006ad8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8006adc:	d01d      	beq.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x55e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006ade:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ae0:	b9db      	cbnz	r3, 8006b1a <HAL_RCCEx_PeriphCLKConfig+0x55e>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006ae2:	4a35      	ldr	r2, [pc, #212]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8006ae4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006ae8:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006aec:	6960      	ldr	r0, [r4, #20]
 8006aee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006af2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8006af6:	69a0      	ldr	r0, [r4, #24]
 8006af8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8006afc:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8006b00:	430b      	orrs	r3, r1
 8006b02:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006b06:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8006b0a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8006b0e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006b10:	3901      	subs	r1, #1
 8006b12:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006b16:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006b1a:	6823      	ldr	r3, [r4, #0]
 8006b1c:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8006b20:	d003      	beq.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x56e>
 8006b22:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006b24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b28:	d031      	beq.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x5d2>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006b2a:	6823      	ldr	r3, [r4, #0]
 8006b2c:	f013 0f08 	tst.w	r3, #8
 8006b30:	d019      	beq.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006b32:	4a21      	ldr	r2, [pc, #132]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8006b34:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006b38:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006b3c:	6960      	ldr	r0, [r4, #20]
 8006b3e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006b42:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8006b46:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8006b4a:	430b      	orrs	r3, r1
 8006b4c:	69e1      	ldr	r1, [r4, #28]
 8006b4e:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8006b52:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006b56:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8006b5a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006b5e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006b60:	430b      	orrs	r3, r1
 8006b62:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8006b66:	4a14      	ldr	r2, [pc, #80]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8006b68:	6813      	ldr	r3, [r2, #0]
 8006b6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b6e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006b70:	f7fd fae2 	bl	8004138 <HAL_GetTick>
 8006b74:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006b76:	4b10      	ldr	r3, [pc, #64]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8006b7e:	d119      	bne.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006b80:	f7fd fada 	bl	8004138 <HAL_GetTick>
 8006b84:	1b00      	subs	r0, r0, r4
 8006b86:	2864      	cmp	r0, #100	; 0x64
 8006b88:	d9f5      	bls.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
        return HAL_TIMEOUT;
 8006b8a:	2003      	movs	r0, #3
 8006b8c:	e782      	b.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006b8e:	4a0a      	ldr	r2, [pc, #40]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8006b90:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006b94:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006b98:	6965      	ldr	r5, [r4, #20]
 8006b9a:	6a23      	ldr	r3, [r4, #32]
 8006b9c:	041b      	lsls	r3, r3, #16
 8006b9e:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8006ba2:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8006ba6:	4303      	orrs	r3, r0
 8006ba8:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8006bac:	430b      	orrs	r3, r1
 8006bae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8006bb2:	e7ba      	b.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x56e>
  return HAL_OK;
 8006bb4:	2000      	movs	r0, #0
 8006bb6:	e76d      	b.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8006bb8:	40023800 	.word	0x40023800

08006bbc <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8006bbc:	4770      	bx	lr

08006bbe <HAL_SDRAM_Init>:
  if (hsdram == NULL)
 8006bbe:	b1e0      	cbz	r0, 8006bfa <HAL_SDRAM_Init+0x3c>
{
 8006bc0:	b538      	push	{r3, r4, r5, lr}
 8006bc2:	460d      	mov	r5, r1
 8006bc4:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006bc6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006bca:	b18b      	cbz	r3, 8006bf0 <HAL_SDRAM_Init+0x32>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006bcc:	2302      	movs	r3, #2
 8006bce:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006bd2:	4621      	mov	r1, r4
 8006bd4:	f851 0b04 	ldr.w	r0, [r1], #4
 8006bd8:	f001 f8c2 	bl	8007d60 <FMC_SDRAM_Init>
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006bdc:	6862      	ldr	r2, [r4, #4]
 8006bde:	4629      	mov	r1, r5
 8006be0:	6820      	ldr	r0, [r4, #0]
 8006be2:	f001 f8f7 	bl	8007dd4 <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006be6:	2301      	movs	r3, #1
 8006be8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 8006bec:	2000      	movs	r0, #0
}
 8006bee:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8006bf0:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8006bf4:	f7ff ffe2 	bl	8006bbc <HAL_SDRAM_MspInit>
 8006bf8:	e7e8      	b.n	8006bcc <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 8006bfa:	2001      	movs	r0, #1
}
 8006bfc:	4770      	bx	lr

08006bfe <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8006bfe:	b538      	push	{r3, r4, r5, lr}
 8006c00:	4604      	mov	r4, r0
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006c02:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006c06:	b2d8      	uxtb	r0, r3

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8006c08:	2802      	cmp	r0, #2
 8006c0a:	d005      	beq.n	8006c18 <HAL_SDRAM_SendCommand+0x1a>
 8006c0c:	460d      	mov	r5, r1
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8006c0e:	2805      	cmp	r0, #5
 8006c10:	bf18      	it	ne
 8006c12:	2801      	cmpne	r0, #1
 8006c14:	d001      	beq.n	8006c1a <HAL_SDRAM_SendCommand+0x1c>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 8006c16:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8006c18:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006c1a:	2302      	movs	r3, #2
 8006c1c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006c20:	6820      	ldr	r0, [r4, #0]
 8006c22:	f001 f92b 	bl	8007e7c <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006c26:	682b      	ldr	r3, [r5, #0]
 8006c28:	2b02      	cmp	r3, #2
 8006c2a:	d004      	beq.n	8006c36 <HAL_SDRAM_SendCommand+0x38>
      hsdram->State = HAL_SDRAM_STATE_READY;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 8006c32:	2000      	movs	r0, #0
 8006c34:	e7f0      	b.n	8006c18 <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006c36:	2305      	movs	r3, #5
 8006c38:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 8006c3c:	2000      	movs	r0, #0
 8006c3e:	e7eb      	b.n	8006c18 <HAL_SDRAM_SendCommand+0x1a>

08006c40 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006c40:	b510      	push	{r4, lr}
 8006c42:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006c44:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006c48:	b2d8      	uxtb	r0, r3
 8006c4a:	2802      	cmp	r0, #2
 8006c4c:	d005      	beq.n	8006c5a <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8006c4e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d001      	beq.n	8006c5c <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 8006c58:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8006c5a:	bd10      	pop	{r4, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006c5c:	2302      	movs	r3, #2
 8006c5e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006c62:	6820      	ldr	r0, [r4, #0]
 8006c64:	f001 f922 	bl	8007eac <FMC_SDRAM_ProgramRefreshRate>
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 8006c6e:	2000      	movs	r0, #0
 8006c70:	e7f3      	b.n	8006c5a <HAL_SDRAM_ProgramRefreshRate+0x1a>

08006c72 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006c72:	4770      	bx	lr

08006c74 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c74:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d13a      	bne.n	8006cf4 <HAL_TIM_Base_Start_IT+0x80>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c7e:	2302      	movs	r3, #2
 8006c80:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c84:	6802      	ldr	r2, [r0, #0]
 8006c86:	68d3      	ldr	r3, [r2, #12]
 8006c88:	f043 0301 	orr.w	r3, r3, #1
 8006c8c:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c8e:	6803      	ldr	r3, [r0, #0]
 8006c90:	4a1a      	ldr	r2, [pc, #104]	; (8006cfc <HAL_TIM_Base_Start_IT+0x88>)
 8006c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c96:	bf18      	it	ne
 8006c98:	4293      	cmpne	r3, r2
 8006c9a:	d01d      	beq.n	8006cd8 <HAL_TIM_Base_Start_IT+0x64>
 8006c9c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d019      	beq.n	8006cd8 <HAL_TIM_Base_Start_IT+0x64>
 8006ca4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d015      	beq.n	8006cd8 <HAL_TIM_Base_Start_IT+0x64>
 8006cac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d011      	beq.n	8006cd8 <HAL_TIM_Base_Start_IT+0x64>
 8006cb4:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d00d      	beq.n	8006cd8 <HAL_TIM_Base_Start_IT+0x64>
 8006cbc:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d009      	beq.n	8006cd8 <HAL_TIM_Base_Start_IT+0x64>
 8006cc4:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d005      	beq.n	8006cd8 <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	f042 0201 	orr.w	r2, r2, #1
 8006cd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006cd4:	2000      	movs	r0, #0
 8006cd6:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cd8:	6899      	ldr	r1, [r3, #8]
 8006cda:	4a09      	ldr	r2, [pc, #36]	; (8006d00 <HAL_TIM_Base_Start_IT+0x8c>)
 8006cdc:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cde:	2a06      	cmp	r2, #6
 8006ce0:	bf18      	it	ne
 8006ce2:	f5b2 3f80 	cmpne.w	r2, #65536	; 0x10000
 8006ce6:	d007      	beq.n	8006cf8 <HAL_TIM_Base_Start_IT+0x84>
      __HAL_TIM_ENABLE(htim);
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	f042 0201 	orr.w	r2, r2, #1
 8006cee:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006cf0:	2000      	movs	r0, #0
 8006cf2:	4770      	bx	lr
    return HAL_ERROR;
 8006cf4:	2001      	movs	r0, #1
 8006cf6:	4770      	bx	lr
  return HAL_OK;
 8006cf8:	2000      	movs	r0, #0
}
 8006cfa:	4770      	bx	lr
 8006cfc:	40010000 	.word	0x40010000
 8006d00:	00010007 	.word	0x00010007

08006d04 <HAL_TIM_PeriodElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006d04:	4770      	bx	lr

08006d06 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d06:	4770      	bx	lr

08006d08 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d08:	4770      	bx	lr

08006d0a <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d0a:	4770      	bx	lr

08006d0c <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d0c:	4770      	bx	lr

08006d0e <HAL_TIM_IRQHandler>:
{
 8006d0e:	b510      	push	{r4, lr}
 8006d10:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d12:	6803      	ldr	r3, [r0, #0]
 8006d14:	691a      	ldr	r2, [r3, #16]
 8006d16:	f012 0f02 	tst.w	r2, #2
 8006d1a:	d011      	beq.n	8006d40 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d1c:	68da      	ldr	r2, [r3, #12]
 8006d1e:	f012 0f02 	tst.w	r2, #2
 8006d22:	d00d      	beq.n	8006d40 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d24:	f06f 0202 	mvn.w	r2, #2
 8006d28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d2e:	6803      	ldr	r3, [r0, #0]
 8006d30:	699b      	ldr	r3, [r3, #24]
 8006d32:	f013 0f03 	tst.w	r3, #3
 8006d36:	d079      	beq.n	8006e2c <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8006d38:	f7ff ffe6 	bl	8006d08 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d40:	6823      	ldr	r3, [r4, #0]
 8006d42:	691a      	ldr	r2, [r3, #16]
 8006d44:	f012 0f04 	tst.w	r2, #4
 8006d48:	d012      	beq.n	8006d70 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006d4a:	68da      	ldr	r2, [r3, #12]
 8006d4c:	f012 0f04 	tst.w	r2, #4
 8006d50:	d00e      	beq.n	8006d70 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006d52:	f06f 0204 	mvn.w	r2, #4
 8006d56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d58:	2302      	movs	r3, #2
 8006d5a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d5c:	6823      	ldr	r3, [r4, #0]
 8006d5e:	699b      	ldr	r3, [r3, #24]
 8006d60:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006d64:	d068      	beq.n	8006e38 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8006d66:	4620      	mov	r0, r4
 8006d68:	f7ff ffce 	bl	8006d08 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d70:	6823      	ldr	r3, [r4, #0]
 8006d72:	691a      	ldr	r2, [r3, #16]
 8006d74:	f012 0f08 	tst.w	r2, #8
 8006d78:	d012      	beq.n	8006da0 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d7a:	68da      	ldr	r2, [r3, #12]
 8006d7c:	f012 0f08 	tst.w	r2, #8
 8006d80:	d00e      	beq.n	8006da0 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d82:	f06f 0208 	mvn.w	r2, #8
 8006d86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d88:	2304      	movs	r3, #4
 8006d8a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d8c:	6823      	ldr	r3, [r4, #0]
 8006d8e:	69db      	ldr	r3, [r3, #28]
 8006d90:	f013 0f03 	tst.w	r3, #3
 8006d94:	d057      	beq.n	8006e46 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8006d96:	4620      	mov	r0, r4
 8006d98:	f7ff ffb6 	bl	8006d08 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006da0:	6823      	ldr	r3, [r4, #0]
 8006da2:	691a      	ldr	r2, [r3, #16]
 8006da4:	f012 0f10 	tst.w	r2, #16
 8006da8:	d012      	beq.n	8006dd0 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006daa:	68da      	ldr	r2, [r3, #12]
 8006dac:	f012 0f10 	tst.w	r2, #16
 8006db0:	d00e      	beq.n	8006dd0 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006db2:	f06f 0210 	mvn.w	r2, #16
 8006db6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006db8:	2308      	movs	r3, #8
 8006dba:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006dbc:	6823      	ldr	r3, [r4, #0]
 8006dbe:	69db      	ldr	r3, [r3, #28]
 8006dc0:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006dc4:	d046      	beq.n	8006e54 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8006dc6:	4620      	mov	r0, r4
 8006dc8:	f7ff ff9e 	bl	8006d08 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006dd0:	6823      	ldr	r3, [r4, #0]
 8006dd2:	691a      	ldr	r2, [r3, #16]
 8006dd4:	f012 0f01 	tst.w	r2, #1
 8006dd8:	d003      	beq.n	8006de2 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006dda:	68da      	ldr	r2, [r3, #12]
 8006ddc:	f012 0f01 	tst.w	r2, #1
 8006de0:	d13f      	bne.n	8006e62 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006de2:	6823      	ldr	r3, [r4, #0]
 8006de4:	691a      	ldr	r2, [r3, #16]
 8006de6:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006dea:	d003      	beq.n	8006df4 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006dec:	68da      	ldr	r2, [r3, #12]
 8006dee:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006df2:	d13d      	bne.n	8006e70 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006df4:	6823      	ldr	r3, [r4, #0]
 8006df6:	691a      	ldr	r2, [r3, #16]
 8006df8:	f412 7f80 	tst.w	r2, #256	; 0x100
 8006dfc:	d003      	beq.n	8006e06 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006dfe:	68da      	ldr	r2, [r3, #12]
 8006e00:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006e04:	d13b      	bne.n	8006e7e <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006e06:	6823      	ldr	r3, [r4, #0]
 8006e08:	691a      	ldr	r2, [r3, #16]
 8006e0a:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006e0e:	d003      	beq.n	8006e18 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006e10:	68da      	ldr	r2, [r3, #12]
 8006e12:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006e16:	d139      	bne.n	8006e8c <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006e18:	6823      	ldr	r3, [r4, #0]
 8006e1a:	691a      	ldr	r2, [r3, #16]
 8006e1c:	f012 0f20 	tst.w	r2, #32
 8006e20:	d003      	beq.n	8006e2a <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e22:	68da      	ldr	r2, [r3, #12]
 8006e24:	f012 0f20 	tst.w	r2, #32
 8006e28:	d137      	bne.n	8006e9a <HAL_TIM_IRQHandler+0x18c>
}
 8006e2a:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e2c:	f7ff ff6b 	bl	8006d06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e30:	4620      	mov	r0, r4
 8006e32:	f7ff ff6a 	bl	8006d0a <HAL_TIM_PWM_PulseFinishedCallback>
 8006e36:	e781      	b.n	8006d3c <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e38:	4620      	mov	r0, r4
 8006e3a:	f7ff ff64 	bl	8006d06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e3e:	4620      	mov	r0, r4
 8006e40:	f7ff ff63 	bl	8006d0a <HAL_TIM_PWM_PulseFinishedCallback>
 8006e44:	e792      	b.n	8006d6c <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e46:	4620      	mov	r0, r4
 8006e48:	f7ff ff5d 	bl	8006d06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e4c:	4620      	mov	r0, r4
 8006e4e:	f7ff ff5c 	bl	8006d0a <HAL_TIM_PWM_PulseFinishedCallback>
 8006e52:	e7a3      	b.n	8006d9c <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e54:	4620      	mov	r0, r4
 8006e56:	f7ff ff56 	bl	8006d06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	f7ff ff55 	bl	8006d0a <HAL_TIM_PWM_PulseFinishedCallback>
 8006e60:	e7b4      	b.n	8006dcc <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e62:	f06f 0201 	mvn.w	r2, #1
 8006e66:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e68:	4620      	mov	r0, r4
 8006e6a:	f7ff ff4b 	bl	8006d04 <HAL_TIM_PeriodElapsedCallback>
 8006e6e:	e7b8      	b.n	8006de2 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006e70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006e74:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006e76:	4620      	mov	r0, r4
 8006e78:	f000 f8cf 	bl	800701a <HAL_TIMEx_BreakCallback>
 8006e7c:	e7ba      	b.n	8006df4 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006e7e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006e82:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8006e84:	4620      	mov	r0, r4
 8006e86:	f000 f8c9 	bl	800701c <HAL_TIMEx_Break2Callback>
 8006e8a:	e7bc      	b.n	8006e06 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e90:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006e92:	4620      	mov	r0, r4
 8006e94:	f7ff ff3a 	bl	8006d0c <HAL_TIM_TriggerCallback>
 8006e98:	e7be      	b.n	8006e18 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e9a:	f06f 0220 	mvn.w	r2, #32
 8006e9e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8006ea0:	4620      	mov	r0, r4
 8006ea2:	f000 f8b9 	bl	8007018 <HAL_TIMEx_CommutCallback>
}
 8006ea6:	e7c0      	b.n	8006e2a <HAL_TIM_IRQHandler+0x11c>

08006ea8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006ea8:	b530      	push	{r4, r5, lr}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006eaa:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006eac:	4a3b      	ldr	r2, [pc, #236]	; (8006f9c <TIM_Base_SetConfig+0xf4>)
 8006eae:	4290      	cmp	r0, r2
 8006eb0:	bf14      	ite	ne
 8006eb2:	f04f 0e00 	movne.w	lr, #0
 8006eb6:	f04f 0e01 	moveq.w	lr, #1
 8006eba:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006ebe:	bf14      	ite	ne
 8006ec0:	4672      	movne	r2, lr
 8006ec2:	f04e 0201 	orreq.w	r2, lr, #1
 8006ec6:	b9aa      	cbnz	r2, 8006ef4 <TIM_Base_SetConfig+0x4c>
 8006ec8:	4c35      	ldr	r4, [pc, #212]	; (8006fa0 <TIM_Base_SetConfig+0xf8>)
 8006eca:	42a0      	cmp	r0, r4
 8006ecc:	bf14      	ite	ne
 8006ece:	2400      	movne	r4, #0
 8006ed0:	2401      	moveq	r4, #1
 8006ed2:	4d34      	ldr	r5, [pc, #208]	; (8006fa4 <TIM_Base_SetConfig+0xfc>)
 8006ed4:	42a8      	cmp	r0, r5
 8006ed6:	d00d      	beq.n	8006ef4 <TIM_Base_SetConfig+0x4c>
 8006ed8:	b964      	cbnz	r4, 8006ef4 <TIM_Base_SetConfig+0x4c>
 8006eda:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8006ede:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
 8006ee2:	42a0      	cmp	r0, r4
 8006ee4:	bf14      	ite	ne
 8006ee6:	2400      	movne	r4, #0
 8006ee8:	2401      	moveq	r4, #1
 8006eea:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006eee:	42a8      	cmp	r0, r5
 8006ef0:	d000      	beq.n	8006ef4 <TIM_Base_SetConfig+0x4c>
 8006ef2:	b11c      	cbz	r4, 8006efc <TIM_Base_SetConfig+0x54>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ef4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006ef8:	684c      	ldr	r4, [r1, #4]
 8006efa:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006efc:	2a00      	cmp	r2, #0
 8006efe:	d133      	bne.n	8006f68 <TIM_Base_SetConfig+0xc0>
 8006f00:	4a27      	ldr	r2, [pc, #156]	; (8006fa0 <TIM_Base_SetConfig+0xf8>)
 8006f02:	4290      	cmp	r0, r2
 8006f04:	bf14      	ite	ne
 8006f06:	2200      	movne	r2, #0
 8006f08:	2201      	moveq	r2, #1
 8006f0a:	4c26      	ldr	r4, [pc, #152]	; (8006fa4 <TIM_Base_SetConfig+0xfc>)
 8006f0c:	42a0      	cmp	r0, r4
 8006f0e:	d02b      	beq.n	8006f68 <TIM_Base_SetConfig+0xc0>
 8006f10:	bb52      	cbnz	r2, 8006f68 <TIM_Base_SetConfig+0xc0>
 8006f12:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006f16:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 8006f1a:	4290      	cmp	r0, r2
 8006f1c:	bf14      	ite	ne
 8006f1e:	2200      	movne	r2, #0
 8006f20:	2201      	moveq	r2, #1
 8006f22:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8006f26:	42a0      	cmp	r0, r4
 8006f28:	d01e      	beq.n	8006f68 <TIM_Base_SetConfig+0xc0>
 8006f2a:	b9ea      	cbnz	r2, 8006f68 <TIM_Base_SetConfig+0xc0>
 8006f2c:	4a1e      	ldr	r2, [pc, #120]	; (8006fa8 <TIM_Base_SetConfig+0x100>)
 8006f2e:	4290      	cmp	r0, r2
 8006f30:	bf14      	ite	ne
 8006f32:	2200      	movne	r2, #0
 8006f34:	2201      	moveq	r2, #1
 8006f36:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 8006f3a:	42a0      	cmp	r0, r4
 8006f3c:	d014      	beq.n	8006f68 <TIM_Base_SetConfig+0xc0>
 8006f3e:	b99a      	cbnz	r2, 8006f68 <TIM_Base_SetConfig+0xc0>
 8006f40:	4a1a      	ldr	r2, [pc, #104]	; (8006fac <TIM_Base_SetConfig+0x104>)
 8006f42:	4290      	cmp	r0, r2
 8006f44:	bf14      	ite	ne
 8006f46:	2200      	movne	r2, #0
 8006f48:	2201      	moveq	r2, #1
 8006f4a:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8006f4e:	42a0      	cmp	r0, r4
 8006f50:	d00a      	beq.n	8006f68 <TIM_Base_SetConfig+0xc0>
 8006f52:	b94a      	cbnz	r2, 8006f68 <TIM_Base_SetConfig+0xc0>
 8006f54:	4a16      	ldr	r2, [pc, #88]	; (8006fb0 <TIM_Base_SetConfig+0x108>)
 8006f56:	4290      	cmp	r0, r2
 8006f58:	bf14      	ite	ne
 8006f5a:	2200      	movne	r2, #0
 8006f5c:	2201      	moveq	r2, #1
 8006f5e:	f5a4 3496 	sub.w	r4, r4, #76800	; 0x12c00
 8006f62:	42a0      	cmp	r0, r4
 8006f64:	d000      	beq.n	8006f68 <TIM_Base_SetConfig+0xc0>
 8006f66:	b122      	cbz	r2, 8006f72 <TIM_Base_SetConfig+0xca>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f68:	f423 7c40 	bic.w	ip, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f6c:	68cb      	ldr	r3, [r1, #12]
 8006f6e:	ea43 030c 	orr.w	r3, r3, ip
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f76:	694a      	ldr	r2, [r1, #20]
 8006f78:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8006f7a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f7c:	688a      	ldr	r2, [r1, #8]
 8006f7e:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f80:	680a      	ldr	r2, [r1, #0]
 8006f82:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f84:	4a0b      	ldr	r2, [pc, #44]	; (8006fb4 <TIM_Base_SetConfig+0x10c>)
 8006f86:	4290      	cmp	r0, r2
 8006f88:	bf14      	ite	ne
 8006f8a:	4673      	movne	r3, lr
 8006f8c:	f04e 0301 	orreq.w	r3, lr, #1
 8006f90:	b10b      	cbz	r3, 8006f96 <TIM_Base_SetConfig+0xee>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f92:	690b      	ldr	r3, [r1, #16]
 8006f94:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f96:	2301      	movs	r3, #1
 8006f98:	6143      	str	r3, [r0, #20]
}
 8006f9a:	bd30      	pop	{r4, r5, pc}
 8006f9c:	40010000 	.word	0x40010000
 8006fa0:	40000800 	.word	0x40000800
 8006fa4:	40000400 	.word	0x40000400
 8006fa8:	40014400 	.word	0x40014400
 8006fac:	40001800 	.word	0x40001800
 8006fb0:	40002000 	.word	0x40002000
 8006fb4:	40010400 	.word	0x40010400

08006fb8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8006fb8:	b360      	cbz	r0, 8007014 <HAL_TIM_Base_Init+0x5c>
{
 8006fba:	b510      	push	{r4, lr}
 8006fbc:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8006fbe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006fc2:	b313      	cbz	r3, 800700a <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8006fc4:	2302      	movs	r3, #2
 8006fc6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fca:	4621      	mov	r1, r4
 8006fcc:	f851 0b04 	ldr.w	r0, [r1], #4
 8006fd0:	f7ff ff6a 	bl	8006ea8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fda:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006fde:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006fe2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006fe6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8006fea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006fee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ff2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006ff6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006ffa:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8006ffe:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8007002:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8007006:	2000      	movs	r0, #0
}
 8007008:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800700a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800700e:	f7ff fe30 	bl	8006c72 <HAL_TIM_Base_MspInit>
 8007012:	e7d7      	b.n	8006fc4 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8007014:	2001      	movs	r0, #1
}
 8007016:	4770      	bx	lr

08007018 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007018:	4770      	bx	lr

0800701a <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800701a:	4770      	bx	lr

0800701c <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800701c:	4770      	bx	lr

0800701e <UART_EndTxTransfer>:
 * @param  huart UART handle.
 * @retval None
 */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart) {
	/* Disable TXEIE and TCIE interrupts */
	ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800701e:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007020:	e852 3f00 	ldrex	r3, [r2]
 8007024:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007028:	e842 3100 	strex	r1, r3, [r2]
 800702c:	2900      	cmp	r1, #0
 800702e:	d1f6      	bne.n	800701e <UART_EndTxTransfer>

	/* At end of Tx process, restore huart->gState to Ready */
	huart->gState = HAL_UART_STATE_READY;
 8007030:	2320      	movs	r3, #32
 8007032:	67c3      	str	r3, [r0, #124]	; 0x7c
}
 8007034:	4770      	bx	lr

08007036 <UART_EndRxTransfer>:
 * @param  huart UART handle.
 * @retval None
 */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart) {
	/* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
	ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007036:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007038:	e852 3f00 	ldrex	r3, [r2]
 800703c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007040:	e842 3100 	strex	r1, r3, [r2]
 8007044:	2900      	cmp	r1, #0
 8007046:	d1f6      	bne.n	8007036 <UART_EndRxTransfer>
	ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007048:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800704a:	f102 0308 	add.w	r3, r2, #8
 800704e:	e853 3f00 	ldrex	r3, [r3]
 8007052:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007056:	3208      	adds	r2, #8
 8007058:	e842 3100 	strex	r1, r3, [r2]
 800705c:	2900      	cmp	r1, #0
 800705e:	d1f3      	bne.n	8007048 <UART_EndRxTransfer+0x12>

	/* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
	if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
 8007060:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8007062:	2b01      	cmp	r3, #1
 8007064:	d006      	beq.n	8007074 <UART_EndRxTransfer+0x3e>
		ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
	}

	/* At end of Rx process, restore huart->RxState to Ready */
	huart->RxState = HAL_UART_STATE_READY;
 8007066:	2320      	movs	r3, #32
 8007068:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800706c:	2300      	movs	r3, #0
 800706e:	6603      	str	r3, [r0, #96]	; 0x60

	/* Reset RxIsr function pointer */
	huart->RxISR = NULL;
 8007070:	6683      	str	r3, [r0, #104]	; 0x68
}
 8007072:	4770      	bx	lr
		ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007074:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007076:	e852 3f00 	ldrex	r3, [r2]
 800707a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707e:	e842 3100 	strex	r1, r3, [r2]
 8007082:	2900      	cmp	r1, #0
 8007084:	d1f6      	bne.n	8007074 <UART_EndRxTransfer+0x3e>
 8007086:	e7ee      	b.n	8007066 <UART_EndRxTransfer+0x30>

08007088 <UART_TxISR_8BIT>:
 * @param huart UART handle.
 * @retval None
 */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart) {
	/* Check that a Tx process is ongoing */
	if (huart->gState == HAL_UART_STATE_BUSY_TX) {
 8007088:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800708a:	2b21      	cmp	r3, #33	; 0x21
 800708c:	d000      	beq.n	8007090 <UART_TxISR_8BIT+0x8>
					& (uint8_t) 0xFF);
			huart->pTxBuffPtr++;
			huart->TxXferCount--;
		}
	}
}
 800708e:	4770      	bx	lr
		if (huart->TxXferCount == 0U) {
 8007090:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8007094:	b29b      	uxth	r3, r3
 8007096:	b993      	cbnz	r3, 80070be <UART_TxISR_8BIT+0x36>
			ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007098:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709a:	e852 3f00 	ldrex	r3, [r2]
 800709e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a2:	e842 3100 	strex	r1, r3, [r2]
 80070a6:	2900      	cmp	r1, #0
 80070a8:	d1f6      	bne.n	8007098 <UART_TxISR_8BIT+0x10>
			ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80070aa:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ac:	e852 3f00 	ldrex	r3, [r2]
 80070b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b4:	e842 3100 	strex	r1, r3, [r2]
 80070b8:	2900      	cmp	r1, #0
 80070ba:	d1f6      	bne.n	80070aa <UART_TxISR_8BIT+0x22>
 80070bc:	4770      	bx	lr
			huart->Instance->TDR = (uint8_t) (*huart->pTxBuffPtr
 80070be:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80070c0:	781a      	ldrb	r2, [r3, #0]
 80070c2:	6803      	ldr	r3, [r0, #0]
 80070c4:	629a      	str	r2, [r3, #40]	; 0x28
			huart->pTxBuffPtr++;
 80070c6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80070c8:	3301      	adds	r3, #1
 80070ca:	64c3      	str	r3, [r0, #76]	; 0x4c
			huart->TxXferCount--;
 80070cc:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	3b01      	subs	r3, #1
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
}
 80070da:	e7d8      	b.n	800708e <UART_TxISR_8BIT+0x6>

080070dc <UART_TxISR_16BIT>:
 */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart) {
	const uint16_t *tmp;

	/* Check that a Tx process is ongoing */
	if (huart->gState == HAL_UART_STATE_BUSY_TX) {
 80070dc:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80070de:	2b21      	cmp	r3, #33	; 0x21
 80070e0:	d000      	beq.n	80070e4 <UART_TxISR_16BIT+0x8>
			huart->Instance->TDR = (((uint32_t) (*tmp)) & 0x01FFUL);
			huart->pTxBuffPtr += 2U;
			huart->TxXferCount--;
		}
	}
}
 80070e2:	4770      	bx	lr
		if (huart->TxXferCount == 0U) {
 80070e4:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	b993      	cbnz	r3, 8007112 <UART_TxISR_16BIT+0x36>
			ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80070ec:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ee:	e852 3f00 	ldrex	r3, [r2]
 80070f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f6:	e842 3100 	strex	r1, r3, [r2]
 80070fa:	2900      	cmp	r1, #0
 80070fc:	d1f6      	bne.n	80070ec <UART_TxISR_16BIT+0x10>
			ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80070fe:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007100:	e852 3f00 	ldrex	r3, [r2]
 8007104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007108:	e842 3100 	strex	r1, r3, [r2]
 800710c:	2900      	cmp	r1, #0
 800710e:	d1f6      	bne.n	80070fe <UART_TxISR_16BIT+0x22>
 8007110:	4770      	bx	lr
			tmp = (const uint16_t*) huart->pTxBuffPtr;
 8007112:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
			huart->Instance->TDR = (((uint32_t) (*tmp)) & 0x01FFUL);
 8007114:	881b      	ldrh	r3, [r3, #0]
 8007116:	6802      	ldr	r2, [r0, #0]
 8007118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800711c:	6293      	str	r3, [r2, #40]	; 0x28
			huart->pTxBuffPtr += 2U;
 800711e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8007120:	3302      	adds	r3, #2
 8007122:	64c3      	str	r3, [r0, #76]	; 0x4c
			huart->TxXferCount--;
 8007124:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8007128:	b29b      	uxth	r3, r3
 800712a:	3b01      	subs	r3, #1
 800712c:	b29b      	uxth	r3, r3
 800712e:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
}
 8007132:	e7d6      	b.n	80070e2 <UART_TxISR_16BIT+0x6>

08007134 <HAL_UART_Transmit_IT>:
	if (huart->gState == HAL_UART_STATE_READY) {
 8007134:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8007136:	2b20      	cmp	r3, #32
 8007138:	d125      	bne.n	8007186 <HAL_UART_Transmit_IT+0x52>
		if ((pData == NULL) || (Size == 0U)) {
 800713a:	2a00      	cmp	r2, #0
 800713c:	bf18      	it	ne
 800713e:	2900      	cmpne	r1, #0
 8007140:	d023      	beq.n	800718a <HAL_UART_Transmit_IT+0x56>
		huart->pTxBuffPtr = pData;
 8007142:	64c1      	str	r1, [r0, #76]	; 0x4c
		huart->TxXferSize = Size;
 8007144:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
		huart->TxXferCount = Size;
 8007148:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
		huart->TxISR = NULL;
 800714c:	2300      	movs	r3, #0
 800714e:	66c3      	str	r3, [r0, #108]	; 0x6c
		huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007150:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		huart->gState = HAL_UART_STATE_BUSY_TX;
 8007154:	2321      	movs	r3, #33	; 0x21
 8007156:	67c3      	str	r3, [r0, #124]	; 0x7c
		if ((huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007158:	6883      	ldr	r3, [r0, #8]
 800715a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800715e:	d00c      	beq.n	800717a <HAL_UART_Transmit_IT+0x46>
			huart->TxISR = UART_TxISR_8BIT;
 8007160:	4b0b      	ldr	r3, [pc, #44]	; (8007190 <HAL_UART_Transmit_IT+0x5c>)
 8007162:	66c3      	str	r3, [r0, #108]	; 0x6c
		ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007164:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007166:	e852 3f00 	ldrex	r3, [r2]
 800716a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800716e:	e842 3100 	strex	r1, r3, [r2]
 8007172:	2900      	cmp	r1, #0
 8007174:	d1f6      	bne.n	8007164 <HAL_UART_Transmit_IT+0x30>
		return HAL_OK;
 8007176:	2000      	movs	r0, #0
 8007178:	4770      	bx	lr
				&& (huart->Init.Parity == UART_PARITY_NONE)) {
 800717a:	6903      	ldr	r3, [r0, #16]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d1ef      	bne.n	8007160 <HAL_UART_Transmit_IT+0x2c>
			huart->TxISR = UART_TxISR_16BIT;
 8007180:	4b04      	ldr	r3, [pc, #16]	; (8007194 <HAL_UART_Transmit_IT+0x60>)
 8007182:	66c3      	str	r3, [r0, #108]	; 0x6c
 8007184:	e7ee      	b.n	8007164 <HAL_UART_Transmit_IT+0x30>
		return HAL_BUSY;
 8007186:	2002      	movs	r0, #2
 8007188:	4770      	bx	lr
			return HAL_ERROR;
 800718a:	2001      	movs	r0, #1
}
 800718c:	4770      	bx	lr
 800718e:	bf00      	nop
 8007190:	08007089 	.word	0x08007089
 8007194:	080070dd 	.word	0x080070dd

08007198 <HAL_UART_Transmit_DMA>:
		const uint8_t *pData, uint16_t Size) {
 8007198:	4613      	mov	r3, r2
	if (huart->gState == HAL_UART_STATE_READY) {
 800719a:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800719c:	2a20      	cmp	r2, #32
 800719e:	d13b      	bne.n	8007218 <HAL_UART_Transmit_DMA+0x80>
		const uint8_t *pData, uint16_t Size) {
 80071a0:	b510      	push	{r4, lr}
 80071a2:	4604      	mov	r4, r0
		if ((pData == NULL) || (Size == 0U)) {
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	bf18      	it	ne
 80071a8:	2900      	cmpne	r1, #0
 80071aa:	d037      	beq.n	800721c <HAL_UART_Transmit_DMA+0x84>
		huart->pTxBuffPtr = pData;
 80071ac:	64c1      	str	r1, [r0, #76]	; 0x4c
		huart->TxXferSize = Size;
 80071ae:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
		huart->TxXferCount = Size;
 80071b2:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
		huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071b6:	2200      	movs	r2, #0
 80071b8:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
		huart->gState = HAL_UART_STATE_BUSY_TX;
 80071bc:	2221      	movs	r2, #33	; 0x21
 80071be:	67c2      	str	r2, [r0, #124]	; 0x7c
		if (huart->hdmatx != NULL) {
 80071c0:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80071c2:	b1c2      	cbz	r2, 80071f6 <HAL_UART_Transmit_DMA+0x5e>
			huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80071c4:	4916      	ldr	r1, [pc, #88]	; (8007220 <HAL_UART_Transmit_DMA+0x88>)
 80071c6:	63d1      	str	r1, [r2, #60]	; 0x3c
			huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80071c8:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80071ca:	4916      	ldr	r1, [pc, #88]	; (8007224 <HAL_UART_Transmit_DMA+0x8c>)
 80071cc:	6411      	str	r1, [r2, #64]	; 0x40
			huart->hdmatx->XferErrorCallback = UART_DMAError;
 80071ce:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80071d0:	4915      	ldr	r1, [pc, #84]	; (8007228 <HAL_UART_Transmit_DMA+0x90>)
 80071d2:	64d1      	str	r1, [r2, #76]	; 0x4c
			huart->hdmatx->XferAbortCallback = NULL;
 80071d4:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80071d6:	2100      	movs	r1, #0
 80071d8:	6511      	str	r1, [r2, #80]	; 0x50
					(uint32_t) &huart->Instance->TDR, Size) != HAL_OK) {
 80071da:	6802      	ldr	r2, [r0, #0]
			if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t) huart->pTxBuffPtr,
 80071dc:	3228      	adds	r2, #40	; 0x28
 80071de:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80071e0:	6f00      	ldr	r0, [r0, #112]	; 0x70
 80071e2:	f7fd f91b 	bl	800441c <HAL_DMA_Start_IT>
 80071e6:	b130      	cbz	r0, 80071f6 <HAL_UART_Transmit_DMA+0x5e>
				huart->ErrorCode = HAL_UART_ERROR_DMA;
 80071e8:	2310      	movs	r3, #16
 80071ea:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
				huart->gState = HAL_UART_STATE_READY;
 80071ee:	2320      	movs	r3, #32
 80071f0:	67e3      	str	r3, [r4, #124]	; 0x7c
				return HAL_ERROR;
 80071f2:	2001      	movs	r0, #1
 80071f4:	e00f      	b.n	8007216 <HAL_UART_Transmit_DMA+0x7e>
		__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80071f6:	6823      	ldr	r3, [r4, #0]
 80071f8:	2240      	movs	r2, #64	; 0x40
 80071fa:	621a      	str	r2, [r3, #32]
		ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80071fc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071fe:	f102 0308 	add.w	r3, r2, #8
 8007202:	e853 3f00 	ldrex	r3, [r3]
 8007206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720a:	3208      	adds	r2, #8
 800720c:	e842 3100 	strex	r1, r3, [r2]
 8007210:	2900      	cmp	r1, #0
 8007212:	d1f3      	bne.n	80071fc <HAL_UART_Transmit_DMA+0x64>
		return HAL_OK;
 8007214:	2000      	movs	r0, #0
}
 8007216:	bd10      	pop	{r4, pc}
		return HAL_BUSY;
 8007218:	2002      	movs	r0, #2
}
 800721a:	4770      	bx	lr
			return HAL_ERROR;
 800721c:	2001      	movs	r0, #1
 800721e:	e7fa      	b.n	8007216 <HAL_UART_Transmit_DMA+0x7e>
 8007220:	080072db 	.word	0x080072db
 8007224:	08007345 	.word	0x08007345
 8007228:	08007351 	.word	0x08007351

0800722c <HAL_UART_AbortReceive>:
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart) {
 800722c:	b510      	push	{r4, lr}
 800722e:	4604      	mov	r4, r0
	ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007230:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007232:	e852 3f00 	ldrex	r3, [r2]
 8007236:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800723a:	e842 3100 	strex	r1, r3, [r2]
 800723e:	2900      	cmp	r1, #0
 8007240:	d1f6      	bne.n	8007230 <HAL_UART_AbortReceive+0x4>
	ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007242:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007244:	f102 0308 	add.w	r3, r2, #8
 8007248:	e853 3f00 	ldrex	r3, [r3]
 800724c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007250:	3208      	adds	r2, #8
 8007252:	e842 3100 	strex	r1, r3, [r2]
 8007256:	2900      	cmp	r1, #0
 8007258:	d1f3      	bne.n	8007242 <HAL_UART_AbortReceive+0x16>
	if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
 800725a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800725c:	2b01      	cmp	r3, #1
 800725e:	d028      	beq.n	80072b2 <HAL_UART_AbortReceive+0x86>
	if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 8007260:	6823      	ldr	r3, [r4, #0]
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007268:	d013      	beq.n	8007292 <HAL_UART_AbortReceive+0x66>
		ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800726a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800726c:	f102 0308 	add.w	r3, r2, #8
 8007270:	e853 3f00 	ldrex	r3, [r3]
 8007274:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007278:	3208      	adds	r2, #8
 800727a:	e842 3100 	strex	r1, r3, [r2]
 800727e:	2900      	cmp	r1, #0
 8007280:	d1f3      	bne.n	800726a <HAL_UART_AbortReceive+0x3e>
		if (huart->hdmarx != NULL) {
 8007282:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8007284:	b12b      	cbz	r3, 8007292 <HAL_UART_AbortReceive+0x66>
			huart->hdmarx->XferAbortCallback = NULL;
 8007286:	2200      	movs	r2, #0
 8007288:	651a      	str	r2, [r3, #80]	; 0x50
			if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK) {
 800728a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800728c:	f7fd f900 	bl	8004490 <HAL_DMA_Abort>
 8007290:	b9c8      	cbnz	r0, 80072c6 <HAL_UART_AbortReceive+0x9a>
	huart->RxXferCount = 0U;
 8007292:	2000      	movs	r0, #0
 8007294:	f8a4 005a 	strh.w	r0, [r4, #90]	; 0x5a
	__HAL_UART_CLEAR_FLAG(huart,
 8007298:	6823      	ldr	r3, [r4, #0]
 800729a:	220f      	movs	r2, #15
 800729c:	621a      	str	r2, [r3, #32]
	__HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800729e:	6822      	ldr	r2, [r4, #0]
 80072a0:	6993      	ldr	r3, [r2, #24]
 80072a2:	f043 0308 	orr.w	r3, r3, #8
 80072a6:	6193      	str	r3, [r2, #24]
	huart->RxState = HAL_UART_STATE_READY;
 80072a8:	2320      	movs	r3, #32
 80072aa:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072ae:	6620      	str	r0, [r4, #96]	; 0x60
}
 80072b0:	bd10      	pop	{r4, pc}
		ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80072b2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b4:	e852 3f00 	ldrex	r3, [r2]
 80072b8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072bc:	e842 3100 	strex	r1, r3, [r2]
 80072c0:	2900      	cmp	r1, #0
 80072c2:	d1f6      	bne.n	80072b2 <HAL_UART_AbortReceive+0x86>
 80072c4:	e7cc      	b.n	8007260 <HAL_UART_AbortReceive+0x34>
				if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT) {
 80072c6:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80072c8:	f7fd fa2e 	bl	8004728 <HAL_DMA_GetError>
 80072cc:	2820      	cmp	r0, #32
 80072ce:	d1e0      	bne.n	8007292 <HAL_UART_AbortReceive+0x66>
					huart->ErrorCode = HAL_UART_ERROR_DMA;
 80072d0:	2310      	movs	r3, #16
 80072d2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
					return HAL_TIMEOUT;
 80072d6:	2003      	movs	r0, #3
 80072d8:	e7ea      	b.n	80072b0 <HAL_UART_AbortReceive+0x84>

080072da <UART_DMATransmitCplt>:
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma) {
 80072da:	b508      	push	{r3, lr}
 80072dc:	4603      	mov	r3, r0
	UART_HandleTypeDef *huart = (UART_HandleTypeDef*) (hdma->Parent);
 80072de:	6b80      	ldr	r0, [r0, #56]	; 0x38
	if (hdma->Init.Mode == DMA_CIRCULAR) {
 80072e0:	69db      	ldr	r3, [r3, #28]
 80072e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072e6:	d118      	bne.n	800731a <UART_DMATransmitCplt+0x40>
		huart->TxXferCount = 0U;
 80072e8:	2300      	movs	r3, #0
 80072ea:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
		ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80072ee:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f0:	f102 0308 	add.w	r3, r2, #8
 80072f4:	e853 3f00 	ldrex	r3, [r3]
 80072f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072fc:	3208      	adds	r2, #8
 80072fe:	e842 3100 	strex	r1, r3, [r2]
 8007302:	2900      	cmp	r1, #0
 8007304:	d1f3      	bne.n	80072ee <UART_DMATransmitCplt+0x14>
		ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007306:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007308:	e852 3f00 	ldrex	r3, [r2]
 800730c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007310:	e842 3100 	strex	r1, r3, [r2]
 8007314:	2900      	cmp	r1, #0
 8007316:	d1f6      	bne.n	8007306 <UART_DMATransmitCplt+0x2c>
}
 8007318:	bd08      	pop	{r3, pc}
		HAL_UART_TxCpltCallback(huart);
 800731a:	f7fb fff3 	bl	8003304 <HAL_UART_TxCpltCallback>
}
 800731e:	e7fb      	b.n	8007318 <UART_DMATransmitCplt+0x3e>

08007320 <UART_EndTransmit_IT>:
 * @brief  Wrap up transmission in non-blocking mode.
 * @param  huart pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart) {
 8007320:	b508      	push	{r3, lr}
	/* Disable the UART Transmit Complete Interrupt */
	ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007322:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007324:	e852 3f00 	ldrex	r3, [r2]
 8007328:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732c:	e842 3100 	strex	r1, r3, [r2]
 8007330:	2900      	cmp	r1, #0
 8007332:	d1f6      	bne.n	8007322 <UART_EndTransmit_IT+0x2>

	/* Tx process is ended, restore huart->gState to Ready */
	huart->gState = HAL_UART_STATE_READY;
 8007334:	2320      	movs	r3, #32
 8007336:	67c3      	str	r3, [r0, #124]	; 0x7c

	/* Cleat TxISR function pointer */
	huart->TxISR = NULL;
 8007338:	2300      	movs	r3, #0
 800733a:	66c3      	str	r3, [r0, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
	/*Call legacy weak Tx complete callback*/
	HAL_UART_TxCpltCallback(huart);
 800733c:	f7fb ffe2 	bl	8003304 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007340:	bd08      	pop	{r3, pc}

08007342 <HAL_UART_TxHalfCpltCallback>:
}
 8007342:	4770      	bx	lr

08007344 <UART_DMATxHalfCplt>:
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma) {
 8007344:	b508      	push	{r3, lr}
	HAL_UART_TxHalfCpltCallback(huart);
 8007346:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8007348:	f7ff fffb 	bl	8007342 <HAL_UART_TxHalfCpltCallback>
}
 800734c:	bd08      	pop	{r3, pc}

0800734e <HAL_UART_ErrorCallback>:
}
 800734e:	4770      	bx	lr

08007350 <UART_DMAError>:
static void UART_DMAError(DMA_HandleTypeDef *hdma) {
 8007350:	b538      	push	{r3, r4, r5, lr}
	UART_HandleTypeDef *huart = (UART_HandleTypeDef*) (hdma->Parent);
 8007352:	6b84      	ldr	r4, [r0, #56]	; 0x38
	const HAL_UART_StateTypeDef gstate = huart->gState;
 8007354:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
	const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007356:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
	if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800735a:	6823      	ldr	r3, [r4, #0]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007362:	d001      	beq.n	8007368 <UART_DMAError+0x18>
			&& (gstate == HAL_UART_STATE_BUSY_TX)) {
 8007364:	2a21      	cmp	r2, #33	; 0x21
 8007366:	d010      	beq.n	800738a <UART_DMAError+0x3a>
	if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007368:	6823      	ldr	r3, [r4, #0]
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007370:	d001      	beq.n	8007376 <UART_DMAError+0x26>
			&& (rxstate == HAL_UART_STATE_BUSY_RX)) {
 8007372:	2d22      	cmp	r5, #34	; 0x22
 8007374:	d010      	beq.n	8007398 <UART_DMAError+0x48>
	huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007376:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800737a:	f043 0310 	orr.w	r3, r3, #16
 800737e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	HAL_UART_ErrorCallback(huart);
 8007382:	4620      	mov	r0, r4
 8007384:	f7ff ffe3 	bl	800734e <HAL_UART_ErrorCallback>
}
 8007388:	bd38      	pop	{r3, r4, r5, pc}
		huart->TxXferCount = 0U;
 800738a:	2300      	movs	r3, #0
 800738c:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
		UART_EndTxTransfer(huart);
 8007390:	4620      	mov	r0, r4
 8007392:	f7ff fe44 	bl	800701e <UART_EndTxTransfer>
 8007396:	e7e7      	b.n	8007368 <UART_DMAError+0x18>
		huart->RxXferCount = 0U;
 8007398:	2300      	movs	r3, #0
 800739a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
		UART_EndRxTransfer(huart);
 800739e:	4620      	mov	r0, r4
 80073a0:	f7ff fe49 	bl	8007036 <UART_EndRxTransfer>
 80073a4:	e7e7      	b.n	8007376 <UART_DMAError+0x26>

080073a6 <UART_DMAAbortOnError>:
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma) {
 80073a6:	b508      	push	{r3, lr}
	UART_HandleTypeDef *huart = (UART_HandleTypeDef*) (hdma->Parent);
 80073a8:	6b80      	ldr	r0, [r0, #56]	; 0x38
	huart->RxXferCount = 0U;
 80073aa:	2300      	movs	r3, #0
 80073ac:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
	huart->TxXferCount = 0U;
 80073b0:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
	HAL_UART_ErrorCallback(huart);
 80073b4:	f7ff ffcb 	bl	800734e <HAL_UART_ErrorCallback>
}
 80073b8:	bd08      	pop	{r3, pc}

080073ba <HAL_UARTEx_RxEventCallback>:
}
 80073ba:	4770      	bx	lr

080073bc <HAL_UARTEx_WakeupCallback>:
}
 80073bc:	4770      	bx	lr
	...

080073c0 <HAL_UART_IRQHandler>:
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart) {
 80073c0:	b570      	push	{r4, r5, r6, lr}
 80073c2:	4604      	mov	r4, r0
	uint32_t isrflags = READ_REG(huart->Instance->ISR);
 80073c4:	6801      	ldr	r1, [r0, #0]
 80073c6:	69cb      	ldr	r3, [r1, #28]
	uint32_t cr1its = READ_REG(huart->Instance->CR1);
 80073c8:	6808      	ldr	r0, [r1, #0]
	uint32_t cr3its = READ_REG(huart->Instance->CR3);
 80073ca:	688d      	ldr	r5, [r1, #8]
	errorflags = (isrflags
 80073cc:	f640 020f 	movw	r2, #2063	; 0x80f
	if (errorflags == 0U) {
 80073d0:	401a      	ands	r2, r3
 80073d2:	d105      	bne.n	80073e0 <HAL_UART_IRQHandler+0x20>
		if (((isrflags & USART_ISR_RXNE) != 0U)
 80073d4:	f013 0f20 	tst.w	r3, #32
 80073d8:	d002      	beq.n	80073e0 <HAL_UART_IRQHandler+0x20>
				&& ((cr1its & USART_CR1_RXNEIE) != 0U)) {
 80073da:	f010 0f20 	tst.w	r0, #32
 80073de:	d120      	bne.n	8007422 <HAL_UART_IRQHandler+0x62>
	if ((errorflags != 0U)
 80073e0:	b12a      	cbz	r2, 80073ee <HAL_UART_IRQHandler+0x2e>
			&& (((cr3its & USART_CR3_EIE) != 0U)
 80073e2:	f015 0201 	ands.w	r2, r5, #1
 80073e6:	d122      	bne.n	800742e <HAL_UART_IRQHandler+0x6e>
					|| ((cr1its
 80073e8:	4eae      	ldr	r6, [pc, #696]	; (80076a4 <HAL_UART_IRQHandler+0x2e4>)
 80073ea:	4230      	tst	r0, r6
 80073ec:	d11f      	bne.n	800742e <HAL_UART_IRQHandler+0x6e>
	if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073ee:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80073f0:	2a01      	cmp	r2, #1
 80073f2:	f000 80ab 	beq.w	800754c <HAL_UART_IRQHandler+0x18c>
	if (((isrflags & USART_ISR_WUF) != 0U)
 80073f6:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80073fa:	d003      	beq.n	8007404 <HAL_UART_IRQHandler+0x44>
			&& ((cr3its & USART_CR3_WUFIE) != 0U)) {
 80073fc:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 8007400:	f040 813e 	bne.w	8007680 <HAL_UART_IRQHandler+0x2c0>
	if (((isrflags & USART_ISR_TXE) != 0U)
 8007404:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007408:	d003      	beq.n	8007412 <HAL_UART_IRQHandler+0x52>
			&& ((cr1its & USART_CR1_TXEIE) != 0U)) {
 800740a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800740e:	f040 813e 	bne.w	800768e <HAL_UART_IRQHandler+0x2ce>
	if (((isrflags & USART_ISR_TC) != 0U)
 8007412:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007416:	d003      	beq.n	8007420 <HAL_UART_IRQHandler+0x60>
			&& ((cr1its & USART_CR1_TCIE) != 0U)) {
 8007418:	f010 0f40 	tst.w	r0, #64	; 0x40
 800741c:	f040 813e 	bne.w	800769c <HAL_UART_IRQHandler+0x2dc>
}
 8007420:	bd70      	pop	{r4, r5, r6, pc}
			if (huart->RxISR != NULL) {
 8007422:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007424:	2b00      	cmp	r3, #0
 8007426:	d0fb      	beq.n	8007420 <HAL_UART_IRQHandler+0x60>
				huart->RxISR(huart);
 8007428:	4620      	mov	r0, r4
 800742a:	4798      	blx	r3
			return;
 800742c:	e7f8      	b.n	8007420 <HAL_UART_IRQHandler+0x60>
		if (((isrflags & USART_ISR_PE) != 0U)
 800742e:	f013 0f01 	tst.w	r3, #1
 8007432:	d009      	beq.n	8007448 <HAL_UART_IRQHandler+0x88>
				&& ((cr1its & USART_CR1_PEIE) != 0U)) {
 8007434:	f410 7f80 	tst.w	r0, #256	; 0x100
 8007438:	d006      	beq.n	8007448 <HAL_UART_IRQHandler+0x88>
			__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800743a:	2501      	movs	r5, #1
 800743c:	620d      	str	r5, [r1, #32]
			huart->ErrorCode |= HAL_UART_ERROR_PE;
 800743e:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8007442:	4329      	orrs	r1, r5
 8007444:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
		if (((isrflags & USART_ISR_FE) != 0U)
 8007448:	f013 0f02 	tst.w	r3, #2
 800744c:	d009      	beq.n	8007462 <HAL_UART_IRQHandler+0xa2>
				&& ((cr3its & USART_CR3_EIE) != 0U)) {
 800744e:	b142      	cbz	r2, 8007462 <HAL_UART_IRQHandler+0xa2>
			__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007450:	6821      	ldr	r1, [r4, #0]
 8007452:	2502      	movs	r5, #2
 8007454:	620d      	str	r5, [r1, #32]
			huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007456:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800745a:	f041 0104 	orr.w	r1, r1, #4
 800745e:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
		if (((isrflags & USART_ISR_NE) != 0U)
 8007462:	f013 0f04 	tst.w	r3, #4
 8007466:	d009      	beq.n	800747c <HAL_UART_IRQHandler+0xbc>
				&& ((cr3its & USART_CR3_EIE) != 0U)) {
 8007468:	b142      	cbz	r2, 800747c <HAL_UART_IRQHandler+0xbc>
			__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800746a:	6821      	ldr	r1, [r4, #0]
 800746c:	2504      	movs	r5, #4
 800746e:	620d      	str	r5, [r1, #32]
			huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007470:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8007474:	f041 0102 	orr.w	r1, r1, #2
 8007478:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
		if (((isrflags & USART_ISR_ORE) != 0U)
 800747c:	f013 0f08 	tst.w	r3, #8
 8007480:	d00b      	beq.n	800749a <HAL_UART_IRQHandler+0xda>
				&& (((cr1its & USART_CR1_RXNEIE) != 0U)
 8007482:	f010 0f20 	tst.w	r0, #32
 8007486:	d100      	bne.n	800748a <HAL_UART_IRQHandler+0xca>
						|| ((cr3its & USART_CR3_EIE) != 0U))) {
 8007488:	b13a      	cbz	r2, 800749a <HAL_UART_IRQHandler+0xda>
			__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800748a:	6822      	ldr	r2, [r4, #0]
 800748c:	2108      	movs	r1, #8
 800748e:	6211      	str	r1, [r2, #32]
			huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007490:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8007494:	430a      	orrs	r2, r1
 8007496:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
		if (((isrflags & USART_ISR_RTOF) != 0U)
 800749a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800749e:	d00c      	beq.n	80074ba <HAL_UART_IRQHandler+0xfa>
				&& ((cr1its & USART_CR1_RTOIE) != 0U)) {
 80074a0:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 80074a4:	d009      	beq.n	80074ba <HAL_UART_IRQHandler+0xfa>
			__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074a6:	6822      	ldr	r2, [r4, #0]
 80074a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80074ac:	6211      	str	r1, [r2, #32]
			huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80074ae:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80074b2:	f042 0220 	orr.w	r2, r2, #32
 80074b6:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
		if (huart->ErrorCode != HAL_UART_ERROR_NONE) {
 80074ba:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80074be:	2a00      	cmp	r2, #0
 80074c0:	d0ae      	beq.n	8007420 <HAL_UART_IRQHandler+0x60>
			if (((isrflags & USART_ISR_RXNE) != 0U)
 80074c2:	f013 0f20 	tst.w	r3, #32
 80074c6:	d006      	beq.n	80074d6 <HAL_UART_IRQHandler+0x116>
					&& ((cr1its & USART_CR1_RXNEIE) != 0U)) {
 80074c8:	f010 0f20 	tst.w	r0, #32
 80074cc:	d003      	beq.n	80074d6 <HAL_UART_IRQHandler+0x116>
				if (huart->RxISR != NULL) {
 80074ce:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80074d0:	b10b      	cbz	r3, 80074d6 <HAL_UART_IRQHandler+0x116>
					huart->RxISR(huart);
 80074d2:	4620      	mov	r0, r4
 80074d4:	4798      	blx	r3
			errorcode = huart->ErrorCode;
 80074d6:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
			if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074da:	6823      	ldr	r3, [r4, #0]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	f013 0f40 	tst.w	r3, #64	; 0x40
 80074e2:	d102      	bne.n	80074ea <HAL_UART_IRQHandler+0x12a>
					|| ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE))
 80074e4:	f012 0f28 	tst.w	r2, #40	; 0x28
 80074e8:	d029      	beq.n	800753e <HAL_UART_IRQHandler+0x17e>
				UART_EndRxTransfer(huart);
 80074ea:	4620      	mov	r0, r4
 80074ec:	f7ff fda3 	bl	8007036 <UART_EndRxTransfer>
				if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 80074f0:	6823      	ldr	r3, [r4, #0]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80074f8:	d01d      	beq.n	8007536 <HAL_UART_IRQHandler+0x176>
					ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074fa:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074fc:	f102 0308 	add.w	r3, r2, #8
 8007500:	e853 3f00 	ldrex	r3, [r3]
 8007504:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007508:	3208      	adds	r2, #8
 800750a:	e842 3100 	strex	r1, r3, [r2]
 800750e:	2900      	cmp	r1, #0
 8007510:	d1f3      	bne.n	80074fa <HAL_UART_IRQHandler+0x13a>
					if (huart->hdmarx != NULL) {
 8007512:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8007514:	b15b      	cbz	r3, 800752e <HAL_UART_IRQHandler+0x16e>
						huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007516:	4a64      	ldr	r2, [pc, #400]	; (80076a8 <HAL_UART_IRQHandler+0x2e8>)
 8007518:	651a      	str	r2, [r3, #80]	; 0x50
						if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK) {
 800751a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800751c:	f7fd f802 	bl	8004524 <HAL_DMA_Abort_IT>
 8007520:	2800      	cmp	r0, #0
 8007522:	f43f af7d 	beq.w	8007420 <HAL_UART_IRQHandler+0x60>
							huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007526:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8007528:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800752a:	4798      	blx	r3
 800752c:	e778      	b.n	8007420 <HAL_UART_IRQHandler+0x60>
						HAL_UART_ErrorCallback(huart);
 800752e:	4620      	mov	r0, r4
 8007530:	f7ff ff0d 	bl	800734e <HAL_UART_ErrorCallback>
 8007534:	e774      	b.n	8007420 <HAL_UART_IRQHandler+0x60>
					HAL_UART_ErrorCallback(huart);
 8007536:	4620      	mov	r0, r4
 8007538:	f7ff ff09 	bl	800734e <HAL_UART_ErrorCallback>
 800753c:	e770      	b.n	8007420 <HAL_UART_IRQHandler+0x60>
				HAL_UART_ErrorCallback(huart);
 800753e:	4620      	mov	r0, r4
 8007540:	f7ff ff05 	bl	800734e <HAL_UART_ErrorCallback>
				huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007544:	2300      	movs	r3, #0
 8007546:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		return;
 800754a:	e769      	b.n	8007420 <HAL_UART_IRQHandler+0x60>
			&& ((isrflags & USART_ISR_IDLE) != 0U)
 800754c:	f013 0f10 	tst.w	r3, #16
 8007550:	f43f af51 	beq.w	80073f6 <HAL_UART_IRQHandler+0x36>
			&& ((cr1its & USART_ISR_IDLE) != 0U)) {
 8007554:	f010 0f10 	tst.w	r0, #16
 8007558:	f43f af4d 	beq.w	80073f6 <HAL_UART_IRQHandler+0x36>
		__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800755c:	2310      	movs	r3, #16
 800755e:	620b      	str	r3, [r1, #32]
		if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 8007560:	6823      	ldr	r3, [r4, #0]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007568:	d050      	beq.n	800760c <HAL_UART_IRQHandler+0x24c>
			uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(
 800756a:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800756c:	6813      	ldr	r3, [r2, #0]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	b29b      	uxth	r3, r3
			if ((nb_remaining_rx_data > 0U)
 8007572:	2b00      	cmp	r3, #0
 8007574:	f43f af54 	beq.w	8007420 <HAL_UART_IRQHandler+0x60>
					&& (nb_remaining_rx_data < huart->RxXferSize)) {
 8007578:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 800757c:	4299      	cmp	r1, r3
 800757e:	f67f af4f 	bls.w	8007420 <HAL_UART_IRQHandler+0x60>
				huart->RxXferCount = nb_remaining_rx_data;
 8007582:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
				if (huart->hdmarx->Init.Mode != DMA_CIRCULAR) {
 8007586:	69d3      	ldr	r3, [r2, #28]
 8007588:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800758c:	d031      	beq.n	80075f2 <HAL_UART_IRQHandler+0x232>
					ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800758e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007590:	e852 3f00 	ldrex	r3, [r2]
 8007594:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007598:	e842 3100 	strex	r1, r3, [r2]
 800759c:	2900      	cmp	r1, #0
 800759e:	d1f6      	bne.n	800758e <HAL_UART_IRQHandler+0x1ce>
					ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075a0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a2:	f102 0308 	add.w	r3, r2, #8
 80075a6:	e853 3f00 	ldrex	r3, [r3]
 80075aa:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ae:	3208      	adds	r2, #8
 80075b0:	e842 3100 	strex	r1, r3, [r2]
 80075b4:	2900      	cmp	r1, #0
 80075b6:	d1f3      	bne.n	80075a0 <HAL_UART_IRQHandler+0x1e0>
					ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075b8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ba:	f102 0308 	add.w	r3, r2, #8
 80075be:	e853 3f00 	ldrex	r3, [r3]
 80075c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c6:	3208      	adds	r2, #8
 80075c8:	e842 3100 	strex	r1, r3, [r2]
 80075cc:	2900      	cmp	r1, #0
 80075ce:	d1f3      	bne.n	80075b8 <HAL_UART_IRQHandler+0x1f8>
					huart->RxState = HAL_UART_STATE_READY;
 80075d0:	2320      	movs	r3, #32
 80075d2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
					huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075d6:	2300      	movs	r3, #0
 80075d8:	6623      	str	r3, [r4, #96]	; 0x60
					ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075da:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075dc:	e852 3f00 	ldrex	r3, [r2]
 80075e0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e4:	e842 3100 	strex	r1, r3, [r2]
 80075e8:	2900      	cmp	r1, #0
 80075ea:	d1f6      	bne.n	80075da <HAL_UART_IRQHandler+0x21a>
					(void) HAL_DMA_Abort(huart->hdmarx);
 80075ec:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80075ee:	f7fc ff4f 	bl	8004490 <HAL_DMA_Abort>
				huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80075f2:	2302      	movs	r3, #2
 80075f4:	6663      	str	r3, [r4, #100]	; 0x64
						(huart->RxXferSize - huart->RxXferCount));
 80075f6:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 80075fa:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80075fe:	b29b      	uxth	r3, r3
				HAL_UARTEx_RxEventCallback(huart,
 8007600:	1ac9      	subs	r1, r1, r3
 8007602:	b289      	uxth	r1, r1
 8007604:	4620      	mov	r0, r4
 8007606:	f7ff fed8 	bl	80073ba <HAL_UARTEx_RxEventCallback>
			return;
 800760a:	e709      	b.n	8007420 <HAL_UART_IRQHandler+0x60>
			uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800760c:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8007610:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8007614:	b29b      	uxth	r3, r3
 8007616:	1ac9      	subs	r1, r1, r3
 8007618:	b289      	uxth	r1, r1
			if ((huart->RxXferCount > 0U) && (nb_rx_data > 0U)) {
 800761a:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800761e:	b29b      	uxth	r3, r3
 8007620:	2b00      	cmp	r3, #0
 8007622:	f43f aefd 	beq.w	8007420 <HAL_UART_IRQHandler+0x60>
 8007626:	2900      	cmp	r1, #0
 8007628:	f43f aefa 	beq.w	8007420 <HAL_UART_IRQHandler+0x60>
				ATOMIC_CLEAR_BIT(huart->Instance->CR1,
 800762c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800762e:	e852 3f00 	ldrex	r3, [r2]
 8007632:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007636:	e842 3000 	strex	r0, r3, [r2]
 800763a:	2800      	cmp	r0, #0
 800763c:	d1f6      	bne.n	800762c <HAL_UART_IRQHandler+0x26c>
				ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800763e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007640:	f102 0308 	add.w	r3, r2, #8
 8007644:	e853 3f00 	ldrex	r3, [r3]
 8007648:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764c:	3208      	adds	r2, #8
 800764e:	e842 3000 	strex	r0, r3, [r2]
 8007652:	2800      	cmp	r0, #0
 8007654:	d1f3      	bne.n	800763e <HAL_UART_IRQHandler+0x27e>
				huart->RxState = HAL_UART_STATE_READY;
 8007656:	2320      	movs	r3, #32
 8007658:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
				huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800765c:	2300      	movs	r3, #0
 800765e:	6623      	str	r3, [r4, #96]	; 0x60
				huart->RxISR = NULL;
 8007660:	66a3      	str	r3, [r4, #104]	; 0x68
				ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007662:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007664:	e852 3f00 	ldrex	r3, [r2]
 8007668:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766c:	e842 3000 	strex	r0, r3, [r2]
 8007670:	2800      	cmp	r0, #0
 8007672:	d1f6      	bne.n	8007662 <HAL_UART_IRQHandler+0x2a2>
				huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007674:	2302      	movs	r3, #2
 8007676:	6663      	str	r3, [r4, #100]	; 0x64
				HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007678:	4620      	mov	r0, r4
 800767a:	f7ff fe9e 	bl	80073ba <HAL_UARTEx_RxEventCallback>
			return;
 800767e:	e6cf      	b.n	8007420 <HAL_UART_IRQHandler+0x60>
		__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007680:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007684:	620b      	str	r3, [r1, #32]
		HAL_UARTEx_WakeupCallback(huart);
 8007686:	4620      	mov	r0, r4
 8007688:	f7ff fe98 	bl	80073bc <HAL_UARTEx_WakeupCallback>
		return;
 800768c:	e6c8      	b.n	8007420 <HAL_UART_IRQHandler+0x60>
		if (huart->TxISR != NULL) {
 800768e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007690:	2b00      	cmp	r3, #0
 8007692:	f43f aec5 	beq.w	8007420 <HAL_UART_IRQHandler+0x60>
			huart->TxISR(huart);
 8007696:	4620      	mov	r0, r4
 8007698:	4798      	blx	r3
		return;
 800769a:	e6c1      	b.n	8007420 <HAL_UART_IRQHandler+0x60>
		UART_EndTransmit_IT(huart);
 800769c:	4620      	mov	r0, r4
 800769e:	f7ff fe3f 	bl	8007320 <UART_EndTransmit_IT>
		return;
 80076a2:	e6bd      	b.n	8007420 <HAL_UART_IRQHandler+0x60>
 80076a4:	04000120 	.word	0x04000120
 80076a8:	080073a7 	.word	0x080073a7

080076ac <UART_SetConfig>:
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart) {
 80076ac:	b510      	push	{r4, lr}
 80076ae:	4604      	mov	r4, r0
	tmpreg = (uint32_t) huart->Init.WordLength | huart->Init.Parity
 80076b0:	6883      	ldr	r3, [r0, #8]
 80076b2:	6902      	ldr	r2, [r0, #16]
 80076b4:	4313      	orrs	r3, r2
			| huart->Init.Mode | huart->Init.OverSampling;
 80076b6:	6942      	ldr	r2, [r0, #20]
 80076b8:	4313      	orrs	r3, r2
 80076ba:	69c2      	ldr	r2, [r0, #28]
	tmpreg = (uint32_t) huart->Init.WordLength | huart->Init.Parity
 80076bc:	4313      	orrs	r3, r2
	MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80076be:	6801      	ldr	r1, [r0, #0]
 80076c0:	6808      	ldr	r0, [r1, #0]
 80076c2:	4a93      	ldr	r2, [pc, #588]	; (8007910 <UART_SetConfig+0x264>)
 80076c4:	4002      	ands	r2, r0
 80076c6:	431a      	orrs	r2, r3
 80076c8:	600a      	str	r2, [r1, #0]
	MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076ca:	6822      	ldr	r2, [r4, #0]
 80076cc:	6853      	ldr	r3, [r2, #4]
 80076ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80076d2:	68e1      	ldr	r1, [r4, #12]
 80076d4:	430b      	orrs	r3, r1
 80076d6:	6053      	str	r3, [r2, #4]
	tmpreg = (uint32_t) huart->Init.HwFlowCtl;
 80076d8:	69a2      	ldr	r2, [r4, #24]
	tmpreg |= huart->Init.OneBitSampling;
 80076da:	6a23      	ldr	r3, [r4, #32]
 80076dc:	431a      	orrs	r2, r3
	MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80076de:	6821      	ldr	r1, [r4, #0]
 80076e0:	688b      	ldr	r3, [r1, #8]
 80076e2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80076e6:	4313      	orrs	r3, r2
 80076e8:	608b      	str	r3, [r1, #8]
	UART_GETCLOCKSOURCE(huart, clocksource);
 80076ea:	6823      	ldr	r3, [r4, #0]
 80076ec:	4a89      	ldr	r2, [pc, #548]	; (8007914 <UART_SetConfig+0x268>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d019      	beq.n	8007726 <UART_SetConfig+0x7a>
 80076f2:	4a89      	ldr	r2, [pc, #548]	; (8007918 <UART_SetConfig+0x26c>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d029      	beq.n	800774c <UART_SetConfig+0xa0>
 80076f8:	4a88      	ldr	r2, [pc, #544]	; (800791c <UART_SetConfig+0x270>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d03e      	beq.n	800777c <UART_SetConfig+0xd0>
 80076fe:	4a88      	ldr	r2, [pc, #544]	; (8007920 <UART_SetConfig+0x274>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d062      	beq.n	80077ca <UART_SetConfig+0x11e>
 8007704:	4a87      	ldr	r2, [pc, #540]	; (8007924 <UART_SetConfig+0x278>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d071      	beq.n	80077ee <UART_SetConfig+0x142>
 800770a:	4a87      	ldr	r2, [pc, #540]	; (8007928 <UART_SetConfig+0x27c>)
 800770c:	4293      	cmp	r3, r2
 800770e:	f000 8083 	beq.w	8007818 <UART_SetConfig+0x16c>
 8007712:	4a86      	ldr	r2, [pc, #536]	; (800792c <UART_SetConfig+0x280>)
 8007714:	4293      	cmp	r3, r2
 8007716:	f000 8094 	beq.w	8007842 <UART_SetConfig+0x196>
 800771a:	4a85      	ldr	r2, [pc, #532]	; (8007930 <UART_SetConfig+0x284>)
 800771c:	4293      	cmp	r3, r2
 800771e:	f000 80a5 	beq.w	800786c <UART_SetConfig+0x1c0>
 8007722:	2310      	movs	r3, #16
 8007724:	e03a      	b.n	800779c <UART_SetConfig+0xf0>
 8007726:	4b83      	ldr	r3, [pc, #524]	; (8007934 <UART_SetConfig+0x288>)
 8007728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800772c:	f003 0303 	and.w	r3, r3, #3
 8007730:	2b03      	cmp	r3, #3
 8007732:	d809      	bhi.n	8007748 <UART_SetConfig+0x9c>
 8007734:	e8df f003 	tbb	[pc, r3]
 8007738:	06ae0402 	.word	0x06ae0402
 800773c:	2301      	movs	r3, #1
 800773e:	e02d      	b.n	800779c <UART_SetConfig+0xf0>
 8007740:	2304      	movs	r3, #4
 8007742:	e02b      	b.n	800779c <UART_SetConfig+0xf0>
 8007744:	2308      	movs	r3, #8
 8007746:	e029      	b.n	800779c <UART_SetConfig+0xf0>
 8007748:	2310      	movs	r3, #16
 800774a:	e027      	b.n	800779c <UART_SetConfig+0xf0>
 800774c:	4b79      	ldr	r3, [pc, #484]	; (8007934 <UART_SetConfig+0x288>)
 800774e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007752:	f003 030c 	and.w	r3, r3, #12
 8007756:	2b0c      	cmp	r3, #12
 8007758:	d80e      	bhi.n	8007778 <UART_SetConfig+0xcc>
 800775a:	e8df f003 	tbb	[pc, r3]
 800775e:	0d07      	.short	0x0d07
 8007760:	0d090d0d 	.word	0x0d090d0d
 8007764:	0d9d0d0d 	.word	0x0d9d0d0d
 8007768:	0d0d      	.short	0x0d0d
 800776a:	0b          	.byte	0x0b
 800776b:	00          	.byte	0x00
 800776c:	2300      	movs	r3, #0
 800776e:	e015      	b.n	800779c <UART_SetConfig+0xf0>
 8007770:	2304      	movs	r3, #4
 8007772:	e013      	b.n	800779c <UART_SetConfig+0xf0>
 8007774:	2308      	movs	r3, #8
 8007776:	e011      	b.n	800779c <UART_SetConfig+0xf0>
 8007778:	2310      	movs	r3, #16
 800777a:	e00f      	b.n	800779c <UART_SetConfig+0xf0>
 800777c:	4b6d      	ldr	r3, [pc, #436]	; (8007934 <UART_SetConfig+0x288>)
 800777e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007782:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007786:	2b20      	cmp	r3, #32
 8007788:	f000 8088 	beq.w	800789c <UART_SetConfig+0x1f0>
 800778c:	d819      	bhi.n	80077c2 <UART_SetConfig+0x116>
 800778e:	2b00      	cmp	r3, #0
 8007790:	f000 8086 	beq.w	80078a0 <UART_SetConfig+0x1f4>
 8007794:	2b10      	cmp	r3, #16
 8007796:	f040 8085 	bne.w	80078a4 <UART_SetConfig+0x1f8>
 800779a:	2304      	movs	r3, #4
	if (huart->Init.OverSampling == UART_OVERSAMPLING_8) {
 800779c:	69e0      	ldr	r0, [r4, #28]
 800779e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80077a2:	f000 80ab 	beq.w	80078fc <UART_SetConfig+0x250>
		switch (clocksource) {
 80077a6:	2b08      	cmp	r3, #8
 80077a8:	f200 810c 	bhi.w	80079c4 <UART_SetConfig+0x318>
 80077ac:	e8df f013 	tbh	[pc, r3, lsl #1]
 80077b0:	00fb00e8 	.word	0x00fb00e8
 80077b4:	010a00e6 	.word	0x010a00e6
 80077b8:	010a00fe 	.word	0x010a00fe
 80077bc:	010a010a 	.word	0x010a010a
 80077c0:	0101      	.short	0x0101
	UART_GETCLOCKSOURCE(huart, clocksource);
 80077c2:	2b30      	cmp	r3, #48	; 0x30
 80077c4:	d170      	bne.n	80078a8 <UART_SetConfig+0x1fc>
 80077c6:	2308      	movs	r3, #8
 80077c8:	e7e8      	b.n	800779c <UART_SetConfig+0xf0>
 80077ca:	4b5a      	ldr	r3, [pc, #360]	; (8007934 <UART_SetConfig+0x288>)
 80077cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077d0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80077d4:	2b80      	cmp	r3, #128	; 0x80
 80077d6:	d069      	beq.n	80078ac <UART_SetConfig+0x200>
 80077d8:	d805      	bhi.n	80077e6 <UART_SetConfig+0x13a>
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d068      	beq.n	80078b0 <UART_SetConfig+0x204>
 80077de:	2b40      	cmp	r3, #64	; 0x40
 80077e0:	d168      	bne.n	80078b4 <UART_SetConfig+0x208>
 80077e2:	2304      	movs	r3, #4
 80077e4:	e7da      	b.n	800779c <UART_SetConfig+0xf0>
 80077e6:	2bc0      	cmp	r3, #192	; 0xc0
 80077e8:	d166      	bne.n	80078b8 <UART_SetConfig+0x20c>
 80077ea:	2308      	movs	r3, #8
 80077ec:	e7d6      	b.n	800779c <UART_SetConfig+0xf0>
 80077ee:	4b51      	ldr	r3, [pc, #324]	; (8007934 <UART_SetConfig+0x288>)
 80077f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077fc:	d05e      	beq.n	80078bc <UART_SetConfig+0x210>
 80077fe:	d806      	bhi.n	800780e <UART_SetConfig+0x162>
 8007800:	2b00      	cmp	r3, #0
 8007802:	d05d      	beq.n	80078c0 <UART_SetConfig+0x214>
 8007804:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007808:	d15c      	bne.n	80078c4 <UART_SetConfig+0x218>
 800780a:	2304      	movs	r3, #4
 800780c:	e7c6      	b.n	800779c <UART_SetConfig+0xf0>
 800780e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007812:	d159      	bne.n	80078c8 <UART_SetConfig+0x21c>
 8007814:	2308      	movs	r3, #8
 8007816:	e7c1      	b.n	800779c <UART_SetConfig+0xf0>
 8007818:	4b46      	ldr	r3, [pc, #280]	; (8007934 <UART_SetConfig+0x288>)
 800781a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800781e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007822:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007826:	d051      	beq.n	80078cc <UART_SetConfig+0x220>
 8007828:	d806      	bhi.n	8007838 <UART_SetConfig+0x18c>
 800782a:	2b00      	cmp	r3, #0
 800782c:	d050      	beq.n	80078d0 <UART_SetConfig+0x224>
 800782e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007832:	d14f      	bne.n	80078d4 <UART_SetConfig+0x228>
 8007834:	2304      	movs	r3, #4
 8007836:	e7b1      	b.n	800779c <UART_SetConfig+0xf0>
 8007838:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800783c:	d14c      	bne.n	80078d8 <UART_SetConfig+0x22c>
 800783e:	2308      	movs	r3, #8
 8007840:	e7ac      	b.n	800779c <UART_SetConfig+0xf0>
 8007842:	4b3c      	ldr	r3, [pc, #240]	; (8007934 <UART_SetConfig+0x288>)
 8007844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007848:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800784c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007850:	d044      	beq.n	80078dc <UART_SetConfig+0x230>
 8007852:	d806      	bhi.n	8007862 <UART_SetConfig+0x1b6>
 8007854:	2b00      	cmp	r3, #0
 8007856:	d043      	beq.n	80078e0 <UART_SetConfig+0x234>
 8007858:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800785c:	d142      	bne.n	80078e4 <UART_SetConfig+0x238>
 800785e:	2304      	movs	r3, #4
 8007860:	e79c      	b.n	800779c <UART_SetConfig+0xf0>
 8007862:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007866:	d13f      	bne.n	80078e8 <UART_SetConfig+0x23c>
 8007868:	2308      	movs	r3, #8
 800786a:	e797      	b.n	800779c <UART_SetConfig+0xf0>
 800786c:	4b31      	ldr	r3, [pc, #196]	; (8007934 <UART_SetConfig+0x288>)
 800786e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007872:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007876:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800787a:	d037      	beq.n	80078ec <UART_SetConfig+0x240>
 800787c:	d805      	bhi.n	800788a <UART_SetConfig+0x1de>
 800787e:	b3bb      	cbz	r3, 80078f0 <UART_SetConfig+0x244>
 8007880:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007884:	d136      	bne.n	80078f4 <UART_SetConfig+0x248>
 8007886:	2304      	movs	r3, #4
 8007888:	e788      	b.n	800779c <UART_SetConfig+0xf0>
 800788a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800788e:	d133      	bne.n	80078f8 <UART_SetConfig+0x24c>
 8007890:	2308      	movs	r3, #8
 8007892:	e783      	b.n	800779c <UART_SetConfig+0xf0>
 8007894:	2302      	movs	r3, #2
 8007896:	e781      	b.n	800779c <UART_SetConfig+0xf0>
 8007898:	2302      	movs	r3, #2
 800789a:	e77f      	b.n	800779c <UART_SetConfig+0xf0>
 800789c:	2302      	movs	r3, #2
 800789e:	e77d      	b.n	800779c <UART_SetConfig+0xf0>
 80078a0:	2300      	movs	r3, #0
 80078a2:	e77b      	b.n	800779c <UART_SetConfig+0xf0>
 80078a4:	2310      	movs	r3, #16
 80078a6:	e779      	b.n	800779c <UART_SetConfig+0xf0>
 80078a8:	2310      	movs	r3, #16
 80078aa:	e777      	b.n	800779c <UART_SetConfig+0xf0>
 80078ac:	2302      	movs	r3, #2
 80078ae:	e775      	b.n	800779c <UART_SetConfig+0xf0>
 80078b0:	2300      	movs	r3, #0
 80078b2:	e773      	b.n	800779c <UART_SetConfig+0xf0>
 80078b4:	2310      	movs	r3, #16
 80078b6:	e771      	b.n	800779c <UART_SetConfig+0xf0>
 80078b8:	2310      	movs	r3, #16
 80078ba:	e76f      	b.n	800779c <UART_SetConfig+0xf0>
 80078bc:	2302      	movs	r3, #2
 80078be:	e76d      	b.n	800779c <UART_SetConfig+0xf0>
 80078c0:	2300      	movs	r3, #0
 80078c2:	e76b      	b.n	800779c <UART_SetConfig+0xf0>
 80078c4:	2310      	movs	r3, #16
 80078c6:	e769      	b.n	800779c <UART_SetConfig+0xf0>
 80078c8:	2310      	movs	r3, #16
 80078ca:	e767      	b.n	800779c <UART_SetConfig+0xf0>
 80078cc:	2302      	movs	r3, #2
 80078ce:	e765      	b.n	800779c <UART_SetConfig+0xf0>
 80078d0:	2301      	movs	r3, #1
 80078d2:	e763      	b.n	800779c <UART_SetConfig+0xf0>
 80078d4:	2310      	movs	r3, #16
 80078d6:	e761      	b.n	800779c <UART_SetConfig+0xf0>
 80078d8:	2310      	movs	r3, #16
 80078da:	e75f      	b.n	800779c <UART_SetConfig+0xf0>
 80078dc:	2302      	movs	r3, #2
 80078de:	e75d      	b.n	800779c <UART_SetConfig+0xf0>
 80078e0:	2300      	movs	r3, #0
 80078e2:	e75b      	b.n	800779c <UART_SetConfig+0xf0>
 80078e4:	2310      	movs	r3, #16
 80078e6:	e759      	b.n	800779c <UART_SetConfig+0xf0>
 80078e8:	2310      	movs	r3, #16
 80078ea:	e757      	b.n	800779c <UART_SetConfig+0xf0>
 80078ec:	2302      	movs	r3, #2
 80078ee:	e755      	b.n	800779c <UART_SetConfig+0xf0>
 80078f0:	2300      	movs	r3, #0
 80078f2:	e753      	b.n	800779c <UART_SetConfig+0xf0>
 80078f4:	2310      	movs	r3, #16
 80078f6:	e751      	b.n	800779c <UART_SetConfig+0xf0>
 80078f8:	2310      	movs	r3, #16
 80078fa:	e74f      	b.n	800779c <UART_SetConfig+0xf0>
		switch (clocksource) {
 80078fc:	2b08      	cmp	r3, #8
 80078fe:	d85b      	bhi.n	80079b8 <UART_SetConfig+0x30c>
 8007900:	e8df f003 	tbb	[pc, r3]
 8007904:	5a3a341a 	.word	0x5a3a341a
 8007908:	5a5a5a37 	.word	0x5a5a5a37
 800790c:	1e          	.byte	0x1e
 800790d:	00          	.byte	0x00
 800790e:	bf00      	nop
 8007910:	efff69f3 	.word	0xefff69f3
 8007914:	40011000 	.word	0x40011000
 8007918:	40004400 	.word	0x40004400
 800791c:	40004800 	.word	0x40004800
 8007920:	40004c00 	.word	0x40004c00
 8007924:	40005000 	.word	0x40005000
 8007928:	40011400 	.word	0x40011400
 800792c:	40007800 	.word	0x40007800
 8007930:	40007c00 	.word	0x40007c00
 8007934:	40023800 	.word	0x40023800
			pclk = HAL_RCC_GetPCLK1Freq();
 8007938:	f7fe fe02 	bl	8006540 <HAL_RCC_GetPCLK1Freq>
		if (pclk != 0U) {
 800793c:	2800      	cmp	r0, #0
 800793e:	d03d      	beq.n	80079bc <UART_SetConfig+0x310>
			usartdiv = (uint32_t) (UART_DIV_SAMPLING8(pclk,
 8007940:	6862      	ldr	r2, [r4, #4]
 8007942:	0853      	lsrs	r3, r2, #1
 8007944:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8007948:	fbb3 f3f2 	udiv	r3, r3, r2
			if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX)) {
 800794c:	f1a3 0110 	sub.w	r1, r3, #16
 8007950:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8007954:	4291      	cmp	r1, r2
 8007956:	d833      	bhi.n	80079c0 <UART_SetConfig+0x314>
				brrtemp = (uint16_t) (usartdiv & 0xFFF0U);
 8007958:	b29a      	uxth	r2, r3
 800795a:	f022 020f 	bic.w	r2, r2, #15
				brrtemp |= (uint16_t) ((usartdiv & (uint16_t) 0x000FU) >> 1U);
 800795e:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8007962:	4313      	orrs	r3, r2
				huart->Instance->BRR = brrtemp;
 8007964:	6822      	ldr	r2, [r4, #0]
 8007966:	60d3      	str	r3, [r2, #12]
 8007968:	2000      	movs	r0, #0
 800796a:	e030      	b.n	80079ce <UART_SetConfig+0x322>
			pclk = HAL_RCC_GetPCLK2Freq();
 800796c:	f7fe fdf8 	bl	8006560 <HAL_RCC_GetPCLK2Freq>
			break;
 8007970:	e7e4      	b.n	800793c <UART_SetConfig+0x290>
			pclk = HAL_RCC_GetSysClockFreq();
 8007972:	f7fe fcd5 	bl	8006320 <HAL_RCC_GetSysClockFreq>
			break;
 8007976:	e7e1      	b.n	800793c <UART_SetConfig+0x290>
			pclk = (uint32_t) HSI_VALUE;
 8007978:	4817      	ldr	r0, [pc, #92]	; (80079d8 <UART_SetConfig+0x32c>)
 800797a:	e7e1      	b.n	8007940 <UART_SetConfig+0x294>
		switch (clocksource) {
 800797c:	4816      	ldr	r0, [pc, #88]	; (80079d8 <UART_SetConfig+0x32c>)
 800797e:	e002      	b.n	8007986 <UART_SetConfig+0x2da>
			pclk = HAL_RCC_GetPCLK1Freq();
 8007980:	f7fe fdde 	bl	8006540 <HAL_RCC_GetPCLK1Freq>
		if (pclk != 0U) {
 8007984:	b300      	cbz	r0, 80079c8 <UART_SetConfig+0x31c>
			usartdiv = (uint32_t) (UART_DIV_SAMPLING16(pclk,
 8007986:	6863      	ldr	r3, [r4, #4]
 8007988:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800798c:	fbb0 f0f3 	udiv	r0, r0, r3
			if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX)) {
 8007990:	f1a0 0210 	sub.w	r2, r0, #16
 8007994:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8007998:	429a      	cmp	r2, r3
 800799a:	d817      	bhi.n	80079cc <UART_SetConfig+0x320>
				huart->Instance->BRR = (uint16_t) usartdiv;
 800799c:	6823      	ldr	r3, [r4, #0]
 800799e:	b280      	uxth	r0, r0
 80079a0:	60d8      	str	r0, [r3, #12]
 80079a2:	2000      	movs	r0, #0
 80079a4:	e013      	b.n	80079ce <UART_SetConfig+0x322>
			pclk = HAL_RCC_GetPCLK2Freq();
 80079a6:	f7fe fddb 	bl	8006560 <HAL_RCC_GetPCLK2Freq>
			break;
 80079aa:	e7eb      	b.n	8007984 <UART_SetConfig+0x2d8>
			pclk = HAL_RCC_GetSysClockFreq();
 80079ac:	f7fe fcb8 	bl	8006320 <HAL_RCC_GetSysClockFreq>
			break;
 80079b0:	e7e8      	b.n	8007984 <UART_SetConfig+0x2d8>
			pclk = (uint32_t) LSE_VALUE;
 80079b2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80079b6:	e7e6      	b.n	8007986 <UART_SetConfig+0x2da>
		switch (clocksource) {
 80079b8:	2001      	movs	r0, #1
 80079ba:	e008      	b.n	80079ce <UART_SetConfig+0x322>
 80079bc:	2000      	movs	r0, #0
 80079be:	e006      	b.n	80079ce <UART_SetConfig+0x322>
				ret = HAL_ERROR;
 80079c0:	2001      	movs	r0, #1
 80079c2:	e004      	b.n	80079ce <UART_SetConfig+0x322>
		switch (clocksource) {
 80079c4:	2001      	movs	r0, #1
 80079c6:	e002      	b.n	80079ce <UART_SetConfig+0x322>
 80079c8:	2000      	movs	r0, #0
 80079ca:	e000      	b.n	80079ce <UART_SetConfig+0x322>
				ret = HAL_ERROR;
 80079cc:	2001      	movs	r0, #1
	huart->RxISR = NULL;
 80079ce:	2300      	movs	r3, #0
 80079d0:	66a3      	str	r3, [r4, #104]	; 0x68
	huart->TxISR = NULL;
 80079d2:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 80079d4:	bd10      	pop	{r4, pc}
 80079d6:	bf00      	nop
 80079d8:	00f42400 	.word	0x00f42400

080079dc <UART_AdvFeatureConfig>:
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 80079dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80079de:	f013 0f01 	tst.w	r3, #1
 80079e2:	d006      	beq.n	80079f2 <UART_AdvFeatureConfig+0x16>
		MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV,
 80079e4:	6802      	ldr	r2, [r0, #0]
 80079e6:	6853      	ldr	r3, [r2, #4]
 80079e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80079ec:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80079ee:	430b      	orrs	r3, r1
 80079f0:	6053      	str	r3, [r2, #4]
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 80079f2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80079f4:	f013 0f02 	tst.w	r3, #2
 80079f8:	d006      	beq.n	8007a08 <UART_AdvFeatureConfig+0x2c>
		MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV,
 80079fa:	6802      	ldr	r2, [r0, #0]
 80079fc:	6853      	ldr	r3, [r2, #4]
 80079fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a02:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8007a04:	430b      	orrs	r3, r1
 8007a06:	6053      	str	r3, [r2, #4]
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8007a08:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007a0a:	f013 0f04 	tst.w	r3, #4
 8007a0e:	d006      	beq.n	8007a1e <UART_AdvFeatureConfig+0x42>
		MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV,
 8007a10:	6802      	ldr	r2, [r0, #0]
 8007a12:	6853      	ldr	r3, [r2, #4]
 8007a14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a18:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8007a1a:	430b      	orrs	r3, r1
 8007a1c:	6053      	str	r3, [r2, #4]
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8007a1e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007a20:	f013 0f08 	tst.w	r3, #8
 8007a24:	d006      	beq.n	8007a34 <UART_AdvFeatureConfig+0x58>
		MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP,
 8007a26:	6802      	ldr	r2, [r0, #0]
 8007a28:	6853      	ldr	r3, [r2, #4]
 8007a2a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a2e:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8007a30:	430b      	orrs	r3, r1
 8007a32:	6053      	str	r3, [r2, #4]
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8007a34:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007a36:	f013 0f10 	tst.w	r3, #16
 8007a3a:	d006      	beq.n	8007a4a <UART_AdvFeatureConfig+0x6e>
		MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS,
 8007a3c:	6802      	ldr	r2, [r0, #0]
 8007a3e:	6893      	ldr	r3, [r2, #8]
 8007a40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a44:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8007a46:	430b      	orrs	r3, r1
 8007a48:	6093      	str	r3, [r2, #8]
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8007a4a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007a4c:	f013 0f20 	tst.w	r3, #32
 8007a50:	d006      	beq.n	8007a60 <UART_AdvFeatureConfig+0x84>
		MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE,
 8007a52:	6802      	ldr	r2, [r0, #0]
 8007a54:	6893      	ldr	r3, [r2, #8]
 8007a56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a5a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8007a5c:	430b      	orrs	r3, r1
 8007a5e:	6093      	str	r3, [r2, #8]
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8007a60:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007a62:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007a66:	d00a      	beq.n	8007a7e <UART_AdvFeatureConfig+0xa2>
		MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN,
 8007a68:	6802      	ldr	r2, [r0, #0]
 8007a6a:	6853      	ldr	r3, [r2, #4]
 8007a6c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007a70:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8007a72:	430b      	orrs	r3, r1
 8007a74:	6053      	str	r3, [r2, #4]
		if (huart->AdvancedInit.AutoBaudRateEnable
 8007a76:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007a78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a7c:	d00b      	beq.n	8007a96 <UART_AdvFeatureConfig+0xba>
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8007a7e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007a80:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007a84:	d006      	beq.n	8007a94 <UART_AdvFeatureConfig+0xb8>
		MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST,
 8007a86:	6802      	ldr	r2, [r0, #0]
 8007a88:	6853      	ldr	r3, [r2, #4]
 8007a8a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8007a8e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8007a90:	430b      	orrs	r3, r1
 8007a92:	6053      	str	r3, [r2, #4]
}
 8007a94:	4770      	bx	lr
			MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE,
 8007a96:	6802      	ldr	r2, [r0, #0]
 8007a98:	6853      	ldr	r3, [r2, #4]
 8007a9a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007a9e:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8007aa0:	430b      	orrs	r3, r1
 8007aa2:	6053      	str	r3, [r2, #4]
 8007aa4:	e7eb      	b.n	8007a7e <UART_AdvFeatureConfig+0xa2>

08007aa6 <UART_WaitOnFlagUntilTimeout>:
		uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout) {
 8007aa6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007aaa:	4605      	mov	r5, r0
 8007aac:	460f      	mov	r7, r1
 8007aae:	4616      	mov	r6, r2
 8007ab0:	4699      	mov	r9, r3
 8007ab2:	f8dd 8020 	ldr.w	r8, [sp, #32]
	while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) {
 8007ab6:	682b      	ldr	r3, [r5, #0]
 8007ab8:	69dc      	ldr	r4, [r3, #28]
 8007aba:	ea37 0404 	bics.w	r4, r7, r4
 8007abe:	bf0c      	ite	eq
 8007ac0:	2401      	moveq	r4, #1
 8007ac2:	2400      	movne	r4, #0
 8007ac4:	42b4      	cmp	r4, r6
 8007ac6:	d155      	bne.n	8007b74 <UART_WaitOnFlagUntilTimeout+0xce>
		if (Timeout != HAL_MAX_DELAY) {
 8007ac8:	f1b8 3fff 	cmp.w	r8, #4294967295
 8007acc:	d0f3      	beq.n	8007ab6 <UART_WaitOnFlagUntilTimeout+0x10>
			if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8007ace:	f7fc fb33 	bl	8004138 <HAL_GetTick>
 8007ad2:	eba0 0009 	sub.w	r0, r0, r9
 8007ad6:	4540      	cmp	r0, r8
 8007ad8:	d82e      	bhi.n	8007b38 <UART_WaitOnFlagUntilTimeout+0x92>
 8007ada:	f1b8 0f00 	cmp.w	r8, #0
 8007ade:	d02b      	beq.n	8007b38 <UART_WaitOnFlagUntilTimeout+0x92>
			if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) {
 8007ae0:	682b      	ldr	r3, [r5, #0]
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	f012 0f04 	tst.w	r2, #4
 8007ae8:	d0e5      	beq.n	8007ab6 <UART_WaitOnFlagUntilTimeout+0x10>
				if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET) {
 8007aea:	69da      	ldr	r2, [r3, #28]
 8007aec:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8007af0:	d0e1      	beq.n	8007ab6 <UART_WaitOnFlagUntilTimeout+0x10>
					__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007af2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007af6:	621a      	str	r2, [r3, #32]
					ATOMIC_CLEAR_BIT(huart->Instance->CR1,
 8007af8:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007afa:	e852 3f00 	ldrex	r3, [r2]
 8007afe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b02:	e842 3100 	strex	r1, r3, [r2]
 8007b06:	2900      	cmp	r1, #0
 8007b08:	d1f6      	bne.n	8007af8 <UART_WaitOnFlagUntilTimeout+0x52>
					ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b0a:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0c:	f102 0308 	add.w	r3, r2, #8
 8007b10:	e853 3f00 	ldrex	r3, [r3]
 8007b14:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b18:	3208      	adds	r2, #8
 8007b1a:	e842 3100 	strex	r1, r3, [r2]
 8007b1e:	2900      	cmp	r1, #0
 8007b20:	d1f3      	bne.n	8007b0a <UART_WaitOnFlagUntilTimeout+0x64>
					huart->gState = HAL_UART_STATE_READY;
 8007b22:	2320      	movs	r3, #32
 8007b24:	67eb      	str	r3, [r5, #124]	; 0x7c
					huart->RxState = HAL_UART_STATE_READY;
 8007b26:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
					huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b2a:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
					__HAL_UNLOCK(huart);
 8007b2e:	2300      	movs	r3, #0
 8007b30:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
					return HAL_TIMEOUT;
 8007b34:	2003      	movs	r0, #3
 8007b36:	e01e      	b.n	8007b76 <UART_WaitOnFlagUntilTimeout+0xd0>
				ATOMIC_CLEAR_BIT(huart->Instance->CR1,
 8007b38:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b3a:	e852 3f00 	ldrex	r3, [r2]
 8007b3e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b42:	e842 3100 	strex	r1, r3, [r2]
 8007b46:	2900      	cmp	r1, #0
 8007b48:	d1f6      	bne.n	8007b38 <UART_WaitOnFlagUntilTimeout+0x92>
				ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b4a:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b4c:	f102 0308 	add.w	r3, r2, #8
 8007b50:	e853 3f00 	ldrex	r3, [r3]
 8007b54:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b58:	3208      	adds	r2, #8
 8007b5a:	e842 3100 	strex	r1, r3, [r2]
 8007b5e:	2900      	cmp	r1, #0
 8007b60:	d1f3      	bne.n	8007b4a <UART_WaitOnFlagUntilTimeout+0xa4>
				huart->gState = HAL_UART_STATE_READY;
 8007b62:	2320      	movs	r3, #32
 8007b64:	67eb      	str	r3, [r5, #124]	; 0x7c
				huart->RxState = HAL_UART_STATE_READY;
 8007b66:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
				__HAL_UNLOCK(huart);
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
				return HAL_TIMEOUT;
 8007b70:	2003      	movs	r0, #3
 8007b72:	e000      	b.n	8007b76 <UART_WaitOnFlagUntilTimeout+0xd0>
	return HAL_OK;
 8007b74:	2000      	movs	r0, #0
}
 8007b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007b7a <HAL_UART_Receive>:
		uint16_t Size, uint32_t Timeout) {
 8007b7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	461e      	mov	r6, r3
	if (huart->RxState == HAL_UART_STATE_READY) {
 8007b82:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8007b86:	2b20      	cmp	r3, #32
 8007b88:	d178      	bne.n	8007c7c <HAL_UART_Receive+0x102>
 8007b8a:	4604      	mov	r4, r0
 8007b8c:	460d      	mov	r5, r1
 8007b8e:	4690      	mov	r8, r2
		if ((pData == NULL) || (Size == 0U)) {
 8007b90:	2a00      	cmp	r2, #0
 8007b92:	bf18      	it	ne
 8007b94:	2900      	cmpne	r1, #0
 8007b96:	d101      	bne.n	8007b9c <HAL_UART_Receive+0x22>
			return HAL_ERROR;
 8007b98:	2001      	movs	r0, #1
 8007b9a:	e070      	b.n	8007c7e <HAL_UART_Receive+0x104>
		huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ba2:	2222      	movs	r2, #34	; 0x22
 8007ba4:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ba8:	6603      	str	r3, [r0, #96]	; 0x60
		tickstart = HAL_GetTick();
 8007baa:	f7fc fac5 	bl	8004138 <HAL_GetTick>
 8007bae:	4607      	mov	r7, r0
		huart->RxXferSize = Size;
 8007bb0:	f8a4 8058 	strh.w	r8, [r4, #88]	; 0x58
		huart->RxXferCount = Size;
 8007bb4:	f8a4 805a 	strh.w	r8, [r4, #90]	; 0x5a
		UART_MASK_COMPUTATION(huart);
 8007bb8:	68a3      	ldr	r3, [r4, #8]
 8007bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bbe:	d006      	beq.n	8007bce <HAL_UART_Receive+0x54>
 8007bc0:	b9a3      	cbnz	r3, 8007bec <HAL_UART_Receive+0x72>
 8007bc2:	6922      	ldr	r2, [r4, #16]
 8007bc4:	b972      	cbnz	r2, 8007be4 <HAL_UART_Receive+0x6a>
 8007bc6:	22ff      	movs	r2, #255	; 0xff
 8007bc8:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8007bcc:	e014      	b.n	8007bf8 <HAL_UART_Receive+0x7e>
 8007bce:	6922      	ldr	r2, [r4, #16]
 8007bd0:	b922      	cbnz	r2, 8007bdc <HAL_UART_Receive+0x62>
 8007bd2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007bd6:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8007bda:	e00d      	b.n	8007bf8 <HAL_UART_Receive+0x7e>
 8007bdc:	22ff      	movs	r2, #255	; 0xff
 8007bde:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8007be2:	e009      	b.n	8007bf8 <HAL_UART_Receive+0x7e>
 8007be4:	227f      	movs	r2, #127	; 0x7f
 8007be6:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8007bea:	e005      	b.n	8007bf8 <HAL_UART_Receive+0x7e>
 8007bec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007bf0:	d00a      	beq.n	8007c08 <HAL_UART_Receive+0x8e>
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
		uhMask = huart->Mask;
 8007bf8:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
		if ((huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007bfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c00:	d00c      	beq.n	8007c1c <HAL_UART_Receive+0xa2>
			pdata16bits = NULL;
 8007c02:	f04f 0900 	mov.w	r9, #0
 8007c06:	e01f      	b.n	8007c48 <HAL_UART_Receive+0xce>
		UART_MASK_COMPUTATION(huart);
 8007c08:	6922      	ldr	r2, [r4, #16]
 8007c0a:	b91a      	cbnz	r2, 8007c14 <HAL_UART_Receive+0x9a>
 8007c0c:	227f      	movs	r2, #127	; 0x7f
 8007c0e:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8007c12:	e7f1      	b.n	8007bf8 <HAL_UART_Receive+0x7e>
 8007c14:	223f      	movs	r2, #63	; 0x3f
 8007c16:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8007c1a:	e7ed      	b.n	8007bf8 <HAL_UART_Receive+0x7e>
				&& (huart->Init.Parity == UART_PARITY_NONE)) {
 8007c1c:	6923      	ldr	r3, [r4, #16]
 8007c1e:	b113      	cbz	r3, 8007c26 <HAL_UART_Receive+0xac>
			pdata16bits = NULL;
 8007c20:	f04f 0900 	mov.w	r9, #0
 8007c24:	e010      	b.n	8007c48 <HAL_UART_Receive+0xce>
			pdata16bits = (uint16_t*) pData;
 8007c26:	46a9      	mov	r9, r5
			pdata8bits = NULL;
 8007c28:	2500      	movs	r5, #0
 8007c2a:	e00d      	b.n	8007c48 <HAL_UART_Receive+0xce>
						(uint8_t) (huart->Instance->RDR & (uint8_t) uhMask);
 8007c2c:	6823      	ldr	r3, [r4, #0]
 8007c2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c30:	fa5f f388 	uxtb.w	r3, r8
 8007c34:	4013      	ands	r3, r2
				*pdata8bits =
 8007c36:	f805 3b01 	strb.w	r3, [r5], #1
			huart->RxXferCount--;
 8007c3a:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 8007c3e:	b292      	uxth	r2, r2
 8007c40:	3a01      	subs	r2, #1
 8007c42:	b292      	uxth	r2, r2
 8007c44:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
		while (huart->RxXferCount > 0U) {
 8007c48:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	b183      	cbz	r3, 8007c72 <HAL_UART_Receive+0xf8>
			if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET,
 8007c50:	9600      	str	r6, [sp, #0]
 8007c52:	463b      	mov	r3, r7
 8007c54:	2200      	movs	r2, #0
 8007c56:	2120      	movs	r1, #32
 8007c58:	4620      	mov	r0, r4
 8007c5a:	f7ff ff24 	bl	8007aa6 <UART_WaitOnFlagUntilTimeout>
 8007c5e:	b988      	cbnz	r0, 8007c84 <HAL_UART_Receive+0x10a>
			if (pdata8bits == NULL) {
 8007c60:	2d00      	cmp	r5, #0
 8007c62:	d1e3      	bne.n	8007c2c <HAL_UART_Receive+0xb2>
				*pdata16bits = (uint16_t) (huart->Instance->RDR & uhMask);
 8007c64:	6823      	ldr	r3, [r4, #0]
 8007c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c68:	ea08 0303 	and.w	r3, r8, r3
 8007c6c:	f829 3b02 	strh.w	r3, [r9], #2
				pdata16bits++;
 8007c70:	e7e3      	b.n	8007c3a <HAL_UART_Receive+0xc0>
		huart->RxState = HAL_UART_STATE_READY;
 8007c72:	2320      	movs	r3, #32
 8007c74:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		return HAL_OK;
 8007c78:	2000      	movs	r0, #0
 8007c7a:	e000      	b.n	8007c7e <HAL_UART_Receive+0x104>
		return HAL_BUSY;
 8007c7c:	2002      	movs	r0, #2
}
 8007c7e:	b003      	add	sp, #12
 8007c80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				return HAL_TIMEOUT;
 8007c84:	2003      	movs	r0, #3
 8007c86:	e7fa      	b.n	8007c7e <HAL_UART_Receive+0x104>

08007c88 <UART_CheckIdleState>:
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart) {
 8007c88:	b530      	push	{r4, r5, lr}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	4604      	mov	r4, r0
	huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	tickstart = HAL_GetTick();
 8007c94:	f7fc fa50 	bl	8004138 <HAL_GetTick>
 8007c98:	4605      	mov	r5, r0
	if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE) {
 8007c9a:	6822      	ldr	r2, [r4, #0]
 8007c9c:	6812      	ldr	r2, [r2, #0]
 8007c9e:	f012 0f08 	tst.w	r2, #8
 8007ca2:	d10f      	bne.n	8007cc4 <UART_CheckIdleState+0x3c>
	if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE) {
 8007ca4:	6823      	ldr	r3, [r4, #0]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f013 0f04 	tst.w	r3, #4
 8007cac:	d118      	bne.n	8007ce0 <UART_CheckIdleState+0x58>
	huart->gState = HAL_UART_STATE_READY;
 8007cae:	2320      	movs	r3, #32
 8007cb0:	67e3      	str	r3, [r4, #124]	; 0x7c
	huart->RxState = HAL_UART_STATE_READY;
 8007cb2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cb6:	2000      	movs	r0, #0
 8007cb8:	6620      	str	r0, [r4, #96]	; 0x60
	huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007cba:	6660      	str	r0, [r4, #100]	; 0x64
	__HAL_UNLOCK(huart);
 8007cbc:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
}
 8007cc0:	b003      	add	sp, #12
 8007cc2:	bd30      	pop	{r4, r5, pc}
		if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET,
 8007cc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007cc8:	9300      	str	r3, [sp, #0]
 8007cca:	4603      	mov	r3, r0
 8007ccc:	2200      	movs	r2, #0
 8007cce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007cd2:	4620      	mov	r0, r4
 8007cd4:	f7ff fee7 	bl	8007aa6 <UART_WaitOnFlagUntilTimeout>
 8007cd8:	2800      	cmp	r0, #0
 8007cda:	d0e3      	beq.n	8007ca4 <UART_CheckIdleState+0x1c>
			return HAL_TIMEOUT;
 8007cdc:	2003      	movs	r0, #3
 8007cde:	e7ef      	b.n	8007cc0 <UART_CheckIdleState+0x38>
		if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,
 8007ce0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ce4:	9300      	str	r3, [sp, #0]
 8007ce6:	462b      	mov	r3, r5
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007cee:	4620      	mov	r0, r4
 8007cf0:	f7ff fed9 	bl	8007aa6 <UART_WaitOnFlagUntilTimeout>
 8007cf4:	2800      	cmp	r0, #0
 8007cf6:	d0da      	beq.n	8007cae <UART_CheckIdleState+0x26>
			return HAL_TIMEOUT;
 8007cf8:	2003      	movs	r0, #3
 8007cfa:	e7e1      	b.n	8007cc0 <UART_CheckIdleState+0x38>

08007cfc <HAL_UART_Init>:
	if (huart == NULL) {
 8007cfc:	b368      	cbz	r0, 8007d5a <HAL_UART_Init+0x5e>
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart) {
 8007cfe:	b510      	push	{r4, lr}
 8007d00:	4604      	mov	r4, r0
	if (huart->gState == HAL_UART_STATE_RESET) {
 8007d02:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8007d04:	b303      	cbz	r3, 8007d48 <HAL_UART_Init+0x4c>
	huart->gState = HAL_UART_STATE_BUSY;
 8007d06:	2324      	movs	r3, #36	; 0x24
 8007d08:	67e3      	str	r3, [r4, #124]	; 0x7c
	__HAL_UART_DISABLE(huart);
 8007d0a:	6822      	ldr	r2, [r4, #0]
 8007d0c:	6813      	ldr	r3, [r2, #0]
 8007d0e:	f023 0301 	bic.w	r3, r3, #1
 8007d12:	6013      	str	r3, [r2, #0]
	if (UART_SetConfig(huart) == HAL_ERROR) {
 8007d14:	4620      	mov	r0, r4
 8007d16:	f7ff fcc9 	bl	80076ac <UART_SetConfig>
 8007d1a:	2801      	cmp	r0, #1
 8007d1c:	d013      	beq.n	8007d46 <HAL_UART_Init+0x4a>
	if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT) {
 8007d1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d20:	b9bb      	cbnz	r3, 8007d52 <HAL_UART_Init+0x56>
	CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d22:	6822      	ldr	r2, [r4, #0]
 8007d24:	6853      	ldr	r3, [r2, #4]
 8007d26:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8007d2a:	6053      	str	r3, [r2, #4]
	CLEAR_BIT(huart->Instance->CR3,
 8007d2c:	6822      	ldr	r2, [r4, #0]
 8007d2e:	6893      	ldr	r3, [r2, #8]
 8007d30:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8007d34:	6093      	str	r3, [r2, #8]
	__HAL_UART_ENABLE(huart);
 8007d36:	6822      	ldr	r2, [r4, #0]
 8007d38:	6813      	ldr	r3, [r2, #0]
 8007d3a:	f043 0301 	orr.w	r3, r3, #1
 8007d3e:	6013      	str	r3, [r2, #0]
	return (UART_CheckIdleState(huart));
 8007d40:	4620      	mov	r0, r4
 8007d42:	f7ff ffa1 	bl	8007c88 <UART_CheckIdleState>
}
 8007d46:	bd10      	pop	{r4, pc}
		huart->Lock = HAL_UNLOCKED;
 8007d48:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
		HAL_UART_MspInit(huart);
 8007d4c:	f7fc f90c 	bl	8003f68 <HAL_UART_MspInit>
 8007d50:	e7d9      	b.n	8007d06 <HAL_UART_Init+0xa>
		UART_AdvFeatureConfig(huart);
 8007d52:	4620      	mov	r0, r4
 8007d54:	f7ff fe42 	bl	80079dc <UART_AdvFeatureConfig>
 8007d58:	e7e3      	b.n	8007d22 <HAL_UART_Init+0x26>
		return HAL_ERROR;
 8007d5a:	2001      	movs	r0, #1
}
 8007d5c:	4770      	bx	lr
	...

08007d60 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007d60:	b410      	push	{r4}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8007d62:	680b      	ldr	r3, [r1, #0]
 8007d64:	b9cb      	cbnz	r3, 8007d9a <FMC_SDRAM_Init+0x3a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007d66:	6803      	ldr	r3, [r0, #0]
 8007d68:	4a19      	ldr	r2, [pc, #100]	; (8007dd0 <FMC_SDRAM_Init+0x70>)
 8007d6a:	401a      	ands	r2, r3
 8007d6c:	684b      	ldr	r3, [r1, #4]
 8007d6e:	688c      	ldr	r4, [r1, #8]
 8007d70:	4323      	orrs	r3, r4
 8007d72:	68cc      	ldr	r4, [r1, #12]
 8007d74:	4323      	orrs	r3, r4
 8007d76:	690c      	ldr	r4, [r1, #16]
 8007d78:	4323      	orrs	r3, r4
 8007d7a:	694c      	ldr	r4, [r1, #20]
 8007d7c:	4323      	orrs	r3, r4
 8007d7e:	698c      	ldr	r4, [r1, #24]
 8007d80:	4323      	orrs	r3, r4
 8007d82:	69cc      	ldr	r4, [r1, #28]
 8007d84:	4323      	orrs	r3, r4
 8007d86:	6a0c      	ldr	r4, [r1, #32]
 8007d88:	4323      	orrs	r3, r4
 8007d8a:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8007d8c:	430b      	orrs	r3, r1
 8007d8e:	431a      	orrs	r2, r3
 8007d90:	6002      	str	r2, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8007d92:	2000      	movs	r0, #0
 8007d94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d98:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007d9a:	6803      	ldr	r3, [r0, #0]
 8007d9c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007da0:	69ca      	ldr	r2, [r1, #28]
 8007da2:	6a0c      	ldr	r4, [r1, #32]
 8007da4:	4322      	orrs	r2, r4
 8007da6:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8007da8:	4322      	orrs	r2, r4
 8007daa:	4313      	orrs	r3, r2
 8007dac:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007dae:	6843      	ldr	r3, [r0, #4]
 8007db0:	4a07      	ldr	r2, [pc, #28]	; (8007dd0 <FMC_SDRAM_Init+0x70>)
 8007db2:	401a      	ands	r2, r3
 8007db4:	684b      	ldr	r3, [r1, #4]
 8007db6:	688c      	ldr	r4, [r1, #8]
 8007db8:	4323      	orrs	r3, r4
 8007dba:	68cc      	ldr	r4, [r1, #12]
 8007dbc:	4323      	orrs	r3, r4
 8007dbe:	690c      	ldr	r4, [r1, #16]
 8007dc0:	4323      	orrs	r3, r4
 8007dc2:	694c      	ldr	r4, [r1, #20]
 8007dc4:	4323      	orrs	r3, r4
 8007dc6:	6989      	ldr	r1, [r1, #24]
 8007dc8:	430b      	orrs	r3, r1
 8007dca:	431a      	orrs	r2, r3
 8007dcc:	6042      	str	r2, [r0, #4]
 8007dce:	e7e0      	b.n	8007d92 <FMC_SDRAM_Init+0x32>
 8007dd0:	ffff8000 	.word	0xffff8000

08007dd4 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007dd4:	b410      	push	{r4}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8007dd6:	bb3a      	cbnz	r2, 8007e28 <FMC_SDRAM_Timing_Init+0x54>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007dd8:	6882      	ldr	r2, [r0, #8]
 8007dda:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8007dde:	680b      	ldr	r3, [r1, #0]
 8007de0:	3b01      	subs	r3, #1
 8007de2:	684c      	ldr	r4, [r1, #4]
 8007de4:	f104 3cff 	add.w	ip, r4, #4294967295
 8007de8:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 8007dec:	688c      	ldr	r4, [r1, #8]
 8007dee:	f104 3cff 	add.w	ip, r4, #4294967295
 8007df2:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8007df6:	68cc      	ldr	r4, [r1, #12]
 8007df8:	f104 3cff 	add.w	ip, r4, #4294967295
 8007dfc:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
 8007e00:	690c      	ldr	r4, [r1, #16]
 8007e02:	f104 3cff 	add.w	ip, r4, #4294967295
 8007e06:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8007e0a:	694c      	ldr	r4, [r1, #20]
 8007e0c:	f104 3cff 	add.w	ip, r4, #4294967295
 8007e10:	ea43 530c 	orr.w	r3, r3, ip, lsl #20
 8007e14:	6989      	ldr	r1, [r1, #24]
 8007e16:	3901      	subs	r1, #1
 8007e18:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 8007e20:	2000      	movs	r0, #0
 8007e22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e26:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007e28:	6883      	ldr	r3, [r0, #8]
 8007e2a:	4a13      	ldr	r2, [pc, #76]	; (8007e78 <FMC_SDRAM_Timing_Init+0xa4>)
 8007e2c:	401a      	ands	r2, r3
 8007e2e:	68cb      	ldr	r3, [r1, #12]
 8007e30:	f103 3cff 	add.w	ip, r3, #4294967295
 8007e34:	694b      	ldr	r3, [r1, #20]
 8007e36:	3b01      	subs	r3, #1
 8007e38:	051b      	lsls	r3, r3, #20
 8007e3a:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
 8007e3e:	431a      	orrs	r2, r3
 8007e40:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007e42:	68c2      	ldr	r2, [r0, #12]
 8007e44:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8007e48:	680b      	ldr	r3, [r1, #0]
 8007e4a:	3b01      	subs	r3, #1
 8007e4c:	684c      	ldr	r4, [r1, #4]
 8007e4e:	f104 3cff 	add.w	ip, r4, #4294967295
 8007e52:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 8007e56:	688c      	ldr	r4, [r1, #8]
 8007e58:	f104 3cff 	add.w	ip, r4, #4294967295
 8007e5c:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8007e60:	690c      	ldr	r4, [r1, #16]
 8007e62:	f104 3cff 	add.w	ip, r4, #4294967295
 8007e66:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8007e6a:	6989      	ldr	r1, [r1, #24]
 8007e6c:	3901      	subs	r1, #1
 8007e6e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007e72:	4313      	orrs	r3, r2
 8007e74:	60c3      	str	r3, [r0, #12]
 8007e76:	e7d3      	b.n	8007e20 <FMC_SDRAM_Timing_Init+0x4c>
 8007e78:	ff0f0fff 	.word	0xff0f0fff

08007e7c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007e7c:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8007e7e:	6903      	ldr	r3, [r0, #16]
 8007e80:	4a09      	ldr	r2, [pc, #36]	; (8007ea8 <FMC_SDRAM_SendCommand+0x2c>)
 8007e82:	401a      	ands	r2, r3
 8007e84:	680b      	ldr	r3, [r1, #0]
 8007e86:	684c      	ldr	r4, [r1, #4]
 8007e88:	4323      	orrs	r3, r4
 8007e8a:	688c      	ldr	r4, [r1, #8]
 8007e8c:	f104 3cff 	add.w	ip, r4, #4294967295
 8007e90:	ea43 134c 	orr.w	r3, r3, ip, lsl #5
 8007e94:	68c9      	ldr	r1, [r1, #12]
 8007e96:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8007e9a:	431a      	orrs	r2, r3
 8007e9c:	6102      	str	r2, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 8007e9e:	2000      	movs	r0, #0
 8007ea0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ea4:	4770      	bx	lr
 8007ea6:	bf00      	nop
 8007ea8:	ffc00000 	.word	0xffc00000

08007eac <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8007eac:	6942      	ldr	r2, [r0, #20]
 8007eae:	4b03      	ldr	r3, [pc, #12]	; (8007ebc <FMC_SDRAM_ProgramRefreshRate+0x10>)
 8007eb0:	4013      	ands	r3, r2
 8007eb2:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8007eb6:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 8007eb8:	2000      	movs	r0, #0
 8007eba:	4770      	bx	lr
 8007ebc:	ffffc001 	.word	0xffffc001

08007ec0 <std>:
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	b510      	push	{r4, lr}
 8007ec4:	4604      	mov	r4, r0
 8007ec6:	e9c0 3300 	strd	r3, r3, [r0]
 8007eca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ece:	6083      	str	r3, [r0, #8]
 8007ed0:	8181      	strh	r1, [r0, #12]
 8007ed2:	6643      	str	r3, [r0, #100]	; 0x64
 8007ed4:	81c2      	strh	r2, [r0, #14]
 8007ed6:	6183      	str	r3, [r0, #24]
 8007ed8:	4619      	mov	r1, r3
 8007eda:	2208      	movs	r2, #8
 8007edc:	305c      	adds	r0, #92	; 0x5c
 8007ede:	f000 f9dc 	bl	800829a <memset>
 8007ee2:	4b0d      	ldr	r3, [pc, #52]	; (8007f18 <std+0x58>)
 8007ee4:	6263      	str	r3, [r4, #36]	; 0x24
 8007ee6:	4b0d      	ldr	r3, [pc, #52]	; (8007f1c <std+0x5c>)
 8007ee8:	62a3      	str	r3, [r4, #40]	; 0x28
 8007eea:	4b0d      	ldr	r3, [pc, #52]	; (8007f20 <std+0x60>)
 8007eec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007eee:	4b0d      	ldr	r3, [pc, #52]	; (8007f24 <std+0x64>)
 8007ef0:	6323      	str	r3, [r4, #48]	; 0x30
 8007ef2:	4b0d      	ldr	r3, [pc, #52]	; (8007f28 <std+0x68>)
 8007ef4:	6224      	str	r4, [r4, #32]
 8007ef6:	429c      	cmp	r4, r3
 8007ef8:	d006      	beq.n	8007f08 <std+0x48>
 8007efa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007efe:	4294      	cmp	r4, r2
 8007f00:	d002      	beq.n	8007f08 <std+0x48>
 8007f02:	33d0      	adds	r3, #208	; 0xd0
 8007f04:	429c      	cmp	r4, r3
 8007f06:	d105      	bne.n	8007f14 <std+0x54>
 8007f08:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f10:	f000 ba36 	b.w	8008380 <__retarget_lock_init_recursive>
 8007f14:	bd10      	pop	{r4, pc}
 8007f16:	bf00      	nop
 8007f18:	08008215 	.word	0x08008215
 8007f1c:	08008237 	.word	0x08008237
 8007f20:	0800826f 	.word	0x0800826f
 8007f24:	08008293 	.word	0x08008293
 8007f28:	200051c4 	.word	0x200051c4

08007f2c <stdio_exit_handler>:
 8007f2c:	4a02      	ldr	r2, [pc, #8]	; (8007f38 <stdio_exit_handler+0xc>)
 8007f2e:	4903      	ldr	r1, [pc, #12]	; (8007f3c <stdio_exit_handler+0x10>)
 8007f30:	4803      	ldr	r0, [pc, #12]	; (8007f40 <stdio_exit_handler+0x14>)
 8007f32:	f000 b869 	b.w	8008008 <_fwalk_sglue>
 8007f36:	bf00      	nop
 8007f38:	200000b4 	.word	0x200000b4
 8007f3c:	08008f09 	.word	0x08008f09
 8007f40:	200000c0 	.word	0x200000c0

08007f44 <cleanup_stdio>:
 8007f44:	6841      	ldr	r1, [r0, #4]
 8007f46:	4b0c      	ldr	r3, [pc, #48]	; (8007f78 <cleanup_stdio+0x34>)
 8007f48:	4299      	cmp	r1, r3
 8007f4a:	b510      	push	{r4, lr}
 8007f4c:	4604      	mov	r4, r0
 8007f4e:	d001      	beq.n	8007f54 <cleanup_stdio+0x10>
 8007f50:	f000 ffda 	bl	8008f08 <_fflush_r>
 8007f54:	68a1      	ldr	r1, [r4, #8]
 8007f56:	4b09      	ldr	r3, [pc, #36]	; (8007f7c <cleanup_stdio+0x38>)
 8007f58:	4299      	cmp	r1, r3
 8007f5a:	d002      	beq.n	8007f62 <cleanup_stdio+0x1e>
 8007f5c:	4620      	mov	r0, r4
 8007f5e:	f000 ffd3 	bl	8008f08 <_fflush_r>
 8007f62:	68e1      	ldr	r1, [r4, #12]
 8007f64:	4b06      	ldr	r3, [pc, #24]	; (8007f80 <cleanup_stdio+0x3c>)
 8007f66:	4299      	cmp	r1, r3
 8007f68:	d004      	beq.n	8007f74 <cleanup_stdio+0x30>
 8007f6a:	4620      	mov	r0, r4
 8007f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f70:	f000 bfca 	b.w	8008f08 <_fflush_r>
 8007f74:	bd10      	pop	{r4, pc}
 8007f76:	bf00      	nop
 8007f78:	200051c4 	.word	0x200051c4
 8007f7c:	2000522c 	.word	0x2000522c
 8007f80:	20005294 	.word	0x20005294

08007f84 <global_stdio_init.part.0>:
 8007f84:	b510      	push	{r4, lr}
 8007f86:	4b0b      	ldr	r3, [pc, #44]	; (8007fb4 <global_stdio_init.part.0+0x30>)
 8007f88:	4c0b      	ldr	r4, [pc, #44]	; (8007fb8 <global_stdio_init.part.0+0x34>)
 8007f8a:	4a0c      	ldr	r2, [pc, #48]	; (8007fbc <global_stdio_init.part.0+0x38>)
 8007f8c:	601a      	str	r2, [r3, #0]
 8007f8e:	4620      	mov	r0, r4
 8007f90:	2200      	movs	r2, #0
 8007f92:	2104      	movs	r1, #4
 8007f94:	f7ff ff94 	bl	8007ec0 <std>
 8007f98:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	2109      	movs	r1, #9
 8007fa0:	f7ff ff8e 	bl	8007ec0 <std>
 8007fa4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007fa8:	2202      	movs	r2, #2
 8007faa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fae:	2112      	movs	r1, #18
 8007fb0:	f7ff bf86 	b.w	8007ec0 <std>
 8007fb4:	200052fc 	.word	0x200052fc
 8007fb8:	200051c4 	.word	0x200051c4
 8007fbc:	08007f2d 	.word	0x08007f2d

08007fc0 <__sfp_lock_acquire>:
 8007fc0:	4801      	ldr	r0, [pc, #4]	; (8007fc8 <__sfp_lock_acquire+0x8>)
 8007fc2:	f000 b9de 	b.w	8008382 <__retarget_lock_acquire_recursive>
 8007fc6:	bf00      	nop
 8007fc8:	20005305 	.word	0x20005305

08007fcc <__sfp_lock_release>:
 8007fcc:	4801      	ldr	r0, [pc, #4]	; (8007fd4 <__sfp_lock_release+0x8>)
 8007fce:	f000 b9d9 	b.w	8008384 <__retarget_lock_release_recursive>
 8007fd2:	bf00      	nop
 8007fd4:	20005305 	.word	0x20005305

08007fd8 <__sinit>:
 8007fd8:	b510      	push	{r4, lr}
 8007fda:	4604      	mov	r4, r0
 8007fdc:	f7ff fff0 	bl	8007fc0 <__sfp_lock_acquire>
 8007fe0:	6a23      	ldr	r3, [r4, #32]
 8007fe2:	b11b      	cbz	r3, 8007fec <__sinit+0x14>
 8007fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fe8:	f7ff bff0 	b.w	8007fcc <__sfp_lock_release>
 8007fec:	4b04      	ldr	r3, [pc, #16]	; (8008000 <__sinit+0x28>)
 8007fee:	6223      	str	r3, [r4, #32]
 8007ff0:	4b04      	ldr	r3, [pc, #16]	; (8008004 <__sinit+0x2c>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d1f5      	bne.n	8007fe4 <__sinit+0xc>
 8007ff8:	f7ff ffc4 	bl	8007f84 <global_stdio_init.part.0>
 8007ffc:	e7f2      	b.n	8007fe4 <__sinit+0xc>
 8007ffe:	bf00      	nop
 8008000:	08007f45 	.word	0x08007f45
 8008004:	200052fc 	.word	0x200052fc

08008008 <_fwalk_sglue>:
 8008008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800800c:	4607      	mov	r7, r0
 800800e:	4688      	mov	r8, r1
 8008010:	4614      	mov	r4, r2
 8008012:	2600      	movs	r6, #0
 8008014:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008018:	f1b9 0901 	subs.w	r9, r9, #1
 800801c:	d505      	bpl.n	800802a <_fwalk_sglue+0x22>
 800801e:	6824      	ldr	r4, [r4, #0]
 8008020:	2c00      	cmp	r4, #0
 8008022:	d1f7      	bne.n	8008014 <_fwalk_sglue+0xc>
 8008024:	4630      	mov	r0, r6
 8008026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800802a:	89ab      	ldrh	r3, [r5, #12]
 800802c:	2b01      	cmp	r3, #1
 800802e:	d907      	bls.n	8008040 <_fwalk_sglue+0x38>
 8008030:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008034:	3301      	adds	r3, #1
 8008036:	d003      	beq.n	8008040 <_fwalk_sglue+0x38>
 8008038:	4629      	mov	r1, r5
 800803a:	4638      	mov	r0, r7
 800803c:	47c0      	blx	r8
 800803e:	4306      	orrs	r6, r0
 8008040:	3568      	adds	r5, #104	; 0x68
 8008042:	e7e9      	b.n	8008018 <_fwalk_sglue+0x10>

08008044 <iprintf>:
 8008044:	b40f      	push	{r0, r1, r2, r3}
 8008046:	b507      	push	{r0, r1, r2, lr}
 8008048:	4906      	ldr	r1, [pc, #24]	; (8008064 <iprintf+0x20>)
 800804a:	ab04      	add	r3, sp, #16
 800804c:	6808      	ldr	r0, [r1, #0]
 800804e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008052:	6881      	ldr	r1, [r0, #8]
 8008054:	9301      	str	r3, [sp, #4]
 8008056:	f000 fc27 	bl	80088a8 <_vfiprintf_r>
 800805a:	b003      	add	sp, #12
 800805c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008060:	b004      	add	sp, #16
 8008062:	4770      	bx	lr
 8008064:	2000010c 	.word	0x2000010c

08008068 <setbuf>:
 8008068:	fab1 f281 	clz	r2, r1
 800806c:	0952      	lsrs	r2, r2, #5
 800806e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008072:	0052      	lsls	r2, r2, #1
 8008074:	f000 b800 	b.w	8008078 <setvbuf>

08008078 <setvbuf>:
 8008078:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800807c:	461d      	mov	r5, r3
 800807e:	4b54      	ldr	r3, [pc, #336]	; (80081d0 <setvbuf+0x158>)
 8008080:	681f      	ldr	r7, [r3, #0]
 8008082:	4604      	mov	r4, r0
 8008084:	460e      	mov	r6, r1
 8008086:	4690      	mov	r8, r2
 8008088:	b127      	cbz	r7, 8008094 <setvbuf+0x1c>
 800808a:	6a3b      	ldr	r3, [r7, #32]
 800808c:	b913      	cbnz	r3, 8008094 <setvbuf+0x1c>
 800808e:	4638      	mov	r0, r7
 8008090:	f7ff ffa2 	bl	8007fd8 <__sinit>
 8008094:	f1b8 0f02 	cmp.w	r8, #2
 8008098:	d006      	beq.n	80080a8 <setvbuf+0x30>
 800809a:	f1b8 0f01 	cmp.w	r8, #1
 800809e:	f200 8094 	bhi.w	80081ca <setvbuf+0x152>
 80080a2:	2d00      	cmp	r5, #0
 80080a4:	f2c0 8091 	blt.w	80081ca <setvbuf+0x152>
 80080a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80080aa:	07da      	lsls	r2, r3, #31
 80080ac:	d405      	bmi.n	80080ba <setvbuf+0x42>
 80080ae:	89a3      	ldrh	r3, [r4, #12]
 80080b0:	059b      	lsls	r3, r3, #22
 80080b2:	d402      	bmi.n	80080ba <setvbuf+0x42>
 80080b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080b6:	f000 f964 	bl	8008382 <__retarget_lock_acquire_recursive>
 80080ba:	4621      	mov	r1, r4
 80080bc:	4638      	mov	r0, r7
 80080be:	f000 ff23 	bl	8008f08 <_fflush_r>
 80080c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080c4:	b141      	cbz	r1, 80080d8 <setvbuf+0x60>
 80080c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080ca:	4299      	cmp	r1, r3
 80080cc:	d002      	beq.n	80080d4 <setvbuf+0x5c>
 80080ce:	4638      	mov	r0, r7
 80080d0:	f000 f968 	bl	80083a4 <_free_r>
 80080d4:	2300      	movs	r3, #0
 80080d6:	6363      	str	r3, [r4, #52]	; 0x34
 80080d8:	2300      	movs	r3, #0
 80080da:	61a3      	str	r3, [r4, #24]
 80080dc:	6063      	str	r3, [r4, #4]
 80080de:	89a3      	ldrh	r3, [r4, #12]
 80080e0:	0618      	lsls	r0, r3, #24
 80080e2:	d503      	bpl.n	80080ec <setvbuf+0x74>
 80080e4:	6921      	ldr	r1, [r4, #16]
 80080e6:	4638      	mov	r0, r7
 80080e8:	f000 f95c 	bl	80083a4 <_free_r>
 80080ec:	89a3      	ldrh	r3, [r4, #12]
 80080ee:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80080f2:	f023 0303 	bic.w	r3, r3, #3
 80080f6:	f1b8 0f02 	cmp.w	r8, #2
 80080fa:	81a3      	strh	r3, [r4, #12]
 80080fc:	d05f      	beq.n	80081be <setvbuf+0x146>
 80080fe:	ab01      	add	r3, sp, #4
 8008100:	466a      	mov	r2, sp
 8008102:	4621      	mov	r1, r4
 8008104:	4638      	mov	r0, r7
 8008106:	f000 ff27 	bl	8008f58 <__swhatbuf_r>
 800810a:	89a3      	ldrh	r3, [r4, #12]
 800810c:	4318      	orrs	r0, r3
 800810e:	81a0      	strh	r0, [r4, #12]
 8008110:	bb2d      	cbnz	r5, 800815e <setvbuf+0xe6>
 8008112:	9d00      	ldr	r5, [sp, #0]
 8008114:	4628      	mov	r0, r5
 8008116:	f000 f991 	bl	800843c <malloc>
 800811a:	4606      	mov	r6, r0
 800811c:	2800      	cmp	r0, #0
 800811e:	d150      	bne.n	80081c2 <setvbuf+0x14a>
 8008120:	f8dd 9000 	ldr.w	r9, [sp]
 8008124:	45a9      	cmp	r9, r5
 8008126:	d13e      	bne.n	80081a6 <setvbuf+0x12e>
 8008128:	f04f 35ff 	mov.w	r5, #4294967295
 800812c:	2200      	movs	r2, #0
 800812e:	60a2      	str	r2, [r4, #8]
 8008130:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8008134:	6022      	str	r2, [r4, #0]
 8008136:	6122      	str	r2, [r4, #16]
 8008138:	2201      	movs	r2, #1
 800813a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800813e:	6162      	str	r2, [r4, #20]
 8008140:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008142:	f043 0302 	orr.w	r3, r3, #2
 8008146:	07d1      	lsls	r1, r2, #31
 8008148:	81a3      	strh	r3, [r4, #12]
 800814a:	d404      	bmi.n	8008156 <setvbuf+0xde>
 800814c:	059b      	lsls	r3, r3, #22
 800814e:	d402      	bmi.n	8008156 <setvbuf+0xde>
 8008150:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008152:	f000 f917 	bl	8008384 <__retarget_lock_release_recursive>
 8008156:	4628      	mov	r0, r5
 8008158:	b003      	add	sp, #12
 800815a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800815e:	2e00      	cmp	r6, #0
 8008160:	d0d8      	beq.n	8008114 <setvbuf+0x9c>
 8008162:	6a3b      	ldr	r3, [r7, #32]
 8008164:	b913      	cbnz	r3, 800816c <setvbuf+0xf4>
 8008166:	4638      	mov	r0, r7
 8008168:	f7ff ff36 	bl	8007fd8 <__sinit>
 800816c:	f1b8 0f01 	cmp.w	r8, #1
 8008170:	bf08      	it	eq
 8008172:	89a3      	ldrheq	r3, [r4, #12]
 8008174:	6026      	str	r6, [r4, #0]
 8008176:	bf04      	itt	eq
 8008178:	f043 0301 	orreq.w	r3, r3, #1
 800817c:	81a3      	strheq	r3, [r4, #12]
 800817e:	89a3      	ldrh	r3, [r4, #12]
 8008180:	f013 0208 	ands.w	r2, r3, #8
 8008184:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8008188:	d01d      	beq.n	80081c6 <setvbuf+0x14e>
 800818a:	07da      	lsls	r2, r3, #31
 800818c:	bf41      	itttt	mi
 800818e:	2200      	movmi	r2, #0
 8008190:	426d      	negmi	r5, r5
 8008192:	60a2      	strmi	r2, [r4, #8]
 8008194:	61a5      	strmi	r5, [r4, #24]
 8008196:	bf58      	it	pl
 8008198:	60a5      	strpl	r5, [r4, #8]
 800819a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800819c:	f015 0501 	ands.w	r5, r5, #1
 80081a0:	d0d4      	beq.n	800814c <setvbuf+0xd4>
 80081a2:	2500      	movs	r5, #0
 80081a4:	e7d7      	b.n	8008156 <setvbuf+0xde>
 80081a6:	4648      	mov	r0, r9
 80081a8:	f000 f948 	bl	800843c <malloc>
 80081ac:	4606      	mov	r6, r0
 80081ae:	2800      	cmp	r0, #0
 80081b0:	d0ba      	beq.n	8008128 <setvbuf+0xb0>
 80081b2:	89a3      	ldrh	r3, [r4, #12]
 80081b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081b8:	81a3      	strh	r3, [r4, #12]
 80081ba:	464d      	mov	r5, r9
 80081bc:	e7d1      	b.n	8008162 <setvbuf+0xea>
 80081be:	2500      	movs	r5, #0
 80081c0:	e7b4      	b.n	800812c <setvbuf+0xb4>
 80081c2:	46a9      	mov	r9, r5
 80081c4:	e7f5      	b.n	80081b2 <setvbuf+0x13a>
 80081c6:	60a2      	str	r2, [r4, #8]
 80081c8:	e7e7      	b.n	800819a <setvbuf+0x122>
 80081ca:	f04f 35ff 	mov.w	r5, #4294967295
 80081ce:	e7c2      	b.n	8008156 <setvbuf+0xde>
 80081d0:	2000010c 	.word	0x2000010c

080081d4 <siprintf>:
 80081d4:	b40e      	push	{r1, r2, r3}
 80081d6:	b500      	push	{lr}
 80081d8:	b09c      	sub	sp, #112	; 0x70
 80081da:	ab1d      	add	r3, sp, #116	; 0x74
 80081dc:	9002      	str	r0, [sp, #8]
 80081de:	9006      	str	r0, [sp, #24]
 80081e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80081e4:	4809      	ldr	r0, [pc, #36]	; (800820c <siprintf+0x38>)
 80081e6:	9107      	str	r1, [sp, #28]
 80081e8:	9104      	str	r1, [sp, #16]
 80081ea:	4909      	ldr	r1, [pc, #36]	; (8008210 <siprintf+0x3c>)
 80081ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80081f0:	9105      	str	r1, [sp, #20]
 80081f2:	6800      	ldr	r0, [r0, #0]
 80081f4:	9301      	str	r3, [sp, #4]
 80081f6:	a902      	add	r1, sp, #8
 80081f8:	f000 fa2e 	bl	8008658 <_svfiprintf_r>
 80081fc:	9b02      	ldr	r3, [sp, #8]
 80081fe:	2200      	movs	r2, #0
 8008200:	701a      	strb	r2, [r3, #0]
 8008202:	b01c      	add	sp, #112	; 0x70
 8008204:	f85d eb04 	ldr.w	lr, [sp], #4
 8008208:	b003      	add	sp, #12
 800820a:	4770      	bx	lr
 800820c:	2000010c 	.word	0x2000010c
 8008210:	ffff0208 	.word	0xffff0208

08008214 <__sread>:
 8008214:	b510      	push	{r4, lr}
 8008216:	460c      	mov	r4, r1
 8008218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800821c:	f000 f868 	bl	80082f0 <_read_r>
 8008220:	2800      	cmp	r0, #0
 8008222:	bfab      	itete	ge
 8008224:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008226:	89a3      	ldrhlt	r3, [r4, #12]
 8008228:	181b      	addge	r3, r3, r0
 800822a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800822e:	bfac      	ite	ge
 8008230:	6563      	strge	r3, [r4, #84]	; 0x54
 8008232:	81a3      	strhlt	r3, [r4, #12]
 8008234:	bd10      	pop	{r4, pc}

08008236 <__swrite>:
 8008236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800823a:	461f      	mov	r7, r3
 800823c:	898b      	ldrh	r3, [r1, #12]
 800823e:	05db      	lsls	r3, r3, #23
 8008240:	4605      	mov	r5, r0
 8008242:	460c      	mov	r4, r1
 8008244:	4616      	mov	r6, r2
 8008246:	d505      	bpl.n	8008254 <__swrite+0x1e>
 8008248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800824c:	2302      	movs	r3, #2
 800824e:	2200      	movs	r2, #0
 8008250:	f000 f83c 	bl	80082cc <_lseek_r>
 8008254:	89a3      	ldrh	r3, [r4, #12]
 8008256:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800825a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800825e:	81a3      	strh	r3, [r4, #12]
 8008260:	4632      	mov	r2, r6
 8008262:	463b      	mov	r3, r7
 8008264:	4628      	mov	r0, r5
 8008266:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800826a:	f000 b853 	b.w	8008314 <_write_r>

0800826e <__sseek>:
 800826e:	b510      	push	{r4, lr}
 8008270:	460c      	mov	r4, r1
 8008272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008276:	f000 f829 	bl	80082cc <_lseek_r>
 800827a:	1c43      	adds	r3, r0, #1
 800827c:	89a3      	ldrh	r3, [r4, #12]
 800827e:	bf15      	itete	ne
 8008280:	6560      	strne	r0, [r4, #84]	; 0x54
 8008282:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008286:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800828a:	81a3      	strheq	r3, [r4, #12]
 800828c:	bf18      	it	ne
 800828e:	81a3      	strhne	r3, [r4, #12]
 8008290:	bd10      	pop	{r4, pc}

08008292 <__sclose>:
 8008292:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008296:	f000 b809 	b.w	80082ac <_close_r>

0800829a <memset>:
 800829a:	4402      	add	r2, r0
 800829c:	4603      	mov	r3, r0
 800829e:	4293      	cmp	r3, r2
 80082a0:	d100      	bne.n	80082a4 <memset+0xa>
 80082a2:	4770      	bx	lr
 80082a4:	f803 1b01 	strb.w	r1, [r3], #1
 80082a8:	e7f9      	b.n	800829e <memset+0x4>
	...

080082ac <_close_r>:
 80082ac:	b538      	push	{r3, r4, r5, lr}
 80082ae:	4d06      	ldr	r5, [pc, #24]	; (80082c8 <_close_r+0x1c>)
 80082b0:	2300      	movs	r3, #0
 80082b2:	4604      	mov	r4, r0
 80082b4:	4608      	mov	r0, r1
 80082b6:	602b      	str	r3, [r5, #0]
 80082b8:	f001 f9be 	bl	8009638 <_close>
 80082bc:	1c43      	adds	r3, r0, #1
 80082be:	d102      	bne.n	80082c6 <_close_r+0x1a>
 80082c0:	682b      	ldr	r3, [r5, #0]
 80082c2:	b103      	cbz	r3, 80082c6 <_close_r+0x1a>
 80082c4:	6023      	str	r3, [r4, #0]
 80082c6:	bd38      	pop	{r3, r4, r5, pc}
 80082c8:	20005300 	.word	0x20005300

080082cc <_lseek_r>:
 80082cc:	b538      	push	{r3, r4, r5, lr}
 80082ce:	4d07      	ldr	r5, [pc, #28]	; (80082ec <_lseek_r+0x20>)
 80082d0:	4604      	mov	r4, r0
 80082d2:	4608      	mov	r0, r1
 80082d4:	4611      	mov	r1, r2
 80082d6:	2200      	movs	r2, #0
 80082d8:	602a      	str	r2, [r5, #0]
 80082da:	461a      	mov	r2, r3
 80082dc:	f7fb fedc 	bl	8004098 <_lseek>
 80082e0:	1c43      	adds	r3, r0, #1
 80082e2:	d102      	bne.n	80082ea <_lseek_r+0x1e>
 80082e4:	682b      	ldr	r3, [r5, #0]
 80082e6:	b103      	cbz	r3, 80082ea <_lseek_r+0x1e>
 80082e8:	6023      	str	r3, [r4, #0]
 80082ea:	bd38      	pop	{r3, r4, r5, pc}
 80082ec:	20005300 	.word	0x20005300

080082f0 <_read_r>:
 80082f0:	b538      	push	{r3, r4, r5, lr}
 80082f2:	4d07      	ldr	r5, [pc, #28]	; (8008310 <_read_r+0x20>)
 80082f4:	4604      	mov	r4, r0
 80082f6:	4608      	mov	r0, r1
 80082f8:	4611      	mov	r1, r2
 80082fa:	2200      	movs	r2, #0
 80082fc:	602a      	str	r2, [r5, #0]
 80082fe:	461a      	mov	r2, r3
 8008300:	f7fb febc 	bl	800407c <_read>
 8008304:	1c43      	adds	r3, r0, #1
 8008306:	d102      	bne.n	800830e <_read_r+0x1e>
 8008308:	682b      	ldr	r3, [r5, #0]
 800830a:	b103      	cbz	r3, 800830e <_read_r+0x1e>
 800830c:	6023      	str	r3, [r4, #0]
 800830e:	bd38      	pop	{r3, r4, r5, pc}
 8008310:	20005300 	.word	0x20005300

08008314 <_write_r>:
 8008314:	b538      	push	{r3, r4, r5, lr}
 8008316:	4d07      	ldr	r5, [pc, #28]	; (8008334 <_write_r+0x20>)
 8008318:	4604      	mov	r4, r0
 800831a:	4608      	mov	r0, r1
 800831c:	4611      	mov	r1, r2
 800831e:	2200      	movs	r2, #0
 8008320:	602a      	str	r2, [r5, #0]
 8008322:	461a      	mov	r2, r3
 8008324:	f7fb fea0 	bl	8004068 <_write>
 8008328:	1c43      	adds	r3, r0, #1
 800832a:	d102      	bne.n	8008332 <_write_r+0x1e>
 800832c:	682b      	ldr	r3, [r5, #0]
 800832e:	b103      	cbz	r3, 8008332 <_write_r+0x1e>
 8008330:	6023      	str	r3, [r4, #0]
 8008332:	bd38      	pop	{r3, r4, r5, pc}
 8008334:	20005300 	.word	0x20005300

08008338 <__libc_init_array>:
 8008338:	b570      	push	{r4, r5, r6, lr}
 800833a:	4d0d      	ldr	r5, [pc, #52]	; (8008370 <__libc_init_array+0x38>)
 800833c:	4c0d      	ldr	r4, [pc, #52]	; (8008374 <__libc_init_array+0x3c>)
 800833e:	1b64      	subs	r4, r4, r5
 8008340:	10a4      	asrs	r4, r4, #2
 8008342:	2600      	movs	r6, #0
 8008344:	42a6      	cmp	r6, r4
 8008346:	d109      	bne.n	800835c <__libc_init_array+0x24>
 8008348:	4d0b      	ldr	r5, [pc, #44]	; (8008378 <__libc_init_array+0x40>)
 800834a:	4c0c      	ldr	r4, [pc, #48]	; (800837c <__libc_init_array+0x44>)
 800834c:	f001 f98a 	bl	8009664 <_init>
 8008350:	1b64      	subs	r4, r4, r5
 8008352:	10a4      	asrs	r4, r4, #2
 8008354:	2600      	movs	r6, #0
 8008356:	42a6      	cmp	r6, r4
 8008358:	d105      	bne.n	8008366 <__libc_init_array+0x2e>
 800835a:	bd70      	pop	{r4, r5, r6, pc}
 800835c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008360:	4798      	blx	r3
 8008362:	3601      	adds	r6, #1
 8008364:	e7ee      	b.n	8008344 <__libc_init_array+0xc>
 8008366:	f855 3b04 	ldr.w	r3, [r5], #4
 800836a:	4798      	blx	r3
 800836c:	3601      	adds	r6, #1
 800836e:	e7f2      	b.n	8008356 <__libc_init_array+0x1e>
 8008370:	0800b3f8 	.word	0x0800b3f8
 8008374:	0800b3f8 	.word	0x0800b3f8
 8008378:	0800b3f8 	.word	0x0800b3f8
 800837c:	0800b3fc 	.word	0x0800b3fc

08008380 <__retarget_lock_init_recursive>:
 8008380:	4770      	bx	lr

08008382 <__retarget_lock_acquire_recursive>:
 8008382:	4770      	bx	lr

08008384 <__retarget_lock_release_recursive>:
 8008384:	4770      	bx	lr

08008386 <memcpy>:
 8008386:	440a      	add	r2, r1
 8008388:	4291      	cmp	r1, r2
 800838a:	f100 33ff 	add.w	r3, r0, #4294967295
 800838e:	d100      	bne.n	8008392 <memcpy+0xc>
 8008390:	4770      	bx	lr
 8008392:	b510      	push	{r4, lr}
 8008394:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008398:	f803 4f01 	strb.w	r4, [r3, #1]!
 800839c:	4291      	cmp	r1, r2
 800839e:	d1f9      	bne.n	8008394 <memcpy+0xe>
 80083a0:	bd10      	pop	{r4, pc}
	...

080083a4 <_free_r>:
 80083a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80083a6:	2900      	cmp	r1, #0
 80083a8:	d044      	beq.n	8008434 <_free_r+0x90>
 80083aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083ae:	9001      	str	r0, [sp, #4]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	f1a1 0404 	sub.w	r4, r1, #4
 80083b6:	bfb8      	it	lt
 80083b8:	18e4      	addlt	r4, r4, r3
 80083ba:	f000 f8e7 	bl	800858c <__malloc_lock>
 80083be:	4a1e      	ldr	r2, [pc, #120]	; (8008438 <_free_r+0x94>)
 80083c0:	9801      	ldr	r0, [sp, #4]
 80083c2:	6813      	ldr	r3, [r2, #0]
 80083c4:	b933      	cbnz	r3, 80083d4 <_free_r+0x30>
 80083c6:	6063      	str	r3, [r4, #4]
 80083c8:	6014      	str	r4, [r2, #0]
 80083ca:	b003      	add	sp, #12
 80083cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80083d0:	f000 b8e2 	b.w	8008598 <__malloc_unlock>
 80083d4:	42a3      	cmp	r3, r4
 80083d6:	d908      	bls.n	80083ea <_free_r+0x46>
 80083d8:	6825      	ldr	r5, [r4, #0]
 80083da:	1961      	adds	r1, r4, r5
 80083dc:	428b      	cmp	r3, r1
 80083de:	bf01      	itttt	eq
 80083e0:	6819      	ldreq	r1, [r3, #0]
 80083e2:	685b      	ldreq	r3, [r3, #4]
 80083e4:	1949      	addeq	r1, r1, r5
 80083e6:	6021      	streq	r1, [r4, #0]
 80083e8:	e7ed      	b.n	80083c6 <_free_r+0x22>
 80083ea:	461a      	mov	r2, r3
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	b10b      	cbz	r3, 80083f4 <_free_r+0x50>
 80083f0:	42a3      	cmp	r3, r4
 80083f2:	d9fa      	bls.n	80083ea <_free_r+0x46>
 80083f4:	6811      	ldr	r1, [r2, #0]
 80083f6:	1855      	adds	r5, r2, r1
 80083f8:	42a5      	cmp	r5, r4
 80083fa:	d10b      	bne.n	8008414 <_free_r+0x70>
 80083fc:	6824      	ldr	r4, [r4, #0]
 80083fe:	4421      	add	r1, r4
 8008400:	1854      	adds	r4, r2, r1
 8008402:	42a3      	cmp	r3, r4
 8008404:	6011      	str	r1, [r2, #0]
 8008406:	d1e0      	bne.n	80083ca <_free_r+0x26>
 8008408:	681c      	ldr	r4, [r3, #0]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	6053      	str	r3, [r2, #4]
 800840e:	440c      	add	r4, r1
 8008410:	6014      	str	r4, [r2, #0]
 8008412:	e7da      	b.n	80083ca <_free_r+0x26>
 8008414:	d902      	bls.n	800841c <_free_r+0x78>
 8008416:	230c      	movs	r3, #12
 8008418:	6003      	str	r3, [r0, #0]
 800841a:	e7d6      	b.n	80083ca <_free_r+0x26>
 800841c:	6825      	ldr	r5, [r4, #0]
 800841e:	1961      	adds	r1, r4, r5
 8008420:	428b      	cmp	r3, r1
 8008422:	bf04      	itt	eq
 8008424:	6819      	ldreq	r1, [r3, #0]
 8008426:	685b      	ldreq	r3, [r3, #4]
 8008428:	6063      	str	r3, [r4, #4]
 800842a:	bf04      	itt	eq
 800842c:	1949      	addeq	r1, r1, r5
 800842e:	6021      	streq	r1, [r4, #0]
 8008430:	6054      	str	r4, [r2, #4]
 8008432:	e7ca      	b.n	80083ca <_free_r+0x26>
 8008434:	b003      	add	sp, #12
 8008436:	bd30      	pop	{r4, r5, pc}
 8008438:	20005308 	.word	0x20005308

0800843c <malloc>:
 800843c:	4b02      	ldr	r3, [pc, #8]	; (8008448 <malloc+0xc>)
 800843e:	4601      	mov	r1, r0
 8008440:	6818      	ldr	r0, [r3, #0]
 8008442:	f000 b823 	b.w	800848c <_malloc_r>
 8008446:	bf00      	nop
 8008448:	2000010c 	.word	0x2000010c

0800844c <sbrk_aligned>:
 800844c:	b570      	push	{r4, r5, r6, lr}
 800844e:	4e0e      	ldr	r6, [pc, #56]	; (8008488 <sbrk_aligned+0x3c>)
 8008450:	460c      	mov	r4, r1
 8008452:	6831      	ldr	r1, [r6, #0]
 8008454:	4605      	mov	r5, r0
 8008456:	b911      	cbnz	r1, 800845e <sbrk_aligned+0x12>
 8008458:	f000 feb2 	bl	80091c0 <_sbrk_r>
 800845c:	6030      	str	r0, [r6, #0]
 800845e:	4621      	mov	r1, r4
 8008460:	4628      	mov	r0, r5
 8008462:	f000 fead 	bl	80091c0 <_sbrk_r>
 8008466:	1c43      	adds	r3, r0, #1
 8008468:	d00a      	beq.n	8008480 <sbrk_aligned+0x34>
 800846a:	1cc4      	adds	r4, r0, #3
 800846c:	f024 0403 	bic.w	r4, r4, #3
 8008470:	42a0      	cmp	r0, r4
 8008472:	d007      	beq.n	8008484 <sbrk_aligned+0x38>
 8008474:	1a21      	subs	r1, r4, r0
 8008476:	4628      	mov	r0, r5
 8008478:	f000 fea2 	bl	80091c0 <_sbrk_r>
 800847c:	3001      	adds	r0, #1
 800847e:	d101      	bne.n	8008484 <sbrk_aligned+0x38>
 8008480:	f04f 34ff 	mov.w	r4, #4294967295
 8008484:	4620      	mov	r0, r4
 8008486:	bd70      	pop	{r4, r5, r6, pc}
 8008488:	2000530c 	.word	0x2000530c

0800848c <_malloc_r>:
 800848c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008490:	1ccd      	adds	r5, r1, #3
 8008492:	f025 0503 	bic.w	r5, r5, #3
 8008496:	3508      	adds	r5, #8
 8008498:	2d0c      	cmp	r5, #12
 800849a:	bf38      	it	cc
 800849c:	250c      	movcc	r5, #12
 800849e:	2d00      	cmp	r5, #0
 80084a0:	4607      	mov	r7, r0
 80084a2:	db01      	blt.n	80084a8 <_malloc_r+0x1c>
 80084a4:	42a9      	cmp	r1, r5
 80084a6:	d905      	bls.n	80084b4 <_malloc_r+0x28>
 80084a8:	230c      	movs	r3, #12
 80084aa:	603b      	str	r3, [r7, #0]
 80084ac:	2600      	movs	r6, #0
 80084ae:	4630      	mov	r0, r6
 80084b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008588 <_malloc_r+0xfc>
 80084b8:	f000 f868 	bl	800858c <__malloc_lock>
 80084bc:	f8d8 3000 	ldr.w	r3, [r8]
 80084c0:	461c      	mov	r4, r3
 80084c2:	bb5c      	cbnz	r4, 800851c <_malloc_r+0x90>
 80084c4:	4629      	mov	r1, r5
 80084c6:	4638      	mov	r0, r7
 80084c8:	f7ff ffc0 	bl	800844c <sbrk_aligned>
 80084cc:	1c43      	adds	r3, r0, #1
 80084ce:	4604      	mov	r4, r0
 80084d0:	d155      	bne.n	800857e <_malloc_r+0xf2>
 80084d2:	f8d8 4000 	ldr.w	r4, [r8]
 80084d6:	4626      	mov	r6, r4
 80084d8:	2e00      	cmp	r6, #0
 80084da:	d145      	bne.n	8008568 <_malloc_r+0xdc>
 80084dc:	2c00      	cmp	r4, #0
 80084de:	d048      	beq.n	8008572 <_malloc_r+0xe6>
 80084e0:	6823      	ldr	r3, [r4, #0]
 80084e2:	4631      	mov	r1, r6
 80084e4:	4638      	mov	r0, r7
 80084e6:	eb04 0903 	add.w	r9, r4, r3
 80084ea:	f000 fe69 	bl	80091c0 <_sbrk_r>
 80084ee:	4581      	cmp	r9, r0
 80084f0:	d13f      	bne.n	8008572 <_malloc_r+0xe6>
 80084f2:	6821      	ldr	r1, [r4, #0]
 80084f4:	1a6d      	subs	r5, r5, r1
 80084f6:	4629      	mov	r1, r5
 80084f8:	4638      	mov	r0, r7
 80084fa:	f7ff ffa7 	bl	800844c <sbrk_aligned>
 80084fe:	3001      	adds	r0, #1
 8008500:	d037      	beq.n	8008572 <_malloc_r+0xe6>
 8008502:	6823      	ldr	r3, [r4, #0]
 8008504:	442b      	add	r3, r5
 8008506:	6023      	str	r3, [r4, #0]
 8008508:	f8d8 3000 	ldr.w	r3, [r8]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d038      	beq.n	8008582 <_malloc_r+0xf6>
 8008510:	685a      	ldr	r2, [r3, #4]
 8008512:	42a2      	cmp	r2, r4
 8008514:	d12b      	bne.n	800856e <_malloc_r+0xe2>
 8008516:	2200      	movs	r2, #0
 8008518:	605a      	str	r2, [r3, #4]
 800851a:	e00f      	b.n	800853c <_malloc_r+0xb0>
 800851c:	6822      	ldr	r2, [r4, #0]
 800851e:	1b52      	subs	r2, r2, r5
 8008520:	d41f      	bmi.n	8008562 <_malloc_r+0xd6>
 8008522:	2a0b      	cmp	r2, #11
 8008524:	d917      	bls.n	8008556 <_malloc_r+0xca>
 8008526:	1961      	adds	r1, r4, r5
 8008528:	42a3      	cmp	r3, r4
 800852a:	6025      	str	r5, [r4, #0]
 800852c:	bf18      	it	ne
 800852e:	6059      	strne	r1, [r3, #4]
 8008530:	6863      	ldr	r3, [r4, #4]
 8008532:	bf08      	it	eq
 8008534:	f8c8 1000 	streq.w	r1, [r8]
 8008538:	5162      	str	r2, [r4, r5]
 800853a:	604b      	str	r3, [r1, #4]
 800853c:	4638      	mov	r0, r7
 800853e:	f104 060b 	add.w	r6, r4, #11
 8008542:	f000 f829 	bl	8008598 <__malloc_unlock>
 8008546:	f026 0607 	bic.w	r6, r6, #7
 800854a:	1d23      	adds	r3, r4, #4
 800854c:	1af2      	subs	r2, r6, r3
 800854e:	d0ae      	beq.n	80084ae <_malloc_r+0x22>
 8008550:	1b9b      	subs	r3, r3, r6
 8008552:	50a3      	str	r3, [r4, r2]
 8008554:	e7ab      	b.n	80084ae <_malloc_r+0x22>
 8008556:	42a3      	cmp	r3, r4
 8008558:	6862      	ldr	r2, [r4, #4]
 800855a:	d1dd      	bne.n	8008518 <_malloc_r+0x8c>
 800855c:	f8c8 2000 	str.w	r2, [r8]
 8008560:	e7ec      	b.n	800853c <_malloc_r+0xb0>
 8008562:	4623      	mov	r3, r4
 8008564:	6864      	ldr	r4, [r4, #4]
 8008566:	e7ac      	b.n	80084c2 <_malloc_r+0x36>
 8008568:	4634      	mov	r4, r6
 800856a:	6876      	ldr	r6, [r6, #4]
 800856c:	e7b4      	b.n	80084d8 <_malloc_r+0x4c>
 800856e:	4613      	mov	r3, r2
 8008570:	e7cc      	b.n	800850c <_malloc_r+0x80>
 8008572:	230c      	movs	r3, #12
 8008574:	603b      	str	r3, [r7, #0]
 8008576:	4638      	mov	r0, r7
 8008578:	f000 f80e 	bl	8008598 <__malloc_unlock>
 800857c:	e797      	b.n	80084ae <_malloc_r+0x22>
 800857e:	6025      	str	r5, [r4, #0]
 8008580:	e7dc      	b.n	800853c <_malloc_r+0xb0>
 8008582:	605b      	str	r3, [r3, #4]
 8008584:	deff      	udf	#255	; 0xff
 8008586:	bf00      	nop
 8008588:	20005308 	.word	0x20005308

0800858c <__malloc_lock>:
 800858c:	4801      	ldr	r0, [pc, #4]	; (8008594 <__malloc_lock+0x8>)
 800858e:	f7ff bef8 	b.w	8008382 <__retarget_lock_acquire_recursive>
 8008592:	bf00      	nop
 8008594:	20005304 	.word	0x20005304

08008598 <__malloc_unlock>:
 8008598:	4801      	ldr	r0, [pc, #4]	; (80085a0 <__malloc_unlock+0x8>)
 800859a:	f7ff bef3 	b.w	8008384 <__retarget_lock_release_recursive>
 800859e:	bf00      	nop
 80085a0:	20005304 	.word	0x20005304

080085a4 <__ssputs_r>:
 80085a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085a8:	688e      	ldr	r6, [r1, #8]
 80085aa:	461f      	mov	r7, r3
 80085ac:	42be      	cmp	r6, r7
 80085ae:	680b      	ldr	r3, [r1, #0]
 80085b0:	4682      	mov	sl, r0
 80085b2:	460c      	mov	r4, r1
 80085b4:	4690      	mov	r8, r2
 80085b6:	d82c      	bhi.n	8008612 <__ssputs_r+0x6e>
 80085b8:	898a      	ldrh	r2, [r1, #12]
 80085ba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80085be:	d026      	beq.n	800860e <__ssputs_r+0x6a>
 80085c0:	6965      	ldr	r5, [r4, #20]
 80085c2:	6909      	ldr	r1, [r1, #16]
 80085c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80085c8:	eba3 0901 	sub.w	r9, r3, r1
 80085cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80085d0:	1c7b      	adds	r3, r7, #1
 80085d2:	444b      	add	r3, r9
 80085d4:	106d      	asrs	r5, r5, #1
 80085d6:	429d      	cmp	r5, r3
 80085d8:	bf38      	it	cc
 80085da:	461d      	movcc	r5, r3
 80085dc:	0553      	lsls	r3, r2, #21
 80085de:	d527      	bpl.n	8008630 <__ssputs_r+0x8c>
 80085e0:	4629      	mov	r1, r5
 80085e2:	f7ff ff53 	bl	800848c <_malloc_r>
 80085e6:	4606      	mov	r6, r0
 80085e8:	b360      	cbz	r0, 8008644 <__ssputs_r+0xa0>
 80085ea:	6921      	ldr	r1, [r4, #16]
 80085ec:	464a      	mov	r2, r9
 80085ee:	f7ff feca 	bl	8008386 <memcpy>
 80085f2:	89a3      	ldrh	r3, [r4, #12]
 80085f4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80085f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085fc:	81a3      	strh	r3, [r4, #12]
 80085fe:	6126      	str	r6, [r4, #16]
 8008600:	6165      	str	r5, [r4, #20]
 8008602:	444e      	add	r6, r9
 8008604:	eba5 0509 	sub.w	r5, r5, r9
 8008608:	6026      	str	r6, [r4, #0]
 800860a:	60a5      	str	r5, [r4, #8]
 800860c:	463e      	mov	r6, r7
 800860e:	42be      	cmp	r6, r7
 8008610:	d900      	bls.n	8008614 <__ssputs_r+0x70>
 8008612:	463e      	mov	r6, r7
 8008614:	6820      	ldr	r0, [r4, #0]
 8008616:	4632      	mov	r2, r6
 8008618:	4641      	mov	r1, r8
 800861a:	f000 fd95 	bl	8009148 <memmove>
 800861e:	68a3      	ldr	r3, [r4, #8]
 8008620:	1b9b      	subs	r3, r3, r6
 8008622:	60a3      	str	r3, [r4, #8]
 8008624:	6823      	ldr	r3, [r4, #0]
 8008626:	4433      	add	r3, r6
 8008628:	6023      	str	r3, [r4, #0]
 800862a:	2000      	movs	r0, #0
 800862c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008630:	462a      	mov	r2, r5
 8008632:	f000 fdd5 	bl	80091e0 <_realloc_r>
 8008636:	4606      	mov	r6, r0
 8008638:	2800      	cmp	r0, #0
 800863a:	d1e0      	bne.n	80085fe <__ssputs_r+0x5a>
 800863c:	6921      	ldr	r1, [r4, #16]
 800863e:	4650      	mov	r0, sl
 8008640:	f7ff feb0 	bl	80083a4 <_free_r>
 8008644:	230c      	movs	r3, #12
 8008646:	f8ca 3000 	str.w	r3, [sl]
 800864a:	89a3      	ldrh	r3, [r4, #12]
 800864c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008650:	81a3      	strh	r3, [r4, #12]
 8008652:	f04f 30ff 	mov.w	r0, #4294967295
 8008656:	e7e9      	b.n	800862c <__ssputs_r+0x88>

08008658 <_svfiprintf_r>:
 8008658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800865c:	4698      	mov	r8, r3
 800865e:	898b      	ldrh	r3, [r1, #12]
 8008660:	061b      	lsls	r3, r3, #24
 8008662:	b09d      	sub	sp, #116	; 0x74
 8008664:	4607      	mov	r7, r0
 8008666:	460d      	mov	r5, r1
 8008668:	4614      	mov	r4, r2
 800866a:	d50e      	bpl.n	800868a <_svfiprintf_r+0x32>
 800866c:	690b      	ldr	r3, [r1, #16]
 800866e:	b963      	cbnz	r3, 800868a <_svfiprintf_r+0x32>
 8008670:	2140      	movs	r1, #64	; 0x40
 8008672:	f7ff ff0b 	bl	800848c <_malloc_r>
 8008676:	6028      	str	r0, [r5, #0]
 8008678:	6128      	str	r0, [r5, #16]
 800867a:	b920      	cbnz	r0, 8008686 <_svfiprintf_r+0x2e>
 800867c:	230c      	movs	r3, #12
 800867e:	603b      	str	r3, [r7, #0]
 8008680:	f04f 30ff 	mov.w	r0, #4294967295
 8008684:	e0d0      	b.n	8008828 <_svfiprintf_r+0x1d0>
 8008686:	2340      	movs	r3, #64	; 0x40
 8008688:	616b      	str	r3, [r5, #20]
 800868a:	2300      	movs	r3, #0
 800868c:	9309      	str	r3, [sp, #36]	; 0x24
 800868e:	2320      	movs	r3, #32
 8008690:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008694:	f8cd 800c 	str.w	r8, [sp, #12]
 8008698:	2330      	movs	r3, #48	; 0x30
 800869a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008840 <_svfiprintf_r+0x1e8>
 800869e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086a2:	f04f 0901 	mov.w	r9, #1
 80086a6:	4623      	mov	r3, r4
 80086a8:	469a      	mov	sl, r3
 80086aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086ae:	b10a      	cbz	r2, 80086b4 <_svfiprintf_r+0x5c>
 80086b0:	2a25      	cmp	r2, #37	; 0x25
 80086b2:	d1f9      	bne.n	80086a8 <_svfiprintf_r+0x50>
 80086b4:	ebba 0b04 	subs.w	fp, sl, r4
 80086b8:	d00b      	beq.n	80086d2 <_svfiprintf_r+0x7a>
 80086ba:	465b      	mov	r3, fp
 80086bc:	4622      	mov	r2, r4
 80086be:	4629      	mov	r1, r5
 80086c0:	4638      	mov	r0, r7
 80086c2:	f7ff ff6f 	bl	80085a4 <__ssputs_r>
 80086c6:	3001      	adds	r0, #1
 80086c8:	f000 80a9 	beq.w	800881e <_svfiprintf_r+0x1c6>
 80086cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086ce:	445a      	add	r2, fp
 80086d0:	9209      	str	r2, [sp, #36]	; 0x24
 80086d2:	f89a 3000 	ldrb.w	r3, [sl]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	f000 80a1 	beq.w	800881e <_svfiprintf_r+0x1c6>
 80086dc:	2300      	movs	r3, #0
 80086de:	f04f 32ff 	mov.w	r2, #4294967295
 80086e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086e6:	f10a 0a01 	add.w	sl, sl, #1
 80086ea:	9304      	str	r3, [sp, #16]
 80086ec:	9307      	str	r3, [sp, #28]
 80086ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80086f2:	931a      	str	r3, [sp, #104]	; 0x68
 80086f4:	4654      	mov	r4, sl
 80086f6:	2205      	movs	r2, #5
 80086f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086fc:	4850      	ldr	r0, [pc, #320]	; (8008840 <_svfiprintf_r+0x1e8>)
 80086fe:	f7f7 fda7 	bl	8000250 <memchr>
 8008702:	9a04      	ldr	r2, [sp, #16]
 8008704:	b9d8      	cbnz	r0, 800873e <_svfiprintf_r+0xe6>
 8008706:	06d0      	lsls	r0, r2, #27
 8008708:	bf44      	itt	mi
 800870a:	2320      	movmi	r3, #32
 800870c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008710:	0711      	lsls	r1, r2, #28
 8008712:	bf44      	itt	mi
 8008714:	232b      	movmi	r3, #43	; 0x2b
 8008716:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800871a:	f89a 3000 	ldrb.w	r3, [sl]
 800871e:	2b2a      	cmp	r3, #42	; 0x2a
 8008720:	d015      	beq.n	800874e <_svfiprintf_r+0xf6>
 8008722:	9a07      	ldr	r2, [sp, #28]
 8008724:	4654      	mov	r4, sl
 8008726:	2000      	movs	r0, #0
 8008728:	f04f 0c0a 	mov.w	ip, #10
 800872c:	4621      	mov	r1, r4
 800872e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008732:	3b30      	subs	r3, #48	; 0x30
 8008734:	2b09      	cmp	r3, #9
 8008736:	d94d      	bls.n	80087d4 <_svfiprintf_r+0x17c>
 8008738:	b1b0      	cbz	r0, 8008768 <_svfiprintf_r+0x110>
 800873a:	9207      	str	r2, [sp, #28]
 800873c:	e014      	b.n	8008768 <_svfiprintf_r+0x110>
 800873e:	eba0 0308 	sub.w	r3, r0, r8
 8008742:	fa09 f303 	lsl.w	r3, r9, r3
 8008746:	4313      	orrs	r3, r2
 8008748:	9304      	str	r3, [sp, #16]
 800874a:	46a2      	mov	sl, r4
 800874c:	e7d2      	b.n	80086f4 <_svfiprintf_r+0x9c>
 800874e:	9b03      	ldr	r3, [sp, #12]
 8008750:	1d19      	adds	r1, r3, #4
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	9103      	str	r1, [sp, #12]
 8008756:	2b00      	cmp	r3, #0
 8008758:	bfbb      	ittet	lt
 800875a:	425b      	neglt	r3, r3
 800875c:	f042 0202 	orrlt.w	r2, r2, #2
 8008760:	9307      	strge	r3, [sp, #28]
 8008762:	9307      	strlt	r3, [sp, #28]
 8008764:	bfb8      	it	lt
 8008766:	9204      	strlt	r2, [sp, #16]
 8008768:	7823      	ldrb	r3, [r4, #0]
 800876a:	2b2e      	cmp	r3, #46	; 0x2e
 800876c:	d10c      	bne.n	8008788 <_svfiprintf_r+0x130>
 800876e:	7863      	ldrb	r3, [r4, #1]
 8008770:	2b2a      	cmp	r3, #42	; 0x2a
 8008772:	d134      	bne.n	80087de <_svfiprintf_r+0x186>
 8008774:	9b03      	ldr	r3, [sp, #12]
 8008776:	1d1a      	adds	r2, r3, #4
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	9203      	str	r2, [sp, #12]
 800877c:	2b00      	cmp	r3, #0
 800877e:	bfb8      	it	lt
 8008780:	f04f 33ff 	movlt.w	r3, #4294967295
 8008784:	3402      	adds	r4, #2
 8008786:	9305      	str	r3, [sp, #20]
 8008788:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008850 <_svfiprintf_r+0x1f8>
 800878c:	7821      	ldrb	r1, [r4, #0]
 800878e:	2203      	movs	r2, #3
 8008790:	4650      	mov	r0, sl
 8008792:	f7f7 fd5d 	bl	8000250 <memchr>
 8008796:	b138      	cbz	r0, 80087a8 <_svfiprintf_r+0x150>
 8008798:	9b04      	ldr	r3, [sp, #16]
 800879a:	eba0 000a 	sub.w	r0, r0, sl
 800879e:	2240      	movs	r2, #64	; 0x40
 80087a0:	4082      	lsls	r2, r0
 80087a2:	4313      	orrs	r3, r2
 80087a4:	3401      	adds	r4, #1
 80087a6:	9304      	str	r3, [sp, #16]
 80087a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087ac:	4825      	ldr	r0, [pc, #148]	; (8008844 <_svfiprintf_r+0x1ec>)
 80087ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087b2:	2206      	movs	r2, #6
 80087b4:	f7f7 fd4c 	bl	8000250 <memchr>
 80087b8:	2800      	cmp	r0, #0
 80087ba:	d038      	beq.n	800882e <_svfiprintf_r+0x1d6>
 80087bc:	4b22      	ldr	r3, [pc, #136]	; (8008848 <_svfiprintf_r+0x1f0>)
 80087be:	bb1b      	cbnz	r3, 8008808 <_svfiprintf_r+0x1b0>
 80087c0:	9b03      	ldr	r3, [sp, #12]
 80087c2:	3307      	adds	r3, #7
 80087c4:	f023 0307 	bic.w	r3, r3, #7
 80087c8:	3308      	adds	r3, #8
 80087ca:	9303      	str	r3, [sp, #12]
 80087cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087ce:	4433      	add	r3, r6
 80087d0:	9309      	str	r3, [sp, #36]	; 0x24
 80087d2:	e768      	b.n	80086a6 <_svfiprintf_r+0x4e>
 80087d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80087d8:	460c      	mov	r4, r1
 80087da:	2001      	movs	r0, #1
 80087dc:	e7a6      	b.n	800872c <_svfiprintf_r+0xd4>
 80087de:	2300      	movs	r3, #0
 80087e0:	3401      	adds	r4, #1
 80087e2:	9305      	str	r3, [sp, #20]
 80087e4:	4619      	mov	r1, r3
 80087e6:	f04f 0c0a 	mov.w	ip, #10
 80087ea:	4620      	mov	r0, r4
 80087ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087f0:	3a30      	subs	r2, #48	; 0x30
 80087f2:	2a09      	cmp	r2, #9
 80087f4:	d903      	bls.n	80087fe <_svfiprintf_r+0x1a6>
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d0c6      	beq.n	8008788 <_svfiprintf_r+0x130>
 80087fa:	9105      	str	r1, [sp, #20]
 80087fc:	e7c4      	b.n	8008788 <_svfiprintf_r+0x130>
 80087fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8008802:	4604      	mov	r4, r0
 8008804:	2301      	movs	r3, #1
 8008806:	e7f0      	b.n	80087ea <_svfiprintf_r+0x192>
 8008808:	ab03      	add	r3, sp, #12
 800880a:	9300      	str	r3, [sp, #0]
 800880c:	462a      	mov	r2, r5
 800880e:	4b0f      	ldr	r3, [pc, #60]	; (800884c <_svfiprintf_r+0x1f4>)
 8008810:	a904      	add	r1, sp, #16
 8008812:	4638      	mov	r0, r7
 8008814:	f3af 8000 	nop.w
 8008818:	1c42      	adds	r2, r0, #1
 800881a:	4606      	mov	r6, r0
 800881c:	d1d6      	bne.n	80087cc <_svfiprintf_r+0x174>
 800881e:	89ab      	ldrh	r3, [r5, #12]
 8008820:	065b      	lsls	r3, r3, #25
 8008822:	f53f af2d 	bmi.w	8008680 <_svfiprintf_r+0x28>
 8008826:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008828:	b01d      	add	sp, #116	; 0x74
 800882a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800882e:	ab03      	add	r3, sp, #12
 8008830:	9300      	str	r3, [sp, #0]
 8008832:	462a      	mov	r2, r5
 8008834:	4b05      	ldr	r3, [pc, #20]	; (800884c <_svfiprintf_r+0x1f4>)
 8008836:	a904      	add	r1, sp, #16
 8008838:	4638      	mov	r0, r7
 800883a:	f000 f9bd 	bl	8008bb8 <_printf_i>
 800883e:	e7eb      	b.n	8008818 <_svfiprintf_r+0x1c0>
 8008840:	0800b349 	.word	0x0800b349
 8008844:	0800b353 	.word	0x0800b353
 8008848:	00000000 	.word	0x00000000
 800884c:	080085a5 	.word	0x080085a5
 8008850:	0800b34f 	.word	0x0800b34f

08008854 <__sfputc_r>:
 8008854:	6893      	ldr	r3, [r2, #8]
 8008856:	3b01      	subs	r3, #1
 8008858:	2b00      	cmp	r3, #0
 800885a:	b410      	push	{r4}
 800885c:	6093      	str	r3, [r2, #8]
 800885e:	da08      	bge.n	8008872 <__sfputc_r+0x1e>
 8008860:	6994      	ldr	r4, [r2, #24]
 8008862:	42a3      	cmp	r3, r4
 8008864:	db01      	blt.n	800886a <__sfputc_r+0x16>
 8008866:	290a      	cmp	r1, #10
 8008868:	d103      	bne.n	8008872 <__sfputc_r+0x1e>
 800886a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800886e:	f000 bbd5 	b.w	800901c <__swbuf_r>
 8008872:	6813      	ldr	r3, [r2, #0]
 8008874:	1c58      	adds	r0, r3, #1
 8008876:	6010      	str	r0, [r2, #0]
 8008878:	7019      	strb	r1, [r3, #0]
 800887a:	4608      	mov	r0, r1
 800887c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008880:	4770      	bx	lr

08008882 <__sfputs_r>:
 8008882:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008884:	4606      	mov	r6, r0
 8008886:	460f      	mov	r7, r1
 8008888:	4614      	mov	r4, r2
 800888a:	18d5      	adds	r5, r2, r3
 800888c:	42ac      	cmp	r4, r5
 800888e:	d101      	bne.n	8008894 <__sfputs_r+0x12>
 8008890:	2000      	movs	r0, #0
 8008892:	e007      	b.n	80088a4 <__sfputs_r+0x22>
 8008894:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008898:	463a      	mov	r2, r7
 800889a:	4630      	mov	r0, r6
 800889c:	f7ff ffda 	bl	8008854 <__sfputc_r>
 80088a0:	1c43      	adds	r3, r0, #1
 80088a2:	d1f3      	bne.n	800888c <__sfputs_r+0xa>
 80088a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080088a8 <_vfiprintf_r>:
 80088a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ac:	460d      	mov	r5, r1
 80088ae:	b09d      	sub	sp, #116	; 0x74
 80088b0:	4614      	mov	r4, r2
 80088b2:	4698      	mov	r8, r3
 80088b4:	4606      	mov	r6, r0
 80088b6:	b118      	cbz	r0, 80088c0 <_vfiprintf_r+0x18>
 80088b8:	6a03      	ldr	r3, [r0, #32]
 80088ba:	b90b      	cbnz	r3, 80088c0 <_vfiprintf_r+0x18>
 80088bc:	f7ff fb8c 	bl	8007fd8 <__sinit>
 80088c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80088c2:	07d9      	lsls	r1, r3, #31
 80088c4:	d405      	bmi.n	80088d2 <_vfiprintf_r+0x2a>
 80088c6:	89ab      	ldrh	r3, [r5, #12]
 80088c8:	059a      	lsls	r2, r3, #22
 80088ca:	d402      	bmi.n	80088d2 <_vfiprintf_r+0x2a>
 80088cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088ce:	f7ff fd58 	bl	8008382 <__retarget_lock_acquire_recursive>
 80088d2:	89ab      	ldrh	r3, [r5, #12]
 80088d4:	071b      	lsls	r3, r3, #28
 80088d6:	d501      	bpl.n	80088dc <_vfiprintf_r+0x34>
 80088d8:	692b      	ldr	r3, [r5, #16]
 80088da:	b99b      	cbnz	r3, 8008904 <_vfiprintf_r+0x5c>
 80088dc:	4629      	mov	r1, r5
 80088de:	4630      	mov	r0, r6
 80088e0:	f000 fbda 	bl	8009098 <__swsetup_r>
 80088e4:	b170      	cbz	r0, 8008904 <_vfiprintf_r+0x5c>
 80088e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80088e8:	07dc      	lsls	r4, r3, #31
 80088ea:	d504      	bpl.n	80088f6 <_vfiprintf_r+0x4e>
 80088ec:	f04f 30ff 	mov.w	r0, #4294967295
 80088f0:	b01d      	add	sp, #116	; 0x74
 80088f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088f6:	89ab      	ldrh	r3, [r5, #12]
 80088f8:	0598      	lsls	r0, r3, #22
 80088fa:	d4f7      	bmi.n	80088ec <_vfiprintf_r+0x44>
 80088fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088fe:	f7ff fd41 	bl	8008384 <__retarget_lock_release_recursive>
 8008902:	e7f3      	b.n	80088ec <_vfiprintf_r+0x44>
 8008904:	2300      	movs	r3, #0
 8008906:	9309      	str	r3, [sp, #36]	; 0x24
 8008908:	2320      	movs	r3, #32
 800890a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800890e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008912:	2330      	movs	r3, #48	; 0x30
 8008914:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008ac8 <_vfiprintf_r+0x220>
 8008918:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800891c:	f04f 0901 	mov.w	r9, #1
 8008920:	4623      	mov	r3, r4
 8008922:	469a      	mov	sl, r3
 8008924:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008928:	b10a      	cbz	r2, 800892e <_vfiprintf_r+0x86>
 800892a:	2a25      	cmp	r2, #37	; 0x25
 800892c:	d1f9      	bne.n	8008922 <_vfiprintf_r+0x7a>
 800892e:	ebba 0b04 	subs.w	fp, sl, r4
 8008932:	d00b      	beq.n	800894c <_vfiprintf_r+0xa4>
 8008934:	465b      	mov	r3, fp
 8008936:	4622      	mov	r2, r4
 8008938:	4629      	mov	r1, r5
 800893a:	4630      	mov	r0, r6
 800893c:	f7ff ffa1 	bl	8008882 <__sfputs_r>
 8008940:	3001      	adds	r0, #1
 8008942:	f000 80a9 	beq.w	8008a98 <_vfiprintf_r+0x1f0>
 8008946:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008948:	445a      	add	r2, fp
 800894a:	9209      	str	r2, [sp, #36]	; 0x24
 800894c:	f89a 3000 	ldrb.w	r3, [sl]
 8008950:	2b00      	cmp	r3, #0
 8008952:	f000 80a1 	beq.w	8008a98 <_vfiprintf_r+0x1f0>
 8008956:	2300      	movs	r3, #0
 8008958:	f04f 32ff 	mov.w	r2, #4294967295
 800895c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008960:	f10a 0a01 	add.w	sl, sl, #1
 8008964:	9304      	str	r3, [sp, #16]
 8008966:	9307      	str	r3, [sp, #28]
 8008968:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800896c:	931a      	str	r3, [sp, #104]	; 0x68
 800896e:	4654      	mov	r4, sl
 8008970:	2205      	movs	r2, #5
 8008972:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008976:	4854      	ldr	r0, [pc, #336]	; (8008ac8 <_vfiprintf_r+0x220>)
 8008978:	f7f7 fc6a 	bl	8000250 <memchr>
 800897c:	9a04      	ldr	r2, [sp, #16]
 800897e:	b9d8      	cbnz	r0, 80089b8 <_vfiprintf_r+0x110>
 8008980:	06d1      	lsls	r1, r2, #27
 8008982:	bf44      	itt	mi
 8008984:	2320      	movmi	r3, #32
 8008986:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800898a:	0713      	lsls	r3, r2, #28
 800898c:	bf44      	itt	mi
 800898e:	232b      	movmi	r3, #43	; 0x2b
 8008990:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008994:	f89a 3000 	ldrb.w	r3, [sl]
 8008998:	2b2a      	cmp	r3, #42	; 0x2a
 800899a:	d015      	beq.n	80089c8 <_vfiprintf_r+0x120>
 800899c:	9a07      	ldr	r2, [sp, #28]
 800899e:	4654      	mov	r4, sl
 80089a0:	2000      	movs	r0, #0
 80089a2:	f04f 0c0a 	mov.w	ip, #10
 80089a6:	4621      	mov	r1, r4
 80089a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089ac:	3b30      	subs	r3, #48	; 0x30
 80089ae:	2b09      	cmp	r3, #9
 80089b0:	d94d      	bls.n	8008a4e <_vfiprintf_r+0x1a6>
 80089b2:	b1b0      	cbz	r0, 80089e2 <_vfiprintf_r+0x13a>
 80089b4:	9207      	str	r2, [sp, #28]
 80089b6:	e014      	b.n	80089e2 <_vfiprintf_r+0x13a>
 80089b8:	eba0 0308 	sub.w	r3, r0, r8
 80089bc:	fa09 f303 	lsl.w	r3, r9, r3
 80089c0:	4313      	orrs	r3, r2
 80089c2:	9304      	str	r3, [sp, #16]
 80089c4:	46a2      	mov	sl, r4
 80089c6:	e7d2      	b.n	800896e <_vfiprintf_r+0xc6>
 80089c8:	9b03      	ldr	r3, [sp, #12]
 80089ca:	1d19      	adds	r1, r3, #4
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	9103      	str	r1, [sp, #12]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	bfbb      	ittet	lt
 80089d4:	425b      	neglt	r3, r3
 80089d6:	f042 0202 	orrlt.w	r2, r2, #2
 80089da:	9307      	strge	r3, [sp, #28]
 80089dc:	9307      	strlt	r3, [sp, #28]
 80089de:	bfb8      	it	lt
 80089e0:	9204      	strlt	r2, [sp, #16]
 80089e2:	7823      	ldrb	r3, [r4, #0]
 80089e4:	2b2e      	cmp	r3, #46	; 0x2e
 80089e6:	d10c      	bne.n	8008a02 <_vfiprintf_r+0x15a>
 80089e8:	7863      	ldrb	r3, [r4, #1]
 80089ea:	2b2a      	cmp	r3, #42	; 0x2a
 80089ec:	d134      	bne.n	8008a58 <_vfiprintf_r+0x1b0>
 80089ee:	9b03      	ldr	r3, [sp, #12]
 80089f0:	1d1a      	adds	r2, r3, #4
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	9203      	str	r2, [sp, #12]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	bfb8      	it	lt
 80089fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80089fe:	3402      	adds	r4, #2
 8008a00:	9305      	str	r3, [sp, #20]
 8008a02:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008ad8 <_vfiprintf_r+0x230>
 8008a06:	7821      	ldrb	r1, [r4, #0]
 8008a08:	2203      	movs	r2, #3
 8008a0a:	4650      	mov	r0, sl
 8008a0c:	f7f7 fc20 	bl	8000250 <memchr>
 8008a10:	b138      	cbz	r0, 8008a22 <_vfiprintf_r+0x17a>
 8008a12:	9b04      	ldr	r3, [sp, #16]
 8008a14:	eba0 000a 	sub.w	r0, r0, sl
 8008a18:	2240      	movs	r2, #64	; 0x40
 8008a1a:	4082      	lsls	r2, r0
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	3401      	adds	r4, #1
 8008a20:	9304      	str	r3, [sp, #16]
 8008a22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a26:	4829      	ldr	r0, [pc, #164]	; (8008acc <_vfiprintf_r+0x224>)
 8008a28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a2c:	2206      	movs	r2, #6
 8008a2e:	f7f7 fc0f 	bl	8000250 <memchr>
 8008a32:	2800      	cmp	r0, #0
 8008a34:	d03f      	beq.n	8008ab6 <_vfiprintf_r+0x20e>
 8008a36:	4b26      	ldr	r3, [pc, #152]	; (8008ad0 <_vfiprintf_r+0x228>)
 8008a38:	bb1b      	cbnz	r3, 8008a82 <_vfiprintf_r+0x1da>
 8008a3a:	9b03      	ldr	r3, [sp, #12]
 8008a3c:	3307      	adds	r3, #7
 8008a3e:	f023 0307 	bic.w	r3, r3, #7
 8008a42:	3308      	adds	r3, #8
 8008a44:	9303      	str	r3, [sp, #12]
 8008a46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a48:	443b      	add	r3, r7
 8008a4a:	9309      	str	r3, [sp, #36]	; 0x24
 8008a4c:	e768      	b.n	8008920 <_vfiprintf_r+0x78>
 8008a4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a52:	460c      	mov	r4, r1
 8008a54:	2001      	movs	r0, #1
 8008a56:	e7a6      	b.n	80089a6 <_vfiprintf_r+0xfe>
 8008a58:	2300      	movs	r3, #0
 8008a5a:	3401      	adds	r4, #1
 8008a5c:	9305      	str	r3, [sp, #20]
 8008a5e:	4619      	mov	r1, r3
 8008a60:	f04f 0c0a 	mov.w	ip, #10
 8008a64:	4620      	mov	r0, r4
 8008a66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a6a:	3a30      	subs	r2, #48	; 0x30
 8008a6c:	2a09      	cmp	r2, #9
 8008a6e:	d903      	bls.n	8008a78 <_vfiprintf_r+0x1d0>
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d0c6      	beq.n	8008a02 <_vfiprintf_r+0x15a>
 8008a74:	9105      	str	r1, [sp, #20]
 8008a76:	e7c4      	b.n	8008a02 <_vfiprintf_r+0x15a>
 8008a78:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a7c:	4604      	mov	r4, r0
 8008a7e:	2301      	movs	r3, #1
 8008a80:	e7f0      	b.n	8008a64 <_vfiprintf_r+0x1bc>
 8008a82:	ab03      	add	r3, sp, #12
 8008a84:	9300      	str	r3, [sp, #0]
 8008a86:	462a      	mov	r2, r5
 8008a88:	4b12      	ldr	r3, [pc, #72]	; (8008ad4 <_vfiprintf_r+0x22c>)
 8008a8a:	a904      	add	r1, sp, #16
 8008a8c:	4630      	mov	r0, r6
 8008a8e:	f3af 8000 	nop.w
 8008a92:	4607      	mov	r7, r0
 8008a94:	1c78      	adds	r0, r7, #1
 8008a96:	d1d6      	bne.n	8008a46 <_vfiprintf_r+0x19e>
 8008a98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a9a:	07d9      	lsls	r1, r3, #31
 8008a9c:	d405      	bmi.n	8008aaa <_vfiprintf_r+0x202>
 8008a9e:	89ab      	ldrh	r3, [r5, #12]
 8008aa0:	059a      	lsls	r2, r3, #22
 8008aa2:	d402      	bmi.n	8008aaa <_vfiprintf_r+0x202>
 8008aa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008aa6:	f7ff fc6d 	bl	8008384 <__retarget_lock_release_recursive>
 8008aaa:	89ab      	ldrh	r3, [r5, #12]
 8008aac:	065b      	lsls	r3, r3, #25
 8008aae:	f53f af1d 	bmi.w	80088ec <_vfiprintf_r+0x44>
 8008ab2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ab4:	e71c      	b.n	80088f0 <_vfiprintf_r+0x48>
 8008ab6:	ab03      	add	r3, sp, #12
 8008ab8:	9300      	str	r3, [sp, #0]
 8008aba:	462a      	mov	r2, r5
 8008abc:	4b05      	ldr	r3, [pc, #20]	; (8008ad4 <_vfiprintf_r+0x22c>)
 8008abe:	a904      	add	r1, sp, #16
 8008ac0:	4630      	mov	r0, r6
 8008ac2:	f000 f879 	bl	8008bb8 <_printf_i>
 8008ac6:	e7e4      	b.n	8008a92 <_vfiprintf_r+0x1ea>
 8008ac8:	0800b349 	.word	0x0800b349
 8008acc:	0800b353 	.word	0x0800b353
 8008ad0:	00000000 	.word	0x00000000
 8008ad4:	08008883 	.word	0x08008883
 8008ad8:	0800b34f 	.word	0x0800b34f

08008adc <_printf_common>:
 8008adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ae0:	4616      	mov	r6, r2
 8008ae2:	4699      	mov	r9, r3
 8008ae4:	688a      	ldr	r2, [r1, #8]
 8008ae6:	690b      	ldr	r3, [r1, #16]
 8008ae8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008aec:	4293      	cmp	r3, r2
 8008aee:	bfb8      	it	lt
 8008af0:	4613      	movlt	r3, r2
 8008af2:	6033      	str	r3, [r6, #0]
 8008af4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008af8:	4607      	mov	r7, r0
 8008afa:	460c      	mov	r4, r1
 8008afc:	b10a      	cbz	r2, 8008b02 <_printf_common+0x26>
 8008afe:	3301      	adds	r3, #1
 8008b00:	6033      	str	r3, [r6, #0]
 8008b02:	6823      	ldr	r3, [r4, #0]
 8008b04:	0699      	lsls	r1, r3, #26
 8008b06:	bf42      	ittt	mi
 8008b08:	6833      	ldrmi	r3, [r6, #0]
 8008b0a:	3302      	addmi	r3, #2
 8008b0c:	6033      	strmi	r3, [r6, #0]
 8008b0e:	6825      	ldr	r5, [r4, #0]
 8008b10:	f015 0506 	ands.w	r5, r5, #6
 8008b14:	d106      	bne.n	8008b24 <_printf_common+0x48>
 8008b16:	f104 0a19 	add.w	sl, r4, #25
 8008b1a:	68e3      	ldr	r3, [r4, #12]
 8008b1c:	6832      	ldr	r2, [r6, #0]
 8008b1e:	1a9b      	subs	r3, r3, r2
 8008b20:	42ab      	cmp	r3, r5
 8008b22:	dc26      	bgt.n	8008b72 <_printf_common+0x96>
 8008b24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b28:	1e13      	subs	r3, r2, #0
 8008b2a:	6822      	ldr	r2, [r4, #0]
 8008b2c:	bf18      	it	ne
 8008b2e:	2301      	movne	r3, #1
 8008b30:	0692      	lsls	r2, r2, #26
 8008b32:	d42b      	bmi.n	8008b8c <_printf_common+0xb0>
 8008b34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b38:	4649      	mov	r1, r9
 8008b3a:	4638      	mov	r0, r7
 8008b3c:	47c0      	blx	r8
 8008b3e:	3001      	adds	r0, #1
 8008b40:	d01e      	beq.n	8008b80 <_printf_common+0xa4>
 8008b42:	6823      	ldr	r3, [r4, #0]
 8008b44:	6922      	ldr	r2, [r4, #16]
 8008b46:	f003 0306 	and.w	r3, r3, #6
 8008b4a:	2b04      	cmp	r3, #4
 8008b4c:	bf02      	ittt	eq
 8008b4e:	68e5      	ldreq	r5, [r4, #12]
 8008b50:	6833      	ldreq	r3, [r6, #0]
 8008b52:	1aed      	subeq	r5, r5, r3
 8008b54:	68a3      	ldr	r3, [r4, #8]
 8008b56:	bf0c      	ite	eq
 8008b58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b5c:	2500      	movne	r5, #0
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	bfc4      	itt	gt
 8008b62:	1a9b      	subgt	r3, r3, r2
 8008b64:	18ed      	addgt	r5, r5, r3
 8008b66:	2600      	movs	r6, #0
 8008b68:	341a      	adds	r4, #26
 8008b6a:	42b5      	cmp	r5, r6
 8008b6c:	d11a      	bne.n	8008ba4 <_printf_common+0xc8>
 8008b6e:	2000      	movs	r0, #0
 8008b70:	e008      	b.n	8008b84 <_printf_common+0xa8>
 8008b72:	2301      	movs	r3, #1
 8008b74:	4652      	mov	r2, sl
 8008b76:	4649      	mov	r1, r9
 8008b78:	4638      	mov	r0, r7
 8008b7a:	47c0      	blx	r8
 8008b7c:	3001      	adds	r0, #1
 8008b7e:	d103      	bne.n	8008b88 <_printf_common+0xac>
 8008b80:	f04f 30ff 	mov.w	r0, #4294967295
 8008b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b88:	3501      	adds	r5, #1
 8008b8a:	e7c6      	b.n	8008b1a <_printf_common+0x3e>
 8008b8c:	18e1      	adds	r1, r4, r3
 8008b8e:	1c5a      	adds	r2, r3, #1
 8008b90:	2030      	movs	r0, #48	; 0x30
 8008b92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b96:	4422      	add	r2, r4
 8008b98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ba0:	3302      	adds	r3, #2
 8008ba2:	e7c7      	b.n	8008b34 <_printf_common+0x58>
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	4622      	mov	r2, r4
 8008ba8:	4649      	mov	r1, r9
 8008baa:	4638      	mov	r0, r7
 8008bac:	47c0      	blx	r8
 8008bae:	3001      	adds	r0, #1
 8008bb0:	d0e6      	beq.n	8008b80 <_printf_common+0xa4>
 8008bb2:	3601      	adds	r6, #1
 8008bb4:	e7d9      	b.n	8008b6a <_printf_common+0x8e>
	...

08008bb8 <_printf_i>:
 8008bb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bbc:	7e0f      	ldrb	r7, [r1, #24]
 8008bbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008bc0:	2f78      	cmp	r7, #120	; 0x78
 8008bc2:	4691      	mov	r9, r2
 8008bc4:	4680      	mov	r8, r0
 8008bc6:	460c      	mov	r4, r1
 8008bc8:	469a      	mov	sl, r3
 8008bca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008bce:	d807      	bhi.n	8008be0 <_printf_i+0x28>
 8008bd0:	2f62      	cmp	r7, #98	; 0x62
 8008bd2:	d80a      	bhi.n	8008bea <_printf_i+0x32>
 8008bd4:	2f00      	cmp	r7, #0
 8008bd6:	f000 80d4 	beq.w	8008d82 <_printf_i+0x1ca>
 8008bda:	2f58      	cmp	r7, #88	; 0x58
 8008bdc:	f000 80c0 	beq.w	8008d60 <_printf_i+0x1a8>
 8008be0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008be4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008be8:	e03a      	b.n	8008c60 <_printf_i+0xa8>
 8008bea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008bee:	2b15      	cmp	r3, #21
 8008bf0:	d8f6      	bhi.n	8008be0 <_printf_i+0x28>
 8008bf2:	a101      	add	r1, pc, #4	; (adr r1, 8008bf8 <_printf_i+0x40>)
 8008bf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008bf8:	08008c51 	.word	0x08008c51
 8008bfc:	08008c65 	.word	0x08008c65
 8008c00:	08008be1 	.word	0x08008be1
 8008c04:	08008be1 	.word	0x08008be1
 8008c08:	08008be1 	.word	0x08008be1
 8008c0c:	08008be1 	.word	0x08008be1
 8008c10:	08008c65 	.word	0x08008c65
 8008c14:	08008be1 	.word	0x08008be1
 8008c18:	08008be1 	.word	0x08008be1
 8008c1c:	08008be1 	.word	0x08008be1
 8008c20:	08008be1 	.word	0x08008be1
 8008c24:	08008d69 	.word	0x08008d69
 8008c28:	08008c91 	.word	0x08008c91
 8008c2c:	08008d23 	.word	0x08008d23
 8008c30:	08008be1 	.word	0x08008be1
 8008c34:	08008be1 	.word	0x08008be1
 8008c38:	08008d8b 	.word	0x08008d8b
 8008c3c:	08008be1 	.word	0x08008be1
 8008c40:	08008c91 	.word	0x08008c91
 8008c44:	08008be1 	.word	0x08008be1
 8008c48:	08008be1 	.word	0x08008be1
 8008c4c:	08008d2b 	.word	0x08008d2b
 8008c50:	682b      	ldr	r3, [r5, #0]
 8008c52:	1d1a      	adds	r2, r3, #4
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	602a      	str	r2, [r5, #0]
 8008c58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c60:	2301      	movs	r3, #1
 8008c62:	e09f      	b.n	8008da4 <_printf_i+0x1ec>
 8008c64:	6820      	ldr	r0, [r4, #0]
 8008c66:	682b      	ldr	r3, [r5, #0]
 8008c68:	0607      	lsls	r7, r0, #24
 8008c6a:	f103 0104 	add.w	r1, r3, #4
 8008c6e:	6029      	str	r1, [r5, #0]
 8008c70:	d501      	bpl.n	8008c76 <_printf_i+0xbe>
 8008c72:	681e      	ldr	r6, [r3, #0]
 8008c74:	e003      	b.n	8008c7e <_printf_i+0xc6>
 8008c76:	0646      	lsls	r6, r0, #25
 8008c78:	d5fb      	bpl.n	8008c72 <_printf_i+0xba>
 8008c7a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008c7e:	2e00      	cmp	r6, #0
 8008c80:	da03      	bge.n	8008c8a <_printf_i+0xd2>
 8008c82:	232d      	movs	r3, #45	; 0x2d
 8008c84:	4276      	negs	r6, r6
 8008c86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c8a:	485a      	ldr	r0, [pc, #360]	; (8008df4 <_printf_i+0x23c>)
 8008c8c:	230a      	movs	r3, #10
 8008c8e:	e012      	b.n	8008cb6 <_printf_i+0xfe>
 8008c90:	682b      	ldr	r3, [r5, #0]
 8008c92:	6820      	ldr	r0, [r4, #0]
 8008c94:	1d19      	adds	r1, r3, #4
 8008c96:	6029      	str	r1, [r5, #0]
 8008c98:	0605      	lsls	r5, r0, #24
 8008c9a:	d501      	bpl.n	8008ca0 <_printf_i+0xe8>
 8008c9c:	681e      	ldr	r6, [r3, #0]
 8008c9e:	e002      	b.n	8008ca6 <_printf_i+0xee>
 8008ca0:	0641      	lsls	r1, r0, #25
 8008ca2:	d5fb      	bpl.n	8008c9c <_printf_i+0xe4>
 8008ca4:	881e      	ldrh	r6, [r3, #0]
 8008ca6:	4853      	ldr	r0, [pc, #332]	; (8008df4 <_printf_i+0x23c>)
 8008ca8:	2f6f      	cmp	r7, #111	; 0x6f
 8008caa:	bf0c      	ite	eq
 8008cac:	2308      	moveq	r3, #8
 8008cae:	230a      	movne	r3, #10
 8008cb0:	2100      	movs	r1, #0
 8008cb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008cb6:	6865      	ldr	r5, [r4, #4]
 8008cb8:	60a5      	str	r5, [r4, #8]
 8008cba:	2d00      	cmp	r5, #0
 8008cbc:	bfa2      	ittt	ge
 8008cbe:	6821      	ldrge	r1, [r4, #0]
 8008cc0:	f021 0104 	bicge.w	r1, r1, #4
 8008cc4:	6021      	strge	r1, [r4, #0]
 8008cc6:	b90e      	cbnz	r6, 8008ccc <_printf_i+0x114>
 8008cc8:	2d00      	cmp	r5, #0
 8008cca:	d04b      	beq.n	8008d64 <_printf_i+0x1ac>
 8008ccc:	4615      	mov	r5, r2
 8008cce:	fbb6 f1f3 	udiv	r1, r6, r3
 8008cd2:	fb03 6711 	mls	r7, r3, r1, r6
 8008cd6:	5dc7      	ldrb	r7, [r0, r7]
 8008cd8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008cdc:	4637      	mov	r7, r6
 8008cde:	42bb      	cmp	r3, r7
 8008ce0:	460e      	mov	r6, r1
 8008ce2:	d9f4      	bls.n	8008cce <_printf_i+0x116>
 8008ce4:	2b08      	cmp	r3, #8
 8008ce6:	d10b      	bne.n	8008d00 <_printf_i+0x148>
 8008ce8:	6823      	ldr	r3, [r4, #0]
 8008cea:	07de      	lsls	r6, r3, #31
 8008cec:	d508      	bpl.n	8008d00 <_printf_i+0x148>
 8008cee:	6923      	ldr	r3, [r4, #16]
 8008cf0:	6861      	ldr	r1, [r4, #4]
 8008cf2:	4299      	cmp	r1, r3
 8008cf4:	bfde      	ittt	le
 8008cf6:	2330      	movle	r3, #48	; 0x30
 8008cf8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008cfc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008d00:	1b52      	subs	r2, r2, r5
 8008d02:	6122      	str	r2, [r4, #16]
 8008d04:	f8cd a000 	str.w	sl, [sp]
 8008d08:	464b      	mov	r3, r9
 8008d0a:	aa03      	add	r2, sp, #12
 8008d0c:	4621      	mov	r1, r4
 8008d0e:	4640      	mov	r0, r8
 8008d10:	f7ff fee4 	bl	8008adc <_printf_common>
 8008d14:	3001      	adds	r0, #1
 8008d16:	d14a      	bne.n	8008dae <_printf_i+0x1f6>
 8008d18:	f04f 30ff 	mov.w	r0, #4294967295
 8008d1c:	b004      	add	sp, #16
 8008d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d22:	6823      	ldr	r3, [r4, #0]
 8008d24:	f043 0320 	orr.w	r3, r3, #32
 8008d28:	6023      	str	r3, [r4, #0]
 8008d2a:	4833      	ldr	r0, [pc, #204]	; (8008df8 <_printf_i+0x240>)
 8008d2c:	2778      	movs	r7, #120	; 0x78
 8008d2e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008d32:	6823      	ldr	r3, [r4, #0]
 8008d34:	6829      	ldr	r1, [r5, #0]
 8008d36:	061f      	lsls	r7, r3, #24
 8008d38:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d3c:	d402      	bmi.n	8008d44 <_printf_i+0x18c>
 8008d3e:	065f      	lsls	r7, r3, #25
 8008d40:	bf48      	it	mi
 8008d42:	b2b6      	uxthmi	r6, r6
 8008d44:	07df      	lsls	r7, r3, #31
 8008d46:	bf48      	it	mi
 8008d48:	f043 0320 	orrmi.w	r3, r3, #32
 8008d4c:	6029      	str	r1, [r5, #0]
 8008d4e:	bf48      	it	mi
 8008d50:	6023      	strmi	r3, [r4, #0]
 8008d52:	b91e      	cbnz	r6, 8008d5c <_printf_i+0x1a4>
 8008d54:	6823      	ldr	r3, [r4, #0]
 8008d56:	f023 0320 	bic.w	r3, r3, #32
 8008d5a:	6023      	str	r3, [r4, #0]
 8008d5c:	2310      	movs	r3, #16
 8008d5e:	e7a7      	b.n	8008cb0 <_printf_i+0xf8>
 8008d60:	4824      	ldr	r0, [pc, #144]	; (8008df4 <_printf_i+0x23c>)
 8008d62:	e7e4      	b.n	8008d2e <_printf_i+0x176>
 8008d64:	4615      	mov	r5, r2
 8008d66:	e7bd      	b.n	8008ce4 <_printf_i+0x12c>
 8008d68:	682b      	ldr	r3, [r5, #0]
 8008d6a:	6826      	ldr	r6, [r4, #0]
 8008d6c:	6961      	ldr	r1, [r4, #20]
 8008d6e:	1d18      	adds	r0, r3, #4
 8008d70:	6028      	str	r0, [r5, #0]
 8008d72:	0635      	lsls	r5, r6, #24
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	d501      	bpl.n	8008d7c <_printf_i+0x1c4>
 8008d78:	6019      	str	r1, [r3, #0]
 8008d7a:	e002      	b.n	8008d82 <_printf_i+0x1ca>
 8008d7c:	0670      	lsls	r0, r6, #25
 8008d7e:	d5fb      	bpl.n	8008d78 <_printf_i+0x1c0>
 8008d80:	8019      	strh	r1, [r3, #0]
 8008d82:	2300      	movs	r3, #0
 8008d84:	6123      	str	r3, [r4, #16]
 8008d86:	4615      	mov	r5, r2
 8008d88:	e7bc      	b.n	8008d04 <_printf_i+0x14c>
 8008d8a:	682b      	ldr	r3, [r5, #0]
 8008d8c:	1d1a      	adds	r2, r3, #4
 8008d8e:	602a      	str	r2, [r5, #0]
 8008d90:	681d      	ldr	r5, [r3, #0]
 8008d92:	6862      	ldr	r2, [r4, #4]
 8008d94:	2100      	movs	r1, #0
 8008d96:	4628      	mov	r0, r5
 8008d98:	f7f7 fa5a 	bl	8000250 <memchr>
 8008d9c:	b108      	cbz	r0, 8008da2 <_printf_i+0x1ea>
 8008d9e:	1b40      	subs	r0, r0, r5
 8008da0:	6060      	str	r0, [r4, #4]
 8008da2:	6863      	ldr	r3, [r4, #4]
 8008da4:	6123      	str	r3, [r4, #16]
 8008da6:	2300      	movs	r3, #0
 8008da8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008dac:	e7aa      	b.n	8008d04 <_printf_i+0x14c>
 8008dae:	6923      	ldr	r3, [r4, #16]
 8008db0:	462a      	mov	r2, r5
 8008db2:	4649      	mov	r1, r9
 8008db4:	4640      	mov	r0, r8
 8008db6:	47d0      	blx	sl
 8008db8:	3001      	adds	r0, #1
 8008dba:	d0ad      	beq.n	8008d18 <_printf_i+0x160>
 8008dbc:	6823      	ldr	r3, [r4, #0]
 8008dbe:	079b      	lsls	r3, r3, #30
 8008dc0:	d413      	bmi.n	8008dea <_printf_i+0x232>
 8008dc2:	68e0      	ldr	r0, [r4, #12]
 8008dc4:	9b03      	ldr	r3, [sp, #12]
 8008dc6:	4298      	cmp	r0, r3
 8008dc8:	bfb8      	it	lt
 8008dca:	4618      	movlt	r0, r3
 8008dcc:	e7a6      	b.n	8008d1c <_printf_i+0x164>
 8008dce:	2301      	movs	r3, #1
 8008dd0:	4632      	mov	r2, r6
 8008dd2:	4649      	mov	r1, r9
 8008dd4:	4640      	mov	r0, r8
 8008dd6:	47d0      	blx	sl
 8008dd8:	3001      	adds	r0, #1
 8008dda:	d09d      	beq.n	8008d18 <_printf_i+0x160>
 8008ddc:	3501      	adds	r5, #1
 8008dde:	68e3      	ldr	r3, [r4, #12]
 8008de0:	9903      	ldr	r1, [sp, #12]
 8008de2:	1a5b      	subs	r3, r3, r1
 8008de4:	42ab      	cmp	r3, r5
 8008de6:	dcf2      	bgt.n	8008dce <_printf_i+0x216>
 8008de8:	e7eb      	b.n	8008dc2 <_printf_i+0x20a>
 8008dea:	2500      	movs	r5, #0
 8008dec:	f104 0619 	add.w	r6, r4, #25
 8008df0:	e7f5      	b.n	8008dde <_printf_i+0x226>
 8008df2:	bf00      	nop
 8008df4:	0800b35a 	.word	0x0800b35a
 8008df8:	0800b36b 	.word	0x0800b36b

08008dfc <__sflush_r>:
 8008dfc:	898a      	ldrh	r2, [r1, #12]
 8008dfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e02:	4605      	mov	r5, r0
 8008e04:	0710      	lsls	r0, r2, #28
 8008e06:	460c      	mov	r4, r1
 8008e08:	d458      	bmi.n	8008ebc <__sflush_r+0xc0>
 8008e0a:	684b      	ldr	r3, [r1, #4]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	dc05      	bgt.n	8008e1c <__sflush_r+0x20>
 8008e10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	dc02      	bgt.n	8008e1c <__sflush_r+0x20>
 8008e16:	2000      	movs	r0, #0
 8008e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e1e:	2e00      	cmp	r6, #0
 8008e20:	d0f9      	beq.n	8008e16 <__sflush_r+0x1a>
 8008e22:	2300      	movs	r3, #0
 8008e24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008e28:	682f      	ldr	r7, [r5, #0]
 8008e2a:	6a21      	ldr	r1, [r4, #32]
 8008e2c:	602b      	str	r3, [r5, #0]
 8008e2e:	d032      	beq.n	8008e96 <__sflush_r+0x9a>
 8008e30:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008e32:	89a3      	ldrh	r3, [r4, #12]
 8008e34:	075a      	lsls	r2, r3, #29
 8008e36:	d505      	bpl.n	8008e44 <__sflush_r+0x48>
 8008e38:	6863      	ldr	r3, [r4, #4]
 8008e3a:	1ac0      	subs	r0, r0, r3
 8008e3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008e3e:	b10b      	cbz	r3, 8008e44 <__sflush_r+0x48>
 8008e40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008e42:	1ac0      	subs	r0, r0, r3
 8008e44:	2300      	movs	r3, #0
 8008e46:	4602      	mov	r2, r0
 8008e48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e4a:	6a21      	ldr	r1, [r4, #32]
 8008e4c:	4628      	mov	r0, r5
 8008e4e:	47b0      	blx	r6
 8008e50:	1c43      	adds	r3, r0, #1
 8008e52:	89a3      	ldrh	r3, [r4, #12]
 8008e54:	d106      	bne.n	8008e64 <__sflush_r+0x68>
 8008e56:	6829      	ldr	r1, [r5, #0]
 8008e58:	291d      	cmp	r1, #29
 8008e5a:	d82b      	bhi.n	8008eb4 <__sflush_r+0xb8>
 8008e5c:	4a29      	ldr	r2, [pc, #164]	; (8008f04 <__sflush_r+0x108>)
 8008e5e:	410a      	asrs	r2, r1
 8008e60:	07d6      	lsls	r6, r2, #31
 8008e62:	d427      	bmi.n	8008eb4 <__sflush_r+0xb8>
 8008e64:	2200      	movs	r2, #0
 8008e66:	6062      	str	r2, [r4, #4]
 8008e68:	04d9      	lsls	r1, r3, #19
 8008e6a:	6922      	ldr	r2, [r4, #16]
 8008e6c:	6022      	str	r2, [r4, #0]
 8008e6e:	d504      	bpl.n	8008e7a <__sflush_r+0x7e>
 8008e70:	1c42      	adds	r2, r0, #1
 8008e72:	d101      	bne.n	8008e78 <__sflush_r+0x7c>
 8008e74:	682b      	ldr	r3, [r5, #0]
 8008e76:	b903      	cbnz	r3, 8008e7a <__sflush_r+0x7e>
 8008e78:	6560      	str	r0, [r4, #84]	; 0x54
 8008e7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e7c:	602f      	str	r7, [r5, #0]
 8008e7e:	2900      	cmp	r1, #0
 8008e80:	d0c9      	beq.n	8008e16 <__sflush_r+0x1a>
 8008e82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e86:	4299      	cmp	r1, r3
 8008e88:	d002      	beq.n	8008e90 <__sflush_r+0x94>
 8008e8a:	4628      	mov	r0, r5
 8008e8c:	f7ff fa8a 	bl	80083a4 <_free_r>
 8008e90:	2000      	movs	r0, #0
 8008e92:	6360      	str	r0, [r4, #52]	; 0x34
 8008e94:	e7c0      	b.n	8008e18 <__sflush_r+0x1c>
 8008e96:	2301      	movs	r3, #1
 8008e98:	4628      	mov	r0, r5
 8008e9a:	47b0      	blx	r6
 8008e9c:	1c41      	adds	r1, r0, #1
 8008e9e:	d1c8      	bne.n	8008e32 <__sflush_r+0x36>
 8008ea0:	682b      	ldr	r3, [r5, #0]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d0c5      	beq.n	8008e32 <__sflush_r+0x36>
 8008ea6:	2b1d      	cmp	r3, #29
 8008ea8:	d001      	beq.n	8008eae <__sflush_r+0xb2>
 8008eaa:	2b16      	cmp	r3, #22
 8008eac:	d101      	bne.n	8008eb2 <__sflush_r+0xb6>
 8008eae:	602f      	str	r7, [r5, #0]
 8008eb0:	e7b1      	b.n	8008e16 <__sflush_r+0x1a>
 8008eb2:	89a3      	ldrh	r3, [r4, #12]
 8008eb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008eb8:	81a3      	strh	r3, [r4, #12]
 8008eba:	e7ad      	b.n	8008e18 <__sflush_r+0x1c>
 8008ebc:	690f      	ldr	r7, [r1, #16]
 8008ebe:	2f00      	cmp	r7, #0
 8008ec0:	d0a9      	beq.n	8008e16 <__sflush_r+0x1a>
 8008ec2:	0793      	lsls	r3, r2, #30
 8008ec4:	680e      	ldr	r6, [r1, #0]
 8008ec6:	bf08      	it	eq
 8008ec8:	694b      	ldreq	r3, [r1, #20]
 8008eca:	600f      	str	r7, [r1, #0]
 8008ecc:	bf18      	it	ne
 8008ece:	2300      	movne	r3, #0
 8008ed0:	eba6 0807 	sub.w	r8, r6, r7
 8008ed4:	608b      	str	r3, [r1, #8]
 8008ed6:	f1b8 0f00 	cmp.w	r8, #0
 8008eda:	dd9c      	ble.n	8008e16 <__sflush_r+0x1a>
 8008edc:	6a21      	ldr	r1, [r4, #32]
 8008ede:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008ee0:	4643      	mov	r3, r8
 8008ee2:	463a      	mov	r2, r7
 8008ee4:	4628      	mov	r0, r5
 8008ee6:	47b0      	blx	r6
 8008ee8:	2800      	cmp	r0, #0
 8008eea:	dc06      	bgt.n	8008efa <__sflush_r+0xfe>
 8008eec:	89a3      	ldrh	r3, [r4, #12]
 8008eee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ef2:	81a3      	strh	r3, [r4, #12]
 8008ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ef8:	e78e      	b.n	8008e18 <__sflush_r+0x1c>
 8008efa:	4407      	add	r7, r0
 8008efc:	eba8 0800 	sub.w	r8, r8, r0
 8008f00:	e7e9      	b.n	8008ed6 <__sflush_r+0xda>
 8008f02:	bf00      	nop
 8008f04:	dfbffffe 	.word	0xdfbffffe

08008f08 <_fflush_r>:
 8008f08:	b538      	push	{r3, r4, r5, lr}
 8008f0a:	690b      	ldr	r3, [r1, #16]
 8008f0c:	4605      	mov	r5, r0
 8008f0e:	460c      	mov	r4, r1
 8008f10:	b913      	cbnz	r3, 8008f18 <_fflush_r+0x10>
 8008f12:	2500      	movs	r5, #0
 8008f14:	4628      	mov	r0, r5
 8008f16:	bd38      	pop	{r3, r4, r5, pc}
 8008f18:	b118      	cbz	r0, 8008f22 <_fflush_r+0x1a>
 8008f1a:	6a03      	ldr	r3, [r0, #32]
 8008f1c:	b90b      	cbnz	r3, 8008f22 <_fflush_r+0x1a>
 8008f1e:	f7ff f85b 	bl	8007fd8 <__sinit>
 8008f22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d0f3      	beq.n	8008f12 <_fflush_r+0xa>
 8008f2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008f2c:	07d0      	lsls	r0, r2, #31
 8008f2e:	d404      	bmi.n	8008f3a <_fflush_r+0x32>
 8008f30:	0599      	lsls	r1, r3, #22
 8008f32:	d402      	bmi.n	8008f3a <_fflush_r+0x32>
 8008f34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f36:	f7ff fa24 	bl	8008382 <__retarget_lock_acquire_recursive>
 8008f3a:	4628      	mov	r0, r5
 8008f3c:	4621      	mov	r1, r4
 8008f3e:	f7ff ff5d 	bl	8008dfc <__sflush_r>
 8008f42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f44:	07da      	lsls	r2, r3, #31
 8008f46:	4605      	mov	r5, r0
 8008f48:	d4e4      	bmi.n	8008f14 <_fflush_r+0xc>
 8008f4a:	89a3      	ldrh	r3, [r4, #12]
 8008f4c:	059b      	lsls	r3, r3, #22
 8008f4e:	d4e1      	bmi.n	8008f14 <_fflush_r+0xc>
 8008f50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f52:	f7ff fa17 	bl	8008384 <__retarget_lock_release_recursive>
 8008f56:	e7dd      	b.n	8008f14 <_fflush_r+0xc>

08008f58 <__swhatbuf_r>:
 8008f58:	b570      	push	{r4, r5, r6, lr}
 8008f5a:	460c      	mov	r4, r1
 8008f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f60:	2900      	cmp	r1, #0
 8008f62:	b096      	sub	sp, #88	; 0x58
 8008f64:	4615      	mov	r5, r2
 8008f66:	461e      	mov	r6, r3
 8008f68:	da0d      	bge.n	8008f86 <__swhatbuf_r+0x2e>
 8008f6a:	89a3      	ldrh	r3, [r4, #12]
 8008f6c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008f70:	f04f 0100 	mov.w	r1, #0
 8008f74:	bf0c      	ite	eq
 8008f76:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008f7a:	2340      	movne	r3, #64	; 0x40
 8008f7c:	2000      	movs	r0, #0
 8008f7e:	6031      	str	r1, [r6, #0]
 8008f80:	602b      	str	r3, [r5, #0]
 8008f82:	b016      	add	sp, #88	; 0x58
 8008f84:	bd70      	pop	{r4, r5, r6, pc}
 8008f86:	466a      	mov	r2, sp
 8008f88:	f000 f8f8 	bl	800917c <_fstat_r>
 8008f8c:	2800      	cmp	r0, #0
 8008f8e:	dbec      	blt.n	8008f6a <__swhatbuf_r+0x12>
 8008f90:	9901      	ldr	r1, [sp, #4]
 8008f92:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008f96:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008f9a:	4259      	negs	r1, r3
 8008f9c:	4159      	adcs	r1, r3
 8008f9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fa2:	e7eb      	b.n	8008f7c <__swhatbuf_r+0x24>

08008fa4 <__smakebuf_r>:
 8008fa4:	898b      	ldrh	r3, [r1, #12]
 8008fa6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008fa8:	079d      	lsls	r5, r3, #30
 8008faa:	4606      	mov	r6, r0
 8008fac:	460c      	mov	r4, r1
 8008fae:	d507      	bpl.n	8008fc0 <__smakebuf_r+0x1c>
 8008fb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008fb4:	6023      	str	r3, [r4, #0]
 8008fb6:	6123      	str	r3, [r4, #16]
 8008fb8:	2301      	movs	r3, #1
 8008fba:	6163      	str	r3, [r4, #20]
 8008fbc:	b002      	add	sp, #8
 8008fbe:	bd70      	pop	{r4, r5, r6, pc}
 8008fc0:	ab01      	add	r3, sp, #4
 8008fc2:	466a      	mov	r2, sp
 8008fc4:	f7ff ffc8 	bl	8008f58 <__swhatbuf_r>
 8008fc8:	9900      	ldr	r1, [sp, #0]
 8008fca:	4605      	mov	r5, r0
 8008fcc:	4630      	mov	r0, r6
 8008fce:	f7ff fa5d 	bl	800848c <_malloc_r>
 8008fd2:	b948      	cbnz	r0, 8008fe8 <__smakebuf_r+0x44>
 8008fd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fd8:	059a      	lsls	r2, r3, #22
 8008fda:	d4ef      	bmi.n	8008fbc <__smakebuf_r+0x18>
 8008fdc:	f023 0303 	bic.w	r3, r3, #3
 8008fe0:	f043 0302 	orr.w	r3, r3, #2
 8008fe4:	81a3      	strh	r3, [r4, #12]
 8008fe6:	e7e3      	b.n	8008fb0 <__smakebuf_r+0xc>
 8008fe8:	89a3      	ldrh	r3, [r4, #12]
 8008fea:	6020      	str	r0, [r4, #0]
 8008fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ff0:	81a3      	strh	r3, [r4, #12]
 8008ff2:	9b00      	ldr	r3, [sp, #0]
 8008ff4:	6163      	str	r3, [r4, #20]
 8008ff6:	9b01      	ldr	r3, [sp, #4]
 8008ff8:	6120      	str	r0, [r4, #16]
 8008ffa:	b15b      	cbz	r3, 8009014 <__smakebuf_r+0x70>
 8008ffc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009000:	4630      	mov	r0, r6
 8009002:	f000 f8cd 	bl	80091a0 <_isatty_r>
 8009006:	b128      	cbz	r0, 8009014 <__smakebuf_r+0x70>
 8009008:	89a3      	ldrh	r3, [r4, #12]
 800900a:	f023 0303 	bic.w	r3, r3, #3
 800900e:	f043 0301 	orr.w	r3, r3, #1
 8009012:	81a3      	strh	r3, [r4, #12]
 8009014:	89a3      	ldrh	r3, [r4, #12]
 8009016:	431d      	orrs	r5, r3
 8009018:	81a5      	strh	r5, [r4, #12]
 800901a:	e7cf      	b.n	8008fbc <__smakebuf_r+0x18>

0800901c <__swbuf_r>:
 800901c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800901e:	460e      	mov	r6, r1
 8009020:	4614      	mov	r4, r2
 8009022:	4605      	mov	r5, r0
 8009024:	b118      	cbz	r0, 800902e <__swbuf_r+0x12>
 8009026:	6a03      	ldr	r3, [r0, #32]
 8009028:	b90b      	cbnz	r3, 800902e <__swbuf_r+0x12>
 800902a:	f7fe ffd5 	bl	8007fd8 <__sinit>
 800902e:	69a3      	ldr	r3, [r4, #24]
 8009030:	60a3      	str	r3, [r4, #8]
 8009032:	89a3      	ldrh	r3, [r4, #12]
 8009034:	071a      	lsls	r2, r3, #28
 8009036:	d525      	bpl.n	8009084 <__swbuf_r+0x68>
 8009038:	6923      	ldr	r3, [r4, #16]
 800903a:	b31b      	cbz	r3, 8009084 <__swbuf_r+0x68>
 800903c:	6823      	ldr	r3, [r4, #0]
 800903e:	6922      	ldr	r2, [r4, #16]
 8009040:	1a98      	subs	r0, r3, r2
 8009042:	6963      	ldr	r3, [r4, #20]
 8009044:	b2f6      	uxtb	r6, r6
 8009046:	4283      	cmp	r3, r0
 8009048:	4637      	mov	r7, r6
 800904a:	dc04      	bgt.n	8009056 <__swbuf_r+0x3a>
 800904c:	4621      	mov	r1, r4
 800904e:	4628      	mov	r0, r5
 8009050:	f7ff ff5a 	bl	8008f08 <_fflush_r>
 8009054:	b9e0      	cbnz	r0, 8009090 <__swbuf_r+0x74>
 8009056:	68a3      	ldr	r3, [r4, #8]
 8009058:	3b01      	subs	r3, #1
 800905a:	60a3      	str	r3, [r4, #8]
 800905c:	6823      	ldr	r3, [r4, #0]
 800905e:	1c5a      	adds	r2, r3, #1
 8009060:	6022      	str	r2, [r4, #0]
 8009062:	701e      	strb	r6, [r3, #0]
 8009064:	6962      	ldr	r2, [r4, #20]
 8009066:	1c43      	adds	r3, r0, #1
 8009068:	429a      	cmp	r2, r3
 800906a:	d004      	beq.n	8009076 <__swbuf_r+0x5a>
 800906c:	89a3      	ldrh	r3, [r4, #12]
 800906e:	07db      	lsls	r3, r3, #31
 8009070:	d506      	bpl.n	8009080 <__swbuf_r+0x64>
 8009072:	2e0a      	cmp	r6, #10
 8009074:	d104      	bne.n	8009080 <__swbuf_r+0x64>
 8009076:	4621      	mov	r1, r4
 8009078:	4628      	mov	r0, r5
 800907a:	f7ff ff45 	bl	8008f08 <_fflush_r>
 800907e:	b938      	cbnz	r0, 8009090 <__swbuf_r+0x74>
 8009080:	4638      	mov	r0, r7
 8009082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009084:	4621      	mov	r1, r4
 8009086:	4628      	mov	r0, r5
 8009088:	f000 f806 	bl	8009098 <__swsetup_r>
 800908c:	2800      	cmp	r0, #0
 800908e:	d0d5      	beq.n	800903c <__swbuf_r+0x20>
 8009090:	f04f 37ff 	mov.w	r7, #4294967295
 8009094:	e7f4      	b.n	8009080 <__swbuf_r+0x64>
	...

08009098 <__swsetup_r>:
 8009098:	b538      	push	{r3, r4, r5, lr}
 800909a:	4b2a      	ldr	r3, [pc, #168]	; (8009144 <__swsetup_r+0xac>)
 800909c:	4605      	mov	r5, r0
 800909e:	6818      	ldr	r0, [r3, #0]
 80090a0:	460c      	mov	r4, r1
 80090a2:	b118      	cbz	r0, 80090ac <__swsetup_r+0x14>
 80090a4:	6a03      	ldr	r3, [r0, #32]
 80090a6:	b90b      	cbnz	r3, 80090ac <__swsetup_r+0x14>
 80090a8:	f7fe ff96 	bl	8007fd8 <__sinit>
 80090ac:	89a3      	ldrh	r3, [r4, #12]
 80090ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80090b2:	0718      	lsls	r0, r3, #28
 80090b4:	d422      	bmi.n	80090fc <__swsetup_r+0x64>
 80090b6:	06d9      	lsls	r1, r3, #27
 80090b8:	d407      	bmi.n	80090ca <__swsetup_r+0x32>
 80090ba:	2309      	movs	r3, #9
 80090bc:	602b      	str	r3, [r5, #0]
 80090be:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80090c2:	81a3      	strh	r3, [r4, #12]
 80090c4:	f04f 30ff 	mov.w	r0, #4294967295
 80090c8:	e034      	b.n	8009134 <__swsetup_r+0x9c>
 80090ca:	0758      	lsls	r0, r3, #29
 80090cc:	d512      	bpl.n	80090f4 <__swsetup_r+0x5c>
 80090ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090d0:	b141      	cbz	r1, 80090e4 <__swsetup_r+0x4c>
 80090d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090d6:	4299      	cmp	r1, r3
 80090d8:	d002      	beq.n	80090e0 <__swsetup_r+0x48>
 80090da:	4628      	mov	r0, r5
 80090dc:	f7ff f962 	bl	80083a4 <_free_r>
 80090e0:	2300      	movs	r3, #0
 80090e2:	6363      	str	r3, [r4, #52]	; 0x34
 80090e4:	89a3      	ldrh	r3, [r4, #12]
 80090e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80090ea:	81a3      	strh	r3, [r4, #12]
 80090ec:	2300      	movs	r3, #0
 80090ee:	6063      	str	r3, [r4, #4]
 80090f0:	6923      	ldr	r3, [r4, #16]
 80090f2:	6023      	str	r3, [r4, #0]
 80090f4:	89a3      	ldrh	r3, [r4, #12]
 80090f6:	f043 0308 	orr.w	r3, r3, #8
 80090fa:	81a3      	strh	r3, [r4, #12]
 80090fc:	6923      	ldr	r3, [r4, #16]
 80090fe:	b94b      	cbnz	r3, 8009114 <__swsetup_r+0x7c>
 8009100:	89a3      	ldrh	r3, [r4, #12]
 8009102:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009106:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800910a:	d003      	beq.n	8009114 <__swsetup_r+0x7c>
 800910c:	4621      	mov	r1, r4
 800910e:	4628      	mov	r0, r5
 8009110:	f7ff ff48 	bl	8008fa4 <__smakebuf_r>
 8009114:	89a0      	ldrh	r0, [r4, #12]
 8009116:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800911a:	f010 0301 	ands.w	r3, r0, #1
 800911e:	d00a      	beq.n	8009136 <__swsetup_r+0x9e>
 8009120:	2300      	movs	r3, #0
 8009122:	60a3      	str	r3, [r4, #8]
 8009124:	6963      	ldr	r3, [r4, #20]
 8009126:	425b      	negs	r3, r3
 8009128:	61a3      	str	r3, [r4, #24]
 800912a:	6923      	ldr	r3, [r4, #16]
 800912c:	b943      	cbnz	r3, 8009140 <__swsetup_r+0xa8>
 800912e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009132:	d1c4      	bne.n	80090be <__swsetup_r+0x26>
 8009134:	bd38      	pop	{r3, r4, r5, pc}
 8009136:	0781      	lsls	r1, r0, #30
 8009138:	bf58      	it	pl
 800913a:	6963      	ldrpl	r3, [r4, #20]
 800913c:	60a3      	str	r3, [r4, #8]
 800913e:	e7f4      	b.n	800912a <__swsetup_r+0x92>
 8009140:	2000      	movs	r0, #0
 8009142:	e7f7      	b.n	8009134 <__swsetup_r+0x9c>
 8009144:	2000010c 	.word	0x2000010c

08009148 <memmove>:
 8009148:	4288      	cmp	r0, r1
 800914a:	b510      	push	{r4, lr}
 800914c:	eb01 0402 	add.w	r4, r1, r2
 8009150:	d902      	bls.n	8009158 <memmove+0x10>
 8009152:	4284      	cmp	r4, r0
 8009154:	4623      	mov	r3, r4
 8009156:	d807      	bhi.n	8009168 <memmove+0x20>
 8009158:	1e43      	subs	r3, r0, #1
 800915a:	42a1      	cmp	r1, r4
 800915c:	d008      	beq.n	8009170 <memmove+0x28>
 800915e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009162:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009166:	e7f8      	b.n	800915a <memmove+0x12>
 8009168:	4402      	add	r2, r0
 800916a:	4601      	mov	r1, r0
 800916c:	428a      	cmp	r2, r1
 800916e:	d100      	bne.n	8009172 <memmove+0x2a>
 8009170:	bd10      	pop	{r4, pc}
 8009172:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009176:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800917a:	e7f7      	b.n	800916c <memmove+0x24>

0800917c <_fstat_r>:
 800917c:	b538      	push	{r3, r4, r5, lr}
 800917e:	4d07      	ldr	r5, [pc, #28]	; (800919c <_fstat_r+0x20>)
 8009180:	2300      	movs	r3, #0
 8009182:	4604      	mov	r4, r0
 8009184:	4608      	mov	r0, r1
 8009186:	4611      	mov	r1, r2
 8009188:	602b      	str	r3, [r5, #0]
 800918a:	f7fa ff86 	bl	800409a <_fstat>
 800918e:	1c43      	adds	r3, r0, #1
 8009190:	d102      	bne.n	8009198 <_fstat_r+0x1c>
 8009192:	682b      	ldr	r3, [r5, #0]
 8009194:	b103      	cbz	r3, 8009198 <_fstat_r+0x1c>
 8009196:	6023      	str	r3, [r4, #0]
 8009198:	bd38      	pop	{r3, r4, r5, pc}
 800919a:	bf00      	nop
 800919c:	20005300 	.word	0x20005300

080091a0 <_isatty_r>:
 80091a0:	b538      	push	{r3, r4, r5, lr}
 80091a2:	4d06      	ldr	r5, [pc, #24]	; (80091bc <_isatty_r+0x1c>)
 80091a4:	2300      	movs	r3, #0
 80091a6:	4604      	mov	r4, r0
 80091a8:	4608      	mov	r0, r1
 80091aa:	602b      	str	r3, [r5, #0]
 80091ac:	f7fa ff76 	bl	800409c <_isatty>
 80091b0:	1c43      	adds	r3, r0, #1
 80091b2:	d102      	bne.n	80091ba <_isatty_r+0x1a>
 80091b4:	682b      	ldr	r3, [r5, #0]
 80091b6:	b103      	cbz	r3, 80091ba <_isatty_r+0x1a>
 80091b8:	6023      	str	r3, [r4, #0]
 80091ba:	bd38      	pop	{r3, r4, r5, pc}
 80091bc:	20005300 	.word	0x20005300

080091c0 <_sbrk_r>:
 80091c0:	b538      	push	{r3, r4, r5, lr}
 80091c2:	4d06      	ldr	r5, [pc, #24]	; (80091dc <_sbrk_r+0x1c>)
 80091c4:	2300      	movs	r3, #0
 80091c6:	4604      	mov	r4, r0
 80091c8:	4608      	mov	r0, r1
 80091ca:	602b      	str	r3, [r5, #0]
 80091cc:	f000 fa3c 	bl	8009648 <_sbrk>
 80091d0:	1c43      	adds	r3, r0, #1
 80091d2:	d102      	bne.n	80091da <_sbrk_r+0x1a>
 80091d4:	682b      	ldr	r3, [r5, #0]
 80091d6:	b103      	cbz	r3, 80091da <_sbrk_r+0x1a>
 80091d8:	6023      	str	r3, [r4, #0]
 80091da:	bd38      	pop	{r3, r4, r5, pc}
 80091dc:	20005300 	.word	0x20005300

080091e0 <_realloc_r>:
 80091e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091e4:	4680      	mov	r8, r0
 80091e6:	4614      	mov	r4, r2
 80091e8:	460e      	mov	r6, r1
 80091ea:	b921      	cbnz	r1, 80091f6 <_realloc_r+0x16>
 80091ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091f0:	4611      	mov	r1, r2
 80091f2:	f7ff b94b 	b.w	800848c <_malloc_r>
 80091f6:	b92a      	cbnz	r2, 8009204 <_realloc_r+0x24>
 80091f8:	f7ff f8d4 	bl	80083a4 <_free_r>
 80091fc:	4625      	mov	r5, r4
 80091fe:	4628      	mov	r0, r5
 8009200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009204:	f000 f81b 	bl	800923e <_malloc_usable_size_r>
 8009208:	4284      	cmp	r4, r0
 800920a:	4607      	mov	r7, r0
 800920c:	d802      	bhi.n	8009214 <_realloc_r+0x34>
 800920e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009212:	d812      	bhi.n	800923a <_realloc_r+0x5a>
 8009214:	4621      	mov	r1, r4
 8009216:	4640      	mov	r0, r8
 8009218:	f7ff f938 	bl	800848c <_malloc_r>
 800921c:	4605      	mov	r5, r0
 800921e:	2800      	cmp	r0, #0
 8009220:	d0ed      	beq.n	80091fe <_realloc_r+0x1e>
 8009222:	42bc      	cmp	r4, r7
 8009224:	4622      	mov	r2, r4
 8009226:	4631      	mov	r1, r6
 8009228:	bf28      	it	cs
 800922a:	463a      	movcs	r2, r7
 800922c:	f7ff f8ab 	bl	8008386 <memcpy>
 8009230:	4631      	mov	r1, r6
 8009232:	4640      	mov	r0, r8
 8009234:	f7ff f8b6 	bl	80083a4 <_free_r>
 8009238:	e7e1      	b.n	80091fe <_realloc_r+0x1e>
 800923a:	4635      	mov	r5, r6
 800923c:	e7df      	b.n	80091fe <_realloc_r+0x1e>

0800923e <_malloc_usable_size_r>:
 800923e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009242:	1f18      	subs	r0, r3, #4
 8009244:	2b00      	cmp	r3, #0
 8009246:	bfbc      	itt	lt
 8009248:	580b      	ldrlt	r3, [r1, r0]
 800924a:	18c0      	addlt	r0, r0, r3
 800924c:	4770      	bx	lr

0800924e <atan2>:
 800924e:	f000 b92b 	b.w	80094a8 <__ieee754_atan2>
 8009252:	0000      	movs	r0, r0
 8009254:	0000      	movs	r0, r0
	...

08009258 <sqrt>:
 8009258:	b508      	push	{r3, lr}
 800925a:	ed2d 8b04 	vpush	{d8-d9}
 800925e:	eeb0 8b40 	vmov.f64	d8, d0
 8009262:	f000 f91c 	bl	800949e <__ieee754_sqrt>
 8009266:	eeb4 8b48 	vcmp.f64	d8, d8
 800926a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800926e:	d60c      	bvs.n	800928a <sqrt+0x32>
 8009270:	ed9f 9b07 	vldr	d9, [pc, #28]	; 8009290 <sqrt+0x38>
 8009274:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8009278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800927c:	d505      	bpl.n	800928a <sqrt+0x32>
 800927e:	f000 f9d5 	bl	800962c <__errno>
 8009282:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8009286:	2321      	movs	r3, #33	; 0x21
 8009288:	6003      	str	r3, [r0, #0]
 800928a:	ecbd 8b04 	vpop	{d8-d9}
 800928e:	bd08      	pop	{r3, pc}
	...

08009298 <atan>:
 8009298:	b538      	push	{r3, r4, r5, lr}
 800929a:	eeb0 7b40 	vmov.f64	d7, d0
 800929e:	ee17 5a90 	vmov	r5, s15
 80092a2:	4b73      	ldr	r3, [pc, #460]	; (8009470 <atan+0x1d8>)
 80092a4:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80092a8:	429c      	cmp	r4, r3
 80092aa:	dd13      	ble.n	80092d4 <atan+0x3c>
 80092ac:	4b71      	ldr	r3, [pc, #452]	; (8009474 <atan+0x1dc>)
 80092ae:	429c      	cmp	r4, r3
 80092b0:	dc03      	bgt.n	80092ba <atan+0x22>
 80092b2:	d107      	bne.n	80092c4 <atan+0x2c>
 80092b4:	ee10 3a10 	vmov	r3, s0
 80092b8:	b123      	cbz	r3, 80092c4 <atan+0x2c>
 80092ba:	ee37 7b07 	vadd.f64	d7, d7, d7
 80092be:	eeb0 0b47 	vmov.f64	d0, d7
 80092c2:	bd38      	pop	{r3, r4, r5, pc}
 80092c4:	ed9f 7b4e 	vldr	d7, [pc, #312]	; 8009400 <atan+0x168>
 80092c8:	ed9f 6b4f 	vldr	d6, [pc, #316]	; 8009408 <atan+0x170>
 80092cc:	2d00      	cmp	r5, #0
 80092ce:	fe37 7b06 	vselgt.f64	d7, d7, d6
 80092d2:	e7f4      	b.n	80092be <atan+0x26>
 80092d4:	4b68      	ldr	r3, [pc, #416]	; (8009478 <atan+0x1e0>)
 80092d6:	429c      	cmp	r4, r3
 80092d8:	dc11      	bgt.n	80092fe <atan+0x66>
 80092da:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80092de:	429c      	cmp	r4, r3
 80092e0:	dc0a      	bgt.n	80092f8 <atan+0x60>
 80092e2:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80092e6:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8009410 <atan+0x178>
 80092ea:	ee30 6b06 	vadd.f64	d6, d0, d6
 80092ee:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80092f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092f6:	dce2      	bgt.n	80092be <atan+0x26>
 80092f8:	f04f 33ff 	mov.w	r3, #4294967295
 80092fc:	e013      	b.n	8009326 <atan+0x8e>
 80092fe:	f000 f8c5 	bl	800948c <fabs>
 8009302:	4b5e      	ldr	r3, [pc, #376]	; (800947c <atan+0x1e4>)
 8009304:	429c      	cmp	r4, r3
 8009306:	dc4f      	bgt.n	80093a8 <atan+0x110>
 8009308:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800930c:	429c      	cmp	r4, r3
 800930e:	dc41      	bgt.n	8009394 <atan+0xfc>
 8009310:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8009314:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 8009318:	2300      	movs	r3, #0
 800931a:	eea0 5b07 	vfma.f64	d5, d0, d7
 800931e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8009322:	ee85 7b00 	vdiv.f64	d7, d5, d0
 8009326:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8009418 <atan+0x180>
 800932a:	ee27 4b07 	vmul.f64	d4, d7, d7
 800932e:	ee24 5b04 	vmul.f64	d5, d4, d4
 8009332:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8009420 <atan+0x188>
 8009336:	eea5 3b06 	vfma.f64	d3, d5, d6
 800933a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8009428 <atan+0x190>
 800933e:	eea3 6b05 	vfma.f64	d6, d3, d5
 8009342:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8009430 <atan+0x198>
 8009346:	eea6 3b05 	vfma.f64	d3, d6, d5
 800934a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8009438 <atan+0x1a0>
 800934e:	eea3 6b05 	vfma.f64	d6, d3, d5
 8009352:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8009440 <atan+0x1a8>
 8009356:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8009448 <atan+0x1b0>
 800935a:	eea6 3b05 	vfma.f64	d3, d6, d5
 800935e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8009450 <atan+0x1b8>
 8009362:	eea5 2b06 	vfma.f64	d2, d5, d6
 8009366:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8009458 <atan+0x1c0>
 800936a:	eea2 6b05 	vfma.f64	d6, d2, d5
 800936e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8009460 <atan+0x1c8>
 8009372:	eea6 2b05 	vfma.f64	d2, d6, d5
 8009376:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8009468 <atan+0x1d0>
 800937a:	1c5a      	adds	r2, r3, #1
 800937c:	eea2 6b05 	vfma.f64	d6, d2, d5
 8009380:	ee26 6b05 	vmul.f64	d6, d6, d5
 8009384:	eea3 6b04 	vfma.f64	d6, d3, d4
 8009388:	ee27 6b06 	vmul.f64	d6, d7, d6
 800938c:	d121      	bne.n	80093d2 <atan+0x13a>
 800938e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009392:	e794      	b.n	80092be <atan+0x26>
 8009394:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8009398:	2301      	movs	r3, #1
 800939a:	ee30 5b47 	vsub.f64	d5, d0, d7
 800939e:	ee30 0b07 	vadd.f64	d0, d0, d7
 80093a2:	ee85 7b00 	vdiv.f64	d7, d5, d0
 80093a6:	e7be      	b.n	8009326 <atan+0x8e>
 80093a8:	4b35      	ldr	r3, [pc, #212]	; (8009480 <atan+0x1e8>)
 80093aa:	429c      	cmp	r4, r3
 80093ac:	da0b      	bge.n	80093c6 <atan+0x12e>
 80093ae:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80093b2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80093b6:	ee30 5b47 	vsub.f64	d5, d0, d7
 80093ba:	eea0 6b07 	vfma.f64	d6, d0, d7
 80093be:	2302      	movs	r3, #2
 80093c0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80093c4:	e7af      	b.n	8009326 <atan+0x8e>
 80093c6:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80093ca:	2303      	movs	r3, #3
 80093cc:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80093d0:	e7a9      	b.n	8009326 <atan+0x8e>
 80093d2:	4a2c      	ldr	r2, [pc, #176]	; (8009484 <atan+0x1ec>)
 80093d4:	492c      	ldr	r1, [pc, #176]	; (8009488 <atan+0x1f0>)
 80093d6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80093da:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80093de:	ed93 5b00 	vldr	d5, [r3]
 80093e2:	ee36 6b45 	vsub.f64	d6, d6, d5
 80093e6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80093ea:	ed92 7b00 	vldr	d7, [r2]
 80093ee:	2d00      	cmp	r5, #0
 80093f0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80093f4:	bfb8      	it	lt
 80093f6:	eeb1 7b47 	vneglt.f64	d7, d7
 80093fa:	e760      	b.n	80092be <atan+0x26>
 80093fc:	f3af 8000 	nop.w
 8009400:	54442d18 	.word	0x54442d18
 8009404:	3ff921fb 	.word	0x3ff921fb
 8009408:	54442d18 	.word	0x54442d18
 800940c:	bff921fb 	.word	0xbff921fb
 8009410:	8800759c 	.word	0x8800759c
 8009414:	7e37e43c 	.word	0x7e37e43c
 8009418:	e322da11 	.word	0xe322da11
 800941c:	3f90ad3a 	.word	0x3f90ad3a
 8009420:	24760deb 	.word	0x24760deb
 8009424:	3fa97b4b 	.word	0x3fa97b4b
 8009428:	a0d03d51 	.word	0xa0d03d51
 800942c:	3fb10d66 	.word	0x3fb10d66
 8009430:	c54c206e 	.word	0xc54c206e
 8009434:	3fb745cd 	.word	0x3fb745cd
 8009438:	920083ff 	.word	0x920083ff
 800943c:	3fc24924 	.word	0x3fc24924
 8009440:	5555550d 	.word	0x5555550d
 8009444:	3fd55555 	.word	0x3fd55555
 8009448:	52defd9a 	.word	0x52defd9a
 800944c:	bfadde2d 	.word	0xbfadde2d
 8009450:	2c6a6c2f 	.word	0x2c6a6c2f
 8009454:	bfa2b444 	.word	0xbfa2b444
 8009458:	af749a6d 	.word	0xaf749a6d
 800945c:	bfb3b0f2 	.word	0xbfb3b0f2
 8009460:	fe231671 	.word	0xfe231671
 8009464:	bfbc71c6 	.word	0xbfbc71c6
 8009468:	9998ebc4 	.word	0x9998ebc4
 800946c:	bfc99999 	.word	0xbfc99999
 8009470:	440fffff 	.word	0x440fffff
 8009474:	7ff00000 	.word	0x7ff00000
 8009478:	3fdbffff 	.word	0x3fdbffff
 800947c:	3ff2ffff 	.word	0x3ff2ffff
 8009480:	40038000 	.word	0x40038000
 8009484:	0800b380 	.word	0x0800b380
 8009488:	0800b3a0 	.word	0x0800b3a0

0800948c <fabs>:
 800948c:	ec51 0b10 	vmov	r0, r1, d0
 8009490:	ee10 2a10 	vmov	r2, s0
 8009494:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009498:	ec43 2b10 	vmov	d0, r2, r3
 800949c:	4770      	bx	lr

0800949e <__ieee754_sqrt>:
 800949e:	eeb1 0bc0 	vsqrt.f64	d0, d0
 80094a2:	4770      	bx	lr
 80094a4:	0000      	movs	r0, r0
	...

080094a8 <__ieee754_atan2>:
 80094a8:	ee11 1a10 	vmov	r1, s2
 80094ac:	eeb0 7b40 	vmov.f64	d7, d0
 80094b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094b2:	ee11 5a90 	vmov	r5, s3
 80094b6:	424b      	negs	r3, r1
 80094b8:	4f59      	ldr	r7, [pc, #356]	; (8009620 <__ieee754_atan2+0x178>)
 80094ba:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80094be:	430b      	orrs	r3, r1
 80094c0:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80094c4:	42bb      	cmp	r3, r7
 80094c6:	d80d      	bhi.n	80094e4 <__ieee754_atan2+0x3c>
 80094c8:	ee10 ca10 	vmov	ip, s0
 80094cc:	ee17 6a90 	vmov	r6, s15
 80094d0:	f1cc 0000 	rsb	r0, ip, #0
 80094d4:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80094d8:	ea40 000c 	orr.w	r0, r0, ip
 80094dc:	ea43 70d0 	orr.w	r0, r3, r0, lsr #31
 80094e0:	42b8      	cmp	r0, r7
 80094e2:	d904      	bls.n	80094ee <__ieee754_atan2+0x46>
 80094e4:	ee37 7b01 	vadd.f64	d7, d7, d1
 80094e8:	eeb0 0b47 	vmov.f64	d0, d7
 80094ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094ee:	f105 4040 	add.w	r0, r5, #3221225472	; 0xc0000000
 80094f2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80094f6:	4308      	orrs	r0, r1
 80094f8:	d103      	bne.n	8009502 <__ieee754_atan2+0x5a>
 80094fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80094fe:	f7ff becb 	b.w	8009298 <atan>
 8009502:	17ac      	asrs	r4, r5, #30
 8009504:	f004 0402 	and.w	r4, r4, #2
 8009508:	ea53 0c0c 	orrs.w	ip, r3, ip
 800950c:	ea44 74d6 	orr.w	r4, r4, r6, lsr #31
 8009510:	d107      	bne.n	8009522 <__ieee754_atan2+0x7a>
 8009512:	2c02      	cmp	r4, #2
 8009514:	d05c      	beq.n	80095d0 <__ieee754_atan2+0x128>
 8009516:	ed9f 6b34 	vldr	d6, [pc, #208]	; 80095e8 <__ieee754_atan2+0x140>
 800951a:	2c03      	cmp	r4, #3
 800951c:	fe06 7b00 	vseleq.f64	d7, d6, d0
 8009520:	e7e2      	b.n	80094e8 <__ieee754_atan2+0x40>
 8009522:	4311      	orrs	r1, r2
 8009524:	d107      	bne.n	8009536 <__ieee754_atan2+0x8e>
 8009526:	ed9f 7b32 	vldr	d7, [pc, #200]	; 80095f0 <__ieee754_atan2+0x148>
 800952a:	ed9f 6b33 	vldr	d6, [pc, #204]	; 80095f8 <__ieee754_atan2+0x150>
 800952e:	2e00      	cmp	r6, #0
 8009530:	fe27 7b06 	vselge.f64	d7, d7, d6
 8009534:	e7d8      	b.n	80094e8 <__ieee754_atan2+0x40>
 8009536:	42ba      	cmp	r2, r7
 8009538:	d10f      	bne.n	800955a <__ieee754_atan2+0xb2>
 800953a:	4293      	cmp	r3, r2
 800953c:	f104 34ff 	add.w	r4, r4, #4294967295
 8009540:	d107      	bne.n	8009552 <__ieee754_atan2+0xaa>
 8009542:	2c02      	cmp	r4, #2
 8009544:	d847      	bhi.n	80095d6 <__ieee754_atan2+0x12e>
 8009546:	4b37      	ldr	r3, [pc, #220]	; (8009624 <__ieee754_atan2+0x17c>)
 8009548:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800954c:	ed93 7b00 	vldr	d7, [r3]
 8009550:	e7ca      	b.n	80094e8 <__ieee754_atan2+0x40>
 8009552:	2c02      	cmp	r4, #2
 8009554:	d842      	bhi.n	80095dc <__ieee754_atan2+0x134>
 8009556:	4b34      	ldr	r3, [pc, #208]	; (8009628 <__ieee754_atan2+0x180>)
 8009558:	e7f6      	b.n	8009548 <__ieee754_atan2+0xa0>
 800955a:	42bb      	cmp	r3, r7
 800955c:	d0e3      	beq.n	8009526 <__ieee754_atan2+0x7e>
 800955e:	1a9b      	subs	r3, r3, r2
 8009560:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8009564:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009568:	da1a      	bge.n	80095a0 <__ieee754_atan2+0xf8>
 800956a:	2d00      	cmp	r5, #0
 800956c:	da01      	bge.n	8009572 <__ieee754_atan2+0xca>
 800956e:	323c      	adds	r2, #60	; 0x3c
 8009570:	db19      	blt.n	80095a6 <__ieee754_atan2+0xfe>
 8009572:	ee87 0b01 	vdiv.f64	d0, d7, d1
 8009576:	f7ff ff89 	bl	800948c <fabs>
 800957a:	f7ff fe8d 	bl	8009298 <atan>
 800957e:	eeb0 7b40 	vmov.f64	d7, d0
 8009582:	2c01      	cmp	r4, #1
 8009584:	d012      	beq.n	80095ac <__ieee754_atan2+0x104>
 8009586:	2c02      	cmp	r4, #2
 8009588:	d019      	beq.n	80095be <__ieee754_atan2+0x116>
 800958a:	2c00      	cmp	r4, #0
 800958c:	d0ac      	beq.n	80094e8 <__ieee754_atan2+0x40>
 800958e:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8009600 <__ieee754_atan2+0x158>
 8009592:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009596:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8009608 <__ieee754_atan2+0x160>
 800959a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800959e:	e7a3      	b.n	80094e8 <__ieee754_atan2+0x40>
 80095a0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80095f0 <__ieee754_atan2+0x148>
 80095a4:	e7ed      	b.n	8009582 <__ieee754_atan2+0xda>
 80095a6:	ed9f 7b1a 	vldr	d7, [pc, #104]	; 8009610 <__ieee754_atan2+0x168>
 80095aa:	e7ea      	b.n	8009582 <__ieee754_atan2+0xda>
 80095ac:	ee17 1a90 	vmov	r1, s15
 80095b0:	ec53 2b17 	vmov	r2, r3, d7
 80095b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80095b8:	ec43 2b17 	vmov	d7, r2, r3
 80095bc:	e794      	b.n	80094e8 <__ieee754_atan2+0x40>
 80095be:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8009600 <__ieee754_atan2+0x158>
 80095c2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80095c6:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8009608 <__ieee754_atan2+0x160>
 80095ca:	ee36 7b47 	vsub.f64	d7, d6, d7
 80095ce:	e78b      	b.n	80094e8 <__ieee754_atan2+0x40>
 80095d0:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8009608 <__ieee754_atan2+0x160>
 80095d4:	e788      	b.n	80094e8 <__ieee754_atan2+0x40>
 80095d6:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8009618 <__ieee754_atan2+0x170>
 80095da:	e785      	b.n	80094e8 <__ieee754_atan2+0x40>
 80095dc:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8009610 <__ieee754_atan2+0x168>
 80095e0:	e782      	b.n	80094e8 <__ieee754_atan2+0x40>
 80095e2:	bf00      	nop
 80095e4:	f3af 8000 	nop.w
 80095e8:	54442d18 	.word	0x54442d18
 80095ec:	c00921fb 	.word	0xc00921fb
 80095f0:	54442d18 	.word	0x54442d18
 80095f4:	3ff921fb 	.word	0x3ff921fb
 80095f8:	54442d18 	.word	0x54442d18
 80095fc:	bff921fb 	.word	0xbff921fb
 8009600:	33145c07 	.word	0x33145c07
 8009604:	3ca1a626 	.word	0x3ca1a626
 8009608:	54442d18 	.word	0x54442d18
 800960c:	400921fb 	.word	0x400921fb
	...
 8009618:	54442d18 	.word	0x54442d18
 800961c:	3fe921fb 	.word	0x3fe921fb
 8009620:	7ff00000 	.word	0x7ff00000
 8009624:	0800b3c0 	.word	0x0800b3c0
 8009628:	0800b3d8 	.word	0x0800b3d8

0800962c <__errno>:
 800962c:	4b01      	ldr	r3, [pc, #4]	; (8009634 <__errno+0x8>)
 800962e:	6818      	ldr	r0, [r3, #0]
 8009630:	4770      	bx	lr
 8009632:	bf00      	nop
 8009634:	2000010c 	.word	0x2000010c

08009638 <_close>:
 8009638:	4b02      	ldr	r3, [pc, #8]	; (8009644 <_close+0xc>)
 800963a:	2258      	movs	r2, #88	; 0x58
 800963c:	601a      	str	r2, [r3, #0]
 800963e:	f04f 30ff 	mov.w	r0, #4294967295
 8009642:	4770      	bx	lr
 8009644:	20005300 	.word	0x20005300

08009648 <_sbrk>:
 8009648:	4a04      	ldr	r2, [pc, #16]	; (800965c <_sbrk+0x14>)
 800964a:	6811      	ldr	r1, [r2, #0]
 800964c:	4603      	mov	r3, r0
 800964e:	b909      	cbnz	r1, 8009654 <_sbrk+0xc>
 8009650:	4903      	ldr	r1, [pc, #12]	; (8009660 <_sbrk+0x18>)
 8009652:	6011      	str	r1, [r2, #0]
 8009654:	6810      	ldr	r0, [r2, #0]
 8009656:	4403      	add	r3, r0
 8009658:	6013      	str	r3, [r2, #0]
 800965a:	4770      	bx	lr
 800965c:	20005310 	.word	0x20005310
 8009660:	20005318 	.word	0x20005318

08009664 <_init>:
 8009664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009666:	bf00      	nop
 8009668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800966a:	bc08      	pop	{r3}
 800966c:	469e      	mov	lr, r3
 800966e:	4770      	bx	lr

08009670 <_fini>:
 8009670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009672:	bf00      	nop
 8009674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009676:	bc08      	pop	{r3}
 8009678:	469e      	mov	lr, r3
 800967a:	4770      	bx	lr
