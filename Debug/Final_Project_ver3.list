
Final_Project_ver3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b68  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c3c  08007d68  08007d68  00017d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099a4  080099a4  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080099a4  080099a4  000199a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099ac  080099ac  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099ac  080099ac  000199ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099b0  080099b0  000199b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080099b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f9c  20000080  08009a34  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000404  2000501c  08009a34  0002501c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY
 13 .debug_info   00035464  00000000  00000000  000200f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005a15  00000000  00000000  00055555  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00018b02  00000000  00000000  0005af6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002108  00000000  00000000  00073a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001a31  00000000  00000000  00075b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003398d  00000000  00000000  000775a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000379a2  00000000  00000000  000aaf36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0013924c  00000000  00000000  000e28d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006908  00000000  00000000  0021bb24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  0022242c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000080 	.word	0x20000080
 800021c:	00000000 	.word	0x00000000
 8000220:	08007d50 	.word	0x08007d50

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000084 	.word	0x20000084
 800023c:	08007d50 	.word	0x08007d50

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <NT35510_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t NT35510_Init(uint32_t ColorCoding, uint32_t orientation)
{
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	b0b1      	sub	sp, #196	; 0xc4
 80005e0:	4604      	mov	r4, r0
 80005e2:	460d      	mov	r5, r1
  NT35510_IO_Delay(120);
 80005e4:	2078      	movs	r0, #120	; 0x78
 80005e6:	f000 f971 	bl	80008cc <NT35510_IO_Delay>

/* ************************************************************************** */
/* Proprietary Initialization                                                 */
/* ************************************************************************** */
  const uint8_t nt35510_reg[]   = {0x55, 0xAA, 0x52, 0x08, 0x01, 0xF0};
 80005ea:	4ba9      	ldr	r3, [pc, #676]	; (8000890 <NT35510_Init+0x2b4>)
 80005ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 80005f0:	902e      	str	r0, [sp, #184]	; 0xb8
 80005f2:	f8ad 10bc 	strh.w	r1, [sp, #188]	; 0xbc
  const uint8_t nt35510_reg1[]  = {0x03, 0x03, 0x03, 0xB0};
 80005f6:	4ba7      	ldr	r3, [pc, #668]	; (8000894 <NT35510_Init+0x2b8>)
 80005f8:	932d      	str	r3, [sp, #180]	; 0xb4
  const uint8_t nt35510_reg2[]  = {0x46, 0x46, 0x46, 0xB6};
 80005fa:	4ba7      	ldr	r3, [pc, #668]	; (8000898 <NT35510_Init+0x2bc>)
 80005fc:	932c      	str	r3, [sp, #176]	; 0xb0
  const uint8_t nt35510_reg3[]  = {0x03, 0x03, 0x03, 0xB1};
 80005fe:	4ba7      	ldr	r3, [pc, #668]	; (800089c <NT35510_Init+0x2c0>)
 8000600:	932b      	str	r3, [sp, #172]	; 0xac
  const uint8_t nt35510_reg4[]  = {0x36, 0x36, 0x36, 0xB7};
 8000602:	4ba7      	ldr	r3, [pc, #668]	; (80008a0 <NT35510_Init+0x2c4>)
 8000604:	932a      	str	r3, [sp, #168]	; 0xa8
  const uint8_t nt35510_reg5[]  = {0x00, 0x00, 0x02, 0xB2};
 8000606:	4ba7      	ldr	r3, [pc, #668]	; (80008a4 <NT35510_Init+0x2c8>)
 8000608:	9329      	str	r3, [sp, #164]	; 0xa4
  const uint8_t nt35510_reg6[]  = {0x26, 0x26, 0x26, 0xB8};
 800060a:	4ba7      	ldr	r3, [pc, #668]	; (80008a8 <NT35510_Init+0x2cc>)
 800060c:	9328      	str	r3, [sp, #160]	; 0xa0
  const uint8_t nt35510_reg7[]  = {0xBF, 0x01};
 800060e:	f240 13bf 	movw	r3, #447	; 0x1bf
 8000612:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
  const uint8_t nt35510_reg8[]  = {0x09, 0x09, 0x09, 0xB3};
 8000616:	4ba5      	ldr	r3, [pc, #660]	; (80008ac <NT35510_Init+0x2d0>)
 8000618:	9326      	str	r3, [sp, #152]	; 0x98
  const uint8_t nt35510_reg9[]  = {0x36, 0x36, 0x36, 0xB9};
 800061a:	4ba5      	ldr	r3, [pc, #660]	; (80008b0 <NT35510_Init+0x2d4>)
 800061c:	9325      	str	r3, [sp, #148]	; 0x94
  const uint8_t nt35510_reg10[] = {0x08, 0x08, 0x08, 0xB5};
 800061e:	4ba5      	ldr	r3, [pc, #660]	; (80008b4 <NT35510_Init+0x2d8>)
 8000620:	9324      	str	r3, [sp, #144]	; 0x90
  const uint8_t nt35510_reg12[] = {0x26, 0x26, 0x26, 0xBA};
 8000622:	4ba5      	ldr	r3, [pc, #660]	; (80008b8 <NT35510_Init+0x2dc>)
 8000624:	9323      	str	r3, [sp, #140]	; 0x8c
  const uint8_t nt35510_reg13[] = {0x00, 0x80, 0x00, 0xBC};
 8000626:	4ba5      	ldr	r3, [pc, #660]	; (80008bc <NT35510_Init+0x2e0>)
 8000628:	9322      	str	r3, [sp, #136]	; 0x88
  const uint8_t nt35510_reg14[] = {0x00, 0x80, 0x00, 0xBD};
 800062a:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 800062e:	9321      	str	r3, [sp, #132]	; 0x84
  const uint8_t nt35510_reg15[] = {0x00, 0x50, 0xBE};
 8000630:	4ba3      	ldr	r3, [pc, #652]	; (80008c0 <NT35510_Init+0x2e4>)
 8000632:	461a      	mov	r2, r3
 8000634:	f852 1b04 	ldr.w	r1, [r2], #4
 8000638:	f8ad 1080 	strh.w	r1, [sp, #128]	; 0x80
 800063c:	0c09      	lsrs	r1, r1, #16
 800063e:	f88d 1082 	strb.w	r1, [sp, #130]	; 0x82
  const uint8_t nt35510_reg16[] = {0x55, 0xAA, 0x52, 0x08, 0x00, 0xF0};
 8000642:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000646:	901e      	str	r0, [sp, #120]	; 0x78
 8000648:	f8ad 107c 	strh.w	r1, [sp, #124]	; 0x7c
  const uint8_t nt35510_reg17[] = {0xFC, 0x00, 0xB1};
 800064c:	68da      	ldr	r2, [r3, #12]
 800064e:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
 8000652:	0c12      	lsrs	r2, r2, #16
 8000654:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
  const uint8_t nt35510_reg18[] = {0xB6, 0x03};
 8000658:	f240 32b6 	movw	r2, #950	; 0x3b6
 800065c:	f8ad 2070 	strh.w	r2, [sp, #112]	; 0x70
  const uint8_t nt35510_reg19[] = {0xB5, 0x51};
 8000660:	f245 12b5 	movw	r2, #20917	; 0x51b5
 8000664:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
  const uint8_t nt35510_reg20[] = {0x00, 0x00, 0xB7};
 8000668:	691a      	ldr	r2, [r3, #16]
 800066a:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
 800066e:	0c12      	lsrs	r2, r2, #16
 8000670:	f88d 206a 	strb.w	r2, [sp, #106]	; 0x6a
  const uint8_t nt35510_reg21[] = {0x01, 0x02, 0x02, 0x02, 0xB8};
 8000674:	4a93      	ldr	r2, [pc, #588]	; (80008c4 <NT35510_Init+0x2e8>)
 8000676:	e892 0003 	ldmia.w	r2, {r0, r1}
 800067a:	9018      	str	r0, [sp, #96]	; 0x60
 800067c:	f88d 1064 	strb.w	r1, [sp, #100]	; 0x64
  const uint8_t nt35510_reg22[] = {0x00, 0x00, 0x00, 0xBC};
 8000680:	f04f 423c 	mov.w	r2, #3154116608	; 0xbc000000
 8000684:	9217      	str	r2, [sp, #92]	; 0x5c
  const uint8_t nt35510_reg23[] = {0x03, 0x00, 0x00, 0xCC};
 8000686:	4a90      	ldr	r2, [pc, #576]	; (80008c8 <NT35510_Init+0x2ec>)
 8000688:	9216      	str	r2, [sp, #88]	; 0x58
  const uint8_t nt35510_reg24[] = {0xBA, 0x01};
 800068a:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
 800068e:	f8ad 2054 	strh.w	r2, [sp, #84]	; 0x54
  const uint8_t nt35510_madctl_portrait[] = {NT35510_CMD_MADCTL ,0x00};
 8000692:	2236      	movs	r2, #54	; 0x36
 8000694:	f8ad 2050 	strh.w	r2, [sp, #80]	; 0x50
  const uint8_t nt35510_caset_portrait[] = {0x00, 0x00, 0x01, 0xDF ,NT35510_CMD_CASET};
 8000698:	f103 0214 	add.w	r2, r3, #20
 800069c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006a0:	9012      	str	r0, [sp, #72]	; 0x48
 80006a2:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
  const uint8_t nt35510_raset_portrait[] = {0x00, 0x00, 0x03, 0x1F ,NT35510_CMD_RASET};
 80006a6:	f103 021c 	add.w	r2, r3, #28
 80006aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006ae:	9010      	str	r0, [sp, #64]	; 0x40
 80006b0:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
  const uint8_t nt35510_madctl_landscape[] = {NT35510_CMD_MADCTL, 0x60};
 80006b4:	f246 0236 	movw	r2, #24630	; 0x6036
 80006b8:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
  const uint8_t nt35510_caset_landscape[] = {0x00, 0x00, 0x03, 0x1F ,NT35510_CMD_CASET};
 80006bc:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80006c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006c4:	900d      	str	r0, [sp, #52]	; 0x34
 80006c6:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  const uint8_t nt35510_raset_landscape[] = {0x00, 0x00, 0x01, 0xDF ,NT35510_CMD_RASET};
 80006ca:	332c      	adds	r3, #44	; 0x2c
 80006cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006d0:	900b      	str	r0, [sp, #44]	; 0x2c
 80006d2:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
  const uint8_t nt35510_reg26[] = {NT35510_CMD_TEEON, 0x00};  /* Tear on */
 80006d6:	2335      	movs	r3, #53	; 0x35
 80006d8:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
  const uint8_t nt35510_reg27[] = {NT35510_CMD_SLPOUT, 0x00}; /* Sleep out */
 80006dc:	2311      	movs	r3, #17
 80006de:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  const uint8_t nt35510_reg30[] = {NT35510_CMD_DISPON, 0x00};
 80006e2:	2329      	movs	r3, #41	; 0x29
 80006e4:	f8ad 3020 	strh.w	r3, [sp, #32]

  const uint8_t nt35510_reg31[] = {NT35510_CMD_WRDISBV, 0x7F};
 80006e8:	f647 7351 	movw	r3, #32593	; 0x7f51
 80006ec:	f8ad 301c 	strh.w	r3, [sp, #28]
  const uint8_t nt35510_reg32[] = {NT35510_CMD_WRCTRLD, 0x2C};
 80006f0:	f642 4353 	movw	r3, #11347	; 0x2c53
 80006f4:	f8ad 3018 	strh.w	r3, [sp, #24]
  const uint8_t nt35510_reg33[] = {NT35510_CMD_WRCABC, 0x02};
 80006f8:	f240 2355 	movw	r3, #597	; 0x255
 80006fc:	f8ad 3014 	strh.w	r3, [sp, #20]
  const uint8_t nt35510_reg34[] = {NT35510_CMD_WRCABCMB, 0xFF};
 8000700:	f64f 735e 	movw	r3, #65374	; 0xff5e
 8000704:	f8ad 3010 	strh.w	r3, [sp, #16]
  const uint8_t nt35510_reg35[] = {NT35510_CMD_RAMWR, 0x00};
 8000708:	232c      	movs	r3, #44	; 0x2c
 800070a:	f8ad 300c 	strh.w	r3, [sp, #12]
  const uint8_t nt35510_reg36[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB565};
 800070e:	f245 533a 	movw	r3, #21818	; 0x553a
 8000712:	f8ad 3008 	strh.w	r3, [sp, #8]
  const uint8_t nt35510_reg37[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB888};
 8000716:	f247 733a 	movw	r3, #30522	; 0x773a
 800071a:	f8ad 3004 	strh.w	r3, [sp, #4]

  DSI_IO_WriteCmd(5, (uint8_t *)nt35510_reg); /* LV2:  Page 1 enable */
 800071e:	a92e      	add	r1, sp, #184	; 0xb8
 8000720:	2005      	movs	r0, #5
 8000722:	f000 f983 	bl	8000a2c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg1);/* AVDD: 5.2V */
 8000726:	a92d      	add	r1, sp, #180	; 0xb4
 8000728:	2003      	movs	r0, #3
 800072a:	f000 f97f 	bl	8000a2c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg2);/* AVDD: Ratio */
 800072e:	a92c      	add	r1, sp, #176	; 0xb0
 8000730:	2003      	movs	r0, #3
 8000732:	f000 f97b 	bl	8000a2c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg3);/* AVEE: -5.2V */
 8000736:	a92b      	add	r1, sp, #172	; 0xac
 8000738:	2003      	movs	r0, #3
 800073a:	f000 f977 	bl	8000a2c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg4);/* AVEE: Ratio */
 800073e:	a92a      	add	r1, sp, #168	; 0xa8
 8000740:	2003      	movs	r0, #3
 8000742:	f000 f973 	bl	8000a2c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg5);/* VCL: -2.5V */
 8000746:	a929      	add	r1, sp, #164	; 0xa4
 8000748:	2003      	movs	r0, #3
 800074a:	f000 f96f 	bl	8000a2c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg6);/* VCL: Ratio */
 800074e:	a928      	add	r1, sp, #160	; 0xa0
 8000750:	2003      	movs	r0, #3
 8000752:	f000 f96b 	bl	8000a2c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg7);/* VGH: 15V (Free Pump) */
 8000756:	a927      	add	r1, sp, #156	; 0x9c
 8000758:	2001      	movs	r0, #1
 800075a:	f000 f967 	bl	8000a2c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg8);
 800075e:	a926      	add	r1, sp, #152	; 0x98
 8000760:	2003      	movs	r0, #3
 8000762:	f000 f963 	bl	8000a2c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg9);/* VGH: Ratio */
 8000766:	a925      	add	r1, sp, #148	; 0x94
 8000768:	2003      	movs	r0, #3
 800076a:	f000 f95f 	bl	8000a2c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg10);/* VGL_REG: -10V */
 800076e:	a924      	add	r1, sp, #144	; 0x90
 8000770:	2003      	movs	r0, #3
 8000772:	f000 f95b 	bl	8000a2c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg12);/* VGLX: Ratio */
 8000776:	a923      	add	r1, sp, #140	; 0x8c
 8000778:	2003      	movs	r0, #3
 800077a:	f000 f957 	bl	8000a2c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg13);/* VGMP/VGSP: 4.5V/0V */
 800077e:	a922      	add	r1, sp, #136	; 0x88
 8000780:	2003      	movs	r0, #3
 8000782:	f000 f953 	bl	8000a2c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg14);/* VGMN/VGSN:-4.5V/0V */
 8000786:	a921      	add	r1, sp, #132	; 0x84
 8000788:	2003      	movs	r0, #3
 800078a:	f000 f94f 	bl	8000a2c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg15);/* VCOM: -1.325V */
 800078e:	a920      	add	r1, sp, #128	; 0x80
 8000790:	2002      	movs	r0, #2
 8000792:	f000 f94b 	bl	8000a2c <DSI_IO_WriteCmd>

/* ************************************************************************** */
/* Proprietary DCS Initialization                                             */
/* ************************************************************************** */
  DSI_IO_WriteCmd(5, (uint8_t *)nt35510_reg16);/* LV2: Page 0 enable */
 8000796:	a91e      	add	r1, sp, #120	; 0x78
 8000798:	2005      	movs	r0, #5
 800079a:	f000 f947 	bl	8000a2c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg17);/* Display control */
 800079e:	a91d      	add	r1, sp, #116	; 0x74
 80007a0:	2002      	movs	r0, #2
 80007a2:	f000 f943 	bl	8000a2c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg18);/* Src hold time */
 80007a6:	a91c      	add	r1, sp, #112	; 0x70
 80007a8:	2001      	movs	r0, #1
 80007aa:	f000 f93f 	bl	8000a2c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg19);
 80007ae:	a91b      	add	r1, sp, #108	; 0x6c
 80007b0:	2001      	movs	r0, #1
 80007b2:	f000 f93b 	bl	8000a2c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg20);/* Gate EQ control */
 80007b6:	a91a      	add	r1, sp, #104	; 0x68
 80007b8:	2002      	movs	r0, #2
 80007ba:	f000 f937 	bl	8000a2c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(4, (uint8_t *)nt35510_reg21);/* Src EQ control(Mode2) */
 80007be:	a918      	add	r1, sp, #96	; 0x60
 80007c0:	2004      	movs	r0, #4
 80007c2:	f000 f933 	bl	8000a2c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg22);/* Inv. mode(2-dot) */
 80007c6:	a917      	add	r1, sp, #92	; 0x5c
 80007c8:	2003      	movs	r0, #3
 80007ca:	f000 f92f 	bl	8000a2c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg23);
 80007ce:	a916      	add	r1, sp, #88	; 0x58
 80007d0:	2003      	movs	r0, #3
 80007d2:	f000 f92b 	bl	8000a2c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg24);
 80007d6:	a915      	add	r1, sp, #84	; 0x54
 80007d8:	2001      	movs	r0, #1
 80007da:	f000 f927 	bl	8000a2c <DSI_IO_WriteCmd>
  /* Tear on */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg26);
 80007de:	a90a      	add	r1, sp, #40	; 0x28
 80007e0:	2000      	movs	r0, #0
 80007e2:	f000 f923 	bl	8000a2c <DSI_IO_WriteCmd>
  /* Set Pixel color format to RGB888 */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg37);
 80007e6:	a901      	add	r1, sp, #4
 80007e8:	2000      	movs	r0, #0
 80007ea:	f000 f91f 	bl	8000a2c <DSI_IO_WriteCmd>
/* ************************************************************************** */
/* Standard DCS Initialization                                                */
/* ************************************************************************** */

  /* Add a delay, otherwise MADCTL not taken */
  NT35510_IO_Delay(200);
 80007ee:	20c8      	movs	r0, #200	; 0xc8
 80007f0:	f000 f86c 	bl	80008cc <NT35510_IO_Delay>

  /* Configure orientation */
  if(orientation == NT35510_ORIENTATION_PORTRAIT)
 80007f4:	2d00      	cmp	r5, #0
 80007f6:	d134      	bne.n	8000862 <NT35510_Init+0x286>
  {
    DSI_IO_WriteCmd(1, (uint8_t *)nt35510_madctl_portrait);
 80007f8:	a914      	add	r1, sp, #80	; 0x50
 80007fa:	2001      	movs	r0, #1
 80007fc:	f000 f916 	bl	8000a2c <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_caset_portrait);
 8000800:	a912      	add	r1, sp, #72	; 0x48
 8000802:	2004      	movs	r0, #4
 8000804:	f000 f912 	bl	8000a2c <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_raset_portrait);
 8000808:	a910      	add	r1, sp, #64	; 0x40
 800080a:	2004      	movs	r0, #4
 800080c:	f000 f90e 	bl	8000a2c <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(1, (uint8_t *)nt35510_madctl_landscape);
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_caset_landscape);
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_raset_landscape);
  }

  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg27);
 8000810:	a909      	add	r1, sp, #36	; 0x24
 8000812:	2000      	movs	r0, #0
 8000814:	f000 f90a 	bl	8000a2c <DSI_IO_WriteCmd>
  /* Wait for sleep out exit */
  NT35510_IO_Delay(120);
 8000818:	2078      	movs	r0, #120	; 0x78
 800081a:	f000 f857 	bl	80008cc <NT35510_IO_Delay>

  switch(ColorCoding)
 800081e:	b36c      	cbz	r4, 800087c <NT35510_Init+0x2a0>
 8000820:	2c02      	cmp	r4, #2
 8000822:	d130      	bne.n	8000886 <NT35510_Init+0x2aa>
  {
    case NT35510_FORMAT_RBG565 :
      /* Set Pixel color format to RGB565 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg36);
 8000824:	a902      	add	r1, sp, #8
 8000826:	2001      	movs	r0, #1
 8000828:	f000 f900 	bl	8000a2c <DSI_IO_WriteCmd>
      break;
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg31);
 800082c:	a907      	add	r1, sp, #28
 800082e:	2001      	movs	r0, #1
 8000830:	f000 f8fc 	bl	8000a2c <DSI_IO_WriteCmd>
  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg32);
 8000834:	a906      	add	r1, sp, #24
 8000836:	2001      	movs	r0, #1
 8000838:	f000 f8f8 	bl	8000a2c <DSI_IO_WriteCmd>
  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg33);
 800083c:	a905      	add	r1, sp, #20
 800083e:	2001      	movs	r0, #1
 8000840:	f000 f8f4 	bl	8000a2c <DSI_IO_WriteCmd>
  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg34);
 8000844:	a904      	add	r1, sp, #16
 8000846:	2001      	movs	r0, #1
 8000848:	f000 f8f0 	bl	8000a2c <DSI_IO_WriteCmd>
  /** CABC : Content Adaptive Backlight Control section end << */

  /* Display on */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg30);
 800084c:	a908      	add	r1, sp, #32
 800084e:	2000      	movs	r0, #0
 8000850:	f000 f8ec 	bl	8000a2c <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg35);
 8000854:	a903      	add	r1, sp, #12
 8000856:	2000      	movs	r0, #0
 8000858:	f000 f8e8 	bl	8000a2c <DSI_IO_WriteCmd>

  return 0;
}
 800085c:	2000      	movs	r0, #0
 800085e:	b031      	add	sp, #196	; 0xc4
 8000860:	bd30      	pop	{r4, r5, pc}
    DSI_IO_WriteCmd(1, (uint8_t *)nt35510_madctl_landscape);
 8000862:	a90f      	add	r1, sp, #60	; 0x3c
 8000864:	2001      	movs	r0, #1
 8000866:	f000 f8e1 	bl	8000a2c <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_caset_landscape);
 800086a:	a90d      	add	r1, sp, #52	; 0x34
 800086c:	2004      	movs	r0, #4
 800086e:	f000 f8dd 	bl	8000a2c <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_raset_landscape);
 8000872:	a90b      	add	r1, sp, #44	; 0x2c
 8000874:	2004      	movs	r0, #4
 8000876:	f000 f8d9 	bl	8000a2c <DSI_IO_WriteCmd>
 800087a:	e7c9      	b.n	8000810 <NT35510_Init+0x234>
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg37);
 800087c:	a901      	add	r1, sp, #4
 800087e:	2001      	movs	r0, #1
 8000880:	f000 f8d4 	bl	8000a2c <DSI_IO_WriteCmd>
      break;
 8000884:	e7d2      	b.n	800082c <NT35510_Init+0x250>
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg37);
 8000886:	a901      	add	r1, sp, #4
 8000888:	2001      	movs	r0, #1
 800088a:	f000 f8cf 	bl	8000a2c <DSI_IO_WriteCmd>
      break;
 800088e:	e7cd      	b.n	800082c <NT35510_Init+0x250>
 8000890:	080098e0 	.word	0x080098e0
 8000894:	b0030303 	.word	0xb0030303
 8000898:	b6464646 	.word	0xb6464646
 800089c:	b1030303 	.word	0xb1030303
 80008a0:	b7363636 	.word	0xb7363636
 80008a4:	b2020000 	.word	0xb2020000
 80008a8:	b8262626 	.word	0xb8262626
 80008ac:	b3090909 	.word	0xb3090909
 80008b0:	b9363636 	.word	0xb9363636
 80008b4:	b5080808 	.word	0xb5080808
 80008b8:	ba262626 	.word	0xba262626
 80008bc:	bc008000 	.word	0xbc008000
 80008c0:	08007d68 	.word	0x08007d68
 80008c4:	080098e8 	.word	0x080098e8
 80008c8:	cc000003 	.word	0xcc000003

080008cc <NT35510_IO_Delay>:
/**
  * @brief  NT35510 delay
  * @param  Delay: Delay in ms
  */
void NT35510_IO_Delay(uint32_t Delay)
{
 80008cc:	b508      	push	{r3, lr}
  HAL_Delay(Delay);
 80008ce:	f002 fa79 	bl	8002dc4 <HAL_Delay>
}
 80008d2:	bd08      	pop	{r3, pc}

080008d4 <LCD_IO_GetID>:
    return 0;
  }
#else 
  return LCD_DSI_ID; 
#endif /* USE_LCD_HDMI */
}
 80008d4:	2011      	movs	r0, #17
 80008d6:	4770      	bx	lr

080008d8 <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 80008d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008da:	b083      	sub	sp, #12
 80008dc:	4604      	mov	r4, r0
 80008de:	460d      	mov	r5, r1
 80008e0:	4616      	mov	r6, r2
 80008e2:	461f      	mov	r7, r3
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 80008e4:	4811      	ldr	r0, [pc, #68]	; (800092c <LL_FillBuffer+0x54>)
 80008e6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80008ea:	6043      	str	r3, [r0, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 80008ec:	2300      	movs	r3, #0
 80008ee:	6083      	str	r3, [r0, #8]
  hdma2d_discovery.Init.OutputOffset = OffLine;
 80008f0:	9b08      	ldr	r3, [sp, #32]
 80008f2:	60c3      	str	r3, [r0, #12]

  hdma2d_discovery.Instance = DMA2D;
 80008f4:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <LL_FillBuffer+0x58>)
 80008f6:	6003      	str	r3, [r0, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 80008f8:	f003 f8a2 	bl	8003a40 <HAL_DMA2D_Init>
 80008fc:	b108      	cbz	r0, 8000902 <LL_FillBuffer+0x2a>
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
      }
    }
  }
}
 80008fe:	b003      	add	sp, #12
 8000900:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, LayerIndex) == HAL_OK)
 8000902:	4621      	mov	r1, r4
 8000904:	4809      	ldr	r0, [pc, #36]	; (800092c <LL_FillBuffer+0x54>)
 8000906:	f003 f991 	bl	8003c2c <HAL_DMA2D_ConfigLayer>
 800090a:	2800      	cmp	r0, #0
 800090c:	d1f7      	bne.n	80008fe <LL_FillBuffer+0x26>
      if (HAL_DMA2D_Start(&hdma2d_discovery, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800090e:	9700      	str	r7, [sp, #0]
 8000910:	4633      	mov	r3, r6
 8000912:	462a      	mov	r2, r5
 8000914:	9909      	ldr	r1, [sp, #36]	; 0x24
 8000916:	4805      	ldr	r0, [pc, #20]	; (800092c <LL_FillBuffer+0x54>)
 8000918:	f003 f8cc 	bl	8003ab4 <HAL_DMA2D_Start>
 800091c:	2800      	cmp	r0, #0
 800091e:	d1ee      	bne.n	80008fe <LL_FillBuffer+0x26>
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 8000920:	210a      	movs	r1, #10
 8000922:	4802      	ldr	r0, [pc, #8]	; (800092c <LL_FillBuffer+0x54>)
 8000924:	f003 f8e2 	bl	8003aec <HAL_DMA2D_PollForTransfer>
}
 8000928:	e7e9      	b.n	80008fe <LL_FillBuffer+0x26>
 800092a:	bf00      	nop
 800092c:	2000009c 	.word	0x2000009c
 8000930:	4002b000 	.word	0x4002b000

08000934 <BSP_LCD_Reset>:
{
 8000934:	b570      	push	{r4, r5, r6, lr}
 8000936:	b086      	sub	sp, #24
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000938:	4b14      	ldr	r3, [pc, #80]	; (800098c <BSP_LCD_Reset+0x58>)
 800093a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800093c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000940:	631a      	str	r2, [r3, #48]	; 0x30
 8000942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000944:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000948:	9300      	str	r3, [sp, #0]
 800094a:	9b00      	ldr	r3, [sp, #0]
    gpio_init_structure.Pin   = GPIO_PIN_15;
 800094c:	f44f 4500 	mov.w	r5, #32768	; 0x8000
 8000950:	9501      	str	r5, [sp, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000952:	2601      	movs	r6, #1
 8000954:	9602      	str	r6, [sp, #8]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 8000956:	9603      	str	r6, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8000958:	2303      	movs	r3, #3
 800095a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 800095c:	4c0c      	ldr	r4, [pc, #48]	; (8000990 <BSP_LCD_Reset+0x5c>)
 800095e:	a901      	add	r1, sp, #4
 8000960:	4620      	mov	r0, r4
 8000962:	f003 fce3 	bl	800432c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	4629      	mov	r1, r5
 800096a:	4620      	mov	r0, r4
 800096c:	f003 fde0 	bl	8004530 <HAL_GPIO_WritePin>
    HAL_Delay(20); /* wait 20 ms */
 8000970:	2014      	movs	r0, #20
 8000972:	f002 fa27 	bl	8002dc4 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 8000976:	4632      	mov	r2, r6
 8000978:	4629      	mov	r1, r5
 800097a:	4620      	mov	r0, r4
 800097c:	f003 fdd8 	bl	8004530 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000980:	200a      	movs	r0, #10
 8000982:	f002 fa1f 	bl	8002dc4 <HAL_Delay>
}
 8000986:	b006      	add	sp, #24
 8000988:	bd70      	pop	{r4, r5, r6, pc}
 800098a:	bf00      	nop
 800098c:	40023800 	.word	0x40023800
 8000990:	40022400 	.word	0x40022400

08000994 <BSP_LCD_GetXSize>:
}
 8000994:	4b01      	ldr	r3, [pc, #4]	; (800099c <BSP_LCD_GetXSize+0x8>)
 8000996:	6818      	ldr	r0, [r3, #0]
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	20000000 	.word	0x20000000

080009a0 <BSP_LCD_GetYSize>:
}
 80009a0:	4b01      	ldr	r3, [pc, #4]	; (80009a8 <BSP_LCD_GetYSize+0x8>)
 80009a2:	6858      	ldr	r0, [r3, #4]
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	20000000 	.word	0x20000000

080009ac <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
 80009ac:	4b01      	ldr	r3, [pc, #4]	; (80009b4 <BSP_LCD_SelectLayer+0x8>)
 80009ae:	6598      	str	r0, [r3, #88]	; 0x58
}
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	2000009c 	.word	0x2000009c

080009b8 <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = fonts;
 80009b8:	4b04      	ldr	r3, [pc, #16]	; (80009cc <BSP_LCD_SetFont+0x14>)
 80009ba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80009bc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80009c0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80009c4:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
}
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	2000009c 	.word	0x2000009c

080009d0 <BSP_LCD_Clear>:
{
 80009d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009d2:	b083      	sub	sp, #12
 80009d4:	4605      	mov	r5, r0
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80009d6:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <BSP_LCD_Clear+0x34>)
 80009d8:	6d9e      	ldr	r6, [r3, #88]	; 0x58
 80009da:	2234      	movs	r2, #52	; 0x34
 80009dc:	fb02 3306 	mla	r3, r2, r6, r3
 80009e0:	f8d3 70b8 	ldr.w	r7, [r3, #184]	; 0xb8
 80009e4:	f7ff ffd6 	bl	8000994 <BSP_LCD_GetXSize>
 80009e8:	4604      	mov	r4, r0
 80009ea:	f7ff ffd9 	bl	80009a0 <BSP_LCD_GetYSize>
 80009ee:	4603      	mov	r3, r0
 80009f0:	9501      	str	r5, [sp, #4]
 80009f2:	2200      	movs	r2, #0
 80009f4:	9200      	str	r2, [sp, #0]
 80009f6:	4622      	mov	r2, r4
 80009f8:	4639      	mov	r1, r7
 80009fa:	4630      	mov	r0, r6
 80009fc:	f7ff ff6c 	bl	80008d8 <LL_FillBuffer>
}
 8000a00:	b003      	add	sp, #12
 8000a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a04:	2000009c 	.word	0x2000009c

08000a08 <BSP_LCD_DisplayOn>:
{
 8000a08:	b500      	push	{lr}
 8000a0a:	b083      	sub	sp, #12
    HAL_DSI_ShortWrite(&(hdsi_discovery),
 8000a0c:	4806      	ldr	r0, [pc, #24]	; (8000a28 <BSP_LCD_DisplayOn+0x20>)
 8000a0e:	2300      	movs	r3, #0
 8000a10:	9300      	str	r3, [sp, #0]
 8000a12:	2329      	movs	r3, #41	; 0x29
 8000a14:	2215      	movs	r2, #21
 8000a16:	f8d0 111c 	ldr.w	r1, [r0, #284]	; 0x11c
 8000a1a:	f500 70c4 	add.w	r0, r0, #392	; 0x188
 8000a1e:	f003 fc12 	bl	8004246 <HAL_DSI_ShortWrite>
}
 8000a22:	b003      	add	sp, #12
 8000a24:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a28:	2000009c 	.word	0x2000009c

08000a2c <DSI_IO_WriteCmd>:
{
 8000a2c:	b500      	push	{lr}
 8000a2e:	b083      	sub	sp, #12
  if(NbrParams <= 1)
 8000a30:	2801      	cmp	r0, #1
 8000a32:	d90b      	bls.n	8000a4c <DSI_IO_WriteCmd+0x20>
 8000a34:	4603      	mov	r3, r0
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8000a36:	5c0a      	ldrb	r2, [r1, r0]
 8000a38:	9101      	str	r1, [sp, #4]
 8000a3a:	9200      	str	r2, [sp, #0]
 8000a3c:	2239      	movs	r2, #57	; 0x39
 8000a3e:	2100      	movs	r1, #0
 8000a40:	4807      	ldr	r0, [pc, #28]	; (8000a60 <DSI_IO_WriteCmd+0x34>)
 8000a42:	f003 fc13 	bl	800426c <HAL_DSI_LongWrite>
}
 8000a46:	b003      	add	sp, #12
 8000a48:	f85d fb04 	ldr.w	pc, [sp], #4
   HAL_DSI_ShortWrite(&hdsi_discovery, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8000a4c:	784b      	ldrb	r3, [r1, #1]
 8000a4e:	9300      	str	r3, [sp, #0]
 8000a50:	780b      	ldrb	r3, [r1, #0]
 8000a52:	2215      	movs	r2, #21
 8000a54:	2100      	movs	r1, #0
 8000a56:	4802      	ldr	r0, [pc, #8]	; (8000a60 <DSI_IO_WriteCmd+0x34>)
 8000a58:	f003 fbf5 	bl	8004246 <HAL_DSI_ShortWrite>
 8000a5c:	e7f3      	b.n	8000a46 <DSI_IO_WriteCmd+0x1a>
 8000a5e:	bf00      	nop
 8000a60:	20000224 	.word	0x20000224

08000a64 <BSP_LCD_MspInit>:
{
 8000a64:	b500      	push	{lr}
 8000a66:	b085      	sub	sp, #20
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000a68:	4b27      	ldr	r3, [pc, #156]	; (8000b08 <BSP_LCD_MspInit+0xa4>)
 8000a6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000a6c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000a70:	645a      	str	r2, [r3, #68]	; 0x44
 8000a72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000a74:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8000a78:	9201      	str	r2, [sp, #4]
 8000a7a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_LTDC_FORCE_RESET();
 8000a7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a7e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000a82:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 8000a84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a86:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8000a8a:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8000a8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a8e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000a92:	631a      	str	r2, [r3, #48]	; 0x30
 8000a94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a96:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8000a9a:	9202      	str	r2, [sp, #8]
 8000a9c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_DMA2D_FORCE_RESET();
 8000a9e:	691a      	ldr	r2, [r3, #16]
 8000aa0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000aa4:	611a      	str	r2, [r3, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 8000aa6:	691a      	ldr	r2, [r3, #16]
 8000aa8:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000aac:	611a      	str	r2, [r3, #16]
  __HAL_RCC_DSI_CLK_ENABLE();
 8000aae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ab0:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8000ab4:	645a      	str	r2, [r3, #68]	; 0x44
 8000ab6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ab8:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8000abc:	9203      	str	r2, [sp, #12]
 8000abe:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_DSI_FORCE_RESET();
 8000ac0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ac2:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8000ac6:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 8000ac8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000aca:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 8000ace:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2103      	movs	r1, #3
 8000ad4:	2058      	movs	r0, #88	; 0x58
 8000ad6:	f002 fdc7 	bl	8003668 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000ada:	2058      	movs	r0, #88	; 0x58
 8000adc:	f002 fdfa 	bl	80036d4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2103      	movs	r1, #3
 8000ae4:	205a      	movs	r0, #90	; 0x5a
 8000ae6:	f002 fdbf 	bl	8003668 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000aea:	205a      	movs	r0, #90	; 0x5a
 8000aec:	f002 fdf2 	bl	80036d4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 8000af0:	2200      	movs	r2, #0
 8000af2:	2103      	movs	r1, #3
 8000af4:	2062      	movs	r0, #98	; 0x62
 8000af6:	f002 fdb7 	bl	8003668 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8000afa:	2062      	movs	r0, #98	; 0x62
 8000afc:	f002 fdea 	bl	80036d4 <HAL_NVIC_EnableIRQ>
}
 8000b00:	b005      	add	sp, #20
 8000b02:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b06:	bf00      	nop
 8000b08:	40023800 	.word	0x40023800

08000b0c <BSP_LCD_InitEx>:
{
 8000b0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b10:	b085      	sub	sp, #20
 8000b12:	4606      	mov	r6, r0
  BSP_LCD_Reset();
 8000b14:	f7ff ff0e 	bl	8000934 <BSP_LCD_Reset>
  read_id = LCD_IO_GetID();
 8000b18:	f7ff fedc 	bl	80008d4 <LCD_IO_GetID>
  if(read_id != LCD_DSI_ID)
 8000b1c:	2811      	cmp	r0, #17
 8000b1e:	d003      	beq.n	8000b28 <BSP_LCD_InitEx+0x1c>
    return LCD_ERROR;  
 8000b20:	2001      	movs	r0, #1
}
 8000b22:	b005      	add	sp, #20
 8000b24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  BSP_LCD_MspInit();
 8000b28:	f7ff ff9c 	bl	8000a64 <BSP_LCD_MspInit>
  hdsi_discovery.Instance = DSI;
 8000b2c:	4c65      	ldr	r4, [pc, #404]	; (8000cc4 <BSP_LCD_InitEx+0x1b8>)
 8000b2e:	4b66      	ldr	r3, [pc, #408]	; (8000cc8 <BSP_LCD_InitEx+0x1bc>)
 8000b30:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
  HAL_DSI_DeInit(&(hdsi_discovery));
 8000b34:	f504 75c4 	add.w	r5, r4, #392	; 0x188
 8000b38:	4628      	mov	r0, r5
 8000b3a:	f003 f9da 	bl	8003ef2 <HAL_DSI_DeInit>
  dsiPllInit.PLLNDIV  = 100;
 8000b3e:	2364      	movs	r3, #100	; 0x64
 8000b40:	9301      	str	r3, [sp, #4]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 8000b42:	2305      	movs	r3, #5
 8000b44:	9302      	str	r3, [sp, #8]
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;
 8000b46:	2300      	movs	r3, #0
 8000b48:	9303      	str	r3, [sp, #12]
  hdsi_discovery.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 8000b50:	2304      	movs	r3, #4
 8000b52:	f8c4 3190 	str.w	r3, [r4, #400]	; 0x190
  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 8000b56:	eb0d 0103 	add.w	r1, sp, r3
 8000b5a:	4628      	mov	r0, r5
 8000b5c:	f003 f902 	bl	8003d64 <HAL_DSI_Init>
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 8000b60:	2e00      	cmp	r6, #0
 8000b62:	f040 80a7 	bne.w	8000cb4 <BSP_LCD_InitEx+0x1a8>
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 8000b66:	4b59      	ldr	r3, [pc, #356]	; (8000ccc <BSP_LCD_InitEx+0x1c0>)
 8000b68:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000b6c:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 8000b6e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000b72:	605a      	str	r2, [r3, #4]
  HACT = lcd_x_size;
 8000b74:	4f55      	ldr	r7, [pc, #340]	; (8000ccc <BSP_LCD_InitEx+0x1c0>)
 8000b76:	683b      	ldr	r3, [r7, #0]
  VACT = lcd_y_size;
 8000b78:	687a      	ldr	r2, [r7, #4]
  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 8000b7a:	4c52      	ldr	r4, [pc, #328]	; (8000cc4 <BSP_LCD_InitEx+0x1b8>)
 8000b7c:	2500      	movs	r5, #0
 8000b7e:	f8c4 511c 	str.w	r5, [r4, #284]	; 0x11c
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 8000b82:	2105      	movs	r1, #5
 8000b84:	f8c4 1120 	str.w	r1, [r4, #288]	; 0x120
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000b88:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8000b8c:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 8000b90:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 8000b94:	2102      	movs	r1, #2
 8000b96:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
  hdsivideo_handle.NullPacketSize = 0xFFF;
 8000b9a:	f640 71ff 	movw	r1, #4095	; 0xfff
 8000b9e:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
  hdsivideo_handle.NumberOfChunks = 0;
 8000ba2:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 8000ba6:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz)/LcdClock;
 8000baa:	2104      	movs	r1, #4
 8000bac:	f8c4 1144 	str.w	r1, [r4, #324]	; 0x144
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 8000bb0:	214d      	movs	r1, #77	; 0x4d
 8000bb2:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 8000bb6:	3346      	adds	r3, #70	; 0x46
 8000bb8:	f24f 4124 	movw	r1, #62500	; 0xf424
 8000bbc:	fb01 f303 	mul.w	r3, r1, r3
 8000bc0:	4943      	ldr	r1, [pc, #268]	; (8000cd0 <BSP_LCD_InitEx+0x1c4>)
 8000bc2:	fba1 1303 	umull	r1, r3, r1, r3
 8000bc6:	0b5b      	lsrs	r3, r3, #13
 8000bc8:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
  hdsivideo_handle.VerticalSyncActive        = VSA;
 8000bcc:	2378      	movs	r3, #120	; 0x78
 8000bce:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
  hdsivideo_handle.VerticalBackPorch         = VBP;
 8000bd2:	2396      	movs	r3, #150	; 0x96
 8000bd4:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 8000bd8:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 8000bdc:	f8c4 215c 	str.w	r2, [r4, #348]	; 0x15c
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 8000be0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000be4:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
  hdsivideo_handle.LPLargestPacketSize = 16;
 8000be8:	2310      	movs	r3, #16
 8000bea:	f8c4 3164 	str.w	r3, [r4, #356]	; 0x164
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 8000bee:	f8c4 5168 	str.w	r5, [r4, #360]	; 0x168
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 8000bf2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bf6:	f8c4 316c 	str.w	r3, [r4, #364]	; 0x16c
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 8000bfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bfe:	f8c4 3170 	str.w	r3, [r4, #368]	; 0x170
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 8000c02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c06:	f8c4 3174 	str.w	r3, [r4, #372]	; 0x174
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 8000c0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c0e:	f8c4 3178 	str.w	r3, [r4, #376]	; 0x178
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 8000c12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c16:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 8000c1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c1e:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 8000c22:	f504 798e 	add.w	r9, r4, #284	; 0x11c
 8000c26:	f504 78c4 	add.w	r8, r4, #392	; 0x188
 8000c2a:	4649      	mov	r1, r9
 8000c2c:	4640      	mov	r0, r8
 8000c2e:	f003 f9af 	bl	8003f90 <HAL_DSI_ConfigVideoMode>
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 8000c32:	2301      	movs	r3, #1
 8000c34:	6723      	str	r3, [r4, #112]	; 0x70
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 8000c36:	2323      	movs	r3, #35	; 0x23
 8000c38:	67a3      	str	r3, [r4, #120]	; 0x78
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	f103 0223 	add.w	r2, r3, #35	; 0x23
 8000c40:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 8000c44:	f103 0245 	add.w	r2, r3, #69	; 0x45
 8000c48:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  hltdc_discovery.LayerCfg->ImageWidth  = lcd_x_size;
 8000c4c:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000c56:	2308      	movs	r3, #8
 8000c58:	f8c4 31a4 	str.w	r3, [r4, #420]	; 0x1a4
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000c5c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000c60:	f8c4 31b8 	str.w	r3, [r4, #440]	; 0x1b8
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 8000c64:	2307      	movs	r3, #7
 8000c66:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000c6a:	f8c4 51d0 	str.w	r5, [r4, #464]	; 0x1d0
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000c6e:	f504 70d2 	add.w	r0, r4, #420	; 0x1a4
 8000c72:	f004 fcd7 	bl	8005624 <HAL_RCCEx_PeriphCLKConfig>
  hltdc_discovery.Init.Backcolor.Blue = 0;
 8000c76:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
  hltdc_discovery.Init.Backcolor.Green = 0;
 8000c7a:	f884 5091 	strb.w	r5, [r4, #145]	; 0x91
  hltdc_discovery.Init.Backcolor.Red = 0;
 8000c7e:	f884 5092 	strb.w	r5, [r4, #146]	; 0x92
  hltdc_discovery.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000c82:	66e5      	str	r5, [r4, #108]	; 0x6c
  hltdc_discovery.Instance = LTDC;
 8000c84:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <BSP_LCD_InitEx+0x1c8>)
 8000c86:	f844 3f5c 	str.w	r3, [r4, #92]!
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 8000c8a:	4649      	mov	r1, r9
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	f004 f8ed 	bl	8004e6c <HAL_LTDCEx_StructInitFromVideoConfig>
  HAL_LTDC_Init(&hltdc_discovery);
 8000c92:	4620      	mov	r0, r4
 8000c94:	f004 f870 	bl	8004d78 <HAL_LTDC_Init>
  HAL_DSI_Start(&hdsi_discovery);
 8000c98:	4640      	mov	r0, r8
 8000c9a:	f003 faad 	bl	80041f8 <HAL_DSI_Start>
  BSP_SDRAM_Init();
 8000c9e:	f000 f92f 	bl	8000f00 <BSP_SDRAM_Init>
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8000ca2:	480d      	ldr	r0, [pc, #52]	; (8000cd8 <BSP_LCD_InitEx+0x1cc>)
 8000ca4:	f7ff fe88 	bl	80009b8 <BSP_LCD_SetFont>
  NT35510_Init(NT35510_FORMAT_RGB888, orientation);
 8000ca8:	4631      	mov	r1, r6
 8000caa:	4628      	mov	r0, r5
 8000cac:	f7ff fc96 	bl	80005dc <NT35510_Init>
  return LCD_OK; 
 8000cb0:	4628      	mov	r0, r5
 8000cb2:	e736      	b.n	8000b22 <BSP_LCD_InitEx+0x16>
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 8000cb4:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <BSP_LCD_InitEx+0x1c0>)
 8000cb6:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000cba:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 8000cbc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	e757      	b.n	8000b74 <BSP_LCD_InitEx+0x68>
 8000cc4:	2000009c 	.word	0x2000009c
 8000cc8:	40016c00 	.word	0x40016c00
 8000ccc:	20000000 	.word	0x20000000
 8000cd0:	4c751ce3 	.word	0x4c751ce3
 8000cd4:	40016800 	.word	0x40016800
 8000cd8:	2000000c 	.word	0x2000000c

08000cdc <BSP_LCD_Init>:
{
 8000cdc:	b508      	push	{r3, lr}
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8000cde:	2001      	movs	r0, #1
 8000ce0:	f7ff ff14 	bl	8000b0c <BSP_LCD_InitEx>
}
 8000ce4:	bd08      	pop	{r3, pc}
	...

08000ce8 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8000ce8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000cec:	b083      	sub	sp, #12
 8000cee:	4681      	mov	r9, r0
  __IO uint32_t tmpmrd = 0;
 8000cf0:	f04f 0800 	mov.w	r8, #0
 8000cf4:	f8cd 8004 	str.w	r8, [sp, #4]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8000cf8:	4c20      	ldr	r4, [pc, #128]	; (8000d7c <BSP_SDRAM_Initialization_sequence+0x94>)
 8000cfa:	2601      	movs	r6, #1
 8000cfc:	6026      	str	r6, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000cfe:	2710      	movs	r7, #16
 8000d00:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 8000d02:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8000d04:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000d08:	19e5      	adds	r5, r4, r7
 8000d0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d0e:	4621      	mov	r1, r4
 8000d10:	4628      	mov	r0, r5
 8000d12:	f004 ffa8 	bl	8005c66 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8000d16:	4630      	mov	r0, r6
 8000d18:	f002 f854 	bl	8002dc4 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000d20:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 8000d22:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8000d24:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8000d28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d2c:	4621      	mov	r1, r4
 8000d2e:	4628      	mov	r0, r5
 8000d30:	f004 ff99 	bl	8005c66 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000d34:	2303      	movs	r3, #3
 8000d36:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000d38:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 8;
 8000d3a:	2308      	movs	r3, #8
 8000d3c:	60a3      	str	r3, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8000d3e:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000d42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d46:	4621      	mov	r1, r4
 8000d48:	4628      	mov	r0, r5
 8000d4a:	f004 ff8c 	bl	8005c66 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8000d4e:	f44f 730c 	mov.w	r3, #560	; 0x230
 8000d52:	9301      	str	r3, [sp, #4]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8000d54:	2304      	movs	r3, #4
 8000d56:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000d58:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 8000d5a:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8000d5c:	9b01      	ldr	r3, [sp, #4]
 8000d5e:	60e3      	str	r3, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000d60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d64:	4621      	mov	r1, r4
 8000d66:	4628      	mov	r0, r5
 8000d68:	f004 ff7d 	bl	8005c66 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8000d6c:	4649      	mov	r1, r9
 8000d6e:	4628      	mov	r0, r5
 8000d70:	f004 ff9a 	bl	8005ca8 <HAL_SDRAM_ProgramRefreshRate>
}
 8000d74:	b003      	add	sp, #12
 8000d76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d7a:	bf00      	nop
 8000d7c:	200002d0 	.word	0x200002d0

08000d80 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8000d80:	b570      	push	{r4, r5, r6, lr}
 8000d82:	b08e      	sub	sp, #56	; 0x38
 8000d84:	4606      	mov	r6, r0
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000d86:	4b55      	ldr	r3, [pc, #340]	; (8000edc <BSP_SDRAM_MspInit+0x15c>)
 8000d88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d8a:	f042 0201 	orr.w	r2, r2, #1
 8000d8e:	639a      	str	r2, [r3, #56]	; 0x38
 8000d90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d92:	f002 0201 	and.w	r2, r2, #1
 8000d96:	9201      	str	r2, [sp, #4]
 8000d98:	9a01      	ldr	r2, [sp, #4]
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8000d9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d9c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000da0:	631a      	str	r2, [r3, #48]	; 0x30
 8000da2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000da4:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8000da8:	9202      	str	r2, [sp, #8]
 8000daa:	9a02      	ldr	r2, [sp, #8]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dae:	f042 0208 	orr.w	r2, r2, #8
 8000db2:	631a      	str	r2, [r3, #48]	; 0x30
 8000db4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000db6:	f002 0208 	and.w	r2, r2, #8
 8000dba:	9203      	str	r2, [sp, #12]
 8000dbc:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dc0:	f042 0210 	orr.w	r2, r2, #16
 8000dc4:	631a      	str	r2, [r3, #48]	; 0x30
 8000dc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dc8:	f002 0210 	and.w	r2, r2, #16
 8000dcc:	9204      	str	r2, [sp, #16]
 8000dce:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dd2:	f042 0220 	orr.w	r2, r2, #32
 8000dd6:	631a      	str	r2, [r3, #48]	; 0x30
 8000dd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dda:	f002 0220 	and.w	r2, r2, #32
 8000dde:	9205      	str	r2, [sp, #20]
 8000de0:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000de2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000de4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000de8:	631a      	str	r2, [r3, #48]	; 0x30
 8000dea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dec:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000df0:	9206      	str	r2, [sp, #24]
 8000df2:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000df4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000df6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000dfa:	631a      	str	r2, [r3, #48]	; 0x30
 8000dfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dfe:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000e02:	9207      	str	r2, [sp, #28]
 8000e04:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000e06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e0c:	631a      	str	r2, [r3, #48]	; 0x30
 8000e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e14:	9308      	str	r3, [sp, #32]
 8000e16:	9b08      	ldr	r3, [sp, #32]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	930a      	str	r3, [sp, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	930b      	str	r3, [sp, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8000e20:	2503      	movs	r5, #3
 8000e22:	950c      	str	r5, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8000e24:	230c      	movs	r3, #12
 8000e26:	930d      	str	r3, [sp, #52]	; 0x34
  
  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8000e28:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000e2c:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;
 
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8000e2e:	a909      	add	r1, sp, #36	; 0x24
 8000e30:	482b      	ldr	r0, [pc, #172]	; (8000ee0 <BSP_SDRAM_MspInit+0x160>)
 8000e32:	f003 fa7b 	bl	800432c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8000e36:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000e3a:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
      
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8000e3c:	a909      	add	r1, sp, #36	; 0x24
 8000e3e:	4829      	ldr	r0, [pc, #164]	; (8000ee4 <BSP_SDRAM_MspInit+0x164>)
 8000e40:	f003 fa74 	bl	800432c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8000e44:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000e48:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
    
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8000e4a:	a909      	add	r1, sp, #36	; 0x24
 8000e4c:	4826      	ldr	r0, [pc, #152]	; (8000ee8 <BSP_SDRAM_MspInit+0x168>)
 8000e4e:	f003 fa6d 	bl	800432c <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 8000e52:	f248 1337 	movw	r3, #33079	; 0x8137
 8000e56:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8000e58:	a909      	add	r1, sp, #36	; 0x24
 8000e5a:	4824      	ldr	r0, [pc, #144]	; (8000eec <BSP_SDRAM_MspInit+0x16c>)
 8000e5c:	f003 fa66 	bl	800432c <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8000e60:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8000e64:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8000e66:	a909      	add	r1, sp, #36	; 0x24
 8000e68:	4821      	ldr	r0, [pc, #132]	; (8000ef0 <BSP_SDRAM_MspInit+0x170>)
 8000e6a:	f003 fa5f 	bl	800432c <HAL_GPIO_Init>
  
  /* GPIOI configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8000e6e:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8000e72:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 8000e74:	a909      	add	r1, sp, #36	; 0x24
 8000e76:	481f      	ldr	r0, [pc, #124]	; (8000ef4 <BSP_SDRAM_MspInit+0x174>)
 8000e78:	f003 fa58 	bl	800432c <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8000e7c:	4b1e      	ldr	r3, [pc, #120]	; (8000ef8 <BSP_SDRAM_MspInit+0x178>)
 8000e7e:	2400      	movs	r4, #0
 8000e80:	649c      	str	r4, [r3, #72]	; 0x48
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8000e82:	2280      	movs	r2, #128	; 0x80
 8000e84:	64da      	str	r2, [r3, #76]	; 0x4c
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8000e86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e8a:	651a      	str	r2, [r3, #80]	; 0x50
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8000e8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e90:	655a      	str	r2, [r3, #84]	; 0x54
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e92:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e96:	659a      	str	r2, [r3, #88]	; 0x58
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8000e98:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e9c:	65da      	str	r2, [r3, #92]	; 0x5c
  dma_handle.Init.Mode                = DMA_NORMAL;
 8000e9e:	661c      	str	r4, [r3, #96]	; 0x60
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8000ea0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ea4:	665a      	str	r2, [r3, #100]	; 0x64
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8000ea6:	669c      	str	r4, [r3, #104]	; 0x68
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8000ea8:	66dd      	str	r5, [r3, #108]	; 0x6c
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8000eaa:	671c      	str	r4, [r3, #112]	; 0x70
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8000eac:	675c      	str	r4, [r3, #116]	; 0x74
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8000eae:	461d      	mov	r5, r3
 8000eb0:	4a12      	ldr	r2, [pc, #72]	; (8000efc <BSP_SDRAM_MspInit+0x17c>)
 8000eb2:	f845 2f44 	str.w	r2, [r5, #68]!
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8000eb6:	6335      	str	r5, [r6, #48]	; 0x30
 8000eb8:	67de      	str	r6, [r3, #124]	; 0x7c
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8000eba:	4628      	mov	r0, r5
 8000ebc:	f002 fce6 	bl	800388c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8000ec0:	4628      	mov	r0, r5
 8000ec2:	f002 fc7d 	bl	80037c0 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8000ec6:	4622      	mov	r2, r4
 8000ec8:	210f      	movs	r1, #15
 8000eca:	2038      	movs	r0, #56	; 0x38
 8000ecc:	f002 fbcc 	bl	8003668 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8000ed0:	2038      	movs	r0, #56	; 0x38
 8000ed2:	f002 fbff 	bl	80036d4 <HAL_NVIC_EnableIRQ>
}
 8000ed6:	b00e      	add	sp, #56	; 0x38
 8000ed8:	bd70      	pop	{r4, r5, r6, pc}
 8000eda:	bf00      	nop
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40020c00 	.word	0x40020c00
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	40021400 	.word	0x40021400
 8000eec:	40021800 	.word	0x40021800
 8000ef0:	40021c00 	.word	0x40021c00
 8000ef4:	40022000 	.word	0x40022000
 8000ef8:	200002d0 	.word	0x200002d0
 8000efc:	40026410 	.word	0x40026410

08000f00 <BSP_SDRAM_Init>:
{ 
 8000f00:	b538      	push	{r3, r4, r5, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8000f02:	4c20      	ldr	r4, [pc, #128]	; (8000f84 <BSP_SDRAM_Init+0x84>)
 8000f04:	4b20      	ldr	r3, [pc, #128]	; (8000f88 <BSP_SDRAM_Init+0x88>)
 8000f06:	6123      	str	r3, [r4, #16]
  Timing.LoadToActiveDelay    = 2;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
  Timing.ExitSelfRefreshDelay = 7;
 8000f0e:	2107      	movs	r1, #7
 8000f10:	f8c4 10a8 	str.w	r1, [r4, #168]	; 0xa8
  Timing.SelfRefreshTime      = 4;
 8000f14:	2204      	movs	r2, #4
 8000f16:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
  Timing.RowCycleDelay        = 7;
 8000f1a:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
  Timing.WriteRecoveryTime    = 2;
 8000f1e:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
  Timing.RPDelay              = 2;
 8000f22:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
  Timing.RCDDelay             = 2;
 8000f26:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	6161      	str	r1, [r4, #20]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000f2e:	61a1      	str	r1, [r4, #24]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8000f30:	61e2      	str	r2, [r4, #28]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8000f32:	2320      	movs	r3, #32
 8000f34:	6223      	str	r3, [r4, #32]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000f36:	2340      	movs	r3, #64	; 0x40
 8000f38:	6263      	str	r3, [r4, #36]	; 0x24
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8000f3a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000f3e:	62a3      	str	r3, [r4, #40]	; 0x28
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000f40:	62e1      	str	r1, [r4, #44]	; 0x2c
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8000f42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f46:	6323      	str	r3, [r4, #48]	; 0x30
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8000f48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f4c:	6363      	str	r3, [r4, #52]	; 0x34
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8000f4e:	63a1      	str	r1, [r4, #56]	; 0x38
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8000f50:	f104 0510 	add.w	r5, r4, #16
 8000f54:	4628      	mov	r0, r5
 8000f56:	f7ff ff13 	bl	8000d80 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8000f5a:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
 8000f5e:	4628      	mov	r0, r5
 8000f60:	f004 fe61 	bl	8005c26 <HAL_SDRAM_Init>
 8000f64:	b148      	cbz	r0, 8000f7a <BSP_SDRAM_Init+0x7a>
    sdramstatus = SDRAM_ERROR;
 8000f66:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <BSP_SDRAM_Init+0x8c>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	701a      	strb	r2, [r3, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8000f6c:	f240 6003 	movw	r0, #1539	; 0x603
 8000f70:	f7ff feba 	bl	8000ce8 <BSP_SDRAM_Initialization_sequence>
}
 8000f74:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <BSP_SDRAM_Init+0x8c>)
 8000f76:	7818      	ldrb	r0, [r3, #0]
 8000f78:	bd38      	pop	{r3, r4, r5, pc}
    sdramstatus = SDRAM_OK;
 8000f7a:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <BSP_SDRAM_Init+0x8c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	701a      	strb	r2, [r3, #0]
 8000f80:	e7f4      	b.n	8000f6c <BSP_SDRAM_Init+0x6c>
 8000f82:	bf00      	nop
 8000f84:	200002d0 	.word	0x200002d0
 8000f88:	a0000140 	.word	0xa0000140
 8000f8c:	20000008 	.word	0x20000008

08000f90 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000f90:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8000f94:	b97b      	cbnz	r3, 8000fb6 <osKernelInitialize+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000f96:	f3ef 8310 	mrs	r3, PRIMASK
 8000f9a:	b913      	cbnz	r3, 8000fa2 <osKernelInitialize+0x12>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8000f9c:	f3ef 8311 	mrs	r3, BASEPRI
 8000fa0:	b11b      	cbz	r3, 8000faa <osKernelInitialize+0x1a>
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <osKernelInitialize+0x38>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d008      	beq.n	8000fbc <osKernelInitialize+0x2c>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8000faa:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <osKernelInitialize+0x38>)
 8000fac:	6818      	ldr	r0, [r3, #0]
 8000fae:	b940      	cbnz	r0, 8000fc2 <osKernelInitialize+0x32>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8000fb4:	4770      	bx	lr
    stat = osErrorISR;
 8000fb6:	f06f 0005 	mvn.w	r0, #5
 8000fba:	4770      	bx	lr
 8000fbc:	f06f 0005 	mvn.w	r0, #5
 8000fc0:	4770      	bx	lr
    } else {
      stat = osError;
 8000fc2:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8000fc6:	4770      	bx	lr
 8000fc8:	200003f0 	.word	0x200003f0

08000fcc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8000fcc:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000fce:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8000fd2:	b9a3      	cbnz	r3, 8000ffe <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000fd4:	f3ef 8310 	mrs	r3, PRIMASK
 8000fd8:	b913      	cbnz	r3, 8000fe0 <osKernelStart+0x14>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8000fda:	f3ef 8311 	mrs	r3, BASEPRI
 8000fde:	b11b      	cbz	r3, 8000fe8 <osKernelStart+0x1c>
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <osKernelStart+0x44>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d00d      	beq.n	8001004 <osKernelStart+0x38>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8000fe8:	4b09      	ldr	r3, [pc, #36]	; (8001010 <osKernelStart+0x44>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d10c      	bne.n	800100a <osKernelStart+0x3e>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8000ff0:	4b07      	ldr	r3, [pc, #28]	; (8001010 <osKernelStart+0x44>)
 8000ff2:	2202      	movs	r2, #2
 8000ff4:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8000ff6:	f000 fe65 	bl	8001cc4 <vTaskStartScheduler>
      stat = osOK;
 8000ffa:	2000      	movs	r0, #0
      stat = osError;
    }
  }

  return (stat);
}
 8000ffc:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 8000ffe:	f06f 0005 	mvn.w	r0, #5
 8001002:	e7fb      	b.n	8000ffc <osKernelStart+0x30>
 8001004:	f06f 0005 	mvn.w	r0, #5
 8001008:	e7f8      	b.n	8000ffc <osKernelStart+0x30>
      stat = osError;
 800100a:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800100e:	e7f5      	b.n	8000ffc <osKernelStart+0x30>
 8001010:	200003f0 	.word	0x200003f0

08001014 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001016:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001018:	2400      	movs	r4, #0
 800101a:	9405      	str	r4, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800101c:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8001020:	2c00      	cmp	r4, #0
 8001022:	d138      	bne.n	8001096 <osThreadNew+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001024:	f3ef 8310 	mrs	r3, PRIMASK
 8001028:	b913      	cbnz	r3, 8001030 <osThreadNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800102a:	f3ef 8311 	mrs	r3, BASEPRI
 800102e:	b11b      	cbz	r3, 8001038 <osThreadNew+0x24>
 8001030:	4b2d      	ldr	r3, [pc, #180]	; (80010e8 <osThreadNew+0xd4>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2b02      	cmp	r3, #2
 8001036:	d02e      	beq.n	8001096 <osThreadNew+0x82>
 8001038:	b368      	cbz	r0, 8001096 <osThreadNew+0x82>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800103a:	b322      	cbz	r2, 8001086 <osThreadNew+0x72>
      if (attr->name != NULL) {
 800103c:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800103e:	6993      	ldr	r3, [r2, #24]
 8001040:	b903      	cbnz	r3, 8001044 <osThreadNew+0x30>
    prio  = (UBaseType_t)osPriorityNormal;
 8001042:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001044:	1e5c      	subs	r4, r3, #1
 8001046:	2c37      	cmp	r4, #55	; 0x37
 8001048:	d849      	bhi.n	80010de <osThreadNew+0xca>
 800104a:	6854      	ldr	r4, [r2, #4]
 800104c:	f014 0f01 	tst.w	r4, #1
 8001050:	d147      	bne.n	80010e2 <osThreadNew+0xce>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8001052:	6956      	ldr	r6, [r2, #20]
 8001054:	b16e      	cbz	r6, 8001072 <osThreadNew+0x5e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001056:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800105a:	6894      	ldr	r4, [r2, #8]
 800105c:	b12c      	cbz	r4, 800106a <osThreadNew+0x56>
 800105e:	68d7      	ldr	r7, [r2, #12]
 8001060:	2f5b      	cmp	r7, #91	; 0x5b
 8001062:	d902      	bls.n	800106a <osThreadNew+0x56>
 8001064:	6917      	ldr	r7, [r2, #16]
 8001066:	b107      	cbz	r7, 800106a <osThreadNew+0x56>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001068:	b9c6      	cbnz	r6, 800109c <osThreadNew+0x88>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800106a:	b12c      	cbz	r4, 8001078 <osThreadNew+0x64>
    mem  = -1;
 800106c:	f04f 34ff 	mov.w	r4, #4294967295
 8001070:	e00e      	b.n	8001090 <osThreadNew+0x7c>
    stack = configMINIMAL_STACK_SIZE;
 8001072:	f04f 0c80 	mov.w	ip, #128	; 0x80
 8001076:	e7f0      	b.n	800105a <osThreadNew+0x46>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001078:	68d4      	ldr	r4, [r2, #12]
 800107a:	b98c      	cbnz	r4, 80010a0 <osThreadNew+0x8c>
 800107c:	6914      	ldr	r4, [r2, #16]
 800107e:	b194      	cbz	r4, 80010a6 <osThreadNew+0x92>
    mem  = -1;
 8001080:	f04f 34ff 	mov.w	r4, #4294967295
 8001084:	e004      	b.n	8001090 <osThreadNew+0x7c>
    name = NULL;
 8001086:	4615      	mov	r5, r2
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 8001088:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 800108a:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 800108c:	f04f 0c80 	mov.w	ip, #128	; 0x80
    }

    if (mem == 1) {
 8001090:	2c01      	cmp	r4, #1
 8001092:	d00a      	beq.n	80010aa <osThreadNew+0x96>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                    (StaticTask_t *)attr->cb_mem);
    }
    else {
      if (mem == 0) {
 8001094:	b1ac      	cbz	r4, 80010c2 <osThreadNew+0xae>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001096:	9805      	ldr	r0, [sp, #20]
}
 8001098:	b007      	add	sp, #28
 800109a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 800109c:	2401      	movs	r4, #1
 800109e:	e7f7      	b.n	8001090 <osThreadNew+0x7c>
    mem  = -1;
 80010a0:	f04f 34ff 	mov.w	r4, #4294967295
 80010a4:	e7f4      	b.n	8001090 <osThreadNew+0x7c>
          mem = 0;
 80010a6:	2400      	movs	r4, #0
 80010a8:	e7f2      	b.n	8001090 <osThreadNew+0x7c>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80010aa:	6914      	ldr	r4, [r2, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80010ac:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80010ae:	9202      	str	r2, [sp, #8]
 80010b0:	9401      	str	r4, [sp, #4]
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	460b      	mov	r3, r1
 80010b6:	4662      	mov	r2, ip
 80010b8:	4629      	mov	r1, r5
 80010ba:	f000 fd8d 	bl	8001bd8 <xTaskCreateStatic>
 80010be:	9005      	str	r0, [sp, #20]
 80010c0:	e7e9      	b.n	8001096 <osThreadNew+0x82>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80010c2:	aa05      	add	r2, sp, #20
 80010c4:	9201      	str	r2, [sp, #4]
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	460b      	mov	r3, r1
 80010ca:	fa1f f28c 	uxth.w	r2, ip
 80010ce:	4629      	mov	r1, r5
 80010d0:	f000 fdc3 	bl	8001c5a <xTaskCreate>
 80010d4:	2801      	cmp	r0, #1
 80010d6:	d0de      	beq.n	8001096 <osThreadNew+0x82>
          hTask = NULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	9305      	str	r3, [sp, #20]
 80010dc:	e7db      	b.n	8001096 <osThreadNew+0x82>
        return (NULL);
 80010de:	2000      	movs	r0, #0
 80010e0:	e7da      	b.n	8001098 <osThreadNew+0x84>
 80010e2:	2000      	movs	r0, #0
 80010e4:	e7d8      	b.n	8001098 <osThreadNew+0x84>
 80010e6:	bf00      	nop
 80010e8:	200003f0 	.word	0x200003f0

080010ec <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80010ec:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80010ee:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80010f2:	b983      	cbnz	r3, 8001116 <osDelay+0x2a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80010f4:	f3ef 8310 	mrs	r3, PRIMASK
 80010f8:	b913      	cbnz	r3, 8001100 <osDelay+0x14>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80010fa:	f3ef 8311 	mrs	r3, BASEPRI
 80010fe:	b11b      	cbz	r3, 8001108 <osDelay+0x1c>
 8001100:	4b08      	ldr	r3, [pc, #32]	; (8001124 <osDelay+0x38>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b02      	cmp	r3, #2
 8001106:	d009      	beq.n	800111c <osDelay+0x30>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8001108:	b908      	cbnz	r0, 800110e <osDelay+0x22>
    stat = osOK;
 800110a:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 800110c:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 800110e:	f000 ff3d 	bl	8001f8c <vTaskDelay>
    stat = osOK;
 8001112:	2000      	movs	r0, #0
 8001114:	e7fa      	b.n	800110c <osDelay+0x20>
    stat = osErrorISR;
 8001116:	f06f 0005 	mvn.w	r0, #5
 800111a:	e7f7      	b.n	800110c <osDelay+0x20>
 800111c:	f06f 0005 	mvn.w	r0, #5
 8001120:	e7f4      	b.n	800110c <osDelay+0x20>
 8001122:	bf00      	nop
 8001124:	200003f0 	.word	0x200003f0

08001128 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001128:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800112a:	4b05      	ldr	r3, [pc, #20]	; (8001140 <vApplicationGetIdleTaskMemory+0x18>)
 800112c:	1d1c      	adds	r4, r3, #4
 800112e:	6004      	str	r4, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001130:	3360      	adds	r3, #96	; 0x60
 8001132:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001134:	2380      	movs	r3, #128	; 0x80
 8001136:	6013      	str	r3, [r2, #0]
}
 8001138:	f85d 4b04 	ldr.w	r4, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	200003f0 	.word	0x200003f0

08001144 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001144:	b410      	push	{r4}
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <vApplicationGetTimerTaskMemory+0x1c>)
 8001148:	f503 7418 	add.w	r4, r3, #608	; 0x260
 800114c:	6004      	str	r4, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800114e:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8001152:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001154:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001158:	6013      	str	r3, [r2, #0]
}
 800115a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	200003f0 	.word	0x200003f0

08001164 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001164:	f100 0308 	add.w	r3, r0, #8
 8001168:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800116a:	f04f 32ff 	mov.w	r2, #4294967295
 800116e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001170:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001172:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001174:	2300      	movs	r3, #0
 8001176:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001178:	4770      	bx	lr

0800117a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800117a:	2300      	movs	r3, #0
 800117c:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800117e:	4770      	bx	lr

08001180 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001180:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001182:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001184:	689a      	ldr	r2, [r3, #8]
 8001186:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001188:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800118a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800118c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800118e:	6803      	ldr	r3, [r0, #0]
 8001190:	3301      	adds	r3, #1
 8001192:	6003      	str	r3, [r0, #0]
}
 8001194:	4770      	bx	lr

08001196 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001196:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001198:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800119a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800119e:	d011      	beq.n	80011c4 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80011a0:	f100 0308 	add.w	r3, r0, #8
 80011a4:	461c      	mov	r4, r3
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	42aa      	cmp	r2, r5
 80011ac:	d9fa      	bls.n	80011a4 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80011ae:	6863      	ldr	r3, [r4, #4]
 80011b0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80011b2:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80011b4:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80011b6:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80011b8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80011ba:	6803      	ldr	r3, [r0, #0]
 80011bc:	3301      	adds	r3, #1
 80011be:	6003      	str	r3, [r0, #0]
}
 80011c0:	bc30      	pop	{r4, r5}
 80011c2:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 80011c4:	6904      	ldr	r4, [r0, #16]
 80011c6:	e7f2      	b.n	80011ae <vListInsert+0x18>

080011c8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80011c8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80011ca:	6841      	ldr	r1, [r0, #4]
 80011cc:	6882      	ldr	r2, [r0, #8]
 80011ce:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80011d0:	6841      	ldr	r1, [r0, #4]
 80011d2:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80011d4:	685a      	ldr	r2, [r3, #4]
 80011d6:	4282      	cmp	r2, r0
 80011d8:	d006      	beq.n	80011e8 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80011da:	2200      	movs	r2, #0
 80011dc:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	3a01      	subs	r2, #1
 80011e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80011e4:	6818      	ldr	r0, [r3, #0]
}
 80011e6:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80011e8:	6882      	ldr	r2, [r0, #8]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	e7f5      	b.n	80011da <uxListRemove+0x12>

080011ee <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80011ee:	b510      	push	{r4, lr}
 80011f0:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80011f2:	f001 fb17 	bl	8002824 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80011f6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80011f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d004      	beq.n	8001208 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 80011fe:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8001200:	f001 fb36 	bl	8002870 <vPortExitCritical>

	return xReturn;
}
 8001204:	4620      	mov	r0, r4
 8001206:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8001208:	2401      	movs	r4, #1
 800120a:	e7f9      	b.n	8001200 <prvIsQueueFull+0x12>

0800120c <prvIsQueueEmpty>:
{
 800120c:	b510      	push	{r4, lr}
 800120e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8001210:	f001 fb08 	bl	8002824 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001214:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001216:	b923      	cbnz	r3, 8001222 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8001218:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 800121a:	f001 fb29 	bl	8002870 <vPortExitCritical>
}
 800121e:	4620      	mov	r0, r4
 8001220:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 8001222:	2400      	movs	r4, #0
 8001224:	e7f9      	b.n	800121a <prvIsQueueEmpty+0xe>

08001226 <prvCopyDataToQueue>:
{
 8001226:	b570      	push	{r4, r5, r6, lr}
 8001228:	4604      	mov	r4, r0
 800122a:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800122c:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800122e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001230:	b95a      	cbnz	r2, 800124a <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001232:	6803      	ldr	r3, [r0, #0]
 8001234:	b11b      	cbz	r3, 800123e <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8001236:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001238:	3601      	adds	r6, #1
 800123a:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800123c:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800123e:	6880      	ldr	r0, [r0, #8]
 8001240:	f000 fffe 	bl	8002240 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001244:	2300      	movs	r3, #0
 8001246:	60a3      	str	r3, [r4, #8]
 8001248:	e7f6      	b.n	8001238 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 800124a:	b96d      	cbnz	r5, 8001268 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800124c:	6840      	ldr	r0, [r0, #4]
 800124e:	f005 ffae 	bl	80071ae <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001252:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001254:	6863      	ldr	r3, [r4, #4]
 8001256:	4413      	add	r3, r2
 8001258:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800125a:	68a2      	ldr	r2, [r4, #8]
 800125c:	4293      	cmp	r3, r2
 800125e:	d319      	bcc.n	8001294 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001260:	6823      	ldr	r3, [r4, #0]
 8001262:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8001264:	4628      	mov	r0, r5
 8001266:	e7e7      	b.n	8001238 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001268:	68c0      	ldr	r0, [r0, #12]
 800126a:	f005 ffa0 	bl	80071ae <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800126e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001270:	4251      	negs	r1, r2
 8001272:	68e3      	ldr	r3, [r4, #12]
 8001274:	1a9b      	subs	r3, r3, r2
 8001276:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001278:	6822      	ldr	r2, [r4, #0]
 800127a:	4293      	cmp	r3, r2
 800127c:	d202      	bcs.n	8001284 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800127e:	68a3      	ldr	r3, [r4, #8]
 8001280:	440b      	add	r3, r1
 8001282:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8001284:	2d02      	cmp	r5, #2
 8001286:	d001      	beq.n	800128c <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8001288:	2000      	movs	r0, #0
 800128a:	e7d5      	b.n	8001238 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800128c:	b126      	cbz	r6, 8001298 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 800128e:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8001290:	2000      	movs	r0, #0
 8001292:	e7d1      	b.n	8001238 <prvCopyDataToQueue+0x12>
 8001294:	4628      	mov	r0, r5
 8001296:	e7cf      	b.n	8001238 <prvCopyDataToQueue+0x12>
 8001298:	2000      	movs	r0, #0
 800129a:	e7cd      	b.n	8001238 <prvCopyDataToQueue+0x12>

0800129c <prvCopyDataFromQueue>:
{
 800129c:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800129e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80012a0:	b16a      	cbz	r2, 80012be <prvCopyDataFromQueue+0x22>
{
 80012a2:	b510      	push	{r4, lr}
 80012a4:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80012a6:	68d9      	ldr	r1, [r3, #12]
 80012a8:	4411      	add	r1, r2
 80012aa:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80012ac:	689c      	ldr	r4, [r3, #8]
 80012ae:	42a1      	cmp	r1, r4
 80012b0:	d301      	bcc.n	80012b6 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80012b2:	6819      	ldr	r1, [r3, #0]
 80012b4:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80012b6:	68d9      	ldr	r1, [r3, #12]
 80012b8:	f005 ff79 	bl	80071ae <memcpy>
}
 80012bc:	bd10      	pop	{r4, pc}
 80012be:	4770      	bx	lr

080012c0 <prvUnlockQueue>:
{
 80012c0:	b538      	push	{r3, r4, r5, lr}
 80012c2:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 80012c4:	f001 faae 	bl	8002824 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80012c8:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 80012cc:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80012ce:	e001      	b.n	80012d4 <prvUnlockQueue+0x14>
			--cTxLock;
 80012d0:	3c01      	subs	r4, #1
 80012d2:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80012d4:	2c00      	cmp	r4, #0
 80012d6:	dd0a      	ble.n	80012ee <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80012d8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80012da:	b143      	cbz	r3, 80012ee <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80012dc:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80012e0:	f000 ff00 	bl	80020e4 <xTaskRemoveFromEventList>
 80012e4:	2800      	cmp	r0, #0
 80012e6:	d0f3      	beq.n	80012d0 <prvUnlockQueue+0x10>
						vTaskMissedYield();
 80012e8:	f000 ff92 	bl	8002210 <vTaskMissedYield>
 80012ec:	e7f0      	b.n	80012d0 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 80012ee:	23ff      	movs	r3, #255	; 0xff
 80012f0:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 80012f4:	f001 fabc 	bl	8002870 <vPortExitCritical>
	taskENTER_CRITICAL();
 80012f8:	f001 fa94 	bl	8002824 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80012fc:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8001300:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001302:	e001      	b.n	8001308 <prvUnlockQueue+0x48>
				--cRxLock;
 8001304:	3c01      	subs	r4, #1
 8001306:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001308:	2c00      	cmp	r4, #0
 800130a:	dd0a      	ble.n	8001322 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800130c:	692b      	ldr	r3, [r5, #16]
 800130e:	b143      	cbz	r3, 8001322 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001310:	f105 0010 	add.w	r0, r5, #16
 8001314:	f000 fee6 	bl	80020e4 <xTaskRemoveFromEventList>
 8001318:	2800      	cmp	r0, #0
 800131a:	d0f3      	beq.n	8001304 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 800131c:	f000 ff78 	bl	8002210 <vTaskMissedYield>
 8001320:	e7f0      	b.n	8001304 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8001322:	23ff      	movs	r3, #255	; 0xff
 8001324:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8001328:	f001 faa2 	bl	8002870 <vPortExitCritical>
}
 800132c:	bd38      	pop	{r3, r4, r5, pc}

0800132e <xQueueGenericReset>:
{
 800132e:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8001330:	b1e0      	cbz	r0, 800136c <xQueueGenericReset+0x3e>
 8001332:	460d      	mov	r5, r1
 8001334:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8001336:	f001 fa75 	bl	8002824 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800133a:	6823      	ldr	r3, [r4, #0]
 800133c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800133e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001340:	fb01 3002 	mla	r0, r1, r2, r3
 8001344:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001346:	2000      	movs	r0, #0
 8001348:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800134a:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800134c:	3a01      	subs	r2, #1
 800134e:	fb02 3301 	mla	r3, r2, r1, r3
 8001352:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001354:	23ff      	movs	r3, #255	; 0xff
 8001356:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800135a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800135e:	bb0d      	cbnz	r5, 80013a4 <xQueueGenericReset+0x76>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001360:	6923      	ldr	r3, [r4, #16]
 8001362:	b973      	cbnz	r3, 8001382 <xQueueGenericReset+0x54>
	taskEXIT_CRITICAL();
 8001364:	f001 fa84 	bl	8002870 <vPortExitCritical>
}
 8001368:	2001      	movs	r0, #1
 800136a:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800136c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001370:	b672      	cpsid	i
 8001372:	f383 8811 	msr	BASEPRI, r3
 8001376:	f3bf 8f6f 	isb	sy
 800137a:	f3bf 8f4f 	dsb	sy
 800137e:	b662      	cpsie	i
	configASSERT( pxQueue );
 8001380:	e7fe      	b.n	8001380 <xQueueGenericReset+0x52>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001382:	f104 0010 	add.w	r0, r4, #16
 8001386:	f000 fead 	bl	80020e4 <xTaskRemoveFromEventList>
 800138a:	2800      	cmp	r0, #0
 800138c:	d0ea      	beq.n	8001364 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 800138e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001396:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800139a:	f3bf 8f4f 	dsb	sy
 800139e:	f3bf 8f6f 	isb	sy
 80013a2:	e7df      	b.n	8001364 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80013a4:	f104 0010 	add.w	r0, r4, #16
 80013a8:	f7ff fedc 	bl	8001164 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80013ac:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80013b0:	f7ff fed8 	bl	8001164 <vListInitialise>
 80013b4:	e7d6      	b.n	8001364 <xQueueGenericReset+0x36>

080013b6 <prvInitialiseNewQueue>:
{
 80013b6:	b538      	push	{r3, r4, r5, lr}
 80013b8:	461d      	mov	r5, r3
 80013ba:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 80013bc:	460b      	mov	r3, r1
 80013be:	b949      	cbnz	r1, 80013d4 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80013c0:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80013c2:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80013c4:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80013c6:	2101      	movs	r1, #1
 80013c8:	4620      	mov	r0, r4
 80013ca:	f7ff ffb0 	bl	800132e <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80013ce:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 80013d2:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80013d4:	6022      	str	r2, [r4, #0]
 80013d6:	e7f4      	b.n	80013c2 <prvInitialiseNewQueue+0xc>

080013d8 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80013d8:	b950      	cbnz	r0, 80013f0 <xQueueGenericCreateStatic+0x18>
 80013da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013de:	b672      	cpsid	i
 80013e0:	f383 8811 	msr	BASEPRI, r3
 80013e4:	f3bf 8f6f 	isb	sy
 80013e8:	f3bf 8f4f 	dsb	sy
 80013ec:	b662      	cpsie	i
 80013ee:	e7fe      	b.n	80013ee <xQueueGenericCreateStatic+0x16>
	{
 80013f0:	b510      	push	{r4, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	461c      	mov	r4, r3
		configASSERT( pxStaticQueue != NULL );
 80013f6:	b193      	cbz	r3, 800141e <xQueueGenericCreateStatic+0x46>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80013f8:	1e0b      	subs	r3, r1, #0
 80013fa:	bf18      	it	ne
 80013fc:	2301      	movne	r3, #1
 80013fe:	2a00      	cmp	r2, #0
 8001400:	bf08      	it	eq
 8001402:	f043 0301 	orreq.w	r3, r3, #1
 8001406:	b9ab      	cbnz	r3, 8001434 <xQueueGenericCreateStatic+0x5c>
 8001408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800140c:	b672      	cpsid	i
 800140e:	f383 8811 	msr	BASEPRI, r3
 8001412:	f3bf 8f6f 	isb	sy
 8001416:	f3bf 8f4f 	dsb	sy
 800141a:	b662      	cpsie	i
 800141c:	e7fe      	b.n	800141c <xQueueGenericCreateStatic+0x44>
 800141e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001422:	b672      	cpsid	i
 8001424:	f383 8811 	msr	BASEPRI, r3
 8001428:	f3bf 8f6f 	isb	sy
 800142c:	f3bf 8f4f 	dsb	sy
 8001430:	b662      	cpsie	i
		configASSERT( pxStaticQueue != NULL );
 8001432:	e7fe      	b.n	8001432 <xQueueGenericCreateStatic+0x5a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001434:	fab1 f381 	clz	r3, r1
 8001438:	095b      	lsrs	r3, r3, #5
 800143a:	2a00      	cmp	r2, #0
 800143c:	bf18      	it	ne
 800143e:	f043 0301 	orrne.w	r3, r3, #1
 8001442:	b953      	cbnz	r3, 800145a <xQueueGenericCreateStatic+0x82>
 8001444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001448:	b672      	cpsid	i
 800144a:	f383 8811 	msr	BASEPRI, r3
 800144e:	f3bf 8f6f 	isb	sy
 8001452:	f3bf 8f4f 	dsb	sy
 8001456:	b662      	cpsie	i
 8001458:	e7fe      	b.n	8001458 <xQueueGenericCreateStatic+0x80>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800145a:	2350      	movs	r3, #80	; 0x50
 800145c:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 800145e:	9b03      	ldr	r3, [sp, #12]
 8001460:	2b50      	cmp	r3, #80	; 0x50
 8001462:	d00a      	beq.n	800147a <xQueueGenericCreateStatic+0xa2>
 8001464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001468:	b672      	cpsid	i
 800146a:	f383 8811 	msr	BASEPRI, r3
 800146e:	f3bf 8f6f 	isb	sy
 8001472:	f3bf 8f4f 	dsb	sy
 8001476:	b662      	cpsie	i
 8001478:	e7fe      	b.n	8001478 <xQueueGenericCreateStatic+0xa0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800147a:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800147c:	2301      	movs	r3, #1
 800147e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001482:	9400      	str	r4, [sp, #0]
 8001484:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8001488:	f7ff ff95 	bl	80013b6 <prvInitialiseNewQueue>
	}
 800148c:	4620      	mov	r0, r4
 800148e:	b004      	add	sp, #16
 8001490:	bd10      	pop	{r4, pc}

08001492 <xQueueGenericSend>:
{
 8001492:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001494:	b085      	sub	sp, #20
 8001496:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8001498:	b198      	cbz	r0, 80014c2 <xQueueGenericSend+0x30>
 800149a:	460f      	mov	r7, r1
 800149c:	461d      	mov	r5, r3
 800149e:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80014a0:	b1d1      	cbz	r1, 80014d8 <xQueueGenericSend+0x46>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80014a2:	2d02      	cmp	r5, #2
 80014a4:	d126      	bne.n	80014f4 <xQueueGenericSend+0x62>
 80014a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d023      	beq.n	80014f4 <xQueueGenericSend+0x62>
 80014ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014b0:	b672      	cpsid	i
 80014b2:	f383 8811 	msr	BASEPRI, r3
 80014b6:	f3bf 8f6f 	isb	sy
 80014ba:	f3bf 8f4f 	dsb	sy
 80014be:	b662      	cpsie	i
 80014c0:	e7fe      	b.n	80014c0 <xQueueGenericSend+0x2e>
 80014c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014c6:	b672      	cpsid	i
 80014c8:	f383 8811 	msr	BASEPRI, r3
 80014cc:	f3bf 8f6f 	isb	sy
 80014d0:	f3bf 8f4f 	dsb	sy
 80014d4:	b662      	cpsie	i
	configASSERT( pxQueue );
 80014d6:	e7fe      	b.n	80014d6 <xQueueGenericSend+0x44>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80014d8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d0e1      	beq.n	80014a2 <xQueueGenericSend+0x10>
 80014de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014e2:	b672      	cpsid	i
 80014e4:	f383 8811 	msr	BASEPRI, r3
 80014e8:	f3bf 8f6f 	isb	sy
 80014ec:	f3bf 8f4f 	dsb	sy
 80014f0:	b662      	cpsie	i
 80014f2:	e7fe      	b.n	80014f2 <xQueueGenericSend+0x60>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80014f4:	f000 fe94 	bl	8002220 <xTaskGetSchedulerState>
 80014f8:	4606      	mov	r6, r0
 80014fa:	b968      	cbnz	r0, 8001518 <xQueueGenericSend+0x86>
 80014fc:	9b01      	ldr	r3, [sp, #4]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d04a      	beq.n	8001598 <xQueueGenericSend+0x106>
 8001502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001506:	b672      	cpsid	i
 8001508:	f383 8811 	msr	BASEPRI, r3
 800150c:	f3bf 8f6f 	isb	sy
 8001510:	f3bf 8f4f 	dsb	sy
 8001514:	b662      	cpsie	i
 8001516:	e7fe      	b.n	8001516 <xQueueGenericSend+0x84>
 8001518:	2600      	movs	r6, #0
 800151a:	e03d      	b.n	8001598 <xQueueGenericSend+0x106>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800151c:	462a      	mov	r2, r5
 800151e:	4639      	mov	r1, r7
 8001520:	4620      	mov	r0, r4
 8001522:	f7ff fe80 	bl	8001226 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001526:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001528:	b97b      	cbnz	r3, 800154a <xQueueGenericSend+0xb8>
					else if( xYieldRequired != pdFALSE )
 800152a:	b148      	cbz	r0, 8001540 <xQueueGenericSend+0xae>
						queueYIELD_IF_USING_PREEMPTION();
 800152c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001530:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001534:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001538:	f3bf 8f4f 	dsb	sy
 800153c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8001540:	f001 f996 	bl	8002870 <vPortExitCritical>
				return pdPASS;
 8001544:	2001      	movs	r0, #1
}
 8001546:	b005      	add	sp, #20
 8001548:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800154a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800154e:	f000 fdc9 	bl	80020e4 <xTaskRemoveFromEventList>
 8001552:	2800      	cmp	r0, #0
 8001554:	d0f4      	beq.n	8001540 <xQueueGenericSend+0xae>
							queueYIELD_IF_USING_PREEMPTION();
 8001556:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800155a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800155e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001562:	f3bf 8f4f 	dsb	sy
 8001566:	f3bf 8f6f 	isb	sy
 800156a:	e7e9      	b.n	8001540 <xQueueGenericSend+0xae>
					taskEXIT_CRITICAL();
 800156c:	f001 f980 	bl	8002870 <vPortExitCritical>
					return errQUEUE_FULL;
 8001570:	2000      	movs	r0, #0
 8001572:	e7e8      	b.n	8001546 <xQueueGenericSend+0xb4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001574:	a802      	add	r0, sp, #8
 8001576:	f000 fdfb 	bl	8002170 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800157a:	2601      	movs	r6, #1
 800157c:	e019      	b.n	80015b2 <xQueueGenericSend+0x120>
		prvLockQueue( pxQueue );
 800157e:	2300      	movs	r3, #0
 8001580:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001584:	e021      	b.n	80015ca <xQueueGenericSend+0x138>
 8001586:	2300      	movs	r3, #0
 8001588:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800158c:	e023      	b.n	80015d6 <xQueueGenericSend+0x144>
				prvUnlockQueue( pxQueue );
 800158e:	4620      	mov	r0, r4
 8001590:	f7ff fe96 	bl	80012c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001594:	f000 fc80 	bl	8001e98 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8001598:	f001 f944 	bl	8002824 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800159c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800159e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d3bb      	bcc.n	800151c <xQueueGenericSend+0x8a>
 80015a4:	2d02      	cmp	r5, #2
 80015a6:	d0b9      	beq.n	800151c <xQueueGenericSend+0x8a>
				if( xTicksToWait == ( TickType_t ) 0 )
 80015a8:	9b01      	ldr	r3, [sp, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d0de      	beq.n	800156c <xQueueGenericSend+0xda>
				else if( xEntryTimeSet == pdFALSE )
 80015ae:	2e00      	cmp	r6, #0
 80015b0:	d0e0      	beq.n	8001574 <xQueueGenericSend+0xe2>
		taskEXIT_CRITICAL();
 80015b2:	f001 f95d 	bl	8002870 <vPortExitCritical>
		vTaskSuspendAll();
 80015b6:	f000 fbd1 	bl	8001d5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80015ba:	f001 f933 	bl	8002824 <vPortEnterCritical>
 80015be:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 80015c2:	b252      	sxtb	r2, r2
 80015c4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80015c8:	d0d9      	beq.n	800157e <xQueueGenericSend+0xec>
 80015ca:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 80015ce:	b252      	sxtb	r2, r2
 80015d0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80015d4:	d0d7      	beq.n	8001586 <xQueueGenericSend+0xf4>
 80015d6:	f001 f94b 	bl	8002870 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80015da:	a901      	add	r1, sp, #4
 80015dc:	a802      	add	r0, sp, #8
 80015de:	f000 fdd1 	bl	8002184 <xTaskCheckForTimeOut>
 80015e2:	b9d8      	cbnz	r0, 800161c <xQueueGenericSend+0x18a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80015e4:	4620      	mov	r0, r4
 80015e6:	f7ff fe02 	bl	80011ee <prvIsQueueFull>
 80015ea:	2800      	cmp	r0, #0
 80015ec:	d0cf      	beq.n	800158e <xQueueGenericSend+0xfc>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80015ee:	9901      	ldr	r1, [sp, #4]
 80015f0:	f104 0010 	add.w	r0, r4, #16
 80015f4:	f000 fd3a 	bl	800206c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80015f8:	4620      	mov	r0, r4
 80015fa:	f7ff fe61 	bl	80012c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80015fe:	f000 fc4b 	bl	8001e98 <xTaskResumeAll>
 8001602:	2800      	cmp	r0, #0
 8001604:	d1c8      	bne.n	8001598 <xQueueGenericSend+0x106>
					portYIELD_WITHIN_API();
 8001606:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800160a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800160e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001612:	f3bf 8f4f 	dsb	sy
 8001616:	f3bf 8f6f 	isb	sy
 800161a:	e7bd      	b.n	8001598 <xQueueGenericSend+0x106>
			prvUnlockQueue( pxQueue );
 800161c:	4620      	mov	r0, r4
 800161e:	f7ff fe4f 	bl	80012c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001622:	f000 fc39 	bl	8001e98 <xTaskResumeAll>
			return errQUEUE_FULL;
 8001626:	2000      	movs	r0, #0
 8001628:	e78d      	b.n	8001546 <xQueueGenericSend+0xb4>

0800162a <xQueueGenericSendFromISR>:
{
 800162a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800162e:	b1a0      	cbz	r0, 800165a <xQueueGenericSendFromISR+0x30>
 8001630:	460f      	mov	r7, r1
 8001632:	4616      	mov	r6, r2
 8001634:	461c      	mov	r4, r3
 8001636:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001638:	b1d1      	cbz	r1, 8001670 <xQueueGenericSendFromISR+0x46>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800163a:	2c02      	cmp	r4, #2
 800163c:	d126      	bne.n	800168c <xQueueGenericSendFromISR+0x62>
 800163e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8001640:	2b01      	cmp	r3, #1
 8001642:	d023      	beq.n	800168c <xQueueGenericSendFromISR+0x62>
 8001644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001648:	b672      	cpsid	i
 800164a:	f383 8811 	msr	BASEPRI, r3
 800164e:	f3bf 8f6f 	isb	sy
 8001652:	f3bf 8f4f 	dsb	sy
 8001656:	b662      	cpsie	i
 8001658:	e7fe      	b.n	8001658 <xQueueGenericSendFromISR+0x2e>
 800165a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800165e:	b672      	cpsid	i
 8001660:	f383 8811 	msr	BASEPRI, r3
 8001664:	f3bf 8f6f 	isb	sy
 8001668:	f3bf 8f4f 	dsb	sy
 800166c:	b662      	cpsie	i
	configASSERT( pxQueue );
 800166e:	e7fe      	b.n	800166e <xQueueGenericSendFromISR+0x44>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001670:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001672:	2b00      	cmp	r3, #0
 8001674:	d0e1      	beq.n	800163a <xQueueGenericSendFromISR+0x10>
 8001676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800167a:	b672      	cpsid	i
 800167c:	f383 8811 	msr	BASEPRI, r3
 8001680:	f3bf 8f6f 	isb	sy
 8001684:	f3bf 8f4f 	dsb	sy
 8001688:	b662      	cpsie	i
 800168a:	e7fe      	b.n	800168a <xQueueGenericSendFromISR+0x60>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800168c:	f001 f9ce 	bl	8002a2c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001690:	f3ef 8811 	mrs	r8, BASEPRI
 8001694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001698:	b672      	cpsid	i
 800169a:	f383 8811 	msr	BASEPRI, r3
 800169e:	f3bf 8f6f 	isb	sy
 80016a2:	f3bf 8f4f 	dsb	sy
 80016a6:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80016a8:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80016aa:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d306      	bcc.n	80016be <xQueueGenericSendFromISR+0x94>
 80016b0:	2c02      	cmp	r4, #2
 80016b2:	d004      	beq.n	80016be <xQueueGenericSendFromISR+0x94>
			xReturn = errQUEUE_FULL;
 80016b4:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80016b6:	f388 8811 	msr	BASEPRI, r8
}
 80016ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 80016be:	f895 9045 	ldrb.w	r9, [r5, #69]	; 0x45
 80016c2:	fa4f f989 	sxtb.w	r9, r9
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80016c6:	4622      	mov	r2, r4
 80016c8:	4639      	mov	r1, r7
 80016ca:	4628      	mov	r0, r5
 80016cc:	f7ff fdab 	bl	8001226 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80016d0:	f1b9 3fff 	cmp.w	r9, #4294967295
 80016d4:	d006      	beq.n	80016e4 <xQueueGenericSendFromISR+0xba>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80016d6:	f109 0301 	add.w	r3, r9, #1
 80016da:	b25b      	sxtb	r3, r3
 80016dc:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 80016e0:	2001      	movs	r0, #1
 80016e2:	e7e8      	b.n	80016b6 <xQueueGenericSendFromISR+0x8c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80016e4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80016e6:	b90b      	cbnz	r3, 80016ec <xQueueGenericSendFromISR+0xc2>
			xReturn = pdPASS;
 80016e8:	2001      	movs	r0, #1
 80016ea:	e7e4      	b.n	80016b6 <xQueueGenericSendFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80016ec:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80016f0:	f000 fcf8 	bl	80020e4 <xTaskRemoveFromEventList>
 80016f4:	b118      	cbz	r0, 80016fe <xQueueGenericSendFromISR+0xd4>
							if( pxHigherPriorityTaskWoken != NULL )
 80016f6:	b126      	cbz	r6, 8001702 <xQueueGenericSendFromISR+0xd8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80016f8:	2001      	movs	r0, #1
 80016fa:	6030      	str	r0, [r6, #0]
 80016fc:	e7db      	b.n	80016b6 <xQueueGenericSendFromISR+0x8c>
			xReturn = pdPASS;
 80016fe:	2001      	movs	r0, #1
 8001700:	e7d9      	b.n	80016b6 <xQueueGenericSendFromISR+0x8c>
 8001702:	2001      	movs	r0, #1
 8001704:	e7d7      	b.n	80016b6 <xQueueGenericSendFromISR+0x8c>

08001706 <xQueueReceive>:
{
 8001706:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001708:	b085      	sub	sp, #20
 800170a:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800170c:	b1a0      	cbz	r0, 8001738 <xQueueReceive+0x32>
 800170e:	460f      	mov	r7, r1
 8001710:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001712:	b1e1      	cbz	r1, 800174e <xQueueReceive+0x48>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001714:	f000 fd84 	bl	8002220 <xTaskGetSchedulerState>
 8001718:	4606      	mov	r6, r0
 800171a:	bb30      	cbnz	r0, 800176a <xQueueReceive+0x64>
 800171c:	9b01      	ldr	r3, [sp, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d064      	beq.n	80017ec <xQueueReceive+0xe6>
	__asm volatile
 8001722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001726:	b672      	cpsid	i
 8001728:	f383 8811 	msr	BASEPRI, r3
 800172c:	f3bf 8f6f 	isb	sy
 8001730:	f3bf 8f4f 	dsb	sy
 8001734:	b662      	cpsie	i
 8001736:	e7fe      	b.n	8001736 <xQueueReceive+0x30>
 8001738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800173c:	b672      	cpsid	i
 800173e:	f383 8811 	msr	BASEPRI, r3
 8001742:	f3bf 8f6f 	isb	sy
 8001746:	f3bf 8f4f 	dsb	sy
 800174a:	b662      	cpsie	i
	configASSERT( ( pxQueue ) );
 800174c:	e7fe      	b.n	800174c <xQueueReceive+0x46>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800174e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001750:	2b00      	cmp	r3, #0
 8001752:	d0df      	beq.n	8001714 <xQueueReceive+0xe>
 8001754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001758:	b672      	cpsid	i
 800175a:	f383 8811 	msr	BASEPRI, r3
 800175e:	f3bf 8f6f 	isb	sy
 8001762:	f3bf 8f4f 	dsb	sy
 8001766:	b662      	cpsie	i
 8001768:	e7fe      	b.n	8001768 <xQueueReceive+0x62>
 800176a:	2600      	movs	r6, #0
 800176c:	e03e      	b.n	80017ec <xQueueReceive+0xe6>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800176e:	4639      	mov	r1, r7
 8001770:	4620      	mov	r0, r4
 8001772:	f7ff fd93 	bl	800129c <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001776:	3d01      	subs	r5, #1
 8001778:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800177a:	6923      	ldr	r3, [r4, #16]
 800177c:	b923      	cbnz	r3, 8001788 <xQueueReceive+0x82>
				taskEXIT_CRITICAL();
 800177e:	f001 f877 	bl	8002870 <vPortExitCritical>
				return pdPASS;
 8001782:	2001      	movs	r0, #1
}
 8001784:	b005      	add	sp, #20
 8001786:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001788:	f104 0010 	add.w	r0, r4, #16
 800178c:	f000 fcaa 	bl	80020e4 <xTaskRemoveFromEventList>
 8001790:	2800      	cmp	r0, #0
 8001792:	d0f4      	beq.n	800177e <xQueueReceive+0x78>
						queueYIELD_IF_USING_PREEMPTION();
 8001794:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001798:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800179c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80017a0:	f3bf 8f4f 	dsb	sy
 80017a4:	f3bf 8f6f 	isb	sy
 80017a8:	e7e9      	b.n	800177e <xQueueReceive+0x78>
					taskEXIT_CRITICAL();
 80017aa:	f001 f861 	bl	8002870 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80017ae:	2000      	movs	r0, #0
 80017b0:	e7e8      	b.n	8001784 <xQueueReceive+0x7e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80017b2:	a802      	add	r0, sp, #8
 80017b4:	f000 fcdc 	bl	8002170 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80017b8:	2601      	movs	r6, #1
 80017ba:	e021      	b.n	8001800 <xQueueReceive+0xfa>
		prvLockQueue( pxQueue );
 80017bc:	2300      	movs	r3, #0
 80017be:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80017c2:	e029      	b.n	8001818 <xQueueReceive+0x112>
 80017c4:	2300      	movs	r3, #0
 80017c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80017ca:	e02b      	b.n	8001824 <xQueueReceive+0x11e>
				prvUnlockQueue( pxQueue );
 80017cc:	4620      	mov	r0, r4
 80017ce:	f7ff fd77 	bl	80012c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80017d2:	f000 fb61 	bl	8001e98 <xTaskResumeAll>
 80017d6:	e009      	b.n	80017ec <xQueueReceive+0xe6>
			prvUnlockQueue( pxQueue );
 80017d8:	4620      	mov	r0, r4
 80017da:	f7ff fd71 	bl	80012c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80017de:	f000 fb5b 	bl	8001e98 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80017e2:	4620      	mov	r0, r4
 80017e4:	f7ff fd12 	bl	800120c <prvIsQueueEmpty>
 80017e8:	2800      	cmp	r0, #0
 80017ea:	d13f      	bne.n	800186c <xQueueReceive+0x166>
		taskENTER_CRITICAL();
 80017ec:	f001 f81a 	bl	8002824 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80017f0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80017f2:	2d00      	cmp	r5, #0
 80017f4:	d1bb      	bne.n	800176e <xQueueReceive+0x68>
				if( xTicksToWait == ( TickType_t ) 0 )
 80017f6:	9b01      	ldr	r3, [sp, #4]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d0d6      	beq.n	80017aa <xQueueReceive+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 80017fc:	2e00      	cmp	r6, #0
 80017fe:	d0d8      	beq.n	80017b2 <xQueueReceive+0xac>
		taskEXIT_CRITICAL();
 8001800:	f001 f836 	bl	8002870 <vPortExitCritical>
		vTaskSuspendAll();
 8001804:	f000 faaa 	bl	8001d5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001808:	f001 f80c 	bl	8002824 <vPortEnterCritical>
 800180c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001810:	b25b      	sxtb	r3, r3
 8001812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001816:	d0d1      	beq.n	80017bc <xQueueReceive+0xb6>
 8001818:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800181c:	b25b      	sxtb	r3, r3
 800181e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001822:	d0cf      	beq.n	80017c4 <xQueueReceive+0xbe>
 8001824:	f001 f824 	bl	8002870 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001828:	a901      	add	r1, sp, #4
 800182a:	a802      	add	r0, sp, #8
 800182c:	f000 fcaa 	bl	8002184 <xTaskCheckForTimeOut>
 8001830:	2800      	cmp	r0, #0
 8001832:	d1d1      	bne.n	80017d8 <xQueueReceive+0xd2>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001834:	4620      	mov	r0, r4
 8001836:	f7ff fce9 	bl	800120c <prvIsQueueEmpty>
 800183a:	2800      	cmp	r0, #0
 800183c:	d0c6      	beq.n	80017cc <xQueueReceive+0xc6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800183e:	9901      	ldr	r1, [sp, #4]
 8001840:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001844:	f000 fc12 	bl	800206c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001848:	4620      	mov	r0, r4
 800184a:	f7ff fd39 	bl	80012c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800184e:	f000 fb23 	bl	8001e98 <xTaskResumeAll>
 8001852:	2800      	cmp	r0, #0
 8001854:	d1ca      	bne.n	80017ec <xQueueReceive+0xe6>
					portYIELD_WITHIN_API();
 8001856:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800185a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800185e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001862:	f3bf 8f4f 	dsb	sy
 8001866:	f3bf 8f6f 	isb	sy
 800186a:	e7bf      	b.n	80017ec <xQueueReceive+0xe6>
				return errQUEUE_EMPTY;
 800186c:	2000      	movs	r0, #0
 800186e:	e789      	b.n	8001784 <xQueueReceive+0x7e>

08001870 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001870:	2300      	movs	r3, #0
 8001872:	2b07      	cmp	r3, #7
 8001874:	d80c      	bhi.n	8001890 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001876:	4a07      	ldr	r2, [pc, #28]	; (8001894 <vQueueAddToRegistry+0x24>)
 8001878:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800187c:	b10a      	cbz	r2, 8001882 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800187e:	3301      	adds	r3, #1
 8001880:	e7f7      	b.n	8001872 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001882:	4a04      	ldr	r2, [pc, #16]	; (8001894 <vQueueAddToRegistry+0x24>)
 8001884:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001888:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800188c:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800188e:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	20000aac 	.word	0x20000aac

08001898 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001898:	b570      	push	{r4, r5, r6, lr}
 800189a:	4604      	mov	r4, r0
 800189c:	460d      	mov	r5, r1
 800189e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80018a0:	f000 ffc0 	bl	8002824 <vPortEnterCritical>
 80018a4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80018a8:	b25b      	sxtb	r3, r3
 80018aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ae:	d00d      	beq.n	80018cc <vQueueWaitForMessageRestricted+0x34>
 80018b0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80018b4:	b25b      	sxtb	r3, r3
 80018b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ba:	d00b      	beq.n	80018d4 <vQueueWaitForMessageRestricted+0x3c>
 80018bc:	f000 ffd8 	bl	8002870 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80018c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80018c2:	b15b      	cbz	r3, 80018dc <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80018c4:	4620      	mov	r0, r4
 80018c6:	f7ff fcfb 	bl	80012c0 <prvUnlockQueue>
	}
 80018ca:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 80018cc:	2300      	movs	r3, #0
 80018ce:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80018d2:	e7ed      	b.n	80018b0 <vQueueWaitForMessageRestricted+0x18>
 80018d4:	2300      	movs	r3, #0
 80018d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80018da:	e7ef      	b.n	80018bc <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80018dc:	4632      	mov	r2, r6
 80018de:	4629      	mov	r1, r5
 80018e0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80018e4:	f000 fbde 	bl	80020a4 <vTaskPlaceOnEventListRestricted>
 80018e8:	e7ec      	b.n	80018c4 <vQueueWaitForMessageRestricted+0x2c>
	...

080018ec <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80018ec:	4b07      	ldr	r3, [pc, #28]	; (800190c <prvResetNextTaskUnblockTime+0x20>)
 80018ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	b923      	cbnz	r3, 80018fe <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80018f4:	4b05      	ldr	r3, [pc, #20]	; (800190c <prvResetNextTaskUnblockTime+0x20>)
 80018f6:	f04f 32ff 	mov.w	r2, #4294967295
 80018fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80018fc:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80018fe:	4b03      	ldr	r3, [pc, #12]	; (800190c <prvResetNextTaskUnblockTime+0x20>)
 8001900:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001902:	68d2      	ldr	r2, [r2, #12]
 8001904:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001906:	6852      	ldr	r2, [r2, #4]
 8001908:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 800190a:	4770      	bx	lr
 800190c:	20000aec 	.word	0x20000aec

08001910 <prvInitialiseNewTask>:
{
 8001910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001914:	4680      	mov	r8, r0
 8001916:	460d      	mov	r5, r1
 8001918:	4617      	mov	r7, r2
 800191a:	4699      	mov	r9, r3
 800191c:	9e08      	ldr	r6, [sp, #32]
 800191e:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8001922:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001924:	0092      	lsls	r2, r2, #2
 8001926:	21a5      	movs	r1, #165	; 0xa5
 8001928:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800192a:	f005 fbca 	bl	80070c2 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800192e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001930:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8001934:	443a      	add	r2, r7
 8001936:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800193a:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 800193e:	b3a5      	cbz	r5, 80019aa <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001940:	f04f 0c00 	mov.w	ip, #0
 8001944:	f1bc 0f0f 	cmp.w	ip, #15
 8001948:	d809      	bhi.n	800195e <prvInitialiseNewTask+0x4e>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800194a:	f815 300c 	ldrb.w	r3, [r5, ip]
 800194e:	eb04 020c 	add.w	r2, r4, ip
 8001952:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8001956:	b113      	cbz	r3, 800195e <prvInitialiseNewTask+0x4e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001958:	f10c 0c01 	add.w	ip, ip, #1
 800195c:	e7f2      	b.n	8001944 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800195e:	2300      	movs	r3, #0
 8001960:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001964:	2e37      	cmp	r6, #55	; 0x37
 8001966:	d900      	bls.n	800196a <prvInitialiseNewTask+0x5a>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001968:	2637      	movs	r6, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 800196a:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800196c:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800196e:	2500      	movs	r5, #0
 8001970:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001972:	1d20      	adds	r0, r4, #4
 8001974:	f7ff fc01 	bl	800117a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001978:	f104 0018 	add.w	r0, r4, #24
 800197c:	f7ff fbfd 	bl	800117a <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001980:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001982:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
 8001986:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001988:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 800198a:	6565      	str	r5, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800198c:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001990:	464a      	mov	r2, r9
 8001992:	4641      	mov	r1, r8
 8001994:	4638      	mov	r0, r7
 8001996:	f000 ff1b 	bl	80027d0 <pxPortInitialiseStack>
 800199a:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800199c:	f1ba 0f00 	cmp.w	sl, #0
 80019a0:	d001      	beq.n	80019a6 <prvInitialiseNewTask+0x96>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80019a2:	f8ca 4000 	str.w	r4, [sl]
}
 80019a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80019aa:	2300      	movs	r3, #0
 80019ac:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 80019b0:	e7d8      	b.n	8001964 <prvInitialiseNewTask+0x54>
	...

080019b4 <prvInitialiseTaskLists>:
{
 80019b4:	b570      	push	{r4, r5, r6, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80019b6:	2400      	movs	r4, #0
 80019b8:	e007      	b.n	80019ca <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80019ba:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80019be:	0093      	lsls	r3, r2, #2
 80019c0:	4810      	ldr	r0, [pc, #64]	; (8001a04 <prvInitialiseTaskLists+0x50>)
 80019c2:	4418      	add	r0, r3
 80019c4:	f7ff fbce 	bl	8001164 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80019c8:	3401      	adds	r4, #1
 80019ca:	2c37      	cmp	r4, #55	; 0x37
 80019cc:	d9f5      	bls.n	80019ba <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 80019ce:	4c0e      	ldr	r4, [pc, #56]	; (8001a08 <prvInitialiseTaskLists+0x54>)
 80019d0:	f504 6692 	add.w	r6, r4, #1168	; 0x490
 80019d4:	4630      	mov	r0, r6
 80019d6:	f7ff fbc5 	bl	8001164 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80019da:	f204 45a4 	addw	r5, r4, #1188	; 0x4a4
 80019de:	4628      	mov	r0, r5
 80019e0:	f7ff fbc0 	bl	8001164 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80019e4:	f104 0014 	add.w	r0, r4, #20
 80019e8:	f7ff fbbc 	bl	8001164 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80019ec:	f504 6097 	add.w	r0, r4, #1208	; 0x4b8
 80019f0:	f7ff fbb8 	bl	8001164 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80019f4:	4620      	mov	r0, r4
 80019f6:	f7ff fbb5 	bl	8001164 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80019fa:	62a6      	str	r6, [r4, #40]	; 0x28
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80019fc:	f8c4 54cc 	str.w	r5, [r4, #1228]	; 0x4cc
}
 8001a00:	bd70      	pop	{r4, r5, r6, pc}
 8001a02:	bf00      	nop
 8001a04:	20000b1c 	.word	0x20000b1c
 8001a08:	20000aec 	.word	0x20000aec

08001a0c <prvAddNewTaskToReadyList>:
{
 8001a0c:	b538      	push	{r3, r4, r5, lr}
 8001a0e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8001a10:	f000 ff08 	bl	8002824 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8001a14:	4b28      	ldr	r3, [pc, #160]	; (8001ab8 <prvAddNewTaskToReadyList+0xac>)
 8001a16:	f8d3 24d0 	ldr.w	r2, [r3, #1232]	; 0x4d0
 8001a1a:	3201      	adds	r2, #1
 8001a1c:	f8c3 24d0 	str.w	r2, [r3, #1232]	; 0x4d0
		if( pxCurrentTCB == NULL )
 8001a20:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8001a24:	b173      	cbz	r3, 8001a44 <prvAddNewTaskToReadyList+0x38>
			if( xSchedulerRunning == pdFALSE )
 8001a26:	4b24      	ldr	r3, [pc, #144]	; (8001ab8 <prvAddNewTaskToReadyList+0xac>)
 8001a28:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 8001a2c:	b98b      	cbnz	r3, 8001a52 <prvAddNewTaskToReadyList+0x46>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001a2e:	4b22      	ldr	r3, [pc, #136]	; (8001ab8 <prvAddNewTaskToReadyList+0xac>)
 8001a30:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8001a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a36:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d80a      	bhi.n	8001a52 <prvAddNewTaskToReadyList+0x46>
					pxCurrentTCB = pxNewTCB;
 8001a3c:	4b1e      	ldr	r3, [pc, #120]	; (8001ab8 <prvAddNewTaskToReadyList+0xac>)
 8001a3e:	f8c3 44d4 	str.w	r4, [r3, #1236]	; 0x4d4
 8001a42:	e006      	b.n	8001a52 <prvAddNewTaskToReadyList+0x46>
			pxCurrentTCB = pxNewTCB;
 8001a44:	4b1c      	ldr	r3, [pc, #112]	; (8001ab8 <prvAddNewTaskToReadyList+0xac>)
 8001a46:	f8c3 44d4 	str.w	r4, [r3, #1236]	; 0x4d4
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001a4a:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d02e      	beq.n	8001ab0 <prvAddNewTaskToReadyList+0xa4>
		uxTaskNumber++;
 8001a52:	4a19      	ldr	r2, [pc, #100]	; (8001ab8 <prvAddNewTaskToReadyList+0xac>)
 8001a54:	f8d2 34dc 	ldr.w	r3, [r2, #1244]	; 0x4dc
 8001a58:	3301      	adds	r3, #1
 8001a5a:	f8c2 34dc 	str.w	r3, [r2, #1244]	; 0x4dc
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001a5e:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8001a60:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a62:	f8d2 24e0 	ldr.w	r2, [r2, #1248]	; 0x4e0
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d902      	bls.n	8001a70 <prvAddNewTaskToReadyList+0x64>
 8001a6a:	4a13      	ldr	r2, [pc, #76]	; (8001ab8 <prvAddNewTaskToReadyList+0xac>)
 8001a6c:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
 8001a70:	4d11      	ldr	r5, [pc, #68]	; (8001ab8 <prvAddNewTaskToReadyList+0xac>)
 8001a72:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8001a76:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001a7a:	1d21      	adds	r1, r4, #4
 8001a7c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001a80:	f7ff fb7e 	bl	8001180 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8001a84:	f000 fef4 	bl	8002870 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8001a88:	f8d5 34d8 	ldr.w	r3, [r5, #1240]	; 0x4d8
 8001a8c:	b17b      	cbz	r3, 8001aae <prvAddNewTaskToReadyList+0xa2>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001a8e:	f8d5 34d4 	ldr.w	r3, [r5, #1236]	; 0x4d4
 8001a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a94:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d209      	bcs.n	8001aae <prvAddNewTaskToReadyList+0xa2>
			taskYIELD_IF_USING_PREEMPTION();
 8001a9a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001aa2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001aa6:	f3bf 8f4f 	dsb	sy
 8001aaa:	f3bf 8f6f 	isb	sy
}
 8001aae:	bd38      	pop	{r3, r4, r5, pc}
				prvInitialiseTaskLists();
 8001ab0:	f7ff ff80 	bl	80019b4 <prvInitialiseTaskLists>
 8001ab4:	e7cd      	b.n	8001a52 <prvAddNewTaskToReadyList+0x46>
 8001ab6:	bf00      	nop
 8001ab8:	20000aec 	.word	0x20000aec

08001abc <prvDeleteTCB>:
	{
 8001abc:	b510      	push	{r4, lr}
 8001abe:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8001ac0:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
 8001ac4:	b173      	cbz	r3, 8001ae4 <prvDeleteTCB+0x28>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d013      	beq.n	8001af2 <prvDeleteTCB+0x36>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d010      	beq.n	8001af0 <prvDeleteTCB+0x34>
 8001ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ad2:	b672      	cpsid	i
 8001ad4:	f383 8811 	msr	BASEPRI, r3
 8001ad8:	f3bf 8f6f 	isb	sy
 8001adc:	f3bf 8f4f 	dsb	sy
 8001ae0:	b662      	cpsie	i
 8001ae2:	e7fe      	b.n	8001ae2 <prvDeleteTCB+0x26>
				vPortFree( pxTCB->pxStack );
 8001ae4:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8001ae6:	f001 f899 	bl	8002c1c <vPortFree>
				vPortFree( pxTCB );
 8001aea:	4620      	mov	r0, r4
 8001aec:	f001 f896 	bl	8002c1c <vPortFree>
	}
 8001af0:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8001af2:	f001 f893 	bl	8002c1c <vPortFree>
 8001af6:	e7fb      	b.n	8001af0 <prvDeleteTCB+0x34>

08001af8 <prvCheckTasksWaitingTermination>:
{
 8001af8:	b538      	push	{r3, r4, r5, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001afa:	e017      	b.n	8001b2c <prvCheckTasksWaitingTermination+0x34>
			taskENTER_CRITICAL();
 8001afc:	f000 fe92 	bl	8002824 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001b00:	4c0d      	ldr	r4, [pc, #52]	; (8001b38 <prvCheckTasksWaitingTermination+0x40>)
 8001b02:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
 8001b06:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001b08:	1d28      	adds	r0, r5, #4
 8001b0a:	f7ff fb5d 	bl	80011c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001b0e:	f8d4 34d0 	ldr.w	r3, [r4, #1232]	; 0x4d0
 8001b12:	3b01      	subs	r3, #1
 8001b14:	f8c4 34d0 	str.w	r3, [r4, #1232]	; 0x4d0
				--uxDeletedTasksWaitingCleanUp;
 8001b18:	f8d4 34e4 	ldr.w	r3, [r4, #1252]	; 0x4e4
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	f8c4 34e4 	str.w	r3, [r4, #1252]	; 0x4e4
			taskEXIT_CRITICAL();
 8001b22:	f000 fea5 	bl	8002870 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8001b26:	4628      	mov	r0, r5
 8001b28:	f7ff ffc8 	bl	8001abc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001b2c:	4b02      	ldr	r3, [pc, #8]	; (8001b38 <prvCheckTasksWaitingTermination+0x40>)
 8001b2e:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1e2      	bne.n	8001afc <prvCheckTasksWaitingTermination+0x4>
}
 8001b36:	bd38      	pop	{r3, r4, r5, pc}
 8001b38:	20000aec 	.word	0x20000aec

08001b3c <prvIdleTask>:
{
 8001b3c:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8001b3e:	f7ff ffdb 	bl	8001af8 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001b42:	4b07      	ldr	r3, [pc, #28]	; (8001b60 <prvIdleTask+0x24>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d9f9      	bls.n	8001b3e <prvIdleTask+0x2>
				taskYIELD();
 8001b4a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b52:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001b56:	f3bf 8f4f 	dsb	sy
 8001b5a:	f3bf 8f6f 	isb	sy
 8001b5e:	e7ee      	b.n	8001b3e <prvIdleTask+0x2>
 8001b60:	20000aec 	.word	0x20000aec

08001b64 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001b64:	b570      	push	{r4, r5, r6, lr}
 8001b66:	4604      	mov	r4, r0
 8001b68:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001b6a:	4b1a      	ldr	r3, [pc, #104]	; (8001bd4 <prvAddCurrentTaskToDelayedList+0x70>)
 8001b6c:	f8d3 64e8 	ldr.w	r6, [r3, #1256]	; 0x4e8
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001b70:	f8d3 04d4 	ldr.w	r0, [r3, #1236]	; 0x4d4
 8001b74:	3004      	adds	r0, #4
 8001b76:	f7ff fb27 	bl	80011c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001b7a:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001b7e:	bf14      	ite	ne
 8001b80:	2300      	movne	r3, #0
 8001b82:	2301      	moveq	r3, #1
 8001b84:	2d00      	cmp	r5, #0
 8001b86:	bf08      	it	eq
 8001b88:	2300      	moveq	r3, #0
 8001b8a:	b97b      	cbnz	r3, 8001bac <prvAddCurrentTaskToDelayedList+0x48>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001b8c:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001b8e:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <prvAddCurrentTaskToDelayedList+0x70>)
 8001b90:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8001b94:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8001b96:	42a6      	cmp	r6, r4
 8001b98:	d90f      	bls.n	8001bba <prvAddCurrentTaskToDelayedList+0x56>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001b9a:	4b0e      	ldr	r3, [pc, #56]	; (8001bd4 <prvAddCurrentTaskToDelayedList+0x70>)
 8001b9c:	f8d3 04cc 	ldr.w	r0, [r3, #1228]	; 0x4cc
 8001ba0:	f8d3 14d4 	ldr.w	r1, [r3, #1236]	; 0x4d4
 8001ba4:	3104      	adds	r1, #4
 8001ba6:	f7ff faf6 	bl	8001196 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001baa:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001bac:	4809      	ldr	r0, [pc, #36]	; (8001bd4 <prvAddCurrentTaskToDelayedList+0x70>)
 8001bae:	f8d0 14d4 	ldr.w	r1, [r0, #1236]	; 0x4d4
 8001bb2:	3104      	adds	r1, #4
 8001bb4:	f7ff fae4 	bl	8001180 <vListInsertEnd>
 8001bb8:	e7f7      	b.n	8001baa <prvAddCurrentTaskToDelayedList+0x46>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001bba:	4d06      	ldr	r5, [pc, #24]	; (8001bd4 <prvAddCurrentTaskToDelayedList+0x70>)
 8001bbc:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8001bbe:	f8d5 14d4 	ldr.w	r1, [r5, #1236]	; 0x4d4
 8001bc2:	3104      	adds	r1, #4
 8001bc4:	f7ff fae7 	bl	8001196 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001bc8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001bca:	42a3      	cmp	r3, r4
 8001bcc:	d9ed      	bls.n	8001baa <prvAddCurrentTaskToDelayedList+0x46>
					xNextTaskUnblockTime = xTimeToWake;
 8001bce:	62ec      	str	r4, [r5, #44]	; 0x2c
}
 8001bd0:	e7eb      	b.n	8001baa <prvAddCurrentTaskToDelayedList+0x46>
 8001bd2:	bf00      	nop
 8001bd4:	20000aec 	.word	0x20000aec

08001bd8 <xTaskCreateStatic>:
	{
 8001bd8:	b530      	push	{r4, r5, lr}
 8001bda:	b087      	sub	sp, #28
 8001bdc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8001bde:	b18c      	cbz	r4, 8001c04 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8001be0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001be2:	b1d5      	cbz	r5, 8001c1a <xTaskCreateStatic+0x42>
			volatile size_t xSize = sizeof( StaticTask_t );
 8001be4:	255c      	movs	r5, #92	; 0x5c
 8001be6:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001be8:	9d04      	ldr	r5, [sp, #16]
 8001bea:	2d5c      	cmp	r5, #92	; 0x5c
 8001bec:	d020      	beq.n	8001c30 <xTaskCreateStatic+0x58>
 8001bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bf2:	b672      	cpsid	i
 8001bf4:	f383 8811 	msr	BASEPRI, r3
 8001bf8:	f3bf 8f6f 	isb	sy
 8001bfc:	f3bf 8f4f 	dsb	sy
 8001c00:	b662      	cpsie	i
 8001c02:	e7fe      	b.n	8001c02 <xTaskCreateStatic+0x2a>
 8001c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c08:	b672      	cpsid	i
 8001c0a:	f383 8811 	msr	BASEPRI, r3
 8001c0e:	f3bf 8f6f 	isb	sy
 8001c12:	f3bf 8f4f 	dsb	sy
 8001c16:	b662      	cpsie	i
		configASSERT( puxStackBuffer != NULL );
 8001c18:	e7fe      	b.n	8001c18 <xTaskCreateStatic+0x40>
 8001c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c1e:	b672      	cpsid	i
 8001c20:	f383 8811 	msr	BASEPRI, r3
 8001c24:	f3bf 8f6f 	isb	sy
 8001c28:	f3bf 8f4f 	dsb	sy
 8001c2c:	b662      	cpsie	i
		configASSERT( pxTaskBuffer != NULL );
 8001c2e:	e7fe      	b.n	8001c2e <xTaskCreateStatic+0x56>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8001c30:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001c32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001c34:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001c36:	2402      	movs	r4, #2
 8001c38:	f885 4059 	strb.w	r4, [r5, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001c3c:	2400      	movs	r4, #0
 8001c3e:	9403      	str	r4, [sp, #12]
 8001c40:	9502      	str	r5, [sp, #8]
 8001c42:	ac05      	add	r4, sp, #20
 8001c44:	9401      	str	r4, [sp, #4]
 8001c46:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001c48:	9400      	str	r4, [sp, #0]
 8001c4a:	f7ff fe61 	bl	8001910 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001c4e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001c50:	f7ff fedc 	bl	8001a0c <prvAddNewTaskToReadyList>
	}
 8001c54:	9805      	ldr	r0, [sp, #20]
 8001c56:	b007      	add	sp, #28
 8001c58:	bd30      	pop	{r4, r5, pc}

08001c5a <xTaskCreate>:
	{
 8001c5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	4607      	mov	r7, r0
 8001c62:	4688      	mov	r8, r1
 8001c64:	4614      	mov	r4, r2
 8001c66:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001c68:	0090      	lsls	r0, r2, #2
 8001c6a:	f000 ff65 	bl	8002b38 <pvPortMalloc>
			if( pxStack != NULL )
 8001c6e:	b300      	cbz	r0, 8001cb2 <xTaskCreate+0x58>
 8001c70:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001c72:	205c      	movs	r0, #92	; 0x5c
 8001c74:	f000 ff60 	bl	8002b38 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8001c78:	4605      	mov	r5, r0
 8001c7a:	b1b0      	cbz	r0, 8001caa <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 8001c7c:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8001c80:	b1e5      	cbz	r5, 8001cbc <xTaskCreate+0x62>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001c82:	2300      	movs	r3, #0
 8001c84:	f885 3059 	strb.w	r3, [r5, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001c88:	9303      	str	r3, [sp, #12]
 8001c8a:	9502      	str	r5, [sp, #8]
 8001c8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001c8e:	9301      	str	r3, [sp, #4]
 8001c90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	4633      	mov	r3, r6
 8001c96:	4622      	mov	r2, r4
 8001c98:	4641      	mov	r1, r8
 8001c9a:	4638      	mov	r0, r7
 8001c9c:	f7ff fe38 	bl	8001910 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001ca0:	4628      	mov	r0, r5
 8001ca2:	f7ff feb3 	bl	8001a0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001ca6:	2001      	movs	r0, #1
 8001ca8:	e005      	b.n	8001cb6 <xTaskCreate+0x5c>
					vPortFree( pxStack );
 8001caa:	4648      	mov	r0, r9
 8001cac:	f000 ffb6 	bl	8002c1c <vPortFree>
 8001cb0:	e7e6      	b.n	8001c80 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001cb2:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8001cb6:	b005      	add	sp, #20
 8001cb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001cbc:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8001cc0:	e7f9      	b.n	8001cb6 <xTaskCreate+0x5c>
	...

08001cc4 <vTaskStartScheduler>:
{
 8001cc4:	b510      	push	{r4, lr}
 8001cc6:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001cc8:	2400      	movs	r4, #0
 8001cca:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001ccc:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001cce:	aa07      	add	r2, sp, #28
 8001cd0:	a906      	add	r1, sp, #24
 8001cd2:	a805      	add	r0, sp, #20
 8001cd4:	f7ff fa28 	bl	8001128 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001cd8:	9b05      	ldr	r3, [sp, #20]
 8001cda:	9302      	str	r3, [sp, #8]
 8001cdc:	9b06      	ldr	r3, [sp, #24]
 8001cde:	9301      	str	r3, [sp, #4]
 8001ce0:	9400      	str	r4, [sp, #0]
 8001ce2:	4623      	mov	r3, r4
 8001ce4:	9a07      	ldr	r2, [sp, #28]
 8001ce6:	491a      	ldr	r1, [pc, #104]	; (8001d50 <vTaskStartScheduler+0x8c>)
 8001ce8:	481a      	ldr	r0, [pc, #104]	; (8001d54 <vTaskStartScheduler+0x90>)
 8001cea:	f7ff ff75 	bl	8001bd8 <xTaskCreateStatic>
 8001cee:	4b1a      	ldr	r3, [pc, #104]	; (8001d58 <vTaskStartScheduler+0x94>)
 8001cf0:	f8c3 04f0 	str.w	r0, [r3, #1264]	; 0x4f0
		if( xIdleTaskHandle != NULL )
 8001cf4:	b140      	cbz	r0, 8001d08 <vTaskStartScheduler+0x44>
			xReturn = xTimerCreateTimerTask();
 8001cf6:	f000 fb55 	bl	80023a4 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8001cfa:	2801      	cmp	r0, #1
 8001cfc:	d006      	beq.n	8001d0c <vTaskStartScheduler+0x48>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001cfe:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001d02:	d01a      	beq.n	8001d3a <vTaskStartScheduler+0x76>
}
 8001d04:	b008      	add	sp, #32
 8001d06:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 8001d08:	2000      	movs	r0, #0
 8001d0a:	e7f6      	b.n	8001cfa <vTaskStartScheduler+0x36>
 8001d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d10:	b672      	cpsid	i
 8001d12:	f383 8811 	msr	BASEPRI, r3
 8001d16:	f3bf 8f6f 	isb	sy
 8001d1a:	f3bf 8f4f 	dsb	sy
 8001d1e:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8001d20:	4b0d      	ldr	r3, [pc, #52]	; (8001d58 <vTaskStartScheduler+0x94>)
 8001d22:	f04f 32ff 	mov.w	r2, #4294967295
 8001d26:	62da      	str	r2, [r3, #44]	; 0x2c
		xSchedulerRunning = pdTRUE;
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
		if( xPortStartScheduler() != pdFALSE )
 8001d34:	f000 fe12 	bl	800295c <xPortStartScheduler>
 8001d38:	e7e4      	b.n	8001d04 <vTaskStartScheduler+0x40>
 8001d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d3e:	b672      	cpsid	i
 8001d40:	f383 8811 	msr	BASEPRI, r3
 8001d44:	f3bf 8f6f 	isb	sy
 8001d48:	f3bf 8f4f 	dsb	sy
 8001d4c:	b662      	cpsie	i
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001d4e:	e7fe      	b.n	8001d4e <vTaskStartScheduler+0x8a>
 8001d50:	080098f0 	.word	0x080098f0
 8001d54:	08001b3d 	.word	0x08001b3d
 8001d58:	20000aec 	.word	0x20000aec

08001d5c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8001d5c:	4a03      	ldr	r2, [pc, #12]	; (8001d6c <vTaskSuspendAll+0x10>)
 8001d5e:	f8d2 34ec 	ldr.w	r3, [r2, #1260]	; 0x4ec
 8001d62:	3301      	adds	r3, #1
 8001d64:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
}
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	20000aec 	.word	0x20000aec

08001d70 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8001d70:	4b01      	ldr	r3, [pc, #4]	; (8001d78 <xTaskGetTickCount+0x8>)
 8001d72:	f8d3 04e8 	ldr.w	r0, [r3, #1256]	; 0x4e8
}
 8001d76:	4770      	bx	lr
 8001d78:	20000aec 	.word	0x20000aec

08001d7c <xTaskIncrementTick>:
{
 8001d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d80:	4b44      	ldr	r3, [pc, #272]	; (8001e94 <xTaskIncrementTick+0x118>)
 8001d82:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d172      	bne.n	8001e70 <xTaskIncrementTick+0xf4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001d8a:	4b42      	ldr	r3, [pc, #264]	; (8001e94 <xTaskIncrementTick+0x118>)
 8001d8c:	f8d3 54e8 	ldr.w	r5, [r3, #1256]	; 0x4e8
 8001d90:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8001d92:	f8c3 54e8 	str.w	r5, [r3, #1256]	; 0x4e8
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001d96:	b9dd      	cbnz	r5, 8001dd0 <xTaskIncrementTick+0x54>
			taskSWITCH_DELAYED_LISTS();
 8001d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	b153      	cbz	r3, 8001db4 <xTaskIncrementTick+0x38>
 8001d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001da2:	b672      	cpsid	i
 8001da4:	f383 8811 	msr	BASEPRI, r3
 8001da8:	f3bf 8f6f 	isb	sy
 8001dac:	f3bf 8f4f 	dsb	sy
 8001db0:	b662      	cpsie	i
 8001db2:	e7fe      	b.n	8001db2 <xTaskIncrementTick+0x36>
 8001db4:	4b37      	ldr	r3, [pc, #220]	; (8001e94 <xTaskIncrementTick+0x118>)
 8001db6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001db8:	f8d3 14cc 	ldr.w	r1, [r3, #1228]	; 0x4cc
 8001dbc:	6299      	str	r1, [r3, #40]	; 0x28
 8001dbe:	f8c3 24cc 	str.w	r2, [r3, #1228]	; 0x4cc
 8001dc2:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	; 0x4f4
 8001dc6:	3201      	adds	r2, #1
 8001dc8:	f8c3 24f4 	str.w	r2, [r3, #1268]	; 0x4f4
 8001dcc:	f7ff fd8e 	bl	80018ec <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001dd0:	4b30      	ldr	r3, [pc, #192]	; (8001e94 <xTaskIncrementTick+0x118>)
 8001dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd4:	42ab      	cmp	r3, r5
 8001dd6:	d940      	bls.n	8001e5a <xTaskIncrementTick+0xde>
BaseType_t xSwitchRequired = pdFALSE;
 8001dd8:	f04f 0800 	mov.w	r8, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001ddc:	4a2d      	ldr	r2, [pc, #180]	; (8001e94 <xTaskIncrementTick+0x118>)
 8001dde:	f8d2 34d4 	ldr.w	r3, [r2, #1236]	; 0x4d4
 8001de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001de8:	0099      	lsls	r1, r3, #2
 8001dea:	440a      	add	r2, r1
 8001dec:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d946      	bls.n	8001e80 <xTaskIncrementTick+0x104>
				xSwitchRequired = pdTRUE;
 8001df2:	f04f 0801 	mov.w	r8, #1
 8001df6:	e043      	b.n	8001e80 <xTaskIncrementTick+0x104>
							xSwitchRequired = pdTRUE;
 8001df8:	f04f 0801 	mov.w	r8, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001dfc:	4b25      	ldr	r3, [pc, #148]	; (8001e94 <xTaskIncrementTick+0x118>)
 8001dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	b36b      	cbz	r3, 8001e60 <xTaskIncrementTick+0xe4>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e04:	4b23      	ldr	r3, [pc, #140]	; (8001e94 <xTaskIncrementTick+0x118>)
 8001e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001e0c:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8001e0e:	429d      	cmp	r5, r3
 8001e10:	d32b      	bcc.n	8001e6a <xTaskIncrementTick+0xee>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001e12:	1d27      	adds	r7, r4, #4
 8001e14:	4638      	mov	r0, r7
 8001e16:	f7ff f9d7 	bl	80011c8 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001e1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001e1c:	b11b      	cbz	r3, 8001e26 <xTaskIncrementTick+0xaa>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001e1e:	f104 0018 	add.w	r0, r4, #24
 8001e22:	f7ff f9d1 	bl	80011c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001e26:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001e28:	4a1a      	ldr	r2, [pc, #104]	; (8001e94 <xTaskIncrementTick+0x118>)
 8001e2a:	f8d2 24e0 	ldr.w	r2, [r2, #1248]	; 0x4e0
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d902      	bls.n	8001e38 <xTaskIncrementTick+0xbc>
 8001e32:	4a18      	ldr	r2, [pc, #96]	; (8001e94 <xTaskIncrementTick+0x118>)
 8001e34:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
 8001e38:	4e16      	ldr	r6, [pc, #88]	; (8001e94 <xTaskIncrementTick+0x118>)
 8001e3a:	f106 0030 	add.w	r0, r6, #48	; 0x30
 8001e3e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001e42:	009a      	lsls	r2, r3, #2
 8001e44:	4639      	mov	r1, r7
 8001e46:	4410      	add	r0, r2
 8001e48:	f7ff f99a 	bl	8001180 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001e4c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001e4e:	f8d6 34d4 	ldr.w	r3, [r6, #1236]	; 0x4d4
 8001e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d2cf      	bcs.n	8001df8 <xTaskIncrementTick+0x7c>
 8001e58:	e7d0      	b.n	8001dfc <xTaskIncrementTick+0x80>
BaseType_t xSwitchRequired = pdFALSE;
 8001e5a:	f04f 0800 	mov.w	r8, #0
 8001e5e:	e7cd      	b.n	8001dfc <xTaskIncrementTick+0x80>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e60:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <xTaskIncrementTick+0x118>)
 8001e62:	f04f 32ff 	mov.w	r2, #4294967295
 8001e66:	62da      	str	r2, [r3, #44]	; 0x2c
					break;
 8001e68:	e7b8      	b.n	8001ddc <xTaskIncrementTick+0x60>
						xNextTaskUnblockTime = xItemValue;
 8001e6a:	4a0a      	ldr	r2, [pc, #40]	; (8001e94 <xTaskIncrementTick+0x118>)
 8001e6c:	62d3      	str	r3, [r2, #44]	; 0x2c
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001e6e:	e7b5      	b.n	8001ddc <xTaskIncrementTick+0x60>
		++uxPendedTicks;
 8001e70:	4a08      	ldr	r2, [pc, #32]	; (8001e94 <xTaskIncrementTick+0x118>)
 8001e72:	f8d2 34f8 	ldr.w	r3, [r2, #1272]	; 0x4f8
 8001e76:	3301      	adds	r3, #1
 8001e78:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
BaseType_t xSwitchRequired = pdFALSE;
 8001e7c:	f04f 0800 	mov.w	r8, #0
		if( xYieldPending != pdFALSE )
 8001e80:	4b04      	ldr	r3, [pc, #16]	; (8001e94 <xTaskIncrementTick+0x118>)
 8001e82:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001e86:	b10b      	cbz	r3, 8001e8c <xTaskIncrementTick+0x110>
			xSwitchRequired = pdTRUE;
 8001e88:	f04f 0801 	mov.w	r8, #1
}
 8001e8c:	4640      	mov	r0, r8
 8001e8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e92:	bf00      	nop
 8001e94:	20000aec 	.word	0x20000aec

08001e98 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8001e98:	4b3b      	ldr	r3, [pc, #236]	; (8001f88 <xTaskResumeAll+0xf0>)
 8001e9a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8001e9e:	b953      	cbnz	r3, 8001eb6 <xTaskResumeAll+0x1e>
 8001ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ea4:	b672      	cpsid	i
 8001ea6:	f383 8811 	msr	BASEPRI, r3
 8001eaa:	f3bf 8f6f 	isb	sy
 8001eae:	f3bf 8f4f 	dsb	sy
 8001eb2:	b662      	cpsie	i
 8001eb4:	e7fe      	b.n	8001eb4 <xTaskResumeAll+0x1c>
{
 8001eb6:	b570      	push	{r4, r5, r6, lr}
	taskENTER_CRITICAL();
 8001eb8:	f000 fcb4 	bl	8002824 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8001ebc:	4b32      	ldr	r3, [pc, #200]	; (8001f88 <xTaskResumeAll+0xf0>)
 8001ebe:	f8d3 24ec 	ldr.w	r2, [r3, #1260]	; 0x4ec
 8001ec2:	3a01      	subs	r2, #1
 8001ec4:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001ec8:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d156      	bne.n	8001f7e <xTaskResumeAll+0xe6>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001ed0:	4b2d      	ldr	r3, [pc, #180]	; (8001f88 <xTaskResumeAll+0xf0>)
 8001ed2:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
 8001ed6:	b90b      	cbnz	r3, 8001edc <xTaskResumeAll+0x44>
BaseType_t xAlreadyYielded = pdFALSE;
 8001ed8:	2400      	movs	r4, #0
 8001eda:	e051      	b.n	8001f80 <xTaskResumeAll+0xe8>
TCB_t *pxTCB = NULL;
 8001edc:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001ede:	4b2a      	ldr	r3, [pc, #168]	; (8001f88 <xTaskResumeAll+0xf0>)
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	b32b      	cbz	r3, 8001f30 <xTaskResumeAll+0x98>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001ee4:	4d28      	ldr	r5, [pc, #160]	; (8001f88 <xTaskResumeAll+0xf0>)
 8001ee6:	6a2b      	ldr	r3, [r5, #32]
 8001ee8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001eea:	f104 0018 	add.w	r0, r4, #24
 8001eee:	f7ff f96b 	bl	80011c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001ef2:	1d26      	adds	r6, r4, #4
 8001ef4:	4630      	mov	r0, r6
 8001ef6:	f7ff f967 	bl	80011c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001efa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001efc:	f8d5 24e0 	ldr.w	r2, [r5, #1248]	; 0x4e0
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d901      	bls.n	8001f08 <xTaskResumeAll+0x70>
 8001f04:	f8c5 34e0 	str.w	r3, [r5, #1248]	; 0x4e0
 8001f08:	4d1f      	ldr	r5, [pc, #124]	; (8001f88 <xTaskResumeAll+0xf0>)
 8001f0a:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8001f0e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001f12:	4631      	mov	r1, r6
 8001f14:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001f18:	f7ff f932 	bl	8001180 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001f1c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001f1e:	f8d5 34d4 	ldr.w	r3, [r5, #1236]	; 0x4d4
 8001f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d3da      	bcc.n	8001ede <xTaskResumeAll+0x46>
						xYieldPending = pdTRUE;
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f8c5 24fc 	str.w	r2, [r5, #1276]	; 0x4fc
 8001f2e:	e7d6      	b.n	8001ede <xTaskResumeAll+0x46>
				if( pxTCB != NULL )
 8001f30:	b10c      	cbz	r4, 8001f36 <xTaskResumeAll+0x9e>
					prvResetNextTaskUnblockTime();
 8001f32:	f7ff fcdb 	bl	80018ec <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001f36:	4b14      	ldr	r3, [pc, #80]	; (8001f88 <xTaskResumeAll+0xf0>)
 8001f38:	f8d3 44f8 	ldr.w	r4, [r3, #1272]	; 0x4f8
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001f3c:	b98c      	cbnz	r4, 8001f62 <xTaskResumeAll+0xca>
				if( xYieldPending != pdFALSE )
 8001f3e:	4b12      	ldr	r3, [pc, #72]	; (8001f88 <xTaskResumeAll+0xf0>)
 8001f40:	f8d3 44fc 	ldr.w	r4, [r3, #1276]	; 0x4fc
 8001f44:	b1e4      	cbz	r4, 8001f80 <xTaskResumeAll+0xe8>
					taskYIELD_IF_USING_PREEMPTION();
 8001f46:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f4e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001f52:	f3bf 8f4f 	dsb	sy
 8001f56:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8001f5a:	2401      	movs	r4, #1
 8001f5c:	e010      	b.n	8001f80 <xTaskResumeAll+0xe8>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001f5e:	3c01      	subs	r4, #1
 8001f60:	d008      	beq.n	8001f74 <xTaskResumeAll+0xdc>
							if( xTaskIncrementTick() != pdFALSE )
 8001f62:	f7ff ff0b 	bl	8001d7c <xTaskIncrementTick>
 8001f66:	2800      	cmp	r0, #0
 8001f68:	d0f9      	beq.n	8001f5e <xTaskResumeAll+0xc6>
								xYieldPending = pdTRUE;
 8001f6a:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <xTaskResumeAll+0xf0>)
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
 8001f72:	e7f4      	b.n	8001f5e <xTaskResumeAll+0xc6>
						uxPendedTicks = 0;
 8001f74:	4b04      	ldr	r3, [pc, #16]	; (8001f88 <xTaskResumeAll+0xf0>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
 8001f7c:	e7df      	b.n	8001f3e <xTaskResumeAll+0xa6>
BaseType_t xAlreadyYielded = pdFALSE;
 8001f7e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8001f80:	f000 fc76 	bl	8002870 <vPortExitCritical>
}
 8001f84:	4620      	mov	r0, r4
 8001f86:	bd70      	pop	{r4, r5, r6, pc}
 8001f88:	20000aec 	.word	0x20000aec

08001f8c <vTaskDelay>:
	{
 8001f8c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001f8e:	b1c0      	cbz	r0, 8001fc2 <vTaskDelay+0x36>
 8001f90:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8001f92:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <vTaskDelay+0x4c>)
 8001f94:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8001f98:	b153      	cbz	r3, 8001fb0 <vTaskDelay+0x24>
 8001f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f9e:	b672      	cpsid	i
 8001fa0:	f383 8811 	msr	BASEPRI, r3
 8001fa4:	f3bf 8f6f 	isb	sy
 8001fa8:	f3bf 8f4f 	dsb	sy
 8001fac:	b662      	cpsie	i
 8001fae:	e7fe      	b.n	8001fae <vTaskDelay+0x22>
			vTaskSuspendAll();
 8001fb0:	f7ff fed4 	bl	8001d5c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	4620      	mov	r0, r4
 8001fb8:	f7ff fdd4 	bl	8001b64 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8001fbc:	f7ff ff6c 	bl	8001e98 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8001fc0:	b948      	cbnz	r0, 8001fd6 <vTaskDelay+0x4a>
			portYIELD_WITHIN_API();
 8001fc2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001fc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fca:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001fce:	f3bf 8f4f 	dsb	sy
 8001fd2:	f3bf 8f6f 	isb	sy
	}
 8001fd6:	bd10      	pop	{r4, pc}
 8001fd8:	20000aec 	.word	0x20000aec

08001fdc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001fdc:	4b22      	ldr	r3, [pc, #136]	; (8002068 <vTaskSwitchContext+0x8c>)
 8001fde:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8001fe2:	b123      	cbz	r3, 8001fee <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 8001fe4:	4b20      	ldr	r3, [pc, #128]	; (8002068 <vTaskSwitchContext+0x8c>)
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
 8001fec:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8001fee:	4b1e      	ldr	r3, [pc, #120]	; (8002068 <vTaskSwitchContext+0x8c>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001ff6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8001ffa:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8001ffe:	0091      	lsls	r1, r2, #2
 8002000:	4a19      	ldr	r2, [pc, #100]	; (8002068 <vTaskSwitchContext+0x8c>)
 8002002:	440a      	add	r2, r1
 8002004:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002006:	b96a      	cbnz	r2, 8002024 <vTaskSwitchContext+0x48>
 8002008:	b10b      	cbz	r3, 800200e <vTaskSwitchContext+0x32>
 800200a:	3b01      	subs	r3, #1
 800200c:	e7f5      	b.n	8001ffa <vTaskSwitchContext+0x1e>
 800200e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002012:	b672      	cpsid	i
 8002014:	f383 8811 	msr	BASEPRI, r3
 8002018:	f3bf 8f6f 	isb	sy
 800201c:	f3bf 8f4f 	dsb	sy
 8002020:	b662      	cpsie	i
 8002022:	e7fe      	b.n	8002022 <vTaskSwitchContext+0x46>
 8002024:	4a10      	ldr	r2, [pc, #64]	; (8002068 <vTaskSwitchContext+0x8c>)
 8002026:	4411      	add	r1, r2
 8002028:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800202a:	6840      	ldr	r0, [r0, #4]
 800202c:	6348      	str	r0, [r1, #52]	; 0x34
 800202e:	3230      	adds	r2, #48	; 0x30
 8002030:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8002034:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8002038:	3108      	adds	r1, #8
 800203a:	440a      	add	r2, r1
 800203c:	4290      	cmp	r0, r2
 800203e:	d00b      	beq.n	8002058 <vTaskSwitchContext+0x7c>
 8002040:	4909      	ldr	r1, [pc, #36]	; (8002068 <vTaskSwitchContext+0x8c>)
 8002042:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8002046:	0082      	lsls	r2, r0, #2
 8002048:	440a      	add	r2, r1
 800204a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800204c:	68d2      	ldr	r2, [r2, #12]
 800204e:	f8c1 24d4 	str.w	r2, [r1, #1236]	; 0x4d4
 8002052:	f8c1 34e0 	str.w	r3, [r1, #1248]	; 0x4e0
}
 8002056:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002058:	6840      	ldr	r0, [r0, #4]
 800205a:	4662      	mov	r2, ip
 800205c:	0091      	lsls	r1, r2, #2
 800205e:	4a02      	ldr	r2, [pc, #8]	; (8002068 <vTaskSwitchContext+0x8c>)
 8002060:	440a      	add	r2, r1
 8002062:	6350      	str	r0, [r2, #52]	; 0x34
 8002064:	e7ec      	b.n	8002040 <vTaskSwitchContext+0x64>
 8002066:	bf00      	nop
 8002068:	20000aec 	.word	0x20000aec

0800206c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800206c:	b160      	cbz	r0, 8002088 <vTaskPlaceOnEventList+0x1c>
{
 800206e:	b510      	push	{r4, lr}
 8002070:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002072:	4a0b      	ldr	r2, [pc, #44]	; (80020a0 <vTaskPlaceOnEventList+0x34>)
 8002074:	f8d2 14d4 	ldr.w	r1, [r2, #1236]	; 0x4d4
 8002078:	3118      	adds	r1, #24
 800207a:	f7ff f88c 	bl	8001196 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800207e:	2101      	movs	r1, #1
 8002080:	4620      	mov	r0, r4
 8002082:	f7ff fd6f 	bl	8001b64 <prvAddCurrentTaskToDelayedList>
}
 8002086:	bd10      	pop	{r4, pc}
 8002088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800208c:	b672      	cpsid	i
 800208e:	f383 8811 	msr	BASEPRI, r3
 8002092:	f3bf 8f6f 	isb	sy
 8002096:	f3bf 8f4f 	dsb	sy
 800209a:	b662      	cpsie	i
	configASSERT( pxEventList );
 800209c:	e7fe      	b.n	800209c <vTaskPlaceOnEventList+0x30>
 800209e:	bf00      	nop
 80020a0:	20000aec 	.word	0x20000aec

080020a4 <vTaskPlaceOnEventListRestricted>:
	{
 80020a4:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 80020a6:	b178      	cbz	r0, 80020c8 <vTaskPlaceOnEventListRestricted+0x24>
 80020a8:	460d      	mov	r5, r1
 80020aa:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80020ac:	4a0c      	ldr	r2, [pc, #48]	; (80020e0 <vTaskPlaceOnEventListRestricted+0x3c>)
 80020ae:	f8d2 14d4 	ldr.w	r1, [r2, #1236]	; 0x4d4
 80020b2:	3118      	adds	r1, #24
 80020b4:	f7ff f864 	bl	8001180 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 80020b8:	b10c      	cbz	r4, 80020be <vTaskPlaceOnEventListRestricted+0x1a>
			xTicksToWait = portMAX_DELAY;
 80020ba:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80020be:	4621      	mov	r1, r4
 80020c0:	4628      	mov	r0, r5
 80020c2:	f7ff fd4f 	bl	8001b64 <prvAddCurrentTaskToDelayedList>
	}
 80020c6:	bd38      	pop	{r3, r4, r5, pc}
 80020c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020cc:	b672      	cpsid	i
 80020ce:	f383 8811 	msr	BASEPRI, r3
 80020d2:	f3bf 8f6f 	isb	sy
 80020d6:	f3bf 8f4f 	dsb	sy
 80020da:	b662      	cpsie	i
		configASSERT( pxEventList );
 80020dc:	e7fe      	b.n	80020dc <vTaskPlaceOnEventListRestricted+0x38>
 80020de:	bf00      	nop
 80020e0:	20000aec 	.word	0x20000aec

080020e4 <xTaskRemoveFromEventList>:
{
 80020e4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80020e6:	68c3      	ldr	r3, [r0, #12]
 80020e8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80020ea:	b34c      	cbz	r4, 8002140 <xTaskRemoveFromEventList+0x5c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80020ec:	f104 0518 	add.w	r5, r4, #24
 80020f0:	4628      	mov	r0, r5
 80020f2:	f7ff f869 	bl	80011c8 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80020f6:	4b1b      	ldr	r3, [pc, #108]	; (8002164 <xTaskRemoveFromEventList+0x80>)
 80020f8:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80020fc:	bb5b      	cbnz	r3, 8002156 <xTaskRemoveFromEventList+0x72>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80020fe:	1d25      	adds	r5, r4, #4
 8002100:	4628      	mov	r0, r5
 8002102:	f7ff f861 	bl	80011c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002106:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002108:	4b16      	ldr	r3, [pc, #88]	; (8002164 <xTaskRemoveFromEventList+0x80>)
 800210a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800210e:	4298      	cmp	r0, r3
 8002110:	d902      	bls.n	8002118 <xTaskRemoveFromEventList+0x34>
 8002112:	4b14      	ldr	r3, [pc, #80]	; (8002164 <xTaskRemoveFromEventList+0x80>)
 8002114:	f8c3 04e0 	str.w	r0, [r3, #1248]	; 0x4e0
 8002118:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800211c:	4629      	mov	r1, r5
 800211e:	4b12      	ldr	r3, [pc, #72]	; (8002168 <xTaskRemoveFromEventList+0x84>)
 8002120:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002124:	f7ff f82c 	bl	8001180 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002128:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800212a:	4b0e      	ldr	r3, [pc, #56]	; (8002164 <xTaskRemoveFromEventList+0x80>)
 800212c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8002130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002132:	429a      	cmp	r2, r3
 8002134:	d914      	bls.n	8002160 <xTaskRemoveFromEventList+0x7c>
		xYieldPending = pdTRUE;
 8002136:	2001      	movs	r0, #1
 8002138:	4b0a      	ldr	r3, [pc, #40]	; (8002164 <xTaskRemoveFromEventList+0x80>)
 800213a:	f8c3 04fc 	str.w	r0, [r3, #1276]	; 0x4fc
}
 800213e:	bd38      	pop	{r3, r4, r5, pc}
 8002140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002144:	b672      	cpsid	i
 8002146:	f383 8811 	msr	BASEPRI, r3
 800214a:	f3bf 8f6f 	isb	sy
 800214e:	f3bf 8f4f 	dsb	sy
 8002152:	b662      	cpsie	i
	configASSERT( pxUnblockedTCB );
 8002154:	e7fe      	b.n	8002154 <xTaskRemoveFromEventList+0x70>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002156:	4629      	mov	r1, r5
 8002158:	4804      	ldr	r0, [pc, #16]	; (800216c <xTaskRemoveFromEventList+0x88>)
 800215a:	f7ff f811 	bl	8001180 <vListInsertEnd>
 800215e:	e7e3      	b.n	8002128 <xTaskRemoveFromEventList+0x44>
		xReturn = pdFALSE;
 8002160:	2000      	movs	r0, #0
	return xReturn;
 8002162:	e7ec      	b.n	800213e <xTaskRemoveFromEventList+0x5a>
 8002164:	20000aec 	.word	0x20000aec
 8002168:	20000b1c 	.word	0x20000b1c
 800216c:	20000b00 	.word	0x20000b00

08002170 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002170:	4b03      	ldr	r3, [pc, #12]	; (8002180 <vTaskInternalSetTimeOutState+0x10>)
 8002172:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	; 0x4f4
 8002176:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002178:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800217c:	6043      	str	r3, [r0, #4]
}
 800217e:	4770      	bx	lr
 8002180:	20000aec 	.word	0x20000aec

08002184 <xTaskCheckForTimeOut>:
{
 8002184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8002186:	b1d8      	cbz	r0, 80021c0 <xTaskCheckForTimeOut+0x3c>
 8002188:	460c      	mov	r4, r1
 800218a:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 800218c:	b319      	cbz	r1, 80021d6 <xTaskCheckForTimeOut+0x52>
	taskENTER_CRITICAL();
 800218e:	f000 fb49 	bl	8002824 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8002192:	4b1e      	ldr	r3, [pc, #120]	; (800220c <xTaskCheckForTimeOut+0x88>)
 8002194:	f8d3 14e8 	ldr.w	r1, [r3, #1256]	; 0x4e8
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002198:	686b      	ldr	r3, [r5, #4]
 800219a:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 800219c:	6822      	ldr	r2, [r4, #0]
 800219e:	f1b2 3fff 	cmp.w	r2, #4294967295
 80021a2:	d02b      	beq.n	80021fc <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80021a4:	4e19      	ldr	r6, [pc, #100]	; (800220c <xTaskCheckForTimeOut+0x88>)
 80021a6:	f8d6 64f4 	ldr.w	r6, [r6, #1268]	; 0x4f4
 80021aa:	682f      	ldr	r7, [r5, #0]
 80021ac:	42b7      	cmp	r7, r6
 80021ae:	d001      	beq.n	80021b4 <xTaskCheckForTimeOut+0x30>
 80021b0:	428b      	cmp	r3, r1
 80021b2:	d928      	bls.n	8002206 <xTaskCheckForTimeOut+0x82>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80021b4:	4282      	cmp	r2, r0
 80021b6:	d819      	bhi.n	80021ec <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait = 0;
 80021b8:	2300      	movs	r3, #0
 80021ba:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80021bc:	2401      	movs	r4, #1
 80021be:	e01e      	b.n	80021fe <xTaskCheckForTimeOut+0x7a>
 80021c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021c4:	b672      	cpsid	i
 80021c6:	f383 8811 	msr	BASEPRI, r3
 80021ca:	f3bf 8f6f 	isb	sy
 80021ce:	f3bf 8f4f 	dsb	sy
 80021d2:	b662      	cpsie	i
	configASSERT( pxTimeOut );
 80021d4:	e7fe      	b.n	80021d4 <xTaskCheckForTimeOut+0x50>
 80021d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021da:	b672      	cpsid	i
 80021dc:	f383 8811 	msr	BASEPRI, r3
 80021e0:	f3bf 8f6f 	isb	sy
 80021e4:	f3bf 8f4f 	dsb	sy
 80021e8:	b662      	cpsie	i
	configASSERT( pxTicksToWait );
 80021ea:	e7fe      	b.n	80021ea <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait -= xElapsedTime;
 80021ec:	1a5b      	subs	r3, r3, r1
 80021ee:	4413      	add	r3, r2
 80021f0:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80021f2:	4628      	mov	r0, r5
 80021f4:	f7ff ffbc 	bl	8002170 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80021f8:	2400      	movs	r4, #0
 80021fa:	e000      	b.n	80021fe <xTaskCheckForTimeOut+0x7a>
				xReturn = pdFALSE;
 80021fc:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80021fe:	f000 fb37 	bl	8002870 <vPortExitCritical>
}
 8002202:	4620      	mov	r0, r4
 8002204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 8002206:	2401      	movs	r4, #1
 8002208:	e7f9      	b.n	80021fe <xTaskCheckForTimeOut+0x7a>
 800220a:	bf00      	nop
 800220c:	20000aec 	.word	0x20000aec

08002210 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8002210:	4b02      	ldr	r3, [pc, #8]	; (800221c <vTaskMissedYield+0xc>)
 8002212:	2201      	movs	r2, #1
 8002214:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
}
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	20000aec 	.word	0x20000aec

08002220 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8002220:	4b06      	ldr	r3, [pc, #24]	; (800223c <xTaskGetSchedulerState+0x1c>)
 8002222:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 8002226:	b13b      	cbz	r3, 8002238 <xTaskGetSchedulerState+0x18>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002228:	4b04      	ldr	r3, [pc, #16]	; (800223c <xTaskGetSchedulerState+0x1c>)
 800222a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800222e:	b10b      	cbz	r3, 8002234 <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_SUSPENDED;
 8002230:	2000      	movs	r0, #0
	}
 8002232:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8002234:	2002      	movs	r0, #2
 8002236:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002238:	2001      	movs	r0, #1
 800223a:	4770      	bx	lr
 800223c:	20000aec 	.word	0x20000aec

08002240 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8002240:	2800      	cmp	r0, #0
 8002242:	d042      	beq.n	80022ca <xTaskPriorityDisinherit+0x8a>
	{
 8002244:	b538      	push	{r3, r4, r5, lr}
 8002246:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8002248:	4b22      	ldr	r3, [pc, #136]	; (80022d4 <xTaskPriorityDisinherit+0x94>)
 800224a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800224e:	4283      	cmp	r3, r0
 8002250:	d00a      	beq.n	8002268 <xTaskPriorityDisinherit+0x28>
 8002252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002256:	b672      	cpsid	i
 8002258:	f383 8811 	msr	BASEPRI, r3
 800225c:	f3bf 8f6f 	isb	sy
 8002260:	f3bf 8f4f 	dsb	sy
 8002264:	b662      	cpsie	i
 8002266:	e7fe      	b.n	8002266 <xTaskPriorityDisinherit+0x26>
			configASSERT( pxTCB->uxMutexesHeld );
 8002268:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800226a:	b953      	cbnz	r3, 8002282 <xTaskPriorityDisinherit+0x42>
 800226c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002270:	b672      	cpsid	i
 8002272:	f383 8811 	msr	BASEPRI, r3
 8002276:	f3bf 8f6f 	isb	sy
 800227a:	f3bf 8f4f 	dsb	sy
 800227e:	b662      	cpsie	i
 8002280:	e7fe      	b.n	8002280 <xTaskPriorityDisinherit+0x40>
			( pxTCB->uxMutexesHeld )--;
 8002282:	3b01      	subs	r3, #1
 8002284:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002286:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002288:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800228a:	4291      	cmp	r1, r2
 800228c:	d01f      	beq.n	80022ce <xTaskPriorityDisinherit+0x8e>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800228e:	b10b      	cbz	r3, 8002294 <xTaskPriorityDisinherit+0x54>
	BaseType_t xReturn = pdFALSE;
 8002290:	2000      	movs	r0, #0
	}
 8002292:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002294:	1d05      	adds	r5, r0, #4
 8002296:	4628      	mov	r0, r5
 8002298:	f7fe ff96 	bl	80011c8 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800229c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800229e:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022a0:	f1c0 0338 	rsb	r3, r0, #56	; 0x38
 80022a4:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80022a6:	4b0b      	ldr	r3, [pc, #44]	; (80022d4 <xTaskPriorityDisinherit+0x94>)
 80022a8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80022ac:	4298      	cmp	r0, r3
 80022ae:	d902      	bls.n	80022b6 <xTaskPriorityDisinherit+0x76>
 80022b0:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <xTaskPriorityDisinherit+0x94>)
 80022b2:	f8c3 04e0 	str.w	r0, [r3, #1248]	; 0x4e0
 80022b6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80022ba:	4629      	mov	r1, r5
 80022bc:	4b06      	ldr	r3, [pc, #24]	; (80022d8 <xTaskPriorityDisinherit+0x98>)
 80022be:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80022c2:	f7fe ff5d 	bl	8001180 <vListInsertEnd>
					xReturn = pdTRUE;
 80022c6:	2001      	movs	r0, #1
 80022c8:	e7e3      	b.n	8002292 <xTaskPriorityDisinherit+0x52>
	BaseType_t xReturn = pdFALSE;
 80022ca:	2000      	movs	r0, #0
	}
 80022cc:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 80022ce:	2000      	movs	r0, #0
 80022d0:	e7df      	b.n	8002292 <xTaskPriorityDisinherit+0x52>
 80022d2:	bf00      	nop
 80022d4:	20000aec 	.word	0x20000aec
 80022d8:	20000b1c 	.word	0x20000b1c

080022dc <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80022dc:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <prvGetNextExpireTime+0x1c>)
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	6813      	ldr	r3, [r2, #0]
 80022e2:	b92b      	cbnz	r3, 80022f0 <prvGetNextExpireTime+0x14>
 80022e4:	2301      	movs	r3, #1
 80022e6:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 80022e8:	b923      	cbnz	r3, 80022f4 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80022ea:	68d3      	ldr	r3, [r2, #12]
 80022ec:	6818      	ldr	r0, [r3, #0]
 80022ee:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80022f0:	2300      	movs	r3, #0
 80022f2:	e7f8      	b.n	80022e6 <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80022f4:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 80022f6:	4770      	bx	lr
 80022f8:	20000fec 	.word	0x20000fec

080022fc <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80022fc:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80022fe:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002300:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002302:	4291      	cmp	r1, r2
 8002304:	d80c      	bhi.n	8002320 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002306:	1ad2      	subs	r2, r2, r3
 8002308:	6983      	ldr	r3, [r0, #24]
 800230a:	429a      	cmp	r2, r3
 800230c:	d301      	bcc.n	8002312 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800230e:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8002310:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002312:	1d01      	adds	r1, r0, #4
 8002314:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <prvInsertTimerInActiveList+0x48>)
 8002316:	6858      	ldr	r0, [r3, #4]
 8002318:	f7fe ff3d 	bl	8001196 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800231c:	2000      	movs	r0, #0
 800231e:	e7f7      	b.n	8002310 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002320:	429a      	cmp	r2, r3
 8002322:	bf2c      	ite	cs
 8002324:	2200      	movcs	r2, #0
 8002326:	2201      	movcc	r2, #1
 8002328:	4299      	cmp	r1, r3
 800232a:	bf38      	it	cc
 800232c:	2200      	movcc	r2, #0
 800232e:	b10a      	cbz	r2, 8002334 <prvInsertTimerInActiveList+0x38>
			xProcessTimerNow = pdTRUE;
 8002330:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8002332:	e7ed      	b.n	8002310 <prvInsertTimerInActiveList+0x14>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002334:	1d01      	adds	r1, r0, #4
 8002336:	4b03      	ldr	r3, [pc, #12]	; (8002344 <prvInsertTimerInActiveList+0x48>)
 8002338:	6818      	ldr	r0, [r3, #0]
 800233a:	f7fe ff2c 	bl	8001196 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800233e:	2000      	movs	r0, #0
 8002340:	e7e6      	b.n	8002310 <prvInsertTimerInActiveList+0x14>
 8002342:	bf00      	nop
 8002344:	20000fec 	.word	0x20000fec

08002348 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002348:	b570      	push	{r4, r5, r6, lr}
 800234a:	b082      	sub	sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800234c:	f000 fa6a 	bl	8002824 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002350:	4b12      	ldr	r3, [pc, #72]	; (800239c <prvCheckForValidListAndQueue+0x54>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	b11b      	cbz	r3, 800235e <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002356:	f000 fa8b 	bl	8002870 <vPortExitCritical>
}
 800235a:	b002      	add	sp, #8
 800235c:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
 800235e:	4c0f      	ldr	r4, [pc, #60]	; (800239c <prvCheckForValidListAndQueue+0x54>)
 8002360:	f104 060c 	add.w	r6, r4, #12
 8002364:	4630      	mov	r0, r6
 8002366:	f7fe fefd 	bl	8001164 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800236a:	f104 0520 	add.w	r5, r4, #32
 800236e:	4628      	mov	r0, r5
 8002370:	f7fe fef8 	bl	8001164 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002374:	6026      	str	r6, [r4, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002376:	6065      	str	r5, [r4, #4]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8002378:	2300      	movs	r3, #0
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8002380:	f104 0284 	add.w	r2, r4, #132	; 0x84
 8002384:	2110      	movs	r1, #16
 8002386:	200a      	movs	r0, #10
 8002388:	f7ff f826 	bl	80013d8 <xQueueGenericCreateStatic>
 800238c:	60a0      	str	r0, [r4, #8]
				if( xTimerQueue != NULL )
 800238e:	2800      	cmp	r0, #0
 8002390:	d0e1      	beq.n	8002356 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002392:	4903      	ldr	r1, [pc, #12]	; (80023a0 <prvCheckForValidListAndQueue+0x58>)
 8002394:	f7ff fa6c 	bl	8001870 <vQueueAddToRegistry>
 8002398:	e7dd      	b.n	8002356 <prvCheckForValidListAndQueue+0xe>
 800239a:	bf00      	nop
 800239c:	20000fec 	.word	0x20000fec
 80023a0:	080098f8 	.word	0x080098f8

080023a4 <xTimerCreateTimerTask>:
{
 80023a4:	b510      	push	{r4, lr}
 80023a6:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 80023a8:	f7ff ffce 	bl	8002348 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 80023ac:	4b14      	ldr	r3, [pc, #80]	; (8002400 <xTimerCreateTimerTask+0x5c>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	b1d3      	cbz	r3, 80023e8 <xTimerCreateTimerTask+0x44>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80023b2:	2400      	movs	r4, #0
 80023b4:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80023b6:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80023b8:	aa07      	add	r2, sp, #28
 80023ba:	a906      	add	r1, sp, #24
 80023bc:	a805      	add	r0, sp, #20
 80023be:	f7fe fec1 	bl	8001144 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80023c2:	9b05      	ldr	r3, [sp, #20]
 80023c4:	9302      	str	r3, [sp, #8]
 80023c6:	9b06      	ldr	r3, [sp, #24]
 80023c8:	9301      	str	r3, [sp, #4]
 80023ca:	2302      	movs	r3, #2
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	4623      	mov	r3, r4
 80023d0:	9a07      	ldr	r2, [sp, #28]
 80023d2:	490c      	ldr	r1, [pc, #48]	; (8002404 <xTimerCreateTimerTask+0x60>)
 80023d4:	480c      	ldr	r0, [pc, #48]	; (8002408 <xTimerCreateTimerTask+0x64>)
 80023d6:	f7ff fbff 	bl	8001bd8 <xTaskCreateStatic>
 80023da:	4b09      	ldr	r3, [pc, #36]	; (8002400 <xTimerCreateTimerTask+0x5c>)
 80023dc:	f8c3 0124 	str.w	r0, [r3, #292]	; 0x124
			if( xTimerTaskHandle != NULL )
 80023e0:	b110      	cbz	r0, 80023e8 <xTimerCreateTimerTask+0x44>
}
 80023e2:	2001      	movs	r0, #1
 80023e4:	b008      	add	sp, #32
 80023e6:	bd10      	pop	{r4, pc}
 80023e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ec:	b672      	cpsid	i
 80023ee:	f383 8811 	msr	BASEPRI, r3
 80023f2:	f3bf 8f6f 	isb	sy
 80023f6:	f3bf 8f4f 	dsb	sy
 80023fa:	b662      	cpsie	i
	configASSERT( xReturn );
 80023fc:	e7fe      	b.n	80023fc <xTimerCreateTimerTask+0x58>
 80023fe:	bf00      	nop
 8002400:	20000fec 	.word	0x20000fec
 8002404:	08009900 	.word	0x08009900
 8002408:	08002735 	.word	0x08002735

0800240c <xTimerGenericCommand>:
	configASSERT( xTimer );
 800240c:	b1b8      	cbz	r0, 800243e <xTimerGenericCommand+0x32>
 800240e:	469c      	mov	ip, r3
 8002410:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 8002412:	4819      	ldr	r0, [pc, #100]	; (8002478 <xTimerGenericCommand+0x6c>)
 8002414:	6880      	ldr	r0, [r0, #8]
 8002416:	b368      	cbz	r0, 8002474 <xTimerGenericCommand+0x68>
{
 8002418:	b500      	push	{lr}
 800241a:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 800241c:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800241e:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8002420:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002422:	2905      	cmp	r1, #5
 8002424:	dc1e      	bgt.n	8002464 <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002426:	f7ff fefb 	bl	8002220 <xTaskGetSchedulerState>
 800242a:	2802      	cmp	r0, #2
 800242c:	d012      	beq.n	8002454 <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800242e:	2300      	movs	r3, #0
 8002430:	461a      	mov	r2, r3
 8002432:	4669      	mov	r1, sp
 8002434:	4810      	ldr	r0, [pc, #64]	; (8002478 <xTimerGenericCommand+0x6c>)
 8002436:	6880      	ldr	r0, [r0, #8]
 8002438:	f7ff f82b 	bl	8001492 <xQueueGenericSend>
 800243c:	e017      	b.n	800246e <xTimerGenericCommand+0x62>
 800243e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002442:	b672      	cpsid	i
 8002444:	f383 8811 	msr	BASEPRI, r3
 8002448:	f3bf 8f6f 	isb	sy
 800244c:	f3bf 8f4f 	dsb	sy
 8002450:	b662      	cpsie	i
	configASSERT( xTimer );
 8002452:	e7fe      	b.n	8002452 <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002454:	2300      	movs	r3, #0
 8002456:	9a06      	ldr	r2, [sp, #24]
 8002458:	4669      	mov	r1, sp
 800245a:	4807      	ldr	r0, [pc, #28]	; (8002478 <xTimerGenericCommand+0x6c>)
 800245c:	6880      	ldr	r0, [r0, #8]
 800245e:	f7ff f818 	bl	8001492 <xQueueGenericSend>
 8002462:	e004      	b.n	800246e <xTimerGenericCommand+0x62>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002464:	2300      	movs	r3, #0
 8002466:	4662      	mov	r2, ip
 8002468:	4669      	mov	r1, sp
 800246a:	f7ff f8de 	bl	800162a <xQueueGenericSendFromISR>
}
 800246e:	b005      	add	sp, #20
 8002470:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 8002474:	2000      	movs	r0, #0
}
 8002476:	4770      	bx	lr
 8002478:	20000fec 	.word	0x20000fec

0800247c <prvSwitchTimerLists>:
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800247c:	4b22      	ldr	r3, [pc, #136]	; (8002508 <prvSwitchTimerLists+0x8c>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	2a00      	cmp	r2, #0
 8002484:	d03b      	beq.n	80024fe <prvSwitchTimerLists+0x82>
{
 8002486:	b570      	push	{r4, r5, r6, lr}
 8002488:	b082      	sub	sp, #8
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800248e:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002490:	1d25      	adds	r5, r4, #4
 8002492:	4628      	mov	r0, r5
 8002494:	f7fe fe98 	bl	80011c8 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002498:	6a23      	ldr	r3, [r4, #32]
 800249a:	4620      	mov	r0, r4
 800249c:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800249e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80024a2:	f013 0f04 	tst.w	r3, #4
 80024a6:	d10a      	bne.n	80024be <prvSwitchTimerLists+0x42>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80024a8:	4b17      	ldr	r3, [pc, #92]	; (8002508 <prvSwitchTimerLists+0x8c>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	2a00      	cmp	r2, #0
 80024b0:	d1eb      	bne.n	800248a <prvSwitchTimerLists+0xe>
	pxCurrentTimerList = pxOverflowTimerList;
 80024b2:	4a15      	ldr	r2, [pc, #84]	; (8002508 <prvSwitchTimerLists+0x8c>)
 80024b4:	6851      	ldr	r1, [r2, #4]
 80024b6:	6011      	str	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80024b8:	6053      	str	r3, [r2, #4]
}
 80024ba:	b002      	add	sp, #8
 80024bc:	bd70      	pop	{r4, r5, r6, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80024be:	69a3      	ldr	r3, [r4, #24]
 80024c0:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 80024c2:	429e      	cmp	r6, r3
 80024c4:	d207      	bcs.n	80024d6 <prvSwitchTimerLists+0x5a>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80024c6:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80024c8:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80024ca:	4629      	mov	r1, r5
 80024cc:	4b0e      	ldr	r3, [pc, #56]	; (8002508 <prvSwitchTimerLists+0x8c>)
 80024ce:	6818      	ldr	r0, [r3, #0]
 80024d0:	f7fe fe61 	bl	8001196 <vListInsert>
 80024d4:	e7e8      	b.n	80024a8 <prvSwitchTimerLists+0x2c>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80024d6:	2100      	movs	r1, #0
 80024d8:	9100      	str	r1, [sp, #0]
 80024da:	460b      	mov	r3, r1
 80024dc:	4632      	mov	r2, r6
 80024de:	4620      	mov	r0, r4
 80024e0:	f7ff ff94 	bl	800240c <xTimerGenericCommand>
				configASSERT( xResult );
 80024e4:	2800      	cmp	r0, #0
 80024e6:	d1df      	bne.n	80024a8 <prvSwitchTimerLists+0x2c>
 80024e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ec:	b672      	cpsid	i
 80024ee:	f383 8811 	msr	BASEPRI, r3
 80024f2:	f3bf 8f6f 	isb	sy
 80024f6:	f3bf 8f4f 	dsb	sy
 80024fa:	b662      	cpsie	i
 80024fc:	e7fe      	b.n	80024fc <prvSwitchTimerLists+0x80>
	pxCurrentTimerList = pxOverflowTimerList;
 80024fe:	4a02      	ldr	r2, [pc, #8]	; (8002508 <prvSwitchTimerLists+0x8c>)
 8002500:	6851      	ldr	r1, [r2, #4]
 8002502:	6011      	str	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8002504:	6053      	str	r3, [r2, #4]
 8002506:	4770      	bx	lr
 8002508:	20000fec 	.word	0x20000fec

0800250c <prvSampleTimeNow>:
{
 800250c:	b538      	push	{r3, r4, r5, lr}
 800250e:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 8002510:	f7ff fc2e 	bl	8001d70 <xTaskGetTickCount>
 8002514:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 8002516:	4b08      	ldr	r3, [pc, #32]	; (8002538 <prvSampleTimeNow+0x2c>)
 8002518:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800251c:	4283      	cmp	r3, r0
 800251e:	d806      	bhi.n	800252e <prvSampleTimeNow+0x22>
		*pxTimerListsWereSwitched = pdFALSE;
 8002520:	2300      	movs	r3, #0
 8002522:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 8002524:	4b04      	ldr	r3, [pc, #16]	; (8002538 <prvSampleTimeNow+0x2c>)
 8002526:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
}
 800252a:	4620      	mov	r0, r4
 800252c:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 800252e:	f7ff ffa5 	bl	800247c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002532:	2301      	movs	r3, #1
 8002534:	602b      	str	r3, [r5, #0]
 8002536:	e7f5      	b.n	8002524 <prvSampleTimeNow+0x18>
 8002538:	20000fec 	.word	0x20000fec

0800253c <prvProcessExpiredTimer>:
{
 800253c:	b570      	push	{r4, r5, r6, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	4606      	mov	r6, r0
 8002542:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002544:	4918      	ldr	r1, [pc, #96]	; (80025a8 <prvProcessExpiredTimer+0x6c>)
 8002546:	6809      	ldr	r1, [r1, #0]
 8002548:	68c9      	ldr	r1, [r1, #12]
 800254a:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800254c:	1d20      	adds	r0, r4, #4
 800254e:	f7fe fe3b 	bl	80011c8 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002552:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
 8002556:	f01c 0f04 	tst.w	ip, #4
 800255a:	d108      	bne.n	800256e <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800255c:	f02c 0c01 	bic.w	ip, ip, #1
 8002560:	f884 c028 	strb.w	ip, [r4, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002564:	6a23      	ldr	r3, [r4, #32]
 8002566:	4620      	mov	r0, r4
 8002568:	4798      	blx	r3
}
 800256a:	b002      	add	sp, #8
 800256c:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800256e:	69a1      	ldr	r1, [r4, #24]
 8002570:	4633      	mov	r3, r6
 8002572:	462a      	mov	r2, r5
 8002574:	4431      	add	r1, r6
 8002576:	4620      	mov	r0, r4
 8002578:	f7ff fec0 	bl	80022fc <prvInsertTimerInActiveList>
 800257c:	2800      	cmp	r0, #0
 800257e:	d0f1      	beq.n	8002564 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002580:	2100      	movs	r1, #0
 8002582:	9100      	str	r1, [sp, #0]
 8002584:	460b      	mov	r3, r1
 8002586:	4632      	mov	r2, r6
 8002588:	4620      	mov	r0, r4
 800258a:	f7ff ff3f 	bl	800240c <xTimerGenericCommand>
			configASSERT( xResult );
 800258e:	2800      	cmp	r0, #0
 8002590:	d1e8      	bne.n	8002564 <prvProcessExpiredTimer+0x28>
 8002592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002596:	b672      	cpsid	i
 8002598:	f383 8811 	msr	BASEPRI, r3
 800259c:	f3bf 8f6f 	isb	sy
 80025a0:	f3bf 8f4f 	dsb	sy
 80025a4:	b662      	cpsie	i
 80025a6:	e7fe      	b.n	80025a6 <prvProcessExpiredTimer+0x6a>
 80025a8:	20000fec 	.word	0x20000fec

080025ac <prvProcessTimerOrBlockTask>:
{
 80025ac:	b570      	push	{r4, r5, r6, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	4606      	mov	r6, r0
 80025b2:	460c      	mov	r4, r1
	vTaskSuspendAll();
 80025b4:	f7ff fbd2 	bl	8001d5c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80025b8:	a801      	add	r0, sp, #4
 80025ba:	f7ff ffa7 	bl	800250c <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 80025be:	9b01      	ldr	r3, [sp, #4]
 80025c0:	bb3b      	cbnz	r3, 8002612 <prvProcessTimerOrBlockTask+0x66>
 80025c2:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80025c4:	42b0      	cmp	r0, r6
 80025c6:	bf28      	it	cs
 80025c8:	2c00      	cmpcs	r4, #0
 80025ca:	d019      	beq.n	8002600 <prvProcessTimerOrBlockTask+0x54>
				if( xListWasEmpty != pdFALSE )
 80025cc:	b124      	cbz	r4, 80025d8 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80025ce:	4a13      	ldr	r2, [pc, #76]	; (800261c <prvProcessTimerOrBlockTask+0x70>)
 80025d0:	6852      	ldr	r2, [r2, #4]
 80025d2:	6812      	ldr	r2, [r2, #0]
 80025d4:	b9da      	cbnz	r2, 800260e <prvProcessTimerOrBlockTask+0x62>
 80025d6:	2401      	movs	r4, #1
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80025d8:	4622      	mov	r2, r4
 80025da:	1b71      	subs	r1, r6, r5
 80025dc:	4b0f      	ldr	r3, [pc, #60]	; (800261c <prvProcessTimerOrBlockTask+0x70>)
 80025de:	6898      	ldr	r0, [r3, #8]
 80025e0:	f7ff f95a 	bl	8001898 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80025e4:	f7ff fc58 	bl	8001e98 <xTaskResumeAll>
 80025e8:	b9a8      	cbnz	r0, 8002616 <prvProcessTimerOrBlockTask+0x6a>
					portYIELD_WITHIN_API();
 80025ea:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80025ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025f2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80025f6:	f3bf 8f4f 	dsb	sy
 80025fa:	f3bf 8f6f 	isb	sy
 80025fe:	e00a      	b.n	8002616 <prvProcessTimerOrBlockTask+0x6a>
				( void ) xTaskResumeAll();
 8002600:	f7ff fc4a 	bl	8001e98 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002604:	4629      	mov	r1, r5
 8002606:	4630      	mov	r0, r6
 8002608:	f7ff ff98 	bl	800253c <prvProcessExpiredTimer>
 800260c:	e003      	b.n	8002616 <prvProcessTimerOrBlockTask+0x6a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800260e:	461c      	mov	r4, r3
 8002610:	e7e2      	b.n	80025d8 <prvProcessTimerOrBlockTask+0x2c>
			( void ) xTaskResumeAll();
 8002612:	f7ff fc41 	bl	8001e98 <xTaskResumeAll>
}
 8002616:	b002      	add	sp, #8
 8002618:	bd70      	pop	{r4, r5, r6, pc}
 800261a:	bf00      	nop
 800261c:	20000fec 	.word	0x20000fec

08002620 <prvProcessReceivedCommands>:
{
 8002620:	b510      	push	{r4, lr}
 8002622:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002624:	e002      	b.n	800262c <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002626:	9b04      	ldr	r3, [sp, #16]
 8002628:	2b00      	cmp	r3, #0
 800262a:	da0f      	bge.n	800264c <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800262c:	2200      	movs	r2, #0
 800262e:	a904      	add	r1, sp, #16
 8002630:	4b3f      	ldr	r3, [pc, #252]	; (8002730 <prvProcessReceivedCommands+0x110>)
 8002632:	6898      	ldr	r0, [r3, #8]
 8002634:	f7ff f867 	bl	8001706 <xQueueReceive>
 8002638:	2800      	cmp	r0, #0
 800263a:	d077      	beq.n	800272c <prvProcessReceivedCommands+0x10c>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800263c:	9b04      	ldr	r3, [sp, #16]
 800263e:	2b00      	cmp	r3, #0
 8002640:	daf1      	bge.n	8002626 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8002642:	9907      	ldr	r1, [sp, #28]
 8002644:	9806      	ldr	r0, [sp, #24]
 8002646:	9b05      	ldr	r3, [sp, #20]
 8002648:	4798      	blx	r3
 800264a:	e7ec      	b.n	8002626 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800264c:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800264e:	6963      	ldr	r3, [r4, #20]
 8002650:	b113      	cbz	r3, 8002658 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002652:	1d20      	adds	r0, r4, #4
 8002654:	f7fe fdb8 	bl	80011c8 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002658:	a803      	add	r0, sp, #12
 800265a:	f7ff ff57 	bl	800250c <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800265e:	9b04      	ldr	r3, [sp, #16]
 8002660:	2b09      	cmp	r3, #9
 8002662:	d8e3      	bhi.n	800262c <prvProcessReceivedCommands+0xc>
 8002664:	e8df f003 	tbb	[pc, r3]
 8002668:	32050505 	.word	0x32050505
 800266c:	05055439 	.word	0x05055439
 8002670:	3932      	.short	0x3932
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002672:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8002676:	f043 0301 	orr.w	r3, r3, #1
 800267a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800267e:	9b05      	ldr	r3, [sp, #20]
 8002680:	69a1      	ldr	r1, [r4, #24]
 8002682:	4602      	mov	r2, r0
 8002684:	4419      	add	r1, r3
 8002686:	4620      	mov	r0, r4
 8002688:	f7ff fe38 	bl	80022fc <prvInsertTimerInActiveList>
 800268c:	2800      	cmp	r0, #0
 800268e:	d0cd      	beq.n	800262c <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002690:	6a23      	ldr	r3, [r4, #32]
 8002692:	4620      	mov	r0, r4
 8002694:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002696:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800269a:	f013 0f04 	tst.w	r3, #4
 800269e:	d0c5      	beq.n	800262c <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80026a0:	69a2      	ldr	r2, [r4, #24]
 80026a2:	2100      	movs	r1, #0
 80026a4:	9100      	str	r1, [sp, #0]
 80026a6:	460b      	mov	r3, r1
 80026a8:	9805      	ldr	r0, [sp, #20]
 80026aa:	4402      	add	r2, r0
 80026ac:	4620      	mov	r0, r4
 80026ae:	f7ff fead 	bl	800240c <xTimerGenericCommand>
							configASSERT( xResult );
 80026b2:	2800      	cmp	r0, #0
 80026b4:	d1ba      	bne.n	800262c <prvProcessReceivedCommands+0xc>
 80026b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ba:	b672      	cpsid	i
 80026bc:	f383 8811 	msr	BASEPRI, r3
 80026c0:	f3bf 8f6f 	isb	sy
 80026c4:	f3bf 8f4f 	dsb	sy
 80026c8:	b662      	cpsie	i
 80026ca:	e7fe      	b.n	80026ca <prvProcessReceivedCommands+0xaa>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80026cc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80026d0:	f023 0301 	bic.w	r3, r3, #1
 80026d4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					break;
 80026d8:	e7a8      	b.n	800262c <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80026da:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80026de:	f043 0301 	orr.w	r3, r3, #1
 80026e2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80026e6:	9905      	ldr	r1, [sp, #20]
 80026e8:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80026ea:	b131      	cbz	r1, 80026fa <prvProcessReceivedCommands+0xda>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80026ec:	4603      	mov	r3, r0
 80026ee:	4602      	mov	r2, r0
 80026f0:	4401      	add	r1, r0
 80026f2:	4620      	mov	r0, r4
 80026f4:	f7ff fe02 	bl	80022fc <prvInsertTimerInActiveList>
					break;
 80026f8:	e798      	b.n	800262c <prvProcessReceivedCommands+0xc>
 80026fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026fe:	b672      	cpsid	i
 8002700:	f383 8811 	msr	BASEPRI, r3
 8002704:	f3bf 8f6f 	isb	sy
 8002708:	f3bf 8f4f 	dsb	sy
 800270c:	b662      	cpsie	i
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800270e:	e7fe      	b.n	800270e <prvProcessReceivedCommands+0xee>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002710:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8002714:	f013 0f02 	tst.w	r3, #2
 8002718:	d004      	beq.n	8002724 <prvProcessReceivedCommands+0x104>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800271a:	f023 0301 	bic.w	r3, r3, #1
 800271e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8002722:	e783      	b.n	800262c <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 8002724:	4620      	mov	r0, r4
 8002726:	f000 fa79 	bl	8002c1c <vPortFree>
 800272a:	e77f      	b.n	800262c <prvProcessReceivedCommands+0xc>
}
 800272c:	b008      	add	sp, #32
 800272e:	bd10      	pop	{r4, pc}
 8002730:	20000fec 	.word	0x20000fec

08002734 <prvTimerTask>:
{
 8002734:	b500      	push	{lr}
 8002736:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002738:	a801      	add	r0, sp, #4
 800273a:	f7ff fdcf 	bl	80022dc <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800273e:	9901      	ldr	r1, [sp, #4]
 8002740:	f7ff ff34 	bl	80025ac <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 8002744:	f7ff ff6c 	bl	8002620 <prvProcessReceivedCommands>
	for( ;; )
 8002748:	e7f6      	b.n	8002738 <prvTimerTask+0x4>
	...

0800274c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800274c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800274e:	2300      	movs	r3, #0
 8002750:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002752:	4b0f      	ldr	r3, [pc, #60]	; (8002790 <prvTaskExitError+0x44>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800275a:	d00a      	beq.n	8002772 <prvTaskExitError+0x26>
 800275c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002760:	b672      	cpsid	i
 8002762:	f383 8811 	msr	BASEPRI, r3
 8002766:	f3bf 8f6f 	isb	sy
 800276a:	f3bf 8f4f 	dsb	sy
 800276e:	b662      	cpsie	i
 8002770:	e7fe      	b.n	8002770 <prvTaskExitError+0x24>
 8002772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002776:	b672      	cpsid	i
 8002778:	f383 8811 	msr	BASEPRI, r3
 800277c:	f3bf 8f6f 	isb	sy
 8002780:	f3bf 8f4f 	dsb	sy
 8002784:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002786:	9b01      	ldr	r3, [sp, #4]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0fc      	beq.n	8002786 <prvTaskExitError+0x3a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800278c:	b002      	add	sp, #8
 800278e:	4770      	bx	lr
 8002790:	20000014 	.word	0x20000014

08002794 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002794:	4808      	ldr	r0, [pc, #32]	; (80027b8 <prvPortStartFirstTask+0x24>)
 8002796:	6800      	ldr	r0, [r0, #0]
 8002798:	6800      	ldr	r0, [r0, #0]
 800279a:	f380 8808 	msr	MSP, r0
 800279e:	f04f 0000 	mov.w	r0, #0
 80027a2:	f380 8814 	msr	CONTROL, r0
 80027a6:	b662      	cpsie	i
 80027a8:	b661      	cpsie	f
 80027aa:	f3bf 8f4f 	dsb	sy
 80027ae:	f3bf 8f6f 	isb	sy
 80027b2:	df00      	svc	0
 80027b4:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80027b6:	0000      	.short	0x0000
 80027b8:	e000ed08 	.word	0xe000ed08

080027bc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80027bc:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80027cc <vPortEnableVFP+0x10>
 80027c0:	6801      	ldr	r1, [r0, #0]
 80027c2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80027c6:	6001      	str	r1, [r0, #0]
 80027c8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80027ca:	0000      	.short	0x0000
 80027cc:	e000ed88 	.word	0xe000ed88

080027d0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80027d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027d4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80027d8:	f021 0101 	bic.w	r1, r1, #1
 80027dc:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80027e0:	4b05      	ldr	r3, [pc, #20]	; (80027f8 <pxPortInitialiseStack+0x28>)
 80027e2:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80027e6:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80027ea:	f06f 0302 	mvn.w	r3, #2
 80027ee:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80027f2:	3844      	subs	r0, #68	; 0x44
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	0800274d 	.word	0x0800274d
 80027fc:	00000000 	.word	0x00000000

08002800 <SVC_Handler>:
	__asm volatile (
 8002800:	4b07      	ldr	r3, [pc, #28]	; (8002820 <pxCurrentTCBConst2>)
 8002802:	6819      	ldr	r1, [r3, #0]
 8002804:	6808      	ldr	r0, [r1, #0]
 8002806:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800280a:	f380 8809 	msr	PSP, r0
 800280e:	f3bf 8f6f 	isb	sy
 8002812:	f04f 0000 	mov.w	r0, #0
 8002816:	f380 8811 	msr	BASEPRI, r0
 800281a:	4770      	bx	lr
 800281c:	f3af 8000 	nop.w

08002820 <pxCurrentTCBConst2>:
 8002820:	20000fc0 	.word	0x20000fc0

08002824 <vPortEnterCritical>:
 8002824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002828:	b672      	cpsid	i
 800282a:	f383 8811 	msr	BASEPRI, r3
 800282e:	f3bf 8f6f 	isb	sy
 8002832:	f3bf 8f4f 	dsb	sy
 8002836:	b662      	cpsie	i
	uxCriticalNesting++;
 8002838:	4a0c      	ldr	r2, [pc, #48]	; (800286c <vPortEnterCritical+0x48>)
 800283a:	6813      	ldr	r3, [r2, #0]
 800283c:	3301      	adds	r3, #1
 800283e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8002840:	2b01      	cmp	r3, #1
 8002842:	d000      	beq.n	8002846 <vPortEnterCritical+0x22>
}
 8002844:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002846:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800284a:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800284e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002852:	d0f7      	beq.n	8002844 <vPortEnterCritical+0x20>
 8002854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002858:	b672      	cpsid	i
 800285a:	f383 8811 	msr	BASEPRI, r3
 800285e:	f3bf 8f6f 	isb	sy
 8002862:	f3bf 8f4f 	dsb	sy
 8002866:	b662      	cpsie	i
 8002868:	e7fe      	b.n	8002868 <vPortEnterCritical+0x44>
 800286a:	bf00      	nop
 800286c:	20000014 	.word	0x20000014

08002870 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8002870:	4b0a      	ldr	r3, [pc, #40]	; (800289c <vPortExitCritical+0x2c>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	b953      	cbnz	r3, 800288c <vPortExitCritical+0x1c>
 8002876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800287a:	b672      	cpsid	i
 800287c:	f383 8811 	msr	BASEPRI, r3
 8002880:	f3bf 8f6f 	isb	sy
 8002884:	f3bf 8f4f 	dsb	sy
 8002888:	b662      	cpsie	i
 800288a:	e7fe      	b.n	800288a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 800288c:	3b01      	subs	r3, #1
 800288e:	4a03      	ldr	r2, [pc, #12]	; (800289c <vPortExitCritical+0x2c>)
 8002890:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002892:	b90b      	cbnz	r3, 8002898 <vPortExitCritical+0x28>
	__asm volatile
 8002894:	f383 8811 	msr	BASEPRI, r3
}
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	20000014 	.word	0x20000014

080028a0 <PendSV_Handler>:
	__asm volatile
 80028a0:	f3ef 8009 	mrs	r0, PSP
 80028a4:	f3bf 8f6f 	isb	sy
 80028a8:	4b15      	ldr	r3, [pc, #84]	; (8002900 <pxCurrentTCBConst>)
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	f01e 0f10 	tst.w	lr, #16
 80028b0:	bf08      	it	eq
 80028b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80028b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028ba:	6010      	str	r0, [r2, #0]
 80028bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80028c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80028c4:	b672      	cpsid	i
 80028c6:	f380 8811 	msr	BASEPRI, r0
 80028ca:	f3bf 8f4f 	dsb	sy
 80028ce:	f3bf 8f6f 	isb	sy
 80028d2:	b662      	cpsie	i
 80028d4:	f7ff fb82 	bl	8001fdc <vTaskSwitchContext>
 80028d8:	f04f 0000 	mov.w	r0, #0
 80028dc:	f380 8811 	msr	BASEPRI, r0
 80028e0:	bc09      	pop	{r0, r3}
 80028e2:	6819      	ldr	r1, [r3, #0]
 80028e4:	6808      	ldr	r0, [r1, #0]
 80028e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028ea:	f01e 0f10 	tst.w	lr, #16
 80028ee:	bf08      	it	eq
 80028f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80028f4:	f380 8809 	msr	PSP, r0
 80028f8:	f3bf 8f6f 	isb	sy
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop

08002900 <pxCurrentTCBConst>:
 8002900:	20000fc0 	.word	0x20000fc0

08002904 <SysTick_Handler>:
{
 8002904:	b508      	push	{r3, lr}
	__asm volatile
 8002906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800290a:	b672      	cpsid	i
 800290c:	f383 8811 	msr	BASEPRI, r3
 8002910:	f3bf 8f6f 	isb	sy
 8002914:	f3bf 8f4f 	dsb	sy
 8002918:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 800291a:	f7ff fa2f 	bl	8001d7c <xTaskIncrementTick>
 800291e:	b128      	cbz	r0, 800292c <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002920:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002924:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002928:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 800292c:	2300      	movs	r3, #0
 800292e:	f383 8811 	msr	BASEPRI, r3
}
 8002932:	bd08      	pop	{r3, pc}

08002934 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002934:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8002938:	2300      	movs	r3, #0
 800293a:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800293c:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800293e:	4b05      	ldr	r3, [pc, #20]	; (8002954 <vPortSetupTimerInterrupt+0x20>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4905      	ldr	r1, [pc, #20]	; (8002958 <vPortSetupTimerInterrupt+0x24>)
 8002944:	fba1 1303 	umull	r1, r3, r1, r3
 8002948:	099b      	lsrs	r3, r3, #6
 800294a:	3b01      	subs	r3, #1
 800294c:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800294e:	2307      	movs	r3, #7
 8002950:	6113      	str	r3, [r2, #16]
}
 8002952:	4770      	bx	lr
 8002954:	20000018 	.word	0x20000018
 8002958:	10624dd3 	.word	0x10624dd3

0800295c <xPortStartScheduler>:
{
 800295c:	b530      	push	{r4, r5, lr}
 800295e:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002960:	4b2f      	ldr	r3, [pc, #188]	; (8002a20 <xPortStartScheduler+0xc4>)
 8002962:	781a      	ldrb	r2, [r3, #0]
 8002964:	b2d2      	uxtb	r2, r2
 8002966:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002968:	22ff      	movs	r2, #255	; 0xff
 800296a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	b2db      	uxtb	r3, r3
 8002970:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002974:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002978:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800297c:	4a29      	ldr	r2, [pc, #164]	; (8002a24 <xPortStartScheduler+0xc8>)
 800297e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002980:	2307      	movs	r3, #7
 8002982:	6053      	str	r3, [r2, #4]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002984:	e009      	b.n	800299a <xPortStartScheduler+0x3e>
			ulMaxPRIGROUPValue--;
 8002986:	4a27      	ldr	r2, [pc, #156]	; (8002a24 <xPortStartScheduler+0xc8>)
 8002988:	6853      	ldr	r3, [r2, #4]
 800298a:	3b01      	subs	r3, #1
 800298c:	6053      	str	r3, [r2, #4]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800298e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	b2db      	uxtb	r3, r3
 8002996:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800299a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800299e:	f013 0f80 	tst.w	r3, #128	; 0x80
 80029a2:	d1f0      	bne.n	8002986 <xPortStartScheduler+0x2a>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80029a4:	4b1f      	ldr	r3, [pc, #124]	; (8002a24 <xPortStartScheduler+0xc8>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	2b03      	cmp	r3, #3
 80029aa:	d00a      	beq.n	80029c2 <xPortStartScheduler+0x66>
	__asm volatile
 80029ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b0:	b672      	cpsid	i
 80029b2:	f383 8811 	msr	BASEPRI, r3
 80029b6:	f3bf 8f6f 	isb	sy
 80029ba:	f3bf 8f4f 	dsb	sy
 80029be:	b662      	cpsie	i
 80029c0:	e7fe      	b.n	80029c0 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80029c2:	021b      	lsls	r3, r3, #8
 80029c4:	4a17      	ldr	r2, [pc, #92]	; (8002a24 <xPortStartScheduler+0xc8>)
 80029c6:	6053      	str	r3, [r2, #4]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80029c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80029cc:	6053      	str	r3, [r2, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80029ce:	9b01      	ldr	r3, [sp, #4]
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	4a13      	ldr	r2, [pc, #76]	; (8002a20 <xPortStartScheduler+0xc4>)
 80029d4:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80029d6:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 80029da:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 80029de:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029e2:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80029e6:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 80029ea:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80029ee:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 80029f2:	f7ff ff9f 	bl	8002934 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80029f6:	2500      	movs	r5, #0
 80029f8:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <xPortStartScheduler+0xcc>)
 80029fa:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 80029fc:	f7ff fede 	bl	80027bc <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002a00:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8002a04:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002a08:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8002a0c:	f7ff fec2 	bl	8002794 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8002a10:	f7ff fae4 	bl	8001fdc <vTaskSwitchContext>
	prvTaskExitError();
 8002a14:	f7ff fe9a 	bl	800274c <prvTaskExitError>
}
 8002a18:	4628      	mov	r0, r5
 8002a1a:	b003      	add	sp, #12
 8002a1c:	bd30      	pop	{r4, r5, pc}
 8002a1e:	bf00      	nop
 8002a20:	e000e400 	.word	0xe000e400
 8002a24:	20001118 	.word	0x20001118
 8002a28:	20000014 	.word	0x20000014

08002a2c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8002a2c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002a30:	2b0f      	cmp	r3, #15
 8002a32:	d911      	bls.n	8002a58 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002a34:	4a13      	ldr	r2, [pc, #76]	; (8002a84 <vPortValidateInterruptPriority+0x58>)
 8002a36:	5c9b      	ldrb	r3, [r3, r2]
 8002a38:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002a3a:	4a13      	ldr	r2, [pc, #76]	; (8002a88 <vPortValidateInterruptPriority+0x5c>)
 8002a3c:	7812      	ldrb	r2, [r2, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d90a      	bls.n	8002a58 <vPortValidateInterruptPriority+0x2c>
 8002a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a46:	b672      	cpsid	i
 8002a48:	f383 8811 	msr	BASEPRI, r3
 8002a4c:	f3bf 8f6f 	isb	sy
 8002a50:	f3bf 8f4f 	dsb	sy
 8002a54:	b662      	cpsie	i
 8002a56:	e7fe      	b.n	8002a56 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002a58:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002a5c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8002a60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a64:	4a08      	ldr	r2, [pc, #32]	; (8002a88 <vPortValidateInterruptPriority+0x5c>)
 8002a66:	6852      	ldr	r2, [r2, #4]
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d90a      	bls.n	8002a82 <vPortValidateInterruptPriority+0x56>
 8002a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a70:	b672      	cpsid	i
 8002a72:	f383 8811 	msr	BASEPRI, r3
 8002a76:	f3bf 8f6f 	isb	sy
 8002a7a:	f3bf 8f4f 	dsb	sy
 8002a7e:	b662      	cpsie	i
 8002a80:	e7fe      	b.n	8002a80 <vPortValidateInterruptPriority+0x54>
	}
 8002a82:	4770      	bx	lr
 8002a84:	e000e3f0 	.word	0xe000e3f0
 8002a88:	20001118 	.word	0x20001118

08002a8c <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002a8c:	4a10      	ldr	r2, [pc, #64]	; (8002ad0 <prvHeapInit+0x44>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002a8e:	f012 0f07 	tst.w	r2, #7
 8002a92:	d01a      	beq.n	8002aca <prvHeapInit+0x3e>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002a94:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002a96:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002a9a:	f5c1 5370 	rsb	r3, r1, #15360	; 0x3c00
 8002a9e:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002aa0:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002aa2:	490c      	ldr	r1, [pc, #48]	; (8002ad4 <prvHeapInit+0x48>)
 8002aa4:	600a      	str	r2, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	6048      	str	r0, [r1, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002aaa:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8002aac:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002aae:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8002ab2:	608b      	str	r3, [r1, #8]
	pxEnd->xBlockSize = 0;
 8002ab4:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002ab6:	6018      	str	r0, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002ab8:	1a98      	subs	r0, r3, r2
 8002aba:	6050      	str	r0, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002abc:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002abe:	60c8      	str	r0, [r1, #12]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002ac0:	6108      	str	r0, [r1, #16]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002ac2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002ac6:	614b      	str	r3, [r1, #20]
}
 8002ac8:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002aca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002ace:	e7e8      	b.n	8002aa2 <prvHeapInit+0x16>
 8002ad0:	20001138 	.word	0x20001138
 8002ad4:	20001120 	.word	0x20001120

08002ad8 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002ad8:	4b16      	ldr	r3, [pc, #88]	; (8002b34 <prvInsertBlockIntoFreeList+0x5c>)
 8002ada:	461a      	mov	r2, r3
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4283      	cmp	r3, r0
 8002ae0:	d3fb      	bcc.n	8002ada <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002ae2:	6851      	ldr	r1, [r2, #4]
 8002ae4:	eb02 0c01 	add.w	ip, r2, r1
 8002ae8:	4584      	cmp	ip, r0
 8002aea:	d009      	beq.n	8002b00 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002aec:	6841      	ldr	r1, [r0, #4]
 8002aee:	eb00 0c01 	add.w	ip, r0, r1
 8002af2:	4563      	cmp	r3, ip
 8002af4:	d009      	beq.n	8002b0a <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002af6:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002af8:	4290      	cmp	r0, r2
 8002afa:	d019      	beq.n	8002b30 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002afc:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 8002afe:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002b00:	6840      	ldr	r0, [r0, #4]
 8002b02:	4401      	add	r1, r0
 8002b04:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8002b06:	4610      	mov	r0, r2
 8002b08:	e7f0      	b.n	8002aec <prvInsertBlockIntoFreeList+0x14>
{
 8002b0a:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002b0c:	4c09      	ldr	r4, [pc, #36]	; (8002b34 <prvInsertBlockIntoFreeList+0x5c>)
 8002b0e:	68a4      	ldr	r4, [r4, #8]
 8002b10:	42a3      	cmp	r3, r4
 8002b12:	d00b      	beq.n	8002b2c <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	4419      	add	r1, r3
 8002b18:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002b1a:	6813      	ldr	r3, [r2, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8002b20:	4290      	cmp	r0, r2
 8002b22:	d000      	beq.n	8002b26 <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002b24:	6010      	str	r0, [r2, #0]
	}
}
 8002b26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002b2a:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002b2c:	6004      	str	r4, [r0, #0]
 8002b2e:	e7f7      	b.n	8002b20 <prvInsertBlockIntoFreeList+0x48>
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	20001120 	.word	0x20001120

08002b38 <pvPortMalloc>:
{
 8002b38:	b570      	push	{r4, r5, r6, lr}
 8002b3a:	4605      	mov	r5, r0
	vTaskSuspendAll();
 8002b3c:	f7ff f90e 	bl	8001d5c <vTaskSuspendAll>
		if( pxEnd == NULL )
 8002b40:	4b35      	ldr	r3, [pc, #212]	; (8002c18 <pvPortMalloc+0xe0>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	b1a3      	cbz	r3, 8002b70 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002b46:	4b34      	ldr	r3, [pc, #208]	; (8002c18 <pvPortMalloc+0xe0>)
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	421d      	tst	r5, r3
 8002b4c:	d14b      	bne.n	8002be6 <pvPortMalloc+0xae>
			if( xWantedSize > 0 )
 8002b4e:	b135      	cbz	r5, 8002b5e <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 8002b50:	3508      	adds	r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002b52:	f015 0f07 	tst.w	r5, #7
 8002b56:	d002      	beq.n	8002b5e <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002b58:	f025 0507 	bic.w	r5, r5, #7
 8002b5c:	3508      	adds	r5, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002b5e:	2d00      	cmp	r5, #0
 8002b60:	d043      	beq.n	8002bea <pvPortMalloc+0xb2>
 8002b62:	4b2d      	ldr	r3, [pc, #180]	; (8002c18 <pvPortMalloc+0xe0>)
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	42ab      	cmp	r3, r5
 8002b68:	d350      	bcc.n	8002c0c <pvPortMalloc+0xd4>
				pxBlock = xStart.pxNextFreeBlock;
 8002b6a:	4a2b      	ldr	r2, [pc, #172]	; (8002c18 <pvPortMalloc+0xe0>)
 8002b6c:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002b6e:	e004      	b.n	8002b7a <pvPortMalloc+0x42>
			prvHeapInit();
 8002b70:	f7ff ff8c 	bl	8002a8c <prvHeapInit>
 8002b74:	e7e7      	b.n	8002b46 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 8002b76:	4622      	mov	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8002b78:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002b7a:	6863      	ldr	r3, [r4, #4]
 8002b7c:	42ab      	cmp	r3, r5
 8002b7e:	d202      	bcs.n	8002b86 <pvPortMalloc+0x4e>
 8002b80:	6823      	ldr	r3, [r4, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1f7      	bne.n	8002b76 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 8002b86:	4b24      	ldr	r3, [pc, #144]	; (8002c18 <pvPortMalloc+0xe0>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	42a3      	cmp	r3, r4
 8002b8c:	d040      	beq.n	8002c10 <pvPortMalloc+0xd8>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002b8e:	6816      	ldr	r6, [r2, #0]
 8002b90:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002b92:	6823      	ldr	r3, [r4, #0]
 8002b94:	6013      	str	r3, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002b96:	6863      	ldr	r3, [r4, #4]
 8002b98:	1b5b      	subs	r3, r3, r5
 8002b9a:	2b10      	cmp	r3, #16
 8002b9c:	d912      	bls.n	8002bc4 <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002b9e:	1960      	adds	r0, r4, r5
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002ba0:	f010 0f07 	tst.w	r0, #7
 8002ba4:	d00a      	beq.n	8002bbc <pvPortMalloc+0x84>
 8002ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002baa:	b672      	cpsid	i
 8002bac:	f383 8811 	msr	BASEPRI, r3
 8002bb0:	f3bf 8f6f 	isb	sy
 8002bb4:	f3bf 8f4f 	dsb	sy
 8002bb8:	b662      	cpsie	i
 8002bba:	e7fe      	b.n	8002bba <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002bbc:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002bbe:	6065      	str	r5, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002bc0:	f7ff ff8a 	bl	8002ad8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002bc4:	6861      	ldr	r1, [r4, #4]
 8002bc6:	4a14      	ldr	r2, [pc, #80]	; (8002c18 <pvPortMalloc+0xe0>)
 8002bc8:	6913      	ldr	r3, [r2, #16]
 8002bca:	1a5b      	subs	r3, r3, r1
 8002bcc:	6113      	str	r3, [r2, #16]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002bce:	68d2      	ldr	r2, [r2, #12]
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d201      	bcs.n	8002bd8 <pvPortMalloc+0xa0>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002bd4:	4a10      	ldr	r2, [pc, #64]	; (8002c18 <pvPortMalloc+0xe0>)
 8002bd6:	60d3      	str	r3, [r2, #12]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002bd8:	4b0f      	ldr	r3, [pc, #60]	; (8002c18 <pvPortMalloc+0xe0>)
 8002bda:	695b      	ldr	r3, [r3, #20]
 8002bdc:	430b      	orrs	r3, r1
 8002bde:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002be0:	2300      	movs	r3, #0
 8002be2:	6023      	str	r3, [r4, #0]
 8002be4:	e002      	b.n	8002bec <pvPortMalloc+0xb4>
void *pvReturn = NULL;
 8002be6:	2600      	movs	r6, #0
 8002be8:	e000      	b.n	8002bec <pvPortMalloc+0xb4>
 8002bea:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 8002bec:	f7ff f954 	bl	8001e98 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002bf0:	f016 0f07 	tst.w	r6, #7
 8002bf4:	d00e      	beq.n	8002c14 <pvPortMalloc+0xdc>
 8002bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bfa:	b672      	cpsid	i
 8002bfc:	f383 8811 	msr	BASEPRI, r3
 8002c00:	f3bf 8f6f 	isb	sy
 8002c04:	f3bf 8f4f 	dsb	sy
 8002c08:	b662      	cpsie	i
 8002c0a:	e7fe      	b.n	8002c0a <pvPortMalloc+0xd2>
void *pvReturn = NULL;
 8002c0c:	2600      	movs	r6, #0
 8002c0e:	e7ed      	b.n	8002bec <pvPortMalloc+0xb4>
 8002c10:	2600      	movs	r6, #0
 8002c12:	e7eb      	b.n	8002bec <pvPortMalloc+0xb4>
}
 8002c14:	4630      	mov	r0, r6
 8002c16:	bd70      	pop	{r4, r5, r6, pc}
 8002c18:	20001120 	.word	0x20001120

08002c1c <vPortFree>:
	if( pv != NULL )
 8002c1c:	2800      	cmp	r0, #0
 8002c1e:	d034      	beq.n	8002c8a <vPortFree+0x6e>
{
 8002c20:	b538      	push	{r3, r4, r5, lr}
 8002c22:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8002c24:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002c28:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8002c2c:	4a17      	ldr	r2, [pc, #92]	; (8002c8c <vPortFree+0x70>)
 8002c2e:	6952      	ldr	r2, [r2, #20]
 8002c30:	4213      	tst	r3, r2
 8002c32:	d10a      	bne.n	8002c4a <vPortFree+0x2e>
 8002c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c38:	b672      	cpsid	i
 8002c3a:	f383 8811 	msr	BASEPRI, r3
 8002c3e:	f3bf 8f6f 	isb	sy
 8002c42:	f3bf 8f4f 	dsb	sy
 8002c46:	b662      	cpsie	i
 8002c48:	e7fe      	b.n	8002c48 <vPortFree+0x2c>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002c4a:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8002c4e:	b151      	cbz	r1, 8002c66 <vPortFree+0x4a>
 8002c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c54:	b672      	cpsid	i
 8002c56:	f383 8811 	msr	BASEPRI, r3
 8002c5a:	f3bf 8f6f 	isb	sy
 8002c5e:	f3bf 8f4f 	dsb	sy
 8002c62:	b662      	cpsie	i
 8002c64:	e7fe      	b.n	8002c64 <vPortFree+0x48>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002c66:	ea23 0302 	bic.w	r3, r3, r2
 8002c6a:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8002c6e:	f7ff f875 	bl	8001d5c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002c72:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8002c76:	4a05      	ldr	r2, [pc, #20]	; (8002c8c <vPortFree+0x70>)
 8002c78:	6913      	ldr	r3, [r2, #16]
 8002c7a:	440b      	add	r3, r1
 8002c7c:	6113      	str	r3, [r2, #16]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002c7e:	4628      	mov	r0, r5
 8002c80:	f7ff ff2a 	bl	8002ad8 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8002c84:	f7ff f908 	bl	8001e98 <xTaskResumeAll>
}
 8002c88:	bd38      	pop	{r3, r4, r5, pc}
 8002c8a:	4770      	bx	lr
 8002c8c:	20001120 	.word	0x20001120

08002c90 <LCD_Thread>:
void UART_Thread(void *argument) {
	UART_init();
	while (1) {
	}
}
void LCD_Thread(void *argument){
 8002c90:	b500      	push	{lr}
 8002c92:	b083      	sub	sp, #12
	volatile uint8_t status = BSP_LCD_Init();
 8002c94:	f7fe f822 	bl	8000cdc <BSP_LCD_Init>
 8002c98:	f88d 0007 	strb.w	r0, [sp, #7]
	BSP_LCD_SelectLayer(0);
 8002c9c:	2000      	movs	r0, #0
 8002c9e:	f7fd fe85 	bl	80009ac <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(LCD_COLOR_GRAY);
 8002ca2:	4804      	ldr	r0, [pc, #16]	; (8002cb4 <LCD_Thread+0x24>)
 8002ca4:	f7fd fe94 	bl	80009d0 <BSP_LCD_Clear>
	BSP_LCD_DisplayOn();
 8002ca8:	f7fd feae 	bl	8000a08 <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_RED);
 8002cac:	4802      	ldr	r0, [pc, #8]	; (8002cb8 <LCD_Thread+0x28>)
 8002cae:	f7fd fe8f 	bl	80009d0 <BSP_LCD_Clear>

	while(1){}
 8002cb2:	e7fe      	b.n	8002cb2 <LCD_Thread+0x22>
 8002cb4:	ff808080 	.word	0xff808080
 8002cb8:	ffff0000 	.word	0xffff0000

08002cbc <USART1_IRQHandler>:
void USART1_IRQHandler(void) {
 8002cbc:	b508      	push	{r3, lr}
	HAL_UART_IRQHandler(&USB_UART);
 8002cbe:	4802      	ldr	r0, [pc, #8]	; (8002cc8 <USART1_IRQHandler+0xc>)
 8002cc0:	f003 fab2 	bl	8006228 <HAL_UART_IRQHandler>
}
 8002cc4:	bd08      	pop	{r3, pc}
 8002cc6:	bf00      	nop
 8002cc8:	20004e40 	.word	0x20004e40

08002ccc <I2C_init>:
void I2C_init() {
 8002ccc:	b500      	push	{lr}
 8002cce:	b087      	sub	sp, #28
	hi2c1.Instance = I2C1;
 8002cd0:	481c      	ldr	r0, [pc, #112]	; (8002d44 <I2C_init+0x78>)
 8002cd2:	4b1d      	ldr	r3, [pc, #116]	; (8002d48 <I2C_init+0x7c>)
 8002cd4:	6003      	str	r3, [r0, #0]
	hi2c1.Init.Timing = 0x00506682;
 8002cd6:	4b1d      	ldr	r3, [pc, #116]	; (8002d4c <I2C_init+0x80>)
 8002cd8:	6043      	str	r3, [r0, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	6083      	str	r3, [r0, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002cde:	2201      	movs	r2, #1
 8002ce0:	60c2      	str	r2, [r0, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ce2:	6103      	str	r3, [r0, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8002ce4:	6143      	str	r3, [r0, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002ce6:	6183      	str	r3, [r0, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ce8:	61c3      	str	r3, [r0, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002cea:	6203      	str	r3, [r0, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002cec:	f001 fddc 	bl	80048a8 <HAL_I2C_Init>
 8002cf0:	b9e0      	cbnz	r0, 8002d2c <I2C_init+0x60>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	4813      	ldr	r0, [pc, #76]	; (8002d44 <I2C_init+0x78>)
 8002cf6:	f001 ffe3 	bl	8004cc0 <HAL_I2CEx_ConfigAnalogFilter>
 8002cfa:	b9d8      	cbnz	r0, 8002d34 <I2C_init+0x68>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	4811      	ldr	r0, [pc, #68]	; (8002d44 <I2C_init+0x78>)
 8002d00:	f002 f80c 	bl	8004d1c <HAL_I2CEx_ConfigDigitalFilter>
 8002d04:	b9d0      	cbnz	r0, 8002d3c <I2C_init+0x70>
	gpio_init.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8002d06:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d0a:	9301      	str	r3, [sp, #4]
	gpio_init.Mode = GPIO_MODE_AF_OD;
 8002d0c:	2312      	movs	r3, #18
 8002d0e:	9302      	str	r3, [sp, #8]
	gpio_init.Pull = GPIO_PULLUP;
 8002d10:	2301      	movs	r3, #1
 8002d12:	9303      	str	r3, [sp, #12]
	gpio_init.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d14:	2303      	movs	r3, #3
 8002d16:	9304      	str	r3, [sp, #16]
	gpio_init.Alternate = GPIO_AF4_I2C1;
 8002d18:	2304      	movs	r3, #4
 8002d1a:	9305      	str	r3, [sp, #20]
	HAL_GPIO_Init(GPIOB, &gpio_init);
 8002d1c:	eb0d 0103 	add.w	r1, sp, r3
 8002d20:	480b      	ldr	r0, [pc, #44]	; (8002d50 <I2C_init+0x84>)
 8002d22:	f001 fb03 	bl	800432c <HAL_GPIO_Init>
}
 8002d26:	b007      	add	sp, #28
 8002d28:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("I2C init failed\n\r");
 8002d2c:	4809      	ldr	r0, [pc, #36]	; (8002d54 <I2C_init+0x88>)
 8002d2e:	f004 f8bd 	bl	8006eac <iprintf>
 8002d32:	e7de      	b.n	8002cf2 <I2C_init+0x26>
		printf("I2C analog filter init failed\n\r");
 8002d34:	4808      	ldr	r0, [pc, #32]	; (8002d58 <I2C_init+0x8c>)
 8002d36:	f004 f8b9 	bl	8006eac <iprintf>
 8002d3a:	e7df      	b.n	8002cfc <I2C_init+0x30>
		printf("I2C digital filter init failed\n\r");
 8002d3c:	4807      	ldr	r0, [pc, #28]	; (8002d5c <I2C_init+0x90>)
 8002d3e:	f004 f8b5 	bl	8006eac <iprintf>
 8002d42:	e7e0      	b.n	8002d06 <I2C_init+0x3a>
 8002d44:	20004d38 	.word	0x20004d38
 8002d48:	40005400 	.word	0x40005400
 8002d4c:	00506682 	.word	0x00506682
 8002d50:	40020400 	.word	0x40020400
 8002d54:	08009908 	.word	0x08009908
 8002d58:	0800991c 	.word	0x0800991c
 8002d5c:	0800993c 	.word	0x0800993c

08002d60 <Gyro_Thread>:
void Gyro_Thread(void *argument) {
 8002d60:	b538      	push	{r3, r4, r5, lr}
	I2C_init();
 8002d62:	f7ff ffb3 	bl	8002ccc <I2C_init>
	uint8_t init_status = MPU6050_Init(&hi2c1);
 8002d66:	4809      	ldr	r0, [pc, #36]	; (8002d8c <Gyro_Thread+0x2c>)
 8002d68:	f000 fa4c 	bl	8003204 <MPU6050_Init>
		osDelay(100);
 8002d6c:	2064      	movs	r0, #100	; 0x64
 8002d6e:	f7fe f9bd 	bl	80010ec <osDelay>
		MPU6050_Read_Accel(&hi2c1, &mpu6050);
 8002d72:	4c06      	ldr	r4, [pc, #24]	; (8002d8c <Gyro_Thread+0x2c>)
 8002d74:	f104 0558 	add.w	r5, r4, #88	; 0x58
 8002d78:	4629      	mov	r1, r5
 8002d7a:	4620      	mov	r0, r4
 8002d7c:	f000 fa94 	bl	80032a8 <MPU6050_Read_Accel>
		MPU6050_Read_Gyro(&hi2c1, &mpu6050);
 8002d80:	4629      	mov	r1, r5
 8002d82:	4620      	mov	r0, r4
 8002d84:	f000 fadc 	bl	8003340 <MPU6050_Read_Gyro>
	while(1) {
 8002d88:	e7f0      	b.n	8002d6c <Gyro_Thread+0xc>
 8002d8a:	bf00      	nop
 8002d8c:	20004d38 	.word	0x20004d38

08002d90 <UART_init>:
void UART_init() {
 8002d90:	b508      	push	{r3, lr}
	USB_UART_ptr->Instance = USART1;
 8002d92:	4808      	ldr	r0, [pc, #32]	; (8002db4 <UART_init+0x24>)
 8002d94:	4b08      	ldr	r3, [pc, #32]	; (8002db8 <UART_init+0x28>)
 8002d96:	6003      	str	r3, [r0, #0]
	USB_UART_ptr->Init.BaudRate = 115200;
 8002d98:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002d9c:	6043      	str	r3, [r0, #4]
	USB_UART_ptr->Init.WordLength = UART_WORDLENGTH_8B;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	6083      	str	r3, [r0, #8]
	USB_UART_ptr->Init.StopBits = UART_STOPBITS_1;
 8002da2:	60c3      	str	r3, [r0, #12]
	USB_UART_ptr->Init.Parity = UART_PARITY_NONE;
 8002da4:	6103      	str	r3, [r0, #16]
	USB_UART_ptr->Init.Mode = UART_MODE_TX_RX;
 8002da6:	220c      	movs	r2, #12
 8002da8:	6142      	str	r2, [r0, #20]
	USB_UART_ptr->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002daa:	6183      	str	r3, [r0, #24]
	HAL_UART_Init(&USB_UART);
 8002dac:	f003 feda 	bl	8006b64 <HAL_UART_Init>
}
 8002db0:	bd08      	pop	{r3, pc}
 8002db2:	bf00      	nop
 8002db4:	20004e40 	.word	0x20004e40
 8002db8:	40011000 	.word	0x40011000

08002dbc <UART_Thread>:
void UART_Thread(void *argument) {
 8002dbc:	b508      	push	{r3, lr}
	UART_init();
 8002dbe:	f7ff ffe7 	bl	8002d90 <UART_init>
	while (1) {
 8002dc2:	e7fe      	b.n	8002dc2 <UART_Thread+0x6>

08002dc4 <HAL_Delay>:
}
void HAL_Delay( uint32_t ulDelayMs )
{
 8002dc4:	b538      	push	{r3, r4, r5, lr}
 8002dc6:	4604      	mov	r4, r0
    if( xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED )
 8002dc8:	f7ff fa2a 	bl	8002220 <xTaskGetSchedulerState>
 8002dcc:	2801      	cmp	r0, #1
 8002dce:	d00a      	beq.n	8002de6 <HAL_Delay+0x22>
    {
        vTaskDelay( pdMS_TO_TICKS( ulDelayMs ) );
 8002dd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dd4:	fb03 f004 	mul.w	r0, r3, r4
 8002dd8:	4b0b      	ldr	r3, [pc, #44]	; (8002e08 <HAL_Delay+0x44>)
 8002dda:	fba3 3000 	umull	r3, r0, r3, r0
 8002dde:	0980      	lsrs	r0, r0, #6
 8002de0:	f7ff f8d4 	bl	8001f8c <vTaskDelay>
        while( ( HAL_GetTick() - ulStartTick ) < ulTicksWaited )
        {
            __NOP();
        }
    }
}
 8002de4:	bd38      	pop	{r3, r4, r5, pc}
        uint32_t ulStartTick = HAL_GetTick();
 8002de6:	f000 fc21 	bl	800362c <HAL_GetTick>
 8002dea:	4605      	mov	r5, r0
        if( ulTicksWaited < HAL_MAX_DELAY )
 8002dec:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002df0:	d004      	beq.n	8002dfc <HAL_Delay+0x38>
            ulTicksWaited += ( uint32_t ) ( HAL_GetTickFreq() );
 8002df2:	f000 fc21 	bl	8003638 <HAL_GetTickFreq>
 8002df6:	4404      	add	r4, r0
 8002df8:	e000      	b.n	8002dfc <HAL_Delay+0x38>
            __NOP();
 8002dfa:	bf00      	nop
        while( ( HAL_GetTick() - ulStartTick ) < ulTicksWaited )
 8002dfc:	f000 fc16 	bl	800362c <HAL_GetTick>
 8002e00:	1b43      	subs	r3, r0, r5
 8002e02:	42a3      	cmp	r3, r4
 8002e04:	d3f9      	bcc.n	8002dfa <HAL_Delay+0x36>
 8002e06:	e7ed      	b.n	8002de4 <HAL_Delay+0x20>
 8002e08:	10624dd3 	.word	0x10624dd3

08002e0c <main>:
int main(void) {
 8002e0c:	b508      	push	{r3, lr}
	Sys_Init();
 8002e0e:	f000 f9dd 	bl	80031cc <Sys_Init>
	HAL_NVIC_SetPriority(SysTick_IRQn, 0,1);
 8002e12:	2201      	movs	r2, #1
 8002e14:	2100      	movs	r1, #0
 8002e16:	f04f 30ff 	mov.w	r0, #4294967295
 8002e1a:	f000 fc25 	bl	8003668 <HAL_NVIC_SetPriority>
	HAL_Delay(10);
 8002e1e:	200a      	movs	r0, #10
 8002e20:	f7ff ffd0 	bl	8002dc4 <HAL_Delay>
	osKernelInitialize();
 8002e24:	f7fe f8b4 	bl	8000f90 <osKernelInitialize>
	GyroThreadHandle = osThreadNew(Gyro_Thread, NULL, &Gyro_Thread_attributes);
 8002e28:	4d0d      	ldr	r5, [pc, #52]	; (8002e60 <main+0x54>)
 8002e2a:	462a      	mov	r2, r5
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	480d      	ldr	r0, [pc, #52]	; (8002e64 <main+0x58>)
 8002e30:	f7fe f8f0 	bl	8001014 <osThreadNew>
 8002e34:	4c0c      	ldr	r4, [pc, #48]	; (8002e68 <main+0x5c>)
 8002e36:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
	UART_ThreadHandle = osThreadNew(UART_Thread, NULL, &UART_Thread_attributes);
 8002e3a:	f105 0224 	add.w	r2, r5, #36	; 0x24
 8002e3e:	2100      	movs	r1, #0
 8002e40:	480a      	ldr	r0, [pc, #40]	; (8002e6c <main+0x60>)
 8002e42:	f7fe f8e7 	bl	8001014 <osThreadNew>
 8002e46:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	LCD_ThreadHandle = osThreadNew(LCD_Thread, NULL, &LCD_Thread_attributes );
 8002e4a:	f105 0248 	add.w	r2, r5, #72	; 0x48
 8002e4e:	2100      	movs	r1, #0
 8002e50:	4807      	ldr	r0, [pc, #28]	; (8002e70 <main+0x64>)
 8002e52:	f7fe f8df 	bl	8001014 <osThreadNew>
 8002e56:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	osKernelStart();
 8002e5a:	f7fe f8b7 	bl	8000fcc <osKernelStart>
	while (1) {
 8002e5e:	e7fe      	b.n	8002e5e <main+0x52>
 8002e60:	08009854 	.word	0x08009854
 8002e64:	08002d61 	.word	0x08002d61
 8002e68:	20004d38 	.word	0x20004d38
 8002e6c:	08002dbd 	.word	0x08002dbd
 8002e70:	08002c91 	.word	0x08002c91

08002e74 <SystemClock_Config>:
  *            Main regulator output voltage  = Scale1 mode
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
void SystemClock_Config(void) {
 8002e74:	b500      	push	{lr}
 8002e76:	b093      	sub	sp, #76	; 0x4c
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e80:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e82:	2302      	movs	r3, #2
 8002e84:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e86:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002e8a:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002e8c:	2219      	movs	r2, #25
 8002e8e:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 432;
 8002e90:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8002e94:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002e96:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002e98:	2309      	movs	r3, #9
 8002e9a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = 7;
 8002e9c:	2307      	movs	r3, #7
 8002e9e:	930c      	str	r3, [sp, #48]	; 0x30

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8002ea0:	4668      	mov	r0, sp
 8002ea2:	f002 f84f 	bl	8004f44 <HAL_RCC_OscConfig>
  if(ret != HAL_OK) {
 8002ea6:	b100      	cbz	r0, 8002eaa <SystemClock_Config+0x36>
    while(1) { ; }
 8002ea8:	e7fe      	b.n	8002ea8 <SystemClock_Config+0x34>
  }

  /* Activate the OverDrive to reach the 216 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
 8002eaa:	f002 f80d 	bl	8004ec8 <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK) {
 8002eae:	b100      	cbz	r0, 8002eb2 <SystemClock_Config+0x3e>
    while(1) { ; }
 8002eb0:	e7fe      	b.n	8002eb0 <SystemClock_Config+0x3c>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8002eb2:	230f      	movs	r3, #15
 8002eb4:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002ebe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002ec2:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002ec4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ec8:	9311      	str	r3, [sp, #68]	; 0x44

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 8002eca:	2107      	movs	r1, #7
 8002ecc:	a80d      	add	r0, sp, #52	; 0x34
 8002ece:	f002 faaf 	bl	8005430 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK) {
 8002ed2:	b100      	cbz	r0, 8002ed6 <SystemClock_Config+0x62>
    while(1) { ; }
 8002ed4:	e7fe      	b.n	8002ed4 <SystemClock_Config+0x60>
  }
}
 8002ed6:	b013      	add	sp, #76	; 0x4c
 8002ed8:	f85d fb04 	ldr.w	pc, [sp], #4

08002edc <CPU_CACHE_Enable>:

// Enables CPU Instruction and Data Caches
void CPU_CACHE_Enable(void) {
 8002edc:	b410      	push	{r4}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002ede:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002ee2:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8002ee6:	4b1c      	ldr	r3, [pc, #112]	; (8002f58 <CPU_CACHE_Enable+0x7c>)
 8002ee8:	2100      	movs	r1, #0
 8002eea:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002eee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002ef2:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002ef6:	695a      	ldr	r2, [r3, #20]
 8002ef8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002efc:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002efe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002f02:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8002f06:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002f0a:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8002f0e:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002f12:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8002f16:	e000      	b.n	8002f1a <CPU_CACHE_Enable+0x3e>
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
    } while(sets-- != 0U);
 8002f18:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002f1a:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002f1e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8002f22:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8002f26:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8002f2a:	490b      	ldr	r1, [pc, #44]	; (8002f58 <CPU_CACHE_Enable+0x7c>)
 8002f2c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8002f30:	4613      	mov	r3, r2
 8002f32:	3a01      	subs	r2, #1
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1f2      	bne.n	8002f1e <CPU_CACHE_Enable+0x42>
    } while(sets-- != 0U);
 8002f38:	1e43      	subs	r3, r0, #1
 8002f3a:	2800      	cmp	r0, #0
 8002f3c:	d1ec      	bne.n	8002f18 <CPU_CACHE_Enable+0x3c>
 8002f3e:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8002f42:	694b      	ldr	r3, [r1, #20]
 8002f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f48:	614b      	str	r3, [r1, #20]
 8002f4a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002f4e:	f3bf 8f6f 	isb	sy
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 8002f52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f56:	4770      	bx	lr
 8002f58:	e000ed00 	.word	0xe000ed00

08002f5c <Clock_Inits>:
	initUart(&USB_UART, 115200, USART1);
	setbuf(stdout, NULL);
}

// Initializes clocks for various peripherals. Some might need to be added!
void Clock_Inits(void) {
 8002f5c:	b0a2      	sub	sp, #136	; 0x88
	// Clock all GPIO ports and Timers.
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002f5e:	4b9a      	ldr	r3, [pc, #616]	; (80031c8 <Clock_Inits+0x26c>)
 8002f60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f62:	f042 0201 	orr.w	r2, r2, #1
 8002f66:	631a      	str	r2, [r3, #48]	; 0x30
 8002f68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f6a:	f002 0201 	and.w	r2, r2, #1
 8002f6e:	9200      	str	r2, [sp, #0]
 8002f70:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002f72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f74:	f042 0202 	orr.w	r2, r2, #2
 8002f78:	631a      	str	r2, [r3, #48]	; 0x30
 8002f7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f7c:	f002 0202 	and.w	r2, r2, #2
 8002f80:	9201      	str	r2, [sp, #4]
 8002f82:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002f84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f86:	f042 0204 	orr.w	r2, r2, #4
 8002f8a:	631a      	str	r2, [r3, #48]	; 0x30
 8002f8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f8e:	f002 0204 	and.w	r2, r2, #4
 8002f92:	9202      	str	r2, [sp, #8]
 8002f94:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002f96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f98:	f042 0208 	orr.w	r2, r2, #8
 8002f9c:	631a      	str	r2, [r3, #48]	; 0x30
 8002f9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fa0:	f002 0208 	and.w	r2, r2, #8
 8002fa4:	9203      	str	r2, [sp, #12]
 8002fa6:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8002fa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002faa:	f042 0210 	orr.w	r2, r2, #16
 8002fae:	631a      	str	r2, [r3, #48]	; 0x30
 8002fb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fb2:	f002 0210 	and.w	r2, r2, #16
 8002fb6:	9204      	str	r2, [sp, #16]
 8002fb8:	9a04      	ldr	r2, [sp, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8002fba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fbc:	f042 0220 	orr.w	r2, r2, #32
 8002fc0:	631a      	str	r2, [r3, #48]	; 0x30
 8002fc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fc4:	f002 0220 	and.w	r2, r2, #32
 8002fc8:	9205      	str	r2, [sp, #20]
 8002fca:	9a05      	ldr	r2, [sp, #20]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8002fcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fd2:	631a      	str	r2, [r3, #48]	; 0x30
 8002fd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fd6:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8002fda:	9206      	str	r2, [sp, #24]
 8002fdc:	9a06      	ldr	r2, [sp, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002fde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fe0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002fe4:	631a      	str	r2, [r3, #48]	; 0x30
 8002fe6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fe8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002fec:	9207      	str	r2, [sp, #28]
 8002fee:	9a07      	ldr	r2, [sp, #28]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 8002ff0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ff2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ff6:	631a      	str	r2, [r3, #48]	; 0x30
 8002ff8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ffa:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8002ffe:	9208      	str	r2, [sp, #32]
 8003000:	9a08      	ldr	r2, [sp, #32]
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 8003002:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003004:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003008:	631a      	str	r2, [r3, #48]	; 0x30
 800300a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800300c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003010:	9209      	str	r2, [sp, #36]	; 0x24
 8003012:	9a09      	ldr	r2, [sp, #36]	; 0x24
	__HAL_RCC_GPIOK_CLK_ENABLE();
 8003014:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003016:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800301a:	631a      	str	r2, [r3, #48]	; 0x30
 800301c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800301e:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8003022:	920a      	str	r2, [sp, #40]	; 0x28
 8003024:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8003026:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003028:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800302c:	645a      	str	r2, [r3, #68]	; 0x44
 800302e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003030:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003034:	920b      	str	r2, [sp, #44]	; 0x2c
 8003036:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	__HAL_RCC_TIM1_CLK_ENABLE();
 8003038:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800303a:	f042 0201 	orr.w	r2, r2, #1
 800303e:	645a      	str	r2, [r3, #68]	; 0x44
 8003040:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003042:	f002 0201 	and.w	r2, r2, #1
 8003046:	920c      	str	r2, [sp, #48]	; 0x30
 8003048:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	__HAL_RCC_TIM2_CLK_ENABLE();
 800304a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800304c:	f042 0201 	orr.w	r2, r2, #1
 8003050:	641a      	str	r2, [r3, #64]	; 0x40
 8003052:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003054:	f002 0201 	and.w	r2, r2, #1
 8003058:	920d      	str	r2, [sp, #52]	; 0x34
 800305a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	__HAL_RCC_TIM3_CLK_ENABLE();
 800305c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800305e:	f042 0202 	orr.w	r2, r2, #2
 8003062:	641a      	str	r2, [r3, #64]	; 0x40
 8003064:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003066:	f002 0202 	and.w	r2, r2, #2
 800306a:	920e      	str	r2, [sp, #56]	; 0x38
 800306c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	__HAL_RCC_TIM4_CLK_ENABLE();
 800306e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003070:	f042 0204 	orr.w	r2, r2, #4
 8003074:	641a      	str	r2, [r3, #64]	; 0x40
 8003076:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003078:	f002 0204 	and.w	r2, r2, #4
 800307c:	920f      	str	r2, [sp, #60]	; 0x3c
 800307e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
	__HAL_RCC_TIM5_CLK_ENABLE();
 8003080:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003082:	f042 0208 	orr.w	r2, r2, #8
 8003086:	641a      	str	r2, [r3, #64]	; 0x40
 8003088:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800308a:	f002 0208 	and.w	r2, r2, #8
 800308e:	9210      	str	r2, [sp, #64]	; 0x40
 8003090:	9a10      	ldr	r2, [sp, #64]	; 0x40
	__HAL_RCC_TIM6_CLK_ENABLE();
 8003092:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003094:	f042 0210 	orr.w	r2, r2, #16
 8003098:	641a      	str	r2, [r3, #64]	; 0x40
 800309a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800309c:	f002 0210 	and.w	r2, r2, #16
 80030a0:	9211      	str	r2, [sp, #68]	; 0x44
 80030a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
	__HAL_RCC_TIM7_CLK_ENABLE();
 80030a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030a6:	f042 0220 	orr.w	r2, r2, #32
 80030aa:	641a      	str	r2, [r3, #64]	; 0x40
 80030ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030ae:	f002 0220 	and.w	r2, r2, #32
 80030b2:	9212      	str	r2, [sp, #72]	; 0x48
 80030b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
	__HAL_RCC_TIM8_CLK_ENABLE();
 80030b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030b8:	f042 0202 	orr.w	r2, r2, #2
 80030bc:	645a      	str	r2, [r3, #68]	; 0x44
 80030be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030c0:	f002 0202 	and.w	r2, r2, #2
 80030c4:	9213      	str	r2, [sp, #76]	; 0x4c
 80030c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
	__HAL_RCC_TIM9_CLK_ENABLE();
 80030c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030ca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80030ce:	645a      	str	r2, [r3, #68]	; 0x44
 80030d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030d2:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 80030d6:	9214      	str	r2, [sp, #80]	; 0x50
 80030d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
	__HAL_RCC_TIM10_CLK_ENABLE();
 80030da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030dc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80030e0:	645a      	str	r2, [r3, #68]	; 0x44
 80030e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030e4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80030e8:	9215      	str	r2, [sp, #84]	; 0x54
 80030ea:	9a15      	ldr	r2, [sp, #84]	; 0x54
	__HAL_RCC_TIM11_CLK_ENABLE();
 80030ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030ee:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80030f2:	645a      	str	r2, [r3, #68]	; 0x44
 80030f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030f6:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80030fa:	9216      	str	r2, [sp, #88]	; 0x58
 80030fc:	9a16      	ldr	r2, [sp, #88]	; 0x58
	__HAL_RCC_TIM12_CLK_ENABLE();
 80030fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003100:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003104:	641a      	str	r2, [r3, #64]	; 0x40
 8003106:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003108:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800310c:	9217      	str	r2, [sp, #92]	; 0x5c
 800310e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
	__HAL_RCC_TIM13_CLK_ENABLE();
 8003110:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003112:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003116:	641a      	str	r2, [r3, #64]	; 0x40
 8003118:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800311a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800311e:	9218      	str	r2, [sp, #96]	; 0x60
 8003120:	9a18      	ldr	r2, [sp, #96]	; 0x60
	__HAL_RCC_TIM14_CLK_ENABLE();
 8003122:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003124:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003128:	641a      	str	r2, [r3, #64]	; 0x40
 800312a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800312c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8003130:	9219      	str	r2, [sp, #100]	; 0x64
 8003132:	9a19      	ldr	r2, [sp, #100]	; 0x64

	// Enable SPI2 clock
	__HAL_RCC_SPI2_CLK_ENABLE();
 8003134:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003136:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800313a:	641a      	str	r2, [r3, #64]	; 0x40
 800313c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800313e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003142:	921a      	str	r2, [sp, #104]	; 0x68
 8003144:	9a1a      	ldr	r2, [sp, #104]	; 0x68

	// ADC and DAC
	__HAL_RCC_DAC_CLK_ENABLE();
 8003146:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003148:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800314c:	641a      	str	r2, [r3, #64]	; 0x40
 800314e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003150:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8003154:	921b      	str	r2, [sp, #108]	; 0x6c
 8003156:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
	__HAL_RCC_ADC1_CLK_ENABLE();
 8003158:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800315a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800315e:	645a      	str	r2, [r3, #68]	; 0x44
 8003160:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003162:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8003166:	921c      	str	r2, [sp, #112]	; 0x70
 8003168:	9a1c      	ldr	r2, [sp, #112]	; 0x70
	__HAL_RCC_ADC2_CLK_ENABLE();
 800316a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800316c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003170:	645a      	str	r2, [r3, #68]	; 0x44
 8003172:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003174:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003178:	921d      	str	r2, [sp, #116]	; 0x74
 800317a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
	__HAL_RCC_ADC3_CLK_ENABLE();
 800317c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800317e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003182:	645a      	str	r2, [r3, #68]	; 0x44
 8003184:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003186:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800318a:	921e      	str	r2, [sp, #120]	; 0x78
 800318c:	9a1e      	ldr	r2, [sp, #120]	; 0x78

	// DMA Clocks
	__HAL_RCC_DMA1_CLK_ENABLE();
 800318e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003190:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003194:	631a      	str	r2, [r3, #48]	; 0x30
 8003196:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003198:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800319c:	921f      	str	r2, [sp, #124]	; 0x7c
 800319e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
	__HAL_RCC_DMA2_CLK_ENABLE();
 80031a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031a2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80031a6:	631a      	str	r2, [r3, #48]	; 0x30
 80031a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031aa:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80031ae:	9220      	str	r2, [sp, #128]	; 0x80
 80031b0:	9a20      	ldr	r2, [sp, #128]	; 0x80

	// I2C Clock
	__HAL_RCC_I2C1_CLK_ENABLE();
 80031b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031b4:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80031b8:	641a      	str	r2, [r3, #64]	; 0x40
 80031ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031c0:	9321      	str	r3, [sp, #132]	; 0x84
 80031c2:	9b21      	ldr	r3, [sp, #132]	; 0x84

}
 80031c4:	b022      	add	sp, #136	; 0x88
 80031c6:	4770      	bx	lr
 80031c8:	40023800 	.word	0x40023800

080031cc <Sys_Init>:
void Sys_Init(void) {
 80031cc:	b508      	push	{r3, lr}
	CPU_CACHE_Enable();		// Enable CPU Caching
 80031ce:	f7ff fe85 	bl	8002edc <CPU_CACHE_Enable>
	HAL_Init();				// Initialize HAL
 80031d2:	f000 fa15 	bl	8003600 <HAL_Init>
	SystemClock_Config(); 	// Configure the system clock to 216 MHz
 80031d6:	f7ff fe4d 	bl	8002e74 <SystemClock_Config>
	Clock_Inits();
 80031da:	f7ff febf 	bl	8002f5c <Clock_Inits>
	initUart(&USB_UART, 115200, USART1);
 80031de:	4a06      	ldr	r2, [pc, #24]	; (80031f8 <Sys_Init+0x2c>)
 80031e0:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80031e4:	4805      	ldr	r0, [pc, #20]	; (80031fc <Sys_Init+0x30>)
 80031e6:	f000 f9ab 	bl	8003540 <initUart>
	setbuf(stdout, NULL);
 80031ea:	4b05      	ldr	r3, [pc, #20]	; (8003200 <Sys_Init+0x34>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2100      	movs	r1, #0
 80031f0:	6898      	ldr	r0, [r3, #8]
 80031f2:	f003 fe6d 	bl	8006ed0 <setbuf>
}
 80031f6:	bd08      	pop	{r3, pc}
 80031f8:	40011000 	.word	0x40011000
 80031fc:	20004e40 	.word	0x20004e40
 8003200:	2000007c 	.word	0x2000007c

08003204 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8003204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003208:	b086      	sub	sp, #24
 800320a:	4605      	mov	r5, r0
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 800320c:	2364      	movs	r3, #100	; 0x64
 800320e:	9302      	str	r3, [sp, #8]
 8003210:	2301      	movs	r3, #1
 8003212:	9301      	str	r3, [sp, #4]
 8003214:	f10d 0217 	add.w	r2, sp, #23
 8003218:	9200      	str	r2, [sp, #0]
 800321a:	2275      	movs	r2, #117	; 0x75
 800321c:	21d0      	movs	r1, #208	; 0xd0
 800321e:	f001 fc77 	bl	8004b10 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8003222:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8003226:	2b68      	cmp	r3, #104	; 0x68
 8003228:	d003      	beq.n	8003232 <MPU6050_Init+0x2e>
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
        return 0;
    }
    return 1;
 800322a:	2001      	movs	r0, #1
}
 800322c:	b006      	add	sp, #24
 800322e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        Data = 0;
 8003232:	2400      	movs	r4, #0
 8003234:	f88d 4016 	strb.w	r4, [sp, #22]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8003238:	f04f 0864 	mov.w	r8, #100	; 0x64
 800323c:	f8cd 8008 	str.w	r8, [sp, #8]
 8003240:	2601      	movs	r6, #1
 8003242:	9601      	str	r6, [sp, #4]
 8003244:	f10d 0716 	add.w	r7, sp, #22
 8003248:	9700      	str	r7, [sp, #0]
 800324a:	4633      	mov	r3, r6
 800324c:	226b      	movs	r2, #107	; 0x6b
 800324e:	21d0      	movs	r1, #208	; 0xd0
 8003250:	4628      	mov	r0, r5
 8003252:	f001 fb87 	bl	8004964 <HAL_I2C_Mem_Write>
        Data = 0x07;
 8003256:	2307      	movs	r3, #7
 8003258:	f88d 3016 	strb.w	r3, [sp, #22]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 800325c:	f8cd 8008 	str.w	r8, [sp, #8]
 8003260:	9601      	str	r6, [sp, #4]
 8003262:	9700      	str	r7, [sp, #0]
 8003264:	4633      	mov	r3, r6
 8003266:	2219      	movs	r2, #25
 8003268:	21d0      	movs	r1, #208	; 0xd0
 800326a:	4628      	mov	r0, r5
 800326c:	f001 fb7a 	bl	8004964 <HAL_I2C_Mem_Write>
        Data = 0x00;
 8003270:	f88d 4016 	strb.w	r4, [sp, #22]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8003274:	f8cd 8008 	str.w	r8, [sp, #8]
 8003278:	9601      	str	r6, [sp, #4]
 800327a:	9700      	str	r7, [sp, #0]
 800327c:	4633      	mov	r3, r6
 800327e:	221c      	movs	r2, #28
 8003280:	21d0      	movs	r1, #208	; 0xd0
 8003282:	4628      	mov	r0, r5
 8003284:	f001 fb6e 	bl	8004964 <HAL_I2C_Mem_Write>
        Data = 0x00;
 8003288:	f88d 4016 	strb.w	r4, [sp, #22]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800328c:	f8cd 8008 	str.w	r8, [sp, #8]
 8003290:	9601      	str	r6, [sp, #4]
 8003292:	9700      	str	r7, [sp, #0]
 8003294:	4633      	mov	r3, r6
 8003296:	221b      	movs	r2, #27
 8003298:	21d0      	movs	r1, #208	; 0xd0
 800329a:	4628      	mov	r0, r5
 800329c:	f001 fb62 	bl	8004964 <HAL_I2C_Mem_Write>
        return 0;
 80032a0:	4620      	mov	r0, r4
 80032a2:	e7c3      	b.n	800322c <MPU6050_Init+0x28>
 80032a4:	0000      	movs	r0, r0
	...

080032a8 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 80032a8:	b510      	push	{r4, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	460c      	mov	r4, r1
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 80032ae:	2364      	movs	r3, #100	; 0x64
 80032b0:	9302      	str	r3, [sp, #8]
 80032b2:	2306      	movs	r3, #6
 80032b4:	9301      	str	r3, [sp, #4]
 80032b6:	ab04      	add	r3, sp, #16
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	2301      	movs	r3, #1
 80032bc:	223b      	movs	r2, #59	; 0x3b
 80032be:	21d0      	movs	r1, #208	; 0xd0
 80032c0:	f001 fc26 	bl	8004b10 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 80032c4:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80032c8:	f89d 2011 	ldrb.w	r2, [sp, #17]
 80032cc:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80032d0:	b212      	sxth	r2, r2
 80032d2:	8022      	strh	r2, [r4, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80032d4:	f89d 1012 	ldrb.w	r1, [sp, #18]
 80032d8:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80032dc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80032e0:	b21b      	sxth	r3, r3
 80032e2:	8063      	strh	r3, [r4, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 80032e4:	f89d 0014 	ldrb.w	r0, [sp, #20]
 80032e8:	f89d 1015 	ldrb.w	r1, [sp, #21]
 80032ec:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 80032f0:	b209      	sxth	r1, r1
 80032f2:	80a1      	strh	r1, [r4, #4]
    /*** convert the RAW values into acceleration in 'g'
         we have to divide according to the Full scale value set in FS_SEL
         I have configured FS_SEL = 0. So I am dividing by 16384.0
         for more details check ACCEL_CONFIG Register              ****/

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80032f4:	ee07 2a90 	vmov	s15, r2
 80032f8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80032fc:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8003330 <MPU6050_Read_Accel+0x88>
 8003300:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003304:	ed84 7b02 	vstr	d7, [r4, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8003308:	ee07 3a90 	vmov	s15, r3
 800330c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003310:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003314:	ed84 7b04 	vstr	d7, [r4, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8003318:	ee07 1a90 	vmov	s15, r1
 800331c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003320:	ed9f 5b05 	vldr	d5, [pc, #20]	; 8003338 <MPU6050_Read_Accel+0x90>
 8003324:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8003328:	ed84 6b06 	vstr	d6, [r4, #24]
}
 800332c:	b006      	add	sp, #24
 800332e:	bd10      	pop	{r4, pc}
 8003330:	00000000 	.word	0x00000000
 8003334:	3f100000 	.word	0x3f100000
 8003338:	00000000 	.word	0x00000000
 800333c:	40cc2900 	.word	0x40cc2900

08003340 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8003340:	b510      	push	{r4, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	460c      	mov	r4, r1
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from GYRO_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 8003346:	2364      	movs	r3, #100	; 0x64
 8003348:	9302      	str	r3, [sp, #8]
 800334a:	2306      	movs	r3, #6
 800334c:	9301      	str	r3, [sp, #4]
 800334e:	ab04      	add	r3, sp, #16
 8003350:	9300      	str	r3, [sp, #0]
 8003352:	2301      	movs	r3, #1
 8003354:	2243      	movs	r2, #67	; 0x43
 8003356:	21d0      	movs	r1, #208	; 0xd0
 8003358:	f001 fbda 	bl	8004b10 <HAL_I2C_Mem_Read>

    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 800335c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8003360:	f89d 1011 	ldrb.w	r1, [sp, #17]
 8003364:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 8003368:	b209      	sxth	r1, r1
 800336a:	8421      	strh	r1, [r4, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 800336c:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8003370:	f89d 2013 	ldrb.w	r2, [sp, #19]
 8003374:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003378:	b212      	sxth	r2, r2
 800337a:	8462      	strh	r2, [r4, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 800337c:	f89d 0014 	ldrb.w	r0, [sp, #20]
 8003380:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8003384:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003388:	b21b      	sxth	r3, r3
 800338a:	84a3      	strh	r3, [r4, #36]	; 0x24
    /*** convert the RAW values into dps (�/s)
         we have to divide according to the Full scale value set in FS_SEL
         I have configured FS_SEL = 0. So I am dividing by 131.0
         for more details check GYRO_CONFIG Register              ****/

    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800338c:	ee07 1a90 	vmov	s15, r1
 8003390:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003394:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 80033c8 <MPU6050_Read_Gyro+0x88>
 8003398:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800339c:	ed84 5b0a 	vstr	d5, [r4, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 80033a0:	ee07 2a90 	vmov	s15, r2
 80033a4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80033a8:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80033ac:	ed84 5b0c 	vstr	d5, [r4, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80033b0:	ee07 3a90 	vmov	s15, r3
 80033b4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80033b8:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80033bc:	ed84 5b0e 	vstr	d5, [r4, #56]	; 0x38
}
 80033c0:	b006      	add	sp, #24
 80033c2:	bd10      	pop	{r4, pc}
 80033c4:	f3af 8000 	nop.w
 80033c8:	00000000 	.word	0x00000000
 80033cc:	40606000 	.word	0x40606000

080033d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033d0:	b500      	push	{lr}
 80033d2:	b089      	sub	sp, #36	; 0x24
 80033d4:	4601      	mov	r1, r0
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 80033d6:	2200      	movs	r2, #0
 80033d8:	2037      	movs	r0, #55	; 0x37
 80033da:	f000 f945 	bl	8003668 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80033de:	2037      	movs	r0, #55	; 0x37
 80033e0:	f000 f978 	bl	80036d4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80033e4:	4b15      	ldr	r3, [pc, #84]	; (800343c <HAL_InitTick+0x6c>)
 80033e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033e8:	f042 0220 	orr.w	r2, r2, #32
 80033ec:	641a      	str	r2, [r3, #64]	; 0x40
 80033ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f0:	f003 0320 	and.w	r3, r3, #32
 80033f4:	9301      	str	r3, [sp, #4]
 80033f6:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80033f8:	a902      	add	r1, sp, #8
 80033fa:	a803      	add	r0, sp, #12
 80033fc:	f002 f8f4 	bl	80055e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003400:	f002 f8d2 	bl	80055a8 <HAL_RCC_GetPCLK1Freq>
 8003404:	0043      	lsls	r3, r0, #1

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003406:	4a0e      	ldr	r2, [pc, #56]	; (8003440 <HAL_InitTick+0x70>)
 8003408:	fba2 2303 	umull	r2, r3, r2, r3
 800340c:	0c9b      	lsrs	r3, r3, #18
 800340e:	3b01      	subs	r3, #1

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8003410:	480c      	ldr	r0, [pc, #48]	; (8003444 <HAL_InitTick+0x74>)
 8003412:	4a0d      	ldr	r2, [pc, #52]	; (8003448 <HAL_InitTick+0x78>)
 8003414:	6002      	str	r2, [r0, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8003416:	f240 32e7 	movw	r2, #999	; 0x3e7
 800341a:	60c2      	str	r2, [r0, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 800341c:	6043      	str	r3, [r0, #4]
  htim7.Init.ClockDivision = 0;
 800341e:	2300      	movs	r3, #0
 8003420:	6103      	str	r3, [r0, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003422:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8003424:	f002 fdfc 	bl	8006020 <HAL_TIM_Base_Init>
 8003428:	b118      	cbz	r0, 8003432 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
  }

  /* Return function status */
  return HAL_ERROR;
 800342a:	2001      	movs	r0, #1
}
 800342c:	b009      	add	sp, #36	; 0x24
 800342e:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim7);
 8003432:	4804      	ldr	r0, [pc, #16]	; (8003444 <HAL_InitTick+0x74>)
 8003434:	f002 fc52 	bl	8005cdc <HAL_TIM_Base_Start_IT>
 8003438:	e7f8      	b.n	800342c <HAL_InitTick+0x5c>
 800343a:	bf00      	nop
 800343c:	40023800 	.word	0x40023800
 8003440:	431bde83 	.word	0x431bde83
 8003444:	20004df4 	.word	0x20004df4
 8003448:	40001400 	.word	0x40001400

0800344c <TIM7_IRQHandler>:
  /* Enable TIM7 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim7, TIM_IT_UPDATE);
}

void TIM7_IRQHandler(void)
{
 800344c:	b508      	push	{r3, lr}
  HAL_TIM_IRQHandler(&htim7);
 800344e:	4802      	ldr	r0, [pc, #8]	; (8003458 <TIM7_IRQHandler+0xc>)
 8003450:	f002 fc91 	bl	8005d76 <HAL_TIM_IRQHandler>
}
 8003454:	bd08      	pop	{r3, pc}
 8003456:	bf00      	nop
 8003458:	20004df4 	.word	0x20004df4

0800345c <HAL_UART_MspInit>:

UART_HandleTypeDef USB_UART;
// Initialize Hardware Resources
// Peripheral's clock enable
// Peripheral's GPIO Configuration
void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 800345c:	b530      	push	{r4, r5, lr}
 800345e:	b08b      	sub	sp, #44	; 0x2c
	GPIO_InitTypeDef  GPIO_InitStruct;

	if (huart->Instance == USART1) {
 8003460:	6803      	ldr	r3, [r0, #0]
 8003462:	4a32      	ldr	r2, [pc, #200]	; (800352c <HAL_UART_MspInit+0xd0>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d004      	beq.n	8003472 <HAL_UART_MspInit+0x16>
		
		// Enable Interrupt Mode
		HAL_NVIC_SetPriority(USART1_IRQn, 10, 0);
		HAL_NVIC_EnableIRQ(USART1_IRQn);

	} else if (huart->Instance == USART6) {
 8003468:	4a31      	ldr	r2, [pc, #196]	; (8003530 <HAL_UART_MspInit+0xd4>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d034      	beq.n	80034d8 <HAL_UART_MspInit+0x7c>

		// Enable UART Clocking
		__USART6_CLK_ENABLE();

	}
}
 800346e:	b00b      	add	sp, #44	; 0x2c
 8003470:	bd30      	pop	{r4, r5, pc}
		__GPIOA_CLK_ENABLE();
 8003472:	4c30      	ldr	r4, [pc, #192]	; (8003534 <HAL_UART_MspInit+0xd8>)
 8003474:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003476:	f043 0301 	orr.w	r3, r3, #1
 800347a:	6323      	str	r3, [r4, #48]	; 0x30
 800347c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	9301      	str	r3, [sp, #4]
 8003484:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin       = GPIO_PIN_9;
 8003486:	f44f 7300 	mov.w	r3, #512	; 0x200
 800348a:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800348c:	2302      	movs	r3, #2
 800348e:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8003490:	2301      	movs	r3, #1
 8003492:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8003494:	2303      	movs	r3, #3
 8003496:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003498:	2307      	movs	r3, #7
 800349a:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //TX Config
 800349c:	4d26      	ldr	r5, [pc, #152]	; (8003538 <HAL_UART_MspInit+0xdc>)
 800349e:	a905      	add	r1, sp, #20
 80034a0:	4628      	mov	r0, r5
 80034a2:	f000 ff43 	bl	800432c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 80034a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034aa:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config
 80034ac:	a905      	add	r1, sp, #20
 80034ae:	4628      	mov	r0, r5
 80034b0:	f000 ff3c 	bl	800432c <HAL_GPIO_Init>
		__USART1_CLK_ENABLE();
 80034b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80034b6:	f043 0310 	orr.w	r3, r3, #16
 80034ba:	6463      	str	r3, [r4, #68]	; 0x44
 80034bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80034be:	f003 0310 	and.w	r3, r3, #16
 80034c2:	9302      	str	r3, [sp, #8]
 80034c4:	9b02      	ldr	r3, [sp, #8]
		HAL_NVIC_SetPriority(USART1_IRQn, 10, 0);
 80034c6:	2200      	movs	r2, #0
 80034c8:	210a      	movs	r1, #10
 80034ca:	2025      	movs	r0, #37	; 0x25
 80034cc:	f000 f8cc 	bl	8003668 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART1_IRQn);
 80034d0:	2025      	movs	r0, #37	; 0x25
 80034d2:	f000 f8ff 	bl	80036d4 <HAL_NVIC_EnableIRQ>
 80034d6:	e7ca      	b.n	800346e <HAL_UART_MspInit+0x12>
		__GPIOC_CLK_ENABLE();
 80034d8:	4c16      	ldr	r4, [pc, #88]	; (8003534 <HAL_UART_MspInit+0xd8>)
 80034da:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80034dc:	f043 0304 	orr.w	r3, r3, #4
 80034e0:	6323      	str	r3, [r4, #48]	; 0x30
 80034e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80034e4:	f003 0304 	and.w	r3, r3, #4
 80034e8:	9303      	str	r3, [sp, #12]
 80034ea:	9b03      	ldr	r3, [sp, #12]
		GPIO_InitStruct.Pin       = GPIO_PIN_6;
 80034ec:	2340      	movs	r3, #64	; 0x40
 80034ee:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80034f0:	2302      	movs	r3, #2
 80034f2:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80034f4:	2301      	movs	r3, #1
 80034f6:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 80034f8:	2303      	movs	r3, #3
 80034fa:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80034fc:	2308      	movs	r3, #8
 80034fe:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //TX Config
 8003500:	4d0e      	ldr	r5, [pc, #56]	; (800353c <HAL_UART_MspInit+0xe0>)
 8003502:	a905      	add	r1, sp, #20
 8003504:	4628      	mov	r0, r5
 8003506:	f000 ff11 	bl	800432c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 800350a:	2380      	movs	r3, #128	; 0x80
 800350c:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //RX Config
 800350e:	a905      	add	r1, sp, #20
 8003510:	4628      	mov	r0, r5
 8003512:	f000 ff0b 	bl	800432c <HAL_GPIO_Init>
		__USART6_CLK_ENABLE();
 8003516:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003518:	f043 0320 	orr.w	r3, r3, #32
 800351c:	6463      	str	r3, [r4, #68]	; 0x44
 800351e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003520:	f003 0320 	and.w	r3, r3, #32
 8003524:	9304      	str	r3, [sp, #16]
 8003526:	9b04      	ldr	r3, [sp, #16]
}
 8003528:	e7a1      	b.n	800346e <HAL_UART_MspInit+0x12>
 800352a:	bf00      	nop
 800352c:	40011000 	.word	0x40011000
 8003530:	40011400 	.word	0x40011400
 8003534:	40023800 	.word	0x40023800
 8003538:	40020000 	.word	0x40020000
 800353c:	40020800 	.word	0x40020800

08003540 <initUart>:

//UART Initialization
void initUart(UART_HandleTypeDef* Uhand, uint32_t Baud, USART_TypeDef* Tgt) {
 8003540:	b508      	push	{r3, lr}
	Uhand->Instance        = Tgt;
 8003542:	6002      	str	r2, [r0, #0]

	Uhand->Init.BaudRate   = Baud;
 8003544:	6041      	str	r1, [r0, #4]
	Uhand->Init.WordLength = UART_WORDLENGTH_8B;
 8003546:	2200      	movs	r2, #0
 8003548:	6082      	str	r2, [r0, #8]
	Uhand->Init.StopBits   = UART_STOPBITS_1;
 800354a:	60c2      	str	r2, [r0, #12]
	Uhand->Init.Parity     = UART_PARITY_NONE;
 800354c:	6102      	str	r2, [r0, #16]
	Uhand->Init.Mode       = UART_MODE_TX_RX;
 800354e:	210c      	movs	r1, #12
 8003550:	6141      	str	r1, [r0, #20]
	Uhand->Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8003552:	6182      	str	r2, [r0, #24]

	HAL_UART_Init(Uhand);
 8003554:	f003 fb06 	bl	8006b64 <HAL_UART_Init>
}
 8003558:	bd08      	pop	{r3, pc}
	...

0800355c <_write>:

============================================================================= */


// Make printf(), putchar(), etc. default to work over USB UART
int _write(int file, char *ptr, int len) {
 800355c:	b510      	push	{r4, lr}
 800355e:	4614      	mov	r4, r2
	// HAL_UART_Transmit(&USB_UART, (uint8_t*) ptr, len, 1000);
	HAL_UART_Transmit_IT(&USB_UART, (uint8_t*) ptr, len);
 8003560:	b292      	uxth	r2, r2
 8003562:	4802      	ldr	r0, [pc, #8]	; (800356c <_write+0x10>)
 8003564:	f002 fe0e 	bl	8006184 <HAL_UART_Transmit_IT>
	return len;
}
 8003568:	4620      	mov	r0, r4
 800356a:	bd10      	pop	{r4, pc}
 800356c:	20004e40 	.word	0x20004e40

08003570 <_read>:

// Make scanf(), getchar(), etc. default to work over USB UART
int _read(int file, char *ptr, int len) {
 8003570:	b508      	push	{r3, lr}
	*ptr = 0x00; // Clear the character buffer because scanf() is finicky
 8003572:	2200      	movs	r2, #0
 8003574:	700a      	strb	r2, [r1, #0]
	len = 1; // Again because of scanf's finickiness, len must = 1
	HAL_UART_Receive(&USB_UART, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8003576:	f04f 33ff 	mov.w	r3, #4294967295
 800357a:	2201      	movs	r2, #1
 800357c:	4802      	ldr	r0, [pc, #8]	; (8003588 <_read+0x18>)
 800357e:	f003 fa30 	bl	80069e2 <HAL_UART_Receive>
	return len;
}
 8003582:	2001      	movs	r0, #1
 8003584:	bd08      	pop	{r3, pc}
 8003586:	bf00      	nop
 8003588:	20004e40 	.word	0x20004e40

0800358c <_lseek>:
	}
  return i; // The way this is set up, it will always report the wrong size
}

// These functions need to be defined for compiler version gcc-arm version 11.3__attribute__((weak)) void _close(void){}
__attribute__((weak)) void _lseek(void){}
 800358c:	4770      	bx	lr

0800358e <_fstat>:
__attribute__((weak)) void _fstat(void){}
 800358e:	4770      	bx	lr

08003590 <_isatty>:
__attribute__((weak)) void _getpid(void){}
__attribute__((weak)) void _ispid(void){}
__attribute__((weak)) void _kill(void){}
__attribute__((weak)) void _isatty(void){}
 8003590:	4770      	bx	lr
	...

08003594 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003594:	480d      	ldr	r0, [pc, #52]	; (80035cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003596:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 8003598:	480d      	ldr	r0, [pc, #52]	; (80035d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800359a:	490e      	ldr	r1, [pc, #56]	; (80035d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800359c:	4a0e      	ldr	r2, [pc, #56]	; (80035d8 <LoopForever+0xe>)
  movs r3, #0
 800359e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035a0:	e002      	b.n	80035a8 <LoopCopyDataInit>

080035a2 <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 80035a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035a6:	3304      	adds	r3, #4

080035a8 <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 80035a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035aa:	428c      	cmp	r4, r1



  bcc CopyDataInit
 80035ac:	d3f9      	bcc.n	80035a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035ae:	4a0b      	ldr	r2, [pc, #44]	; (80035dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80035b0:	4c0b      	ldr	r4, [pc, #44]	; (80035e0 <LoopForever+0x16>)
  movs r3, #0
 80035b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035b4:	e001      	b.n	80035ba <LoopFillZerobss>

080035b6 <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 80035b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035b8:	3204      	adds	r2, #4

080035ba <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 80035ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035bc:	d3fb      	bcc.n	80035b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80035be:	f000 f813 	bl	80035e8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80035c2:	f003 fdcd 	bl	8007160 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80035c6:	f7ff fc21 	bl	8002e0c <main>

080035ca <LoopForever>:

LoopForever:
    b LoopForever
 80035ca:	e7fe      	b.n	80035ca <LoopForever>
  ldr   r0, =_estack
 80035cc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80035d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035d4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80035d8:	080099b4 	.word	0x080099b4
  ldr r2, =_sbss
 80035dc:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80035e0:	2000501c 	.word	0x2000501c

080035e4 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80035e4:	e7fe      	b.n	80035e4 <ADC_IRQHandler>
	...

080035e8 <SystemInit>:
 * @retval None
 */
void SystemInit(void) {
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 80035e8:	4a03      	ldr	r2, [pc, #12]	; (80035f8 <SystemInit+0x10>)
 80035ea:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80035ee:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035f2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035f6:	4770      	bx	lr
 80035f8:	e000ed00 	.word	0xe000ed00

080035fc <HAL_MspInit>:
 */
__weak void HAL_MspInit(void) {
	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_MspInit could be implemented in the user file
	 */
}
 80035fc:	4770      	bx	lr
	...

08003600 <HAL_Init>:
HAL_StatusTypeDef HAL_Init(void) {
 8003600:	b508      	push	{r3, lr}
  __HAL_FLASH_ART_ENABLE();
 8003602:	4b09      	ldr	r3, [pc, #36]	; (8003628 <HAL_Init+0x28>)
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800360a:	601a      	str	r2, [r3, #0]
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003612:	601a      	str	r2, [r3, #0]
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003614:	2003      	movs	r0, #3
 8003616:	f000 f815 	bl	8003644 <HAL_NVIC_SetPriorityGrouping>
	HAL_InitTick(TICK_INT_PRIORITY);
 800361a:	200f      	movs	r0, #15
 800361c:	f7ff fed8 	bl	80033d0 <HAL_InitTick>
	HAL_MspInit();
 8003620:	f7ff ffec 	bl	80035fc <HAL_MspInit>
}
 8003624:	2000      	movs	r0, #0
 8003626:	bd08      	pop	{r3, pc}
 8003628:	40023c00 	.word	0x40023c00

0800362c <HAL_GetTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
 *       implementations in user file.
 * @retval tick value
 */
__weak uint32_t HAL_GetTick(void) {
	return uwTick;
 800362c:	4b01      	ldr	r3, [pc, #4]	; (8003634 <HAL_GetTick+0x8>)
 800362e:	6818      	ldr	r0, [r3, #0]
}
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	20004ec8 	.word	0x20004ec8

08003638 <HAL_GetTickFreq>:
 * @brief Return tick frequency.
 * @retval tick period in Hz
 */
HAL_TickFreqTypeDef HAL_GetTickFreq(void) {
	return uwTickFreq;
}
 8003638:	4b01      	ldr	r3, [pc, #4]	; (8003640 <HAL_GetTickFreq+0x8>)
 800363a:	7818      	ldrb	r0, [r3, #0]
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	2000001c 	.word	0x2000001c

08003644 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003644:	4906      	ldr	r1, [pc, #24]	; (8003660 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8003646:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003648:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800364c:	041b      	lsls	r3, r3, #16
 800364e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003650:	0200      	lsls	r0, r0, #8
 8003652:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003656:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8003658:	4a02      	ldr	r2, [pc, #8]	; (8003664 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800365a:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 800365c:	60ca      	str	r2, [r1, #12]
	/* Check the parameters */
	assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

	/* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
	NVIC_SetPriorityGrouping(PriorityGroup);
}
 800365e:	4770      	bx	lr
 8003660:	e000ed00 	.word	0xe000ed00
 8003664:	05fa0000 	.word	0x05fa0000

08003668 <HAL_NVIC_SetPriority>:
 *         This parameter can be a value between 0 and 15
 *         A lower priority value indicates a higher priority.          
 * @retval None
 */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority,
		uint32_t SubPriority) {
 8003668:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800366a:	4b17      	ldr	r3, [pc, #92]	; (80036c8 <HAL_NVIC_SetPriority+0x60>)
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003672:	f1c3 0c07 	rsb	ip, r3, #7
 8003676:	f1bc 0f04 	cmp.w	ip, #4
 800367a:	bf28      	it	cs
 800367c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003680:	f103 0e04 	add.w	lr, r3, #4
 8003684:	f1be 0f06 	cmp.w	lr, #6
 8003688:	d914      	bls.n	80036b4 <HAL_NVIC_SetPriority+0x4c>
 800368a:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800368c:	f04f 3eff 	mov.w	lr, #4294967295
 8003690:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003694:	ea21 010c 	bic.w	r1, r1, ip
 8003698:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800369a:	fa0e fe03 	lsl.w	lr, lr, r3
 800369e:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036a2:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 80036a4:	2800      	cmp	r0, #0
 80036a6:	db07      	blt.n	80036b8 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036a8:	0112      	lsls	r2, r2, #4
 80036aa:	b2d2      	uxtb	r2, r2
 80036ac:	4b07      	ldr	r3, [pc, #28]	; (80036cc <HAL_NVIC_SetPriority+0x64>)
 80036ae:	541a      	strb	r2, [r3, r0]

	prioritygroup = NVIC_GetPriorityGrouping();

	NVIC_SetPriority(IRQn,
			NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80036b0:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036b4:	2300      	movs	r3, #0
 80036b6:	e7e9      	b.n	800368c <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036b8:	f000 000f 	and.w	r0, r0, #15
 80036bc:	0112      	lsls	r2, r2, #4
 80036be:	b2d2      	uxtb	r2, r2
 80036c0:	4b03      	ldr	r3, [pc, #12]	; (80036d0 <HAL_NVIC_SetPriority+0x68>)
 80036c2:	541a      	strb	r2, [r3, r0]
 80036c4:	e7f4      	b.n	80036b0 <HAL_NVIC_SetPriority+0x48>
 80036c6:	bf00      	nop
 80036c8:	e000ed00 	.word	0xe000ed00
 80036cc:	e000e400 	.word	0xe000e400
 80036d0:	e000ed14 	.word	0xe000ed14

080036d4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80036d4:	2800      	cmp	r0, #0
 80036d6:	db07      	blt.n	80036e8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036d8:	f000 021f 	and.w	r2, r0, #31
 80036dc:	0940      	lsrs	r0, r0, #5
 80036de:	2301      	movs	r3, #1
 80036e0:	4093      	lsls	r3, r2
 80036e2:	4a02      	ldr	r2, [pc, #8]	; (80036ec <HAL_NVIC_EnableIRQ+0x18>)
 80036e4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
	/* Check the parameters */
	assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

	/* Enable interrupt */
	NVIC_EnableIRQ(IRQn);
}
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	e000e100 	.word	0xe000e100

080036f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036f0:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036f2:	6801      	ldr	r1, [r0, #0]
 80036f4:	b2ca      	uxtb	r2, r1
 80036f6:	3a10      	subs	r2, #16
 80036f8:	4b0a      	ldr	r3, [pc, #40]	; (8003724 <DMA_CalcBaseAndBitshift+0x34>)
 80036fa:	fba3 4302 	umull	r4, r3, r3, r2
 80036fe:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003700:	4c09      	ldr	r4, [pc, #36]	; (8003728 <DMA_CalcBaseAndBitshift+0x38>)
 8003702:	5ce3      	ldrb	r3, [r4, r3]
 8003704:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003706:	2a5f      	cmp	r2, #95	; 0x5f
 8003708:	d907      	bls.n	800371a <DMA_CalcBaseAndBitshift+0x2a>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800370a:	4b08      	ldr	r3, [pc, #32]	; (800372c <DMA_CalcBaseAndBitshift+0x3c>)
 800370c:	400b      	ands	r3, r1
 800370e:	3304      	adds	r3, #4
 8003710:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8003712:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8003714:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003718:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800371a:	4b04      	ldr	r3, [pc, #16]	; (800372c <DMA_CalcBaseAndBitshift+0x3c>)
 800371c:	400b      	ands	r3, r1
 800371e:	6583      	str	r3, [r0, #88]	; 0x58
 8003720:	e7f7      	b.n	8003712 <DMA_CalcBaseAndBitshift+0x22>
 8003722:	bf00      	nop
 8003724:	aaaaaaab 	.word	0xaaaaaaab
 8003728:	080098d8 	.word	0x080098d8
 800372c:	fffffc00 	.word	0xfffffc00

08003730 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003730:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003732:	6982      	ldr	r2, [r0, #24]
 8003734:	b992      	cbnz	r2, 800375c <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8003736:	2b01      	cmp	r3, #1
 8003738:	d00a      	beq.n	8003750 <DMA_CheckFifoParam+0x20>
 800373a:	2b02      	cmp	r3, #2
 800373c:	d002      	beq.n	8003744 <DMA_CheckFifoParam+0x14>
 800373e:	b10b      	cbz	r3, 8003744 <DMA_CheckFifoParam+0x14>
 8003740:	2000      	movs	r0, #0
 8003742:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003744:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003746:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800374a:	d128      	bne.n	800379e <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 800374c:	2000      	movs	r0, #0
 800374e:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003750:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003752:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003756:	d024      	beq.n	80037a2 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8003758:	2000      	movs	r0, #0
 800375a:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800375c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003760:	d009      	beq.n	8003776 <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003762:	2b02      	cmp	r3, #2
 8003764:	d925      	bls.n	80037b2 <DMA_CheckFifoParam+0x82>
 8003766:	2b03      	cmp	r3, #3
 8003768:	d125      	bne.n	80037b6 <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800376a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800376c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003770:	d123      	bne.n	80037ba <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8003772:	2000      	movs	r0, #0
 8003774:	4770      	bx	lr
    switch (tmp)
 8003776:	2b03      	cmp	r3, #3
 8003778:	d803      	bhi.n	8003782 <DMA_CheckFifoParam+0x52>
 800377a:	e8df f003 	tbb	[pc, r3]
 800377e:	0414      	.short	0x0414
 8003780:	0a14      	.short	0x0a14
 8003782:	2000      	movs	r0, #0
 8003784:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003786:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003788:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800378c:	d10d      	bne.n	80037aa <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 800378e:	2000      	movs	r0, #0
 8003790:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003792:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003794:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003798:	d009      	beq.n	80037ae <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 800379a:	2000      	movs	r0, #0
 800379c:	4770      	bx	lr
        status = HAL_ERROR;
 800379e:	2001      	movs	r0, #1
 80037a0:	4770      	bx	lr
        status = HAL_ERROR;
 80037a2:	2001      	movs	r0, #1
 80037a4:	4770      	bx	lr
      status = HAL_ERROR;
 80037a6:	2001      	movs	r0, #1
 80037a8:	4770      	bx	lr
        status = HAL_ERROR;
 80037aa:	2001      	movs	r0, #1
 80037ac:	4770      	bx	lr
        status = HAL_ERROR;
 80037ae:	2001      	movs	r0, #1
 80037b0:	4770      	bx	lr
      status = HAL_ERROR;
 80037b2:	2001      	movs	r0, #1
 80037b4:	4770      	bx	lr
    switch (tmp)
 80037b6:	2000      	movs	r0, #0
 80037b8:	4770      	bx	lr
      {
        status = HAL_ERROR;
 80037ba:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 80037bc:	4770      	bx	lr
	...

080037c0 <HAL_DMA_Init>:
{
 80037c0:	b570      	push	{r4, r5, r6, lr}
 80037c2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80037c4:	f7ff ff32 	bl	800362c <HAL_GetTick>
  if(hdma == NULL)
 80037c8:	2c00      	cmp	r4, #0
 80037ca:	d05b      	beq.n	8003884 <HAL_DMA_Init+0xc4>
 80037cc:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 80037ce:	2302      	movs	r3, #2
 80037d0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 80037d4:	2300      	movs	r3, #0
 80037d6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80037da:	6822      	ldr	r2, [r4, #0]
 80037dc:	6813      	ldr	r3, [r2, #0]
 80037de:	f023 0301 	bic.w	r3, r3, #1
 80037e2:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037e4:	6823      	ldr	r3, [r4, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	f012 0f01 	tst.w	r2, #1
 80037ec:	d00a      	beq.n	8003804 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037ee:	f7ff ff1d 	bl	800362c <HAL_GetTick>
 80037f2:	1b43      	subs	r3, r0, r5
 80037f4:	2b05      	cmp	r3, #5
 80037f6:	d9f5      	bls.n	80037e4 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037f8:	2320      	movs	r3, #32
 80037fa:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037fc:	2003      	movs	r0, #3
 80037fe:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8003802:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8003804:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003806:	4920      	ldr	r1, [pc, #128]	; (8003888 <HAL_DMA_Init+0xc8>)
 8003808:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800380a:	6862      	ldr	r2, [r4, #4]
 800380c:	68a0      	ldr	r0, [r4, #8]
 800380e:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003810:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003812:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003814:	6920      	ldr	r0, [r4, #16]
 8003816:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003818:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800381a:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800381c:	69a0      	ldr	r0, [r4, #24]
 800381e:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8003820:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003822:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8003824:	6a20      	ldr	r0, [r4, #32]
 8003826:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003828:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800382a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800382c:	2904      	cmp	r1, #4
 800382e:	d01e      	beq.n	800386e <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8003830:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8003832:	6826      	ldr	r6, [r4, #0]
 8003834:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003836:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 800383a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800383c:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800383e:	2b04      	cmp	r3, #4
 8003840:	d107      	bne.n	8003852 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8003842:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003844:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003846:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003848:	b11b      	cbz	r3, 8003852 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800384a:	4620      	mov	r0, r4
 800384c:	f7ff ff70 	bl	8003730 <DMA_CheckFifoParam>
 8003850:	b990      	cbnz	r0, 8003878 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8003852:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003854:	4620      	mov	r0, r4
 8003856:	f7ff ff4b 	bl	80036f0 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800385a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800385c:	233f      	movs	r3, #63	; 0x3f
 800385e:	4093      	lsls	r3, r2
 8003860:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003862:	2000      	movs	r0, #0
 8003864:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8003866:	2301      	movs	r3, #1
 8003868:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800386c:	e7c9      	b.n	8003802 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800386e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003870:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003872:	4301      	orrs	r1, r0
 8003874:	430a      	orrs	r2, r1
 8003876:	e7db      	b.n	8003830 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003878:	2340      	movs	r3, #64	; 0x40
 800387a:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800387c:	2001      	movs	r0, #1
 800387e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8003882:	e7be      	b.n	8003802 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8003884:	2001      	movs	r0, #1
 8003886:	e7bc      	b.n	8003802 <HAL_DMA_Init+0x42>
 8003888:	e010803f 	.word	0xe010803f

0800388c <HAL_DMA_DeInit>:
  if(hdma == NULL)
 800388c:	2800      	cmp	r0, #0
 800388e:	d02d      	beq.n	80038ec <HAL_DMA_DeInit+0x60>
{
 8003890:	b538      	push	{r3, r4, r5, lr}
 8003892:	4605      	mov	r5, r0
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003894:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
 8003898:	b2c0      	uxtb	r0, r0
 800389a:	2802      	cmp	r0, #2
 800389c:	d025      	beq.n	80038ea <HAL_DMA_DeInit+0x5e>
  __HAL_DMA_DISABLE(hdma);
 800389e:	682a      	ldr	r2, [r5, #0]
 80038a0:	6813      	ldr	r3, [r2, #0]
 80038a2:	f023 0301 	bic.w	r3, r3, #1
 80038a6:	6013      	str	r3, [r2, #0]
  hdma->Instance->CR   = 0U;
 80038a8:	682b      	ldr	r3, [r5, #0]
 80038aa:	2400      	movs	r4, #0
 80038ac:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 80038ae:	682b      	ldr	r3, [r5, #0]
 80038b0:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 80038b2:	682b      	ldr	r3, [r5, #0]
 80038b4:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 80038b6:	682b      	ldr	r3, [r5, #0]
 80038b8:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 80038ba:	682b      	ldr	r3, [r5, #0]
 80038bc:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80038be:	682b      	ldr	r3, [r5, #0]
 80038c0:	2221      	movs	r2, #33	; 0x21
 80038c2:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038c4:	4628      	mov	r0, r5
 80038c6:	f7ff ff13 	bl	80036f0 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038ca:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80038cc:	233f      	movs	r3, #63	; 0x3f
 80038ce:	4093      	lsls	r3, r2
 80038d0:	6083      	str	r3, [r0, #8]
  hdma->XferCpltCallback = NULL;
 80038d2:	63ec      	str	r4, [r5, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80038d4:	642c      	str	r4, [r5, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80038d6:	646c      	str	r4, [r5, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80038d8:	64ac      	str	r4, [r5, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80038da:	64ec      	str	r4, [r5, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80038dc:	652c      	str	r4, [r5, #80]	; 0x50
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038de:	656c      	str	r4, [r5, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_RESET;
 80038e0:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 80038e4:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  return HAL_OK;
 80038e8:	4620      	mov	r0, r4
}
 80038ea:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80038ec:	2001      	movs	r0, #1
}
 80038ee:	4770      	bx	lr

080038f0 <HAL_DMA_Abort>:
{
 80038f0:	b570      	push	{r4, r5, r6, lr}
 80038f2:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038f4:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 80038f6:	f7ff fe99 	bl	800362c <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038fa:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b02      	cmp	r3, #2
 8003902:	d006      	beq.n	8003912 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003904:	2380      	movs	r3, #128	; 0x80
 8003906:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8003908:	2300      	movs	r3, #0
 800390a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800390e:	2001      	movs	r0, #1
}
 8003910:	bd70      	pop	{r4, r5, r6, pc}
 8003912:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003914:	6822      	ldr	r2, [r4, #0]
 8003916:	6813      	ldr	r3, [r2, #0]
 8003918:	f023 0316 	bic.w	r3, r3, #22
 800391c:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800391e:	6822      	ldr	r2, [r4, #0]
 8003920:	6953      	ldr	r3, [r2, #20]
 8003922:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003926:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003928:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800392a:	b1e3      	cbz	r3, 8003966 <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800392c:	6822      	ldr	r2, [r4, #0]
 800392e:	6813      	ldr	r3, [r2, #0]
 8003930:	f023 0308 	bic.w	r3, r3, #8
 8003934:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003936:	6822      	ldr	r2, [r4, #0]
 8003938:	6813      	ldr	r3, [r2, #0]
 800393a:	f023 0301 	bic.w	r3, r3, #1
 800393e:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003940:	6823      	ldr	r3, [r4, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f013 0f01 	tst.w	r3, #1
 8003948:	d011      	beq.n	800396e <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800394a:	f7ff fe6f 	bl	800362c <HAL_GetTick>
 800394e:	1b43      	subs	r3, r0, r5
 8003950:	2b05      	cmp	r3, #5
 8003952:	d9f5      	bls.n	8003940 <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003954:	2320      	movs	r3, #32
 8003956:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003958:	2003      	movs	r0, #3
 800395a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 800395e:	2300      	movs	r3, #0
 8003960:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8003964:	e7d4      	b.n	8003910 <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003966:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1df      	bne.n	800392c <HAL_DMA_Abort+0x3c>
 800396c:	e7e3      	b.n	8003936 <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800396e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003970:	233f      	movs	r3, #63	; 0x3f
 8003972:	4093      	lsls	r3, r2
 8003974:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8003976:	2301      	movs	r3, #1
 8003978:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 800397c:	2000      	movs	r0, #0
 800397e:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return HAL_OK;
 8003982:	e7c5      	b.n	8003910 <HAL_DMA_Abort+0x20>

08003984 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003984:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b02      	cmp	r3, #2
 800398c:	d003      	beq.n	8003996 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800398e:	2380      	movs	r3, #128	; 0x80
 8003990:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8003992:	2001      	movs	r0, #1
 8003994:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8003996:	2305      	movs	r3, #5
 8003998:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800399c:	6802      	ldr	r2, [r0, #0]
 800399e:	6813      	ldr	r3, [r2, #0]
 80039a0:	f023 0301 	bic.w	r3, r3, #1
 80039a4:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80039a6:	2000      	movs	r0, #0
}
 80039a8:	4770      	bx	lr

080039aa <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80039aa:	b430      	push	{r4, r5}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80039ac:	6805      	ldr	r5, [r0, #0]
 80039ae:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 80039b0:	f004 4c40 	and.w	ip, r4, #3221225472	; 0xc0000000
 80039b4:	9c02      	ldr	r4, [sp, #8]
 80039b6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80039ba:	ea4c 0404 	orr.w	r4, ip, r4
 80039be:	646c      	str	r4, [r5, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80039c0:	6803      	ldr	r3, [r0, #0]
 80039c2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80039c4:	6843      	ldr	r3, [r0, #4]
 80039c6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039ca:	d003      	beq.n	80039d4 <DMA2D_SetConfig+0x2a>
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80039cc:	6803      	ldr	r3, [r0, #0]
 80039ce:	60d9      	str	r1, [r3, #12]
  }
}
 80039d0:	bc30      	pop	{r4, r5}
 80039d2:	4770      	bx	lr
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80039d4:	f001 4c7f 	and.w	ip, r1, #4278190080	; 0xff000000
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80039d8:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80039dc:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80039e0:	b2ca      	uxtb	r2, r1
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80039e2:	6884      	ldr	r4, [r0, #8]
 80039e4:	b19c      	cbz	r4, 8003a0e <DMA2D_SetConfig+0x64>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80039e6:	2c01      	cmp	r4, #1
 80039e8:	d00f      	beq.n	8003a0a <DMA2D_SetConfig+0x60>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80039ea:	2c02      	cmp	r4, #2
 80039ec:	d012      	beq.n	8003a14 <DMA2D_SetConfig+0x6a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80039ee:	2c03      	cmp	r4, #3
 80039f0:	d018      	beq.n	8003a24 <DMA2D_SetConfig+0x7a>
      tmp1 = (tmp1 >> 28U);
 80039f2:	ea4f 7c1c 	mov.w	ip, ip, lsr #28
      tmp2 = (tmp2 >> 20U);
 80039f6:	0d1b      	lsrs	r3, r3, #20
      tmp3 = (tmp3 >> 12U);
 80039f8:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80039fa:	021b      	lsls	r3, r3, #8
 80039fc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8003a00:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
 8003a04:	ea43 1112 	orr.w	r1, r3, r2, lsr #4
 8003a08:	e001      	b.n	8003a0e <DMA2D_SetConfig+0x64>
      tmp = (tmp3 | tmp2 | tmp4);
 8003a0a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003a0e:	6803      	ldr	r3, [r0, #0]
 8003a10:	6399      	str	r1, [r3, #56]	; 0x38
 8003a12:	e7dd      	b.n	80039d0 <DMA2D_SetConfig+0x26>
      tmp2 = (tmp2 >> 19U);
 8003a14:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 10U);
 8003a16:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003a18:	02db      	lsls	r3, r3, #11
 8003a1a:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8003a1e:	ea43 01d2 	orr.w	r1, r3, r2, lsr #3
 8003a22:	e7f4      	b.n	8003a0e <DMA2D_SetConfig+0x64>
      tmp1 = (tmp1 >> 31U);
 8003a24:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
      tmp2 = (tmp2 >> 19U);
 8003a28:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 8003a2a:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003a2c:	029b      	lsls	r3, r3, #10
 8003a2e:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8003a32:	ea43 33cc 	orr.w	r3, r3, ip, lsl #15
 8003a36:	ea43 01d2 	orr.w	r1, r3, r2, lsr #3
 8003a3a:	e7e8      	b.n	8003a0e <DMA2D_SetConfig+0x64>

08003a3c <HAL_DMA2D_MspInit>:
}
 8003a3c:	4770      	bx	lr
	...

08003a40 <HAL_DMA2D_Init>:
  if (hdma2d == NULL)
 8003a40:	2800      	cmp	r0, #0
 8003a42:	d032      	beq.n	8003aaa <HAL_DMA2D_Init+0x6a>
{
 8003a44:	b510      	push	{r4, lr}
 8003a46:	4604      	mov	r4, r0
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003a48:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8003a4c:	b343      	cbz	r3, 8003aa0 <HAL_DMA2D_Init+0x60>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003a4e:	2302      	movs	r3, #2
 8003a50:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003a54:	6822      	ldr	r2, [r4, #0]
 8003a56:	6813      	ldr	r3, [r2, #0]
 8003a58:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003a5c:	6861      	ldr	r1, [r4, #4]
 8003a5e:	430b      	orrs	r3, r1
 8003a60:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003a62:	6822      	ldr	r2, [r4, #0]
 8003a64:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003a66:	f023 0307 	bic.w	r3, r3, #7
 8003a6a:	68a1      	ldr	r1, [r4, #8]
 8003a6c:	430b      	orrs	r3, r1
 8003a6e:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003a70:	6822      	ldr	r2, [r4, #0]
 8003a72:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8003a74:	4b0e      	ldr	r3, [pc, #56]	; (8003ab0 <HAL_DMA2D_Init+0x70>)
 8003a76:	400b      	ands	r3, r1
 8003a78:	68e1      	ldr	r1, [r4, #12]
 8003a7a:	430b      	orrs	r3, r1
 8003a7c:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8003a7e:	6821      	ldr	r1, [r4, #0]
 8003a80:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8003a82:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003a86:	6920      	ldr	r0, [r4, #16]
 8003a88:	6962      	ldr	r2, [r4, #20]
 8003a8a:	0552      	lsls	r2, r2, #21
 8003a8c:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
 8003a90:	4313      	orrs	r3, r2
 8003a92:	634b      	str	r3, [r1, #52]	; 0x34
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003a94:	2000      	movs	r0, #0
 8003a96:	6560      	str	r0, [r4, #84]	; 0x54
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8003a9e:	bd10      	pop	{r4, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8003aa0:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_DMA2D_MspInit(hdma2d);
 8003aa4:	f7ff ffca 	bl	8003a3c <HAL_DMA2D_MspInit>
 8003aa8:	e7d1      	b.n	8003a4e <HAL_DMA2D_Init+0xe>
    return HAL_ERROR;
 8003aaa:	2001      	movs	r0, #1
}
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	ffffc000 	.word	0xffffc000

08003ab4 <HAL_DMA2D_Start>:
{
 8003ab4:	b510      	push	{r4, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	4604      	mov	r4, r0
  __HAL_LOCK(hdma2d);
 8003aba:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 8003abe:	2801      	cmp	r0, #1
 8003ac0:	d012      	beq.n	8003ae8 <HAL_DMA2D_Start+0x34>
 8003ac2:	2001      	movs	r0, #1
 8003ac4:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003ac8:	2002      	movs	r0, #2
 8003aca:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003ace:	9804      	ldr	r0, [sp, #16]
 8003ad0:	9000      	str	r0, [sp, #0]
 8003ad2:	4620      	mov	r0, r4
 8003ad4:	f7ff ff69 	bl	80039aa <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8003ad8:	6822      	ldr	r2, [r4, #0]
 8003ada:	6813      	ldr	r3, [r2, #0]
 8003adc:	f043 0301 	orr.w	r3, r3, #1
 8003ae0:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8003ae2:	2000      	movs	r0, #0
}
 8003ae4:	b002      	add	sp, #8
 8003ae6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdma2d);
 8003ae8:	2002      	movs	r0, #2
 8003aea:	e7fb      	b.n	8003ae4 <HAL_DMA2D_Start+0x30>

08003aec <HAL_DMA2D_PollForTransfer>:
{
 8003aec:	b570      	push	{r4, r5, r6, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	4604      	mov	r4, r0
 8003af2:	460d      	mov	r5, r1
  __IO uint32_t isrflags = 0x0U;
 8003af4:	2300      	movs	r3, #0
 8003af6:	9301      	str	r3, [sp, #4]
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003af8:	6803      	ldr	r3, [r0, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f013 0f01 	tst.w	r3, #1
 8003b00:	d111      	bne.n	8003b26 <HAL_DMA2D_PollForTransfer+0x3a>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003b02:	6822      	ldr	r2, [r4, #0]
 8003b04:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003b06:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b08:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 8003b0a:	f013 0f20 	tst.w	r3, #32
 8003b0e:	d147      	bne.n	8003ba0 <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8003b10:	6823      	ldr	r3, [r4, #0]
 8003b12:	2212      	movs	r2, #18
 8003b14:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003b16:	2301      	movs	r3, #1
 8003b18:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hdma2d);
 8003b1c:	2000      	movs	r0, #0
 8003b1e:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
}
 8003b22:	b002      	add	sp, #8
 8003b24:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8003b26:	f7ff fd81 	bl	800362c <HAL_GetTick>
 8003b2a:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003b2c:	6823      	ldr	r3, [r4, #0]
 8003b2e:	685a      	ldr	r2, [r3, #4]
 8003b30:	f012 0f02 	tst.w	r2, #2
 8003b34:	d1e5      	bne.n	8003b02 <HAL_DMA2D_PollForTransfer+0x16>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003b36:	685a      	ldr	r2, [r3, #4]
 8003b38:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003b3a:	9a01      	ldr	r2, [sp, #4]
 8003b3c:	f012 0f21 	tst.w	r2, #33	; 0x21
 8003b40:	d114      	bne.n	8003b6c <HAL_DMA2D_PollForTransfer+0x80>
      if (Timeout != HAL_MAX_DELAY)
 8003b42:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003b46:	d0f1      	beq.n	8003b2c <HAL_DMA2D_PollForTransfer+0x40>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b48:	f7ff fd70 	bl	800362c <HAL_GetTick>
 8003b4c:	1b80      	subs	r0, r0, r6
 8003b4e:	42a8      	cmp	r0, r5
 8003b50:	d801      	bhi.n	8003b56 <HAL_DMA2D_PollForTransfer+0x6a>
 8003b52:	2d00      	cmp	r5, #0
 8003b54:	d1ea      	bne.n	8003b2c <HAL_DMA2D_PollForTransfer+0x40>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003b56:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003b58:	f043 0320 	orr.w	r3, r3, #32
 8003b5c:	6563      	str	r3, [r4, #84]	; 0x54
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003b5e:	2003      	movs	r0, #3
 8003b60:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
          __HAL_UNLOCK(hdma2d);
 8003b64:	2300      	movs	r3, #0
 8003b66:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
          return HAL_TIMEOUT;
 8003b6a:	e7da      	b.n	8003b22 <HAL_DMA2D_PollForTransfer+0x36>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003b6c:	9a01      	ldr	r2, [sp, #4]
 8003b6e:	f012 0f20 	tst.w	r2, #32
 8003b72:	d003      	beq.n	8003b7c <HAL_DMA2D_PollForTransfer+0x90>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003b74:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003b76:	f042 0202 	orr.w	r2, r2, #2
 8003b7a:	6562      	str	r2, [r4, #84]	; 0x54
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003b7c:	9a01      	ldr	r2, [sp, #4]
 8003b7e:	f012 0f01 	tst.w	r2, #1
 8003b82:	d003      	beq.n	8003b8c <HAL_DMA2D_PollForTransfer+0xa0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003b84:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003b86:	f042 0201 	orr.w	r2, r2, #1
 8003b8a:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003b8c:	2221      	movs	r2, #33	; 0x21
 8003b8e:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003b90:	2304      	movs	r3, #4
 8003b92:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hdma2d);
 8003b96:	2300      	movs	r3, #0
 8003b98:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        return HAL_ERROR;
 8003b9c:	2001      	movs	r0, #1
 8003b9e:	e7c0      	b.n	8003b22 <HAL_DMA2D_PollForTransfer+0x36>
    tickstart = HAL_GetTick();
 8003ba0:	f7ff fd44 	bl	800362c <HAL_GetTick>
 8003ba4:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003ba6:	6823      	ldr	r3, [r4, #0]
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	f012 0f10 	tst.w	r2, #16
 8003bae:	d1af      	bne.n	8003b10 <HAL_DMA2D_PollForTransfer+0x24>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003bb0:	685a      	ldr	r2, [r3, #4]
 8003bb2:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003bb4:	9a01      	ldr	r2, [sp, #4]
 8003bb6:	f012 0f29 	tst.w	r2, #41	; 0x29
 8003bba:	d114      	bne.n	8003be6 <HAL_DMA2D_PollForTransfer+0xfa>
      if (Timeout != HAL_MAX_DELAY)
 8003bbc:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003bc0:	d0f1      	beq.n	8003ba6 <HAL_DMA2D_PollForTransfer+0xba>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003bc2:	f7ff fd33 	bl	800362c <HAL_GetTick>
 8003bc6:	1b80      	subs	r0, r0, r6
 8003bc8:	42a8      	cmp	r0, r5
 8003bca:	d801      	bhi.n	8003bd0 <HAL_DMA2D_PollForTransfer+0xe4>
 8003bcc:	2d00      	cmp	r5, #0
 8003bce:	d1ea      	bne.n	8003ba6 <HAL_DMA2D_PollForTransfer+0xba>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003bd0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003bd2:	f043 0320 	orr.w	r3, r3, #32
 8003bd6:	6563      	str	r3, [r4, #84]	; 0x54
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003bd8:	2003      	movs	r0, #3
 8003bda:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
          __HAL_UNLOCK(hdma2d);
 8003bde:	2300      	movs	r3, #0
 8003be0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
          return HAL_TIMEOUT;
 8003be4:	e79d      	b.n	8003b22 <HAL_DMA2D_PollForTransfer+0x36>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003be6:	9a01      	ldr	r2, [sp, #4]
 8003be8:	f012 0f08 	tst.w	r2, #8
 8003bec:	d003      	beq.n	8003bf6 <HAL_DMA2D_PollForTransfer+0x10a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003bee:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003bf0:	f042 0204 	orr.w	r2, r2, #4
 8003bf4:	6562      	str	r2, [r4, #84]	; 0x54
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003bf6:	9a01      	ldr	r2, [sp, #4]
 8003bf8:	f012 0f20 	tst.w	r2, #32
 8003bfc:	d003      	beq.n	8003c06 <HAL_DMA2D_PollForTransfer+0x11a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003bfe:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003c00:	f042 0202 	orr.w	r2, r2, #2
 8003c04:	6562      	str	r2, [r4, #84]	; 0x54
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003c06:	9a01      	ldr	r2, [sp, #4]
 8003c08:	f012 0f01 	tst.w	r2, #1
 8003c0c:	d003      	beq.n	8003c16 <HAL_DMA2D_PollForTransfer+0x12a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003c0e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003c10:	f042 0201 	orr.w	r2, r2, #1
 8003c14:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003c16:	2229      	movs	r2, #41	; 0x29
 8003c18:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003c1a:	2304      	movs	r3, #4
 8003c1c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hdma2d);
 8003c20:	2300      	movs	r3, #0
 8003c22:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        return HAL_ERROR;
 8003c26:	2001      	movs	r0, #1
 8003c28:	e77b      	b.n	8003b22 <HAL_DMA2D_PollForTransfer+0x36>
	...

08003c2c <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 8003c2c:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8003c30:	2a01      	cmp	r2, #1
 8003c32:	d067      	beq.n	8003d04 <HAL_DMA2D_ConfigLayer+0xd8>
{
 8003c34:	b430      	push	{r4, r5}
 8003c36:	4603      	mov	r3, r0
  __HAL_LOCK(hdma2d);
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003c3e:	2202      	movs	r2, #2
 8003c40:	f880 2051 	strb.w	r2, [r0, #81]	; 0x51
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003c44:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8003c48:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8003c4c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003c4e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003c50:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 8003c54:	6b05      	ldr	r5, [r0, #48]	; 0x30
 8003c56:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003c5a:	6b40      	ldr	r0, [r0, #52]	; 0x34
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003c5c:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003c60:	3c09      	subs	r4, #9
 8003c62:	2c01      	cmp	r4, #1
 8003c64:	d920      	bls.n	8003ca8 <HAL_DMA2D_ConfigLayer+0x7c>
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003c66:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8003c6a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8003c6e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8003c70:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003c74:	bb59      	cbnz	r1, 8003cce <HAL_DMA2D_ConfigLayer+0xa2>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003c76:	681c      	ldr	r4, [r3, #0]
 8003c78:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003c7a:	4823      	ldr	r0, [pc, #140]	; (8003d08 <HAL_DMA2D_ConfigLayer+0xdc>)
 8003c7c:	4028      	ands	r0, r5
 8003c7e:	4310      	orrs	r0, r2
 8003c80:	6260      	str	r0, [r4, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003c82:	6818      	ldr	r0, [r3, #0]
 8003c84:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8003c88:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8003c8c:	6a14      	ldr	r4, [r2, #32]
 8003c8e:	6184      	str	r4, [r0, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003c90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c92:	3a09      	subs	r2, #9
 8003c94:	2a01      	cmp	r2, #1
 8003c96:	d910      	bls.n	8003cba <HAL_DMA2D_ConfigLayer+0x8e>
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hdma2d);
 8003c9e:	2000      	movs	r0, #0
 8003ca0:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
}
 8003ca4:	bc30      	pop	{r4, r5}
 8003ca6:	4770      	bx	lr
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003ca8:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8003cac:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8003cb0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8003cb2:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
 8003cb6:	4302      	orrs	r2, r0
 8003cb8:	e7dc      	b.n	8003c74 <HAL_DMA2D_ConfigLayer+0x48>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003cba:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8003cbe:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8003cc2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003cc4:	6819      	ldr	r1, [r3, #0]
 8003cc6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003cca:	628a      	str	r2, [r1, #40]	; 0x28
 8003ccc:	e7e4      	b.n	8003c98 <HAL_DMA2D_ConfigLayer+0x6c>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003cce:	681c      	ldr	r4, [r3, #0]
 8003cd0:	69e5      	ldr	r5, [r4, #28]
 8003cd2:	480d      	ldr	r0, [pc, #52]	; (8003d08 <HAL_DMA2D_ConfigLayer+0xdc>)
 8003cd4:	4028      	ands	r0, r5
 8003cd6:	4310      	orrs	r0, r2
 8003cd8:	61e0      	str	r0, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003cda:	6818      	ldr	r0, [r3, #0]
 8003cdc:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8003ce0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8003ce4:	6a14      	ldr	r4, [r2, #32]
 8003ce6:	6104      	str	r4, [r0, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003ce8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cea:	3a09      	subs	r2, #9
 8003cec:	2a01      	cmp	r2, #1
 8003cee:	d8d3      	bhi.n	8003c98 <HAL_DMA2D_ConfigLayer+0x6c>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003cf0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8003cf4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8003cf8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003cfa:	6819      	ldr	r1, [r3, #0]
 8003cfc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003d00:	620a      	str	r2, [r1, #32]
 8003d02:	e7c9      	b.n	8003c98 <HAL_DMA2D_ConfigLayer+0x6c>
  __HAL_LOCK(hdma2d);
 8003d04:	2002      	movs	r0, #2
}
 8003d06:	4770      	bx	lr
 8003d08:	00ccfff0 	.word	0x00ccfff0

08003d0c <DSI_ConfigPacketHeader>:
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8003d0c:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8003d10:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003d14:	9b00      	ldr	r3, [sp, #0]
 8003d16:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003d1a:	66c2      	str	r2, [r0, #108]	; 0x6c
}
 8003d1c:	4770      	bx	lr

08003d1e <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8003d1e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d22:	4605      	mov	r5, r0
 8003d24:	4689      	mov	r9, r1
 8003d26:	4617      	mov	r7, r2
 8003d28:	4698      	mov	r8, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d2a:	f7ff fc7f 	bl	800362c <HAL_GetTick>
 8003d2e:	4606      	mov	r6, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003d30:	682c      	ldr	r4, [r5, #0]
 8003d32:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8003d34:	f013 0f01 	tst.w	r3, #1
 8003d38:	d107      	bne.n	8003d4a <DSI_ShortWrite+0x2c>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003d3a:	f7ff fc77 	bl	800362c <HAL_GetTick>
 8003d3e:	1b80      	subs	r0, r0, r6
 8003d40:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003d44:	d9f4      	bls.n	8003d30 <DSI_ShortWrite+0x12>
    {
      return HAL_TIMEOUT;
 8003d46:	2003      	movs	r0, #3
 8003d48:	e008      	b.n	8003d5c <DSI_ShortWrite+0x3e>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8003d4a:	ea47 1389 	orr.w	r3, r7, r9, lsl #6
 8003d4e:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
 8003d52:	9a08      	ldr	r2, [sp, #32]
 8003d54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003d58:	66e3      	str	r3, [r4, #108]	; 0x6c

  return HAL_OK;
 8003d5a:	2000      	movs	r0, #0
}
 8003d5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003d60 <HAL_DSI_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 8003d60:	4770      	bx	lr
	...

08003d64 <HAL_DSI_Init>:
  if (hdsi == NULL)
 8003d64:	2800      	cmp	r0, #0
 8003d66:	f000 80bd 	beq.w	8003ee4 <HAL_DSI_Init+0x180>
{
 8003d6a:	b570      	push	{r4, r5, r6, lr}
 8003d6c:	b082      	sub	sp, #8
 8003d6e:	460d      	mov	r5, r1
 8003d70:	4604      	mov	r4, r0
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8003d72:	7c43      	ldrb	r3, [r0, #17]
 8003d74:	b31b      	cbz	r3, 8003dbe <HAL_DSI_Init+0x5a>
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003d76:	2303      	movs	r3, #3
 8003d78:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	6822      	ldr	r2, [r4, #0]
 8003d80:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8003d84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d88:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
 8003d8c:	6823      	ldr	r3, [r4, #0]
 8003d8e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003d92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 8003d9a:	f7ff fc47 	bl	800362c <HAL_GetTick>
 8003d9e:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003da0:	6823      	ldr	r3, [r4, #0]
 8003da2:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8003da6:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8003daa:	d10b      	bne.n	8003dc4 <HAL_DSI_Init+0x60>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003dac:	f7ff fc3e 	bl	800362c <HAL_GetTick>
 8003db0:	1b80      	subs	r0, r0, r6
 8003db2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003db6:	d9f3      	bls.n	8003da0 <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 8003db8:	2003      	movs	r0, #3
}
 8003dba:	b002      	add	sp, #8
 8003dbc:	bd70      	pop	{r4, r5, r6, pc}
    HAL_DSI_MspInit(hdsi);
 8003dbe:	f7ff ffcf 	bl	8003d60 <HAL_DSI_MspInit>
 8003dc2:	e7d8      	b.n	8003d76 <HAL_DSI_Init+0x12>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8003dc4:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003dc8:	4a47      	ldr	r2, [pc, #284]	; (8003ee8 <HAL_DSI_Init+0x184>)
 8003dca:	400a      	ands	r2, r1
 8003dcc:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003dd0:	6821      	ldr	r1, [r4, #0]
 8003dd2:	f8d1 2430 	ldr.w	r2, [r1, #1072]	; 0x430
 8003dd6:	6828      	ldr	r0, [r5, #0]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8003dd8:	686b      	ldr	r3, [r5, #4]
 8003dda:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003ddc:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8003de0:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8003de2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003de6:	4313      	orrs	r3, r2
 8003de8:	f8c1 3430 	str.w	r3, [r1, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 8003dec:	2300      	movs	r3, #0
 8003dee:	9301      	str	r3, [sp, #4]
 8003df0:	6822      	ldr	r2, [r4, #0]
 8003df2:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8003df6:	f043 0301 	orr.w	r3, r3, #1
 8003dfa:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
 8003dfe:	6823      	ldr	r3, [r4, #0]
 8003e00:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003e04:	f003 0301 	and.w	r3, r3, #1
 8003e08:	9301      	str	r3, [sp, #4]
 8003e0a:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 8003e0c:	2001      	movs	r0, #1
 8003e0e:	f7fe ffd9 	bl	8002dc4 <HAL_Delay>
  tickstart = HAL_GetTick();
 8003e12:	f7ff fc0b 	bl	800362c <HAL_GetTick>
 8003e16:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003e18:	6823      	ldr	r3, [r4, #0]
 8003e1a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8003e1e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003e22:	d107      	bne.n	8003e34 <HAL_DSI_Init+0xd0>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003e24:	f7ff fc02 	bl	800362c <HAL_GetTick>
 8003e28:	1b80      	subs	r0, r0, r6
 8003e2a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003e2e:	d9f3      	bls.n	8003e18 <HAL_DSI_Init+0xb4>
      return HAL_TIMEOUT;
 8003e30:	2003      	movs	r0, #3
 8003e32:	e7c2      	b.n	8003dba <HAL_DSI_Init+0x56>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8003e34:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003e38:	f042 0206 	orr.w	r2, r2, #6
 8003e3c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8003e40:	6822      	ldr	r2, [r4, #0]
 8003e42:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003e46:	f023 0303 	bic.w	r3, r3, #3
 8003e4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8003e4e:	6822      	ldr	r2, [r4, #0]
 8003e50:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003e54:	6861      	ldr	r1, [r4, #4]
 8003e56:	430b      	orrs	r3, r1
 8003e58:	f043 0301 	orr.w	r3, r3, #1
 8003e5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8003e60:	6822      	ldr	r2, [r4, #0]
 8003e62:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 8003e66:	f023 0303 	bic.w	r3, r3, #3
 8003e6a:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8003e6e:	6822      	ldr	r2, [r4, #0]
 8003e70:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 8003e74:	68e1      	ldr	r1, [r4, #12]
 8003e76:	430b      	orrs	r3, r1
 8003e78:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8003e7c:	6822      	ldr	r2, [r4, #0]
 8003e7e:	6893      	ldr	r3, [r2, #8]
 8003e80:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e84:	6093      	str	r3, [r2, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8003e86:	6822      	ldr	r2, [r4, #0]
 8003e88:	6893      	ldr	r3, [r2, #8]
 8003e8a:	68a1      	ldr	r1, [r4, #8]
 8003e8c:	430b      	orrs	r3, r1
 8003e8e:	6093      	str	r3, [r2, #8]
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8003e90:	686b      	ldr	r3, [r5, #4]
 8003e92:	b903      	cbnz	r3, 8003e96 <HAL_DSI_Init+0x132>
 8003e94:	2301      	movs	r3, #1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8003e96:	4a15      	ldr	r2, [pc, #84]	; (8003eec <HAL_DSI_Init+0x188>)
 8003e98:	fb02 f303 	mul.w	r3, r2, r3
 8003e9c:	68aa      	ldr	r2, [r5, #8]
 8003e9e:	f002 0203 	and.w	r2, r2, #3
 8003ea2:	4093      	lsls	r3, r2
 8003ea4:	682a      	ldr	r2, [r5, #0]
 8003ea6:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8003eaa:	fb01 f202 	mul.w	r2, r1, r2
 8003eae:	fbb3 f3f2 	udiv	r3, r3, r2
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8003eb2:	6821      	ldr	r1, [r4, #0]
 8003eb4:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
 8003eb8:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003ebc:	f8c1 2418 	str.w	r2, [r1, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8003ec0:	6821      	ldr	r1, [r4, #0]
 8003ec2:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	f8c1 3418 	str.w	r3, [r1, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 8003ecc:	6823      	ldr	r3, [r4, #0]
 8003ece:	2000      	movs	r0, #0
 8003ed0:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003ed4:	6823      	ldr	r3, [r4, #0]
 8003ed6:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8003eda:	61a0      	str	r0, [r4, #24]
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8003edc:	6160      	str	r0, [r4, #20]
  hdsi->State = HAL_DSI_STATE_READY;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	7463      	strb	r3, [r4, #17]
  return HAL_OK;
 8003ee2:	e76a      	b.n	8003dba <HAL_DSI_Init+0x56>
    return HAL_ERROR;
 8003ee4:	2001      	movs	r0, #1
}
 8003ee6:	4770      	bx	lr
 8003ee8:	fffc8603 	.word	0xfffc8603
 8003eec:	003d0900 	.word	0x003d0900

08003ef0 <HAL_DSI_MspDeInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspDeInit could be implemented in the user file
   */
}
 8003ef0:	4770      	bx	lr

08003ef2 <HAL_DSI_DeInit>:
  if (hdsi == NULL)
 8003ef2:	2800      	cmp	r0, #0
 8003ef4:	d04a      	beq.n	8003f8c <HAL_DSI_DeInit+0x9a>
{
 8003ef6:	b530      	push	{r4, r5, lr}
 8003ef8:	b085      	sub	sp, #20
 8003efa:	4604      	mov	r4, r0
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003efc:	2303      	movs	r3, #3
 8003efe:	7443      	strb	r3, [r0, #17]
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8003f00:	2500      	movs	r5, #0
 8003f02:	9500      	str	r5, [sp, #0]
 8003f04:	6802      	ldr	r2, [r0, #0]
 8003f06:	f8d2 3404 	ldr.w	r3, [r2, #1028]	; 0x404
 8003f0a:	f023 0308 	bic.w	r3, r3, #8
 8003f0e:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
 8003f12:	6803      	ldr	r3, [r0, #0]
 8003f14:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8003f18:	f002 0208 	and.w	r2, r2, #8
 8003f1c:	9200      	str	r2, [sp, #0]
 8003f1e:	9a00      	ldr	r2, [sp, #0]
  __HAL_DSI_DISABLE(hdsi);
 8003f20:	9501      	str	r5, [sp, #4]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	f022 0201 	bic.w	r2, r2, #1
 8003f28:	605a      	str	r2, [r3, #4]
 8003f2a:	6803      	ldr	r3, [r0, #0]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	f002 0201 	and.w	r2, r2, #1
 8003f32:	9201      	str	r2, [sp, #4]
 8003f34:	9a01      	ldr	r2, [sp, #4]
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8003f36:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003f3a:	f022 0206 	bic.w	r2, r2, #6
 8003f3e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  __HAL_DSI_PLL_DISABLE(hdsi);
 8003f42:	9502      	str	r5, [sp, #8]
 8003f44:	6802      	ldr	r2, [r0, #0]
 8003f46:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8003f4a:	f023 0301 	bic.w	r3, r3, #1
 8003f4e:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
 8003f52:	6803      	ldr	r3, [r0, #0]
 8003f54:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003f58:	f002 0201 	and.w	r2, r2, #1
 8003f5c:	9202      	str	r2, [sp, #8]
 8003f5e:	9a02      	ldr	r2, [sp, #8]
  __HAL_DSI_REG_DISABLE(hdsi);
 8003f60:	9503      	str	r5, [sp, #12]
 8003f62:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003f66:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003f6a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003f6e:	6803      	ldr	r3, [r0, #0]
 8003f70:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003f74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f78:	9303      	str	r3, [sp, #12]
 8003f7a:	9b03      	ldr	r3, [sp, #12]
  HAL_DSI_MspDeInit(hdsi);
 8003f7c:	f7ff ffb8 	bl	8003ef0 <HAL_DSI_MspDeInit>
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8003f80:	6165      	str	r5, [r4, #20]
  hdsi->State = HAL_DSI_STATE_RESET;
 8003f82:	7465      	strb	r5, [r4, #17]
  __HAL_UNLOCK(hdsi);
 8003f84:	7425      	strb	r5, [r4, #16]
  return HAL_OK;
 8003f86:	4628      	mov	r0, r5
}
 8003f88:	b005      	add	sp, #20
 8003f8a:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8003f8c:	2001      	movs	r0, #1
}
 8003f8e:	4770      	bx	lr

08003f90 <HAL_DSI_ConfigVideoMode>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003f90:	7c02      	ldrb	r2, [r0, #16]
 8003f92:	2a01      	cmp	r2, #1
 8003f94:	f000 8123 	beq.w	80041de <HAL_DSI_ConfigVideoMode+0x24e>
{
 8003f98:	b430      	push	{r4, r5}
 8003f9a:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	7402      	strb	r2, [r0, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8003fa0:	6800      	ldr	r0, [r0, #0]
 8003fa2:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8003fa4:	f022 0201 	bic.w	r2, r2, #1
 8003fa8:	6342      	str	r2, [r0, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8003faa:	6818      	ldr	r0, [r3, #0]
 8003fac:	f8d0 2400 	ldr.w	r2, [r0, #1024]	; 0x400
 8003fb0:	f022 0201 	bic.w	r2, r2, #1
 8003fb4:	f8c0 2400 	str.w	r2, [r0, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8003fb8:	6818      	ldr	r0, [r3, #0]
 8003fba:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8003fbc:	f022 0203 	bic.w	r2, r2, #3
 8003fc0:	6382      	str	r2, [r0, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8003fc2:	6818      	ldr	r0, [r3, #0]
 8003fc4:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8003fc6:	68cc      	ldr	r4, [r1, #12]
 8003fc8:	4322      	orrs	r2, r4
 8003fca:	6382      	str	r2, [r0, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8003fcc:	6818      	ldr	r0, [r3, #0]
 8003fce:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003fd0:	4a84      	ldr	r2, [pc, #528]	; (80041e4 <HAL_DSI_ConfigVideoMode+0x254>)
 8003fd2:	4022      	ands	r2, r4
 8003fd4:	63c2      	str	r2, [r0, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8003fd6:	6818      	ldr	r0, [r3, #0]
 8003fd8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8003fda:	690c      	ldr	r4, [r1, #16]
 8003fdc:	4322      	orrs	r2, r4
 8003fde:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8003fe0:	6818      	ldr	r0, [r3, #0]
 8003fe2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003fe4:	4c80      	ldr	r4, [pc, #512]	; (80041e8 <HAL_DSI_ConfigVideoMode+0x258>)
 8003fe6:	4022      	ands	r2, r4
 8003fe8:	6402      	str	r2, [r0, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8003fea:	6818      	ldr	r0, [r3, #0]
 8003fec:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003fee:	694d      	ldr	r5, [r1, #20]
 8003ff0:	432a      	orrs	r2, r5
 8003ff2:	6402      	str	r2, [r0, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8003ff4:	6818      	ldr	r0, [r3, #0]
 8003ff6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003ff8:	4022      	ands	r2, r4
 8003ffa:	6442      	str	r2, [r0, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8003ffc:	6818      	ldr	r0, [r3, #0]
 8003ffe:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004000:	698c      	ldr	r4, [r1, #24]
 8004002:	4322      	orrs	r2, r4
 8004004:	6442      	str	r2, [r0, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8004006:	6818      	ldr	r0, [r3, #0]
 8004008:	68c2      	ldr	r2, [r0, #12]
 800400a:	f022 0203 	bic.w	r2, r2, #3
 800400e:	60c2      	str	r2, [r0, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8004010:	6818      	ldr	r0, [r3, #0]
 8004012:	68c2      	ldr	r2, [r0, #12]
 8004014:	680c      	ldr	r4, [r1, #0]
 8004016:	4322      	orrs	r2, r4
 8004018:	60c2      	str	r2, [r0, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800401a:	6818      	ldr	r0, [r3, #0]
 800401c:	6942      	ldr	r2, [r0, #20]
 800401e:	f022 0207 	bic.w	r2, r2, #7
 8004022:	6142      	str	r2, [r0, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8004024:	681c      	ldr	r4, [r3, #0]
 8004026:	6960      	ldr	r0, [r4, #20]
 8004028:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 800402a:	6a0d      	ldr	r5, [r1, #32]
 800402c:	432a      	orrs	r2, r5
 800402e:	69cd      	ldr	r5, [r1, #28]
 8004030:	432a      	orrs	r2, r5
 8004032:	4302      	orrs	r2, r0
 8004034:	6162      	str	r2, [r4, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8004036:	6818      	ldr	r0, [r3, #0]
 8004038:	6902      	ldr	r2, [r0, #16]
 800403a:	f022 020f 	bic.w	r2, r2, #15
 800403e:	6102      	str	r2, [r0, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8004040:	6818      	ldr	r0, [r3, #0]
 8004042:	6902      	ldr	r2, [r0, #16]
 8004044:	684c      	ldr	r4, [r1, #4]
 8004046:	4322      	orrs	r2, r4
 8004048:	6102      	str	r2, [r0, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800404a:	6818      	ldr	r0, [r3, #0]
 800404c:	f8d0 2400 	ldr.w	r2, [r0, #1024]	; 0x400
 8004050:	f022 020e 	bic.w	r2, r2, #14
 8004054:	f8c0 2400 	str.w	r2, [r0, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8004058:	6818      	ldr	r0, [r3, #0]
 800405a:	f8d0 2400 	ldr.w	r2, [r0, #1024]	; 0x400
 800405e:	684c      	ldr	r4, [r1, #4]
 8004060:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8004064:	f8c0 2400 	str.w	r2, [r0, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8004068:	684a      	ldr	r2, [r1, #4]
 800406a:	2a03      	cmp	r2, #3
 800406c:	f000 80ac 	beq.w	80041c8 <HAL_DSI_ConfigVideoMode+0x238>
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8004070:	6818      	ldr	r0, [r3, #0]
 8004072:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8004074:	4c5d      	ldr	r4, [pc, #372]	; (80041ec <HAL_DSI_ConfigVideoMode+0x25c>)
 8004076:	4022      	ands	r2, r4
 8004078:	6482      	str	r2, [r0, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 800407a:	6818      	ldr	r0, [r3, #0]
 800407c:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800407e:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8004080:	432a      	orrs	r2, r5
 8004082:	6482      	str	r2, [r0, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8004084:	6818      	ldr	r0, [r3, #0]
 8004086:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8004088:	4022      	ands	r2, r4
 800408a:	64c2      	str	r2, [r0, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800408c:	6818      	ldr	r0, [r3, #0]
 800408e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8004090:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8004092:	4322      	orrs	r2, r4
 8004094:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8004096:	6818      	ldr	r0, [r3, #0]
 8004098:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800409a:	4a55      	ldr	r2, [pc, #340]	; (80041f0 <HAL_DSI_ConfigVideoMode+0x260>)
 800409c:	4022      	ands	r2, r4
 800409e:	6502      	str	r2, [r0, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 80040a0:	6818      	ldr	r0, [r3, #0]
 80040a2:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80040a4:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 80040a6:	4322      	orrs	r2, r4
 80040a8:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 80040aa:	681c      	ldr	r4, [r3, #0]
 80040ac:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80040ae:	4851      	ldr	r0, [pc, #324]	; (80041f4 <HAL_DSI_ConfigVideoMode+0x264>)
 80040b0:	4002      	ands	r2, r0
 80040b2:	6562      	str	r2, [r4, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 80040b4:	681c      	ldr	r4, [r3, #0]
 80040b6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80040b8:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 80040ba:	432a      	orrs	r2, r5
 80040bc:	6562      	str	r2, [r4, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 80040be:	681c      	ldr	r4, [r3, #0]
 80040c0:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80040c2:	4002      	ands	r2, r0
 80040c4:	65a2      	str	r2, [r4, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 80040c6:	681c      	ldr	r4, [r3, #0]
 80040c8:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80040ca:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 80040cc:	432a      	orrs	r2, r5
 80040ce:	65a2      	str	r2, [r4, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 80040d0:	681c      	ldr	r4, [r3, #0]
 80040d2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80040d4:	4002      	ands	r2, r0
 80040d6:	65e2      	str	r2, [r4, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 80040d8:	6818      	ldr	r0, [r3, #0]
 80040da:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80040dc:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 80040de:	4322      	orrs	r2, r4
 80040e0:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 80040e2:	6818      	ldr	r0, [r3, #0]
 80040e4:	6e04      	ldr	r4, [r0, #96]	; 0x60
 80040e6:	4a3f      	ldr	r2, [pc, #252]	; (80041e4 <HAL_DSI_ConfigVideoMode+0x254>)
 80040e8:	4022      	ands	r2, r4
 80040ea:	6602      	str	r2, [r0, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 80040ec:	6818      	ldr	r0, [r3, #0]
 80040ee:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80040f0:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 80040f2:	4322      	orrs	r2, r4
 80040f4:	6602      	str	r2, [r0, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 80040f6:	6818      	ldr	r0, [r3, #0]
 80040f8:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80040fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040fe:	6382      	str	r2, [r0, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8004100:	6818      	ldr	r0, [r3, #0]
 8004102:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004104:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 8004106:	4322      	orrs	r2, r4
 8004108:	6382      	str	r2, [r0, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 800410a:	6818      	ldr	r0, [r3, #0]
 800410c:	6982      	ldr	r2, [r0, #24]
 800410e:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8004112:	6182      	str	r2, [r0, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8004114:	6818      	ldr	r0, [r3, #0]
 8004116:	6982      	ldr	r2, [r0, #24]
 8004118:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 800411a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800411e:	6182      	str	r2, [r0, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8004120:	6818      	ldr	r0, [r3, #0]
 8004122:	6982      	ldr	r2, [r0, #24]
 8004124:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004128:	6182      	str	r2, [r0, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 800412a:	6818      	ldr	r0, [r3, #0]
 800412c:	6982      	ldr	r2, [r0, #24]
 800412e:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8004130:	4322      	orrs	r2, r4
 8004132:	6182      	str	r2, [r0, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8004134:	6818      	ldr	r0, [r3, #0]
 8004136:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004138:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800413c:	6382      	str	r2, [r0, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800413e:	6818      	ldr	r0, [r3, #0]
 8004140:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004142:	6d0c      	ldr	r4, [r1, #80]	; 0x50
 8004144:	4322      	orrs	r2, r4
 8004146:	6382      	str	r2, [r0, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8004148:	6818      	ldr	r0, [r3, #0]
 800414a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800414c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004150:	6382      	str	r2, [r0, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8004152:	6818      	ldr	r0, [r3, #0]
 8004154:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004156:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8004158:	4322      	orrs	r2, r4
 800415a:	6382      	str	r2, [r0, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 800415c:	6818      	ldr	r0, [r3, #0]
 800415e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004160:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004164:	6382      	str	r2, [r0, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8004166:	6818      	ldr	r0, [r3, #0]
 8004168:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800416a:	6d8c      	ldr	r4, [r1, #88]	; 0x58
 800416c:	4322      	orrs	r2, r4
 800416e:	6382      	str	r2, [r0, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8004170:	6818      	ldr	r0, [r3, #0]
 8004172:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004174:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004178:	6382      	str	r2, [r0, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 800417a:	6818      	ldr	r0, [r3, #0]
 800417c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800417e:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
 8004180:	4322      	orrs	r2, r4
 8004182:	6382      	str	r2, [r0, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8004184:	6818      	ldr	r0, [r3, #0]
 8004186:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004188:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800418c:	6382      	str	r2, [r0, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 800418e:	6818      	ldr	r0, [r3, #0]
 8004190:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004192:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 8004194:	4322      	orrs	r2, r4
 8004196:	6382      	str	r2, [r0, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8004198:	6818      	ldr	r0, [r3, #0]
 800419a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800419c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041a0:	6382      	str	r2, [r0, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 80041a2:	6818      	ldr	r0, [r3, #0]
 80041a4:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80041a6:	6e4c      	ldr	r4, [r1, #100]	; 0x64
 80041a8:	4322      	orrs	r2, r4
 80041aa:	6382      	str	r2, [r0, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 80041ac:	6818      	ldr	r0, [r3, #0]
 80041ae:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80041b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80041b4:	6382      	str	r2, [r0, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 80041b6:	6818      	ldr	r0, [r3, #0]
 80041b8:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80041ba:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80041bc:	430a      	orrs	r2, r1
 80041be:	6382      	str	r2, [r0, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80041c0:	2000      	movs	r0, #0
 80041c2:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
}
 80041c4:	bc30      	pop	{r4, r5}
 80041c6:	4770      	bx	lr
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 80041c8:	6818      	ldr	r0, [r3, #0]
 80041ca:	6902      	ldr	r2, [r0, #16]
 80041cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041d0:	6102      	str	r2, [r0, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 80041d2:	6818      	ldr	r0, [r3, #0]
 80041d4:	6902      	ldr	r2, [r0, #16]
 80041d6:	688c      	ldr	r4, [r1, #8]
 80041d8:	4322      	orrs	r2, r4
 80041da:	6102      	str	r2, [r0, #16]
 80041dc:	e748      	b.n	8004070 <HAL_DSI_ConfigVideoMode+0xe0>
  __HAL_LOCK(hdsi);
 80041de:	2002      	movs	r0, #2
}
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	ffffc000 	.word	0xffffc000
 80041e8:	ffffe000 	.word	0xffffe000
 80041ec:	fffff000 	.word	0xfffff000
 80041f0:	ffff8000 	.word	0xffff8000
 80041f4:	fffffc00 	.word	0xfffffc00

080041f8 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80041f8:	7c02      	ldrb	r2, [r0, #16]
 80041fa:	2a01      	cmp	r2, #1
 80041fc:	d021      	beq.n	8004242 <HAL_DSI_Start+0x4a>
{
 80041fe:	b082      	sub	sp, #8
 8004200:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8004202:	2201      	movs	r2, #1
 8004204:	7402      	strb	r2, [r0, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8004206:	2000      	movs	r0, #0
 8004208:	9000      	str	r0, [sp, #0]
 800420a:	6819      	ldr	r1, [r3, #0]
 800420c:	684a      	ldr	r2, [r1, #4]
 800420e:	f042 0201 	orr.w	r2, r2, #1
 8004212:	604a      	str	r2, [r1, #4]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	6851      	ldr	r1, [r2, #4]
 8004218:	f001 0101 	and.w	r1, r1, #1
 800421c:	9100      	str	r1, [sp, #0]
 800421e:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8004220:	9001      	str	r0, [sp, #4]
 8004222:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
 8004226:	f041 0108 	orr.w	r1, r1, #8
 800422a:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 8004234:	f002 0208 	and.w	r2, r2, #8
 8004238:	9201      	str	r2, [sp, #4]
 800423a:	9a01      	ldr	r2, [sp, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800423c:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
}
 800423e:	b002      	add	sp, #8
 8004240:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8004242:	2002      	movs	r0, #2
}
 8004244:	4770      	bx	lr

08004246 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8004246:	b510      	push	{r4, lr}
 8004248:	b082      	sub	sp, #8
 800424a:	4604      	mov	r4, r0
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 800424c:	7c00      	ldrb	r0, [r0, #16]
 800424e:	2801      	cmp	r0, #1
 8004250:	d00a      	beq.n	8004268 <HAL_DSI_ShortWrite+0x22>
 8004252:	2001      	movs	r0, #1
 8004254:	7420      	strb	r0, [r4, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8004256:	9804      	ldr	r0, [sp, #16]
 8004258:	9000      	str	r0, [sp, #0]
 800425a:	4620      	mov	r0, r4
 800425c:	f7ff fd5f 	bl	8003d1e <DSI_ShortWrite>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004260:	2300      	movs	r3, #0
 8004262:	7423      	strb	r3, [r4, #16]

  return status;
}
 8004264:	b002      	add	sp, #8
 8004266:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdsi);
 8004268:	2002      	movs	r0, #2
 800426a:	e7fb      	b.n	8004264 <HAL_DSI_ShortWrite+0x1e>

0800426c <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 800426c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004270:	b082      	sub	sp, #8
 8004272:	461d      	mov	r5, r3
 8004274:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8004276:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800427a:	7c03      	ldrb	r3, [r0, #16]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d053      	beq.n	8004328 <HAL_DSI_LongWrite+0xbc>
 8004280:	4604      	mov	r4, r0
 8004282:	468a      	mov	sl, r1
 8004284:	4617      	mov	r7, r2
 8004286:	2301      	movs	r3, #1
 8004288:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 800428a:	f7ff f9cf 	bl	800362c <HAL_GetTick>
 800428e:	4681      	mov	r9, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004290:	6822      	ldr	r2, [r4, #0]
 8004292:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8004294:	f013 0f01 	tst.w	r3, #1
 8004298:	d10a      	bne.n	80042b0 <HAL_DSI_LongWrite+0x44>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800429a:	f7ff f9c7 	bl	800362c <HAL_GetTick>
 800429e:	eba0 0009 	sub.w	r0, r0, r9
 80042a2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80042a6:	d9f3      	bls.n	8004290 <HAL_DSI_LongWrite+0x24>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 80042a8:	2300      	movs	r3, #0
 80042aa:	7423      	strb	r3, [r4, #16]

      return HAL_TIMEOUT;
 80042ac:	2003      	movs	r0, #3
 80042ae:	e038      	b.n	8004322 <HAL_DSI_LongWrite+0xb6>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 80042b0:	46ac      	mov	ip, r5
 80042b2:	2d03      	cmp	r5, #3
 80042b4:	bf28      	it	cs
 80042b6:	f04f 0c03 	movcs.w	ip, #3

  for (count = 0U; count < nbBytes; count++)
 80042ba:	2300      	movs	r3, #0
 80042bc:	e005      	b.n	80042ca <HAL_DSI_LongWrite+0x5e>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 80042be:	f818 1003 	ldrb.w	r1, [r8, r3]
 80042c2:	3301      	adds	r3, #1
 80042c4:	00d8      	lsls	r0, r3, #3
 80042c6:	4081      	lsls	r1, r0
 80042c8:	430e      	orrs	r6, r1
  for (count = 0U; count < nbBytes; count++)
 80042ca:	4563      	cmp	r3, ip
 80042cc:	d3f7      	bcc.n	80042be <HAL_DSI_LongWrite+0x52>
  }
  hdsi->Instance->GPDR = fifoword;
 80042ce:	6716      	str	r6, [r2, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 80042d0:	eba5 060c 	sub.w	r6, r5, ip
  pparams += nbBytes;
 80042d4:	eb08 000c 	add.w	r0, r8, ip
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 80042d8:	e00f      	b.n	80042fa <HAL_DSI_LongWrite+0x8e>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
    fifoword = 0U;
    for (count = 0U; count < nbBytes; count++)
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80042da:	f810 e00c 	ldrb.w	lr, [r0, ip]
 80042de:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 80042e2:	fa0e fe02 	lsl.w	lr, lr, r2
 80042e6:	ea43 030e 	orr.w	r3, r3, lr
    for (count = 0U; count < nbBytes; count++)
 80042ea:	f10c 0c01 	add.w	ip, ip, #1
 80042ee:	458c      	cmp	ip, r1
 80042f0:	d3f3      	bcc.n	80042da <HAL_DSI_LongWrite+0x6e>
    }
    hdsi->Instance->GPDR = fifoword;
 80042f2:	6822      	ldr	r2, [r4, #0]
 80042f4:	6713      	str	r3, [r2, #112]	; 0x70

    uicounter -= nbBytes;
 80042f6:	1a76      	subs	r6, r6, r1
    pparams += nbBytes;
 80042f8:	4408      	add	r0, r1
  while (uicounter != 0U)
 80042fa:	b136      	cbz	r6, 800430a <HAL_DSI_LongWrite+0x9e>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80042fc:	4631      	mov	r1, r6
 80042fe:	2e04      	cmp	r6, #4
 8004300:	bf28      	it	cs
 8004302:	2104      	movcs	r1, #4
    fifoword = 0U;
 8004304:	2300      	movs	r3, #0
    for (count = 0U; count < nbBytes; count++)
 8004306:	469c      	mov	ip, r3
 8004308:	e7f1      	b.n	80042ee <HAL_DSI_LongWrite+0x82>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 800430a:	1c6b      	adds	r3, r5, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 800430c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004310:	9200      	str	r2, [sp, #0]
 8004312:	b2db      	uxtb	r3, r3
 8004314:	463a      	mov	r2, r7
 8004316:	4651      	mov	r1, sl
 8004318:	6820      	ldr	r0, [r4, #0]
 800431a:	f7ff fcf7 	bl	8003d0c <DSI_ConfigPacketHeader>
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800431e:	2000      	movs	r0, #0
 8004320:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 8004322:	b002      	add	sp, #8
 8004324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hdsi);
 8004328:	2002      	movs	r0, #2
 800432a:	e7fa      	b.n	8004322 <HAL_DSI_LongWrite+0xb6>

0800432c <HAL_GPIO_Init>:
	assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
	assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
	assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

	/* Configure the port pins */
	for (position = 0; position < GPIO_NUMBER; position++) {
 800432c:	2300      	movs	r3, #0
 800432e:	2b0f      	cmp	r3, #15
 8004330:	f200 80f4 	bhi.w	800451c <HAL_GPIO_Init+0x1f0>
void HAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init) {
 8004334:	b570      	push	{r4, r5, r6, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	e066      	b.n	8004408 <HAL_GPIO_Init+0xdc>
			if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT)
					|| ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)) {
				/* Check the Speed parameter */
				assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
				/* Configure the IO Speed */
				temp = GPIOx->OSPEEDR;
 800433a:	6885      	ldr	r5, [r0, #8]
				temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800433c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8004340:	2403      	movs	r4, #3
 8004342:	fa04 f40e 	lsl.w	r4, r4, lr
 8004346:	ea25 0504 	bic.w	r5, r5, r4
				temp |= (GPIO_Init->Speed << (position * 2));
 800434a:	68cc      	ldr	r4, [r1, #12]
 800434c:	fa04 f40e 	lsl.w	r4, r4, lr
 8004350:	432c      	orrs	r4, r5
				GPIOx->OSPEEDR = temp;
 8004352:	6084      	str	r4, [r0, #8]

				/* Configure the IO Output Type */
				temp = GPIOx->OTYPER;
 8004354:	6844      	ldr	r4, [r0, #4]
				temp &= ~(GPIO_OTYPER_OT_0 << position);
 8004356:	ea24 0402 	bic.w	r4, r4, r2
				temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos)
 800435a:	684a      	ldr	r2, [r1, #4]
 800435c:	f3c2 1200 	ubfx	r2, r2, #4, #1
						<< position);
 8004360:	409a      	lsls	r2, r3
				temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos)
 8004362:	4322      	orrs	r2, r4
				GPIOx->OTYPER = temp;
 8004364:	6042      	str	r2, [r0, #4]
 8004366:	e05d      	b.n	8004424 <HAL_GPIO_Init+0xf8>
			if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
				/* Check the Alternate function parameter */
				assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

				/* Configure Alternate function mapped with the current IO */
				temp = GPIOx->AFR[position >> 3];
 8004368:	08dc      	lsrs	r4, r3, #3
 800436a:	3408      	adds	r4, #8
 800436c:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
				temp &= ~((uint32_t) 0xF
						<< ((uint32_t) (position & (uint32_t) 0x07) * 4));
 8004370:	f003 0507 	and.w	r5, r3, #7
 8004374:	00ad      	lsls	r5, r5, #2
 8004376:	f04f 0e0f 	mov.w	lr, #15
 800437a:	fa0e fe05 	lsl.w	lr, lr, r5
				temp &= ~((uint32_t) 0xF
 800437e:	ea22 0e0e 	bic.w	lr, r2, lr
				temp |= ((uint32_t) (GPIO_Init->Alternate)
 8004382:	690a      	ldr	r2, [r1, #16]
						<< (((uint32_t) position & (uint32_t) 0x07) * 4));
 8004384:	40aa      	lsls	r2, r5
				temp |= ((uint32_t) (GPIO_Init->Alternate)
 8004386:	ea42 020e 	orr.w	r2, r2, lr
				GPIOx->AFR[position >> 3] = temp;
 800438a:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 800438e:	e05d      	b.n	800444c <HAL_GPIO_Init+0x120>
				/* Enable SYSCFG Clock */
				__HAL_RCC_SYSCFG_CLK_ENABLE();

				temp = SYSCFG->EXTICR[position >> 2];
				temp &= ~(((uint32_t) 0x0F) << (4 * (position & 0x03)));
				temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 8004390:	2209      	movs	r2, #9
 8004392:	e000      	b.n	8004396 <HAL_GPIO_Init+0x6a>
 8004394:	2200      	movs	r2, #0
						<< (4 * (position & 0x03)));
 8004396:	fa02 f20e 	lsl.w	r2, r2, lr
				temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 800439a:	432a      	orrs	r2, r5
				SYSCFG->EXTICR[position >> 2] = temp;
 800439c:	3402      	adds	r4, #2
 800439e:	4d60      	ldr	r5, [pc, #384]	; (8004520 <HAL_GPIO_Init+0x1f4>)
 80043a0:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

				/* Clear Rising Falling edge configuration */
				temp = EXTI->RTSR;
 80043a4:	4a5f      	ldr	r2, [pc, #380]	; (8004524 <HAL_GPIO_Init+0x1f8>)
 80043a6:	6894      	ldr	r4, [r2, #8]
				temp &= ~((uint32_t) iocurrent);
 80043a8:	ea6f 020c 	mvn.w	r2, ip
 80043ac:	ea24 050c 	bic.w	r5, r4, ip
				if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u) {
 80043b0:	684e      	ldr	r6, [r1, #4]
 80043b2:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 80043b6:	d001      	beq.n	80043bc <HAL_GPIO_Init+0x90>
					temp |= iocurrent;
 80043b8:	ea4c 0504 	orr.w	r5, ip, r4
				}
				EXTI->RTSR = temp;
 80043bc:	4c59      	ldr	r4, [pc, #356]	; (8004524 <HAL_GPIO_Init+0x1f8>)
 80043be:	60a5      	str	r5, [r4, #8]

				temp = EXTI->FTSR;
 80043c0:	68e4      	ldr	r4, [r4, #12]
				temp &= ~((uint32_t) iocurrent);
 80043c2:	ea02 0504 	and.w	r5, r2, r4
				if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u) {
 80043c6:	684e      	ldr	r6, [r1, #4]
 80043c8:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80043cc:	d001      	beq.n	80043d2 <HAL_GPIO_Init+0xa6>
					temp |= iocurrent;
 80043ce:	ea4c 0504 	orr.w	r5, ip, r4
				}
				EXTI->FTSR = temp;
 80043d2:	4c54      	ldr	r4, [pc, #336]	; (8004524 <HAL_GPIO_Init+0x1f8>)
 80043d4:	60e5      	str	r5, [r4, #12]

				temp = EXTI->EMR;
 80043d6:	6864      	ldr	r4, [r4, #4]
				temp &= ~((uint32_t) iocurrent);
 80043d8:	ea02 0504 	and.w	r5, r2, r4
				if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u) {
 80043dc:	684e      	ldr	r6, [r1, #4]
 80043de:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 80043e2:	d001      	beq.n	80043e8 <HAL_GPIO_Init+0xbc>
					temp |= iocurrent;
 80043e4:	ea4c 0504 	orr.w	r5, ip, r4
				}
				EXTI->EMR = temp;
 80043e8:	4c4e      	ldr	r4, [pc, #312]	; (8004524 <HAL_GPIO_Init+0x1f8>)
 80043ea:	6065      	str	r5, [r4, #4]

				/* Clear EXTI line configuration */
				temp = EXTI->IMR;
 80043ec:	6824      	ldr	r4, [r4, #0]
				temp &= ~((uint32_t) iocurrent);
 80043ee:	4022      	ands	r2, r4
				if ((GPIO_Init->Mode & EXTI_IT) != 0x00u) {
 80043f0:	684d      	ldr	r5, [r1, #4]
 80043f2:	f415 3f80 	tst.w	r5, #65536	; 0x10000
 80043f6:	d001      	beq.n	80043fc <HAL_GPIO_Init+0xd0>
					temp |= iocurrent;
 80043f8:	ea4c 0204 	orr.w	r2, ip, r4
				}
				EXTI->IMR = temp;
 80043fc:	4c49      	ldr	r4, [pc, #292]	; (8004524 <HAL_GPIO_Init+0x1f8>)
 80043fe:	6022      	str	r2, [r4, #0]
	for (position = 0; position < GPIO_NUMBER; position++) {
 8004400:	3301      	adds	r3, #1
 8004402:	2b0f      	cmp	r3, #15
 8004404:	f200 8088 	bhi.w	8004518 <HAL_GPIO_Init+0x1ec>
		ioposition = ((uint32_t) 0x01) << position;
 8004408:	2201      	movs	r2, #1
 800440a:	409a      	lsls	r2, r3
		iocurrent = (uint32_t) (GPIO_Init->Pin) & ioposition;
 800440c:	680c      	ldr	r4, [r1, #0]
 800440e:	ea04 0c02 	and.w	ip, r4, r2
		if (iocurrent == ioposition) {
 8004412:	ea32 0404 	bics.w	r4, r2, r4
 8004416:	d1f3      	bne.n	8004400 <HAL_GPIO_Init+0xd4>
			if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT)
 8004418:	684c      	ldr	r4, [r1, #4]
 800441a:	f004 0403 	and.w	r4, r4, #3
					|| ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)) {
 800441e:	3c01      	subs	r4, #1
			if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT)
 8004420:	2c01      	cmp	r4, #1
 8004422:	d98a      	bls.n	800433a <HAL_GPIO_Init+0xe>
			if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) {
 8004424:	684a      	ldr	r2, [r1, #4]
 8004426:	f002 0203 	and.w	r2, r2, #3
 800442a:	2a03      	cmp	r2, #3
 800442c:	d009      	beq.n	8004442 <HAL_GPIO_Init+0x116>
				temp = GPIOx->PUPDR;
 800442e:	68c4      	ldr	r4, [r0, #12]
				temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004430:	005d      	lsls	r5, r3, #1
 8004432:	2203      	movs	r2, #3
 8004434:	40aa      	lsls	r2, r5
 8004436:	ea24 0402 	bic.w	r4, r4, r2
				temp |= ((GPIO_Init->Pull) << (position * 2));
 800443a:	688a      	ldr	r2, [r1, #8]
 800443c:	40aa      	lsls	r2, r5
 800443e:	4322      	orrs	r2, r4
				GPIOx->PUPDR = temp;
 8004440:	60c2      	str	r2, [r0, #12]
			if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
 8004442:	684a      	ldr	r2, [r1, #4]
 8004444:	f002 0203 	and.w	r2, r2, #3
 8004448:	2a02      	cmp	r2, #2
 800444a:	d08d      	beq.n	8004368 <HAL_GPIO_Init+0x3c>
			temp = GPIOx->MODER;
 800444c:	6804      	ldr	r4, [r0, #0]
			temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800444e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8004452:	2203      	movs	r2, #3
 8004454:	fa02 f20e 	lsl.w	r2, r2, lr
 8004458:	ea24 0402 	bic.w	r4, r4, r2
			temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800445c:	684a      	ldr	r2, [r1, #4]
 800445e:	f002 0203 	and.w	r2, r2, #3
 8004462:	fa02 f20e 	lsl.w	r2, r2, lr
 8004466:	4322      	orrs	r2, r4
			GPIOx->MODER = temp;
 8004468:	6002      	str	r2, [r0, #0]
			if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u) {
 800446a:	684a      	ldr	r2, [r1, #4]
 800446c:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 8004470:	d0c6      	beq.n	8004400 <HAL_GPIO_Init+0xd4>
				__HAL_RCC_SYSCFG_CLK_ENABLE();
 8004472:	4a2d      	ldr	r2, [pc, #180]	; (8004528 <HAL_GPIO_Init+0x1fc>)
 8004474:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8004476:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800447a:	6454      	str	r4, [r2, #68]	; 0x44
 800447c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800447e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004482:	9201      	str	r2, [sp, #4]
 8004484:	9a01      	ldr	r2, [sp, #4]
				temp = SYSCFG->EXTICR[position >> 2];
 8004486:	089c      	lsrs	r4, r3, #2
 8004488:	1ca5      	adds	r5, r4, #2
 800448a:	4a25      	ldr	r2, [pc, #148]	; (8004520 <HAL_GPIO_Init+0x1f4>)
 800448c:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
				temp &= ~(((uint32_t) 0x0F) << (4 * (position & 0x03)));
 8004490:	f003 0e03 	and.w	lr, r3, #3
 8004494:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8004498:	220f      	movs	r2, #15
 800449a:	fa02 f20e 	lsl.w	r2, r2, lr
 800449e:	ea25 0502 	bic.w	r5, r5, r2
				temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 80044a2:	4a22      	ldr	r2, [pc, #136]	; (800452c <HAL_GPIO_Init+0x200>)
 80044a4:	4290      	cmp	r0, r2
 80044a6:	f43f af75 	beq.w	8004394 <HAL_GPIO_Init+0x68>
 80044aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80044ae:	4290      	cmp	r0, r2
 80044b0:	d022      	beq.n	80044f8 <HAL_GPIO_Init+0x1cc>
 80044b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80044b6:	4290      	cmp	r0, r2
 80044b8:	d020      	beq.n	80044fc <HAL_GPIO_Init+0x1d0>
 80044ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80044be:	4290      	cmp	r0, r2
 80044c0:	d01e      	beq.n	8004500 <HAL_GPIO_Init+0x1d4>
 80044c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80044c6:	4290      	cmp	r0, r2
 80044c8:	d01c      	beq.n	8004504 <HAL_GPIO_Init+0x1d8>
 80044ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80044ce:	4290      	cmp	r0, r2
 80044d0:	d01a      	beq.n	8004508 <HAL_GPIO_Init+0x1dc>
 80044d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80044d6:	4290      	cmp	r0, r2
 80044d8:	d018      	beq.n	800450c <HAL_GPIO_Init+0x1e0>
 80044da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80044de:	4290      	cmp	r0, r2
 80044e0:	d016      	beq.n	8004510 <HAL_GPIO_Init+0x1e4>
 80044e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80044e6:	4290      	cmp	r0, r2
 80044e8:	d014      	beq.n	8004514 <HAL_GPIO_Init+0x1e8>
 80044ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80044ee:	4290      	cmp	r0, r2
 80044f0:	f43f af4e 	beq.w	8004390 <HAL_GPIO_Init+0x64>
 80044f4:	220a      	movs	r2, #10
 80044f6:	e74e      	b.n	8004396 <HAL_GPIO_Init+0x6a>
 80044f8:	2201      	movs	r2, #1
 80044fa:	e74c      	b.n	8004396 <HAL_GPIO_Init+0x6a>
 80044fc:	2202      	movs	r2, #2
 80044fe:	e74a      	b.n	8004396 <HAL_GPIO_Init+0x6a>
 8004500:	2203      	movs	r2, #3
 8004502:	e748      	b.n	8004396 <HAL_GPIO_Init+0x6a>
 8004504:	2204      	movs	r2, #4
 8004506:	e746      	b.n	8004396 <HAL_GPIO_Init+0x6a>
 8004508:	2205      	movs	r2, #5
 800450a:	e744      	b.n	8004396 <HAL_GPIO_Init+0x6a>
 800450c:	2206      	movs	r2, #6
 800450e:	e742      	b.n	8004396 <HAL_GPIO_Init+0x6a>
 8004510:	2207      	movs	r2, #7
 8004512:	e740      	b.n	8004396 <HAL_GPIO_Init+0x6a>
 8004514:	2208      	movs	r2, #8
 8004516:	e73e      	b.n	8004396 <HAL_GPIO_Init+0x6a>
			}
		}
	}
}
 8004518:	b002      	add	sp, #8
 800451a:	bd70      	pop	{r4, r5, r6, pc}
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	40013800 	.word	0x40013800
 8004524:	40013c00 	.word	0x40013c00
 8004528:	40023800 	.word	0x40023800
 800452c:	40020000 	.word	0x40020000

08004530 <HAL_GPIO_WritePin>:
		GPIO_PinState PinState) {
	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));
	assert_param(IS_GPIO_PIN_ACTION(PinState));

	if (PinState != GPIO_PIN_RESET) {
 8004530:	b10a      	cbz	r2, 8004536 <HAL_GPIO_WritePin+0x6>
		GPIOx->BSRR = GPIO_Pin;
 8004532:	6181      	str	r1, [r0, #24]
 8004534:	4770      	bx	lr
	} else {
		GPIOx->BSRR = (uint32_t) GPIO_Pin << 16;
 8004536:	0409      	lsls	r1, r1, #16
 8004538:	6181      	str	r1, [r0, #24]
	}
}
 800453a:	4770      	bx	lr

0800453c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800453c:	6803      	ldr	r3, [r0, #0]
 800453e:	699a      	ldr	r2, [r3, #24]
 8004540:	f012 0f02 	tst.w	r2, #2
 8004544:	d001      	beq.n	800454a <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004546:	2200      	movs	r2, #0
 8004548:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800454a:	6803      	ldr	r3, [r0, #0]
 800454c:	699a      	ldr	r2, [r3, #24]
 800454e:	f012 0f01 	tst.w	r2, #1
 8004552:	d103      	bne.n	800455c <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004554:	699a      	ldr	r2, [r3, #24]
 8004556:	f042 0201 	orr.w	r2, r2, #1
 800455a:	619a      	str	r2, [r3, #24]
  }
}
 800455c:	4770      	bx	lr

0800455e <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800455e:	b410      	push	{r4}
 8004560:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004562:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004566:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800456a:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800456c:	4321      	orrs	r1, r4
 800456e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004572:	6802      	ldr	r2, [r0, #0]
 8004574:	6853      	ldr	r3, [r2, #4]
 8004576:	0d64      	lsrs	r4, r4, #21
 8004578:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 800457c:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8004580:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8004584:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8004588:	f044 0403 	orr.w	r4, r4, #3
 800458c:	ea23 0304 	bic.w	r3, r3, r4
 8004590:	430b      	orrs	r3, r1
 8004592:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004594:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004598:	4770      	bx	lr

0800459a <I2C_IsErrorOccurred>:
{
 800459a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800459e:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 80045a0:	6803      	ldr	r3, [r0, #0]
 80045a2:	699e      	ldr	r6, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80045a4:	f016 0610 	ands.w	r6, r6, #16
 80045a8:	d07e      	beq.n	80046a8 <I2C_IsErrorOccurred+0x10e>
 80045aa:	460d      	mov	r5, r1
 80045ac:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045ae:	2210      	movs	r2, #16
 80045b0:	61da      	str	r2, [r3, #28]
  uint32_t error_code = 0;
 80045b2:	2600      	movs	r6, #0
  HAL_StatusTypeDef status = HAL_OK;
 80045b4:	4637      	mov	r7, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80045b6:	6823      	ldr	r3, [r4, #0]
 80045b8:	6998      	ldr	r0, [r3, #24]
 80045ba:	f010 0f20 	tst.w	r0, #32
 80045be:	d132      	bne.n	8004626 <I2C_IsErrorOccurred+0x8c>
 80045c0:	bb8f      	cbnz	r7, 8004626 <I2C_IsErrorOccurred+0x8c>
      if (Timeout != HAL_MAX_DELAY)
 80045c2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80045c6:	d0f6      	beq.n	80045b6 <I2C_IsErrorOccurred+0x1c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80045c8:	f7ff f830 	bl	800362c <HAL_GetTick>
 80045cc:	eba0 0008 	sub.w	r0, r0, r8
 80045d0:	42a8      	cmp	r0, r5
 80045d2:	d801      	bhi.n	80045d8 <I2C_IsErrorOccurred+0x3e>
 80045d4:	2d00      	cmp	r5, #0
 80045d6:	d1ee      	bne.n	80045b6 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80045d8:	6821      	ldr	r1, [r4, #0]
 80045da:	684a      	ldr	r2, [r1, #4]
 80045dc:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
          tmp2 = hi2c->Mode;
 80045e0:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80045e4:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80045e6:	6988      	ldr	r0, [r1, #24]
 80045e8:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80045ec:	d004      	beq.n	80045f8 <I2C_IsErrorOccurred+0x5e>
              (tmp2 != HAL_I2C_MODE_SLAVE))
 80045ee:	3b20      	subs	r3, #32
 80045f0:	bf18      	it	ne
 80045f2:	2301      	movne	r3, #1
              (tmp1 != I2C_CR2_STOP) && \
 80045f4:	b902      	cbnz	r2, 80045f8 <I2C_IsErrorOccurred+0x5e>
 80045f6:	b973      	cbnz	r3, 8004616 <I2C_IsErrorOccurred+0x7c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045f8:	6823      	ldr	r3, [r4, #0]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	f013 0f20 	tst.w	r3, #32
 8004600:	d1d9      	bne.n	80045b6 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004602:	f7ff f813 	bl	800362c <HAL_GetTick>
 8004606:	eba0 0008 	sub.w	r0, r0, r8
 800460a:	2819      	cmp	r0, #25
 800460c:	d9f4      	bls.n	80045f8 <I2C_IsErrorOccurred+0x5e>
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800460e:	f046 0620 	orr.w	r6, r6, #32
              status = HAL_ERROR;
 8004612:	2701      	movs	r7, #1
              break;
 8004614:	e7cf      	b.n	80045b6 <I2C_IsErrorOccurred+0x1c>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004616:	684b      	ldr	r3, [r1, #4]
 8004618:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800461c:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 800461e:	f7ff f805 	bl	800362c <HAL_GetTick>
 8004622:	4680      	mov	r8, r0
 8004624:	e7e8      	b.n	80045f8 <I2C_IsErrorOccurred+0x5e>
    if (status == HAL_OK)
 8004626:	b90f      	cbnz	r7, 800462c <I2C_IsErrorOccurred+0x92>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004628:	2220      	movs	r2, #32
 800462a:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 800462c:	f046 0604 	orr.w	r6, r6, #4
    status = HAL_ERROR;
 8004630:	2501      	movs	r5, #1
  itflag = hi2c->Instance->ISR;
 8004632:	6822      	ldr	r2, [r4, #0]
 8004634:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004636:	f413 7f80 	tst.w	r3, #256	; 0x100
 800463a:	d005      	beq.n	8004648 <I2C_IsErrorOccurred+0xae>
    error_code |= HAL_I2C_ERROR_BERR;
 800463c:	f046 0601 	orr.w	r6, r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004640:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004644:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8004646:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004648:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800464c:	d006      	beq.n	800465c <I2C_IsErrorOccurred+0xc2>
    error_code |= HAL_I2C_ERROR_OVR;
 800464e:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004652:	6822      	ldr	r2, [r4, #0]
 8004654:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004658:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 800465a:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800465c:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004660:	d024      	beq.n	80046ac <I2C_IsErrorOccurred+0x112>
    error_code |= HAL_I2C_ERROR_ARLO;
 8004662:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004666:	6823      	ldr	r3, [r4, #0]
 8004668:	f44f 7200 	mov.w	r2, #512	; 0x200
 800466c:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 800466e:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 8004670:	4620      	mov	r0, r4
 8004672:	f7ff ff63 	bl	800453c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8004676:	6822      	ldr	r2, [r4, #0]
 8004678:	6853      	ldr	r3, [r2, #4]
 800467a:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800467e:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8004682:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8004686:	f023 0301 	bic.w	r3, r3, #1
 800468a:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 800468c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800468e:	4333      	orrs	r3, r6
 8004690:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004692:	2320      	movs	r3, #32
 8004694:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004698:	2300      	movs	r3, #0
 800469a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800469e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80046a2:	4628      	mov	r0, r5
 80046a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_StatusTypeDef status = HAL_OK;
 80046a8:	2500      	movs	r5, #0
 80046aa:	e7c2      	b.n	8004632 <I2C_IsErrorOccurred+0x98>
  if (status != HAL_OK)
 80046ac:	2d00      	cmp	r5, #0
 80046ae:	d0f8      	beq.n	80046a2 <I2C_IsErrorOccurred+0x108>
 80046b0:	e7de      	b.n	8004670 <I2C_IsErrorOccurred+0xd6>

080046b2 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80046b2:	b570      	push	{r4, r5, r6, lr}
 80046b4:	4604      	mov	r4, r0
 80046b6:	460d      	mov	r5, r1
 80046b8:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80046ba:	6823      	ldr	r3, [r4, #0]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	f013 0f02 	tst.w	r3, #2
 80046c2:	d11d      	bne.n	8004700 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80046c4:	4632      	mov	r2, r6
 80046c6:	4629      	mov	r1, r5
 80046c8:	4620      	mov	r0, r4
 80046ca:	f7ff ff66 	bl	800459a <I2C_IsErrorOccurred>
 80046ce:	b9c8      	cbnz	r0, 8004704 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 80046d0:	f1b5 3fff 	cmp.w	r5, #4294967295
 80046d4:	d0f1      	beq.n	80046ba <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046d6:	f7fe ffa9 	bl	800362c <HAL_GetTick>
 80046da:	1b80      	subs	r0, r0, r6
 80046dc:	42a8      	cmp	r0, r5
 80046de:	d801      	bhi.n	80046e4 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80046e0:	2d00      	cmp	r5, #0
 80046e2:	d1ea      	bne.n	80046ba <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046e4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80046e6:	f043 0320 	orr.w	r3, r3, #32
 80046ea:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80046ec:	2320      	movs	r3, #32
 80046ee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046f2:	2300      	movs	r3, #0
 80046f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80046f8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80046fc:	2001      	movs	r0, #1
 80046fe:	e000      	b.n	8004702 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8004700:	2000      	movs	r0, #0
}
 8004702:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8004704:	2001      	movs	r0, #1
 8004706:	e7fc      	b.n	8004702 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08004708 <I2C_WaitOnFlagUntilTimeout>:
{
 8004708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800470c:	4606      	mov	r6, r0
 800470e:	4688      	mov	r8, r1
 8004710:	4617      	mov	r7, r2
 8004712:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004714:	6834      	ldr	r4, [r6, #0]
 8004716:	69a4      	ldr	r4, [r4, #24]
 8004718:	ea38 0404 	bics.w	r4, r8, r4
 800471c:	bf0c      	ite	eq
 800471e:	2401      	moveq	r4, #1
 8004720:	2400      	movne	r4, #0
 8004722:	42bc      	cmp	r4, r7
 8004724:	d118      	bne.n	8004758 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8004726:	f1b5 3fff 	cmp.w	r5, #4294967295
 800472a:	d0f3      	beq.n	8004714 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800472c:	f7fe ff7e 	bl	800362c <HAL_GetTick>
 8004730:	9b06      	ldr	r3, [sp, #24]
 8004732:	1ac0      	subs	r0, r0, r3
 8004734:	42a8      	cmp	r0, r5
 8004736:	d801      	bhi.n	800473c <I2C_WaitOnFlagUntilTimeout+0x34>
 8004738:	2d00      	cmp	r5, #0
 800473a:	d1eb      	bne.n	8004714 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800473c:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800473e:	f043 0320 	orr.w	r3, r3, #32
 8004742:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004744:	2320      	movs	r3, #32
 8004746:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800474a:	2300      	movs	r3, #0
 800474c:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8004750:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8004754:	2001      	movs	r0, #1
 8004756:	e000      	b.n	800475a <I2C_WaitOnFlagUntilTimeout+0x52>
  return HAL_OK;
 8004758:	2000      	movs	r0, #0
}
 800475a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004760 <I2C_RequestMemoryWrite>:
{
 8004760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004764:	b082      	sub	sp, #8
 8004766:	4604      	mov	r4, r0
 8004768:	4690      	mov	r8, r2
 800476a:	461d      	mov	r5, r3
 800476c:	9e08      	ldr	r6, [sp, #32]
 800476e:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004770:	4b19      	ldr	r3, [pc, #100]	; (80047d8 <I2C_RequestMemoryWrite+0x78>)
 8004772:	9300      	str	r3, [sp, #0]
 8004774:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004778:	b2ea      	uxtb	r2, r5
 800477a:	f7ff fef0 	bl	800455e <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800477e:	463a      	mov	r2, r7
 8004780:	4631      	mov	r1, r6
 8004782:	4620      	mov	r0, r4
 8004784:	f7ff ff95 	bl	80046b2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004788:	b9f8      	cbnz	r0, 80047ca <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800478a:	2d01      	cmp	r5, #1
 800478c:	d10e      	bne.n	80047ac <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800478e:	6823      	ldr	r3, [r4, #0]
 8004790:	fa5f f288 	uxtb.w	r2, r8
 8004794:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004796:	9700      	str	r7, [sp, #0]
 8004798:	4633      	mov	r3, r6
 800479a:	2200      	movs	r2, #0
 800479c:	2180      	movs	r1, #128	; 0x80
 800479e:	4620      	mov	r0, r4
 80047a0:	f7ff ffb2 	bl	8004708 <I2C_WaitOnFlagUntilTimeout>
 80047a4:	b9a8      	cbnz	r0, 80047d2 <I2C_RequestMemoryWrite+0x72>
}
 80047a6:	b002      	add	sp, #8
 80047a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80047ac:	6823      	ldr	r3, [r4, #0]
 80047ae:	ea4f 2218 	mov.w	r2, r8, lsr #8
 80047b2:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047b4:	463a      	mov	r2, r7
 80047b6:	4631      	mov	r1, r6
 80047b8:	4620      	mov	r0, r4
 80047ba:	f7ff ff7a 	bl	80046b2 <I2C_WaitOnTXISFlagUntilTimeout>
 80047be:	b930      	cbnz	r0, 80047ce <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80047c0:	6823      	ldr	r3, [r4, #0]
 80047c2:	fa5f f288 	uxtb.w	r2, r8
 80047c6:	629a      	str	r2, [r3, #40]	; 0x28
 80047c8:	e7e5      	b.n	8004796 <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 80047ca:	2001      	movs	r0, #1
 80047cc:	e7eb      	b.n	80047a6 <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 80047ce:	2001      	movs	r0, #1
 80047d0:	e7e9      	b.n	80047a6 <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 80047d2:	2001      	movs	r0, #1
 80047d4:	e7e7      	b.n	80047a6 <I2C_RequestMemoryWrite+0x46>
 80047d6:	bf00      	nop
 80047d8:	80002000 	.word	0x80002000

080047dc <I2C_RequestMemoryRead>:
{
 80047dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047e0:	b082      	sub	sp, #8
 80047e2:	4604      	mov	r4, r0
 80047e4:	4690      	mov	r8, r2
 80047e6:	461d      	mov	r5, r3
 80047e8:	9e08      	ldr	r6, [sp, #32]
 80047ea:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80047ec:	4b18      	ldr	r3, [pc, #96]	; (8004850 <I2C_RequestMemoryRead+0x74>)
 80047ee:	9300      	str	r3, [sp, #0]
 80047f0:	2300      	movs	r3, #0
 80047f2:	b2ea      	uxtb	r2, r5
 80047f4:	f7ff feb3 	bl	800455e <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047f8:	463a      	mov	r2, r7
 80047fa:	4631      	mov	r1, r6
 80047fc:	4620      	mov	r0, r4
 80047fe:	f7ff ff58 	bl	80046b2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004802:	b9f8      	cbnz	r0, 8004844 <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004804:	2d01      	cmp	r5, #1
 8004806:	d10e      	bne.n	8004826 <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004808:	6823      	ldr	r3, [r4, #0]
 800480a:	fa5f f288 	uxtb.w	r2, r8
 800480e:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004810:	9700      	str	r7, [sp, #0]
 8004812:	4633      	mov	r3, r6
 8004814:	2200      	movs	r2, #0
 8004816:	2140      	movs	r1, #64	; 0x40
 8004818:	4620      	mov	r0, r4
 800481a:	f7ff ff75 	bl	8004708 <I2C_WaitOnFlagUntilTimeout>
 800481e:	b9a8      	cbnz	r0, 800484c <I2C_RequestMemoryRead+0x70>
}
 8004820:	b002      	add	sp, #8
 8004822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004826:	6823      	ldr	r3, [r4, #0]
 8004828:	ea4f 2218 	mov.w	r2, r8, lsr #8
 800482c:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800482e:	463a      	mov	r2, r7
 8004830:	4631      	mov	r1, r6
 8004832:	4620      	mov	r0, r4
 8004834:	f7ff ff3d 	bl	80046b2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004838:	b930      	cbnz	r0, 8004848 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800483a:	6823      	ldr	r3, [r4, #0]
 800483c:	fa5f f288 	uxtb.w	r2, r8
 8004840:	629a      	str	r2, [r3, #40]	; 0x28
 8004842:	e7e5      	b.n	8004810 <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 8004844:	2001      	movs	r0, #1
 8004846:	e7eb      	b.n	8004820 <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 8004848:	2001      	movs	r0, #1
 800484a:	e7e9      	b.n	8004820 <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 800484c:	2001      	movs	r0, #1
 800484e:	e7e7      	b.n	8004820 <I2C_RequestMemoryRead+0x44>
 8004850:	80002000 	.word	0x80002000

08004854 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8004854:	b570      	push	{r4, r5, r6, lr}
 8004856:	4605      	mov	r5, r0
 8004858:	460c      	mov	r4, r1
 800485a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800485c:	682b      	ldr	r3, [r5, #0]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	f013 0f20 	tst.w	r3, #32
 8004864:	d11a      	bne.n	800489c <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004866:	4632      	mov	r2, r6
 8004868:	4621      	mov	r1, r4
 800486a:	4628      	mov	r0, r5
 800486c:	f7ff fe95 	bl	800459a <I2C_IsErrorOccurred>
 8004870:	b9b0      	cbnz	r0, 80048a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004872:	f7fe fedb 	bl	800362c <HAL_GetTick>
 8004876:	1b80      	subs	r0, r0, r6
 8004878:	42a0      	cmp	r0, r4
 800487a:	d801      	bhi.n	8004880 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 800487c:	2c00      	cmp	r4, #0
 800487e:	d1ed      	bne.n	800485c <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004880:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8004882:	f043 0320 	orr.w	r3, r3, #32
 8004886:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004888:	2320      	movs	r3, #32
 800488a:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800488e:	2300      	movs	r3, #0
 8004890:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004894:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8004898:	2001      	movs	r0, #1
}
 800489a:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800489c:	2000      	movs	r0, #0
 800489e:	e7fc      	b.n	800489a <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 80048a0:	2001      	movs	r0, #1
 80048a2:	e7fa      	b.n	800489a <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

080048a4 <HAL_I2C_MspInit>:
}
 80048a4:	4770      	bx	lr
	...

080048a8 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80048a8:	2800      	cmp	r0, #0
 80048aa:	d057      	beq.n	800495c <HAL_I2C_Init+0xb4>
{
 80048ac:	b510      	push	{r4, lr}
 80048ae:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048b0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d041      	beq.n	800493c <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80048b8:	2324      	movs	r3, #36	; 0x24
 80048ba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80048be:	6822      	ldr	r2, [r4, #0]
 80048c0:	6813      	ldr	r3, [r2, #0]
 80048c2:	f023 0301 	bic.w	r3, r3, #1
 80048c6:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80048c8:	6863      	ldr	r3, [r4, #4]
 80048ca:	6822      	ldr	r2, [r4, #0]
 80048cc:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80048d0:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80048d2:	6822      	ldr	r2, [r4, #0]
 80048d4:	6893      	ldr	r3, [r2, #8]
 80048d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80048da:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048dc:	68e3      	ldr	r3, [r4, #12]
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d031      	beq.n	8004946 <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80048e2:	68a3      	ldr	r3, [r4, #8]
 80048e4:	6822      	ldr	r2, [r4, #0]
 80048e6:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 80048ea:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80048ec:	68e3      	ldr	r3, [r4, #12]
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d02f      	beq.n	8004952 <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80048f2:	6822      	ldr	r2, [r4, #0]
 80048f4:	6851      	ldr	r1, [r2, #4]
 80048f6:	4b1a      	ldr	r3, [pc, #104]	; (8004960 <HAL_I2C_Init+0xb8>)
 80048f8:	430b      	orrs	r3, r1
 80048fa:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80048fc:	6822      	ldr	r2, [r4, #0]
 80048fe:	68d3      	ldr	r3, [r2, #12]
 8004900:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004904:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004906:	6923      	ldr	r3, [r4, #16]
 8004908:	6962      	ldr	r2, [r4, #20]
 800490a:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800490c:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800490e:	6822      	ldr	r2, [r4, #0]
 8004910:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004914:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004916:	69e3      	ldr	r3, [r4, #28]
 8004918:	6a21      	ldr	r1, [r4, #32]
 800491a:	6822      	ldr	r2, [r4, #0]
 800491c:	430b      	orrs	r3, r1
 800491e:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8004920:	6822      	ldr	r2, [r4, #0]
 8004922:	6813      	ldr	r3, [r2, #0]
 8004924:	f043 0301 	orr.w	r3, r3, #1
 8004928:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800492a:	2000      	movs	r0, #0
 800492c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800492e:	2320      	movs	r3, #32
 8004930:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004934:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004936:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800493a:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800493c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8004940:	f7ff ffb0 	bl	80048a4 <HAL_I2C_MspInit>
 8004944:	e7b8      	b.n	80048b8 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004946:	68a3      	ldr	r3, [r4, #8]
 8004948:	6822      	ldr	r2, [r4, #0]
 800494a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800494e:	6093      	str	r3, [r2, #8]
 8004950:	e7cc      	b.n	80048ec <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004952:	6823      	ldr	r3, [r4, #0]
 8004954:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004958:	605a      	str	r2, [r3, #4]
 800495a:	e7ca      	b.n	80048f2 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 800495c:	2001      	movs	r0, #1
}
 800495e:	4770      	bx	lr
 8004960:	02008000 	.word	0x02008000

08004964 <HAL_I2C_Mem_Write>:
{
 8004964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004968:	b083      	sub	sp, #12
 800496a:	460d      	mov	r5, r1
 800496c:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8004970:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004972:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8004976:	b2c9      	uxtb	r1, r1
 8004978:	2920      	cmp	r1, #32
 800497a:	f040 80bc 	bne.w	8004af6 <HAL_I2C_Mem_Write+0x192>
 800497e:	4604      	mov	r4, r0
 8004980:	4690      	mov	r8, r2
 8004982:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8004984:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004986:	f1ba 0f00 	cmp.w	sl, #0
 800498a:	bf18      	it	ne
 800498c:	2b00      	cmpne	r3, #0
 800498e:	d016      	beq.n	80049be <HAL_I2C_Mem_Write+0x5a>
    __HAL_LOCK(hi2c);
 8004990:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004994:	2b01      	cmp	r3, #1
 8004996:	f000 80b2 	beq.w	8004afe <HAL_I2C_Mem_Write+0x19a>
 800499a:	f04f 0b01 	mov.w	fp, #1
 800499e:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80049a2:	f7fe fe43 	bl	800362c <HAL_GetTick>
 80049a6:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80049a8:	9000      	str	r0, [sp, #0]
 80049aa:	2319      	movs	r3, #25
 80049ac:	465a      	mov	r2, fp
 80049ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80049b2:	4620      	mov	r0, r4
 80049b4:	f7ff fea8 	bl	8004708 <I2C_WaitOnFlagUntilTimeout>
 80049b8:	b130      	cbz	r0, 80049c8 <HAL_I2C_Mem_Write+0x64>
      return HAL_ERROR;
 80049ba:	2001      	movs	r0, #1
 80049bc:	e09c      	b.n	8004af8 <HAL_I2C_Mem_Write+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80049be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049c2:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 80049c4:	2001      	movs	r0, #1
 80049c6:	e097      	b.n	8004af8 <HAL_I2C_Mem_Write+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80049c8:	2321      	movs	r3, #33	; 0x21
 80049ca:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049ce:	2340      	movs	r3, #64	; 0x40
 80049d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049d4:	2300      	movs	r3, #0
 80049d6:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80049d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80049da:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80049dc:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80049e0:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80049e2:	9601      	str	r6, [sp, #4]
 80049e4:	9700      	str	r7, [sp, #0]
 80049e6:	464b      	mov	r3, r9
 80049e8:	4642      	mov	r2, r8
 80049ea:	4629      	mov	r1, r5
 80049ec:	4620      	mov	r0, r4
 80049ee:	f7ff feb7 	bl	8004760 <I2C_RequestMemoryWrite>
 80049f2:	b970      	cbnz	r0, 8004a12 <HAL_I2C_Mem_Write+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049f4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	2bff      	cmp	r3, #255	; 0xff
 80049fa:	d90f      	bls.n	8004a1c <HAL_I2C_Mem_Write+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80049fc:	22ff      	movs	r2, #255	; 0xff
 80049fe:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004a00:	2300      	movs	r3, #0
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a08:	4629      	mov	r1, r5
 8004a0a:	4620      	mov	r0, r4
 8004a0c:	f7ff fda7 	bl	800455e <I2C_TransferConfig>
 8004a10:	e021      	b.n	8004a56 <HAL_I2C_Mem_Write+0xf2>
      __HAL_UNLOCK(hi2c);
 8004a12:	2300      	movs	r3, #0
 8004a14:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004a18:	4658      	mov	r0, fp
 8004a1a:	e06d      	b.n	8004af8 <HAL_I2C_Mem_Write+0x194>
      hi2c->XferSize = hi2c->XferCount;
 8004a1c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004a1e:	b292      	uxth	r2, r2
 8004a20:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004a22:	2300      	movs	r3, #0
 8004a24:	9300      	str	r3, [sp, #0]
 8004a26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a2a:	b2d2      	uxtb	r2, r2
 8004a2c:	4629      	mov	r1, r5
 8004a2e:	4620      	mov	r0, r4
 8004a30:	f7ff fd95 	bl	800455e <I2C_TransferConfig>
 8004a34:	e00f      	b.n	8004a56 <HAL_I2C_Mem_Write+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 8004a36:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004a38:	b292      	uxth	r2, r2
 8004a3a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	9300      	str	r3, [sp, #0]
 8004a40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a44:	b2d2      	uxtb	r2, r2
 8004a46:	4629      	mov	r1, r5
 8004a48:	4620      	mov	r0, r4
 8004a4a:	f7ff fd88 	bl	800455e <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8004a4e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d033      	beq.n	8004abe <HAL_I2C_Mem_Write+0x15a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a56:	4632      	mov	r2, r6
 8004a58:	4639      	mov	r1, r7
 8004a5a:	4620      	mov	r0, r4
 8004a5c:	f7ff fe29 	bl	80046b2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a60:	2800      	cmp	r0, #0
 8004a62:	d14e      	bne.n	8004b02 <HAL_I2C_Mem_Write+0x19e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004a64:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004a66:	6823      	ldr	r3, [r4, #0]
 8004a68:	7812      	ldrb	r2, [r2, #0]
 8004a6a:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8004a6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a6e:	3301      	adds	r3, #1
 8004a70:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004a72:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	3b01      	subs	r3, #1
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004a7c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a84:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004a86:	b292      	uxth	r2, r2
 8004a88:	2a00      	cmp	r2, #0
 8004a8a:	d0e0      	beq.n	8004a4e <HAL_I2C_Mem_Write+0xea>
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1de      	bne.n	8004a4e <HAL_I2C_Mem_Write+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004a90:	9600      	str	r6, [sp, #0]
 8004a92:	463b      	mov	r3, r7
 8004a94:	2200      	movs	r2, #0
 8004a96:	2180      	movs	r1, #128	; 0x80
 8004a98:	4620      	mov	r0, r4
 8004a9a:	f7ff fe35 	bl	8004708 <I2C_WaitOnFlagUntilTimeout>
 8004a9e:	bb90      	cbnz	r0, 8004b06 <HAL_I2C_Mem_Write+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004aa0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	2bff      	cmp	r3, #255	; 0xff
 8004aa6:	d9c6      	bls.n	8004a36 <HAL_I2C_Mem_Write+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004aa8:	22ff      	movs	r2, #255	; 0xff
 8004aaa:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004aac:	2300      	movs	r3, #0
 8004aae:	9300      	str	r3, [sp, #0]
 8004ab0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ab4:	4629      	mov	r1, r5
 8004ab6:	4620      	mov	r0, r4
 8004ab8:	f7ff fd51 	bl	800455e <I2C_TransferConfig>
 8004abc:	e7c7      	b.n	8004a4e <HAL_I2C_Mem_Write+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004abe:	4632      	mov	r2, r6
 8004ac0:	4639      	mov	r1, r7
 8004ac2:	4620      	mov	r0, r4
 8004ac4:	f7ff fec6 	bl	8004854 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004ac8:	b9f8      	cbnz	r0, 8004b0a <HAL_I2C_Mem_Write+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004aca:	6823      	ldr	r3, [r4, #0]
 8004acc:	2220      	movs	r2, #32
 8004ace:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004ad0:	6821      	ldr	r1, [r4, #0]
 8004ad2:	684b      	ldr	r3, [r1, #4]
 8004ad4:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8004ad8:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8004adc:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8004ae0:	f023 0301 	bic.w	r3, r3, #1
 8004ae4:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004ae6:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004aea:	2300      	movs	r3, #0
 8004aec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8004af0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8004af4:	e000      	b.n	8004af8 <HAL_I2C_Mem_Write+0x194>
    return HAL_BUSY;
 8004af6:	2002      	movs	r0, #2
}
 8004af8:	b003      	add	sp, #12
 8004afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8004afe:	2002      	movs	r0, #2
 8004b00:	e7fa      	b.n	8004af8 <HAL_I2C_Mem_Write+0x194>
        return HAL_ERROR;
 8004b02:	2001      	movs	r0, #1
 8004b04:	e7f8      	b.n	8004af8 <HAL_I2C_Mem_Write+0x194>
          return HAL_ERROR;
 8004b06:	2001      	movs	r0, #1
 8004b08:	e7f6      	b.n	8004af8 <HAL_I2C_Mem_Write+0x194>
      return HAL_ERROR;
 8004b0a:	2001      	movs	r0, #1
 8004b0c:	e7f4      	b.n	8004af8 <HAL_I2C_Mem_Write+0x194>
	...

08004b10 <HAL_I2C_Mem_Read>:
{
 8004b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b14:	b083      	sub	sp, #12
 8004b16:	460d      	mov	r5, r1
 8004b18:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8004b1c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b1e:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8004b22:	b2c9      	uxtb	r1, r1
 8004b24:	2920      	cmp	r1, #32
 8004b26:	f040 80bd 	bne.w	8004ca4 <HAL_I2C_Mem_Read+0x194>
 8004b2a:	4604      	mov	r4, r0
 8004b2c:	4690      	mov	r8, r2
 8004b2e:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8004b30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b32:	f1ba 0f00 	cmp.w	sl, #0
 8004b36:	bf18      	it	ne
 8004b38:	2b00      	cmpne	r3, #0
 8004b3a:	d016      	beq.n	8004b6a <HAL_I2C_Mem_Read+0x5a>
    __HAL_LOCK(hi2c);
 8004b3c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	f000 80b3 	beq.w	8004cac <HAL_I2C_Mem_Read+0x19c>
 8004b46:	f04f 0b01 	mov.w	fp, #1
 8004b4a:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8004b4e:	f7fe fd6d 	bl	800362c <HAL_GetTick>
 8004b52:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b54:	9000      	str	r0, [sp, #0]
 8004b56:	2319      	movs	r3, #25
 8004b58:	465a      	mov	r2, fp
 8004b5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b5e:	4620      	mov	r0, r4
 8004b60:	f7ff fdd2 	bl	8004708 <I2C_WaitOnFlagUntilTimeout>
 8004b64:	b130      	cbz	r0, 8004b74 <HAL_I2C_Mem_Read+0x64>
      return HAL_ERROR;
 8004b66:	2001      	movs	r0, #1
 8004b68:	e09d      	b.n	8004ca6 <HAL_I2C_Mem_Read+0x196>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004b6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b6e:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8004b70:	2001      	movs	r0, #1
 8004b72:	e098      	b.n	8004ca6 <HAL_I2C_Mem_Read+0x196>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b74:	2322      	movs	r3, #34	; 0x22
 8004b76:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b7a:	2340      	movs	r3, #64	; 0x40
 8004b7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b80:	2300      	movs	r3, #0
 8004b82:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8004b84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004b86:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8004b88:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004b8c:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b8e:	9601      	str	r6, [sp, #4]
 8004b90:	9700      	str	r7, [sp, #0]
 8004b92:	464b      	mov	r3, r9
 8004b94:	4642      	mov	r2, r8
 8004b96:	4629      	mov	r1, r5
 8004b98:	4620      	mov	r0, r4
 8004b9a:	f7ff fe1f 	bl	80047dc <I2C_RequestMemoryRead>
 8004b9e:	b970      	cbnz	r0, 8004bbe <HAL_I2C_Mem_Read+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ba0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	2bff      	cmp	r3, #255	; 0xff
 8004ba6:	d90f      	bls.n	8004bc8 <HAL_I2C_Mem_Read+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ba8:	22ff      	movs	r2, #255	; 0xff
 8004baa:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004bac:	4b43      	ldr	r3, [pc, #268]	; (8004cbc <HAL_I2C_Mem_Read+0x1ac>)
 8004bae:	9300      	str	r3, [sp, #0]
 8004bb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004bb4:	4629      	mov	r1, r5
 8004bb6:	4620      	mov	r0, r4
 8004bb8:	f7ff fcd1 	bl	800455e <I2C_TransferConfig>
 8004bbc:	e021      	b.n	8004c02 <HAL_I2C_Mem_Read+0xf2>
      __HAL_UNLOCK(hi2c);
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004bc4:	4658      	mov	r0, fp
 8004bc6:	e06e      	b.n	8004ca6 <HAL_I2C_Mem_Read+0x196>
      hi2c->XferSize = hi2c->XferCount;
 8004bc8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004bca:	b292      	uxth	r2, r2
 8004bcc:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004bce:	4b3b      	ldr	r3, [pc, #236]	; (8004cbc <HAL_I2C_Mem_Read+0x1ac>)
 8004bd0:	9300      	str	r3, [sp, #0]
 8004bd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bd6:	b2d2      	uxtb	r2, r2
 8004bd8:	4629      	mov	r1, r5
 8004bda:	4620      	mov	r0, r4
 8004bdc:	f7ff fcbf 	bl	800455e <I2C_TransferConfig>
 8004be0:	e00f      	b.n	8004c02 <HAL_I2C_Mem_Read+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 8004be2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004be4:	b292      	uxth	r2, r2
 8004be6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004be8:	2300      	movs	r3, #0
 8004bea:	9300      	str	r3, [sp, #0]
 8004bec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bf0:	b2d2      	uxtb	r2, r2
 8004bf2:	4629      	mov	r1, r5
 8004bf4:	4620      	mov	r0, r4
 8004bf6:	f7ff fcb2 	bl	800455e <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8004bfa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d034      	beq.n	8004c6c <HAL_I2C_Mem_Read+0x15c>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004c02:	9600      	str	r6, [sp, #0]
 8004c04:	463b      	mov	r3, r7
 8004c06:	2200      	movs	r2, #0
 8004c08:	2104      	movs	r1, #4
 8004c0a:	4620      	mov	r0, r4
 8004c0c:	f7ff fd7c 	bl	8004708 <I2C_WaitOnFlagUntilTimeout>
 8004c10:	2800      	cmp	r0, #0
 8004c12:	d14d      	bne.n	8004cb0 <HAL_I2C_Mem_Read+0x1a0>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004c14:	6823      	ldr	r3, [r4, #0]
 8004c16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c1a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004c1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c1e:	3301      	adds	r3, #1
 8004c20:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8004c22:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8004c24:	3a01      	subs	r2, #1
 8004c26:	b292      	uxth	r2, r2
 8004c28:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004c2a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004c34:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d0de      	beq.n	8004bfa <HAL_I2C_Mem_Read+0xea>
 8004c3c:	2a00      	cmp	r2, #0
 8004c3e:	d1dc      	bne.n	8004bfa <HAL_I2C_Mem_Read+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004c40:	9600      	str	r6, [sp, #0]
 8004c42:	463b      	mov	r3, r7
 8004c44:	2180      	movs	r1, #128	; 0x80
 8004c46:	4620      	mov	r0, r4
 8004c48:	f7ff fd5e 	bl	8004708 <I2C_WaitOnFlagUntilTimeout>
 8004c4c:	bb90      	cbnz	r0, 8004cb4 <HAL_I2C_Mem_Read+0x1a4>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c4e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	2bff      	cmp	r3, #255	; 0xff
 8004c54:	d9c5      	bls.n	8004be2 <HAL_I2C_Mem_Read+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c56:	22ff      	movs	r2, #255	; 0xff
 8004c58:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c62:	4629      	mov	r1, r5
 8004c64:	4620      	mov	r0, r4
 8004c66:	f7ff fc7a 	bl	800455e <I2C_TransferConfig>
 8004c6a:	e7c6      	b.n	8004bfa <HAL_I2C_Mem_Read+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c6c:	4632      	mov	r2, r6
 8004c6e:	4639      	mov	r1, r7
 8004c70:	4620      	mov	r0, r4
 8004c72:	f7ff fdef 	bl	8004854 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c76:	b9f8      	cbnz	r0, 8004cb8 <HAL_I2C_Mem_Read+0x1a8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c78:	6823      	ldr	r3, [r4, #0]
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004c7e:	6821      	ldr	r1, [r4, #0]
 8004c80:	684b      	ldr	r3, [r1, #4]
 8004c82:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8004c86:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8004c8a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8004c8e:	f023 0301 	bic.w	r3, r3, #1
 8004c92:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004c94:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8004c9e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8004ca2:	e000      	b.n	8004ca6 <HAL_I2C_Mem_Read+0x196>
    return HAL_BUSY;
 8004ca4:	2002      	movs	r0, #2
}
 8004ca6:	b003      	add	sp, #12
 8004ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8004cac:	2002      	movs	r0, #2
 8004cae:	e7fa      	b.n	8004ca6 <HAL_I2C_Mem_Read+0x196>
        return HAL_ERROR;
 8004cb0:	2001      	movs	r0, #1
 8004cb2:	e7f8      	b.n	8004ca6 <HAL_I2C_Mem_Read+0x196>
          return HAL_ERROR;
 8004cb4:	2001      	movs	r0, #1
 8004cb6:	e7f6      	b.n	8004ca6 <HAL_I2C_Mem_Read+0x196>
      return HAL_ERROR;
 8004cb8:	2001      	movs	r0, #1
 8004cba:	e7f4      	b.n	8004ca6 <HAL_I2C_Mem_Read+0x196>
 8004cbc:	80002400 	.word	0x80002400

08004cc0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004cc0:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cc2:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8004cc6:	b2d2      	uxtb	r2, r2
 8004cc8:	2a20      	cmp	r2, #32
 8004cca:	d123      	bne.n	8004d14 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ccc:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8004cd0:	2a01      	cmp	r2, #1
 8004cd2:	d021      	beq.n	8004d18 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004cda:	2224      	movs	r2, #36	; 0x24
 8004cdc:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ce0:	6800      	ldr	r0, [r0, #0]
 8004ce2:	6802      	ldr	r2, [r0, #0]
 8004ce4:	f022 0201 	bic.w	r2, r2, #1
 8004ce8:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004cea:	6818      	ldr	r0, [r3, #0]
 8004cec:	6802      	ldr	r2, [r0, #0]
 8004cee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004cf2:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004cf4:	6818      	ldr	r0, [r3, #0]
 8004cf6:	6802      	ldr	r2, [r0, #0]
 8004cf8:	4311      	orrs	r1, r2
 8004cfa:	6001      	str	r1, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004cfc:	6819      	ldr	r1, [r3, #0]
 8004cfe:	680a      	ldr	r2, [r1, #0]
 8004d00:	f042 0201 	orr.w	r2, r2, #1
 8004d04:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d06:	2220      	movs	r2, #32
 8004d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d0c:	2000      	movs	r0, #0
 8004d0e:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 8004d12:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8004d14:	2002      	movs	r0, #2
 8004d16:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8004d18:	2002      	movs	r0, #2
  }
}
 8004d1a:	4770      	bx	lr

08004d1c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004d1c:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d1e:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8004d22:	b2d2      	uxtb	r2, r2
 8004d24:	2a20      	cmp	r2, #32
 8004d26:	d121      	bne.n	8004d6c <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d28:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8004d2c:	2a01      	cmp	r2, #1
 8004d2e:	d01f      	beq.n	8004d70 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8004d30:	2201      	movs	r2, #1
 8004d32:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d36:	2224      	movs	r2, #36	; 0x24
 8004d38:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d3c:	6800      	ldr	r0, [r0, #0]
 8004d3e:	6802      	ldr	r2, [r0, #0]
 8004d40:	f022 0201 	bic.w	r2, r2, #1
 8004d44:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004d46:	6818      	ldr	r0, [r3, #0]
 8004d48:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004d4a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004d4e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004d52:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d54:	6819      	ldr	r1, [r3, #0]
 8004d56:	680a      	ldr	r2, [r1, #0]
 8004d58:	f042 0201 	orr.w	r2, r2, #1
 8004d5c:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d5e:	2220      	movs	r2, #32
 8004d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d64:	2000      	movs	r0, #0
 8004d66:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 8004d6a:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8004d6c:	2002      	movs	r0, #2
 8004d6e:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8004d70:	2002      	movs	r0, #2
  }
}
 8004d72:	4770      	bx	lr

08004d74 <HAL_LTDC_MspInit>:
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8004d74:	4770      	bx	lr
	...

08004d78 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 8004d78:	2800      	cmp	r0, #0
 8004d7a:	d072      	beq.n	8004e62 <HAL_LTDC_Init+0xea>
{
 8004d7c:	b538      	push	{r3, r4, r5, lr}
 8004d7e:	4604      	mov	r4, r0
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004d80:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d067      	beq.n	8004e58 <HAL_LTDC_Init+0xe0>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004d88:	2302      	movs	r3, #2
 8004d8a:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004d8e:	6822      	ldr	r2, [r4, #0]
 8004d90:	6993      	ldr	r3, [r2, #24]
 8004d92:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004d96:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004d98:	6821      	ldr	r1, [r4, #0]
 8004d9a:	698a      	ldr	r2, [r1, #24]
 8004d9c:	6863      	ldr	r3, [r4, #4]
 8004d9e:	68a0      	ldr	r0, [r4, #8]
 8004da0:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004da2:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004da4:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004da6:	6920      	ldr	r0, [r4, #16]
 8004da8:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004daa:	4313      	orrs	r3, r2
 8004dac:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004dae:	6821      	ldr	r1, [r4, #0]
 8004db0:	688a      	ldr	r2, [r1, #8]
 8004db2:	4b2d      	ldr	r3, [pc, #180]	; (8004e68 <HAL_LTDC_Init+0xf0>)
 8004db4:	401a      	ands	r2, r3
 8004db6:	608a      	str	r2, [r1, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004db8:	6820      	ldr	r0, [r4, #0]
 8004dba:	6882      	ldr	r2, [r0, #8]
 8004dbc:	69a1      	ldr	r1, [r4, #24]
 8004dbe:	6965      	ldr	r5, [r4, #20]
 8004dc0:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004dc8:	6821      	ldr	r1, [r4, #0]
 8004dca:	68ca      	ldr	r2, [r1, #12]
 8004dcc:	401a      	ands	r2, r3
 8004dce:	60ca      	str	r2, [r1, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004dd0:	6820      	ldr	r0, [r4, #0]
 8004dd2:	68c2      	ldr	r2, [r0, #12]
 8004dd4:	6a21      	ldr	r1, [r4, #32]
 8004dd6:	69e5      	ldr	r5, [r4, #28]
 8004dd8:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004de0:	6821      	ldr	r1, [r4, #0]
 8004de2:	690a      	ldr	r2, [r1, #16]
 8004de4:	401a      	ands	r2, r3
 8004de6:	610a      	str	r2, [r1, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004de8:	6820      	ldr	r0, [r4, #0]
 8004dea:	6902      	ldr	r2, [r0, #16]
 8004dec:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004dee:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004df0:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8004df4:	430a      	orrs	r2, r1
 8004df6:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004df8:	6821      	ldr	r1, [r4, #0]
 8004dfa:	694a      	ldr	r2, [r1, #20]
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004e00:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004e02:	6821      	ldr	r1, [r4, #0]
 8004e04:	694b      	ldr	r3, [r1, #20]
 8004e06:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004e08:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004e10:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004e14:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8004e18:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004e1a:	6821      	ldr	r1, [r4, #0]
 8004e1c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8004e1e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004e22:	62ca      	str	r2, [r1, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004e24:	6821      	ldr	r1, [r4, #0]
 8004e26:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8004e28:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004e2c:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8004e30:	4303      	orrs	r3, r0
 8004e32:	4313      	orrs	r3, r2
 8004e34:	62cb      	str	r3, [r1, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004e36:	6822      	ldr	r2, [r4, #0]
 8004e38:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004e3a:	f043 0306 	orr.w	r3, r3, #6
 8004e3e:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8004e40:	6822      	ldr	r2, [r4, #0]
 8004e42:	6993      	ldr	r3, [r2, #24]
 8004e44:	f043 0301 	orr.w	r3, r3, #1
 8004e48:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004e4a:	2000      	movs	r0, #0
 8004e4c:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8004e50:	2301      	movs	r3, #1
 8004e52:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8004e56:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 8004e58:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8004e5c:	f7ff ff8a 	bl	8004d74 <HAL_LTDC_MspInit>
 8004e60:	e792      	b.n	8004d88 <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 8004e62:	2001      	movs	r0, #1
}
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	f000f800 	.word	0xf000f800

08004e6c <HAL_LTDCEx_StructInitFromVideoConfig>:

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == \
 8004e6c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
                            DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 8004e6e:	b10b      	cbz	r3, 8004e74 <HAL_LTDCEx_StructInitFromVideoConfig+0x8>
 8004e70:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == \
 8004e74:	60c3      	str	r3, [r0, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 8004e76:	6a0b      	ldr	r3, [r1, #32]
 8004e78:	bb0b      	cbnz	r3, 8004ebe <HAL_LTDCEx_StructInitFromVideoConfig+0x52>
 8004e7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e7e:	6083      	str	r3, [r0, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 8004e80:	69cb      	ldr	r3, [r1, #28]
 8004e82:	b9f3      	cbnz	r3, 8004ec2 <HAL_LTDCEx_StructInitFromVideoConfig+0x56>
 8004e84:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004e88:	6043      	str	r3, [r0, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 8004e8a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	6183      	str	r3, [r0, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 8004e90:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8004e92:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 8004e94:	4413      	add	r3, r2
 8004e96:	3b01      	subs	r3, #1
 8004e98:	6203      	str	r3, [r0, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8004e9a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8004e9c:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 8004e9e:	4413      	add	r3, r2
                                   VidCfg->VerticalActive - 1U;
 8004ea0:	6c0a      	ldr	r2, [r1, #64]	; 0x40
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8004ea2:	4413      	add	r3, r2
                                   VidCfg->VerticalActive - 1U;
 8004ea4:	3b01      	subs	r3, #1
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8004ea6:	6283      	str	r3, [r0, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8004ea8:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8004eaa:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 8004eac:	4413      	add	r3, r2
                                   VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 8004eae:	6c0a      	ldr	r2, [r1, #64]	; 0x40
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8004eb0:	4413      	add	r3, r2
                                   VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 8004eb2:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8004eb4:	4413      	add	r3, r2
 8004eb6:	3b01      	subs	r3, #1
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8004eb8:	6303      	str	r3, [r0, #48]	; 0x30

  return HAL_OK;
}
 8004eba:	2000      	movs	r0, #0
 8004ebc:	4770      	bx	lr
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	e7dd      	b.n	8004e7e <HAL_LTDCEx_StructInitFromVideoConfig+0x12>
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	e7e0      	b.n	8004e88 <HAL_LTDCEx_StructInitFromVideoConfig+0x1c>
	...

08004ec8 <HAL_PWREx_EnableOverDrive>:
 *         critical tasks and when the system clock source is either HSI or HSE. 
 *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
 *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void) {
 8004ec8:	b510      	push	{r4, lr}
 8004eca:	b082      	sub	sp, #8
	uint32_t tickstart = 0;

	__HAL_RCC_PWR_CLK_ENABLE();
 8004ecc:	4b1b      	ldr	r3, [pc, #108]	; (8004f3c <HAL_PWREx_EnableOverDrive+0x74>)
 8004ece:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ed0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004ed4:	641a      	str	r2, [r3, #64]	; 0x40
 8004ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004edc:	9301      	str	r3, [sp, #4]
 8004ede:	9b01      	ldr	r3, [sp, #4]

	/* Enable the Over-drive to extend the clock frequency to 216 MHz */
	__HAL_PWR_OVERDRIVE_ENABLE();
 8004ee0:	4a17      	ldr	r2, [pc, #92]	; (8004f40 <HAL_PWREx_EnableOverDrive+0x78>)
 8004ee2:	6813      	ldr	r3, [r2, #0]
 8004ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ee8:	6013      	str	r3, [r2, #0]

	/* Get tick */
	tickstart = HAL_GetTick();
 8004eea:	f7fe fb9f 	bl	800362c <HAL_GetTick>
 8004eee:	4604      	mov	r4, r0

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY)) {
 8004ef0:	4b13      	ldr	r3, [pc, #76]	; (8004f40 <HAL_PWREx_EnableOverDrive+0x78>)
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004ef8:	d108      	bne.n	8004f0c <HAL_PWREx_EnableOverDrive+0x44>
		if ((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE) {
 8004efa:	f7fe fb97 	bl	800362c <HAL_GetTick>
 8004efe:	1b00      	subs	r0, r0, r4
 8004f00:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004f04:	d9f4      	bls.n	8004ef0 <HAL_PWREx_EnableOverDrive+0x28>
			return HAL_TIMEOUT;
 8004f06:	2003      	movs	r0, #3
		if ((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE) {
			return HAL_TIMEOUT;
		}
	}
	return HAL_OK;
}
 8004f08:	b002      	add	sp, #8
 8004f0a:	bd10      	pop	{r4, pc}
	__HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004f0c:	4a0c      	ldr	r2, [pc, #48]	; (8004f40 <HAL_PWREx_EnableOverDrive+0x78>)
 8004f0e:	6813      	ldr	r3, [r2, #0]
 8004f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f14:	6013      	str	r3, [r2, #0]
	tickstart = HAL_GetTick();
 8004f16:	f7fe fb89 	bl	800362c <HAL_GetTick>
 8004f1a:	4604      	mov	r4, r0
	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY)) {
 8004f1c:	4b08      	ldr	r3, [pc, #32]	; (8004f40 <HAL_PWREx_EnableOverDrive+0x78>)
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004f24:	d107      	bne.n	8004f36 <HAL_PWREx_EnableOverDrive+0x6e>
		if ((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE) {
 8004f26:	f7fe fb81 	bl	800362c <HAL_GetTick>
 8004f2a:	1b00      	subs	r0, r0, r4
 8004f2c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004f30:	d9f4      	bls.n	8004f1c <HAL_PWREx_EnableOverDrive+0x54>
			return HAL_TIMEOUT;
 8004f32:	2003      	movs	r0, #3
 8004f34:	e7e8      	b.n	8004f08 <HAL_PWREx_EnableOverDrive+0x40>
	return HAL_OK;
 8004f36:	2000      	movs	r0, #0
 8004f38:	e7e6      	b.n	8004f08 <HAL_PWREx_EnableOverDrive+0x40>
 8004f3a:	bf00      	nop
 8004f3c:	40023800 	.word	0x40023800
 8004f40:	40007000 	.word	0x40007000

08004f44 <HAL_RCC_OscConfig>:
	uint32_t tickstart;
	uint32_t pll_config;
	FlagStatus pwrclkchanged = RESET;

	/* Check Null pointer */
	if (RCC_OscInitStruct == NULL) {
 8004f44:	2800      	cmp	r0, #0
 8004f46:	f000 8206 	beq.w	8005356 <HAL_RCC_OscConfig+0x412>
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef *RCC_OscInitStruct) {
 8004f4a:	b570      	push	{r4, r5, r6, lr}
 8004f4c:	b082      	sub	sp, #8
 8004f4e:	4604      	mov	r4, r0

	/* Check the parameters */
	assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

	/*------------------------------- HSE Configuration ------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE)
 8004f50:	6803      	ldr	r3, [r0, #0]
 8004f52:	f013 0f01 	tst.w	r3, #1
 8004f56:	d029      	beq.n	8004fac <HAL_RCC_OscConfig+0x68>
			== RCC_OSCILLATORTYPE_HSE) {
		/* Check the parameters */
		assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
		/* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f58:	4b95      	ldr	r3, [pc, #596]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	f003 030c 	and.w	r3, r3, #12
 8004f60:	2b04      	cmp	r3, #4
 8004f62:	d01a      	beq.n	8004f9a <HAL_RCC_OscConfig+0x56>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE()
 8004f64:	4b92      	ldr	r3, [pc, #584]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f003 030c 	and.w	r3, r3, #12
 8004f6c:	2b08      	cmp	r3, #8
 8004f6e:	d00f      	beq.n	8004f90 <HAL_RCC_OscConfig+0x4c>
					&& (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
				return HAL_ERROR;
			}
		} else {
			/* Set the new HSE configuration ---------------------------------------*/
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f70:	6863      	ldr	r3, [r4, #4]
 8004f72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f76:	d040      	beq.n	8004ffa <HAL_RCC_OscConfig+0xb6>
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d154      	bne.n	8005026 <HAL_RCC_OscConfig+0xe2>
 8004f7c:	4b8c      	ldr	r3, [pc, #560]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004f84:	601a      	str	r2, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004f8c:	601a      	str	r2, [r3, #0]
 8004f8e:	e039      	b.n	8005004 <HAL_RCC_OscConfig+0xc0>
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 8004f90:	4b87      	ldr	r3, [pc, #540]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004f98:	d0ea      	beq.n	8004f70 <HAL_RCC_OscConfig+0x2c>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f9a:	4b85      	ldr	r3, [pc, #532]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004fa2:	d003      	beq.n	8004fac <HAL_RCC_OscConfig+0x68>
					&& (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 8004fa4:	6863      	ldr	r3, [r4, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	f000 81d7 	beq.w	800535a <HAL_RCC_OscConfig+0x416>
				}
			}
		}
	}
	/*----------------------------- HSI Configuration --------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI)
 8004fac:	6823      	ldr	r3, [r4, #0]
 8004fae:	f013 0f02 	tst.w	r3, #2
 8004fb2:	d074      	beq.n	800509e <HAL_RCC_OscConfig+0x15a>
		assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
		assert_param(
				IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

		/* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004fb4:	4b7e      	ldr	r3, [pc, #504]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f013 0f0c 	tst.w	r3, #12
 8004fbc:	d05e      	beq.n	800507c <HAL_RCC_OscConfig+0x138>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE()
 8004fbe:	4b7c      	ldr	r3, [pc, #496]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f003 030c 	and.w	r3, r3, #12
 8004fc6:	2b08      	cmp	r3, #8
 8004fc8:	d053      	beq.n	8005072 <HAL_RCC_OscConfig+0x12e>
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
						RCC_OscInitStruct->HSICalibrationValue);
			}
		} else {
			/* Check the HSI State */
			if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF) {
 8004fca:	68e3      	ldr	r3, [r4, #12]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f000 8089 	beq.w	80050e4 <HAL_RCC_OscConfig+0x1a0>
				/* Enable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_ENABLE();
 8004fd2:	4a77      	ldr	r2, [pc, #476]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 8004fd4:	6813      	ldr	r3, [r2, #0]
 8004fd6:	f043 0301 	orr.w	r3, r3, #1
 8004fda:	6013      	str	r3, [r2, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8004fdc:	f7fe fb26 	bl	800362c <HAL_GetTick>
 8004fe0:	4605      	mov	r5, r0

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8004fe2:	4b73      	ldr	r3, [pc, #460]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f013 0f02 	tst.w	r3, #2
 8004fea:	d172      	bne.n	80050d2 <HAL_RCC_OscConfig+0x18e>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8004fec:	f7fe fb1e 	bl	800362c <HAL_GetTick>
 8004ff0:	1b40      	subs	r0, r0, r5
 8004ff2:	2802      	cmp	r0, #2
 8004ff4:	d9f5      	bls.n	8004fe2 <HAL_RCC_OscConfig+0x9e>
						return HAL_TIMEOUT;
 8004ff6:	2003      	movs	r0, #3
 8004ff8:	e1b4      	b.n	8005364 <HAL_RCC_OscConfig+0x420>
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ffa:	4a6d      	ldr	r2, [pc, #436]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 8004ffc:	6813      	ldr	r3, [r2, #0]
 8004ffe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005002:	6013      	str	r3, [r2, #0]
			if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF) {
 8005004:	6863      	ldr	r3, [r4, #4]
 8005006:	b32b      	cbz	r3, 8005054 <HAL_RCC_OscConfig+0x110>
				tickstart = HAL_GetTick();
 8005008:	f7fe fb10 	bl	800362c <HAL_GetTick>
 800500c:	4605      	mov	r5, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 800500e:	4b68      	ldr	r3, [pc, #416]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005016:	d1c9      	bne.n	8004fac <HAL_RCC_OscConfig+0x68>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8005018:	f7fe fb08 	bl	800362c <HAL_GetTick>
 800501c:	1b40      	subs	r0, r0, r5
 800501e:	2864      	cmp	r0, #100	; 0x64
 8005020:	d9f5      	bls.n	800500e <HAL_RCC_OscConfig+0xca>
						return HAL_TIMEOUT;
 8005022:	2003      	movs	r0, #3
 8005024:	e19e      	b.n	8005364 <HAL_RCC_OscConfig+0x420>
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005026:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800502a:	d009      	beq.n	8005040 <HAL_RCC_OscConfig+0xfc>
 800502c:	4b60      	ldr	r3, [pc, #384]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005034:	601a      	str	r2, [r3, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800503c:	601a      	str	r2, [r3, #0]
 800503e:	e7e1      	b.n	8005004 <HAL_RCC_OscConfig+0xc0>
 8005040:	4b5b      	ldr	r3, [pc, #364]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005048:	601a      	str	r2, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005050:	601a      	str	r2, [r3, #0]
 8005052:	e7d7      	b.n	8005004 <HAL_RCC_OscConfig+0xc0>
				tickstart = HAL_GetTick();
 8005054:	f7fe faea 	bl	800362c <HAL_GetTick>
 8005058:	4605      	mov	r5, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 800505a:	4b55      	ldr	r3, [pc, #340]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005062:	d0a3      	beq.n	8004fac <HAL_RCC_OscConfig+0x68>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8005064:	f7fe fae2 	bl	800362c <HAL_GetTick>
 8005068:	1b40      	subs	r0, r0, r5
 800506a:	2864      	cmp	r0, #100	; 0x64
 800506c:	d9f5      	bls.n	800505a <HAL_RCC_OscConfig+0x116>
						return HAL_TIMEOUT;
 800506e:	2003      	movs	r0, #3
 8005070:	e178      	b.n	8005364 <HAL_RCC_OscConfig+0x420>
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 8005072:	4b4f      	ldr	r3, [pc, #316]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800507a:	d1a6      	bne.n	8004fca <HAL_RCC_OscConfig+0x86>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800507c:	4b4c      	ldr	r3, [pc, #304]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f013 0f02 	tst.w	r3, #2
 8005084:	d003      	beq.n	800508e <HAL_RCC_OscConfig+0x14a>
					&& (RCC_OscInitStruct->HSIState != RCC_HSI_ON)) {
 8005086:	68e3      	ldr	r3, [r4, #12]
 8005088:	2b01      	cmp	r3, #1
 800508a:	f040 8168 	bne.w	800535e <HAL_RCC_OscConfig+0x41a>
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 800508e:	4a48      	ldr	r2, [pc, #288]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 8005090:	6813      	ldr	r3, [r2, #0]
 8005092:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005096:	6921      	ldr	r1, [r4, #16]
 8005098:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800509c:	6013      	str	r3, [r2, #0]
				}
			}
		}
	}
	/*------------------------------ LSI Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI)
 800509e:	6823      	ldr	r3, [r4, #0]
 80050a0:	f013 0f08 	tst.w	r3, #8
 80050a4:	d046      	beq.n	8005134 <HAL_RCC_OscConfig+0x1f0>
			== RCC_OSCILLATORTYPE_LSI) {
		/* Check the parameters */
		assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

		/* Check the LSI State */
		if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF) {
 80050a6:	6963      	ldr	r3, [r4, #20]
 80050a8:	b383      	cbz	r3, 800510c <HAL_RCC_OscConfig+0x1c8>
			/* Enable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_ENABLE();
 80050aa:	4a41      	ldr	r2, [pc, #260]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 80050ac:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80050ae:	f043 0301 	orr.w	r3, r3, #1
 80050b2:	6753      	str	r3, [r2, #116]	; 0x74

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 80050b4:	f7fe faba 	bl	800362c <HAL_GetTick>
 80050b8:	4605      	mov	r5, r0

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 80050ba:	4b3d      	ldr	r3, [pc, #244]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 80050bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050be:	f013 0f02 	tst.w	r3, #2
 80050c2:	d137      	bne.n	8005134 <HAL_RCC_OscConfig+0x1f0>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 80050c4:	f7fe fab2 	bl	800362c <HAL_GetTick>
 80050c8:	1b40      	subs	r0, r0, r5
 80050ca:	2802      	cmp	r0, #2
 80050cc:	d9f5      	bls.n	80050ba <HAL_RCC_OscConfig+0x176>
					return HAL_TIMEOUT;
 80050ce:	2003      	movs	r0, #3
 80050d0:	e148      	b.n	8005364 <HAL_RCC_OscConfig+0x420>
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 80050d2:	4a37      	ldr	r2, [pc, #220]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 80050d4:	6813      	ldr	r3, [r2, #0]
 80050d6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80050da:	6921      	ldr	r1, [r4, #16]
 80050dc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80050e0:	6013      	str	r3, [r2, #0]
 80050e2:	e7dc      	b.n	800509e <HAL_RCC_OscConfig+0x15a>
				__HAL_RCC_HSI_DISABLE();
 80050e4:	4a32      	ldr	r2, [pc, #200]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 80050e6:	6813      	ldr	r3, [r2, #0]
 80050e8:	f023 0301 	bic.w	r3, r3, #1
 80050ec:	6013      	str	r3, [r2, #0]
				tickstart = HAL_GetTick();
 80050ee:	f7fe fa9d 	bl	800362c <HAL_GetTick>
 80050f2:	4605      	mov	r5, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 80050f4:	4b2e      	ldr	r3, [pc, #184]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f013 0f02 	tst.w	r3, #2
 80050fc:	d0cf      	beq.n	800509e <HAL_RCC_OscConfig+0x15a>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 80050fe:	f7fe fa95 	bl	800362c <HAL_GetTick>
 8005102:	1b40      	subs	r0, r0, r5
 8005104:	2802      	cmp	r0, #2
 8005106:	d9f5      	bls.n	80050f4 <HAL_RCC_OscConfig+0x1b0>
						return HAL_TIMEOUT;
 8005108:	2003      	movs	r0, #3
 800510a:	e12b      	b.n	8005364 <HAL_RCC_OscConfig+0x420>
				}
			}
		} else {
			/* Disable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_DISABLE();
 800510c:	4a28      	ldr	r2, [pc, #160]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 800510e:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8005110:	f023 0301 	bic.w	r3, r3, #1
 8005114:	6753      	str	r3, [r2, #116]	; 0x74

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8005116:	f7fe fa89 	bl	800362c <HAL_GetTick>
 800511a:	4605      	mov	r5, r0

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 800511c:	4b24      	ldr	r3, [pc, #144]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 800511e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005120:	f013 0f02 	tst.w	r3, #2
 8005124:	d006      	beq.n	8005134 <HAL_RCC_OscConfig+0x1f0>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 8005126:	f7fe fa81 	bl	800362c <HAL_GetTick>
 800512a:	1b40      	subs	r0, r0, r5
 800512c:	2802      	cmp	r0, #2
 800512e:	d9f5      	bls.n	800511c <HAL_RCC_OscConfig+0x1d8>
					return HAL_TIMEOUT;
 8005130:	2003      	movs	r0, #3
 8005132:	e117      	b.n	8005364 <HAL_RCC_OscConfig+0x420>
				}
			}
		}
	}
	/*------------------------------ LSE Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE)
 8005134:	6823      	ldr	r3, [r4, #0]
 8005136:	f013 0f04 	tst.w	r3, #4
 800513a:	d07d      	beq.n	8005238 <HAL_RCC_OscConfig+0x2f4>
		/* Check the parameters */
		assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

		/* Update LSE configuration in Backup Domain control register    */
		/* Requires to enable write access to Backup Domain of necessary */
		if (__HAL_RCC_PWR_IS_CLK_DISABLED()) {
 800513c:	4b1c      	ldr	r3, [pc, #112]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 800513e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005140:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8005144:	d11e      	bne.n	8005184 <HAL_RCC_OscConfig+0x240>
			/* Enable Power Clock*/
			__HAL_RCC_PWR_CLK_ENABLE();
 8005146:	4b1a      	ldr	r3, [pc, #104]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 8005148:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800514a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800514e:	641a      	str	r2, [r3, #64]	; 0x40
 8005150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005156:	9301      	str	r3, [sp, #4]
 8005158:	9b01      	ldr	r3, [sp, #4]
			pwrclkchanged = SET;
 800515a:	2501      	movs	r5, #1
		}

		if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP)) {
 800515c:	4b15      	ldr	r3, [pc, #84]	; (80051b4 <HAL_RCC_OscConfig+0x270>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005164:	d010      	beq.n	8005188 <HAL_RCC_OscConfig+0x244>
				}
			}
		}

		/* Set the new LSE configuration -----------------------------------------*/
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005166:	68a3      	ldr	r3, [r4, #8]
 8005168:	2b01      	cmp	r3, #1
 800516a:	d025      	beq.n	80051b8 <HAL_RCC_OscConfig+0x274>
 800516c:	2b00      	cmp	r3, #0
 800516e:	d13b      	bne.n	80051e8 <HAL_RCC_OscConfig+0x2a4>
 8005170:	4b0f      	ldr	r3, [pc, #60]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 8005172:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005174:	f022 0201 	bic.w	r2, r2, #1
 8005178:	671a      	str	r2, [r3, #112]	; 0x70
 800517a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800517c:	f022 0204 	bic.w	r2, r2, #4
 8005180:	671a      	str	r2, [r3, #112]	; 0x70
 8005182:	e01e      	b.n	80051c2 <HAL_RCC_OscConfig+0x27e>
	FlagStatus pwrclkchanged = RESET;
 8005184:	2500      	movs	r5, #0
 8005186:	e7e9      	b.n	800515c <HAL_RCC_OscConfig+0x218>
			PWR->CR1 |= PWR_CR1_DBP;
 8005188:	4a0a      	ldr	r2, [pc, #40]	; (80051b4 <HAL_RCC_OscConfig+0x270>)
 800518a:	6813      	ldr	r3, [r2, #0]
 800518c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005190:	6013      	str	r3, [r2, #0]
			tickstart = HAL_GetTick();
 8005192:	f7fe fa4b 	bl	800362c <HAL_GetTick>
 8005196:	4606      	mov	r6, r0
			while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP)) {
 8005198:	4b06      	ldr	r3, [pc, #24]	; (80051b4 <HAL_RCC_OscConfig+0x270>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f413 7f80 	tst.w	r3, #256	; 0x100
 80051a0:	d1e1      	bne.n	8005166 <HAL_RCC_OscConfig+0x222>
				if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 80051a2:	f7fe fa43 	bl	800362c <HAL_GetTick>
 80051a6:	1b80      	subs	r0, r0, r6
 80051a8:	2864      	cmp	r0, #100	; 0x64
 80051aa:	d9f5      	bls.n	8005198 <HAL_RCC_OscConfig+0x254>
					return HAL_TIMEOUT;
 80051ac:	2003      	movs	r0, #3
 80051ae:	e0d9      	b.n	8005364 <HAL_RCC_OscConfig+0x420>
 80051b0:	40023800 	.word	0x40023800
 80051b4:	40007000 	.word	0x40007000
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051b8:	4a72      	ldr	r2, [pc, #456]	; (8005384 <HAL_RCC_OscConfig+0x440>)
 80051ba:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80051bc:	f043 0301 	orr.w	r3, r3, #1
 80051c0:	6713      	str	r3, [r2, #112]	; 0x70
		/* Check the LSE State */
		if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF) {
 80051c2:	68a3      	ldr	r3, [r4, #8]
 80051c4:	b333      	cbz	r3, 8005214 <HAL_RCC_OscConfig+0x2d0>
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 80051c6:	f7fe fa31 	bl	800362c <HAL_GetTick>
 80051ca:	4606      	mov	r6, r0

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 80051cc:	4b6d      	ldr	r3, [pc, #436]	; (8005384 <HAL_RCC_OscConfig+0x440>)
 80051ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051d0:	f013 0f02 	tst.w	r3, #2
 80051d4:	d12f      	bne.n	8005236 <HAL_RCC_OscConfig+0x2f2>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 80051d6:	f7fe fa29 	bl	800362c <HAL_GetTick>
 80051da:	1b80      	subs	r0, r0, r6
 80051dc:	f241 3388 	movw	r3, #5000	; 0x1388
 80051e0:	4298      	cmp	r0, r3
 80051e2:	d9f3      	bls.n	80051cc <HAL_RCC_OscConfig+0x288>
					return HAL_TIMEOUT;
 80051e4:	2003      	movs	r0, #3
 80051e6:	e0bd      	b.n	8005364 <HAL_RCC_OscConfig+0x420>
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051e8:	2b05      	cmp	r3, #5
 80051ea:	d009      	beq.n	8005200 <HAL_RCC_OscConfig+0x2bc>
 80051ec:	4b65      	ldr	r3, [pc, #404]	; (8005384 <HAL_RCC_OscConfig+0x440>)
 80051ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80051f0:	f022 0201 	bic.w	r2, r2, #1
 80051f4:	671a      	str	r2, [r3, #112]	; 0x70
 80051f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80051f8:	f022 0204 	bic.w	r2, r2, #4
 80051fc:	671a      	str	r2, [r3, #112]	; 0x70
 80051fe:	e7e0      	b.n	80051c2 <HAL_RCC_OscConfig+0x27e>
 8005200:	4b60      	ldr	r3, [pc, #384]	; (8005384 <HAL_RCC_OscConfig+0x440>)
 8005202:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005204:	f042 0204 	orr.w	r2, r2, #4
 8005208:	671a      	str	r2, [r3, #112]	; 0x70
 800520a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800520c:	f042 0201 	orr.w	r2, r2, #1
 8005210:	671a      	str	r2, [r3, #112]	; 0x70
 8005212:	e7d6      	b.n	80051c2 <HAL_RCC_OscConfig+0x27e>
				}
			}
		} else {
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8005214:	f7fe fa0a 	bl	800362c <HAL_GetTick>
 8005218:	4606      	mov	r6, r0

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 800521a:	4b5a      	ldr	r3, [pc, #360]	; (8005384 <HAL_RCC_OscConfig+0x440>)
 800521c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800521e:	f013 0f02 	tst.w	r3, #2
 8005222:	d008      	beq.n	8005236 <HAL_RCC_OscConfig+0x2f2>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8005224:	f7fe fa02 	bl	800362c <HAL_GetTick>
 8005228:	1b80      	subs	r0, r0, r6
 800522a:	f241 3388 	movw	r3, #5000	; 0x1388
 800522e:	4298      	cmp	r0, r3
 8005230:	d9f3      	bls.n	800521a <HAL_RCC_OscConfig+0x2d6>
					return HAL_TIMEOUT;
 8005232:	2003      	movs	r0, #3
 8005234:	e096      	b.n	8005364 <HAL_RCC_OscConfig+0x420>
				}
			}
		}

		/* Restore clock configuration if changed */
		if (pwrclkchanged == SET) {
 8005236:	b9fd      	cbnz	r5, 8005278 <HAL_RCC_OscConfig+0x334>
		}
	}
	/*-------------------------------- PLL Configuration -----------------------*/
	/* Check the parameters */
	assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
	if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE) {
 8005238:	69a3      	ldr	r3, [r4, #24]
 800523a:	2b00      	cmp	r3, #0
 800523c:	f000 8091 	beq.w	8005362 <HAL_RCC_OscConfig+0x41e>
		/* Check if the PLL is used as system clock or not */
		if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {
 8005240:	4a50      	ldr	r2, [pc, #320]	; (8005384 <HAL_RCC_OscConfig+0x440>)
 8005242:	6892      	ldr	r2, [r2, #8]
 8005244:	f002 020c 	and.w	r2, r2, #12
 8005248:	2a08      	cmp	r2, #8
 800524a:	d059      	beq.n	8005300 <HAL_RCC_OscConfig+0x3bc>
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON) {
 800524c:	2b02      	cmp	r3, #2
 800524e:	d019      	beq.n	8005284 <HAL_RCC_OscConfig+0x340>
						return HAL_TIMEOUT;
					}
				}
			} else {
				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 8005250:	4a4c      	ldr	r2, [pc, #304]	; (8005384 <HAL_RCC_OscConfig+0x440>)
 8005252:	6813      	ldr	r3, [r2, #0]
 8005254:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005258:	6013      	str	r3, [r2, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 800525a:	f7fe f9e7 	bl	800362c <HAL_GetTick>
 800525e:	4604      	mov	r4, r0

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8005260:	4b48      	ldr	r3, [pc, #288]	; (8005384 <HAL_RCC_OscConfig+0x440>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005268:	d048      	beq.n	80052fc <HAL_RCC_OscConfig+0x3b8>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 800526a:	f7fe f9df 	bl	800362c <HAL_GetTick>
 800526e:	1b00      	subs	r0, r0, r4
 8005270:	2802      	cmp	r0, #2
 8005272:	d9f5      	bls.n	8005260 <HAL_RCC_OscConfig+0x31c>
						return HAL_TIMEOUT;
 8005274:	2003      	movs	r0, #3
 8005276:	e075      	b.n	8005364 <HAL_RCC_OscConfig+0x420>
			__HAL_RCC_PWR_CLK_DISABLE();
 8005278:	4a42      	ldr	r2, [pc, #264]	; (8005384 <HAL_RCC_OscConfig+0x440>)
 800527a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800527c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005280:	6413      	str	r3, [r2, #64]	; 0x40
 8005282:	e7d9      	b.n	8005238 <HAL_RCC_OscConfig+0x2f4>
				__HAL_RCC_PLL_DISABLE();
 8005284:	4a3f      	ldr	r2, [pc, #252]	; (8005384 <HAL_RCC_OscConfig+0x440>)
 8005286:	6813      	ldr	r3, [r2, #0]
 8005288:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800528c:	6013      	str	r3, [r2, #0]
				tickstart = HAL_GetTick();
 800528e:	f7fe f9cd 	bl	800362c <HAL_GetTick>
 8005292:	4605      	mov	r5, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8005294:	4b3b      	ldr	r3, [pc, #236]	; (8005384 <HAL_RCC_OscConfig+0x440>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800529c:	d006      	beq.n	80052ac <HAL_RCC_OscConfig+0x368>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 800529e:	f7fe f9c5 	bl	800362c <HAL_GetTick>
 80052a2:	1b40      	subs	r0, r0, r5
 80052a4:	2802      	cmp	r0, #2
 80052a6:	d9f5      	bls.n	8005294 <HAL_RCC_OscConfig+0x350>
						return HAL_TIMEOUT;
 80052a8:	2003      	movs	r0, #3
 80052aa:	e05b      	b.n	8005364 <HAL_RCC_OscConfig+0x420>
				__HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052ac:	69e3      	ldr	r3, [r4, #28]
 80052ae:	6a22      	ldr	r2, [r4, #32]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80052b4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80052b8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80052ba:	0852      	lsrs	r2, r2, #1
 80052bc:	3a01      	subs	r2, #1
 80052be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80052c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80052c4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80052c8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80052ca:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80052ce:	4a2d      	ldr	r2, [pc, #180]	; (8005384 <HAL_RCC_OscConfig+0x440>)
 80052d0:	6053      	str	r3, [r2, #4]
				__HAL_RCC_PLL_ENABLE();
 80052d2:	6813      	ldr	r3, [r2, #0]
 80052d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052d8:	6013      	str	r3, [r2, #0]
				tickstart = HAL_GetTick();
 80052da:	f7fe f9a7 	bl	800362c <HAL_GetTick>
 80052de:	4604      	mov	r4, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 80052e0:	4b28      	ldr	r3, [pc, #160]	; (8005384 <HAL_RCC_OscConfig+0x440>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80052e8:	d106      	bne.n	80052f8 <HAL_RCC_OscConfig+0x3b4>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 80052ea:	f7fe f99f 	bl	800362c <HAL_GetTick>
 80052ee:	1b00      	subs	r0, r0, r4
 80052f0:	2802      	cmp	r0, #2
 80052f2:	d9f5      	bls.n	80052e0 <HAL_RCC_OscConfig+0x39c>
						return HAL_TIMEOUT;
 80052f4:	2003      	movs	r0, #3
 80052f6:	e035      	b.n	8005364 <HAL_RCC_OscConfig+0x420>
					{
				return HAL_ERROR;
			}
		}
	}
	return HAL_OK;
 80052f8:	2000      	movs	r0, #0
 80052fa:	e033      	b.n	8005364 <HAL_RCC_OscConfig+0x420>
 80052fc:	2000      	movs	r0, #0
 80052fe:	e031      	b.n	8005364 <HAL_RCC_OscConfig+0x420>
			pll_config = RCC->PLLCFGR;
 8005300:	4a20      	ldr	r2, [pc, #128]	; (8005384 <HAL_RCC_OscConfig+0x440>)
 8005302:	6852      	ldr	r2, [r2, #4]
			if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005304:	2b01      	cmp	r3, #1
 8005306:	d02f      	beq.n	8005368 <HAL_RCC_OscConfig+0x424>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 8005308:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
							!= RCC_OscInitStruct->PLL.PLLSource)
 800530c:	69e1      	ldr	r1, [r4, #28]
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 800530e:	428b      	cmp	r3, r1
 8005310:	d12c      	bne.n	800536c <HAL_RCC_OscConfig+0x428>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 8005312:	f002 033f 	and.w	r3, r2, #63	; 0x3f
							!= RCC_OscInitStruct->PLL.PLLM)
 8005316:	6a21      	ldr	r1, [r4, #32]
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 8005318:	428b      	cmp	r3, r1
 800531a:	d129      	bne.n	8005370 <HAL_RCC_OscConfig+0x42c>
							!= (RCC_OscInitStruct->PLL.PLLN
 800531c:	6a61      	ldr	r1, [r4, #36]	; 0x24
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)
 800531e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005322:	4013      	ands	r3, r2
 8005324:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 8005328:	d124      	bne.n	8005374 <HAL_RCC_OscConfig+0x430>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)
 800532a:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
							!= ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U)
 800532e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005330:	085b      	lsrs	r3, r3, #1
 8005332:	3b01      	subs	r3, #1
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)
 8005334:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 8005338:	d11e      	bne.n	8005378 <HAL_RCC_OscConfig+0x434>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 800533a:	f002 6370 	and.w	r3, r2, #251658240	; 0xf000000
							!= (RCC_OscInitStruct->PLL.PLLQ
 800533e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 8005340:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 8005344:	d11a      	bne.n	800537c <HAL_RCC_OscConfig+0x438>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)
 8005346:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
							!= (RCC_OscInitStruct->PLL.PLLR
 800534a:	6b23      	ldr	r3, [r4, #48]	; 0x30
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)
 800534c:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
 8005350:	d116      	bne.n	8005380 <HAL_RCC_OscConfig+0x43c>
	return HAL_OK;
 8005352:	2000      	movs	r0, #0
 8005354:	e006      	b.n	8005364 <HAL_RCC_OscConfig+0x420>
		return HAL_ERROR;
 8005356:	2001      	movs	r0, #1
}
 8005358:	4770      	bx	lr
				return HAL_ERROR;
 800535a:	2001      	movs	r0, #1
 800535c:	e002      	b.n	8005364 <HAL_RCC_OscConfig+0x420>
				return HAL_ERROR;
 800535e:	2001      	movs	r0, #1
 8005360:	e000      	b.n	8005364 <HAL_RCC_OscConfig+0x420>
	return HAL_OK;
 8005362:	2000      	movs	r0, #0
}
 8005364:	b002      	add	sp, #8
 8005366:	bd70      	pop	{r4, r5, r6, pc}
				return HAL_ERROR;
 8005368:	2001      	movs	r0, #1
 800536a:	e7fb      	b.n	8005364 <HAL_RCC_OscConfig+0x420>
 800536c:	2001      	movs	r0, #1
 800536e:	e7f9      	b.n	8005364 <HAL_RCC_OscConfig+0x420>
 8005370:	2001      	movs	r0, #1
 8005372:	e7f7      	b.n	8005364 <HAL_RCC_OscConfig+0x420>
 8005374:	2001      	movs	r0, #1
 8005376:	e7f5      	b.n	8005364 <HAL_RCC_OscConfig+0x420>
 8005378:	2001      	movs	r0, #1
 800537a:	e7f3      	b.n	8005364 <HAL_RCC_OscConfig+0x420>
 800537c:	2001      	movs	r0, #1
 800537e:	e7f1      	b.n	8005364 <HAL_RCC_OscConfig+0x420>
 8005380:	2001      	movs	r0, #1
 8005382:	e7ef      	b.n	8005364 <HAL_RCC_OscConfig+0x420>
 8005384:	40023800 	.word	0x40023800

08005388 <HAL_RCC_GetSysClockFreq>:
 *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
 *
 *
 * @retval SYSCLK frequency
 */
uint32_t HAL_RCC_GetSysClockFreq(void) {
 8005388:	b508      	push	{r3, lr}
	uint32_t pllm = 0, pllvco = 0, pllp = 0;
	uint32_t sysclockfreq = 0;

	/* Get SYSCLK source -------------------------------------------------------*/
	switch (RCC->CFGR & RCC_CFGR_SWS) {
 800538a:	4b26      	ldr	r3, [pc, #152]	; (8005424 <HAL_RCC_GetSysClockFreq+0x9c>)
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f003 030c 	and.w	r3, r3, #12
 8005392:	2b04      	cmp	r3, #4
 8005394:	d041      	beq.n	800541a <HAL_RCC_GetSysClockFreq+0x92>
 8005396:	2b08      	cmp	r3, #8
 8005398:	d141      	bne.n	800541e <HAL_RCC_GetSysClockFreq+0x96>
	}
	case RCC_SYSCLKSOURCE_STATUS_PLLCLK: /* PLL used as system clock  source */
	{
		/* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
		 SYSCLK = PLL_VCO / PLLP */
		pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800539a:	4b22      	ldr	r3, [pc, #136]	; (8005424 <HAL_RCC_GetSysClockFreq+0x9c>)
 800539c:	685a      	ldr	r2, [r3, #4]
 800539e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
		if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI) {
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80053a8:	d012      	beq.n	80053d0 <HAL_RCC_GetSysClockFreq+0x48>
			/* HSE used as PLL clock source */
			pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 80053aa:	4b1e      	ldr	r3, [pc, #120]	; (8005424 <HAL_RCC_GetSysClockFreq+0x9c>)
 80053ac:	6859      	ldr	r1, [r3, #4]
 80053ae:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80053b2:	481d      	ldr	r0, [pc, #116]	; (8005428 <HAL_RCC_GetSysClockFreq+0xa0>)
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 80053b4:	2300      	movs	r3, #0
 80053b6:	fba1 0100 	umull	r0, r1, r1, r0
 80053ba:	f7fa ff91 	bl	80002e0 <__aeabi_uldivmod>
			pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
		}
		pllp =
				((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos)
 80053be:	4b19      	ldr	r3, [pc, #100]	; (8005424 <HAL_RCC_GetSysClockFreq+0x9c>)
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	f3c3 4301 	ubfx	r3, r3, #16, #2
						+ 1) * 2);
 80053c6:	3301      	adds	r3, #1
		pllp =
 80053c8:	005b      	lsls	r3, r3, #1

		sysclockfreq = pllvco / pllp;
 80053ca:	fbb0 f0f3 	udiv	r0, r0, r3
		break;
 80053ce:	e027      	b.n	8005420 <HAL_RCC_GetSysClockFreq+0x98>
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 80053d0:	4b14      	ldr	r3, [pc, #80]	; (8005424 <HAL_RCC_GetSysClockFreq+0x9c>)
 80053d2:	6858      	ldr	r0, [r3, #4]
 80053d4:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80053d8:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80053dc:	ebbc 0c00 	subs.w	ip, ip, r0
 80053e0:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80053e4:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80053e8:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80053ec:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80053f0:	ebb1 010c 	subs.w	r1, r1, ip
 80053f4:	eb63 030e 	sbc.w	r3, r3, lr
 80053f8:	00db      	lsls	r3, r3, #3
 80053fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053fe:	00c9      	lsls	r1, r1, #3
 8005400:	eb11 0c00 	adds.w	ip, r1, r0
 8005404:	f143 0300 	adc.w	r3, r3, #0
 8005408:	0299      	lsls	r1, r3, #10
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 800540a:	2300      	movs	r3, #0
 800540c:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8005410:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8005414:	f7fa ff64 	bl	80002e0 <__aeabi_uldivmod>
 8005418:	e7d1      	b.n	80053be <HAL_RCC_GetSysClockFreq+0x36>
		sysclockfreq = HSE_VALUE;
 800541a:	4803      	ldr	r0, [pc, #12]	; (8005428 <HAL_RCC_GetSysClockFreq+0xa0>)
 800541c:	e000      	b.n	8005420 <HAL_RCC_GetSysClockFreq+0x98>
	switch (RCC->CFGR & RCC_CFGR_SWS) {
 800541e:	4803      	ldr	r0, [pc, #12]	; (800542c <HAL_RCC_GetSysClockFreq+0xa4>)
		sysclockfreq = HSI_VALUE;
		break;
	}
	}
	return sysclockfreq;
}
 8005420:	bd08      	pop	{r3, pc}
 8005422:	bf00      	nop
 8005424:	40023800 	.word	0x40023800
 8005428:	017d7840 	.word	0x017d7840
 800542c:	00f42400 	.word	0x00f42400

08005430 <HAL_RCC_ClockConfig>:
	if (RCC_ClkInitStruct == NULL) {
 8005430:	2800      	cmp	r0, #0
 8005432:	f000 80a0 	beq.w	8005576 <HAL_RCC_ClockConfig+0x146>
		uint32_t FLatency) {
 8005436:	b570      	push	{r4, r5, r6, lr}
 8005438:	460d      	mov	r5, r1
 800543a:	4604      	mov	r4, r0
	if (FLatency > __HAL_FLASH_GET_LATENCY()) {
 800543c:	4b52      	ldr	r3, [pc, #328]	; (8005588 <HAL_RCC_ClockConfig+0x158>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 030f 	and.w	r3, r3, #15
 8005444:	428b      	cmp	r3, r1
 8005446:	d20b      	bcs.n	8005460 <HAL_RCC_ClockConfig+0x30>
		__HAL_FLASH_SET_LATENCY(FLatency);
 8005448:	4a4f      	ldr	r2, [pc, #316]	; (8005588 <HAL_RCC_ClockConfig+0x158>)
 800544a:	6813      	ldr	r3, [r2, #0]
 800544c:	f023 030f 	bic.w	r3, r3, #15
 8005450:	430b      	orrs	r3, r1
 8005452:	6013      	str	r3, [r2, #0]
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 8005454:	6813      	ldr	r3, [r2, #0]
 8005456:	f003 030f 	and.w	r3, r3, #15
 800545a:	428b      	cmp	r3, r1
 800545c:	f040 808d 	bne.w	800557a <HAL_RCC_ClockConfig+0x14a>
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK)
 8005460:	6823      	ldr	r3, [r4, #0]
 8005462:	f013 0f02 	tst.w	r3, #2
 8005466:	d017      	beq.n	8005498 <HAL_RCC_ClockConfig+0x68>
		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 8005468:	f013 0f04 	tst.w	r3, #4
 800546c:	d004      	beq.n	8005478 <HAL_RCC_ClockConfig+0x48>
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800546e:	4a47      	ldr	r2, [pc, #284]	; (800558c <HAL_RCC_ClockConfig+0x15c>)
 8005470:	6893      	ldr	r3, [r2, #8]
 8005472:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005476:	6093      	str	r3, [r2, #8]
		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 8005478:	6823      	ldr	r3, [r4, #0]
 800547a:	f013 0f08 	tst.w	r3, #8
 800547e:	d004      	beq.n	800548a <HAL_RCC_ClockConfig+0x5a>
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005480:	4a42      	ldr	r2, [pc, #264]	; (800558c <HAL_RCC_ClockConfig+0x15c>)
 8005482:	6893      	ldr	r3, [r2, #8]
 8005484:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005488:	6093      	str	r3, [r2, #8]
		MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800548a:	4a40      	ldr	r2, [pc, #256]	; (800558c <HAL_RCC_ClockConfig+0x15c>)
 800548c:	6893      	ldr	r3, [r2, #8]
 800548e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005492:	68a1      	ldr	r1, [r4, #8]
 8005494:	430b      	orrs	r3, r1
 8005496:	6093      	str	r3, [r2, #8]
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK)
 8005498:	6823      	ldr	r3, [r4, #0]
 800549a:	f013 0f01 	tst.w	r3, #1
 800549e:	d031      	beq.n	8005504 <HAL_RCC_ClockConfig+0xd4>
		if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 80054a0:	6863      	ldr	r3, [r4, #4]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d020      	beq.n	80054e8 <HAL_RCC_ClockConfig+0xb8>
		else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) {
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d025      	beq.n	80054f6 <HAL_RCC_ClockConfig+0xc6>
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 80054aa:	4a38      	ldr	r2, [pc, #224]	; (800558c <HAL_RCC_ClockConfig+0x15c>)
 80054ac:	6812      	ldr	r2, [r2, #0]
 80054ae:	f012 0f02 	tst.w	r2, #2
 80054b2:	d064      	beq.n	800557e <HAL_RCC_ClockConfig+0x14e>
		__HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054b4:	4935      	ldr	r1, [pc, #212]	; (800558c <HAL_RCC_ClockConfig+0x15c>)
 80054b6:	688a      	ldr	r2, [r1, #8]
 80054b8:	f022 0203 	bic.w	r2, r2, #3
 80054bc:	4313      	orrs	r3, r2
 80054be:	608b      	str	r3, [r1, #8]
		tickstart = HAL_GetTick();
 80054c0:	f7fe f8b4 	bl	800362c <HAL_GetTick>
 80054c4:	4606      	mov	r6, r0
		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 80054c6:	4b31      	ldr	r3, [pc, #196]	; (800558c <HAL_RCC_ClockConfig+0x15c>)
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f003 030c 	and.w	r3, r3, #12
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
 80054ce:	6862      	ldr	r2, [r4, #4]
 80054d0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80054d4:	d016      	beq.n	8005504 <HAL_RCC_ClockConfig+0xd4>
			if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 80054d6:	f7fe f8a9 	bl	800362c <HAL_GetTick>
 80054da:	1b80      	subs	r0, r0, r6
 80054dc:	f241 3388 	movw	r3, #5000	; 0x1388
 80054e0:	4298      	cmp	r0, r3
 80054e2:	d9f0      	bls.n	80054c6 <HAL_RCC_ClockConfig+0x96>
				return HAL_TIMEOUT;
 80054e4:	2003      	movs	r0, #3
 80054e6:	e045      	b.n	8005574 <HAL_RCC_ClockConfig+0x144>
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 80054e8:	4a28      	ldr	r2, [pc, #160]	; (800558c <HAL_RCC_ClockConfig+0x15c>)
 80054ea:	6812      	ldr	r2, [r2, #0]
 80054ec:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80054f0:	d1e0      	bne.n	80054b4 <HAL_RCC_ClockConfig+0x84>
				return HAL_ERROR;
 80054f2:	2001      	movs	r0, #1
 80054f4:	e03e      	b.n	8005574 <HAL_RCC_ClockConfig+0x144>
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 80054f6:	4a25      	ldr	r2, [pc, #148]	; (800558c <HAL_RCC_ClockConfig+0x15c>)
 80054f8:	6812      	ldr	r2, [r2, #0]
 80054fa:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80054fe:	d1d9      	bne.n	80054b4 <HAL_RCC_ClockConfig+0x84>
				return HAL_ERROR;
 8005500:	2001      	movs	r0, #1
 8005502:	e037      	b.n	8005574 <HAL_RCC_ClockConfig+0x144>
	if (FLatency < __HAL_FLASH_GET_LATENCY()) {
 8005504:	4b20      	ldr	r3, [pc, #128]	; (8005588 <HAL_RCC_ClockConfig+0x158>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 030f 	and.w	r3, r3, #15
 800550c:	42ab      	cmp	r3, r5
 800550e:	d90a      	bls.n	8005526 <HAL_RCC_ClockConfig+0xf6>
		__HAL_FLASH_SET_LATENCY(FLatency);
 8005510:	4a1d      	ldr	r2, [pc, #116]	; (8005588 <HAL_RCC_ClockConfig+0x158>)
 8005512:	6813      	ldr	r3, [r2, #0]
 8005514:	f023 030f 	bic.w	r3, r3, #15
 8005518:	432b      	orrs	r3, r5
 800551a:	6013      	str	r3, [r2, #0]
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 800551c:	6813      	ldr	r3, [r2, #0]
 800551e:	f003 030f 	and.w	r3, r3, #15
 8005522:	42ab      	cmp	r3, r5
 8005524:	d12d      	bne.n	8005582 <HAL_RCC_ClockConfig+0x152>
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 8005526:	6823      	ldr	r3, [r4, #0]
 8005528:	f013 0f04 	tst.w	r3, #4
 800552c:	d006      	beq.n	800553c <HAL_RCC_ClockConfig+0x10c>
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1,
 800552e:	4a17      	ldr	r2, [pc, #92]	; (800558c <HAL_RCC_ClockConfig+0x15c>)
 8005530:	6893      	ldr	r3, [r2, #8]
 8005532:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8005536:	68e1      	ldr	r1, [r4, #12]
 8005538:	430b      	orrs	r3, r1
 800553a:	6093      	str	r3, [r2, #8]
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 800553c:	6823      	ldr	r3, [r4, #0]
 800553e:	f013 0f08 	tst.w	r3, #8
 8005542:	d007      	beq.n	8005554 <HAL_RCC_ClockConfig+0x124>
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2,
 8005544:	4a11      	ldr	r2, [pc, #68]	; (800558c <HAL_RCC_ClockConfig+0x15c>)
 8005546:	6893      	ldr	r3, [r2, #8]
 8005548:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800554c:	6921      	ldr	r1, [r4, #16]
 800554e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005552:	6093      	str	r3, [r2, #8]
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 8005554:	f7ff ff18 	bl	8005388 <HAL_RCC_GetSysClockFreq>
			>> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005558:	4b0c      	ldr	r3, [pc, #48]	; (800558c <HAL_RCC_ClockConfig+0x15c>)
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005560:	4a0b      	ldr	r2, [pc, #44]	; (8005590 <HAL_RCC_ClockConfig+0x160>)
 8005562:	5cd3      	ldrb	r3, [r2, r3]
 8005564:	40d8      	lsrs	r0, r3
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 8005566:	4b0b      	ldr	r3, [pc, #44]	; (8005594 <HAL_RCC_ClockConfig+0x164>)
 8005568:	6018      	str	r0, [r3, #0]
	HAL_InitTick(uwTickPrio);
 800556a:	4b0b      	ldr	r3, [pc, #44]	; (8005598 <HAL_RCC_ClockConfig+0x168>)
 800556c:	6818      	ldr	r0, [r3, #0]
 800556e:	f7fd ff2f 	bl	80033d0 <HAL_InitTick>
	return HAL_OK;
 8005572:	2000      	movs	r0, #0
}
 8005574:	bd70      	pop	{r4, r5, r6, pc}
		return HAL_ERROR;
 8005576:	2001      	movs	r0, #1
}
 8005578:	4770      	bx	lr
			return HAL_ERROR;
 800557a:	2001      	movs	r0, #1
 800557c:	e7fa      	b.n	8005574 <HAL_RCC_ClockConfig+0x144>
				return HAL_ERROR;
 800557e:	2001      	movs	r0, #1
 8005580:	e7f8      	b.n	8005574 <HAL_RCC_ClockConfig+0x144>
			return HAL_ERROR;
 8005582:	2001      	movs	r0, #1
 8005584:	e7f6      	b.n	8005574 <HAL_RCC_ClockConfig+0x144>
 8005586:	bf00      	nop
 8005588:	40023c00 	.word	0x40023c00
 800558c:	40023800 	.word	0x40023800
 8005590:	080098c0 	.word	0x080098c0
 8005594:	20000018 	.word	0x20000018
 8005598:	20000020 	.word	0x20000020

0800559c <HAL_RCC_GetHCLKFreq>:
 * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
 * @retval HCLK frequency
 */
uint32_t HAL_RCC_GetHCLKFreq(void) {
	return SystemCoreClock;
}
 800559c:	4b01      	ldr	r3, [pc, #4]	; (80055a4 <HAL_RCC_GetHCLKFreq+0x8>)
 800559e:	6818      	ldr	r0, [r3, #0]
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	20000018 	.word	0x20000018

080055a8 <HAL_RCC_GetPCLK1Freq>:
 * @brief  Returns the PCLK1 frequency
 * @note   Each time PCLK1 changes, this function must be called to update the
 *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK1 frequency
 */
uint32_t HAL_RCC_GetPCLK1Freq(void) {
 80055a8:	b508      	push	{r3, lr}
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (HAL_RCC_GetHCLKFreq()
 80055aa:	f7ff fff7 	bl	800559c <HAL_RCC_GetHCLKFreq>
			>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80055ae:	4b04      	ldr	r3, [pc, #16]	; (80055c0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80055b6:	4a03      	ldr	r2, [pc, #12]	; (80055c4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80055b8:	5cd3      	ldrb	r3, [r2, r3]
}
 80055ba:	40d8      	lsrs	r0, r3
 80055bc:	bd08      	pop	{r3, pc}
 80055be:	bf00      	nop
 80055c0:	40023800 	.word	0x40023800
 80055c4:	080098d0 	.word	0x080098d0

080055c8 <HAL_RCC_GetPCLK2Freq>:
 * @brief  Returns the PCLK2 frequency
 * @note   Each time PCLK2 changes, this function must be called to update the
 *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK2 frequency
 */
uint32_t HAL_RCC_GetPCLK2Freq(void) {
 80055c8:	b508      	push	{r3, lr}
	/* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
	return (HAL_RCC_GetHCLKFreq()
 80055ca:	f7ff ffe7 	bl	800559c <HAL_RCC_GetHCLKFreq>
			>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80055ce:	4b04      	ldr	r3, [pc, #16]	; (80055e0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80055d6:	4a03      	ldr	r2, [pc, #12]	; (80055e4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80055d8:	5cd3      	ldrb	r3, [r2, r3]
}
 80055da:	40d8      	lsrs	r0, r3
 80055dc:	bd08      	pop	{r3, pc}
 80055de:	bf00      	nop
 80055e0:	40023800 	.word	0x40023800
 80055e4:	080098d0 	.word	0x080098d0

080055e8 <HAL_RCC_GetClockConfig>:
 * @retval None
 */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct,
		uint32_t *pFLatency) {
	/* Set all possible values for the Clock type parameter --------------------*/
	RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 80055e8:	230f      	movs	r3, #15
 80055ea:	6003      	str	r3, [r0, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

	/* Get the SYSCLK configuration --------------------------------------------*/
	RCC_ClkInitStruct->SYSCLKSource = (uint32_t) (RCC->CFGR & RCC_CFGR_SW);
 80055ec:	4b0b      	ldr	r3, [pc, #44]	; (800561c <HAL_RCC_GetClockConfig+0x34>)
 80055ee:	689a      	ldr	r2, [r3, #8]
 80055f0:	f002 0203 	and.w	r2, r2, #3
 80055f4:	6042      	str	r2, [r0, #4]

	/* Get the HCLK configuration ----------------------------------------------*/
	RCC_ClkInitStruct->AHBCLKDivider = (uint32_t) (RCC->CFGR & RCC_CFGR_HPRE);
 80055f6:	689a      	ldr	r2, [r3, #8]
 80055f8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80055fc:	6082      	str	r2, [r0, #8]

	/* Get the APB1 configuration ----------------------------------------------*/
	RCC_ClkInitStruct->APB1CLKDivider = (uint32_t) (RCC->CFGR & RCC_CFGR_PPRE1);
 80055fe:	689a      	ldr	r2, [r3, #8]
 8005600:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8005604:	60c2      	str	r2, [r0, #12]

	/* Get the APB2 configuration ----------------------------------------------*/
	RCC_ClkInitStruct->APB2CLKDivider = (uint32_t) ((RCC->CFGR & RCC_CFGR_PPRE2)
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	08db      	lsrs	r3, r3, #3
 800560a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800560e:	6103      	str	r3, [r0, #16]
			>> 3);

	/* Get the Flash Wait State (Latency) configuration ------------------------*/
	*pFLatency = (uint32_t) (FLASH->ACR & FLASH_ACR_LATENCY);
 8005610:	4b03      	ldr	r3, [pc, #12]	; (8005620 <HAL_RCC_GetClockConfig+0x38>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 030f 	and.w	r3, r3, #15
 8005618:	600b      	str	r3, [r1, #0]
}
 800561a:	4770      	bx	lr
 800561c:	40023800 	.word	0x40023800
 8005620:	40023c00 	.word	0x40023c00

08005624 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005626:	b083      	sub	sp, #12
 8005628:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800562a:	6806      	ldr	r6, [r0, #0]
 800562c:	f016 0601 	ands.w	r6, r6, #1
 8005630:	d00d      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005632:	4bb5      	ldr	r3, [pc, #724]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005634:	689a      	ldr	r2, [r3, #8]
 8005636:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800563a:	609a      	str	r2, [r3, #8]
 800563c:	689a      	ldr	r2, [r3, #8]
 800563e:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8005640:	430a      	orrs	r2, r1
 8005642:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005644:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005646:	2b00      	cmp	r3, #0
 8005648:	f000 8167 	beq.w	800591a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  uint32_t plli2sused = 0;
 800564c:	2600      	movs	r6, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800564e:	6825      	ldr	r5, [r4, #0]
 8005650:	f415 2500 	ands.w	r5, r5, #524288	; 0x80000
 8005654:	d011      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005656:	4aac      	ldr	r2, [pc, #688]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005658:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800565c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005660:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005662:	430b      	orrs	r3, r1
 8005664:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005668:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800566a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800566e:	f000 8156 	beq.w	800591e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005672:	2b00      	cmp	r3, #0
 8005674:	f000 8155 	beq.w	8005922 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  uint32_t pllsaiused = 0;
 8005678:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800567a:	6823      	ldr	r3, [r4, #0]
 800567c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005680:	d00f      	beq.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005682:	4aa1      	ldr	r2, [pc, #644]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005684:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8005688:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800568c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800568e:	430b      	orrs	r3, r1
 8005690:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005694:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005696:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800569a:	f000 8144 	beq.w	8005926 <HAL_RCCEx_PeriphCLKConfig+0x302>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800569e:	b903      	cbnz	r3, 80056a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      pllsaiused = 1;
 80056a0:	2501      	movs	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80056a2:	6823      	ldr	r3, [r4, #0]
 80056a4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80056a8:	d000      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
      plli2sused = 1;
 80056aa:	2601      	movs	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80056ac:	f013 0f20 	tst.w	r3, #32
 80056b0:	f040 813b 	bne.w	800592a <HAL_RCCEx_PeriphCLKConfig+0x306>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80056b4:	6823      	ldr	r3, [r4, #0]
 80056b6:	f013 0f10 	tst.w	r3, #16
 80056ba:	d00c      	beq.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80056bc:	4b92      	ldr	r3, [pc, #584]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80056be:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80056c2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80056c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80056ca:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80056ce:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80056d0:	430a      	orrs	r2, r1
 80056d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80056d6:	6823      	ldr	r3, [r4, #0]
 80056d8:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80056dc:	d008      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80056de:	4a8a      	ldr	r2, [pc, #552]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80056e0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80056e4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80056e8:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80056ea:	430b      	orrs	r3, r1
 80056ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80056f0:	6823      	ldr	r3, [r4, #0]
 80056f2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80056f6:	d008      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80056f8:	4a83      	ldr	r2, [pc, #524]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80056fa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80056fe:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8005702:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8005704:	430b      	orrs	r3, r1
 8005706:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800570a:	6823      	ldr	r3, [r4, #0]
 800570c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005710:	d008      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005712:	4a7d      	ldr	r2, [pc, #500]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005714:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005718:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800571c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800571e:	430b      	orrs	r3, r1
 8005720:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005724:	6823      	ldr	r3, [r4, #0]
 8005726:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800572a:	d008      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800572c:	4a76      	ldr	r2, [pc, #472]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800572e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005732:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8005736:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8005738:	430b      	orrs	r3, r1
 800573a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800573e:	6823      	ldr	r3, [r4, #0]
 8005740:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005744:	d008      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005746:	4a70      	ldr	r2, [pc, #448]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005748:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800574c:	f023 0303 	bic.w	r3, r3, #3
 8005750:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005752:	430b      	orrs	r3, r1
 8005754:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005758:	6823      	ldr	r3, [r4, #0]
 800575a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800575e:	d008      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005760:	4a69      	ldr	r2, [pc, #420]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005762:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005766:	f023 030c 	bic.w	r3, r3, #12
 800576a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800576c:	430b      	orrs	r3, r1
 800576e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005772:	6823      	ldr	r3, [r4, #0]
 8005774:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005778:	d008      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800577a:	4a63      	ldr	r2, [pc, #396]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800577c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005780:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005784:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005786:	430b      	orrs	r3, r1
 8005788:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800578c:	6823      	ldr	r3, [r4, #0]
 800578e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005792:	d008      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005794:	4a5c      	ldr	r2, [pc, #368]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005796:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800579a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800579e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80057a0:	430b      	orrs	r3, r1
 80057a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80057a6:	6823      	ldr	r3, [r4, #0]
 80057a8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80057ac:	d008      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80057ae:	4a56      	ldr	r2, [pc, #344]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80057b0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80057b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057b8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80057ba:	430b      	orrs	r3, r1
 80057bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80057c0:	6823      	ldr	r3, [r4, #0]
 80057c2:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80057c6:	d008      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80057c8:	4a4f      	ldr	r2, [pc, #316]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80057ca:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80057ce:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80057d2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80057d4:	430b      	orrs	r3, r1
 80057d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80057da:	6823      	ldr	r3, [r4, #0]
 80057dc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80057e0:	d008      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80057e2:	4a49      	ldr	r2, [pc, #292]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80057e4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80057e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80057ec:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80057ee:	430b      	orrs	r3, r1
 80057f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80057f4:	6823      	ldr	r3, [r4, #0]
 80057f6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80057fa:	d008      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80057fc:	4a42      	ldr	r2, [pc, #264]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80057fe:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005802:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005806:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8005808:	430b      	orrs	r3, r1
 800580a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800580e:	6823      	ldr	r3, [r4, #0]
 8005810:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8005814:	d008      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005816:	4a3c      	ldr	r2, [pc, #240]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005818:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800581c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005820:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8005822:	430b      	orrs	r3, r1
 8005824:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005828:	6823      	ldr	r3, [r4, #0]
 800582a:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800582e:	d00d      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005830:	4a35      	ldr	r2, [pc, #212]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005832:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005836:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800583a:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800583c:	430b      	orrs	r3, r1
 800583e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005842:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005844:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005848:	f000 80d5 	beq.w	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800584c:	6823      	ldr	r3, [r4, #0]
 800584e:	f013 0f08 	tst.w	r3, #8
 8005852:	d000      	beq.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    pllsaiused = 1;
 8005854:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005856:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800585a:	d008      	beq.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800585c:	4a2a      	ldr	r2, [pc, #168]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800585e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005862:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8005866:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8005868:	430b      	orrs	r3, r1
 800586a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800586e:	6823      	ldr	r3, [r4, #0]
 8005870:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8005874:	d009      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005876:	4a24      	ldr	r2, [pc, #144]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005878:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800587c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005880:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8005884:	430b      	orrs	r3, r1
 8005886:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800588a:	6823      	ldr	r3, [r4, #0]
 800588c:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8005890:	d009      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x282>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005892:	4a1d      	ldr	r2, [pc, #116]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005894:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005898:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800589c:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80058a0:	430b      	orrs	r3, r1
 80058a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80058a6:	6823      	ldr	r3, [r4, #0]
 80058a8:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80058ac:	d009      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80058ae:	4a16      	ldr	r2, [pc, #88]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80058b0:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80058b4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80058b8:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 80058bc:	430b      	orrs	r3, r1
 80058be:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80058c2:	6823      	ldr	r3, [r4, #0]
 80058c4:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80058c8:	d009      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80058ca:	4a0f      	ldr	r2, [pc, #60]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80058cc:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80058d0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80058d4:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80058d8:	430b      	orrs	r3, r1
 80058da:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80058de:	b926      	cbnz	r6, 80058ea <HAL_RCCEx_PeriphCLKConfig+0x2c6>
 80058e0:	6823      	ldr	r3, [r4, #0]
 80058e2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80058e6:	f000 8106 	beq.w	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80058ea:	4a07      	ldr	r2, [pc, #28]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80058ec:	6813      	ldr	r3, [r2, #0]
 80058ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80058f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058f4:	f7fd fe9a 	bl	800362c <HAL_GetTick>
 80058f8:	4606      	mov	r6, r0

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058fa:	4b03      	ldr	r3, [pc, #12]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8005902:	d07a      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x3d6>
 8005904:	e002      	b.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8005906:	bf00      	nop
 8005908:	40023800 	.word	0x40023800
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800590c:	f7fd fe8e 	bl	800362c <HAL_GetTick>
 8005910:	1b80      	subs	r0, r0, r6
 8005912:	2864      	cmp	r0, #100	; 0x64
 8005914:	d9f1      	bls.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005916:	2003      	movs	r0, #3
 8005918:	e0f0      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x4d8>
      plli2sused = 1;
 800591a:	2601      	movs	r6, #1
 800591c:	e697      	b.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1;
 800591e:	2601      	movs	r6, #1
 8005920:	e6a7      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      pllsaiused = 1;
 8005922:	2501      	movs	r5, #1
 8005924:	e6a9      	b.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x56>
      plli2sused = 1;
 8005926:	2601      	movs	r6, #1
 8005928:	e6b9      	b.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    __HAL_RCC_PWR_CLK_ENABLE();
 800592a:	4b7f      	ldr	r3, [pc, #508]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800592c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800592e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005932:	641a      	str	r2, [r3, #64]	; 0x40
 8005934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800593a:	9301      	str	r3, [sp, #4]
 800593c:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800593e:	4a7b      	ldr	r2, [pc, #492]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8005940:	6813      	ldr	r3, [r2, #0]
 8005942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005946:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8005948:	f7fd fe70 	bl	800362c <HAL_GetTick>
 800594c:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800594e:	4b77      	ldr	r3, [pc, #476]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005956:	d106      	bne.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x342>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005958:	f7fd fe68 	bl	800362c <HAL_GetTick>
 800595c:	1bc0      	subs	r0, r0, r7
 800595e:	2864      	cmp	r0, #100	; 0x64
 8005960:	d9f5      	bls.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x32a>
        return HAL_TIMEOUT;
 8005962:	2003      	movs	r0, #3
 8005964:	e0ca      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005966:	4b70      	ldr	r3, [pc, #448]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800596a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800596e:	d015      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x378>
 8005970:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005972:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8005976:	429a      	cmp	r2, r3
 8005978:	d010      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x378>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800597a:	4b6b      	ldr	r3, [pc, #428]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800597c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800597e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8005982:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005984:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8005988:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800598a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800598c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8005990:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8005992:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005996:	f013 0f01 	tst.w	r3, #1
 800599a:	d112      	bne.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800599c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800599e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80059a2:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80059a6:	d01d      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80059a8:	4a5f      	ldr	r2, [pc, #380]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80059aa:	6893      	ldr	r3, [r2, #8]
 80059ac:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80059b0:	6093      	str	r3, [r2, #8]
 80059b2:	495d      	ldr	r1, [pc, #372]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80059b4:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 80059b6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80059b8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80059bc:	4313      	orrs	r3, r2
 80059be:	670b      	str	r3, [r1, #112]	; 0x70
 80059c0:	e678      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
        tickstart = HAL_GetTick();
 80059c2:	f7fd fe33 	bl	800362c <HAL_GetTick>
 80059c6:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059c8:	4b57      	ldr	r3, [pc, #348]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80059ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059cc:	f013 0f02 	tst.w	r3, #2
 80059d0:	d1e4      	bne.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x378>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059d2:	f7fd fe2b 	bl	800362c <HAL_GetTick>
 80059d6:	1bc0      	subs	r0, r0, r7
 80059d8:	f241 3388 	movw	r3, #5000	; 0x1388
 80059dc:	4298      	cmp	r0, r3
 80059de:	d9f3      	bls.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
            return HAL_TIMEOUT;
 80059e0:	2003      	movs	r0, #3
 80059e2:	e08b      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059e4:	4850      	ldr	r0, [pc, #320]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80059e6:	6882      	ldr	r2, [r0, #8]
 80059e8:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80059ec:	4950      	ldr	r1, [pc, #320]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80059ee:	4019      	ands	r1, r3
 80059f0:	430a      	orrs	r2, r1
 80059f2:	6082      	str	r2, [r0, #8]
 80059f4:	e7dd      	b.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
      pllsaiused = 1;
 80059f6:	2501      	movs	r5, #1
 80059f8:	e728      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x228>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80059fa:	6823      	ldr	r3, [r4, #0]
 80059fc:	f013 0f01 	tst.w	r3, #1
 8005a00:	d013      	beq.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005a02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a04:	b98b      	cbnz	r3, 8005a2a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005a06:	4a48      	ldr	r2, [pc, #288]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005a08:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005a0c:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005a10:	6860      	ldr	r0, [r4, #4]
 8005a12:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a16:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005a1a:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8005a1e:	430b      	orrs	r3, r1
 8005a20:	68a1      	ldr	r1, [r4, #8]
 8005a22:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8005a26:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005a2a:	6823      	ldr	r3, [r4, #0]
 8005a2c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8005a30:	d003      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005a32:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005a34:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8005a38:	d006      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8005a3a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005a3e:	d01e      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x45a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005a40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a46:	d11a      	bne.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x45a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005a48:	4a37      	ldr	r2, [pc, #220]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005a4a:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005a4e:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005a52:	6860      	ldr	r0, [r4, #4]
 8005a54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a58:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005a5c:	68e0      	ldr	r0, [r4, #12]
 8005a5e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8005a62:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8005a66:	430b      	orrs	r3, r1
 8005a68:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005a6c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8005a70:	f023 031f 	bic.w	r3, r3, #31
 8005a74:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005a76:	3901      	subs	r1, #1
 8005a78:	430b      	orrs	r3, r1
 8005a7a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005a7e:	6823      	ldr	r3, [r4, #0]
 8005a80:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8005a84:	d011      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x486>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005a86:	4a28      	ldr	r2, [pc, #160]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005a88:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005a8c:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005a90:	6866      	ldr	r6, [r4, #4]
 8005a92:	6923      	ldr	r3, [r4, #16]
 8005a94:	041b      	lsls	r3, r3, #16
 8005a96:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8005a9a:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8005a9e:	4303      	orrs	r3, r0
 8005aa0:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8005aa4:	430b      	orrs	r3, r1
 8005aa6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005aaa:	6823      	ldr	r3, [r4, #0]
 8005aac:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005ab0:	d00d      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x4aa>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005ab2:	6862      	ldr	r2, [r4, #4]
 8005ab4:	6923      	ldr	r3, [r4, #16]
 8005ab6:	041b      	lsls	r3, r3, #16
 8005ab8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005abc:	68e2      	ldr	r2, [r4, #12]
 8005abe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005ac2:	68a2      	ldr	r2, [r4, #8]
 8005ac4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8005ac8:	4a17      	ldr	r2, [pc, #92]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005aca:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005ace:	4a16      	ldr	r2, [pc, #88]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005ad0:	6813      	ldr	r3, [r2, #0]
 8005ad2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ad6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ad8:	f7fd fda8 	bl	800362c <HAL_GetTick>
 8005adc:	4606      	mov	r6, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ade:	4b12      	ldr	r3, [pc, #72]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8005ae6:	d106      	bne.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005ae8:	f7fd fda0 	bl	800362c <HAL_GetTick>
 8005aec:	1b80      	subs	r0, r0, r6
 8005aee:	2864      	cmp	r0, #100	; 0x64
 8005af0:	d9f5      	bls.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x4ba>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005af2:	2003      	movs	r0, #3
 8005af4:	e002      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005af6:	2d01      	cmp	r5, #1
 8005af8:	d002      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8005afa:	2000      	movs	r0, #0
}
 8005afc:	b003      	add	sp, #12
 8005afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 8005b00:	4a09      	ldr	r2, [pc, #36]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005b02:	6813      	ldr	r3, [r2, #0]
 8005b04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b08:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8005b0a:	f7fd fd8f 	bl	800362c <HAL_GetTick>
 8005b0e:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005b10:	4b05      	ldr	r3, [pc, #20]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8005b18:	d00c      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x510>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005b1a:	f7fd fd87 	bl	800362c <HAL_GetTick>
 8005b1e:	1b40      	subs	r0, r0, r5
 8005b20:	2864      	cmp	r0, #100	; 0x64
 8005b22:	d9f5      	bls.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
        return HAL_TIMEOUT;
 8005b24:	2003      	movs	r0, #3
 8005b26:	e7e9      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8005b28:	40023800 	.word	0x40023800
 8005b2c:	40007000 	.word	0x40007000
 8005b30:	0ffffcff 	.word	0x0ffffcff
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005b34:	6823      	ldr	r3, [r4, #0]
 8005b36:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8005b3a:	d001      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x51c>
 8005b3c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005b3e:	b122      	cbz	r2, 8005b4a <HAL_RCCEx_PeriphCLKConfig+0x526>
 8005b40:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005b44:	d01d      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x55e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005b46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b48:	b9db      	cbnz	r3, 8005b82 <HAL_RCCEx_PeriphCLKConfig+0x55e>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005b4a:	4a35      	ldr	r2, [pc, #212]	; (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8005b4c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005b50:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005b54:	6960      	ldr	r0, [r4, #20]
 8005b56:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b5a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005b5e:	69a0      	ldr	r0, [r4, #24]
 8005b60:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8005b64:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8005b68:	430b      	orrs	r3, r1
 8005b6a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005b6e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8005b72:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8005b76:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005b78:	3901      	subs	r1, #1
 8005b7a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005b7e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005b82:	6823      	ldr	r3, [r4, #0]
 8005b84:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8005b88:	d003      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x56e>
 8005b8a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005b8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b90:	d031      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005b92:	6823      	ldr	r3, [r4, #0]
 8005b94:	f013 0f08 	tst.w	r3, #8
 8005b98:	d019      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x5aa>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005b9a:	4a21      	ldr	r2, [pc, #132]	; (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8005b9c:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005ba0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005ba4:	6960      	ldr	r0, [r4, #20]
 8005ba6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005baa:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005bae:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8005bb2:	430b      	orrs	r3, r1
 8005bb4:	69e1      	ldr	r1, [r4, #28]
 8005bb6:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8005bba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005bbe:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8005bc2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005bc6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005bc8:	430b      	orrs	r3, r1
 8005bca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8005bce:	4a14      	ldr	r2, [pc, #80]	; (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8005bd0:	6813      	ldr	r3, [r2, #0]
 8005bd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bd6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8005bd8:	f7fd fd28 	bl	800362c <HAL_GetTick>
 8005bdc:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005bde:	4b10      	ldr	r3, [pc, #64]	; (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8005be6:	d119      	bne.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005be8:	f7fd fd20 	bl	800362c <HAL_GetTick>
 8005bec:	1b00      	subs	r0, r0, r4
 8005bee:	2864      	cmp	r0, #100	; 0x64
 8005bf0:	d9f5      	bls.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x5ba>
        return HAL_TIMEOUT;
 8005bf2:	2003      	movs	r0, #3
 8005bf4:	e782      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x4d8>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005bf6:	4a0a      	ldr	r2, [pc, #40]	; (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8005bf8:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005bfc:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005c00:	6965      	ldr	r5, [r4, #20]
 8005c02:	6a23      	ldr	r3, [r4, #32]
 8005c04:	041b      	lsls	r3, r3, #16
 8005c06:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8005c0a:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8005c0e:	4303      	orrs	r3, r0
 8005c10:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8005c14:	430b      	orrs	r3, r1
 8005c16:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8005c1a:	e7ba      	b.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  return HAL_OK;
 8005c1c:	2000      	movs	r0, #0
 8005c1e:	e76d      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8005c20:	40023800 	.word	0x40023800

08005c24 <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8005c24:	4770      	bx	lr

08005c26 <HAL_SDRAM_Init>:
  if (hsdram == NULL)
 8005c26:	b1e0      	cbz	r0, 8005c62 <HAL_SDRAM_Init+0x3c>
{
 8005c28:	b538      	push	{r3, r4, r5, lr}
 8005c2a:	460d      	mov	r5, r1
 8005c2c:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005c2e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8005c32:	b18b      	cbz	r3, 8005c58 <HAL_SDRAM_Init+0x32>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005c34:	2302      	movs	r3, #2
 8005c36:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005c3a:	4621      	mov	r1, r4
 8005c3c:	f851 0b04 	ldr.w	r0, [r1], #4
 8005c40:	f000 ffc2 	bl	8006bc8 <FMC_SDRAM_Init>
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005c44:	6862      	ldr	r2, [r4, #4]
 8005c46:	4629      	mov	r1, r5
 8005c48:	6820      	ldr	r0, [r4, #0]
 8005c4a:	f000 fff7 	bl	8006c3c <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 8005c54:	2000      	movs	r0, #0
}
 8005c56:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8005c58:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8005c5c:	f7ff ffe2 	bl	8005c24 <HAL_SDRAM_MspInit>
 8005c60:	e7e8      	b.n	8005c34 <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 8005c62:	2001      	movs	r0, #1
}
 8005c64:	4770      	bx	lr

08005c66 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8005c66:	b538      	push	{r3, r4, r5, lr}
 8005c68:	4604      	mov	r4, r0
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8005c6a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8005c6e:	b2d8      	uxtb	r0, r3

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8005c70:	2802      	cmp	r0, #2
 8005c72:	d005      	beq.n	8005c80 <HAL_SDRAM_SendCommand+0x1a>
 8005c74:	460d      	mov	r5, r1
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8005c76:	2805      	cmp	r0, #5
 8005c78:	bf18      	it	ne
 8005c7a:	2801      	cmpne	r0, #1
 8005c7c:	d001      	beq.n	8005c82 <HAL_SDRAM_SendCommand+0x1c>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 8005c7e:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8005c80:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005c82:	2302      	movs	r3, #2
 8005c84:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005c88:	6820      	ldr	r0, [r4, #0]
 8005c8a:	f001 f82b 	bl	8006ce4 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005c8e:	682b      	ldr	r3, [r5, #0]
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d004      	beq.n	8005c9e <HAL_SDRAM_SendCommand+0x38>
      hsdram->State = HAL_SDRAM_STATE_READY;
 8005c94:	2301      	movs	r3, #1
 8005c96:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 8005c9a:	2000      	movs	r0, #0
 8005c9c:	e7f0      	b.n	8005c80 <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005c9e:	2305      	movs	r3, #5
 8005ca0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 8005ca4:	2000      	movs	r0, #0
 8005ca6:	e7eb      	b.n	8005c80 <HAL_SDRAM_SendCommand+0x1a>

08005ca8 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8005ca8:	b510      	push	{r4, lr}
 8005caa:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005cac:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8005cb0:	b2d8      	uxtb	r0, r3
 8005cb2:	2802      	cmp	r0, #2
 8005cb4:	d005      	beq.n	8005cc2 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8005cb6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d001      	beq.n	8005cc4 <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 8005cc0:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8005cc2:	bd10      	pop	{r4, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005cc4:	2302      	movs	r3, #2
 8005cc6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8005cca:	6820      	ldr	r0, [r4, #0]
 8005ccc:	f001 f822 	bl	8006d14 <FMC_SDRAM_ProgramRefreshRate>
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 8005cd6:	2000      	movs	r0, #0
 8005cd8:	e7f3      	b.n	8005cc2 <HAL_SDRAM_ProgramRefreshRate+0x1a>

08005cda <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005cda:	4770      	bx	lr

08005cdc <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005cdc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d13a      	bne.n	8005d5c <HAL_TIM_Base_Start_IT+0x80>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ce6:	2302      	movs	r3, #2
 8005ce8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005cec:	6802      	ldr	r2, [r0, #0]
 8005cee:	68d3      	ldr	r3, [r2, #12]
 8005cf0:	f043 0301 	orr.w	r3, r3, #1
 8005cf4:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cf6:	6803      	ldr	r3, [r0, #0]
 8005cf8:	4a1a      	ldr	r2, [pc, #104]	; (8005d64 <HAL_TIM_Base_Start_IT+0x88>)
 8005cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cfe:	bf18      	it	ne
 8005d00:	4293      	cmpne	r3, r2
 8005d02:	d01d      	beq.n	8005d40 <HAL_TIM_Base_Start_IT+0x64>
 8005d04:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d019      	beq.n	8005d40 <HAL_TIM_Base_Start_IT+0x64>
 8005d0c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d015      	beq.n	8005d40 <HAL_TIM_Base_Start_IT+0x64>
 8005d14:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d011      	beq.n	8005d40 <HAL_TIM_Base_Start_IT+0x64>
 8005d1c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d00d      	beq.n	8005d40 <HAL_TIM_Base_Start_IT+0x64>
 8005d24:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d009      	beq.n	8005d40 <HAL_TIM_Base_Start_IT+0x64>
 8005d2c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d005      	beq.n	8005d40 <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	f042 0201 	orr.w	r2, r2, #1
 8005d3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d3c:	2000      	movs	r0, #0
 8005d3e:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d40:	6899      	ldr	r1, [r3, #8]
 8005d42:	4a09      	ldr	r2, [pc, #36]	; (8005d68 <HAL_TIM_Base_Start_IT+0x8c>)
 8005d44:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d46:	2a06      	cmp	r2, #6
 8005d48:	bf18      	it	ne
 8005d4a:	f5b2 3f80 	cmpne.w	r2, #65536	; 0x10000
 8005d4e:	d007      	beq.n	8005d60 <HAL_TIM_Base_Start_IT+0x84>
      __HAL_TIM_ENABLE(htim);
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	f042 0201 	orr.w	r2, r2, #1
 8005d56:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005d58:	2000      	movs	r0, #0
 8005d5a:	4770      	bx	lr
    return HAL_ERROR;
 8005d5c:	2001      	movs	r0, #1
 8005d5e:	4770      	bx	lr
  return HAL_OK;
 8005d60:	2000      	movs	r0, #0
}
 8005d62:	4770      	bx	lr
 8005d64:	40010000 	.word	0x40010000
 8005d68:	00010007 	.word	0x00010007

08005d6c <HAL_TIM_PeriodElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005d6c:	4770      	bx	lr

08005d6e <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d6e:	4770      	bx	lr

08005d70 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d70:	4770      	bx	lr

08005d72 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d72:	4770      	bx	lr

08005d74 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d74:	4770      	bx	lr

08005d76 <HAL_TIM_IRQHandler>:
{
 8005d76:	b510      	push	{r4, lr}
 8005d78:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d7a:	6803      	ldr	r3, [r0, #0]
 8005d7c:	691a      	ldr	r2, [r3, #16]
 8005d7e:	f012 0f02 	tst.w	r2, #2
 8005d82:	d011      	beq.n	8005da8 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d84:	68da      	ldr	r2, [r3, #12]
 8005d86:	f012 0f02 	tst.w	r2, #2
 8005d8a:	d00d      	beq.n	8005da8 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d8c:	f06f 0202 	mvn.w	r2, #2
 8005d90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d92:	2301      	movs	r3, #1
 8005d94:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d96:	6803      	ldr	r3, [r0, #0]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	f013 0f03 	tst.w	r3, #3
 8005d9e:	d079      	beq.n	8005e94 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8005da0:	f7ff ffe6 	bl	8005d70 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005da4:	2300      	movs	r3, #0
 8005da6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005da8:	6823      	ldr	r3, [r4, #0]
 8005daa:	691a      	ldr	r2, [r3, #16]
 8005dac:	f012 0f04 	tst.w	r2, #4
 8005db0:	d012      	beq.n	8005dd8 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005db2:	68da      	ldr	r2, [r3, #12]
 8005db4:	f012 0f04 	tst.w	r2, #4
 8005db8:	d00e      	beq.n	8005dd8 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005dba:	f06f 0204 	mvn.w	r2, #4
 8005dbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dc0:	2302      	movs	r3, #2
 8005dc2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005dc4:	6823      	ldr	r3, [r4, #0]
 8005dc6:	699b      	ldr	r3, [r3, #24]
 8005dc8:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005dcc:	d068      	beq.n	8005ea0 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8005dce:	4620      	mov	r0, r4
 8005dd0:	f7ff ffce 	bl	8005d70 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005dd8:	6823      	ldr	r3, [r4, #0]
 8005dda:	691a      	ldr	r2, [r3, #16]
 8005ddc:	f012 0f08 	tst.w	r2, #8
 8005de0:	d012      	beq.n	8005e08 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005de2:	68da      	ldr	r2, [r3, #12]
 8005de4:	f012 0f08 	tst.w	r2, #8
 8005de8:	d00e      	beq.n	8005e08 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005dea:	f06f 0208 	mvn.w	r2, #8
 8005dee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005df0:	2304      	movs	r3, #4
 8005df2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005df4:	6823      	ldr	r3, [r4, #0]
 8005df6:	69db      	ldr	r3, [r3, #28]
 8005df8:	f013 0f03 	tst.w	r3, #3
 8005dfc:	d057      	beq.n	8005eae <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8005dfe:	4620      	mov	r0, r4
 8005e00:	f7ff ffb6 	bl	8005d70 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e04:	2300      	movs	r3, #0
 8005e06:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e08:	6823      	ldr	r3, [r4, #0]
 8005e0a:	691a      	ldr	r2, [r3, #16]
 8005e0c:	f012 0f10 	tst.w	r2, #16
 8005e10:	d012      	beq.n	8005e38 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e12:	68da      	ldr	r2, [r3, #12]
 8005e14:	f012 0f10 	tst.w	r2, #16
 8005e18:	d00e      	beq.n	8005e38 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e1a:	f06f 0210 	mvn.w	r2, #16
 8005e1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e20:	2308      	movs	r3, #8
 8005e22:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e24:	6823      	ldr	r3, [r4, #0]
 8005e26:	69db      	ldr	r3, [r3, #28]
 8005e28:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005e2c:	d046      	beq.n	8005ebc <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8005e2e:	4620      	mov	r0, r4
 8005e30:	f7ff ff9e 	bl	8005d70 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e34:	2300      	movs	r3, #0
 8005e36:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e38:	6823      	ldr	r3, [r4, #0]
 8005e3a:	691a      	ldr	r2, [r3, #16]
 8005e3c:	f012 0f01 	tst.w	r2, #1
 8005e40:	d003      	beq.n	8005e4a <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e42:	68da      	ldr	r2, [r3, #12]
 8005e44:	f012 0f01 	tst.w	r2, #1
 8005e48:	d13f      	bne.n	8005eca <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e4a:	6823      	ldr	r3, [r4, #0]
 8005e4c:	691a      	ldr	r2, [r3, #16]
 8005e4e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005e52:	d003      	beq.n	8005e5c <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e54:	68da      	ldr	r2, [r3, #12]
 8005e56:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005e5a:	d13d      	bne.n	8005ed8 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005e5c:	6823      	ldr	r3, [r4, #0]
 8005e5e:	691a      	ldr	r2, [r3, #16]
 8005e60:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005e64:	d003      	beq.n	8005e6e <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e66:	68da      	ldr	r2, [r3, #12]
 8005e68:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005e6c:	d13b      	bne.n	8005ee6 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e6e:	6823      	ldr	r3, [r4, #0]
 8005e70:	691a      	ldr	r2, [r3, #16]
 8005e72:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005e76:	d003      	beq.n	8005e80 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e78:	68da      	ldr	r2, [r3, #12]
 8005e7a:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005e7e:	d139      	bne.n	8005ef4 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e80:	6823      	ldr	r3, [r4, #0]
 8005e82:	691a      	ldr	r2, [r3, #16]
 8005e84:	f012 0f20 	tst.w	r2, #32
 8005e88:	d003      	beq.n	8005e92 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e8a:	68da      	ldr	r2, [r3, #12]
 8005e8c:	f012 0f20 	tst.w	r2, #32
 8005e90:	d137      	bne.n	8005f02 <HAL_TIM_IRQHandler+0x18c>
}
 8005e92:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e94:	f7ff ff6b 	bl	8005d6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e98:	4620      	mov	r0, r4
 8005e9a:	f7ff ff6a 	bl	8005d72 <HAL_TIM_PWM_PulseFinishedCallback>
 8005e9e:	e781      	b.n	8005da4 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ea0:	4620      	mov	r0, r4
 8005ea2:	f7ff ff64 	bl	8005d6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ea6:	4620      	mov	r0, r4
 8005ea8:	f7ff ff63 	bl	8005d72 <HAL_TIM_PWM_PulseFinishedCallback>
 8005eac:	e792      	b.n	8005dd4 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eae:	4620      	mov	r0, r4
 8005eb0:	f7ff ff5d 	bl	8005d6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eb4:	4620      	mov	r0, r4
 8005eb6:	f7ff ff5c 	bl	8005d72 <HAL_TIM_PWM_PulseFinishedCallback>
 8005eba:	e7a3      	b.n	8005e04 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ebc:	4620      	mov	r0, r4
 8005ebe:	f7ff ff56 	bl	8005d6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ec2:	4620      	mov	r0, r4
 8005ec4:	f7ff ff55 	bl	8005d72 <HAL_TIM_PWM_PulseFinishedCallback>
 8005ec8:	e7b4      	b.n	8005e34 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005eca:	f06f 0201 	mvn.w	r2, #1
 8005ece:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ed0:	4620      	mov	r0, r4
 8005ed2:	f7ff ff4b 	bl	8005d6c <HAL_TIM_PeriodElapsedCallback>
 8005ed6:	e7b8      	b.n	8005e4a <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ed8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005edc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005ede:	4620      	mov	r0, r4
 8005ee0:	f000 f8cf 	bl	8006082 <HAL_TIMEx_BreakCallback>
 8005ee4:	e7ba      	b.n	8005e5c <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005ee6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005eea:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8005eec:	4620      	mov	r0, r4
 8005eee:	f000 f8c9 	bl	8006084 <HAL_TIMEx_Break2Callback>
 8005ef2:	e7bc      	b.n	8005e6e <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ef4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ef8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005efa:	4620      	mov	r0, r4
 8005efc:	f7ff ff3a 	bl	8005d74 <HAL_TIM_TriggerCallback>
 8005f00:	e7be      	b.n	8005e80 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f02:	f06f 0220 	mvn.w	r2, #32
 8005f06:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8005f08:	4620      	mov	r0, r4
 8005f0a:	f000 f8b9 	bl	8006080 <HAL_TIMEx_CommutCallback>
}
 8005f0e:	e7c0      	b.n	8005e92 <HAL_TIM_IRQHandler+0x11c>

08005f10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f10:	b530      	push	{r4, r5, lr}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f12:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f14:	4a3b      	ldr	r2, [pc, #236]	; (8006004 <TIM_Base_SetConfig+0xf4>)
 8005f16:	4290      	cmp	r0, r2
 8005f18:	bf14      	ite	ne
 8005f1a:	f04f 0e00 	movne.w	lr, #0
 8005f1e:	f04f 0e01 	moveq.w	lr, #1
 8005f22:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005f26:	bf14      	ite	ne
 8005f28:	4672      	movne	r2, lr
 8005f2a:	f04e 0201 	orreq.w	r2, lr, #1
 8005f2e:	b9aa      	cbnz	r2, 8005f5c <TIM_Base_SetConfig+0x4c>
 8005f30:	4c35      	ldr	r4, [pc, #212]	; (8006008 <TIM_Base_SetConfig+0xf8>)
 8005f32:	42a0      	cmp	r0, r4
 8005f34:	bf14      	ite	ne
 8005f36:	2400      	movne	r4, #0
 8005f38:	2401      	moveq	r4, #1
 8005f3a:	4d34      	ldr	r5, [pc, #208]	; (800600c <TIM_Base_SetConfig+0xfc>)
 8005f3c:	42a8      	cmp	r0, r5
 8005f3e:	d00d      	beq.n	8005f5c <TIM_Base_SetConfig+0x4c>
 8005f40:	b964      	cbnz	r4, 8005f5c <TIM_Base_SetConfig+0x4c>
 8005f42:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8005f46:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
 8005f4a:	42a0      	cmp	r0, r4
 8005f4c:	bf14      	ite	ne
 8005f4e:	2400      	movne	r4, #0
 8005f50:	2401      	moveq	r4, #1
 8005f52:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005f56:	42a8      	cmp	r0, r5
 8005f58:	d000      	beq.n	8005f5c <TIM_Base_SetConfig+0x4c>
 8005f5a:	b11c      	cbz	r4, 8005f64 <TIM_Base_SetConfig+0x54>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005f60:	684c      	ldr	r4, [r1, #4]
 8005f62:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f64:	2a00      	cmp	r2, #0
 8005f66:	d133      	bne.n	8005fd0 <TIM_Base_SetConfig+0xc0>
 8005f68:	4a27      	ldr	r2, [pc, #156]	; (8006008 <TIM_Base_SetConfig+0xf8>)
 8005f6a:	4290      	cmp	r0, r2
 8005f6c:	bf14      	ite	ne
 8005f6e:	2200      	movne	r2, #0
 8005f70:	2201      	moveq	r2, #1
 8005f72:	4c26      	ldr	r4, [pc, #152]	; (800600c <TIM_Base_SetConfig+0xfc>)
 8005f74:	42a0      	cmp	r0, r4
 8005f76:	d02b      	beq.n	8005fd0 <TIM_Base_SetConfig+0xc0>
 8005f78:	bb52      	cbnz	r2, 8005fd0 <TIM_Base_SetConfig+0xc0>
 8005f7a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005f7e:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 8005f82:	4290      	cmp	r0, r2
 8005f84:	bf14      	ite	ne
 8005f86:	2200      	movne	r2, #0
 8005f88:	2201      	moveq	r2, #1
 8005f8a:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8005f8e:	42a0      	cmp	r0, r4
 8005f90:	d01e      	beq.n	8005fd0 <TIM_Base_SetConfig+0xc0>
 8005f92:	b9ea      	cbnz	r2, 8005fd0 <TIM_Base_SetConfig+0xc0>
 8005f94:	4a1e      	ldr	r2, [pc, #120]	; (8006010 <TIM_Base_SetConfig+0x100>)
 8005f96:	4290      	cmp	r0, r2
 8005f98:	bf14      	ite	ne
 8005f9a:	2200      	movne	r2, #0
 8005f9c:	2201      	moveq	r2, #1
 8005f9e:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 8005fa2:	42a0      	cmp	r0, r4
 8005fa4:	d014      	beq.n	8005fd0 <TIM_Base_SetConfig+0xc0>
 8005fa6:	b99a      	cbnz	r2, 8005fd0 <TIM_Base_SetConfig+0xc0>
 8005fa8:	4a1a      	ldr	r2, [pc, #104]	; (8006014 <TIM_Base_SetConfig+0x104>)
 8005faa:	4290      	cmp	r0, r2
 8005fac:	bf14      	ite	ne
 8005fae:	2200      	movne	r2, #0
 8005fb0:	2201      	moveq	r2, #1
 8005fb2:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8005fb6:	42a0      	cmp	r0, r4
 8005fb8:	d00a      	beq.n	8005fd0 <TIM_Base_SetConfig+0xc0>
 8005fba:	b94a      	cbnz	r2, 8005fd0 <TIM_Base_SetConfig+0xc0>
 8005fbc:	4a16      	ldr	r2, [pc, #88]	; (8006018 <TIM_Base_SetConfig+0x108>)
 8005fbe:	4290      	cmp	r0, r2
 8005fc0:	bf14      	ite	ne
 8005fc2:	2200      	movne	r2, #0
 8005fc4:	2201      	moveq	r2, #1
 8005fc6:	f5a4 3496 	sub.w	r4, r4, #76800	; 0x12c00
 8005fca:	42a0      	cmp	r0, r4
 8005fcc:	d000      	beq.n	8005fd0 <TIM_Base_SetConfig+0xc0>
 8005fce:	b122      	cbz	r2, 8005fda <TIM_Base_SetConfig+0xca>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fd0:	f423 7c40 	bic.w	ip, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fd4:	68cb      	ldr	r3, [r1, #12]
 8005fd6:	ea43 030c 	orr.w	r3, r3, ip
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fde:	694a      	ldr	r2, [r1, #20]
 8005fe0:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8005fe2:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fe4:	688a      	ldr	r2, [r1, #8]
 8005fe6:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fe8:	680a      	ldr	r2, [r1, #0]
 8005fea:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fec:	4a0b      	ldr	r2, [pc, #44]	; (800601c <TIM_Base_SetConfig+0x10c>)
 8005fee:	4290      	cmp	r0, r2
 8005ff0:	bf14      	ite	ne
 8005ff2:	4673      	movne	r3, lr
 8005ff4:	f04e 0301 	orreq.w	r3, lr, #1
 8005ff8:	b10b      	cbz	r3, 8005ffe <TIM_Base_SetConfig+0xee>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ffa:	690b      	ldr	r3, [r1, #16]
 8005ffc:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ffe:	2301      	movs	r3, #1
 8006000:	6143      	str	r3, [r0, #20]
}
 8006002:	bd30      	pop	{r4, r5, pc}
 8006004:	40010000 	.word	0x40010000
 8006008:	40000800 	.word	0x40000800
 800600c:	40000400 	.word	0x40000400
 8006010:	40014400 	.word	0x40014400
 8006014:	40001800 	.word	0x40001800
 8006018:	40002000 	.word	0x40002000
 800601c:	40010400 	.word	0x40010400

08006020 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8006020:	b360      	cbz	r0, 800607c <HAL_TIM_Base_Init+0x5c>
{
 8006022:	b510      	push	{r4, lr}
 8006024:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8006026:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800602a:	b313      	cbz	r3, 8006072 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800602c:	2302      	movs	r3, #2
 800602e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006032:	4621      	mov	r1, r4
 8006034:	f851 0b04 	ldr.w	r0, [r1], #4
 8006038:	f7ff ff6a 	bl	8005f10 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800603c:	2301      	movs	r3, #1
 800603e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006042:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006046:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800604a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800604e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8006052:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006056:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800605a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800605e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006062:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8006066:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800606a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800606e:	2000      	movs	r0, #0
}
 8006070:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8006072:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006076:	f7ff fe30 	bl	8005cda <HAL_TIM_Base_MspInit>
 800607a:	e7d7      	b.n	800602c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800607c:	2001      	movs	r0, #1
}
 800607e:	4770      	bx	lr

08006080 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006080:	4770      	bx	lr

08006082 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006082:	4770      	bx	lr

08006084 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006084:	4770      	bx	lr

08006086 <UART_EndRxTransfer>:
 * @param  huart UART handle.
 * @retval None
 */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart) {
	/* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
	ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006086:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006088:	e852 3f00 	ldrex	r3, [r2]
 800608c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006090:	e842 3100 	strex	r1, r3, [r2]
 8006094:	2900      	cmp	r1, #0
 8006096:	d1f6      	bne.n	8006086 <UART_EndRxTransfer>
	ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006098:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609a:	f102 0308 	add.w	r3, r2, #8
 800609e:	e853 3f00 	ldrex	r3, [r3]
 80060a2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a6:	3208      	adds	r2, #8
 80060a8:	e842 3100 	strex	r1, r3, [r2]
 80060ac:	2900      	cmp	r1, #0
 80060ae:	d1f3      	bne.n	8006098 <UART_EndRxTransfer+0x12>

	/* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
	if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
 80060b0:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d006      	beq.n	80060c4 <UART_EndRxTransfer+0x3e>
		ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
	}

	/* At end of Rx process, restore huart->RxState to Ready */
	huart->RxState = HAL_UART_STATE_READY;
 80060b6:	2320      	movs	r3, #32
 80060b8:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060bc:	2300      	movs	r3, #0
 80060be:	6603      	str	r3, [r0, #96]	; 0x60

	/* Reset RxIsr function pointer */
	huart->RxISR = NULL;
 80060c0:	6683      	str	r3, [r0, #104]	; 0x68
}
 80060c2:	4770      	bx	lr
		ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060c4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c6:	e852 3f00 	ldrex	r3, [r2]
 80060ca:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ce:	e842 3100 	strex	r1, r3, [r2]
 80060d2:	2900      	cmp	r1, #0
 80060d4:	d1f6      	bne.n	80060c4 <UART_EndRxTransfer+0x3e>
 80060d6:	e7ee      	b.n	80060b6 <UART_EndRxTransfer+0x30>

080060d8 <UART_TxISR_8BIT>:
 * @param huart UART handle.
 * @retval None
 */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart) {
	/* Check that a Tx process is ongoing */
	if (huart->gState == HAL_UART_STATE_BUSY_TX) {
 80060d8:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80060da:	2b21      	cmp	r3, #33	; 0x21
 80060dc:	d000      	beq.n	80060e0 <UART_TxISR_8BIT+0x8>
					& (uint8_t) 0xFF);
			huart->pTxBuffPtr++;
			huart->TxXferCount--;
		}
	}
}
 80060de:	4770      	bx	lr
		if (huart->TxXferCount == 0U) {
 80060e0:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	b993      	cbnz	r3, 800610e <UART_TxISR_8BIT+0x36>
			ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80060e8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ea:	e852 3f00 	ldrex	r3, [r2]
 80060ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f2:	e842 3100 	strex	r1, r3, [r2]
 80060f6:	2900      	cmp	r1, #0
 80060f8:	d1f6      	bne.n	80060e8 <UART_TxISR_8BIT+0x10>
			ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80060fa:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060fc:	e852 3f00 	ldrex	r3, [r2]
 8006100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006104:	e842 3100 	strex	r1, r3, [r2]
 8006108:	2900      	cmp	r1, #0
 800610a:	d1f6      	bne.n	80060fa <UART_TxISR_8BIT+0x22>
 800610c:	4770      	bx	lr
			huart->Instance->TDR = (uint8_t) (*huart->pTxBuffPtr
 800610e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006110:	781a      	ldrb	r2, [r3, #0]
 8006112:	6803      	ldr	r3, [r0, #0]
 8006114:	629a      	str	r2, [r3, #40]	; 0x28
			huart->pTxBuffPtr++;
 8006116:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006118:	3301      	adds	r3, #1
 800611a:	64c3      	str	r3, [r0, #76]	; 0x4c
			huart->TxXferCount--;
 800611c:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8006120:	b29b      	uxth	r3, r3
 8006122:	3b01      	subs	r3, #1
 8006124:	b29b      	uxth	r3, r3
 8006126:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
}
 800612a:	e7d8      	b.n	80060de <UART_TxISR_8BIT+0x6>

0800612c <UART_TxISR_16BIT>:
 */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart) {
	const uint16_t *tmp;

	/* Check that a Tx process is ongoing */
	if (huart->gState == HAL_UART_STATE_BUSY_TX) {
 800612c:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800612e:	2b21      	cmp	r3, #33	; 0x21
 8006130:	d000      	beq.n	8006134 <UART_TxISR_16BIT+0x8>
			huart->Instance->TDR = (((uint32_t) (*tmp)) & 0x01FFUL);
			huart->pTxBuffPtr += 2U;
			huart->TxXferCount--;
		}
	}
}
 8006132:	4770      	bx	lr
		if (huart->TxXferCount == 0U) {
 8006134:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8006138:	b29b      	uxth	r3, r3
 800613a:	b993      	cbnz	r3, 8006162 <UART_TxISR_16BIT+0x36>
			ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800613c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800613e:	e852 3f00 	ldrex	r3, [r2]
 8006142:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006146:	e842 3100 	strex	r1, r3, [r2]
 800614a:	2900      	cmp	r1, #0
 800614c:	d1f6      	bne.n	800613c <UART_TxISR_16BIT+0x10>
			ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800614e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006150:	e852 3f00 	ldrex	r3, [r2]
 8006154:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006158:	e842 3100 	strex	r1, r3, [r2]
 800615c:	2900      	cmp	r1, #0
 800615e:	d1f6      	bne.n	800614e <UART_TxISR_16BIT+0x22>
 8006160:	4770      	bx	lr
			tmp = (const uint16_t*) huart->pTxBuffPtr;
 8006162:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
			huart->Instance->TDR = (((uint32_t) (*tmp)) & 0x01FFUL);
 8006164:	881b      	ldrh	r3, [r3, #0]
 8006166:	6802      	ldr	r2, [r0, #0]
 8006168:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800616c:	6293      	str	r3, [r2, #40]	; 0x28
			huart->pTxBuffPtr += 2U;
 800616e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006170:	3302      	adds	r3, #2
 8006172:	64c3      	str	r3, [r0, #76]	; 0x4c
			huart->TxXferCount--;
 8006174:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8006178:	b29b      	uxth	r3, r3
 800617a:	3b01      	subs	r3, #1
 800617c:	b29b      	uxth	r3, r3
 800617e:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
}
 8006182:	e7d6      	b.n	8006132 <UART_TxISR_16BIT+0x6>

08006184 <HAL_UART_Transmit_IT>:
	if (huart->gState == HAL_UART_STATE_READY) {
 8006184:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8006186:	2b20      	cmp	r3, #32
 8006188:	d125      	bne.n	80061d6 <HAL_UART_Transmit_IT+0x52>
		if ((pData == NULL) || (Size == 0U)) {
 800618a:	2a00      	cmp	r2, #0
 800618c:	bf18      	it	ne
 800618e:	2900      	cmpne	r1, #0
 8006190:	d023      	beq.n	80061da <HAL_UART_Transmit_IT+0x56>
		huart->pTxBuffPtr = pData;
 8006192:	64c1      	str	r1, [r0, #76]	; 0x4c
		huart->TxXferSize = Size;
 8006194:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
		huart->TxXferCount = Size;
 8006198:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
		huart->TxISR = NULL;
 800619c:	2300      	movs	r3, #0
 800619e:	66c3      	str	r3, [r0, #108]	; 0x6c
		huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061a0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		huart->gState = HAL_UART_STATE_BUSY_TX;
 80061a4:	2321      	movs	r3, #33	; 0x21
 80061a6:	67c3      	str	r3, [r0, #124]	; 0x7c
		if ((huart->Init.WordLength == UART_WORDLENGTH_9B)
 80061a8:	6883      	ldr	r3, [r0, #8]
 80061aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061ae:	d00c      	beq.n	80061ca <HAL_UART_Transmit_IT+0x46>
			huart->TxISR = UART_TxISR_8BIT;
 80061b0:	4b0b      	ldr	r3, [pc, #44]	; (80061e0 <HAL_UART_Transmit_IT+0x5c>)
 80061b2:	66c3      	str	r3, [r0, #108]	; 0x6c
		ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80061b4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b6:	e852 3f00 	ldrex	r3, [r2]
 80061ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061be:	e842 3100 	strex	r1, r3, [r2]
 80061c2:	2900      	cmp	r1, #0
 80061c4:	d1f6      	bne.n	80061b4 <HAL_UART_Transmit_IT+0x30>
		return HAL_OK;
 80061c6:	2000      	movs	r0, #0
 80061c8:	4770      	bx	lr
				&& (huart->Init.Parity == UART_PARITY_NONE)) {
 80061ca:	6903      	ldr	r3, [r0, #16]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d1ef      	bne.n	80061b0 <HAL_UART_Transmit_IT+0x2c>
			huart->TxISR = UART_TxISR_16BIT;
 80061d0:	4b04      	ldr	r3, [pc, #16]	; (80061e4 <HAL_UART_Transmit_IT+0x60>)
 80061d2:	66c3      	str	r3, [r0, #108]	; 0x6c
 80061d4:	e7ee      	b.n	80061b4 <HAL_UART_Transmit_IT+0x30>
		return HAL_BUSY;
 80061d6:	2002      	movs	r0, #2
 80061d8:	4770      	bx	lr
			return HAL_ERROR;
 80061da:	2001      	movs	r0, #1
}
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	080060d9 	.word	0x080060d9
 80061e4:	0800612d 	.word	0x0800612d

080061e8 <HAL_UART_TxCpltCallback>:
}
 80061e8:	4770      	bx	lr

080061ea <UART_EndTransmit_IT>:
 * @brief  Wrap up transmission in non-blocking mode.
 * @param  huart pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart) {
 80061ea:	b508      	push	{r3, lr}
	/* Disable the UART Transmit Complete Interrupt */
	ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80061ec:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ee:	e852 3f00 	ldrex	r3, [r2]
 80061f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f6:	e842 3100 	strex	r1, r3, [r2]
 80061fa:	2900      	cmp	r1, #0
 80061fc:	d1f6      	bne.n	80061ec <UART_EndTransmit_IT+0x2>

	/* Tx process is ended, restore huart->gState to Ready */
	huart->gState = HAL_UART_STATE_READY;
 80061fe:	2320      	movs	r3, #32
 8006200:	67c3      	str	r3, [r0, #124]	; 0x7c

	/* Cleat TxISR function pointer */
	huart->TxISR = NULL;
 8006202:	2300      	movs	r3, #0
 8006204:	66c3      	str	r3, [r0, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
	/*Call legacy weak Tx complete callback*/
	HAL_UART_TxCpltCallback(huart);
 8006206:	f7ff ffef 	bl	80061e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800620a:	bd08      	pop	{r3, pc}

0800620c <HAL_UART_ErrorCallback>:
}
 800620c:	4770      	bx	lr

0800620e <UART_DMAAbortOnError>:
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma) {
 800620e:	b508      	push	{r3, lr}
	UART_HandleTypeDef *huart = (UART_HandleTypeDef*) (hdma->Parent);
 8006210:	6b80      	ldr	r0, [r0, #56]	; 0x38
	huart->RxXferCount = 0U;
 8006212:	2300      	movs	r3, #0
 8006214:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
	huart->TxXferCount = 0U;
 8006218:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
	HAL_UART_ErrorCallback(huart);
 800621c:	f7ff fff6 	bl	800620c <HAL_UART_ErrorCallback>
}
 8006220:	bd08      	pop	{r3, pc}

08006222 <HAL_UARTEx_RxEventCallback>:
}
 8006222:	4770      	bx	lr

08006224 <HAL_UARTEx_WakeupCallback>:
}
 8006224:	4770      	bx	lr
	...

08006228 <HAL_UART_IRQHandler>:
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart) {
 8006228:	b570      	push	{r4, r5, r6, lr}
 800622a:	4604      	mov	r4, r0
	uint32_t isrflags = READ_REG(huart->Instance->ISR);
 800622c:	6801      	ldr	r1, [r0, #0]
 800622e:	69cb      	ldr	r3, [r1, #28]
	uint32_t cr1its = READ_REG(huart->Instance->CR1);
 8006230:	6808      	ldr	r0, [r1, #0]
	uint32_t cr3its = READ_REG(huart->Instance->CR3);
 8006232:	688d      	ldr	r5, [r1, #8]
	errorflags = (isrflags
 8006234:	f640 020f 	movw	r2, #2063	; 0x80f
	if (errorflags == 0U) {
 8006238:	401a      	ands	r2, r3
 800623a:	d105      	bne.n	8006248 <HAL_UART_IRQHandler+0x20>
		if (((isrflags & USART_ISR_RXNE) != 0U)
 800623c:	f013 0f20 	tst.w	r3, #32
 8006240:	d002      	beq.n	8006248 <HAL_UART_IRQHandler+0x20>
				&& ((cr1its & USART_CR1_RXNEIE) != 0U)) {
 8006242:	f010 0f20 	tst.w	r0, #32
 8006246:	d120      	bne.n	800628a <HAL_UART_IRQHandler+0x62>
	if ((errorflags != 0U)
 8006248:	b12a      	cbz	r2, 8006256 <HAL_UART_IRQHandler+0x2e>
			&& (((cr3its & USART_CR3_EIE) != 0U)
 800624a:	f015 0201 	ands.w	r2, r5, #1
 800624e:	d122      	bne.n	8006296 <HAL_UART_IRQHandler+0x6e>
					|| ((cr1its
 8006250:	4eae      	ldr	r6, [pc, #696]	; (800650c <HAL_UART_IRQHandler+0x2e4>)
 8006252:	4230      	tst	r0, r6
 8006254:	d11f      	bne.n	8006296 <HAL_UART_IRQHandler+0x6e>
	if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006256:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8006258:	2a01      	cmp	r2, #1
 800625a:	f000 80ab 	beq.w	80063b4 <HAL_UART_IRQHandler+0x18c>
	if (((isrflags & USART_ISR_WUF) != 0U)
 800625e:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8006262:	d003      	beq.n	800626c <HAL_UART_IRQHandler+0x44>
			&& ((cr3its & USART_CR3_WUFIE) != 0U)) {
 8006264:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 8006268:	f040 813e 	bne.w	80064e8 <HAL_UART_IRQHandler+0x2c0>
	if (((isrflags & USART_ISR_TXE) != 0U)
 800626c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006270:	d003      	beq.n	800627a <HAL_UART_IRQHandler+0x52>
			&& ((cr1its & USART_CR1_TXEIE) != 0U)) {
 8006272:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006276:	f040 813e 	bne.w	80064f6 <HAL_UART_IRQHandler+0x2ce>
	if (((isrflags & USART_ISR_TC) != 0U)
 800627a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800627e:	d003      	beq.n	8006288 <HAL_UART_IRQHandler+0x60>
			&& ((cr1its & USART_CR1_TCIE) != 0U)) {
 8006280:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006284:	f040 813e 	bne.w	8006504 <HAL_UART_IRQHandler+0x2dc>
}
 8006288:	bd70      	pop	{r4, r5, r6, pc}
			if (huart->RxISR != NULL) {
 800628a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800628c:	2b00      	cmp	r3, #0
 800628e:	d0fb      	beq.n	8006288 <HAL_UART_IRQHandler+0x60>
				huart->RxISR(huart);
 8006290:	4620      	mov	r0, r4
 8006292:	4798      	blx	r3
			return;
 8006294:	e7f8      	b.n	8006288 <HAL_UART_IRQHandler+0x60>
		if (((isrflags & USART_ISR_PE) != 0U)
 8006296:	f013 0f01 	tst.w	r3, #1
 800629a:	d009      	beq.n	80062b0 <HAL_UART_IRQHandler+0x88>
				&& ((cr1its & USART_CR1_PEIE) != 0U)) {
 800629c:	f410 7f80 	tst.w	r0, #256	; 0x100
 80062a0:	d006      	beq.n	80062b0 <HAL_UART_IRQHandler+0x88>
			__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80062a2:	2501      	movs	r5, #1
 80062a4:	620d      	str	r5, [r1, #32]
			huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062a6:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80062aa:	4329      	orrs	r1, r5
 80062ac:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
		if (((isrflags & USART_ISR_FE) != 0U)
 80062b0:	f013 0f02 	tst.w	r3, #2
 80062b4:	d009      	beq.n	80062ca <HAL_UART_IRQHandler+0xa2>
				&& ((cr3its & USART_CR3_EIE) != 0U)) {
 80062b6:	b142      	cbz	r2, 80062ca <HAL_UART_IRQHandler+0xa2>
			__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80062b8:	6821      	ldr	r1, [r4, #0]
 80062ba:	2502      	movs	r5, #2
 80062bc:	620d      	str	r5, [r1, #32]
			huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062be:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80062c2:	f041 0104 	orr.w	r1, r1, #4
 80062c6:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
		if (((isrflags & USART_ISR_NE) != 0U)
 80062ca:	f013 0f04 	tst.w	r3, #4
 80062ce:	d009      	beq.n	80062e4 <HAL_UART_IRQHandler+0xbc>
				&& ((cr3its & USART_CR3_EIE) != 0U)) {
 80062d0:	b142      	cbz	r2, 80062e4 <HAL_UART_IRQHandler+0xbc>
			__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80062d2:	6821      	ldr	r1, [r4, #0]
 80062d4:	2504      	movs	r5, #4
 80062d6:	620d      	str	r5, [r1, #32]
			huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062d8:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80062dc:	f041 0102 	orr.w	r1, r1, #2
 80062e0:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
		if (((isrflags & USART_ISR_ORE) != 0U)
 80062e4:	f013 0f08 	tst.w	r3, #8
 80062e8:	d00b      	beq.n	8006302 <HAL_UART_IRQHandler+0xda>
				&& (((cr1its & USART_CR1_RXNEIE) != 0U)
 80062ea:	f010 0f20 	tst.w	r0, #32
 80062ee:	d100      	bne.n	80062f2 <HAL_UART_IRQHandler+0xca>
						|| ((cr3its & USART_CR3_EIE) != 0U))) {
 80062f0:	b13a      	cbz	r2, 8006302 <HAL_UART_IRQHandler+0xda>
			__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80062f2:	6822      	ldr	r2, [r4, #0]
 80062f4:	2108      	movs	r1, #8
 80062f6:	6211      	str	r1, [r2, #32]
			huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80062f8:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80062fc:	430a      	orrs	r2, r1
 80062fe:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
		if (((isrflags & USART_ISR_RTOF) != 0U)
 8006302:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8006306:	d00c      	beq.n	8006322 <HAL_UART_IRQHandler+0xfa>
				&& ((cr1its & USART_CR1_RTOIE) != 0U)) {
 8006308:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 800630c:	d009      	beq.n	8006322 <HAL_UART_IRQHandler+0xfa>
			__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800630e:	6822      	ldr	r2, [r4, #0]
 8006310:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006314:	6211      	str	r1, [r2, #32]
			huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006316:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800631a:	f042 0220 	orr.w	r2, r2, #32
 800631e:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
		if (huart->ErrorCode != HAL_UART_ERROR_NONE) {
 8006322:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8006326:	2a00      	cmp	r2, #0
 8006328:	d0ae      	beq.n	8006288 <HAL_UART_IRQHandler+0x60>
			if (((isrflags & USART_ISR_RXNE) != 0U)
 800632a:	f013 0f20 	tst.w	r3, #32
 800632e:	d006      	beq.n	800633e <HAL_UART_IRQHandler+0x116>
					&& ((cr1its & USART_CR1_RXNEIE) != 0U)) {
 8006330:	f010 0f20 	tst.w	r0, #32
 8006334:	d003      	beq.n	800633e <HAL_UART_IRQHandler+0x116>
				if (huart->RxISR != NULL) {
 8006336:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006338:	b10b      	cbz	r3, 800633e <HAL_UART_IRQHandler+0x116>
					huart->RxISR(huart);
 800633a:	4620      	mov	r0, r4
 800633c:	4798      	blx	r3
			errorcode = huart->ErrorCode;
 800633e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
			if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006342:	6823      	ldr	r3, [r4, #0]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	f013 0f40 	tst.w	r3, #64	; 0x40
 800634a:	d102      	bne.n	8006352 <HAL_UART_IRQHandler+0x12a>
					|| ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE))
 800634c:	f012 0f28 	tst.w	r2, #40	; 0x28
 8006350:	d029      	beq.n	80063a6 <HAL_UART_IRQHandler+0x17e>
				UART_EndRxTransfer(huart);
 8006352:	4620      	mov	r0, r4
 8006354:	f7ff fe97 	bl	8006086 <UART_EndRxTransfer>
				if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 8006358:	6823      	ldr	r3, [r4, #0]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006360:	d01d      	beq.n	800639e <HAL_UART_IRQHandler+0x176>
					ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006362:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006364:	f102 0308 	add.w	r3, r2, #8
 8006368:	e853 3f00 	ldrex	r3, [r3]
 800636c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006370:	3208      	adds	r2, #8
 8006372:	e842 3100 	strex	r1, r3, [r2]
 8006376:	2900      	cmp	r1, #0
 8006378:	d1f3      	bne.n	8006362 <HAL_UART_IRQHandler+0x13a>
					if (huart->hdmarx != NULL) {
 800637a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800637c:	b15b      	cbz	r3, 8006396 <HAL_UART_IRQHandler+0x16e>
						huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800637e:	4a64      	ldr	r2, [pc, #400]	; (8006510 <HAL_UART_IRQHandler+0x2e8>)
 8006380:	651a      	str	r2, [r3, #80]	; 0x50
						if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK) {
 8006382:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8006384:	f7fd fafe 	bl	8003984 <HAL_DMA_Abort_IT>
 8006388:	2800      	cmp	r0, #0
 800638a:	f43f af7d 	beq.w	8006288 <HAL_UART_IRQHandler+0x60>
							huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800638e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8006390:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006392:	4798      	blx	r3
 8006394:	e778      	b.n	8006288 <HAL_UART_IRQHandler+0x60>
						HAL_UART_ErrorCallback(huart);
 8006396:	4620      	mov	r0, r4
 8006398:	f7ff ff38 	bl	800620c <HAL_UART_ErrorCallback>
 800639c:	e774      	b.n	8006288 <HAL_UART_IRQHandler+0x60>
					HAL_UART_ErrorCallback(huart);
 800639e:	4620      	mov	r0, r4
 80063a0:	f7ff ff34 	bl	800620c <HAL_UART_ErrorCallback>
 80063a4:	e770      	b.n	8006288 <HAL_UART_IRQHandler+0x60>
				HAL_UART_ErrorCallback(huart);
 80063a6:	4620      	mov	r0, r4
 80063a8:	f7ff ff30 	bl	800620c <HAL_UART_ErrorCallback>
				huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063ac:	2300      	movs	r3, #0
 80063ae:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		return;
 80063b2:	e769      	b.n	8006288 <HAL_UART_IRQHandler+0x60>
			&& ((isrflags & USART_ISR_IDLE) != 0U)
 80063b4:	f013 0f10 	tst.w	r3, #16
 80063b8:	f43f af51 	beq.w	800625e <HAL_UART_IRQHandler+0x36>
			&& ((cr1its & USART_ISR_IDLE) != 0U)) {
 80063bc:	f010 0f10 	tst.w	r0, #16
 80063c0:	f43f af4d 	beq.w	800625e <HAL_UART_IRQHandler+0x36>
		__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063c4:	2310      	movs	r3, #16
 80063c6:	620b      	str	r3, [r1, #32]
		if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 80063c8:	6823      	ldr	r3, [r4, #0]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80063d0:	d050      	beq.n	8006474 <HAL_UART_IRQHandler+0x24c>
			uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(
 80063d2:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80063d4:	6813      	ldr	r3, [r2, #0]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	b29b      	uxth	r3, r3
			if ((nb_remaining_rx_data > 0U)
 80063da:	2b00      	cmp	r3, #0
 80063dc:	f43f af54 	beq.w	8006288 <HAL_UART_IRQHandler+0x60>
					&& (nb_remaining_rx_data < huart->RxXferSize)) {
 80063e0:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 80063e4:	4299      	cmp	r1, r3
 80063e6:	f67f af4f 	bls.w	8006288 <HAL_UART_IRQHandler+0x60>
				huart->RxXferCount = nb_remaining_rx_data;
 80063ea:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
				if (huart->hdmarx->Init.Mode != DMA_CIRCULAR) {
 80063ee:	69d3      	ldr	r3, [r2, #28]
 80063f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063f4:	d031      	beq.n	800645a <HAL_UART_IRQHandler+0x232>
					ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063f6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f8:	e852 3f00 	ldrex	r3, [r2]
 80063fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006400:	e842 3100 	strex	r1, r3, [r2]
 8006404:	2900      	cmp	r1, #0
 8006406:	d1f6      	bne.n	80063f6 <HAL_UART_IRQHandler+0x1ce>
					ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006408:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640a:	f102 0308 	add.w	r3, r2, #8
 800640e:	e853 3f00 	ldrex	r3, [r3]
 8006412:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006416:	3208      	adds	r2, #8
 8006418:	e842 3100 	strex	r1, r3, [r2]
 800641c:	2900      	cmp	r1, #0
 800641e:	d1f3      	bne.n	8006408 <HAL_UART_IRQHandler+0x1e0>
					ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006420:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006422:	f102 0308 	add.w	r3, r2, #8
 8006426:	e853 3f00 	ldrex	r3, [r3]
 800642a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800642e:	3208      	adds	r2, #8
 8006430:	e842 3100 	strex	r1, r3, [r2]
 8006434:	2900      	cmp	r1, #0
 8006436:	d1f3      	bne.n	8006420 <HAL_UART_IRQHandler+0x1f8>
					huart->RxState = HAL_UART_STATE_READY;
 8006438:	2320      	movs	r3, #32
 800643a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
					huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800643e:	2300      	movs	r3, #0
 8006440:	6623      	str	r3, [r4, #96]	; 0x60
					ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006442:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006444:	e852 3f00 	ldrex	r3, [r2]
 8006448:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644c:	e842 3100 	strex	r1, r3, [r2]
 8006450:	2900      	cmp	r1, #0
 8006452:	d1f6      	bne.n	8006442 <HAL_UART_IRQHandler+0x21a>
					(void) HAL_DMA_Abort(huart->hdmarx);
 8006454:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8006456:	f7fd fa4b 	bl	80038f0 <HAL_DMA_Abort>
				huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800645a:	2302      	movs	r3, #2
 800645c:	6663      	str	r3, [r4, #100]	; 0x64
						(huart->RxXferSize - huart->RxXferCount));
 800645e:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8006462:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8006466:	b29b      	uxth	r3, r3
				HAL_UARTEx_RxEventCallback(huart,
 8006468:	1ac9      	subs	r1, r1, r3
 800646a:	b289      	uxth	r1, r1
 800646c:	4620      	mov	r0, r4
 800646e:	f7ff fed8 	bl	8006222 <HAL_UARTEx_RxEventCallback>
			return;
 8006472:	e709      	b.n	8006288 <HAL_UART_IRQHandler+0x60>
			uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006474:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8006478:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800647c:	b29b      	uxth	r3, r3
 800647e:	1ac9      	subs	r1, r1, r3
 8006480:	b289      	uxth	r1, r1
			if ((huart->RxXferCount > 0U) && (nb_rx_data > 0U)) {
 8006482:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8006486:	b29b      	uxth	r3, r3
 8006488:	2b00      	cmp	r3, #0
 800648a:	f43f aefd 	beq.w	8006288 <HAL_UART_IRQHandler+0x60>
 800648e:	2900      	cmp	r1, #0
 8006490:	f43f aefa 	beq.w	8006288 <HAL_UART_IRQHandler+0x60>
				ATOMIC_CLEAR_BIT(huart->Instance->CR1,
 8006494:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006496:	e852 3f00 	ldrex	r3, [r2]
 800649a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649e:	e842 3000 	strex	r0, r3, [r2]
 80064a2:	2800      	cmp	r0, #0
 80064a4:	d1f6      	bne.n	8006494 <HAL_UART_IRQHandler+0x26c>
				ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064a6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a8:	f102 0308 	add.w	r3, r2, #8
 80064ac:	e853 3f00 	ldrex	r3, [r3]
 80064b0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b4:	3208      	adds	r2, #8
 80064b6:	e842 3000 	strex	r0, r3, [r2]
 80064ba:	2800      	cmp	r0, #0
 80064bc:	d1f3      	bne.n	80064a6 <HAL_UART_IRQHandler+0x27e>
				huart->RxState = HAL_UART_STATE_READY;
 80064be:	2320      	movs	r3, #32
 80064c0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
				huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064c4:	2300      	movs	r3, #0
 80064c6:	6623      	str	r3, [r4, #96]	; 0x60
				huart->RxISR = NULL;
 80064c8:	66a3      	str	r3, [r4, #104]	; 0x68
				ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064ca:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064cc:	e852 3f00 	ldrex	r3, [r2]
 80064d0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d4:	e842 3000 	strex	r0, r3, [r2]
 80064d8:	2800      	cmp	r0, #0
 80064da:	d1f6      	bne.n	80064ca <HAL_UART_IRQHandler+0x2a2>
				huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80064dc:	2302      	movs	r3, #2
 80064de:	6663      	str	r3, [r4, #100]	; 0x64
				HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80064e0:	4620      	mov	r0, r4
 80064e2:	f7ff fe9e 	bl	8006222 <HAL_UARTEx_RxEventCallback>
			return;
 80064e6:	e6cf      	b.n	8006288 <HAL_UART_IRQHandler+0x60>
		__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80064e8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80064ec:	620b      	str	r3, [r1, #32]
		HAL_UARTEx_WakeupCallback(huart);
 80064ee:	4620      	mov	r0, r4
 80064f0:	f7ff fe98 	bl	8006224 <HAL_UARTEx_WakeupCallback>
		return;
 80064f4:	e6c8      	b.n	8006288 <HAL_UART_IRQHandler+0x60>
		if (huart->TxISR != NULL) {
 80064f6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	f43f aec5 	beq.w	8006288 <HAL_UART_IRQHandler+0x60>
			huart->TxISR(huart);
 80064fe:	4620      	mov	r0, r4
 8006500:	4798      	blx	r3
		return;
 8006502:	e6c1      	b.n	8006288 <HAL_UART_IRQHandler+0x60>
		UART_EndTransmit_IT(huart);
 8006504:	4620      	mov	r0, r4
 8006506:	f7ff fe70 	bl	80061ea <UART_EndTransmit_IT>
		return;
 800650a:	e6bd      	b.n	8006288 <HAL_UART_IRQHandler+0x60>
 800650c:	04000120 	.word	0x04000120
 8006510:	0800620f 	.word	0x0800620f

08006514 <UART_SetConfig>:
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart) {
 8006514:	b510      	push	{r4, lr}
 8006516:	4604      	mov	r4, r0
	tmpreg = (uint32_t) huart->Init.WordLength | huart->Init.Parity
 8006518:	6883      	ldr	r3, [r0, #8]
 800651a:	6902      	ldr	r2, [r0, #16]
 800651c:	4313      	orrs	r3, r2
			| huart->Init.Mode | huart->Init.OverSampling;
 800651e:	6942      	ldr	r2, [r0, #20]
 8006520:	4313      	orrs	r3, r2
 8006522:	69c2      	ldr	r2, [r0, #28]
	tmpreg = (uint32_t) huart->Init.WordLength | huart->Init.Parity
 8006524:	4313      	orrs	r3, r2
	MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006526:	6801      	ldr	r1, [r0, #0]
 8006528:	6808      	ldr	r0, [r1, #0]
 800652a:	4a93      	ldr	r2, [pc, #588]	; (8006778 <UART_SetConfig+0x264>)
 800652c:	4002      	ands	r2, r0
 800652e:	431a      	orrs	r2, r3
 8006530:	600a      	str	r2, [r1, #0]
	MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006532:	6822      	ldr	r2, [r4, #0]
 8006534:	6853      	ldr	r3, [r2, #4]
 8006536:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800653a:	68e1      	ldr	r1, [r4, #12]
 800653c:	430b      	orrs	r3, r1
 800653e:	6053      	str	r3, [r2, #4]
	tmpreg = (uint32_t) huart->Init.HwFlowCtl;
 8006540:	69a2      	ldr	r2, [r4, #24]
	tmpreg |= huart->Init.OneBitSampling;
 8006542:	6a23      	ldr	r3, [r4, #32]
 8006544:	431a      	orrs	r2, r3
	MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006546:	6821      	ldr	r1, [r4, #0]
 8006548:	688b      	ldr	r3, [r1, #8]
 800654a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800654e:	4313      	orrs	r3, r2
 8006550:	608b      	str	r3, [r1, #8]
	UART_GETCLOCKSOURCE(huart, clocksource);
 8006552:	6823      	ldr	r3, [r4, #0]
 8006554:	4a89      	ldr	r2, [pc, #548]	; (800677c <UART_SetConfig+0x268>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d019      	beq.n	800658e <UART_SetConfig+0x7a>
 800655a:	4a89      	ldr	r2, [pc, #548]	; (8006780 <UART_SetConfig+0x26c>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d029      	beq.n	80065b4 <UART_SetConfig+0xa0>
 8006560:	4a88      	ldr	r2, [pc, #544]	; (8006784 <UART_SetConfig+0x270>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d03e      	beq.n	80065e4 <UART_SetConfig+0xd0>
 8006566:	4a88      	ldr	r2, [pc, #544]	; (8006788 <UART_SetConfig+0x274>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d062      	beq.n	8006632 <UART_SetConfig+0x11e>
 800656c:	4a87      	ldr	r2, [pc, #540]	; (800678c <UART_SetConfig+0x278>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d071      	beq.n	8006656 <UART_SetConfig+0x142>
 8006572:	4a87      	ldr	r2, [pc, #540]	; (8006790 <UART_SetConfig+0x27c>)
 8006574:	4293      	cmp	r3, r2
 8006576:	f000 8083 	beq.w	8006680 <UART_SetConfig+0x16c>
 800657a:	4a86      	ldr	r2, [pc, #536]	; (8006794 <UART_SetConfig+0x280>)
 800657c:	4293      	cmp	r3, r2
 800657e:	f000 8094 	beq.w	80066aa <UART_SetConfig+0x196>
 8006582:	4a85      	ldr	r2, [pc, #532]	; (8006798 <UART_SetConfig+0x284>)
 8006584:	4293      	cmp	r3, r2
 8006586:	f000 80a5 	beq.w	80066d4 <UART_SetConfig+0x1c0>
 800658a:	2310      	movs	r3, #16
 800658c:	e03a      	b.n	8006604 <UART_SetConfig+0xf0>
 800658e:	4b83      	ldr	r3, [pc, #524]	; (800679c <UART_SetConfig+0x288>)
 8006590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006594:	f003 0303 	and.w	r3, r3, #3
 8006598:	2b03      	cmp	r3, #3
 800659a:	d809      	bhi.n	80065b0 <UART_SetConfig+0x9c>
 800659c:	e8df f003 	tbb	[pc, r3]
 80065a0:	06ae0402 	.word	0x06ae0402
 80065a4:	2301      	movs	r3, #1
 80065a6:	e02d      	b.n	8006604 <UART_SetConfig+0xf0>
 80065a8:	2304      	movs	r3, #4
 80065aa:	e02b      	b.n	8006604 <UART_SetConfig+0xf0>
 80065ac:	2308      	movs	r3, #8
 80065ae:	e029      	b.n	8006604 <UART_SetConfig+0xf0>
 80065b0:	2310      	movs	r3, #16
 80065b2:	e027      	b.n	8006604 <UART_SetConfig+0xf0>
 80065b4:	4b79      	ldr	r3, [pc, #484]	; (800679c <UART_SetConfig+0x288>)
 80065b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ba:	f003 030c 	and.w	r3, r3, #12
 80065be:	2b0c      	cmp	r3, #12
 80065c0:	d80e      	bhi.n	80065e0 <UART_SetConfig+0xcc>
 80065c2:	e8df f003 	tbb	[pc, r3]
 80065c6:	0d07      	.short	0x0d07
 80065c8:	0d090d0d 	.word	0x0d090d0d
 80065cc:	0d9d0d0d 	.word	0x0d9d0d0d
 80065d0:	0d0d      	.short	0x0d0d
 80065d2:	0b          	.byte	0x0b
 80065d3:	00          	.byte	0x00
 80065d4:	2300      	movs	r3, #0
 80065d6:	e015      	b.n	8006604 <UART_SetConfig+0xf0>
 80065d8:	2304      	movs	r3, #4
 80065da:	e013      	b.n	8006604 <UART_SetConfig+0xf0>
 80065dc:	2308      	movs	r3, #8
 80065de:	e011      	b.n	8006604 <UART_SetConfig+0xf0>
 80065e0:	2310      	movs	r3, #16
 80065e2:	e00f      	b.n	8006604 <UART_SetConfig+0xf0>
 80065e4:	4b6d      	ldr	r3, [pc, #436]	; (800679c <UART_SetConfig+0x288>)
 80065e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80065ee:	2b20      	cmp	r3, #32
 80065f0:	f000 8088 	beq.w	8006704 <UART_SetConfig+0x1f0>
 80065f4:	d819      	bhi.n	800662a <UART_SetConfig+0x116>
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	f000 8086 	beq.w	8006708 <UART_SetConfig+0x1f4>
 80065fc:	2b10      	cmp	r3, #16
 80065fe:	f040 8085 	bne.w	800670c <UART_SetConfig+0x1f8>
 8006602:	2304      	movs	r3, #4
	if (huart->Init.OverSampling == UART_OVERSAMPLING_8) {
 8006604:	69e0      	ldr	r0, [r4, #28]
 8006606:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800660a:	f000 80ab 	beq.w	8006764 <UART_SetConfig+0x250>
		switch (clocksource) {
 800660e:	2b08      	cmp	r3, #8
 8006610:	f200 810c 	bhi.w	800682c <UART_SetConfig+0x318>
 8006614:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006618:	00fb00e8 	.word	0x00fb00e8
 800661c:	010a00e6 	.word	0x010a00e6
 8006620:	010a00fe 	.word	0x010a00fe
 8006624:	010a010a 	.word	0x010a010a
 8006628:	0101      	.short	0x0101
	UART_GETCLOCKSOURCE(huart, clocksource);
 800662a:	2b30      	cmp	r3, #48	; 0x30
 800662c:	d170      	bne.n	8006710 <UART_SetConfig+0x1fc>
 800662e:	2308      	movs	r3, #8
 8006630:	e7e8      	b.n	8006604 <UART_SetConfig+0xf0>
 8006632:	4b5a      	ldr	r3, [pc, #360]	; (800679c <UART_SetConfig+0x288>)
 8006634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006638:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800663c:	2b80      	cmp	r3, #128	; 0x80
 800663e:	d069      	beq.n	8006714 <UART_SetConfig+0x200>
 8006640:	d805      	bhi.n	800664e <UART_SetConfig+0x13a>
 8006642:	2b00      	cmp	r3, #0
 8006644:	d068      	beq.n	8006718 <UART_SetConfig+0x204>
 8006646:	2b40      	cmp	r3, #64	; 0x40
 8006648:	d168      	bne.n	800671c <UART_SetConfig+0x208>
 800664a:	2304      	movs	r3, #4
 800664c:	e7da      	b.n	8006604 <UART_SetConfig+0xf0>
 800664e:	2bc0      	cmp	r3, #192	; 0xc0
 8006650:	d166      	bne.n	8006720 <UART_SetConfig+0x20c>
 8006652:	2308      	movs	r3, #8
 8006654:	e7d6      	b.n	8006604 <UART_SetConfig+0xf0>
 8006656:	4b51      	ldr	r3, [pc, #324]	; (800679c <UART_SetConfig+0x288>)
 8006658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800665c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006660:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006664:	d05e      	beq.n	8006724 <UART_SetConfig+0x210>
 8006666:	d806      	bhi.n	8006676 <UART_SetConfig+0x162>
 8006668:	2b00      	cmp	r3, #0
 800666a:	d05d      	beq.n	8006728 <UART_SetConfig+0x214>
 800666c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006670:	d15c      	bne.n	800672c <UART_SetConfig+0x218>
 8006672:	2304      	movs	r3, #4
 8006674:	e7c6      	b.n	8006604 <UART_SetConfig+0xf0>
 8006676:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800667a:	d159      	bne.n	8006730 <UART_SetConfig+0x21c>
 800667c:	2308      	movs	r3, #8
 800667e:	e7c1      	b.n	8006604 <UART_SetConfig+0xf0>
 8006680:	4b46      	ldr	r3, [pc, #280]	; (800679c <UART_SetConfig+0x288>)
 8006682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006686:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800668a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800668e:	d051      	beq.n	8006734 <UART_SetConfig+0x220>
 8006690:	d806      	bhi.n	80066a0 <UART_SetConfig+0x18c>
 8006692:	2b00      	cmp	r3, #0
 8006694:	d050      	beq.n	8006738 <UART_SetConfig+0x224>
 8006696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800669a:	d14f      	bne.n	800673c <UART_SetConfig+0x228>
 800669c:	2304      	movs	r3, #4
 800669e:	e7b1      	b.n	8006604 <UART_SetConfig+0xf0>
 80066a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066a4:	d14c      	bne.n	8006740 <UART_SetConfig+0x22c>
 80066a6:	2308      	movs	r3, #8
 80066a8:	e7ac      	b.n	8006604 <UART_SetConfig+0xf0>
 80066aa:	4b3c      	ldr	r3, [pc, #240]	; (800679c <UART_SetConfig+0x288>)
 80066ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066b0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80066b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066b8:	d044      	beq.n	8006744 <UART_SetConfig+0x230>
 80066ba:	d806      	bhi.n	80066ca <UART_SetConfig+0x1b6>
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d043      	beq.n	8006748 <UART_SetConfig+0x234>
 80066c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066c4:	d142      	bne.n	800674c <UART_SetConfig+0x238>
 80066c6:	2304      	movs	r3, #4
 80066c8:	e79c      	b.n	8006604 <UART_SetConfig+0xf0>
 80066ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80066ce:	d13f      	bne.n	8006750 <UART_SetConfig+0x23c>
 80066d0:	2308      	movs	r3, #8
 80066d2:	e797      	b.n	8006604 <UART_SetConfig+0xf0>
 80066d4:	4b31      	ldr	r3, [pc, #196]	; (800679c <UART_SetConfig+0x288>)
 80066d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80066de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066e2:	d037      	beq.n	8006754 <UART_SetConfig+0x240>
 80066e4:	d805      	bhi.n	80066f2 <UART_SetConfig+0x1de>
 80066e6:	b3bb      	cbz	r3, 8006758 <UART_SetConfig+0x244>
 80066e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80066ec:	d136      	bne.n	800675c <UART_SetConfig+0x248>
 80066ee:	2304      	movs	r3, #4
 80066f0:	e788      	b.n	8006604 <UART_SetConfig+0xf0>
 80066f2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80066f6:	d133      	bne.n	8006760 <UART_SetConfig+0x24c>
 80066f8:	2308      	movs	r3, #8
 80066fa:	e783      	b.n	8006604 <UART_SetConfig+0xf0>
 80066fc:	2302      	movs	r3, #2
 80066fe:	e781      	b.n	8006604 <UART_SetConfig+0xf0>
 8006700:	2302      	movs	r3, #2
 8006702:	e77f      	b.n	8006604 <UART_SetConfig+0xf0>
 8006704:	2302      	movs	r3, #2
 8006706:	e77d      	b.n	8006604 <UART_SetConfig+0xf0>
 8006708:	2300      	movs	r3, #0
 800670a:	e77b      	b.n	8006604 <UART_SetConfig+0xf0>
 800670c:	2310      	movs	r3, #16
 800670e:	e779      	b.n	8006604 <UART_SetConfig+0xf0>
 8006710:	2310      	movs	r3, #16
 8006712:	e777      	b.n	8006604 <UART_SetConfig+0xf0>
 8006714:	2302      	movs	r3, #2
 8006716:	e775      	b.n	8006604 <UART_SetConfig+0xf0>
 8006718:	2300      	movs	r3, #0
 800671a:	e773      	b.n	8006604 <UART_SetConfig+0xf0>
 800671c:	2310      	movs	r3, #16
 800671e:	e771      	b.n	8006604 <UART_SetConfig+0xf0>
 8006720:	2310      	movs	r3, #16
 8006722:	e76f      	b.n	8006604 <UART_SetConfig+0xf0>
 8006724:	2302      	movs	r3, #2
 8006726:	e76d      	b.n	8006604 <UART_SetConfig+0xf0>
 8006728:	2300      	movs	r3, #0
 800672a:	e76b      	b.n	8006604 <UART_SetConfig+0xf0>
 800672c:	2310      	movs	r3, #16
 800672e:	e769      	b.n	8006604 <UART_SetConfig+0xf0>
 8006730:	2310      	movs	r3, #16
 8006732:	e767      	b.n	8006604 <UART_SetConfig+0xf0>
 8006734:	2302      	movs	r3, #2
 8006736:	e765      	b.n	8006604 <UART_SetConfig+0xf0>
 8006738:	2301      	movs	r3, #1
 800673a:	e763      	b.n	8006604 <UART_SetConfig+0xf0>
 800673c:	2310      	movs	r3, #16
 800673e:	e761      	b.n	8006604 <UART_SetConfig+0xf0>
 8006740:	2310      	movs	r3, #16
 8006742:	e75f      	b.n	8006604 <UART_SetConfig+0xf0>
 8006744:	2302      	movs	r3, #2
 8006746:	e75d      	b.n	8006604 <UART_SetConfig+0xf0>
 8006748:	2300      	movs	r3, #0
 800674a:	e75b      	b.n	8006604 <UART_SetConfig+0xf0>
 800674c:	2310      	movs	r3, #16
 800674e:	e759      	b.n	8006604 <UART_SetConfig+0xf0>
 8006750:	2310      	movs	r3, #16
 8006752:	e757      	b.n	8006604 <UART_SetConfig+0xf0>
 8006754:	2302      	movs	r3, #2
 8006756:	e755      	b.n	8006604 <UART_SetConfig+0xf0>
 8006758:	2300      	movs	r3, #0
 800675a:	e753      	b.n	8006604 <UART_SetConfig+0xf0>
 800675c:	2310      	movs	r3, #16
 800675e:	e751      	b.n	8006604 <UART_SetConfig+0xf0>
 8006760:	2310      	movs	r3, #16
 8006762:	e74f      	b.n	8006604 <UART_SetConfig+0xf0>
		switch (clocksource) {
 8006764:	2b08      	cmp	r3, #8
 8006766:	d85b      	bhi.n	8006820 <UART_SetConfig+0x30c>
 8006768:	e8df f003 	tbb	[pc, r3]
 800676c:	5a3a341a 	.word	0x5a3a341a
 8006770:	5a5a5a37 	.word	0x5a5a5a37
 8006774:	1e          	.byte	0x1e
 8006775:	00          	.byte	0x00
 8006776:	bf00      	nop
 8006778:	efff69f3 	.word	0xefff69f3
 800677c:	40011000 	.word	0x40011000
 8006780:	40004400 	.word	0x40004400
 8006784:	40004800 	.word	0x40004800
 8006788:	40004c00 	.word	0x40004c00
 800678c:	40005000 	.word	0x40005000
 8006790:	40011400 	.word	0x40011400
 8006794:	40007800 	.word	0x40007800
 8006798:	40007c00 	.word	0x40007c00
 800679c:	40023800 	.word	0x40023800
			pclk = HAL_RCC_GetPCLK1Freq();
 80067a0:	f7fe ff02 	bl	80055a8 <HAL_RCC_GetPCLK1Freq>
		if (pclk != 0U) {
 80067a4:	2800      	cmp	r0, #0
 80067a6:	d03d      	beq.n	8006824 <UART_SetConfig+0x310>
			usartdiv = (uint32_t) (UART_DIV_SAMPLING8(pclk,
 80067a8:	6862      	ldr	r2, [r4, #4]
 80067aa:	0853      	lsrs	r3, r2, #1
 80067ac:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80067b0:	fbb3 f3f2 	udiv	r3, r3, r2
			if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX)) {
 80067b4:	f1a3 0110 	sub.w	r1, r3, #16
 80067b8:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80067bc:	4291      	cmp	r1, r2
 80067be:	d833      	bhi.n	8006828 <UART_SetConfig+0x314>
				brrtemp = (uint16_t) (usartdiv & 0xFFF0U);
 80067c0:	b29a      	uxth	r2, r3
 80067c2:	f022 020f 	bic.w	r2, r2, #15
				brrtemp |= (uint16_t) ((usartdiv & (uint16_t) 0x000FU) >> 1U);
 80067c6:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80067ca:	4313      	orrs	r3, r2
				huart->Instance->BRR = brrtemp;
 80067cc:	6822      	ldr	r2, [r4, #0]
 80067ce:	60d3      	str	r3, [r2, #12]
 80067d0:	2000      	movs	r0, #0
 80067d2:	e030      	b.n	8006836 <UART_SetConfig+0x322>
			pclk = HAL_RCC_GetPCLK2Freq();
 80067d4:	f7fe fef8 	bl	80055c8 <HAL_RCC_GetPCLK2Freq>
			break;
 80067d8:	e7e4      	b.n	80067a4 <UART_SetConfig+0x290>
			pclk = HAL_RCC_GetSysClockFreq();
 80067da:	f7fe fdd5 	bl	8005388 <HAL_RCC_GetSysClockFreq>
			break;
 80067de:	e7e1      	b.n	80067a4 <UART_SetConfig+0x290>
			pclk = (uint32_t) HSI_VALUE;
 80067e0:	4817      	ldr	r0, [pc, #92]	; (8006840 <UART_SetConfig+0x32c>)
 80067e2:	e7e1      	b.n	80067a8 <UART_SetConfig+0x294>
		switch (clocksource) {
 80067e4:	4816      	ldr	r0, [pc, #88]	; (8006840 <UART_SetConfig+0x32c>)
 80067e6:	e002      	b.n	80067ee <UART_SetConfig+0x2da>
			pclk = HAL_RCC_GetPCLK1Freq();
 80067e8:	f7fe fede 	bl	80055a8 <HAL_RCC_GetPCLK1Freq>
		if (pclk != 0U) {
 80067ec:	b300      	cbz	r0, 8006830 <UART_SetConfig+0x31c>
			usartdiv = (uint32_t) (UART_DIV_SAMPLING16(pclk,
 80067ee:	6863      	ldr	r3, [r4, #4]
 80067f0:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80067f4:	fbb0 f0f3 	udiv	r0, r0, r3
			if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX)) {
 80067f8:	f1a0 0210 	sub.w	r2, r0, #16
 80067fc:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8006800:	429a      	cmp	r2, r3
 8006802:	d817      	bhi.n	8006834 <UART_SetConfig+0x320>
				huart->Instance->BRR = (uint16_t) usartdiv;
 8006804:	6823      	ldr	r3, [r4, #0]
 8006806:	b280      	uxth	r0, r0
 8006808:	60d8      	str	r0, [r3, #12]
 800680a:	2000      	movs	r0, #0
 800680c:	e013      	b.n	8006836 <UART_SetConfig+0x322>
			pclk = HAL_RCC_GetPCLK2Freq();
 800680e:	f7fe fedb 	bl	80055c8 <HAL_RCC_GetPCLK2Freq>
			break;
 8006812:	e7eb      	b.n	80067ec <UART_SetConfig+0x2d8>
			pclk = HAL_RCC_GetSysClockFreq();
 8006814:	f7fe fdb8 	bl	8005388 <HAL_RCC_GetSysClockFreq>
			break;
 8006818:	e7e8      	b.n	80067ec <UART_SetConfig+0x2d8>
			pclk = (uint32_t) LSE_VALUE;
 800681a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800681e:	e7e6      	b.n	80067ee <UART_SetConfig+0x2da>
		switch (clocksource) {
 8006820:	2001      	movs	r0, #1
 8006822:	e008      	b.n	8006836 <UART_SetConfig+0x322>
 8006824:	2000      	movs	r0, #0
 8006826:	e006      	b.n	8006836 <UART_SetConfig+0x322>
				ret = HAL_ERROR;
 8006828:	2001      	movs	r0, #1
 800682a:	e004      	b.n	8006836 <UART_SetConfig+0x322>
		switch (clocksource) {
 800682c:	2001      	movs	r0, #1
 800682e:	e002      	b.n	8006836 <UART_SetConfig+0x322>
 8006830:	2000      	movs	r0, #0
 8006832:	e000      	b.n	8006836 <UART_SetConfig+0x322>
				ret = HAL_ERROR;
 8006834:	2001      	movs	r0, #1
	huart->RxISR = NULL;
 8006836:	2300      	movs	r3, #0
 8006838:	66a3      	str	r3, [r4, #104]	; 0x68
	huart->TxISR = NULL;
 800683a:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 800683c:	bd10      	pop	{r4, pc}
 800683e:	bf00      	nop
 8006840:	00f42400 	.word	0x00f42400

08006844 <UART_AdvFeatureConfig>:
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8006844:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006846:	f013 0f01 	tst.w	r3, #1
 800684a:	d006      	beq.n	800685a <UART_AdvFeatureConfig+0x16>
		MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV,
 800684c:	6802      	ldr	r2, [r0, #0]
 800684e:	6853      	ldr	r3, [r2, #4]
 8006850:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006854:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8006856:	430b      	orrs	r3, r1
 8006858:	6053      	str	r3, [r2, #4]
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 800685a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800685c:	f013 0f02 	tst.w	r3, #2
 8006860:	d006      	beq.n	8006870 <UART_AdvFeatureConfig+0x2c>
		MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV,
 8006862:	6802      	ldr	r2, [r0, #0]
 8006864:	6853      	ldr	r3, [r2, #4]
 8006866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800686a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800686c:	430b      	orrs	r3, r1
 800686e:	6053      	str	r3, [r2, #4]
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8006870:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006872:	f013 0f04 	tst.w	r3, #4
 8006876:	d006      	beq.n	8006886 <UART_AdvFeatureConfig+0x42>
		MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV,
 8006878:	6802      	ldr	r2, [r0, #0]
 800687a:	6853      	ldr	r3, [r2, #4]
 800687c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006880:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8006882:	430b      	orrs	r3, r1
 8006884:	6053      	str	r3, [r2, #4]
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8006886:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006888:	f013 0f08 	tst.w	r3, #8
 800688c:	d006      	beq.n	800689c <UART_AdvFeatureConfig+0x58>
		MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP,
 800688e:	6802      	ldr	r2, [r0, #0]
 8006890:	6853      	ldr	r3, [r2, #4]
 8006892:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006896:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8006898:	430b      	orrs	r3, r1
 800689a:	6053      	str	r3, [r2, #4]
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 800689c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800689e:	f013 0f10 	tst.w	r3, #16
 80068a2:	d006      	beq.n	80068b2 <UART_AdvFeatureConfig+0x6e>
		MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS,
 80068a4:	6802      	ldr	r2, [r0, #0]
 80068a6:	6893      	ldr	r3, [r2, #8]
 80068a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068ac:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80068ae:	430b      	orrs	r3, r1
 80068b0:	6093      	str	r3, [r2, #8]
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 80068b2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80068b4:	f013 0f20 	tst.w	r3, #32
 80068b8:	d006      	beq.n	80068c8 <UART_AdvFeatureConfig+0x84>
		MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE,
 80068ba:	6802      	ldr	r2, [r0, #0]
 80068bc:	6893      	ldr	r3, [r2, #8]
 80068be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068c2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80068c4:	430b      	orrs	r3, r1
 80068c6:	6093      	str	r3, [r2, #8]
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 80068c8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80068ca:	f013 0f40 	tst.w	r3, #64	; 0x40
 80068ce:	d00a      	beq.n	80068e6 <UART_AdvFeatureConfig+0xa2>
		MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN,
 80068d0:	6802      	ldr	r2, [r0, #0]
 80068d2:	6853      	ldr	r3, [r2, #4]
 80068d4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80068d8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80068da:	430b      	orrs	r3, r1
 80068dc:	6053      	str	r3, [r2, #4]
		if (huart->AdvancedInit.AutoBaudRateEnable
 80068de:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80068e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068e4:	d00b      	beq.n	80068fe <UART_AdvFeatureConfig+0xba>
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 80068e6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80068e8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80068ec:	d006      	beq.n	80068fc <UART_AdvFeatureConfig+0xb8>
		MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST,
 80068ee:	6802      	ldr	r2, [r0, #0]
 80068f0:	6853      	ldr	r3, [r2, #4]
 80068f2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80068f6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80068f8:	430b      	orrs	r3, r1
 80068fa:	6053      	str	r3, [r2, #4]
}
 80068fc:	4770      	bx	lr
			MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE,
 80068fe:	6802      	ldr	r2, [r0, #0]
 8006900:	6853      	ldr	r3, [r2, #4]
 8006902:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006906:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8006908:	430b      	orrs	r3, r1
 800690a:	6053      	str	r3, [r2, #4]
 800690c:	e7eb      	b.n	80068e6 <UART_AdvFeatureConfig+0xa2>

0800690e <UART_WaitOnFlagUntilTimeout>:
		uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout) {
 800690e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006912:	4605      	mov	r5, r0
 8006914:	460f      	mov	r7, r1
 8006916:	4616      	mov	r6, r2
 8006918:	4699      	mov	r9, r3
 800691a:	f8dd 8020 	ldr.w	r8, [sp, #32]
	while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) {
 800691e:	682b      	ldr	r3, [r5, #0]
 8006920:	69dc      	ldr	r4, [r3, #28]
 8006922:	ea37 0404 	bics.w	r4, r7, r4
 8006926:	bf0c      	ite	eq
 8006928:	2401      	moveq	r4, #1
 800692a:	2400      	movne	r4, #0
 800692c:	42b4      	cmp	r4, r6
 800692e:	d155      	bne.n	80069dc <UART_WaitOnFlagUntilTimeout+0xce>
		if (Timeout != HAL_MAX_DELAY) {
 8006930:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006934:	d0f3      	beq.n	800691e <UART_WaitOnFlagUntilTimeout+0x10>
			if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8006936:	f7fc fe79 	bl	800362c <HAL_GetTick>
 800693a:	eba0 0009 	sub.w	r0, r0, r9
 800693e:	4540      	cmp	r0, r8
 8006940:	d82e      	bhi.n	80069a0 <UART_WaitOnFlagUntilTimeout+0x92>
 8006942:	f1b8 0f00 	cmp.w	r8, #0
 8006946:	d02b      	beq.n	80069a0 <UART_WaitOnFlagUntilTimeout+0x92>
			if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) {
 8006948:	682b      	ldr	r3, [r5, #0]
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	f012 0f04 	tst.w	r2, #4
 8006950:	d0e5      	beq.n	800691e <UART_WaitOnFlagUntilTimeout+0x10>
				if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET) {
 8006952:	69da      	ldr	r2, [r3, #28]
 8006954:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8006958:	d0e1      	beq.n	800691e <UART_WaitOnFlagUntilTimeout+0x10>
					__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800695a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800695e:	621a      	str	r2, [r3, #32]
					ATOMIC_CLEAR_BIT(huart->Instance->CR1,
 8006960:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006962:	e852 3f00 	ldrex	r3, [r2]
 8006966:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800696a:	e842 3100 	strex	r1, r3, [r2]
 800696e:	2900      	cmp	r1, #0
 8006970:	d1f6      	bne.n	8006960 <UART_WaitOnFlagUntilTimeout+0x52>
					ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006972:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006974:	f102 0308 	add.w	r3, r2, #8
 8006978:	e853 3f00 	ldrex	r3, [r3]
 800697c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006980:	3208      	adds	r2, #8
 8006982:	e842 3100 	strex	r1, r3, [r2]
 8006986:	2900      	cmp	r1, #0
 8006988:	d1f3      	bne.n	8006972 <UART_WaitOnFlagUntilTimeout+0x64>
					huart->gState = HAL_UART_STATE_READY;
 800698a:	2320      	movs	r3, #32
 800698c:	67eb      	str	r3, [r5, #124]	; 0x7c
					huart->RxState = HAL_UART_STATE_READY;
 800698e:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
					huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006992:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
					__HAL_UNLOCK(huart);
 8006996:	2300      	movs	r3, #0
 8006998:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
					return HAL_TIMEOUT;
 800699c:	2003      	movs	r0, #3
 800699e:	e01e      	b.n	80069de <UART_WaitOnFlagUntilTimeout+0xd0>
				ATOMIC_CLEAR_BIT(huart->Instance->CR1,
 80069a0:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a2:	e852 3f00 	ldrex	r3, [r2]
 80069a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069aa:	e842 3100 	strex	r1, r3, [r2]
 80069ae:	2900      	cmp	r1, #0
 80069b0:	d1f6      	bne.n	80069a0 <UART_WaitOnFlagUntilTimeout+0x92>
				ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069b2:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b4:	f102 0308 	add.w	r3, r2, #8
 80069b8:	e853 3f00 	ldrex	r3, [r3]
 80069bc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c0:	3208      	adds	r2, #8
 80069c2:	e842 3100 	strex	r1, r3, [r2]
 80069c6:	2900      	cmp	r1, #0
 80069c8:	d1f3      	bne.n	80069b2 <UART_WaitOnFlagUntilTimeout+0xa4>
				huart->gState = HAL_UART_STATE_READY;
 80069ca:	2320      	movs	r3, #32
 80069cc:	67eb      	str	r3, [r5, #124]	; 0x7c
				huart->RxState = HAL_UART_STATE_READY;
 80069ce:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
				__HAL_UNLOCK(huart);
 80069d2:	2300      	movs	r3, #0
 80069d4:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
				return HAL_TIMEOUT;
 80069d8:	2003      	movs	r0, #3
 80069da:	e000      	b.n	80069de <UART_WaitOnFlagUntilTimeout+0xd0>
	return HAL_OK;
 80069dc:	2000      	movs	r0, #0
}
 80069de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080069e2 <HAL_UART_Receive>:
		uint16_t Size, uint32_t Timeout) {
 80069e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80069e6:	b083      	sub	sp, #12
 80069e8:	461e      	mov	r6, r3
	if (huart->RxState == HAL_UART_STATE_READY) {
 80069ea:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80069ee:	2b20      	cmp	r3, #32
 80069f0:	d178      	bne.n	8006ae4 <HAL_UART_Receive+0x102>
 80069f2:	4604      	mov	r4, r0
 80069f4:	460d      	mov	r5, r1
 80069f6:	4690      	mov	r8, r2
		if ((pData == NULL) || (Size == 0U)) {
 80069f8:	2a00      	cmp	r2, #0
 80069fa:	bf18      	it	ne
 80069fc:	2900      	cmpne	r1, #0
 80069fe:	d101      	bne.n	8006a04 <HAL_UART_Receive+0x22>
			return HAL_ERROR;
 8006a00:	2001      	movs	r0, #1
 8006a02:	e070      	b.n	8006ae6 <HAL_UART_Receive+0x104>
		huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a04:	2300      	movs	r3, #0
 8006a06:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a0a:	2222      	movs	r2, #34	; 0x22
 8006a0c:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a10:	6603      	str	r3, [r0, #96]	; 0x60
		tickstart = HAL_GetTick();
 8006a12:	f7fc fe0b 	bl	800362c <HAL_GetTick>
 8006a16:	4607      	mov	r7, r0
		huart->RxXferSize = Size;
 8006a18:	f8a4 8058 	strh.w	r8, [r4, #88]	; 0x58
		huart->RxXferCount = Size;
 8006a1c:	f8a4 805a 	strh.w	r8, [r4, #90]	; 0x5a
		UART_MASK_COMPUTATION(huart);
 8006a20:	68a3      	ldr	r3, [r4, #8]
 8006a22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a26:	d006      	beq.n	8006a36 <HAL_UART_Receive+0x54>
 8006a28:	b9a3      	cbnz	r3, 8006a54 <HAL_UART_Receive+0x72>
 8006a2a:	6922      	ldr	r2, [r4, #16]
 8006a2c:	b972      	cbnz	r2, 8006a4c <HAL_UART_Receive+0x6a>
 8006a2e:	22ff      	movs	r2, #255	; 0xff
 8006a30:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8006a34:	e014      	b.n	8006a60 <HAL_UART_Receive+0x7e>
 8006a36:	6922      	ldr	r2, [r4, #16]
 8006a38:	b922      	cbnz	r2, 8006a44 <HAL_UART_Receive+0x62>
 8006a3a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006a3e:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8006a42:	e00d      	b.n	8006a60 <HAL_UART_Receive+0x7e>
 8006a44:	22ff      	movs	r2, #255	; 0xff
 8006a46:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8006a4a:	e009      	b.n	8006a60 <HAL_UART_Receive+0x7e>
 8006a4c:	227f      	movs	r2, #127	; 0x7f
 8006a4e:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8006a52:	e005      	b.n	8006a60 <HAL_UART_Receive+0x7e>
 8006a54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a58:	d00a      	beq.n	8006a70 <HAL_UART_Receive+0x8e>
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
		uhMask = huart->Mask;
 8006a60:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
		if ((huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006a64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a68:	d00c      	beq.n	8006a84 <HAL_UART_Receive+0xa2>
			pdata16bits = NULL;
 8006a6a:	f04f 0900 	mov.w	r9, #0
 8006a6e:	e01f      	b.n	8006ab0 <HAL_UART_Receive+0xce>
		UART_MASK_COMPUTATION(huart);
 8006a70:	6922      	ldr	r2, [r4, #16]
 8006a72:	b91a      	cbnz	r2, 8006a7c <HAL_UART_Receive+0x9a>
 8006a74:	227f      	movs	r2, #127	; 0x7f
 8006a76:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8006a7a:	e7f1      	b.n	8006a60 <HAL_UART_Receive+0x7e>
 8006a7c:	223f      	movs	r2, #63	; 0x3f
 8006a7e:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8006a82:	e7ed      	b.n	8006a60 <HAL_UART_Receive+0x7e>
				&& (huart->Init.Parity == UART_PARITY_NONE)) {
 8006a84:	6923      	ldr	r3, [r4, #16]
 8006a86:	b113      	cbz	r3, 8006a8e <HAL_UART_Receive+0xac>
			pdata16bits = NULL;
 8006a88:	f04f 0900 	mov.w	r9, #0
 8006a8c:	e010      	b.n	8006ab0 <HAL_UART_Receive+0xce>
			pdata16bits = (uint16_t*) pData;
 8006a8e:	46a9      	mov	r9, r5
			pdata8bits = NULL;
 8006a90:	2500      	movs	r5, #0
 8006a92:	e00d      	b.n	8006ab0 <HAL_UART_Receive+0xce>
						(uint8_t) (huart->Instance->RDR & (uint8_t) uhMask);
 8006a94:	6823      	ldr	r3, [r4, #0]
 8006a96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a98:	fa5f f388 	uxtb.w	r3, r8
 8006a9c:	4013      	ands	r3, r2
				*pdata8bits =
 8006a9e:	f805 3b01 	strb.w	r3, [r5], #1
			huart->RxXferCount--;
 8006aa2:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 8006aa6:	b292      	uxth	r2, r2
 8006aa8:	3a01      	subs	r2, #1
 8006aaa:	b292      	uxth	r2, r2
 8006aac:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
		while (huart->RxXferCount > 0U) {
 8006ab0:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	b183      	cbz	r3, 8006ada <HAL_UART_Receive+0xf8>
			if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET,
 8006ab8:	9600      	str	r6, [sp, #0]
 8006aba:	463b      	mov	r3, r7
 8006abc:	2200      	movs	r2, #0
 8006abe:	2120      	movs	r1, #32
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	f7ff ff24 	bl	800690e <UART_WaitOnFlagUntilTimeout>
 8006ac6:	b988      	cbnz	r0, 8006aec <HAL_UART_Receive+0x10a>
			if (pdata8bits == NULL) {
 8006ac8:	2d00      	cmp	r5, #0
 8006aca:	d1e3      	bne.n	8006a94 <HAL_UART_Receive+0xb2>
				*pdata16bits = (uint16_t) (huart->Instance->RDR & uhMask);
 8006acc:	6823      	ldr	r3, [r4, #0]
 8006ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad0:	ea08 0303 	and.w	r3, r8, r3
 8006ad4:	f829 3b02 	strh.w	r3, [r9], #2
				pdata16bits++;
 8006ad8:	e7e3      	b.n	8006aa2 <HAL_UART_Receive+0xc0>
		huart->RxState = HAL_UART_STATE_READY;
 8006ada:	2320      	movs	r3, #32
 8006adc:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		return HAL_OK;
 8006ae0:	2000      	movs	r0, #0
 8006ae2:	e000      	b.n	8006ae6 <HAL_UART_Receive+0x104>
		return HAL_BUSY;
 8006ae4:	2002      	movs	r0, #2
}
 8006ae6:	b003      	add	sp, #12
 8006ae8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				return HAL_TIMEOUT;
 8006aec:	2003      	movs	r0, #3
 8006aee:	e7fa      	b.n	8006ae6 <HAL_UART_Receive+0x104>

08006af0 <UART_CheckIdleState>:
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart) {
 8006af0:	b530      	push	{r4, r5, lr}
 8006af2:	b083      	sub	sp, #12
 8006af4:	4604      	mov	r4, r0
	huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006af6:	2300      	movs	r3, #0
 8006af8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	tickstart = HAL_GetTick();
 8006afc:	f7fc fd96 	bl	800362c <HAL_GetTick>
 8006b00:	4605      	mov	r5, r0
	if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE) {
 8006b02:	6822      	ldr	r2, [r4, #0]
 8006b04:	6812      	ldr	r2, [r2, #0]
 8006b06:	f012 0f08 	tst.w	r2, #8
 8006b0a:	d10f      	bne.n	8006b2c <UART_CheckIdleState+0x3c>
	if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE) {
 8006b0c:	6823      	ldr	r3, [r4, #0]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f013 0f04 	tst.w	r3, #4
 8006b14:	d118      	bne.n	8006b48 <UART_CheckIdleState+0x58>
	huart->gState = HAL_UART_STATE_READY;
 8006b16:	2320      	movs	r3, #32
 8006b18:	67e3      	str	r3, [r4, #124]	; 0x7c
	huart->RxState = HAL_UART_STATE_READY;
 8006b1a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b1e:	2000      	movs	r0, #0
 8006b20:	6620      	str	r0, [r4, #96]	; 0x60
	huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b22:	6660      	str	r0, [r4, #100]	; 0x64
	__HAL_UNLOCK(huart);
 8006b24:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
}
 8006b28:	b003      	add	sp, #12
 8006b2a:	bd30      	pop	{r4, r5, pc}
		if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET,
 8006b2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b30:	9300      	str	r3, [sp, #0]
 8006b32:	4603      	mov	r3, r0
 8006b34:	2200      	movs	r2, #0
 8006b36:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b3a:	4620      	mov	r0, r4
 8006b3c:	f7ff fee7 	bl	800690e <UART_WaitOnFlagUntilTimeout>
 8006b40:	2800      	cmp	r0, #0
 8006b42:	d0e3      	beq.n	8006b0c <UART_CheckIdleState+0x1c>
			return HAL_TIMEOUT;
 8006b44:	2003      	movs	r0, #3
 8006b46:	e7ef      	b.n	8006b28 <UART_CheckIdleState+0x38>
		if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,
 8006b48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b4c:	9300      	str	r3, [sp, #0]
 8006b4e:	462b      	mov	r3, r5
 8006b50:	2200      	movs	r2, #0
 8006b52:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b56:	4620      	mov	r0, r4
 8006b58:	f7ff fed9 	bl	800690e <UART_WaitOnFlagUntilTimeout>
 8006b5c:	2800      	cmp	r0, #0
 8006b5e:	d0da      	beq.n	8006b16 <UART_CheckIdleState+0x26>
			return HAL_TIMEOUT;
 8006b60:	2003      	movs	r0, #3
 8006b62:	e7e1      	b.n	8006b28 <UART_CheckIdleState+0x38>

08006b64 <HAL_UART_Init>:
	if (huart == NULL) {
 8006b64:	b368      	cbz	r0, 8006bc2 <HAL_UART_Init+0x5e>
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart) {
 8006b66:	b510      	push	{r4, lr}
 8006b68:	4604      	mov	r4, r0
	if (huart->gState == HAL_UART_STATE_RESET) {
 8006b6a:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8006b6c:	b303      	cbz	r3, 8006bb0 <HAL_UART_Init+0x4c>
	huart->gState = HAL_UART_STATE_BUSY;
 8006b6e:	2324      	movs	r3, #36	; 0x24
 8006b70:	67e3      	str	r3, [r4, #124]	; 0x7c
	__HAL_UART_DISABLE(huart);
 8006b72:	6822      	ldr	r2, [r4, #0]
 8006b74:	6813      	ldr	r3, [r2, #0]
 8006b76:	f023 0301 	bic.w	r3, r3, #1
 8006b7a:	6013      	str	r3, [r2, #0]
	if (UART_SetConfig(huart) == HAL_ERROR) {
 8006b7c:	4620      	mov	r0, r4
 8006b7e:	f7ff fcc9 	bl	8006514 <UART_SetConfig>
 8006b82:	2801      	cmp	r0, #1
 8006b84:	d013      	beq.n	8006bae <HAL_UART_Init+0x4a>
	if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT) {
 8006b86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b88:	b9bb      	cbnz	r3, 8006bba <HAL_UART_Init+0x56>
	CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b8a:	6822      	ldr	r2, [r4, #0]
 8006b8c:	6853      	ldr	r3, [r2, #4]
 8006b8e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8006b92:	6053      	str	r3, [r2, #4]
	CLEAR_BIT(huart->Instance->CR3,
 8006b94:	6822      	ldr	r2, [r4, #0]
 8006b96:	6893      	ldr	r3, [r2, #8]
 8006b98:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8006b9c:	6093      	str	r3, [r2, #8]
	__HAL_UART_ENABLE(huart);
 8006b9e:	6822      	ldr	r2, [r4, #0]
 8006ba0:	6813      	ldr	r3, [r2, #0]
 8006ba2:	f043 0301 	orr.w	r3, r3, #1
 8006ba6:	6013      	str	r3, [r2, #0]
	return (UART_CheckIdleState(huart));
 8006ba8:	4620      	mov	r0, r4
 8006baa:	f7ff ffa1 	bl	8006af0 <UART_CheckIdleState>
}
 8006bae:	bd10      	pop	{r4, pc}
		huart->Lock = HAL_UNLOCKED;
 8006bb0:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
		HAL_UART_MspInit(huart);
 8006bb4:	f7fc fc52 	bl	800345c <HAL_UART_MspInit>
 8006bb8:	e7d9      	b.n	8006b6e <HAL_UART_Init+0xa>
		UART_AdvFeatureConfig(huart);
 8006bba:	4620      	mov	r0, r4
 8006bbc:	f7ff fe42 	bl	8006844 <UART_AdvFeatureConfig>
 8006bc0:	e7e3      	b.n	8006b8a <HAL_UART_Init+0x26>
		return HAL_ERROR;
 8006bc2:	2001      	movs	r0, #1
}
 8006bc4:	4770      	bx	lr
	...

08006bc8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006bc8:	b410      	push	{r4}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006bca:	680b      	ldr	r3, [r1, #0]
 8006bcc:	b9cb      	cbnz	r3, 8006c02 <FMC_SDRAM_Init+0x3a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006bce:	6803      	ldr	r3, [r0, #0]
 8006bd0:	4a19      	ldr	r2, [pc, #100]	; (8006c38 <FMC_SDRAM_Init+0x70>)
 8006bd2:	401a      	ands	r2, r3
 8006bd4:	684b      	ldr	r3, [r1, #4]
 8006bd6:	688c      	ldr	r4, [r1, #8]
 8006bd8:	4323      	orrs	r3, r4
 8006bda:	68cc      	ldr	r4, [r1, #12]
 8006bdc:	4323      	orrs	r3, r4
 8006bde:	690c      	ldr	r4, [r1, #16]
 8006be0:	4323      	orrs	r3, r4
 8006be2:	694c      	ldr	r4, [r1, #20]
 8006be4:	4323      	orrs	r3, r4
 8006be6:	698c      	ldr	r4, [r1, #24]
 8006be8:	4323      	orrs	r3, r4
 8006bea:	69cc      	ldr	r4, [r1, #28]
 8006bec:	4323      	orrs	r3, r4
 8006bee:	6a0c      	ldr	r4, [r1, #32]
 8006bf0:	4323      	orrs	r3, r4
 8006bf2:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8006bf4:	430b      	orrs	r3, r1
 8006bf6:	431a      	orrs	r2, r3
 8006bf8:	6002      	str	r2, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8006bfa:	2000      	movs	r0, #0
 8006bfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c00:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006c02:	6803      	ldr	r3, [r0, #0]
 8006c04:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c08:	69ca      	ldr	r2, [r1, #28]
 8006c0a:	6a0c      	ldr	r4, [r1, #32]
 8006c0c:	4322      	orrs	r2, r4
 8006c0e:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8006c10:	4322      	orrs	r2, r4
 8006c12:	4313      	orrs	r3, r2
 8006c14:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006c16:	6843      	ldr	r3, [r0, #4]
 8006c18:	4a07      	ldr	r2, [pc, #28]	; (8006c38 <FMC_SDRAM_Init+0x70>)
 8006c1a:	401a      	ands	r2, r3
 8006c1c:	684b      	ldr	r3, [r1, #4]
 8006c1e:	688c      	ldr	r4, [r1, #8]
 8006c20:	4323      	orrs	r3, r4
 8006c22:	68cc      	ldr	r4, [r1, #12]
 8006c24:	4323      	orrs	r3, r4
 8006c26:	690c      	ldr	r4, [r1, #16]
 8006c28:	4323      	orrs	r3, r4
 8006c2a:	694c      	ldr	r4, [r1, #20]
 8006c2c:	4323      	orrs	r3, r4
 8006c2e:	6989      	ldr	r1, [r1, #24]
 8006c30:	430b      	orrs	r3, r1
 8006c32:	431a      	orrs	r2, r3
 8006c34:	6042      	str	r2, [r0, #4]
 8006c36:	e7e0      	b.n	8006bfa <FMC_SDRAM_Init+0x32>
 8006c38:	ffff8000 	.word	0xffff8000

08006c3c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006c3c:	b410      	push	{r4}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006c3e:	bb3a      	cbnz	r2, 8006c90 <FMC_SDRAM_Timing_Init+0x54>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006c40:	6882      	ldr	r2, [r0, #8]
 8006c42:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8006c46:	680b      	ldr	r3, [r1, #0]
 8006c48:	3b01      	subs	r3, #1
 8006c4a:	684c      	ldr	r4, [r1, #4]
 8006c4c:	f104 3cff 	add.w	ip, r4, #4294967295
 8006c50:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 8006c54:	688c      	ldr	r4, [r1, #8]
 8006c56:	f104 3cff 	add.w	ip, r4, #4294967295
 8006c5a:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8006c5e:	68cc      	ldr	r4, [r1, #12]
 8006c60:	f104 3cff 	add.w	ip, r4, #4294967295
 8006c64:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
 8006c68:	690c      	ldr	r4, [r1, #16]
 8006c6a:	f104 3cff 	add.w	ip, r4, #4294967295
 8006c6e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8006c72:	694c      	ldr	r4, [r1, #20]
 8006c74:	f104 3cff 	add.w	ip, r4, #4294967295
 8006c78:	ea43 530c 	orr.w	r3, r3, ip, lsl #20
 8006c7c:	6989      	ldr	r1, [r1, #24]
 8006c7e:	3901      	subs	r1, #1
 8006c80:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006c84:	4313      	orrs	r3, r2
 8006c86:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 8006c88:	2000      	movs	r0, #0
 8006c8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c8e:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006c90:	6883      	ldr	r3, [r0, #8]
 8006c92:	4a13      	ldr	r2, [pc, #76]	; (8006ce0 <FMC_SDRAM_Timing_Init+0xa4>)
 8006c94:	401a      	ands	r2, r3
 8006c96:	68cb      	ldr	r3, [r1, #12]
 8006c98:	f103 3cff 	add.w	ip, r3, #4294967295
 8006c9c:	694b      	ldr	r3, [r1, #20]
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	051b      	lsls	r3, r3, #20
 8006ca2:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
 8006ca6:	431a      	orrs	r2, r3
 8006ca8:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006caa:	68c2      	ldr	r2, [r0, #12]
 8006cac:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8006cb0:	680b      	ldr	r3, [r1, #0]
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	684c      	ldr	r4, [r1, #4]
 8006cb6:	f104 3cff 	add.w	ip, r4, #4294967295
 8006cba:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 8006cbe:	688c      	ldr	r4, [r1, #8]
 8006cc0:	f104 3cff 	add.w	ip, r4, #4294967295
 8006cc4:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8006cc8:	690c      	ldr	r4, [r1, #16]
 8006cca:	f104 3cff 	add.w	ip, r4, #4294967295
 8006cce:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8006cd2:	6989      	ldr	r1, [r1, #24]
 8006cd4:	3901      	subs	r1, #1
 8006cd6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	60c3      	str	r3, [r0, #12]
 8006cde:	e7d3      	b.n	8006c88 <FMC_SDRAM_Timing_Init+0x4c>
 8006ce0:	ff0f0fff 	.word	0xff0f0fff

08006ce4 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006ce4:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8006ce6:	6903      	ldr	r3, [r0, #16]
 8006ce8:	4a09      	ldr	r2, [pc, #36]	; (8006d10 <FMC_SDRAM_SendCommand+0x2c>)
 8006cea:	401a      	ands	r2, r3
 8006cec:	680b      	ldr	r3, [r1, #0]
 8006cee:	684c      	ldr	r4, [r1, #4]
 8006cf0:	4323      	orrs	r3, r4
 8006cf2:	688c      	ldr	r4, [r1, #8]
 8006cf4:	f104 3cff 	add.w	ip, r4, #4294967295
 8006cf8:	ea43 134c 	orr.w	r3, r3, ip, lsl #5
 8006cfc:	68c9      	ldr	r1, [r1, #12]
 8006cfe:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8006d02:	431a      	orrs	r2, r3
 8006d04:	6102      	str	r2, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 8006d06:	2000      	movs	r0, #0
 8006d08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop
 8006d10:	ffc00000 	.word	0xffc00000

08006d14 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8006d14:	6942      	ldr	r2, [r0, #20]
 8006d16:	4b03      	ldr	r3, [pc, #12]	; (8006d24 <FMC_SDRAM_ProgramRefreshRate+0x10>)
 8006d18:	4013      	ands	r3, r2
 8006d1a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8006d1e:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 8006d20:	2000      	movs	r0, #0
 8006d22:	4770      	bx	lr
 8006d24:	ffffc001 	.word	0xffffc001

08006d28 <std>:
 8006d28:	2300      	movs	r3, #0
 8006d2a:	b510      	push	{r4, lr}
 8006d2c:	4604      	mov	r4, r0
 8006d2e:	e9c0 3300 	strd	r3, r3, [r0]
 8006d32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d36:	6083      	str	r3, [r0, #8]
 8006d38:	8181      	strh	r1, [r0, #12]
 8006d3a:	6643      	str	r3, [r0, #100]	; 0x64
 8006d3c:	81c2      	strh	r2, [r0, #14]
 8006d3e:	6183      	str	r3, [r0, #24]
 8006d40:	4619      	mov	r1, r3
 8006d42:	2208      	movs	r2, #8
 8006d44:	305c      	adds	r0, #92	; 0x5c
 8006d46:	f000 f9bc 	bl	80070c2 <memset>
 8006d4a:	4b0d      	ldr	r3, [pc, #52]	; (8006d80 <std+0x58>)
 8006d4c:	6263      	str	r3, [r4, #36]	; 0x24
 8006d4e:	4b0d      	ldr	r3, [pc, #52]	; (8006d84 <std+0x5c>)
 8006d50:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d52:	4b0d      	ldr	r3, [pc, #52]	; (8006d88 <std+0x60>)
 8006d54:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d56:	4b0d      	ldr	r3, [pc, #52]	; (8006d8c <std+0x64>)
 8006d58:	6323      	str	r3, [r4, #48]	; 0x30
 8006d5a:	4b0d      	ldr	r3, [pc, #52]	; (8006d90 <std+0x68>)
 8006d5c:	6224      	str	r4, [r4, #32]
 8006d5e:	429c      	cmp	r4, r3
 8006d60:	d006      	beq.n	8006d70 <std+0x48>
 8006d62:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006d66:	4294      	cmp	r4, r2
 8006d68:	d002      	beq.n	8006d70 <std+0x48>
 8006d6a:	33d0      	adds	r3, #208	; 0xd0
 8006d6c:	429c      	cmp	r4, r3
 8006d6e:	d105      	bne.n	8006d7c <std+0x54>
 8006d70:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d78:	f000 ba16 	b.w	80071a8 <__retarget_lock_init_recursive>
 8006d7c:	bd10      	pop	{r4, pc}
 8006d7e:	bf00      	nop
 8006d80:	0800703d 	.word	0x0800703d
 8006d84:	0800705f 	.word	0x0800705f
 8006d88:	08007097 	.word	0x08007097
 8006d8c:	080070bb 	.word	0x080070bb
 8006d90:	20004ecc 	.word	0x20004ecc

08006d94 <stdio_exit_handler>:
 8006d94:	4a02      	ldr	r2, [pc, #8]	; (8006da0 <stdio_exit_handler+0xc>)
 8006d96:	4903      	ldr	r1, [pc, #12]	; (8006da4 <stdio_exit_handler+0x10>)
 8006d98:	4803      	ldr	r0, [pc, #12]	; (8006da8 <stdio_exit_handler+0x14>)
 8006d9a:	f000 b869 	b.w	8006e70 <_fwalk_sglue>
 8006d9e:	bf00      	nop
 8006da0:	20000024 	.word	0x20000024
 8006da4:	08007a81 	.word	0x08007a81
 8006da8:	20000030 	.word	0x20000030

08006dac <cleanup_stdio>:
 8006dac:	6841      	ldr	r1, [r0, #4]
 8006dae:	4b0c      	ldr	r3, [pc, #48]	; (8006de0 <cleanup_stdio+0x34>)
 8006db0:	4299      	cmp	r1, r3
 8006db2:	b510      	push	{r4, lr}
 8006db4:	4604      	mov	r4, r0
 8006db6:	d001      	beq.n	8006dbc <cleanup_stdio+0x10>
 8006db8:	f000 fe62 	bl	8007a80 <_fflush_r>
 8006dbc:	68a1      	ldr	r1, [r4, #8]
 8006dbe:	4b09      	ldr	r3, [pc, #36]	; (8006de4 <cleanup_stdio+0x38>)
 8006dc0:	4299      	cmp	r1, r3
 8006dc2:	d002      	beq.n	8006dca <cleanup_stdio+0x1e>
 8006dc4:	4620      	mov	r0, r4
 8006dc6:	f000 fe5b 	bl	8007a80 <_fflush_r>
 8006dca:	68e1      	ldr	r1, [r4, #12]
 8006dcc:	4b06      	ldr	r3, [pc, #24]	; (8006de8 <cleanup_stdio+0x3c>)
 8006dce:	4299      	cmp	r1, r3
 8006dd0:	d004      	beq.n	8006ddc <cleanup_stdio+0x30>
 8006dd2:	4620      	mov	r0, r4
 8006dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dd8:	f000 be52 	b.w	8007a80 <_fflush_r>
 8006ddc:	bd10      	pop	{r4, pc}
 8006dde:	bf00      	nop
 8006de0:	20004ecc 	.word	0x20004ecc
 8006de4:	20004f34 	.word	0x20004f34
 8006de8:	20004f9c 	.word	0x20004f9c

08006dec <global_stdio_init.part.0>:
 8006dec:	b510      	push	{r4, lr}
 8006dee:	4b0b      	ldr	r3, [pc, #44]	; (8006e1c <global_stdio_init.part.0+0x30>)
 8006df0:	4c0b      	ldr	r4, [pc, #44]	; (8006e20 <global_stdio_init.part.0+0x34>)
 8006df2:	4a0c      	ldr	r2, [pc, #48]	; (8006e24 <global_stdio_init.part.0+0x38>)
 8006df4:	601a      	str	r2, [r3, #0]
 8006df6:	4620      	mov	r0, r4
 8006df8:	2200      	movs	r2, #0
 8006dfa:	2104      	movs	r1, #4
 8006dfc:	f7ff ff94 	bl	8006d28 <std>
 8006e00:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006e04:	2201      	movs	r2, #1
 8006e06:	2109      	movs	r1, #9
 8006e08:	f7ff ff8e 	bl	8006d28 <std>
 8006e0c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006e10:	2202      	movs	r2, #2
 8006e12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e16:	2112      	movs	r1, #18
 8006e18:	f7ff bf86 	b.w	8006d28 <std>
 8006e1c:	20005004 	.word	0x20005004
 8006e20:	20004ecc 	.word	0x20004ecc
 8006e24:	08006d95 	.word	0x08006d95

08006e28 <__sfp_lock_acquire>:
 8006e28:	4801      	ldr	r0, [pc, #4]	; (8006e30 <__sfp_lock_acquire+0x8>)
 8006e2a:	f000 b9be 	b.w	80071aa <__retarget_lock_acquire_recursive>
 8006e2e:	bf00      	nop
 8006e30:	2000500d 	.word	0x2000500d

08006e34 <__sfp_lock_release>:
 8006e34:	4801      	ldr	r0, [pc, #4]	; (8006e3c <__sfp_lock_release+0x8>)
 8006e36:	f000 b9b9 	b.w	80071ac <__retarget_lock_release_recursive>
 8006e3a:	bf00      	nop
 8006e3c:	2000500d 	.word	0x2000500d

08006e40 <__sinit>:
 8006e40:	b510      	push	{r4, lr}
 8006e42:	4604      	mov	r4, r0
 8006e44:	f7ff fff0 	bl	8006e28 <__sfp_lock_acquire>
 8006e48:	6a23      	ldr	r3, [r4, #32]
 8006e4a:	b11b      	cbz	r3, 8006e54 <__sinit+0x14>
 8006e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e50:	f7ff bff0 	b.w	8006e34 <__sfp_lock_release>
 8006e54:	4b04      	ldr	r3, [pc, #16]	; (8006e68 <__sinit+0x28>)
 8006e56:	6223      	str	r3, [r4, #32]
 8006e58:	4b04      	ldr	r3, [pc, #16]	; (8006e6c <__sinit+0x2c>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d1f5      	bne.n	8006e4c <__sinit+0xc>
 8006e60:	f7ff ffc4 	bl	8006dec <global_stdio_init.part.0>
 8006e64:	e7f2      	b.n	8006e4c <__sinit+0xc>
 8006e66:	bf00      	nop
 8006e68:	08006dad 	.word	0x08006dad
 8006e6c:	20005004 	.word	0x20005004

08006e70 <_fwalk_sglue>:
 8006e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e74:	4607      	mov	r7, r0
 8006e76:	4688      	mov	r8, r1
 8006e78:	4614      	mov	r4, r2
 8006e7a:	2600      	movs	r6, #0
 8006e7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e80:	f1b9 0901 	subs.w	r9, r9, #1
 8006e84:	d505      	bpl.n	8006e92 <_fwalk_sglue+0x22>
 8006e86:	6824      	ldr	r4, [r4, #0]
 8006e88:	2c00      	cmp	r4, #0
 8006e8a:	d1f7      	bne.n	8006e7c <_fwalk_sglue+0xc>
 8006e8c:	4630      	mov	r0, r6
 8006e8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e92:	89ab      	ldrh	r3, [r5, #12]
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d907      	bls.n	8006ea8 <_fwalk_sglue+0x38>
 8006e98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	d003      	beq.n	8006ea8 <_fwalk_sglue+0x38>
 8006ea0:	4629      	mov	r1, r5
 8006ea2:	4638      	mov	r0, r7
 8006ea4:	47c0      	blx	r8
 8006ea6:	4306      	orrs	r6, r0
 8006ea8:	3568      	adds	r5, #104	; 0x68
 8006eaa:	e7e9      	b.n	8006e80 <_fwalk_sglue+0x10>

08006eac <iprintf>:
 8006eac:	b40f      	push	{r0, r1, r2, r3}
 8006eae:	b507      	push	{r0, r1, r2, lr}
 8006eb0:	4906      	ldr	r1, [pc, #24]	; (8006ecc <iprintf+0x20>)
 8006eb2:	ab04      	add	r3, sp, #16
 8006eb4:	6808      	ldr	r0, [r1, #0]
 8006eb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006eba:	6881      	ldr	r1, [r0, #8]
 8006ebc:	9301      	str	r3, [sp, #4]
 8006ebe:	f000 faaf 	bl	8007420 <_vfiprintf_r>
 8006ec2:	b003      	add	sp, #12
 8006ec4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ec8:	b004      	add	sp, #16
 8006eca:	4770      	bx	lr
 8006ecc:	2000007c 	.word	0x2000007c

08006ed0 <setbuf>:
 8006ed0:	fab1 f281 	clz	r2, r1
 8006ed4:	0952      	lsrs	r2, r2, #5
 8006ed6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006eda:	0052      	lsls	r2, r2, #1
 8006edc:	f000 b800 	b.w	8006ee0 <setvbuf>

08006ee0 <setvbuf>:
 8006ee0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006ee4:	461d      	mov	r5, r3
 8006ee6:	4b54      	ldr	r3, [pc, #336]	; (8007038 <setvbuf+0x158>)
 8006ee8:	681f      	ldr	r7, [r3, #0]
 8006eea:	4604      	mov	r4, r0
 8006eec:	460e      	mov	r6, r1
 8006eee:	4690      	mov	r8, r2
 8006ef0:	b127      	cbz	r7, 8006efc <setvbuf+0x1c>
 8006ef2:	6a3b      	ldr	r3, [r7, #32]
 8006ef4:	b913      	cbnz	r3, 8006efc <setvbuf+0x1c>
 8006ef6:	4638      	mov	r0, r7
 8006ef8:	f7ff ffa2 	bl	8006e40 <__sinit>
 8006efc:	f1b8 0f02 	cmp.w	r8, #2
 8006f00:	d006      	beq.n	8006f10 <setvbuf+0x30>
 8006f02:	f1b8 0f01 	cmp.w	r8, #1
 8006f06:	f200 8094 	bhi.w	8007032 <setvbuf+0x152>
 8006f0a:	2d00      	cmp	r5, #0
 8006f0c:	f2c0 8091 	blt.w	8007032 <setvbuf+0x152>
 8006f10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f12:	07da      	lsls	r2, r3, #31
 8006f14:	d405      	bmi.n	8006f22 <setvbuf+0x42>
 8006f16:	89a3      	ldrh	r3, [r4, #12]
 8006f18:	059b      	lsls	r3, r3, #22
 8006f1a:	d402      	bmi.n	8006f22 <setvbuf+0x42>
 8006f1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f1e:	f000 f944 	bl	80071aa <__retarget_lock_acquire_recursive>
 8006f22:	4621      	mov	r1, r4
 8006f24:	4638      	mov	r0, r7
 8006f26:	f000 fdab 	bl	8007a80 <_fflush_r>
 8006f2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f2c:	b141      	cbz	r1, 8006f40 <setvbuf+0x60>
 8006f2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f32:	4299      	cmp	r1, r3
 8006f34:	d002      	beq.n	8006f3c <setvbuf+0x5c>
 8006f36:	4638      	mov	r0, r7
 8006f38:	f000 f948 	bl	80071cc <_free_r>
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	6363      	str	r3, [r4, #52]	; 0x34
 8006f40:	2300      	movs	r3, #0
 8006f42:	61a3      	str	r3, [r4, #24]
 8006f44:	6063      	str	r3, [r4, #4]
 8006f46:	89a3      	ldrh	r3, [r4, #12]
 8006f48:	0618      	lsls	r0, r3, #24
 8006f4a:	d503      	bpl.n	8006f54 <setvbuf+0x74>
 8006f4c:	6921      	ldr	r1, [r4, #16]
 8006f4e:	4638      	mov	r0, r7
 8006f50:	f000 f93c 	bl	80071cc <_free_r>
 8006f54:	89a3      	ldrh	r3, [r4, #12]
 8006f56:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8006f5a:	f023 0303 	bic.w	r3, r3, #3
 8006f5e:	f1b8 0f02 	cmp.w	r8, #2
 8006f62:	81a3      	strh	r3, [r4, #12]
 8006f64:	d05f      	beq.n	8007026 <setvbuf+0x146>
 8006f66:	ab01      	add	r3, sp, #4
 8006f68:	466a      	mov	r2, sp
 8006f6a:	4621      	mov	r1, r4
 8006f6c:	4638      	mov	r0, r7
 8006f6e:	f000 fdaf 	bl	8007ad0 <__swhatbuf_r>
 8006f72:	89a3      	ldrh	r3, [r4, #12]
 8006f74:	4318      	orrs	r0, r3
 8006f76:	81a0      	strh	r0, [r4, #12]
 8006f78:	bb2d      	cbnz	r5, 8006fc6 <setvbuf+0xe6>
 8006f7a:	9d00      	ldr	r5, [sp, #0]
 8006f7c:	4628      	mov	r0, r5
 8006f7e:	f000 f971 	bl	8007264 <malloc>
 8006f82:	4606      	mov	r6, r0
 8006f84:	2800      	cmp	r0, #0
 8006f86:	d150      	bne.n	800702a <setvbuf+0x14a>
 8006f88:	f8dd 9000 	ldr.w	r9, [sp]
 8006f8c:	45a9      	cmp	r9, r5
 8006f8e:	d13e      	bne.n	800700e <setvbuf+0x12e>
 8006f90:	f04f 35ff 	mov.w	r5, #4294967295
 8006f94:	2200      	movs	r2, #0
 8006f96:	60a2      	str	r2, [r4, #8]
 8006f98:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8006f9c:	6022      	str	r2, [r4, #0]
 8006f9e:	6122      	str	r2, [r4, #16]
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fa6:	6162      	str	r2, [r4, #20]
 8006fa8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006faa:	f043 0302 	orr.w	r3, r3, #2
 8006fae:	07d1      	lsls	r1, r2, #31
 8006fb0:	81a3      	strh	r3, [r4, #12]
 8006fb2:	d404      	bmi.n	8006fbe <setvbuf+0xde>
 8006fb4:	059b      	lsls	r3, r3, #22
 8006fb6:	d402      	bmi.n	8006fbe <setvbuf+0xde>
 8006fb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006fba:	f000 f8f7 	bl	80071ac <__retarget_lock_release_recursive>
 8006fbe:	4628      	mov	r0, r5
 8006fc0:	b003      	add	sp, #12
 8006fc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006fc6:	2e00      	cmp	r6, #0
 8006fc8:	d0d8      	beq.n	8006f7c <setvbuf+0x9c>
 8006fca:	6a3b      	ldr	r3, [r7, #32]
 8006fcc:	b913      	cbnz	r3, 8006fd4 <setvbuf+0xf4>
 8006fce:	4638      	mov	r0, r7
 8006fd0:	f7ff ff36 	bl	8006e40 <__sinit>
 8006fd4:	f1b8 0f01 	cmp.w	r8, #1
 8006fd8:	bf08      	it	eq
 8006fda:	89a3      	ldrheq	r3, [r4, #12]
 8006fdc:	6026      	str	r6, [r4, #0]
 8006fde:	bf04      	itt	eq
 8006fe0:	f043 0301 	orreq.w	r3, r3, #1
 8006fe4:	81a3      	strheq	r3, [r4, #12]
 8006fe6:	89a3      	ldrh	r3, [r4, #12]
 8006fe8:	f013 0208 	ands.w	r2, r3, #8
 8006fec:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006ff0:	d01d      	beq.n	800702e <setvbuf+0x14e>
 8006ff2:	07da      	lsls	r2, r3, #31
 8006ff4:	bf41      	itttt	mi
 8006ff6:	2200      	movmi	r2, #0
 8006ff8:	426d      	negmi	r5, r5
 8006ffa:	60a2      	strmi	r2, [r4, #8]
 8006ffc:	61a5      	strmi	r5, [r4, #24]
 8006ffe:	bf58      	it	pl
 8007000:	60a5      	strpl	r5, [r4, #8]
 8007002:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8007004:	f015 0501 	ands.w	r5, r5, #1
 8007008:	d0d4      	beq.n	8006fb4 <setvbuf+0xd4>
 800700a:	2500      	movs	r5, #0
 800700c:	e7d7      	b.n	8006fbe <setvbuf+0xde>
 800700e:	4648      	mov	r0, r9
 8007010:	f000 f928 	bl	8007264 <malloc>
 8007014:	4606      	mov	r6, r0
 8007016:	2800      	cmp	r0, #0
 8007018:	d0ba      	beq.n	8006f90 <setvbuf+0xb0>
 800701a:	89a3      	ldrh	r3, [r4, #12]
 800701c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007020:	81a3      	strh	r3, [r4, #12]
 8007022:	464d      	mov	r5, r9
 8007024:	e7d1      	b.n	8006fca <setvbuf+0xea>
 8007026:	2500      	movs	r5, #0
 8007028:	e7b4      	b.n	8006f94 <setvbuf+0xb4>
 800702a:	46a9      	mov	r9, r5
 800702c:	e7f5      	b.n	800701a <setvbuf+0x13a>
 800702e:	60a2      	str	r2, [r4, #8]
 8007030:	e7e7      	b.n	8007002 <setvbuf+0x122>
 8007032:	f04f 35ff 	mov.w	r5, #4294967295
 8007036:	e7c2      	b.n	8006fbe <setvbuf+0xde>
 8007038:	2000007c 	.word	0x2000007c

0800703c <__sread>:
 800703c:	b510      	push	{r4, lr}
 800703e:	460c      	mov	r4, r1
 8007040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007044:	f000 f868 	bl	8007118 <_read_r>
 8007048:	2800      	cmp	r0, #0
 800704a:	bfab      	itete	ge
 800704c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800704e:	89a3      	ldrhlt	r3, [r4, #12]
 8007050:	181b      	addge	r3, r3, r0
 8007052:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007056:	bfac      	ite	ge
 8007058:	6563      	strge	r3, [r4, #84]	; 0x54
 800705a:	81a3      	strhlt	r3, [r4, #12]
 800705c:	bd10      	pop	{r4, pc}

0800705e <__swrite>:
 800705e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007062:	461f      	mov	r7, r3
 8007064:	898b      	ldrh	r3, [r1, #12]
 8007066:	05db      	lsls	r3, r3, #23
 8007068:	4605      	mov	r5, r0
 800706a:	460c      	mov	r4, r1
 800706c:	4616      	mov	r6, r2
 800706e:	d505      	bpl.n	800707c <__swrite+0x1e>
 8007070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007074:	2302      	movs	r3, #2
 8007076:	2200      	movs	r2, #0
 8007078:	f000 f83c 	bl	80070f4 <_lseek_r>
 800707c:	89a3      	ldrh	r3, [r4, #12]
 800707e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007082:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007086:	81a3      	strh	r3, [r4, #12]
 8007088:	4632      	mov	r2, r6
 800708a:	463b      	mov	r3, r7
 800708c:	4628      	mov	r0, r5
 800708e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007092:	f000 b853 	b.w	800713c <_write_r>

08007096 <__sseek>:
 8007096:	b510      	push	{r4, lr}
 8007098:	460c      	mov	r4, r1
 800709a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800709e:	f000 f829 	bl	80070f4 <_lseek_r>
 80070a2:	1c43      	adds	r3, r0, #1
 80070a4:	89a3      	ldrh	r3, [r4, #12]
 80070a6:	bf15      	itete	ne
 80070a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80070aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80070ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80070b2:	81a3      	strheq	r3, [r4, #12]
 80070b4:	bf18      	it	ne
 80070b6:	81a3      	strhne	r3, [r4, #12]
 80070b8:	bd10      	pop	{r4, pc}

080070ba <__sclose>:
 80070ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070be:	f000 b809 	b.w	80070d4 <_close_r>

080070c2 <memset>:
 80070c2:	4402      	add	r2, r0
 80070c4:	4603      	mov	r3, r0
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d100      	bne.n	80070cc <memset+0xa>
 80070ca:	4770      	bx	lr
 80070cc:	f803 1b01 	strb.w	r1, [r3], #1
 80070d0:	e7f9      	b.n	80070c6 <memset+0x4>
	...

080070d4 <_close_r>:
 80070d4:	b538      	push	{r3, r4, r5, lr}
 80070d6:	4d06      	ldr	r5, [pc, #24]	; (80070f0 <_close_r+0x1c>)
 80070d8:	2300      	movs	r3, #0
 80070da:	4604      	mov	r4, r0
 80070dc:	4608      	mov	r0, r1
 80070de:	602b      	str	r3, [r5, #0]
 80070e0:	f000 fe20 	bl	8007d24 <_close>
 80070e4:	1c43      	adds	r3, r0, #1
 80070e6:	d102      	bne.n	80070ee <_close_r+0x1a>
 80070e8:	682b      	ldr	r3, [r5, #0]
 80070ea:	b103      	cbz	r3, 80070ee <_close_r+0x1a>
 80070ec:	6023      	str	r3, [r4, #0]
 80070ee:	bd38      	pop	{r3, r4, r5, pc}
 80070f0:	20005008 	.word	0x20005008

080070f4 <_lseek_r>:
 80070f4:	b538      	push	{r3, r4, r5, lr}
 80070f6:	4d07      	ldr	r5, [pc, #28]	; (8007114 <_lseek_r+0x20>)
 80070f8:	4604      	mov	r4, r0
 80070fa:	4608      	mov	r0, r1
 80070fc:	4611      	mov	r1, r2
 80070fe:	2200      	movs	r2, #0
 8007100:	602a      	str	r2, [r5, #0]
 8007102:	461a      	mov	r2, r3
 8007104:	f7fc fa42 	bl	800358c <_lseek>
 8007108:	1c43      	adds	r3, r0, #1
 800710a:	d102      	bne.n	8007112 <_lseek_r+0x1e>
 800710c:	682b      	ldr	r3, [r5, #0]
 800710e:	b103      	cbz	r3, 8007112 <_lseek_r+0x1e>
 8007110:	6023      	str	r3, [r4, #0]
 8007112:	bd38      	pop	{r3, r4, r5, pc}
 8007114:	20005008 	.word	0x20005008

08007118 <_read_r>:
 8007118:	b538      	push	{r3, r4, r5, lr}
 800711a:	4d07      	ldr	r5, [pc, #28]	; (8007138 <_read_r+0x20>)
 800711c:	4604      	mov	r4, r0
 800711e:	4608      	mov	r0, r1
 8007120:	4611      	mov	r1, r2
 8007122:	2200      	movs	r2, #0
 8007124:	602a      	str	r2, [r5, #0]
 8007126:	461a      	mov	r2, r3
 8007128:	f7fc fa22 	bl	8003570 <_read>
 800712c:	1c43      	adds	r3, r0, #1
 800712e:	d102      	bne.n	8007136 <_read_r+0x1e>
 8007130:	682b      	ldr	r3, [r5, #0]
 8007132:	b103      	cbz	r3, 8007136 <_read_r+0x1e>
 8007134:	6023      	str	r3, [r4, #0]
 8007136:	bd38      	pop	{r3, r4, r5, pc}
 8007138:	20005008 	.word	0x20005008

0800713c <_write_r>:
 800713c:	b538      	push	{r3, r4, r5, lr}
 800713e:	4d07      	ldr	r5, [pc, #28]	; (800715c <_write_r+0x20>)
 8007140:	4604      	mov	r4, r0
 8007142:	4608      	mov	r0, r1
 8007144:	4611      	mov	r1, r2
 8007146:	2200      	movs	r2, #0
 8007148:	602a      	str	r2, [r5, #0]
 800714a:	461a      	mov	r2, r3
 800714c:	f7fc fa06 	bl	800355c <_write>
 8007150:	1c43      	adds	r3, r0, #1
 8007152:	d102      	bne.n	800715a <_write_r+0x1e>
 8007154:	682b      	ldr	r3, [r5, #0]
 8007156:	b103      	cbz	r3, 800715a <_write_r+0x1e>
 8007158:	6023      	str	r3, [r4, #0]
 800715a:	bd38      	pop	{r3, r4, r5, pc}
 800715c:	20005008 	.word	0x20005008

08007160 <__libc_init_array>:
 8007160:	b570      	push	{r4, r5, r6, lr}
 8007162:	4d0d      	ldr	r5, [pc, #52]	; (8007198 <__libc_init_array+0x38>)
 8007164:	4c0d      	ldr	r4, [pc, #52]	; (800719c <__libc_init_array+0x3c>)
 8007166:	1b64      	subs	r4, r4, r5
 8007168:	10a4      	asrs	r4, r4, #2
 800716a:	2600      	movs	r6, #0
 800716c:	42a6      	cmp	r6, r4
 800716e:	d109      	bne.n	8007184 <__libc_init_array+0x24>
 8007170:	4d0b      	ldr	r5, [pc, #44]	; (80071a0 <__libc_init_array+0x40>)
 8007172:	4c0c      	ldr	r4, [pc, #48]	; (80071a4 <__libc_init_array+0x44>)
 8007174:	f000 fdec 	bl	8007d50 <_init>
 8007178:	1b64      	subs	r4, r4, r5
 800717a:	10a4      	asrs	r4, r4, #2
 800717c:	2600      	movs	r6, #0
 800717e:	42a6      	cmp	r6, r4
 8007180:	d105      	bne.n	800718e <__libc_init_array+0x2e>
 8007182:	bd70      	pop	{r4, r5, r6, pc}
 8007184:	f855 3b04 	ldr.w	r3, [r5], #4
 8007188:	4798      	blx	r3
 800718a:	3601      	adds	r6, #1
 800718c:	e7ee      	b.n	800716c <__libc_init_array+0xc>
 800718e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007192:	4798      	blx	r3
 8007194:	3601      	adds	r6, #1
 8007196:	e7f2      	b.n	800717e <__libc_init_array+0x1e>
 8007198:	080099ac 	.word	0x080099ac
 800719c:	080099ac 	.word	0x080099ac
 80071a0:	080099ac 	.word	0x080099ac
 80071a4:	080099b0 	.word	0x080099b0

080071a8 <__retarget_lock_init_recursive>:
 80071a8:	4770      	bx	lr

080071aa <__retarget_lock_acquire_recursive>:
 80071aa:	4770      	bx	lr

080071ac <__retarget_lock_release_recursive>:
 80071ac:	4770      	bx	lr

080071ae <memcpy>:
 80071ae:	440a      	add	r2, r1
 80071b0:	4291      	cmp	r1, r2
 80071b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80071b6:	d100      	bne.n	80071ba <memcpy+0xc>
 80071b8:	4770      	bx	lr
 80071ba:	b510      	push	{r4, lr}
 80071bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071c4:	4291      	cmp	r1, r2
 80071c6:	d1f9      	bne.n	80071bc <memcpy+0xe>
 80071c8:	bd10      	pop	{r4, pc}
	...

080071cc <_free_r>:
 80071cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071ce:	2900      	cmp	r1, #0
 80071d0:	d044      	beq.n	800725c <_free_r+0x90>
 80071d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071d6:	9001      	str	r0, [sp, #4]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	f1a1 0404 	sub.w	r4, r1, #4
 80071de:	bfb8      	it	lt
 80071e0:	18e4      	addlt	r4, r4, r3
 80071e2:	f000 f8e7 	bl	80073b4 <__malloc_lock>
 80071e6:	4a1e      	ldr	r2, [pc, #120]	; (8007260 <_free_r+0x94>)
 80071e8:	9801      	ldr	r0, [sp, #4]
 80071ea:	6813      	ldr	r3, [r2, #0]
 80071ec:	b933      	cbnz	r3, 80071fc <_free_r+0x30>
 80071ee:	6063      	str	r3, [r4, #4]
 80071f0:	6014      	str	r4, [r2, #0]
 80071f2:	b003      	add	sp, #12
 80071f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80071f8:	f000 b8e2 	b.w	80073c0 <__malloc_unlock>
 80071fc:	42a3      	cmp	r3, r4
 80071fe:	d908      	bls.n	8007212 <_free_r+0x46>
 8007200:	6825      	ldr	r5, [r4, #0]
 8007202:	1961      	adds	r1, r4, r5
 8007204:	428b      	cmp	r3, r1
 8007206:	bf01      	itttt	eq
 8007208:	6819      	ldreq	r1, [r3, #0]
 800720a:	685b      	ldreq	r3, [r3, #4]
 800720c:	1949      	addeq	r1, r1, r5
 800720e:	6021      	streq	r1, [r4, #0]
 8007210:	e7ed      	b.n	80071ee <_free_r+0x22>
 8007212:	461a      	mov	r2, r3
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	b10b      	cbz	r3, 800721c <_free_r+0x50>
 8007218:	42a3      	cmp	r3, r4
 800721a:	d9fa      	bls.n	8007212 <_free_r+0x46>
 800721c:	6811      	ldr	r1, [r2, #0]
 800721e:	1855      	adds	r5, r2, r1
 8007220:	42a5      	cmp	r5, r4
 8007222:	d10b      	bne.n	800723c <_free_r+0x70>
 8007224:	6824      	ldr	r4, [r4, #0]
 8007226:	4421      	add	r1, r4
 8007228:	1854      	adds	r4, r2, r1
 800722a:	42a3      	cmp	r3, r4
 800722c:	6011      	str	r1, [r2, #0]
 800722e:	d1e0      	bne.n	80071f2 <_free_r+0x26>
 8007230:	681c      	ldr	r4, [r3, #0]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	6053      	str	r3, [r2, #4]
 8007236:	440c      	add	r4, r1
 8007238:	6014      	str	r4, [r2, #0]
 800723a:	e7da      	b.n	80071f2 <_free_r+0x26>
 800723c:	d902      	bls.n	8007244 <_free_r+0x78>
 800723e:	230c      	movs	r3, #12
 8007240:	6003      	str	r3, [r0, #0]
 8007242:	e7d6      	b.n	80071f2 <_free_r+0x26>
 8007244:	6825      	ldr	r5, [r4, #0]
 8007246:	1961      	adds	r1, r4, r5
 8007248:	428b      	cmp	r3, r1
 800724a:	bf04      	itt	eq
 800724c:	6819      	ldreq	r1, [r3, #0]
 800724e:	685b      	ldreq	r3, [r3, #4]
 8007250:	6063      	str	r3, [r4, #4]
 8007252:	bf04      	itt	eq
 8007254:	1949      	addeq	r1, r1, r5
 8007256:	6021      	streq	r1, [r4, #0]
 8007258:	6054      	str	r4, [r2, #4]
 800725a:	e7ca      	b.n	80071f2 <_free_r+0x26>
 800725c:	b003      	add	sp, #12
 800725e:	bd30      	pop	{r4, r5, pc}
 8007260:	20005010 	.word	0x20005010

08007264 <malloc>:
 8007264:	4b02      	ldr	r3, [pc, #8]	; (8007270 <malloc+0xc>)
 8007266:	4601      	mov	r1, r0
 8007268:	6818      	ldr	r0, [r3, #0]
 800726a:	f000 b823 	b.w	80072b4 <_malloc_r>
 800726e:	bf00      	nop
 8007270:	2000007c 	.word	0x2000007c

08007274 <sbrk_aligned>:
 8007274:	b570      	push	{r4, r5, r6, lr}
 8007276:	4e0e      	ldr	r6, [pc, #56]	; (80072b0 <sbrk_aligned+0x3c>)
 8007278:	460c      	mov	r4, r1
 800727a:	6831      	ldr	r1, [r6, #0]
 800727c:	4605      	mov	r5, r0
 800727e:	b911      	cbnz	r1, 8007286 <sbrk_aligned+0x12>
 8007280:	f000 fd40 	bl	8007d04 <_sbrk_r>
 8007284:	6030      	str	r0, [r6, #0]
 8007286:	4621      	mov	r1, r4
 8007288:	4628      	mov	r0, r5
 800728a:	f000 fd3b 	bl	8007d04 <_sbrk_r>
 800728e:	1c43      	adds	r3, r0, #1
 8007290:	d00a      	beq.n	80072a8 <sbrk_aligned+0x34>
 8007292:	1cc4      	adds	r4, r0, #3
 8007294:	f024 0403 	bic.w	r4, r4, #3
 8007298:	42a0      	cmp	r0, r4
 800729a:	d007      	beq.n	80072ac <sbrk_aligned+0x38>
 800729c:	1a21      	subs	r1, r4, r0
 800729e:	4628      	mov	r0, r5
 80072a0:	f000 fd30 	bl	8007d04 <_sbrk_r>
 80072a4:	3001      	adds	r0, #1
 80072a6:	d101      	bne.n	80072ac <sbrk_aligned+0x38>
 80072a8:	f04f 34ff 	mov.w	r4, #4294967295
 80072ac:	4620      	mov	r0, r4
 80072ae:	bd70      	pop	{r4, r5, r6, pc}
 80072b0:	20005014 	.word	0x20005014

080072b4 <_malloc_r>:
 80072b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072b8:	1ccd      	adds	r5, r1, #3
 80072ba:	f025 0503 	bic.w	r5, r5, #3
 80072be:	3508      	adds	r5, #8
 80072c0:	2d0c      	cmp	r5, #12
 80072c2:	bf38      	it	cc
 80072c4:	250c      	movcc	r5, #12
 80072c6:	2d00      	cmp	r5, #0
 80072c8:	4607      	mov	r7, r0
 80072ca:	db01      	blt.n	80072d0 <_malloc_r+0x1c>
 80072cc:	42a9      	cmp	r1, r5
 80072ce:	d905      	bls.n	80072dc <_malloc_r+0x28>
 80072d0:	230c      	movs	r3, #12
 80072d2:	603b      	str	r3, [r7, #0]
 80072d4:	2600      	movs	r6, #0
 80072d6:	4630      	mov	r0, r6
 80072d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80073b0 <_malloc_r+0xfc>
 80072e0:	f000 f868 	bl	80073b4 <__malloc_lock>
 80072e4:	f8d8 3000 	ldr.w	r3, [r8]
 80072e8:	461c      	mov	r4, r3
 80072ea:	bb5c      	cbnz	r4, 8007344 <_malloc_r+0x90>
 80072ec:	4629      	mov	r1, r5
 80072ee:	4638      	mov	r0, r7
 80072f0:	f7ff ffc0 	bl	8007274 <sbrk_aligned>
 80072f4:	1c43      	adds	r3, r0, #1
 80072f6:	4604      	mov	r4, r0
 80072f8:	d155      	bne.n	80073a6 <_malloc_r+0xf2>
 80072fa:	f8d8 4000 	ldr.w	r4, [r8]
 80072fe:	4626      	mov	r6, r4
 8007300:	2e00      	cmp	r6, #0
 8007302:	d145      	bne.n	8007390 <_malloc_r+0xdc>
 8007304:	2c00      	cmp	r4, #0
 8007306:	d048      	beq.n	800739a <_malloc_r+0xe6>
 8007308:	6823      	ldr	r3, [r4, #0]
 800730a:	4631      	mov	r1, r6
 800730c:	4638      	mov	r0, r7
 800730e:	eb04 0903 	add.w	r9, r4, r3
 8007312:	f000 fcf7 	bl	8007d04 <_sbrk_r>
 8007316:	4581      	cmp	r9, r0
 8007318:	d13f      	bne.n	800739a <_malloc_r+0xe6>
 800731a:	6821      	ldr	r1, [r4, #0]
 800731c:	1a6d      	subs	r5, r5, r1
 800731e:	4629      	mov	r1, r5
 8007320:	4638      	mov	r0, r7
 8007322:	f7ff ffa7 	bl	8007274 <sbrk_aligned>
 8007326:	3001      	adds	r0, #1
 8007328:	d037      	beq.n	800739a <_malloc_r+0xe6>
 800732a:	6823      	ldr	r3, [r4, #0]
 800732c:	442b      	add	r3, r5
 800732e:	6023      	str	r3, [r4, #0]
 8007330:	f8d8 3000 	ldr.w	r3, [r8]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d038      	beq.n	80073aa <_malloc_r+0xf6>
 8007338:	685a      	ldr	r2, [r3, #4]
 800733a:	42a2      	cmp	r2, r4
 800733c:	d12b      	bne.n	8007396 <_malloc_r+0xe2>
 800733e:	2200      	movs	r2, #0
 8007340:	605a      	str	r2, [r3, #4]
 8007342:	e00f      	b.n	8007364 <_malloc_r+0xb0>
 8007344:	6822      	ldr	r2, [r4, #0]
 8007346:	1b52      	subs	r2, r2, r5
 8007348:	d41f      	bmi.n	800738a <_malloc_r+0xd6>
 800734a:	2a0b      	cmp	r2, #11
 800734c:	d917      	bls.n	800737e <_malloc_r+0xca>
 800734e:	1961      	adds	r1, r4, r5
 8007350:	42a3      	cmp	r3, r4
 8007352:	6025      	str	r5, [r4, #0]
 8007354:	bf18      	it	ne
 8007356:	6059      	strne	r1, [r3, #4]
 8007358:	6863      	ldr	r3, [r4, #4]
 800735a:	bf08      	it	eq
 800735c:	f8c8 1000 	streq.w	r1, [r8]
 8007360:	5162      	str	r2, [r4, r5]
 8007362:	604b      	str	r3, [r1, #4]
 8007364:	4638      	mov	r0, r7
 8007366:	f104 060b 	add.w	r6, r4, #11
 800736a:	f000 f829 	bl	80073c0 <__malloc_unlock>
 800736e:	f026 0607 	bic.w	r6, r6, #7
 8007372:	1d23      	adds	r3, r4, #4
 8007374:	1af2      	subs	r2, r6, r3
 8007376:	d0ae      	beq.n	80072d6 <_malloc_r+0x22>
 8007378:	1b9b      	subs	r3, r3, r6
 800737a:	50a3      	str	r3, [r4, r2]
 800737c:	e7ab      	b.n	80072d6 <_malloc_r+0x22>
 800737e:	42a3      	cmp	r3, r4
 8007380:	6862      	ldr	r2, [r4, #4]
 8007382:	d1dd      	bne.n	8007340 <_malloc_r+0x8c>
 8007384:	f8c8 2000 	str.w	r2, [r8]
 8007388:	e7ec      	b.n	8007364 <_malloc_r+0xb0>
 800738a:	4623      	mov	r3, r4
 800738c:	6864      	ldr	r4, [r4, #4]
 800738e:	e7ac      	b.n	80072ea <_malloc_r+0x36>
 8007390:	4634      	mov	r4, r6
 8007392:	6876      	ldr	r6, [r6, #4]
 8007394:	e7b4      	b.n	8007300 <_malloc_r+0x4c>
 8007396:	4613      	mov	r3, r2
 8007398:	e7cc      	b.n	8007334 <_malloc_r+0x80>
 800739a:	230c      	movs	r3, #12
 800739c:	603b      	str	r3, [r7, #0]
 800739e:	4638      	mov	r0, r7
 80073a0:	f000 f80e 	bl	80073c0 <__malloc_unlock>
 80073a4:	e797      	b.n	80072d6 <_malloc_r+0x22>
 80073a6:	6025      	str	r5, [r4, #0]
 80073a8:	e7dc      	b.n	8007364 <_malloc_r+0xb0>
 80073aa:	605b      	str	r3, [r3, #4]
 80073ac:	deff      	udf	#255	; 0xff
 80073ae:	bf00      	nop
 80073b0:	20005010 	.word	0x20005010

080073b4 <__malloc_lock>:
 80073b4:	4801      	ldr	r0, [pc, #4]	; (80073bc <__malloc_lock+0x8>)
 80073b6:	f7ff bef8 	b.w	80071aa <__retarget_lock_acquire_recursive>
 80073ba:	bf00      	nop
 80073bc:	2000500c 	.word	0x2000500c

080073c0 <__malloc_unlock>:
 80073c0:	4801      	ldr	r0, [pc, #4]	; (80073c8 <__malloc_unlock+0x8>)
 80073c2:	f7ff bef3 	b.w	80071ac <__retarget_lock_release_recursive>
 80073c6:	bf00      	nop
 80073c8:	2000500c 	.word	0x2000500c

080073cc <__sfputc_r>:
 80073cc:	6893      	ldr	r3, [r2, #8]
 80073ce:	3b01      	subs	r3, #1
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	b410      	push	{r4}
 80073d4:	6093      	str	r3, [r2, #8]
 80073d6:	da08      	bge.n	80073ea <__sfputc_r+0x1e>
 80073d8:	6994      	ldr	r4, [r2, #24]
 80073da:	42a3      	cmp	r3, r4
 80073dc:	db01      	blt.n	80073e2 <__sfputc_r+0x16>
 80073de:	290a      	cmp	r1, #10
 80073e0:	d103      	bne.n	80073ea <__sfputc_r+0x1e>
 80073e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073e6:	f000 bbd5 	b.w	8007b94 <__swbuf_r>
 80073ea:	6813      	ldr	r3, [r2, #0]
 80073ec:	1c58      	adds	r0, r3, #1
 80073ee:	6010      	str	r0, [r2, #0]
 80073f0:	7019      	strb	r1, [r3, #0]
 80073f2:	4608      	mov	r0, r1
 80073f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073f8:	4770      	bx	lr

080073fa <__sfputs_r>:
 80073fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073fc:	4606      	mov	r6, r0
 80073fe:	460f      	mov	r7, r1
 8007400:	4614      	mov	r4, r2
 8007402:	18d5      	adds	r5, r2, r3
 8007404:	42ac      	cmp	r4, r5
 8007406:	d101      	bne.n	800740c <__sfputs_r+0x12>
 8007408:	2000      	movs	r0, #0
 800740a:	e007      	b.n	800741c <__sfputs_r+0x22>
 800740c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007410:	463a      	mov	r2, r7
 8007412:	4630      	mov	r0, r6
 8007414:	f7ff ffda 	bl	80073cc <__sfputc_r>
 8007418:	1c43      	adds	r3, r0, #1
 800741a:	d1f3      	bne.n	8007404 <__sfputs_r+0xa>
 800741c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007420 <_vfiprintf_r>:
 8007420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007424:	460d      	mov	r5, r1
 8007426:	b09d      	sub	sp, #116	; 0x74
 8007428:	4614      	mov	r4, r2
 800742a:	4698      	mov	r8, r3
 800742c:	4606      	mov	r6, r0
 800742e:	b118      	cbz	r0, 8007438 <_vfiprintf_r+0x18>
 8007430:	6a03      	ldr	r3, [r0, #32]
 8007432:	b90b      	cbnz	r3, 8007438 <_vfiprintf_r+0x18>
 8007434:	f7ff fd04 	bl	8006e40 <__sinit>
 8007438:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800743a:	07d9      	lsls	r1, r3, #31
 800743c:	d405      	bmi.n	800744a <_vfiprintf_r+0x2a>
 800743e:	89ab      	ldrh	r3, [r5, #12]
 8007440:	059a      	lsls	r2, r3, #22
 8007442:	d402      	bmi.n	800744a <_vfiprintf_r+0x2a>
 8007444:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007446:	f7ff feb0 	bl	80071aa <__retarget_lock_acquire_recursive>
 800744a:	89ab      	ldrh	r3, [r5, #12]
 800744c:	071b      	lsls	r3, r3, #28
 800744e:	d501      	bpl.n	8007454 <_vfiprintf_r+0x34>
 8007450:	692b      	ldr	r3, [r5, #16]
 8007452:	b99b      	cbnz	r3, 800747c <_vfiprintf_r+0x5c>
 8007454:	4629      	mov	r1, r5
 8007456:	4630      	mov	r0, r6
 8007458:	f000 fbda 	bl	8007c10 <__swsetup_r>
 800745c:	b170      	cbz	r0, 800747c <_vfiprintf_r+0x5c>
 800745e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007460:	07dc      	lsls	r4, r3, #31
 8007462:	d504      	bpl.n	800746e <_vfiprintf_r+0x4e>
 8007464:	f04f 30ff 	mov.w	r0, #4294967295
 8007468:	b01d      	add	sp, #116	; 0x74
 800746a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800746e:	89ab      	ldrh	r3, [r5, #12]
 8007470:	0598      	lsls	r0, r3, #22
 8007472:	d4f7      	bmi.n	8007464 <_vfiprintf_r+0x44>
 8007474:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007476:	f7ff fe99 	bl	80071ac <__retarget_lock_release_recursive>
 800747a:	e7f3      	b.n	8007464 <_vfiprintf_r+0x44>
 800747c:	2300      	movs	r3, #0
 800747e:	9309      	str	r3, [sp, #36]	; 0x24
 8007480:	2320      	movs	r3, #32
 8007482:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007486:	f8cd 800c 	str.w	r8, [sp, #12]
 800748a:	2330      	movs	r3, #48	; 0x30
 800748c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007640 <_vfiprintf_r+0x220>
 8007490:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007494:	f04f 0901 	mov.w	r9, #1
 8007498:	4623      	mov	r3, r4
 800749a:	469a      	mov	sl, r3
 800749c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074a0:	b10a      	cbz	r2, 80074a6 <_vfiprintf_r+0x86>
 80074a2:	2a25      	cmp	r2, #37	; 0x25
 80074a4:	d1f9      	bne.n	800749a <_vfiprintf_r+0x7a>
 80074a6:	ebba 0b04 	subs.w	fp, sl, r4
 80074aa:	d00b      	beq.n	80074c4 <_vfiprintf_r+0xa4>
 80074ac:	465b      	mov	r3, fp
 80074ae:	4622      	mov	r2, r4
 80074b0:	4629      	mov	r1, r5
 80074b2:	4630      	mov	r0, r6
 80074b4:	f7ff ffa1 	bl	80073fa <__sfputs_r>
 80074b8:	3001      	adds	r0, #1
 80074ba:	f000 80a9 	beq.w	8007610 <_vfiprintf_r+0x1f0>
 80074be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074c0:	445a      	add	r2, fp
 80074c2:	9209      	str	r2, [sp, #36]	; 0x24
 80074c4:	f89a 3000 	ldrb.w	r3, [sl]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	f000 80a1 	beq.w	8007610 <_vfiprintf_r+0x1f0>
 80074ce:	2300      	movs	r3, #0
 80074d0:	f04f 32ff 	mov.w	r2, #4294967295
 80074d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074d8:	f10a 0a01 	add.w	sl, sl, #1
 80074dc:	9304      	str	r3, [sp, #16]
 80074de:	9307      	str	r3, [sp, #28]
 80074e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80074e4:	931a      	str	r3, [sp, #104]	; 0x68
 80074e6:	4654      	mov	r4, sl
 80074e8:	2205      	movs	r2, #5
 80074ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074ee:	4854      	ldr	r0, [pc, #336]	; (8007640 <_vfiprintf_r+0x220>)
 80074f0:	f7f8 fea6 	bl	8000240 <memchr>
 80074f4:	9a04      	ldr	r2, [sp, #16]
 80074f6:	b9d8      	cbnz	r0, 8007530 <_vfiprintf_r+0x110>
 80074f8:	06d1      	lsls	r1, r2, #27
 80074fa:	bf44      	itt	mi
 80074fc:	2320      	movmi	r3, #32
 80074fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007502:	0713      	lsls	r3, r2, #28
 8007504:	bf44      	itt	mi
 8007506:	232b      	movmi	r3, #43	; 0x2b
 8007508:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800750c:	f89a 3000 	ldrb.w	r3, [sl]
 8007510:	2b2a      	cmp	r3, #42	; 0x2a
 8007512:	d015      	beq.n	8007540 <_vfiprintf_r+0x120>
 8007514:	9a07      	ldr	r2, [sp, #28]
 8007516:	4654      	mov	r4, sl
 8007518:	2000      	movs	r0, #0
 800751a:	f04f 0c0a 	mov.w	ip, #10
 800751e:	4621      	mov	r1, r4
 8007520:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007524:	3b30      	subs	r3, #48	; 0x30
 8007526:	2b09      	cmp	r3, #9
 8007528:	d94d      	bls.n	80075c6 <_vfiprintf_r+0x1a6>
 800752a:	b1b0      	cbz	r0, 800755a <_vfiprintf_r+0x13a>
 800752c:	9207      	str	r2, [sp, #28]
 800752e:	e014      	b.n	800755a <_vfiprintf_r+0x13a>
 8007530:	eba0 0308 	sub.w	r3, r0, r8
 8007534:	fa09 f303 	lsl.w	r3, r9, r3
 8007538:	4313      	orrs	r3, r2
 800753a:	9304      	str	r3, [sp, #16]
 800753c:	46a2      	mov	sl, r4
 800753e:	e7d2      	b.n	80074e6 <_vfiprintf_r+0xc6>
 8007540:	9b03      	ldr	r3, [sp, #12]
 8007542:	1d19      	adds	r1, r3, #4
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	9103      	str	r1, [sp, #12]
 8007548:	2b00      	cmp	r3, #0
 800754a:	bfbb      	ittet	lt
 800754c:	425b      	neglt	r3, r3
 800754e:	f042 0202 	orrlt.w	r2, r2, #2
 8007552:	9307      	strge	r3, [sp, #28]
 8007554:	9307      	strlt	r3, [sp, #28]
 8007556:	bfb8      	it	lt
 8007558:	9204      	strlt	r2, [sp, #16]
 800755a:	7823      	ldrb	r3, [r4, #0]
 800755c:	2b2e      	cmp	r3, #46	; 0x2e
 800755e:	d10c      	bne.n	800757a <_vfiprintf_r+0x15a>
 8007560:	7863      	ldrb	r3, [r4, #1]
 8007562:	2b2a      	cmp	r3, #42	; 0x2a
 8007564:	d134      	bne.n	80075d0 <_vfiprintf_r+0x1b0>
 8007566:	9b03      	ldr	r3, [sp, #12]
 8007568:	1d1a      	adds	r2, r3, #4
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	9203      	str	r2, [sp, #12]
 800756e:	2b00      	cmp	r3, #0
 8007570:	bfb8      	it	lt
 8007572:	f04f 33ff 	movlt.w	r3, #4294967295
 8007576:	3402      	adds	r4, #2
 8007578:	9305      	str	r3, [sp, #20]
 800757a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007650 <_vfiprintf_r+0x230>
 800757e:	7821      	ldrb	r1, [r4, #0]
 8007580:	2203      	movs	r2, #3
 8007582:	4650      	mov	r0, sl
 8007584:	f7f8 fe5c 	bl	8000240 <memchr>
 8007588:	b138      	cbz	r0, 800759a <_vfiprintf_r+0x17a>
 800758a:	9b04      	ldr	r3, [sp, #16]
 800758c:	eba0 000a 	sub.w	r0, r0, sl
 8007590:	2240      	movs	r2, #64	; 0x40
 8007592:	4082      	lsls	r2, r0
 8007594:	4313      	orrs	r3, r2
 8007596:	3401      	adds	r4, #1
 8007598:	9304      	str	r3, [sp, #16]
 800759a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800759e:	4829      	ldr	r0, [pc, #164]	; (8007644 <_vfiprintf_r+0x224>)
 80075a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80075a4:	2206      	movs	r2, #6
 80075a6:	f7f8 fe4b 	bl	8000240 <memchr>
 80075aa:	2800      	cmp	r0, #0
 80075ac:	d03f      	beq.n	800762e <_vfiprintf_r+0x20e>
 80075ae:	4b26      	ldr	r3, [pc, #152]	; (8007648 <_vfiprintf_r+0x228>)
 80075b0:	bb1b      	cbnz	r3, 80075fa <_vfiprintf_r+0x1da>
 80075b2:	9b03      	ldr	r3, [sp, #12]
 80075b4:	3307      	adds	r3, #7
 80075b6:	f023 0307 	bic.w	r3, r3, #7
 80075ba:	3308      	adds	r3, #8
 80075bc:	9303      	str	r3, [sp, #12]
 80075be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075c0:	443b      	add	r3, r7
 80075c2:	9309      	str	r3, [sp, #36]	; 0x24
 80075c4:	e768      	b.n	8007498 <_vfiprintf_r+0x78>
 80075c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80075ca:	460c      	mov	r4, r1
 80075cc:	2001      	movs	r0, #1
 80075ce:	e7a6      	b.n	800751e <_vfiprintf_r+0xfe>
 80075d0:	2300      	movs	r3, #0
 80075d2:	3401      	adds	r4, #1
 80075d4:	9305      	str	r3, [sp, #20]
 80075d6:	4619      	mov	r1, r3
 80075d8:	f04f 0c0a 	mov.w	ip, #10
 80075dc:	4620      	mov	r0, r4
 80075de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075e2:	3a30      	subs	r2, #48	; 0x30
 80075e4:	2a09      	cmp	r2, #9
 80075e6:	d903      	bls.n	80075f0 <_vfiprintf_r+0x1d0>
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d0c6      	beq.n	800757a <_vfiprintf_r+0x15a>
 80075ec:	9105      	str	r1, [sp, #20]
 80075ee:	e7c4      	b.n	800757a <_vfiprintf_r+0x15a>
 80075f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80075f4:	4604      	mov	r4, r0
 80075f6:	2301      	movs	r3, #1
 80075f8:	e7f0      	b.n	80075dc <_vfiprintf_r+0x1bc>
 80075fa:	ab03      	add	r3, sp, #12
 80075fc:	9300      	str	r3, [sp, #0]
 80075fe:	462a      	mov	r2, r5
 8007600:	4b12      	ldr	r3, [pc, #72]	; (800764c <_vfiprintf_r+0x22c>)
 8007602:	a904      	add	r1, sp, #16
 8007604:	4630      	mov	r0, r6
 8007606:	f3af 8000 	nop.w
 800760a:	4607      	mov	r7, r0
 800760c:	1c78      	adds	r0, r7, #1
 800760e:	d1d6      	bne.n	80075be <_vfiprintf_r+0x19e>
 8007610:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007612:	07d9      	lsls	r1, r3, #31
 8007614:	d405      	bmi.n	8007622 <_vfiprintf_r+0x202>
 8007616:	89ab      	ldrh	r3, [r5, #12]
 8007618:	059a      	lsls	r2, r3, #22
 800761a:	d402      	bmi.n	8007622 <_vfiprintf_r+0x202>
 800761c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800761e:	f7ff fdc5 	bl	80071ac <__retarget_lock_release_recursive>
 8007622:	89ab      	ldrh	r3, [r5, #12]
 8007624:	065b      	lsls	r3, r3, #25
 8007626:	f53f af1d 	bmi.w	8007464 <_vfiprintf_r+0x44>
 800762a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800762c:	e71c      	b.n	8007468 <_vfiprintf_r+0x48>
 800762e:	ab03      	add	r3, sp, #12
 8007630:	9300      	str	r3, [sp, #0]
 8007632:	462a      	mov	r2, r5
 8007634:	4b05      	ldr	r3, [pc, #20]	; (800764c <_vfiprintf_r+0x22c>)
 8007636:	a904      	add	r1, sp, #16
 8007638:	4630      	mov	r0, r6
 800763a:	f000 f879 	bl	8007730 <_printf_i>
 800763e:	e7e4      	b.n	800760a <_vfiprintf_r+0x1ea>
 8007640:	08009971 	.word	0x08009971
 8007644:	0800997b 	.word	0x0800997b
 8007648:	00000000 	.word	0x00000000
 800764c:	080073fb 	.word	0x080073fb
 8007650:	08009977 	.word	0x08009977

08007654 <_printf_common>:
 8007654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007658:	4616      	mov	r6, r2
 800765a:	4699      	mov	r9, r3
 800765c:	688a      	ldr	r2, [r1, #8]
 800765e:	690b      	ldr	r3, [r1, #16]
 8007660:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007664:	4293      	cmp	r3, r2
 8007666:	bfb8      	it	lt
 8007668:	4613      	movlt	r3, r2
 800766a:	6033      	str	r3, [r6, #0]
 800766c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007670:	4607      	mov	r7, r0
 8007672:	460c      	mov	r4, r1
 8007674:	b10a      	cbz	r2, 800767a <_printf_common+0x26>
 8007676:	3301      	adds	r3, #1
 8007678:	6033      	str	r3, [r6, #0]
 800767a:	6823      	ldr	r3, [r4, #0]
 800767c:	0699      	lsls	r1, r3, #26
 800767e:	bf42      	ittt	mi
 8007680:	6833      	ldrmi	r3, [r6, #0]
 8007682:	3302      	addmi	r3, #2
 8007684:	6033      	strmi	r3, [r6, #0]
 8007686:	6825      	ldr	r5, [r4, #0]
 8007688:	f015 0506 	ands.w	r5, r5, #6
 800768c:	d106      	bne.n	800769c <_printf_common+0x48>
 800768e:	f104 0a19 	add.w	sl, r4, #25
 8007692:	68e3      	ldr	r3, [r4, #12]
 8007694:	6832      	ldr	r2, [r6, #0]
 8007696:	1a9b      	subs	r3, r3, r2
 8007698:	42ab      	cmp	r3, r5
 800769a:	dc26      	bgt.n	80076ea <_printf_common+0x96>
 800769c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80076a0:	1e13      	subs	r3, r2, #0
 80076a2:	6822      	ldr	r2, [r4, #0]
 80076a4:	bf18      	it	ne
 80076a6:	2301      	movne	r3, #1
 80076a8:	0692      	lsls	r2, r2, #26
 80076aa:	d42b      	bmi.n	8007704 <_printf_common+0xb0>
 80076ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80076b0:	4649      	mov	r1, r9
 80076b2:	4638      	mov	r0, r7
 80076b4:	47c0      	blx	r8
 80076b6:	3001      	adds	r0, #1
 80076b8:	d01e      	beq.n	80076f8 <_printf_common+0xa4>
 80076ba:	6823      	ldr	r3, [r4, #0]
 80076bc:	6922      	ldr	r2, [r4, #16]
 80076be:	f003 0306 	and.w	r3, r3, #6
 80076c2:	2b04      	cmp	r3, #4
 80076c4:	bf02      	ittt	eq
 80076c6:	68e5      	ldreq	r5, [r4, #12]
 80076c8:	6833      	ldreq	r3, [r6, #0]
 80076ca:	1aed      	subeq	r5, r5, r3
 80076cc:	68a3      	ldr	r3, [r4, #8]
 80076ce:	bf0c      	ite	eq
 80076d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076d4:	2500      	movne	r5, #0
 80076d6:	4293      	cmp	r3, r2
 80076d8:	bfc4      	itt	gt
 80076da:	1a9b      	subgt	r3, r3, r2
 80076dc:	18ed      	addgt	r5, r5, r3
 80076de:	2600      	movs	r6, #0
 80076e0:	341a      	adds	r4, #26
 80076e2:	42b5      	cmp	r5, r6
 80076e4:	d11a      	bne.n	800771c <_printf_common+0xc8>
 80076e6:	2000      	movs	r0, #0
 80076e8:	e008      	b.n	80076fc <_printf_common+0xa8>
 80076ea:	2301      	movs	r3, #1
 80076ec:	4652      	mov	r2, sl
 80076ee:	4649      	mov	r1, r9
 80076f0:	4638      	mov	r0, r7
 80076f2:	47c0      	blx	r8
 80076f4:	3001      	adds	r0, #1
 80076f6:	d103      	bne.n	8007700 <_printf_common+0xac>
 80076f8:	f04f 30ff 	mov.w	r0, #4294967295
 80076fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007700:	3501      	adds	r5, #1
 8007702:	e7c6      	b.n	8007692 <_printf_common+0x3e>
 8007704:	18e1      	adds	r1, r4, r3
 8007706:	1c5a      	adds	r2, r3, #1
 8007708:	2030      	movs	r0, #48	; 0x30
 800770a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800770e:	4422      	add	r2, r4
 8007710:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007714:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007718:	3302      	adds	r3, #2
 800771a:	e7c7      	b.n	80076ac <_printf_common+0x58>
 800771c:	2301      	movs	r3, #1
 800771e:	4622      	mov	r2, r4
 8007720:	4649      	mov	r1, r9
 8007722:	4638      	mov	r0, r7
 8007724:	47c0      	blx	r8
 8007726:	3001      	adds	r0, #1
 8007728:	d0e6      	beq.n	80076f8 <_printf_common+0xa4>
 800772a:	3601      	adds	r6, #1
 800772c:	e7d9      	b.n	80076e2 <_printf_common+0x8e>
	...

08007730 <_printf_i>:
 8007730:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007734:	7e0f      	ldrb	r7, [r1, #24]
 8007736:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007738:	2f78      	cmp	r7, #120	; 0x78
 800773a:	4691      	mov	r9, r2
 800773c:	4680      	mov	r8, r0
 800773e:	460c      	mov	r4, r1
 8007740:	469a      	mov	sl, r3
 8007742:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007746:	d807      	bhi.n	8007758 <_printf_i+0x28>
 8007748:	2f62      	cmp	r7, #98	; 0x62
 800774a:	d80a      	bhi.n	8007762 <_printf_i+0x32>
 800774c:	2f00      	cmp	r7, #0
 800774e:	f000 80d4 	beq.w	80078fa <_printf_i+0x1ca>
 8007752:	2f58      	cmp	r7, #88	; 0x58
 8007754:	f000 80c0 	beq.w	80078d8 <_printf_i+0x1a8>
 8007758:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800775c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007760:	e03a      	b.n	80077d8 <_printf_i+0xa8>
 8007762:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007766:	2b15      	cmp	r3, #21
 8007768:	d8f6      	bhi.n	8007758 <_printf_i+0x28>
 800776a:	a101      	add	r1, pc, #4	; (adr r1, 8007770 <_printf_i+0x40>)
 800776c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007770:	080077c9 	.word	0x080077c9
 8007774:	080077dd 	.word	0x080077dd
 8007778:	08007759 	.word	0x08007759
 800777c:	08007759 	.word	0x08007759
 8007780:	08007759 	.word	0x08007759
 8007784:	08007759 	.word	0x08007759
 8007788:	080077dd 	.word	0x080077dd
 800778c:	08007759 	.word	0x08007759
 8007790:	08007759 	.word	0x08007759
 8007794:	08007759 	.word	0x08007759
 8007798:	08007759 	.word	0x08007759
 800779c:	080078e1 	.word	0x080078e1
 80077a0:	08007809 	.word	0x08007809
 80077a4:	0800789b 	.word	0x0800789b
 80077a8:	08007759 	.word	0x08007759
 80077ac:	08007759 	.word	0x08007759
 80077b0:	08007903 	.word	0x08007903
 80077b4:	08007759 	.word	0x08007759
 80077b8:	08007809 	.word	0x08007809
 80077bc:	08007759 	.word	0x08007759
 80077c0:	08007759 	.word	0x08007759
 80077c4:	080078a3 	.word	0x080078a3
 80077c8:	682b      	ldr	r3, [r5, #0]
 80077ca:	1d1a      	adds	r2, r3, #4
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	602a      	str	r2, [r5, #0]
 80077d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077d8:	2301      	movs	r3, #1
 80077da:	e09f      	b.n	800791c <_printf_i+0x1ec>
 80077dc:	6820      	ldr	r0, [r4, #0]
 80077de:	682b      	ldr	r3, [r5, #0]
 80077e0:	0607      	lsls	r7, r0, #24
 80077e2:	f103 0104 	add.w	r1, r3, #4
 80077e6:	6029      	str	r1, [r5, #0]
 80077e8:	d501      	bpl.n	80077ee <_printf_i+0xbe>
 80077ea:	681e      	ldr	r6, [r3, #0]
 80077ec:	e003      	b.n	80077f6 <_printf_i+0xc6>
 80077ee:	0646      	lsls	r6, r0, #25
 80077f0:	d5fb      	bpl.n	80077ea <_printf_i+0xba>
 80077f2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80077f6:	2e00      	cmp	r6, #0
 80077f8:	da03      	bge.n	8007802 <_printf_i+0xd2>
 80077fa:	232d      	movs	r3, #45	; 0x2d
 80077fc:	4276      	negs	r6, r6
 80077fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007802:	485a      	ldr	r0, [pc, #360]	; (800796c <_printf_i+0x23c>)
 8007804:	230a      	movs	r3, #10
 8007806:	e012      	b.n	800782e <_printf_i+0xfe>
 8007808:	682b      	ldr	r3, [r5, #0]
 800780a:	6820      	ldr	r0, [r4, #0]
 800780c:	1d19      	adds	r1, r3, #4
 800780e:	6029      	str	r1, [r5, #0]
 8007810:	0605      	lsls	r5, r0, #24
 8007812:	d501      	bpl.n	8007818 <_printf_i+0xe8>
 8007814:	681e      	ldr	r6, [r3, #0]
 8007816:	e002      	b.n	800781e <_printf_i+0xee>
 8007818:	0641      	lsls	r1, r0, #25
 800781a:	d5fb      	bpl.n	8007814 <_printf_i+0xe4>
 800781c:	881e      	ldrh	r6, [r3, #0]
 800781e:	4853      	ldr	r0, [pc, #332]	; (800796c <_printf_i+0x23c>)
 8007820:	2f6f      	cmp	r7, #111	; 0x6f
 8007822:	bf0c      	ite	eq
 8007824:	2308      	moveq	r3, #8
 8007826:	230a      	movne	r3, #10
 8007828:	2100      	movs	r1, #0
 800782a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800782e:	6865      	ldr	r5, [r4, #4]
 8007830:	60a5      	str	r5, [r4, #8]
 8007832:	2d00      	cmp	r5, #0
 8007834:	bfa2      	ittt	ge
 8007836:	6821      	ldrge	r1, [r4, #0]
 8007838:	f021 0104 	bicge.w	r1, r1, #4
 800783c:	6021      	strge	r1, [r4, #0]
 800783e:	b90e      	cbnz	r6, 8007844 <_printf_i+0x114>
 8007840:	2d00      	cmp	r5, #0
 8007842:	d04b      	beq.n	80078dc <_printf_i+0x1ac>
 8007844:	4615      	mov	r5, r2
 8007846:	fbb6 f1f3 	udiv	r1, r6, r3
 800784a:	fb03 6711 	mls	r7, r3, r1, r6
 800784e:	5dc7      	ldrb	r7, [r0, r7]
 8007850:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007854:	4637      	mov	r7, r6
 8007856:	42bb      	cmp	r3, r7
 8007858:	460e      	mov	r6, r1
 800785a:	d9f4      	bls.n	8007846 <_printf_i+0x116>
 800785c:	2b08      	cmp	r3, #8
 800785e:	d10b      	bne.n	8007878 <_printf_i+0x148>
 8007860:	6823      	ldr	r3, [r4, #0]
 8007862:	07de      	lsls	r6, r3, #31
 8007864:	d508      	bpl.n	8007878 <_printf_i+0x148>
 8007866:	6923      	ldr	r3, [r4, #16]
 8007868:	6861      	ldr	r1, [r4, #4]
 800786a:	4299      	cmp	r1, r3
 800786c:	bfde      	ittt	le
 800786e:	2330      	movle	r3, #48	; 0x30
 8007870:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007874:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007878:	1b52      	subs	r2, r2, r5
 800787a:	6122      	str	r2, [r4, #16]
 800787c:	f8cd a000 	str.w	sl, [sp]
 8007880:	464b      	mov	r3, r9
 8007882:	aa03      	add	r2, sp, #12
 8007884:	4621      	mov	r1, r4
 8007886:	4640      	mov	r0, r8
 8007888:	f7ff fee4 	bl	8007654 <_printf_common>
 800788c:	3001      	adds	r0, #1
 800788e:	d14a      	bne.n	8007926 <_printf_i+0x1f6>
 8007890:	f04f 30ff 	mov.w	r0, #4294967295
 8007894:	b004      	add	sp, #16
 8007896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800789a:	6823      	ldr	r3, [r4, #0]
 800789c:	f043 0320 	orr.w	r3, r3, #32
 80078a0:	6023      	str	r3, [r4, #0]
 80078a2:	4833      	ldr	r0, [pc, #204]	; (8007970 <_printf_i+0x240>)
 80078a4:	2778      	movs	r7, #120	; 0x78
 80078a6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80078aa:	6823      	ldr	r3, [r4, #0]
 80078ac:	6829      	ldr	r1, [r5, #0]
 80078ae:	061f      	lsls	r7, r3, #24
 80078b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80078b4:	d402      	bmi.n	80078bc <_printf_i+0x18c>
 80078b6:	065f      	lsls	r7, r3, #25
 80078b8:	bf48      	it	mi
 80078ba:	b2b6      	uxthmi	r6, r6
 80078bc:	07df      	lsls	r7, r3, #31
 80078be:	bf48      	it	mi
 80078c0:	f043 0320 	orrmi.w	r3, r3, #32
 80078c4:	6029      	str	r1, [r5, #0]
 80078c6:	bf48      	it	mi
 80078c8:	6023      	strmi	r3, [r4, #0]
 80078ca:	b91e      	cbnz	r6, 80078d4 <_printf_i+0x1a4>
 80078cc:	6823      	ldr	r3, [r4, #0]
 80078ce:	f023 0320 	bic.w	r3, r3, #32
 80078d2:	6023      	str	r3, [r4, #0]
 80078d4:	2310      	movs	r3, #16
 80078d6:	e7a7      	b.n	8007828 <_printf_i+0xf8>
 80078d8:	4824      	ldr	r0, [pc, #144]	; (800796c <_printf_i+0x23c>)
 80078da:	e7e4      	b.n	80078a6 <_printf_i+0x176>
 80078dc:	4615      	mov	r5, r2
 80078de:	e7bd      	b.n	800785c <_printf_i+0x12c>
 80078e0:	682b      	ldr	r3, [r5, #0]
 80078e2:	6826      	ldr	r6, [r4, #0]
 80078e4:	6961      	ldr	r1, [r4, #20]
 80078e6:	1d18      	adds	r0, r3, #4
 80078e8:	6028      	str	r0, [r5, #0]
 80078ea:	0635      	lsls	r5, r6, #24
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	d501      	bpl.n	80078f4 <_printf_i+0x1c4>
 80078f0:	6019      	str	r1, [r3, #0]
 80078f2:	e002      	b.n	80078fa <_printf_i+0x1ca>
 80078f4:	0670      	lsls	r0, r6, #25
 80078f6:	d5fb      	bpl.n	80078f0 <_printf_i+0x1c0>
 80078f8:	8019      	strh	r1, [r3, #0]
 80078fa:	2300      	movs	r3, #0
 80078fc:	6123      	str	r3, [r4, #16]
 80078fe:	4615      	mov	r5, r2
 8007900:	e7bc      	b.n	800787c <_printf_i+0x14c>
 8007902:	682b      	ldr	r3, [r5, #0]
 8007904:	1d1a      	adds	r2, r3, #4
 8007906:	602a      	str	r2, [r5, #0]
 8007908:	681d      	ldr	r5, [r3, #0]
 800790a:	6862      	ldr	r2, [r4, #4]
 800790c:	2100      	movs	r1, #0
 800790e:	4628      	mov	r0, r5
 8007910:	f7f8 fc96 	bl	8000240 <memchr>
 8007914:	b108      	cbz	r0, 800791a <_printf_i+0x1ea>
 8007916:	1b40      	subs	r0, r0, r5
 8007918:	6060      	str	r0, [r4, #4]
 800791a:	6863      	ldr	r3, [r4, #4]
 800791c:	6123      	str	r3, [r4, #16]
 800791e:	2300      	movs	r3, #0
 8007920:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007924:	e7aa      	b.n	800787c <_printf_i+0x14c>
 8007926:	6923      	ldr	r3, [r4, #16]
 8007928:	462a      	mov	r2, r5
 800792a:	4649      	mov	r1, r9
 800792c:	4640      	mov	r0, r8
 800792e:	47d0      	blx	sl
 8007930:	3001      	adds	r0, #1
 8007932:	d0ad      	beq.n	8007890 <_printf_i+0x160>
 8007934:	6823      	ldr	r3, [r4, #0]
 8007936:	079b      	lsls	r3, r3, #30
 8007938:	d413      	bmi.n	8007962 <_printf_i+0x232>
 800793a:	68e0      	ldr	r0, [r4, #12]
 800793c:	9b03      	ldr	r3, [sp, #12]
 800793e:	4298      	cmp	r0, r3
 8007940:	bfb8      	it	lt
 8007942:	4618      	movlt	r0, r3
 8007944:	e7a6      	b.n	8007894 <_printf_i+0x164>
 8007946:	2301      	movs	r3, #1
 8007948:	4632      	mov	r2, r6
 800794a:	4649      	mov	r1, r9
 800794c:	4640      	mov	r0, r8
 800794e:	47d0      	blx	sl
 8007950:	3001      	adds	r0, #1
 8007952:	d09d      	beq.n	8007890 <_printf_i+0x160>
 8007954:	3501      	adds	r5, #1
 8007956:	68e3      	ldr	r3, [r4, #12]
 8007958:	9903      	ldr	r1, [sp, #12]
 800795a:	1a5b      	subs	r3, r3, r1
 800795c:	42ab      	cmp	r3, r5
 800795e:	dcf2      	bgt.n	8007946 <_printf_i+0x216>
 8007960:	e7eb      	b.n	800793a <_printf_i+0x20a>
 8007962:	2500      	movs	r5, #0
 8007964:	f104 0619 	add.w	r6, r4, #25
 8007968:	e7f5      	b.n	8007956 <_printf_i+0x226>
 800796a:	bf00      	nop
 800796c:	08009982 	.word	0x08009982
 8007970:	08009993 	.word	0x08009993

08007974 <__sflush_r>:
 8007974:	898a      	ldrh	r2, [r1, #12]
 8007976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800797a:	4605      	mov	r5, r0
 800797c:	0710      	lsls	r0, r2, #28
 800797e:	460c      	mov	r4, r1
 8007980:	d458      	bmi.n	8007a34 <__sflush_r+0xc0>
 8007982:	684b      	ldr	r3, [r1, #4]
 8007984:	2b00      	cmp	r3, #0
 8007986:	dc05      	bgt.n	8007994 <__sflush_r+0x20>
 8007988:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800798a:	2b00      	cmp	r3, #0
 800798c:	dc02      	bgt.n	8007994 <__sflush_r+0x20>
 800798e:	2000      	movs	r0, #0
 8007990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007994:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007996:	2e00      	cmp	r6, #0
 8007998:	d0f9      	beq.n	800798e <__sflush_r+0x1a>
 800799a:	2300      	movs	r3, #0
 800799c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80079a0:	682f      	ldr	r7, [r5, #0]
 80079a2:	6a21      	ldr	r1, [r4, #32]
 80079a4:	602b      	str	r3, [r5, #0]
 80079a6:	d032      	beq.n	8007a0e <__sflush_r+0x9a>
 80079a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80079aa:	89a3      	ldrh	r3, [r4, #12]
 80079ac:	075a      	lsls	r2, r3, #29
 80079ae:	d505      	bpl.n	80079bc <__sflush_r+0x48>
 80079b0:	6863      	ldr	r3, [r4, #4]
 80079b2:	1ac0      	subs	r0, r0, r3
 80079b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80079b6:	b10b      	cbz	r3, 80079bc <__sflush_r+0x48>
 80079b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80079ba:	1ac0      	subs	r0, r0, r3
 80079bc:	2300      	movs	r3, #0
 80079be:	4602      	mov	r2, r0
 80079c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80079c2:	6a21      	ldr	r1, [r4, #32]
 80079c4:	4628      	mov	r0, r5
 80079c6:	47b0      	blx	r6
 80079c8:	1c43      	adds	r3, r0, #1
 80079ca:	89a3      	ldrh	r3, [r4, #12]
 80079cc:	d106      	bne.n	80079dc <__sflush_r+0x68>
 80079ce:	6829      	ldr	r1, [r5, #0]
 80079d0:	291d      	cmp	r1, #29
 80079d2:	d82b      	bhi.n	8007a2c <__sflush_r+0xb8>
 80079d4:	4a29      	ldr	r2, [pc, #164]	; (8007a7c <__sflush_r+0x108>)
 80079d6:	410a      	asrs	r2, r1
 80079d8:	07d6      	lsls	r6, r2, #31
 80079da:	d427      	bmi.n	8007a2c <__sflush_r+0xb8>
 80079dc:	2200      	movs	r2, #0
 80079de:	6062      	str	r2, [r4, #4]
 80079e0:	04d9      	lsls	r1, r3, #19
 80079e2:	6922      	ldr	r2, [r4, #16]
 80079e4:	6022      	str	r2, [r4, #0]
 80079e6:	d504      	bpl.n	80079f2 <__sflush_r+0x7e>
 80079e8:	1c42      	adds	r2, r0, #1
 80079ea:	d101      	bne.n	80079f0 <__sflush_r+0x7c>
 80079ec:	682b      	ldr	r3, [r5, #0]
 80079ee:	b903      	cbnz	r3, 80079f2 <__sflush_r+0x7e>
 80079f0:	6560      	str	r0, [r4, #84]	; 0x54
 80079f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079f4:	602f      	str	r7, [r5, #0]
 80079f6:	2900      	cmp	r1, #0
 80079f8:	d0c9      	beq.n	800798e <__sflush_r+0x1a>
 80079fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079fe:	4299      	cmp	r1, r3
 8007a00:	d002      	beq.n	8007a08 <__sflush_r+0x94>
 8007a02:	4628      	mov	r0, r5
 8007a04:	f7ff fbe2 	bl	80071cc <_free_r>
 8007a08:	2000      	movs	r0, #0
 8007a0a:	6360      	str	r0, [r4, #52]	; 0x34
 8007a0c:	e7c0      	b.n	8007990 <__sflush_r+0x1c>
 8007a0e:	2301      	movs	r3, #1
 8007a10:	4628      	mov	r0, r5
 8007a12:	47b0      	blx	r6
 8007a14:	1c41      	adds	r1, r0, #1
 8007a16:	d1c8      	bne.n	80079aa <__sflush_r+0x36>
 8007a18:	682b      	ldr	r3, [r5, #0]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d0c5      	beq.n	80079aa <__sflush_r+0x36>
 8007a1e:	2b1d      	cmp	r3, #29
 8007a20:	d001      	beq.n	8007a26 <__sflush_r+0xb2>
 8007a22:	2b16      	cmp	r3, #22
 8007a24:	d101      	bne.n	8007a2a <__sflush_r+0xb6>
 8007a26:	602f      	str	r7, [r5, #0]
 8007a28:	e7b1      	b.n	800798e <__sflush_r+0x1a>
 8007a2a:	89a3      	ldrh	r3, [r4, #12]
 8007a2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a30:	81a3      	strh	r3, [r4, #12]
 8007a32:	e7ad      	b.n	8007990 <__sflush_r+0x1c>
 8007a34:	690f      	ldr	r7, [r1, #16]
 8007a36:	2f00      	cmp	r7, #0
 8007a38:	d0a9      	beq.n	800798e <__sflush_r+0x1a>
 8007a3a:	0793      	lsls	r3, r2, #30
 8007a3c:	680e      	ldr	r6, [r1, #0]
 8007a3e:	bf08      	it	eq
 8007a40:	694b      	ldreq	r3, [r1, #20]
 8007a42:	600f      	str	r7, [r1, #0]
 8007a44:	bf18      	it	ne
 8007a46:	2300      	movne	r3, #0
 8007a48:	eba6 0807 	sub.w	r8, r6, r7
 8007a4c:	608b      	str	r3, [r1, #8]
 8007a4e:	f1b8 0f00 	cmp.w	r8, #0
 8007a52:	dd9c      	ble.n	800798e <__sflush_r+0x1a>
 8007a54:	6a21      	ldr	r1, [r4, #32]
 8007a56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007a58:	4643      	mov	r3, r8
 8007a5a:	463a      	mov	r2, r7
 8007a5c:	4628      	mov	r0, r5
 8007a5e:	47b0      	blx	r6
 8007a60:	2800      	cmp	r0, #0
 8007a62:	dc06      	bgt.n	8007a72 <__sflush_r+0xfe>
 8007a64:	89a3      	ldrh	r3, [r4, #12]
 8007a66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a6a:	81a3      	strh	r3, [r4, #12]
 8007a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a70:	e78e      	b.n	8007990 <__sflush_r+0x1c>
 8007a72:	4407      	add	r7, r0
 8007a74:	eba8 0800 	sub.w	r8, r8, r0
 8007a78:	e7e9      	b.n	8007a4e <__sflush_r+0xda>
 8007a7a:	bf00      	nop
 8007a7c:	dfbffffe 	.word	0xdfbffffe

08007a80 <_fflush_r>:
 8007a80:	b538      	push	{r3, r4, r5, lr}
 8007a82:	690b      	ldr	r3, [r1, #16]
 8007a84:	4605      	mov	r5, r0
 8007a86:	460c      	mov	r4, r1
 8007a88:	b913      	cbnz	r3, 8007a90 <_fflush_r+0x10>
 8007a8a:	2500      	movs	r5, #0
 8007a8c:	4628      	mov	r0, r5
 8007a8e:	bd38      	pop	{r3, r4, r5, pc}
 8007a90:	b118      	cbz	r0, 8007a9a <_fflush_r+0x1a>
 8007a92:	6a03      	ldr	r3, [r0, #32]
 8007a94:	b90b      	cbnz	r3, 8007a9a <_fflush_r+0x1a>
 8007a96:	f7ff f9d3 	bl	8006e40 <__sinit>
 8007a9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d0f3      	beq.n	8007a8a <_fflush_r+0xa>
 8007aa2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007aa4:	07d0      	lsls	r0, r2, #31
 8007aa6:	d404      	bmi.n	8007ab2 <_fflush_r+0x32>
 8007aa8:	0599      	lsls	r1, r3, #22
 8007aaa:	d402      	bmi.n	8007ab2 <_fflush_r+0x32>
 8007aac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007aae:	f7ff fb7c 	bl	80071aa <__retarget_lock_acquire_recursive>
 8007ab2:	4628      	mov	r0, r5
 8007ab4:	4621      	mov	r1, r4
 8007ab6:	f7ff ff5d 	bl	8007974 <__sflush_r>
 8007aba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007abc:	07da      	lsls	r2, r3, #31
 8007abe:	4605      	mov	r5, r0
 8007ac0:	d4e4      	bmi.n	8007a8c <_fflush_r+0xc>
 8007ac2:	89a3      	ldrh	r3, [r4, #12]
 8007ac4:	059b      	lsls	r3, r3, #22
 8007ac6:	d4e1      	bmi.n	8007a8c <_fflush_r+0xc>
 8007ac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007aca:	f7ff fb6f 	bl	80071ac <__retarget_lock_release_recursive>
 8007ace:	e7dd      	b.n	8007a8c <_fflush_r+0xc>

08007ad0 <__swhatbuf_r>:
 8007ad0:	b570      	push	{r4, r5, r6, lr}
 8007ad2:	460c      	mov	r4, r1
 8007ad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ad8:	2900      	cmp	r1, #0
 8007ada:	b096      	sub	sp, #88	; 0x58
 8007adc:	4615      	mov	r5, r2
 8007ade:	461e      	mov	r6, r3
 8007ae0:	da0d      	bge.n	8007afe <__swhatbuf_r+0x2e>
 8007ae2:	89a3      	ldrh	r3, [r4, #12]
 8007ae4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007ae8:	f04f 0100 	mov.w	r1, #0
 8007aec:	bf0c      	ite	eq
 8007aee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007af2:	2340      	movne	r3, #64	; 0x40
 8007af4:	2000      	movs	r0, #0
 8007af6:	6031      	str	r1, [r6, #0]
 8007af8:	602b      	str	r3, [r5, #0]
 8007afa:	b016      	add	sp, #88	; 0x58
 8007afc:	bd70      	pop	{r4, r5, r6, pc}
 8007afe:	466a      	mov	r2, sp
 8007b00:	f000 f8de 	bl	8007cc0 <_fstat_r>
 8007b04:	2800      	cmp	r0, #0
 8007b06:	dbec      	blt.n	8007ae2 <__swhatbuf_r+0x12>
 8007b08:	9901      	ldr	r1, [sp, #4]
 8007b0a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007b0e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007b12:	4259      	negs	r1, r3
 8007b14:	4159      	adcs	r1, r3
 8007b16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b1a:	e7eb      	b.n	8007af4 <__swhatbuf_r+0x24>

08007b1c <__smakebuf_r>:
 8007b1c:	898b      	ldrh	r3, [r1, #12]
 8007b1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b20:	079d      	lsls	r5, r3, #30
 8007b22:	4606      	mov	r6, r0
 8007b24:	460c      	mov	r4, r1
 8007b26:	d507      	bpl.n	8007b38 <__smakebuf_r+0x1c>
 8007b28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007b2c:	6023      	str	r3, [r4, #0]
 8007b2e:	6123      	str	r3, [r4, #16]
 8007b30:	2301      	movs	r3, #1
 8007b32:	6163      	str	r3, [r4, #20]
 8007b34:	b002      	add	sp, #8
 8007b36:	bd70      	pop	{r4, r5, r6, pc}
 8007b38:	ab01      	add	r3, sp, #4
 8007b3a:	466a      	mov	r2, sp
 8007b3c:	f7ff ffc8 	bl	8007ad0 <__swhatbuf_r>
 8007b40:	9900      	ldr	r1, [sp, #0]
 8007b42:	4605      	mov	r5, r0
 8007b44:	4630      	mov	r0, r6
 8007b46:	f7ff fbb5 	bl	80072b4 <_malloc_r>
 8007b4a:	b948      	cbnz	r0, 8007b60 <__smakebuf_r+0x44>
 8007b4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b50:	059a      	lsls	r2, r3, #22
 8007b52:	d4ef      	bmi.n	8007b34 <__smakebuf_r+0x18>
 8007b54:	f023 0303 	bic.w	r3, r3, #3
 8007b58:	f043 0302 	orr.w	r3, r3, #2
 8007b5c:	81a3      	strh	r3, [r4, #12]
 8007b5e:	e7e3      	b.n	8007b28 <__smakebuf_r+0xc>
 8007b60:	89a3      	ldrh	r3, [r4, #12]
 8007b62:	6020      	str	r0, [r4, #0]
 8007b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b68:	81a3      	strh	r3, [r4, #12]
 8007b6a:	9b00      	ldr	r3, [sp, #0]
 8007b6c:	6163      	str	r3, [r4, #20]
 8007b6e:	9b01      	ldr	r3, [sp, #4]
 8007b70:	6120      	str	r0, [r4, #16]
 8007b72:	b15b      	cbz	r3, 8007b8c <__smakebuf_r+0x70>
 8007b74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b78:	4630      	mov	r0, r6
 8007b7a:	f000 f8b3 	bl	8007ce4 <_isatty_r>
 8007b7e:	b128      	cbz	r0, 8007b8c <__smakebuf_r+0x70>
 8007b80:	89a3      	ldrh	r3, [r4, #12]
 8007b82:	f023 0303 	bic.w	r3, r3, #3
 8007b86:	f043 0301 	orr.w	r3, r3, #1
 8007b8a:	81a3      	strh	r3, [r4, #12]
 8007b8c:	89a3      	ldrh	r3, [r4, #12]
 8007b8e:	431d      	orrs	r5, r3
 8007b90:	81a5      	strh	r5, [r4, #12]
 8007b92:	e7cf      	b.n	8007b34 <__smakebuf_r+0x18>

08007b94 <__swbuf_r>:
 8007b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b96:	460e      	mov	r6, r1
 8007b98:	4614      	mov	r4, r2
 8007b9a:	4605      	mov	r5, r0
 8007b9c:	b118      	cbz	r0, 8007ba6 <__swbuf_r+0x12>
 8007b9e:	6a03      	ldr	r3, [r0, #32]
 8007ba0:	b90b      	cbnz	r3, 8007ba6 <__swbuf_r+0x12>
 8007ba2:	f7ff f94d 	bl	8006e40 <__sinit>
 8007ba6:	69a3      	ldr	r3, [r4, #24]
 8007ba8:	60a3      	str	r3, [r4, #8]
 8007baa:	89a3      	ldrh	r3, [r4, #12]
 8007bac:	071a      	lsls	r2, r3, #28
 8007bae:	d525      	bpl.n	8007bfc <__swbuf_r+0x68>
 8007bb0:	6923      	ldr	r3, [r4, #16]
 8007bb2:	b31b      	cbz	r3, 8007bfc <__swbuf_r+0x68>
 8007bb4:	6823      	ldr	r3, [r4, #0]
 8007bb6:	6922      	ldr	r2, [r4, #16]
 8007bb8:	1a98      	subs	r0, r3, r2
 8007bba:	6963      	ldr	r3, [r4, #20]
 8007bbc:	b2f6      	uxtb	r6, r6
 8007bbe:	4283      	cmp	r3, r0
 8007bc0:	4637      	mov	r7, r6
 8007bc2:	dc04      	bgt.n	8007bce <__swbuf_r+0x3a>
 8007bc4:	4621      	mov	r1, r4
 8007bc6:	4628      	mov	r0, r5
 8007bc8:	f7ff ff5a 	bl	8007a80 <_fflush_r>
 8007bcc:	b9e0      	cbnz	r0, 8007c08 <__swbuf_r+0x74>
 8007bce:	68a3      	ldr	r3, [r4, #8]
 8007bd0:	3b01      	subs	r3, #1
 8007bd2:	60a3      	str	r3, [r4, #8]
 8007bd4:	6823      	ldr	r3, [r4, #0]
 8007bd6:	1c5a      	adds	r2, r3, #1
 8007bd8:	6022      	str	r2, [r4, #0]
 8007bda:	701e      	strb	r6, [r3, #0]
 8007bdc:	6962      	ldr	r2, [r4, #20]
 8007bde:	1c43      	adds	r3, r0, #1
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d004      	beq.n	8007bee <__swbuf_r+0x5a>
 8007be4:	89a3      	ldrh	r3, [r4, #12]
 8007be6:	07db      	lsls	r3, r3, #31
 8007be8:	d506      	bpl.n	8007bf8 <__swbuf_r+0x64>
 8007bea:	2e0a      	cmp	r6, #10
 8007bec:	d104      	bne.n	8007bf8 <__swbuf_r+0x64>
 8007bee:	4621      	mov	r1, r4
 8007bf0:	4628      	mov	r0, r5
 8007bf2:	f7ff ff45 	bl	8007a80 <_fflush_r>
 8007bf6:	b938      	cbnz	r0, 8007c08 <__swbuf_r+0x74>
 8007bf8:	4638      	mov	r0, r7
 8007bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bfc:	4621      	mov	r1, r4
 8007bfe:	4628      	mov	r0, r5
 8007c00:	f000 f806 	bl	8007c10 <__swsetup_r>
 8007c04:	2800      	cmp	r0, #0
 8007c06:	d0d5      	beq.n	8007bb4 <__swbuf_r+0x20>
 8007c08:	f04f 37ff 	mov.w	r7, #4294967295
 8007c0c:	e7f4      	b.n	8007bf8 <__swbuf_r+0x64>
	...

08007c10 <__swsetup_r>:
 8007c10:	b538      	push	{r3, r4, r5, lr}
 8007c12:	4b2a      	ldr	r3, [pc, #168]	; (8007cbc <__swsetup_r+0xac>)
 8007c14:	4605      	mov	r5, r0
 8007c16:	6818      	ldr	r0, [r3, #0]
 8007c18:	460c      	mov	r4, r1
 8007c1a:	b118      	cbz	r0, 8007c24 <__swsetup_r+0x14>
 8007c1c:	6a03      	ldr	r3, [r0, #32]
 8007c1e:	b90b      	cbnz	r3, 8007c24 <__swsetup_r+0x14>
 8007c20:	f7ff f90e 	bl	8006e40 <__sinit>
 8007c24:	89a3      	ldrh	r3, [r4, #12]
 8007c26:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c2a:	0718      	lsls	r0, r3, #28
 8007c2c:	d422      	bmi.n	8007c74 <__swsetup_r+0x64>
 8007c2e:	06d9      	lsls	r1, r3, #27
 8007c30:	d407      	bmi.n	8007c42 <__swsetup_r+0x32>
 8007c32:	2309      	movs	r3, #9
 8007c34:	602b      	str	r3, [r5, #0]
 8007c36:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007c3a:	81a3      	strh	r3, [r4, #12]
 8007c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c40:	e034      	b.n	8007cac <__swsetup_r+0x9c>
 8007c42:	0758      	lsls	r0, r3, #29
 8007c44:	d512      	bpl.n	8007c6c <__swsetup_r+0x5c>
 8007c46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c48:	b141      	cbz	r1, 8007c5c <__swsetup_r+0x4c>
 8007c4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c4e:	4299      	cmp	r1, r3
 8007c50:	d002      	beq.n	8007c58 <__swsetup_r+0x48>
 8007c52:	4628      	mov	r0, r5
 8007c54:	f7ff faba 	bl	80071cc <_free_r>
 8007c58:	2300      	movs	r3, #0
 8007c5a:	6363      	str	r3, [r4, #52]	; 0x34
 8007c5c:	89a3      	ldrh	r3, [r4, #12]
 8007c5e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007c62:	81a3      	strh	r3, [r4, #12]
 8007c64:	2300      	movs	r3, #0
 8007c66:	6063      	str	r3, [r4, #4]
 8007c68:	6923      	ldr	r3, [r4, #16]
 8007c6a:	6023      	str	r3, [r4, #0]
 8007c6c:	89a3      	ldrh	r3, [r4, #12]
 8007c6e:	f043 0308 	orr.w	r3, r3, #8
 8007c72:	81a3      	strh	r3, [r4, #12]
 8007c74:	6923      	ldr	r3, [r4, #16]
 8007c76:	b94b      	cbnz	r3, 8007c8c <__swsetup_r+0x7c>
 8007c78:	89a3      	ldrh	r3, [r4, #12]
 8007c7a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007c7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c82:	d003      	beq.n	8007c8c <__swsetup_r+0x7c>
 8007c84:	4621      	mov	r1, r4
 8007c86:	4628      	mov	r0, r5
 8007c88:	f7ff ff48 	bl	8007b1c <__smakebuf_r>
 8007c8c:	89a0      	ldrh	r0, [r4, #12]
 8007c8e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c92:	f010 0301 	ands.w	r3, r0, #1
 8007c96:	d00a      	beq.n	8007cae <__swsetup_r+0x9e>
 8007c98:	2300      	movs	r3, #0
 8007c9a:	60a3      	str	r3, [r4, #8]
 8007c9c:	6963      	ldr	r3, [r4, #20]
 8007c9e:	425b      	negs	r3, r3
 8007ca0:	61a3      	str	r3, [r4, #24]
 8007ca2:	6923      	ldr	r3, [r4, #16]
 8007ca4:	b943      	cbnz	r3, 8007cb8 <__swsetup_r+0xa8>
 8007ca6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007caa:	d1c4      	bne.n	8007c36 <__swsetup_r+0x26>
 8007cac:	bd38      	pop	{r3, r4, r5, pc}
 8007cae:	0781      	lsls	r1, r0, #30
 8007cb0:	bf58      	it	pl
 8007cb2:	6963      	ldrpl	r3, [r4, #20]
 8007cb4:	60a3      	str	r3, [r4, #8]
 8007cb6:	e7f4      	b.n	8007ca2 <__swsetup_r+0x92>
 8007cb8:	2000      	movs	r0, #0
 8007cba:	e7f7      	b.n	8007cac <__swsetup_r+0x9c>
 8007cbc:	2000007c 	.word	0x2000007c

08007cc0 <_fstat_r>:
 8007cc0:	b538      	push	{r3, r4, r5, lr}
 8007cc2:	4d07      	ldr	r5, [pc, #28]	; (8007ce0 <_fstat_r+0x20>)
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	4604      	mov	r4, r0
 8007cc8:	4608      	mov	r0, r1
 8007cca:	4611      	mov	r1, r2
 8007ccc:	602b      	str	r3, [r5, #0]
 8007cce:	f7fb fc5e 	bl	800358e <_fstat>
 8007cd2:	1c43      	adds	r3, r0, #1
 8007cd4:	d102      	bne.n	8007cdc <_fstat_r+0x1c>
 8007cd6:	682b      	ldr	r3, [r5, #0]
 8007cd8:	b103      	cbz	r3, 8007cdc <_fstat_r+0x1c>
 8007cda:	6023      	str	r3, [r4, #0]
 8007cdc:	bd38      	pop	{r3, r4, r5, pc}
 8007cde:	bf00      	nop
 8007ce0:	20005008 	.word	0x20005008

08007ce4 <_isatty_r>:
 8007ce4:	b538      	push	{r3, r4, r5, lr}
 8007ce6:	4d06      	ldr	r5, [pc, #24]	; (8007d00 <_isatty_r+0x1c>)
 8007ce8:	2300      	movs	r3, #0
 8007cea:	4604      	mov	r4, r0
 8007cec:	4608      	mov	r0, r1
 8007cee:	602b      	str	r3, [r5, #0]
 8007cf0:	f7fb fc4e 	bl	8003590 <_isatty>
 8007cf4:	1c43      	adds	r3, r0, #1
 8007cf6:	d102      	bne.n	8007cfe <_isatty_r+0x1a>
 8007cf8:	682b      	ldr	r3, [r5, #0]
 8007cfa:	b103      	cbz	r3, 8007cfe <_isatty_r+0x1a>
 8007cfc:	6023      	str	r3, [r4, #0]
 8007cfe:	bd38      	pop	{r3, r4, r5, pc}
 8007d00:	20005008 	.word	0x20005008

08007d04 <_sbrk_r>:
 8007d04:	b538      	push	{r3, r4, r5, lr}
 8007d06:	4d06      	ldr	r5, [pc, #24]	; (8007d20 <_sbrk_r+0x1c>)
 8007d08:	2300      	movs	r3, #0
 8007d0a:	4604      	mov	r4, r0
 8007d0c:	4608      	mov	r0, r1
 8007d0e:	602b      	str	r3, [r5, #0]
 8007d10:	f000 f810 	bl	8007d34 <_sbrk>
 8007d14:	1c43      	adds	r3, r0, #1
 8007d16:	d102      	bne.n	8007d1e <_sbrk_r+0x1a>
 8007d18:	682b      	ldr	r3, [r5, #0]
 8007d1a:	b103      	cbz	r3, 8007d1e <_sbrk_r+0x1a>
 8007d1c:	6023      	str	r3, [r4, #0]
 8007d1e:	bd38      	pop	{r3, r4, r5, pc}
 8007d20:	20005008 	.word	0x20005008

08007d24 <_close>:
 8007d24:	4b02      	ldr	r3, [pc, #8]	; (8007d30 <_close+0xc>)
 8007d26:	2258      	movs	r2, #88	; 0x58
 8007d28:	601a      	str	r2, [r3, #0]
 8007d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d2e:	4770      	bx	lr
 8007d30:	20005008 	.word	0x20005008

08007d34 <_sbrk>:
 8007d34:	4a04      	ldr	r2, [pc, #16]	; (8007d48 <_sbrk+0x14>)
 8007d36:	6811      	ldr	r1, [r2, #0]
 8007d38:	4603      	mov	r3, r0
 8007d3a:	b909      	cbnz	r1, 8007d40 <_sbrk+0xc>
 8007d3c:	4903      	ldr	r1, [pc, #12]	; (8007d4c <_sbrk+0x18>)
 8007d3e:	6011      	str	r1, [r2, #0]
 8007d40:	6810      	ldr	r0, [r2, #0]
 8007d42:	4403      	add	r3, r0
 8007d44:	6013      	str	r3, [r2, #0]
 8007d46:	4770      	bx	lr
 8007d48:	20005018 	.word	0x20005018
 8007d4c:	20005020 	.word	0x20005020

08007d50 <_init>:
 8007d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d52:	bf00      	nop
 8007d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d56:	bc08      	pop	{r3}
 8007d58:	469e      	mov	lr, r3
 8007d5a:	4770      	bx	lr

08007d5c <_fini>:
 8007d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d5e:	bf00      	nop
 8007d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d62:	bc08      	pop	{r3}
 8007d64:	469e      	mov	lr, r3
 8007d66:	4770      	bx	lr
