
Final_Project_ver3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cda4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000023a0  0800cfa8  0800cfa8  0001cfa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f348  0800f348  0002027c  2**0
                  CONTENTS
  4 .ARM          00000008  0800f348  0800f348  0001f348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f350  0800f350  0002027c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f350  0800f350  0001f350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f354  0800f354  0001f354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000027c  20000000  0800f358  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005308  20000280  0800f5d4  00020280  2**3
                  ALLOC
 10 ._user_heap_stack 00000400  20005588  0800f5d4  00025588  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002027c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202aa  2**0
                  CONTENTS, READONLY
 13 .debug_info   00037c47  00000000  00000000  000202ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005e88  00000000  00000000  00057f34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0001971b  00000000  00000000  0005ddbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002230  00000000  00000000  000774d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001b6e  00000000  00000000  00079708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00033f1d  00000000  00000000  0007b276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000394d3  00000000  00000000  000af193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001398a7  00000000  00000000  000e8666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007854  00000000  00000000  00221f10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  00229764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000280 	.word	0x20000280
 800021c:	00000000 	.word	0x00000000
 8000220:	0800cf8c 	.word	0x0800cf8c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000284 	.word	0x20000284
 800023c:	0800cf8c 	.word	0x0800cf8c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <NT35510_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t NT35510_Init(uint32_t ColorCoding, uint32_t orientation)
{
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	b0b1      	sub	sp, #196	; 0xc4
 80005f0:	4604      	mov	r4, r0
 80005f2:	460d      	mov	r5, r1
  NT35510_IO_Delay(120);
 80005f4:	2078      	movs	r0, #120	; 0x78
 80005f6:	f000 f971 	bl	80008dc <NT35510_IO_Delay>

/* ************************************************************************** */
/* Proprietary Initialization                                                 */
/* ************************************************************************** */
  const uint8_t nt35510_reg[]   = {0x55, 0xAA, 0x52, 0x08, 0x01, 0xF0};
 80005fa:	4ba9      	ldr	r3, [pc, #676]	; (80008a0 <NT35510_Init+0x2b4>)
 80005fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000600:	902e      	str	r0, [sp, #184]	; 0xb8
 8000602:	f8ad 10bc 	strh.w	r1, [sp, #188]	; 0xbc
  const uint8_t nt35510_reg1[]  = {0x03, 0x03, 0x03, 0xB0};
 8000606:	4ba7      	ldr	r3, [pc, #668]	; (80008a4 <NT35510_Init+0x2b8>)
 8000608:	932d      	str	r3, [sp, #180]	; 0xb4
  const uint8_t nt35510_reg2[]  = {0x46, 0x46, 0x46, 0xB6};
 800060a:	4ba7      	ldr	r3, [pc, #668]	; (80008a8 <NT35510_Init+0x2bc>)
 800060c:	932c      	str	r3, [sp, #176]	; 0xb0
  const uint8_t nt35510_reg3[]  = {0x03, 0x03, 0x03, 0xB1};
 800060e:	4ba7      	ldr	r3, [pc, #668]	; (80008ac <NT35510_Init+0x2c0>)
 8000610:	932b      	str	r3, [sp, #172]	; 0xac
  const uint8_t nt35510_reg4[]  = {0x36, 0x36, 0x36, 0xB7};
 8000612:	4ba7      	ldr	r3, [pc, #668]	; (80008b0 <NT35510_Init+0x2c4>)
 8000614:	932a      	str	r3, [sp, #168]	; 0xa8
  const uint8_t nt35510_reg5[]  = {0x00, 0x00, 0x02, 0xB2};
 8000616:	4ba7      	ldr	r3, [pc, #668]	; (80008b4 <NT35510_Init+0x2c8>)
 8000618:	9329      	str	r3, [sp, #164]	; 0xa4
  const uint8_t nt35510_reg6[]  = {0x26, 0x26, 0x26, 0xB8};
 800061a:	4ba7      	ldr	r3, [pc, #668]	; (80008b8 <NT35510_Init+0x2cc>)
 800061c:	9328      	str	r3, [sp, #160]	; 0xa0
  const uint8_t nt35510_reg7[]  = {0xBF, 0x01};
 800061e:	f240 13bf 	movw	r3, #447	; 0x1bf
 8000622:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
  const uint8_t nt35510_reg8[]  = {0x09, 0x09, 0x09, 0xB3};
 8000626:	4ba5      	ldr	r3, [pc, #660]	; (80008bc <NT35510_Init+0x2d0>)
 8000628:	9326      	str	r3, [sp, #152]	; 0x98
  const uint8_t nt35510_reg9[]  = {0x36, 0x36, 0x36, 0xB9};
 800062a:	4ba5      	ldr	r3, [pc, #660]	; (80008c0 <NT35510_Init+0x2d4>)
 800062c:	9325      	str	r3, [sp, #148]	; 0x94
  const uint8_t nt35510_reg10[] = {0x08, 0x08, 0x08, 0xB5};
 800062e:	4ba5      	ldr	r3, [pc, #660]	; (80008c4 <NT35510_Init+0x2d8>)
 8000630:	9324      	str	r3, [sp, #144]	; 0x90
  const uint8_t nt35510_reg12[] = {0x26, 0x26, 0x26, 0xBA};
 8000632:	4ba5      	ldr	r3, [pc, #660]	; (80008c8 <NT35510_Init+0x2dc>)
 8000634:	9323      	str	r3, [sp, #140]	; 0x8c
  const uint8_t nt35510_reg13[] = {0x00, 0x80, 0x00, 0xBC};
 8000636:	4ba5      	ldr	r3, [pc, #660]	; (80008cc <NT35510_Init+0x2e0>)
 8000638:	9322      	str	r3, [sp, #136]	; 0x88
  const uint8_t nt35510_reg14[] = {0x00, 0x80, 0x00, 0xBD};
 800063a:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 800063e:	9321      	str	r3, [sp, #132]	; 0x84
  const uint8_t nt35510_reg15[] = {0x00, 0x50, 0xBE};
 8000640:	4ba3      	ldr	r3, [pc, #652]	; (80008d0 <NT35510_Init+0x2e4>)
 8000642:	461a      	mov	r2, r3
 8000644:	f852 1b04 	ldr.w	r1, [r2], #4
 8000648:	f8ad 1080 	strh.w	r1, [sp, #128]	; 0x80
 800064c:	0c09      	lsrs	r1, r1, #16
 800064e:	f88d 1082 	strb.w	r1, [sp, #130]	; 0x82
  const uint8_t nt35510_reg16[] = {0x55, 0xAA, 0x52, 0x08, 0x00, 0xF0};
 8000652:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000656:	901e      	str	r0, [sp, #120]	; 0x78
 8000658:	f8ad 107c 	strh.w	r1, [sp, #124]	; 0x7c
  const uint8_t nt35510_reg17[] = {0xFC, 0x00, 0xB1};
 800065c:	68da      	ldr	r2, [r3, #12]
 800065e:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
 8000662:	0c12      	lsrs	r2, r2, #16
 8000664:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
  const uint8_t nt35510_reg18[] = {0xB6, 0x03};
 8000668:	f240 32b6 	movw	r2, #950	; 0x3b6
 800066c:	f8ad 2070 	strh.w	r2, [sp, #112]	; 0x70
  const uint8_t nt35510_reg19[] = {0xB5, 0x51};
 8000670:	f245 12b5 	movw	r2, #20917	; 0x51b5
 8000674:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
  const uint8_t nt35510_reg20[] = {0x00, 0x00, 0xB7};
 8000678:	691a      	ldr	r2, [r3, #16]
 800067a:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
 800067e:	0c12      	lsrs	r2, r2, #16
 8000680:	f88d 206a 	strb.w	r2, [sp, #106]	; 0x6a
  const uint8_t nt35510_reg21[] = {0x01, 0x02, 0x02, 0x02, 0xB8};
 8000684:	4a93      	ldr	r2, [pc, #588]	; (80008d4 <NT35510_Init+0x2e8>)
 8000686:	e892 0003 	ldmia.w	r2, {r0, r1}
 800068a:	9018      	str	r0, [sp, #96]	; 0x60
 800068c:	f88d 1064 	strb.w	r1, [sp, #100]	; 0x64
  const uint8_t nt35510_reg22[] = {0x00, 0x00, 0x00, 0xBC};
 8000690:	f04f 423c 	mov.w	r2, #3154116608	; 0xbc000000
 8000694:	9217      	str	r2, [sp, #92]	; 0x5c
  const uint8_t nt35510_reg23[] = {0x03, 0x00, 0x00, 0xCC};
 8000696:	4a90      	ldr	r2, [pc, #576]	; (80008d8 <NT35510_Init+0x2ec>)
 8000698:	9216      	str	r2, [sp, #88]	; 0x58
  const uint8_t nt35510_reg24[] = {0xBA, 0x01};
 800069a:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
 800069e:	f8ad 2054 	strh.w	r2, [sp, #84]	; 0x54
  const uint8_t nt35510_madctl_portrait[] = {NT35510_CMD_MADCTL ,0x00};
 80006a2:	2236      	movs	r2, #54	; 0x36
 80006a4:	f8ad 2050 	strh.w	r2, [sp, #80]	; 0x50
  const uint8_t nt35510_caset_portrait[] = {0x00, 0x00, 0x01, 0xDF ,NT35510_CMD_CASET};
 80006a8:	f103 0214 	add.w	r2, r3, #20
 80006ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006b0:	9012      	str	r0, [sp, #72]	; 0x48
 80006b2:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
  const uint8_t nt35510_raset_portrait[] = {0x00, 0x00, 0x03, 0x1F ,NT35510_CMD_RASET};
 80006b6:	f103 021c 	add.w	r2, r3, #28
 80006ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006be:	9010      	str	r0, [sp, #64]	; 0x40
 80006c0:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
  const uint8_t nt35510_madctl_landscape[] = {NT35510_CMD_MADCTL, 0x60};
 80006c4:	f246 0236 	movw	r2, #24630	; 0x6036
 80006c8:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
  const uint8_t nt35510_caset_landscape[] = {0x00, 0x00, 0x03, 0x1F ,NT35510_CMD_CASET};
 80006cc:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80006d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006d4:	900d      	str	r0, [sp, #52]	; 0x34
 80006d6:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  const uint8_t nt35510_raset_landscape[] = {0x00, 0x00, 0x01, 0xDF ,NT35510_CMD_RASET};
 80006da:	332c      	adds	r3, #44	; 0x2c
 80006dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006e0:	900b      	str	r0, [sp, #44]	; 0x2c
 80006e2:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
  const uint8_t nt35510_reg26[] = {NT35510_CMD_TEEON, 0x00};  /* Tear on */
 80006e6:	2335      	movs	r3, #53	; 0x35
 80006e8:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
  const uint8_t nt35510_reg27[] = {NT35510_CMD_SLPOUT, 0x00}; /* Sleep out */
 80006ec:	2311      	movs	r3, #17
 80006ee:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  const uint8_t nt35510_reg30[] = {NT35510_CMD_DISPON, 0x00};
 80006f2:	2329      	movs	r3, #41	; 0x29
 80006f4:	f8ad 3020 	strh.w	r3, [sp, #32]

  const uint8_t nt35510_reg31[] = {NT35510_CMD_WRDISBV, 0x7F};
 80006f8:	f647 7351 	movw	r3, #32593	; 0x7f51
 80006fc:	f8ad 301c 	strh.w	r3, [sp, #28]
  const uint8_t nt35510_reg32[] = {NT35510_CMD_WRCTRLD, 0x2C};
 8000700:	f642 4353 	movw	r3, #11347	; 0x2c53
 8000704:	f8ad 3018 	strh.w	r3, [sp, #24]
  const uint8_t nt35510_reg33[] = {NT35510_CMD_WRCABC, 0x02};
 8000708:	f240 2355 	movw	r3, #597	; 0x255
 800070c:	f8ad 3014 	strh.w	r3, [sp, #20]
  const uint8_t nt35510_reg34[] = {NT35510_CMD_WRCABCMB, 0xFF};
 8000710:	f64f 735e 	movw	r3, #65374	; 0xff5e
 8000714:	f8ad 3010 	strh.w	r3, [sp, #16]
  const uint8_t nt35510_reg35[] = {NT35510_CMD_RAMWR, 0x00};
 8000718:	232c      	movs	r3, #44	; 0x2c
 800071a:	f8ad 300c 	strh.w	r3, [sp, #12]
  const uint8_t nt35510_reg36[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB565};
 800071e:	f245 533a 	movw	r3, #21818	; 0x553a
 8000722:	f8ad 3008 	strh.w	r3, [sp, #8]
  const uint8_t nt35510_reg37[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB888};
 8000726:	f247 733a 	movw	r3, #30522	; 0x773a
 800072a:	f8ad 3004 	strh.w	r3, [sp, #4]

  DSI_IO_WriteCmd(5, (uint8_t *)nt35510_reg); /* LV2:  Page 1 enable */
 800072e:	a92e      	add	r1, sp, #184	; 0xb8
 8000730:	2005      	movs	r0, #5
 8000732:	f000 f9cf 	bl	8000ad4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg1);/* AVDD: 5.2V */
 8000736:	a92d      	add	r1, sp, #180	; 0xb4
 8000738:	2003      	movs	r0, #3
 800073a:	f000 f9cb 	bl	8000ad4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg2);/* AVDD: Ratio */
 800073e:	a92c      	add	r1, sp, #176	; 0xb0
 8000740:	2003      	movs	r0, #3
 8000742:	f000 f9c7 	bl	8000ad4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg3);/* AVEE: -5.2V */
 8000746:	a92b      	add	r1, sp, #172	; 0xac
 8000748:	2003      	movs	r0, #3
 800074a:	f000 f9c3 	bl	8000ad4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg4);/* AVEE: Ratio */
 800074e:	a92a      	add	r1, sp, #168	; 0xa8
 8000750:	2003      	movs	r0, #3
 8000752:	f000 f9bf 	bl	8000ad4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg5);/* VCL: -2.5V */
 8000756:	a929      	add	r1, sp, #164	; 0xa4
 8000758:	2003      	movs	r0, #3
 800075a:	f000 f9bb 	bl	8000ad4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg6);/* VCL: Ratio */
 800075e:	a928      	add	r1, sp, #160	; 0xa0
 8000760:	2003      	movs	r0, #3
 8000762:	f000 f9b7 	bl	8000ad4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg7);/* VGH: 15V (Free Pump) */
 8000766:	a927      	add	r1, sp, #156	; 0x9c
 8000768:	2001      	movs	r0, #1
 800076a:	f000 f9b3 	bl	8000ad4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg8);
 800076e:	a926      	add	r1, sp, #152	; 0x98
 8000770:	2003      	movs	r0, #3
 8000772:	f000 f9af 	bl	8000ad4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg9);/* VGH: Ratio */
 8000776:	a925      	add	r1, sp, #148	; 0x94
 8000778:	2003      	movs	r0, #3
 800077a:	f000 f9ab 	bl	8000ad4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg10);/* VGL_REG: -10V */
 800077e:	a924      	add	r1, sp, #144	; 0x90
 8000780:	2003      	movs	r0, #3
 8000782:	f000 f9a7 	bl	8000ad4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg12);/* VGLX: Ratio */
 8000786:	a923      	add	r1, sp, #140	; 0x8c
 8000788:	2003      	movs	r0, #3
 800078a:	f000 f9a3 	bl	8000ad4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg13);/* VGMP/VGSP: 4.5V/0V */
 800078e:	a922      	add	r1, sp, #136	; 0x88
 8000790:	2003      	movs	r0, #3
 8000792:	f000 f99f 	bl	8000ad4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg14);/* VGMN/VGSN:-4.5V/0V */
 8000796:	a921      	add	r1, sp, #132	; 0x84
 8000798:	2003      	movs	r0, #3
 800079a:	f000 f99b 	bl	8000ad4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg15);/* VCOM: -1.325V */
 800079e:	a920      	add	r1, sp, #128	; 0x80
 80007a0:	2002      	movs	r0, #2
 80007a2:	f000 f997 	bl	8000ad4 <DSI_IO_WriteCmd>

/* ************************************************************************** */
/* Proprietary DCS Initialization                                             */
/* ************************************************************************** */
  DSI_IO_WriteCmd(5, (uint8_t *)nt35510_reg16);/* LV2: Page 0 enable */
 80007a6:	a91e      	add	r1, sp, #120	; 0x78
 80007a8:	2005      	movs	r0, #5
 80007aa:	f000 f993 	bl	8000ad4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg17);/* Display control */
 80007ae:	a91d      	add	r1, sp, #116	; 0x74
 80007b0:	2002      	movs	r0, #2
 80007b2:	f000 f98f 	bl	8000ad4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg18);/* Src hold time */
 80007b6:	a91c      	add	r1, sp, #112	; 0x70
 80007b8:	2001      	movs	r0, #1
 80007ba:	f000 f98b 	bl	8000ad4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg19);
 80007be:	a91b      	add	r1, sp, #108	; 0x6c
 80007c0:	2001      	movs	r0, #1
 80007c2:	f000 f987 	bl	8000ad4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg20);/* Gate EQ control */
 80007c6:	a91a      	add	r1, sp, #104	; 0x68
 80007c8:	2002      	movs	r0, #2
 80007ca:	f000 f983 	bl	8000ad4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(4, (uint8_t *)nt35510_reg21);/* Src EQ control(Mode2) */
 80007ce:	a918      	add	r1, sp, #96	; 0x60
 80007d0:	2004      	movs	r0, #4
 80007d2:	f000 f97f 	bl	8000ad4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg22);/* Inv. mode(2-dot) */
 80007d6:	a917      	add	r1, sp, #92	; 0x5c
 80007d8:	2003      	movs	r0, #3
 80007da:	f000 f97b 	bl	8000ad4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg23);
 80007de:	a916      	add	r1, sp, #88	; 0x58
 80007e0:	2003      	movs	r0, #3
 80007e2:	f000 f977 	bl	8000ad4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg24);
 80007e6:	a915      	add	r1, sp, #84	; 0x54
 80007e8:	2001      	movs	r0, #1
 80007ea:	f000 f973 	bl	8000ad4 <DSI_IO_WriteCmd>
  /* Tear on */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg26);
 80007ee:	a90a      	add	r1, sp, #40	; 0x28
 80007f0:	2000      	movs	r0, #0
 80007f2:	f000 f96f 	bl	8000ad4 <DSI_IO_WriteCmd>
  /* Set Pixel color format to RGB888 */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg37);
 80007f6:	a901      	add	r1, sp, #4
 80007f8:	2000      	movs	r0, #0
 80007fa:	f000 f96b 	bl	8000ad4 <DSI_IO_WriteCmd>
/* ************************************************************************** */
/* Standard DCS Initialization                                                */
/* ************************************************************************** */

  /* Add a delay, otherwise MADCTL not taken */
  NT35510_IO_Delay(200);
 80007fe:	20c8      	movs	r0, #200	; 0xc8
 8000800:	f000 f86c 	bl	80008dc <NT35510_IO_Delay>

  /* Configure orientation */
  if(orientation == NT35510_ORIENTATION_PORTRAIT)
 8000804:	2d00      	cmp	r5, #0
 8000806:	d134      	bne.n	8000872 <NT35510_Init+0x286>
  {
    DSI_IO_WriteCmd(1, (uint8_t *)nt35510_madctl_portrait);
 8000808:	a914      	add	r1, sp, #80	; 0x50
 800080a:	2001      	movs	r0, #1
 800080c:	f000 f962 	bl	8000ad4 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_caset_portrait);
 8000810:	a912      	add	r1, sp, #72	; 0x48
 8000812:	2004      	movs	r0, #4
 8000814:	f000 f95e 	bl	8000ad4 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_raset_portrait);
 8000818:	a910      	add	r1, sp, #64	; 0x40
 800081a:	2004      	movs	r0, #4
 800081c:	f000 f95a 	bl	8000ad4 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(1, (uint8_t *)nt35510_madctl_landscape);
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_caset_landscape);
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_raset_landscape);
  }

  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg27);
 8000820:	a909      	add	r1, sp, #36	; 0x24
 8000822:	2000      	movs	r0, #0
 8000824:	f000 f956 	bl	8000ad4 <DSI_IO_WriteCmd>
  /* Wait for sleep out exit */
  NT35510_IO_Delay(120);
 8000828:	2078      	movs	r0, #120	; 0x78
 800082a:	f000 f857 	bl	80008dc <NT35510_IO_Delay>

  switch(ColorCoding)
 800082e:	b36c      	cbz	r4, 800088c <NT35510_Init+0x2a0>
 8000830:	2c02      	cmp	r4, #2
 8000832:	d130      	bne.n	8000896 <NT35510_Init+0x2aa>
  {
    case NT35510_FORMAT_RBG565 :
      /* Set Pixel color format to RGB565 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg36);
 8000834:	a902      	add	r1, sp, #8
 8000836:	2001      	movs	r0, #1
 8000838:	f000 f94c 	bl	8000ad4 <DSI_IO_WriteCmd>
      break;
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg31);
 800083c:	a907      	add	r1, sp, #28
 800083e:	2001      	movs	r0, #1
 8000840:	f000 f948 	bl	8000ad4 <DSI_IO_WriteCmd>
  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg32);
 8000844:	a906      	add	r1, sp, #24
 8000846:	2001      	movs	r0, #1
 8000848:	f000 f944 	bl	8000ad4 <DSI_IO_WriteCmd>
  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg33);
 800084c:	a905      	add	r1, sp, #20
 800084e:	2001      	movs	r0, #1
 8000850:	f000 f940 	bl	8000ad4 <DSI_IO_WriteCmd>
  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg34);
 8000854:	a904      	add	r1, sp, #16
 8000856:	2001      	movs	r0, #1
 8000858:	f000 f93c 	bl	8000ad4 <DSI_IO_WriteCmd>
  /** CABC : Content Adaptive Backlight Control section end << */

  /* Display on */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg30);
 800085c:	a908      	add	r1, sp, #32
 800085e:	2000      	movs	r0, #0
 8000860:	f000 f938 	bl	8000ad4 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg35);
 8000864:	a903      	add	r1, sp, #12
 8000866:	2000      	movs	r0, #0
 8000868:	f000 f934 	bl	8000ad4 <DSI_IO_WriteCmd>

  return 0;
}
 800086c:	2000      	movs	r0, #0
 800086e:	b031      	add	sp, #196	; 0xc4
 8000870:	bd30      	pop	{r4, r5, pc}
    DSI_IO_WriteCmd(1, (uint8_t *)nt35510_madctl_landscape);
 8000872:	a90f      	add	r1, sp, #60	; 0x3c
 8000874:	2001      	movs	r0, #1
 8000876:	f000 f92d 	bl	8000ad4 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_caset_landscape);
 800087a:	a90d      	add	r1, sp, #52	; 0x34
 800087c:	2004      	movs	r0, #4
 800087e:	f000 f929 	bl	8000ad4 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_raset_landscape);
 8000882:	a90b      	add	r1, sp, #44	; 0x2c
 8000884:	2004      	movs	r0, #4
 8000886:	f000 f925 	bl	8000ad4 <DSI_IO_WriteCmd>
 800088a:	e7c9      	b.n	8000820 <NT35510_Init+0x234>
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg37);
 800088c:	a901      	add	r1, sp, #4
 800088e:	2001      	movs	r0, #1
 8000890:	f000 f920 	bl	8000ad4 <DSI_IO_WriteCmd>
      break;
 8000894:	e7d2      	b.n	800083c <NT35510_Init+0x250>
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg37);
 8000896:	a901      	add	r1, sp, #4
 8000898:	2001      	movs	r0, #1
 800089a:	f000 f91b 	bl	8000ad4 <DSI_IO_WriteCmd>
      break;
 800089e:	e7cd      	b.n	800083c <NT35510_Init+0x250>
 80008a0:	0800ec0c 	.word	0x0800ec0c
 80008a4:	b0030303 	.word	0xb0030303
 80008a8:	b6464646 	.word	0xb6464646
 80008ac:	b1030303 	.word	0xb1030303
 80008b0:	b7363636 	.word	0xb7363636
 80008b4:	b2020000 	.word	0xb2020000
 80008b8:	b8262626 	.word	0xb8262626
 80008bc:	b3090909 	.word	0xb3090909
 80008c0:	b9363636 	.word	0xb9363636
 80008c4:	b5080808 	.word	0xb5080808
 80008c8:	ba262626 	.word	0xba262626
 80008cc:	bc008000 	.word	0xbc008000
 80008d0:	0800cfa8 	.word	0x0800cfa8
 80008d4:	0800ec14 	.word	0x0800ec14
 80008d8:	cc000003 	.word	0xcc000003

080008dc <NT35510_IO_Delay>:
/**
  * @brief  NT35510 delay
  * @param  Delay: Delay in ms
  */
void NT35510_IO_Delay(uint32_t Delay)
{
 80008dc:	b508      	push	{r3, lr}
  HAL_Delay(Delay);
 80008de:	f003 ffbf 	bl	8004860 <HAL_Delay>
}
 80008e2:	bd08      	pop	{r3, pc}

080008e4 <LCD_IO_GetID>:
    return 0;
  }
#else 
  return LCD_DSI_ID; 
#endif /* USE_LCD_HDMI */
}
 80008e4:	2011      	movs	r0, #17
 80008e6:	4770      	bx	lr

080008e8 <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 80008e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008ea:	b083      	sub	sp, #12
 80008ec:	4604      	mov	r4, r0
 80008ee:	460d      	mov	r5, r1
 80008f0:	4616      	mov	r6, r2
 80008f2:	461f      	mov	r7, r3
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 80008f4:	4811      	ldr	r0, [pc, #68]	; (800093c <LL_FillBuffer+0x54>)
 80008f6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80008fa:	6043      	str	r3, [r0, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 80008fc:	2300      	movs	r3, #0
 80008fe:	6083      	str	r3, [r0, #8]
  hdma2d_discovery.Init.OutputOffset = OffLine;
 8000900:	9b08      	ldr	r3, [sp, #32]
 8000902:	60c3      	str	r3, [r0, #12]

  hdma2d_discovery.Instance = DMA2D;
 8000904:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <LL_FillBuffer+0x58>)
 8000906:	6003      	str	r3, [r0, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 8000908:	f004 ffec 	bl	80058e4 <HAL_DMA2D_Init>
 800090c:	b108      	cbz	r0, 8000912 <LL_FillBuffer+0x2a>
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
      }
    }
  }
}
 800090e:	b003      	add	sp, #12
 8000910:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, LayerIndex) == HAL_OK)
 8000912:	4621      	mov	r1, r4
 8000914:	4809      	ldr	r0, [pc, #36]	; (800093c <LL_FillBuffer+0x54>)
 8000916:	f005 f8db 	bl	8005ad0 <HAL_DMA2D_ConfigLayer>
 800091a:	2800      	cmp	r0, #0
 800091c:	d1f7      	bne.n	800090e <LL_FillBuffer+0x26>
      if (HAL_DMA2D_Start(&hdma2d_discovery, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800091e:	9700      	str	r7, [sp, #0]
 8000920:	4633      	mov	r3, r6
 8000922:	462a      	mov	r2, r5
 8000924:	9909      	ldr	r1, [sp, #36]	; 0x24
 8000926:	4805      	ldr	r0, [pc, #20]	; (800093c <LL_FillBuffer+0x54>)
 8000928:	f005 f816 	bl	8005958 <HAL_DMA2D_Start>
 800092c:	2800      	cmp	r0, #0
 800092e:	d1ee      	bne.n	800090e <LL_FillBuffer+0x26>
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 8000930:	210a      	movs	r1, #10
 8000932:	4802      	ldr	r0, [pc, #8]	; (800093c <LL_FillBuffer+0x54>)
 8000934:	f005 f82c 	bl	8005990 <HAL_DMA2D_PollForTransfer>
}
 8000938:	e7e9      	b.n	800090e <LL_FillBuffer+0x26>
 800093a:	bf00      	nop
 800093c:	2000029c 	.word	0x2000029c
 8000940:	4002b000 	.word	0x4002b000

08000944 <BSP_LCD_Reset>:
{
 8000944:	b570      	push	{r4, r5, r6, lr}
 8000946:	b086      	sub	sp, #24
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000948:	4b14      	ldr	r3, [pc, #80]	; (800099c <BSP_LCD_Reset+0x58>)
 800094a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800094c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000950:	631a      	str	r2, [r3, #48]	; 0x30
 8000952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000954:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000958:	9300      	str	r3, [sp, #0]
 800095a:	9b00      	ldr	r3, [sp, #0]
    gpio_init_structure.Pin   = GPIO_PIN_15;
 800095c:	f44f 4500 	mov.w	r5, #32768	; 0x8000
 8000960:	9501      	str	r5, [sp, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000962:	2601      	movs	r6, #1
 8000964:	9602      	str	r6, [sp, #8]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 8000966:	9603      	str	r6, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8000968:	2303      	movs	r3, #3
 800096a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 800096c:	4c0c      	ldr	r4, [pc, #48]	; (80009a0 <BSP_LCD_Reset+0x5c>)
 800096e:	a901      	add	r1, sp, #4
 8000970:	4620      	mov	r0, r4
 8000972:	f005 fc2d 	bl	80061d0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	4629      	mov	r1, r5
 800097a:	4620      	mov	r0, r4
 800097c:	f005 fd2a 	bl	80063d4 <HAL_GPIO_WritePin>
    HAL_Delay(20); /* wait 20 ms */
 8000980:	2014      	movs	r0, #20
 8000982:	f003 ff6d 	bl	8004860 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 8000986:	4632      	mov	r2, r6
 8000988:	4629      	mov	r1, r5
 800098a:	4620      	mov	r0, r4
 800098c:	f005 fd22 	bl	80063d4 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000990:	200a      	movs	r0, #10
 8000992:	f003 ff65 	bl	8004860 <HAL_Delay>
}
 8000996:	b006      	add	sp, #24
 8000998:	bd70      	pop	{r4, r5, r6, pc}
 800099a:	bf00      	nop
 800099c:	40023800 	.word	0x40023800
 80009a0:	40022400 	.word	0x40022400

080009a4 <BSP_LCD_GetXSize>:
}
 80009a4:	4b01      	ldr	r3, [pc, #4]	; (80009ac <BSP_LCD_GetXSize+0x8>)
 80009a6:	6818      	ldr	r0, [r3, #0]
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	20000000 	.word	0x20000000

080009b0 <BSP_LCD_GetYSize>:
}
 80009b0:	4b01      	ldr	r3, [pc, #4]	; (80009b8 <BSP_LCD_GetYSize+0x8>)
 80009b2:	6858      	ldr	r0, [r3, #4]
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	20000000 	.word	0x20000000

080009bc <BSP_LCD_LayerDefaultInit>:
{
 80009bc:	b570      	push	{r4, r5, r6, lr}
 80009be:	b08e      	sub	sp, #56	; 0x38
 80009c0:	4604      	mov	r4, r0
 80009c2:	460e      	mov	r6, r1
  Layercfg.WindowX0 = 0;
 80009c4:	2500      	movs	r5, #0
 80009c6:	9501      	str	r5, [sp, #4]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80009c8:	f7ff ffec 	bl	80009a4 <BSP_LCD_GetXSize>
 80009cc:	9002      	str	r0, [sp, #8]
  Layercfg.WindowY0 = 0;
 80009ce:	9503      	str	r5, [sp, #12]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80009d0:	f7ff ffee 	bl	80009b0 <BSP_LCD_GetYSize>
 80009d4:	9004      	str	r0, [sp, #16]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80009d6:	9505      	str	r5, [sp, #20]
  Layercfg.FBStartAdress = FB_Address;
 80009d8:	960a      	str	r6, [sp, #40]	; 0x28
  Layercfg.Alpha = 255;
 80009da:	23ff      	movs	r3, #255	; 0xff
 80009dc:	9306      	str	r3, [sp, #24]
  Layercfg.Alpha0 = 0;
 80009de:	9507      	str	r5, [sp, #28]
  Layercfg.Backcolor.Blue = 0;
 80009e0:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
  Layercfg.Backcolor.Green = 0;
 80009e4:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  Layercfg.Backcolor.Red = 0;
 80009e8:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80009ec:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009f0:	9308      	str	r3, [sp, #32]
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80009f2:	2307      	movs	r3, #7
 80009f4:	9309      	str	r3, [sp, #36]	; 0x24
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80009f6:	f7ff ffd5 	bl	80009a4 <BSP_LCD_GetXSize>
 80009fa:	900b      	str	r0, [sp, #44]	; 0x2c
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80009fc:	f7ff ffd8 	bl	80009b0 <BSP_LCD_GetYSize>
 8000a00:	900c      	str	r0, [sp, #48]	; 0x30
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex); 
 8000a02:	4d0c      	ldr	r5, [pc, #48]	; (8000a34 <BSP_LCD_LayerDefaultInit+0x78>)
 8000a04:	4622      	mov	r2, r4
 8000a06:	a901      	add	r1, sp, #4
 8000a08:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8000a0c:	f006 fa58 	bl	8006ec0 <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8000a10:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8000a14:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8000a18:	f04f 32ff 	mov.w	r2, #4294967295
 8000a1c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  DrawProp[LayerIndex].pFont     = &Font24;
 8000a20:	4a05      	ldr	r2, [pc, #20]	; (8000a38 <BSP_LCD_LayerDefaultInit+0x7c>)
 8000a22:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8000a26:	461d      	mov	r5, r3
 8000a28:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8000a2c:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
}
 8000a30:	b00e      	add	sp, #56	; 0x38
 8000a32:	bd70      	pop	{r4, r5, r6, pc}
 8000a34:	2000029c 	.word	0x2000029c
 8000a38:	2000000c 	.word	0x2000000c

08000a3c <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
 8000a3c:	4b01      	ldr	r3, [pc, #4]	; (8000a44 <BSP_LCD_SelectLayer+0x8>)
 8000a3e:	6598      	str	r0, [r3, #88]	; 0x58
}
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	2000029c 	.word	0x2000029c

08000a48 <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = fonts;
 8000a48:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <BSP_LCD_SetFont+0x14>)
 8000a4a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a4c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000a50:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000a54:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
}
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	2000029c 	.word	0x2000029c

08000a60 <BSP_LCD_GetFont>:
  return DrawProp[ActiveLayer].pFont;
 8000a60:	4a04      	ldr	r2, [pc, #16]	; (8000a74 <BSP_LCD_GetFont+0x14>)
 8000a62:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8000a64:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000a68:	0099      	lsls	r1, r3, #2
 8000a6a:	440a      	add	r2, r1
}
 8000a6c:	f8d2 010c 	ldr.w	r0, [r2, #268]	; 0x10c
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	2000029c 	.word	0x2000029c

08000a78 <BSP_LCD_Clear>:
{
 8000a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	4605      	mov	r5, r0
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <BSP_LCD_Clear+0x34>)
 8000a80:	6d9e      	ldr	r6, [r3, #88]	; 0x58
 8000a82:	2234      	movs	r2, #52	; 0x34
 8000a84:	fb02 3306 	mla	r3, r2, r6, r3
 8000a88:	f8d3 70b8 	ldr.w	r7, [r3, #184]	; 0xb8
 8000a8c:	f7ff ff8a 	bl	80009a4 <BSP_LCD_GetXSize>
 8000a90:	4604      	mov	r4, r0
 8000a92:	f7ff ff8d 	bl	80009b0 <BSP_LCD_GetYSize>
 8000a96:	4603      	mov	r3, r0
 8000a98:	9501      	str	r5, [sp, #4]
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	9200      	str	r2, [sp, #0]
 8000a9e:	4622      	mov	r2, r4
 8000aa0:	4639      	mov	r1, r7
 8000aa2:	4630      	mov	r0, r6
 8000aa4:	f7ff ff20 	bl	80008e8 <LL_FillBuffer>
}
 8000aa8:	b003      	add	sp, #12
 8000aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aac:	2000029c 	.word	0x2000029c

08000ab0 <BSP_LCD_DisplayOn>:
{
 8000ab0:	b500      	push	{lr}
 8000ab2:	b083      	sub	sp, #12
    HAL_DSI_ShortWrite(&(hdsi_discovery),
 8000ab4:	4806      	ldr	r0, [pc, #24]	; (8000ad0 <BSP_LCD_DisplayOn+0x20>)
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	9300      	str	r3, [sp, #0]
 8000aba:	2329      	movs	r3, #41	; 0x29
 8000abc:	2215      	movs	r2, #21
 8000abe:	f8d0 111c 	ldr.w	r1, [r0, #284]	; 0x11c
 8000ac2:	f500 70c4 	add.w	r0, r0, #392	; 0x188
 8000ac6:	f005 fb10 	bl	80060ea <HAL_DSI_ShortWrite>
}
 8000aca:	b003      	add	sp, #12
 8000acc:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ad0:	2000029c 	.word	0x2000029c

08000ad4 <DSI_IO_WriteCmd>:
{
 8000ad4:	b500      	push	{lr}
 8000ad6:	b083      	sub	sp, #12
  if(NbrParams <= 1)
 8000ad8:	2801      	cmp	r0, #1
 8000ada:	d90b      	bls.n	8000af4 <DSI_IO_WriteCmd+0x20>
 8000adc:	4603      	mov	r3, r0
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8000ade:	5c0a      	ldrb	r2, [r1, r0]
 8000ae0:	9101      	str	r1, [sp, #4]
 8000ae2:	9200      	str	r2, [sp, #0]
 8000ae4:	2239      	movs	r2, #57	; 0x39
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	4807      	ldr	r0, [pc, #28]	; (8000b08 <DSI_IO_WriteCmd+0x34>)
 8000aea:	f005 fb11 	bl	8006110 <HAL_DSI_LongWrite>
}
 8000aee:	b003      	add	sp, #12
 8000af0:	f85d fb04 	ldr.w	pc, [sp], #4
   HAL_DSI_ShortWrite(&hdsi_discovery, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8000af4:	784b      	ldrb	r3, [r1, #1]
 8000af6:	9300      	str	r3, [sp, #0]
 8000af8:	780b      	ldrb	r3, [r1, #0]
 8000afa:	2215      	movs	r2, #21
 8000afc:	2100      	movs	r1, #0
 8000afe:	4802      	ldr	r0, [pc, #8]	; (8000b08 <DSI_IO_WriteCmd+0x34>)
 8000b00:	f005 faf3 	bl	80060ea <HAL_DSI_ShortWrite>
 8000b04:	e7f3      	b.n	8000aee <DSI_IO_WriteCmd+0x1a>
 8000b06:	bf00      	nop
 8000b08:	20000424 	.word	0x20000424

08000b0c <BSP_LCD_MspInit>:
{
 8000b0c:	b500      	push	{lr}
 8000b0e:	b085      	sub	sp, #20
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000b10:	4b27      	ldr	r3, [pc, #156]	; (8000bb0 <BSP_LCD_MspInit+0xa4>)
 8000b12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b14:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000b18:	645a      	str	r2, [r3, #68]	; 0x44
 8000b1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b1c:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8000b20:	9201      	str	r2, [sp, #4]
 8000b22:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_LTDC_FORCE_RESET();
 8000b24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b26:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000b2a:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 8000b2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b2e:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8000b34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b36:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000b3a:	631a      	str	r2, [r3, #48]	; 0x30
 8000b3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b3e:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8000b42:	9202      	str	r2, [sp, #8]
 8000b44:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_DMA2D_FORCE_RESET();
 8000b46:	691a      	ldr	r2, [r3, #16]
 8000b48:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000b4c:	611a      	str	r2, [r3, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 8000b4e:	691a      	ldr	r2, [r3, #16]
 8000b50:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000b54:	611a      	str	r2, [r3, #16]
  __HAL_RCC_DSI_CLK_ENABLE();
 8000b56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b58:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8000b5c:	645a      	str	r2, [r3, #68]	; 0x44
 8000b5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b60:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8000b64:	9203      	str	r2, [sp, #12]
 8000b66:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_DSI_FORCE_RESET();
 8000b68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b6a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8000b6e:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 8000b70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b72:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 8000b76:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2103      	movs	r1, #3
 8000b7c:	2058      	movs	r0, #88	; 0x58
 8000b7e:	f004 fb85 	bl	800528c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000b82:	2058      	movs	r0, #88	; 0x58
 8000b84:	f004 fbb8 	bl	80052f8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2103      	movs	r1, #3
 8000b8c:	205a      	movs	r0, #90	; 0x5a
 8000b8e:	f004 fb7d 	bl	800528c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000b92:	205a      	movs	r0, #90	; 0x5a
 8000b94:	f004 fbb0 	bl	80052f8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2103      	movs	r1, #3
 8000b9c:	2062      	movs	r0, #98	; 0x62
 8000b9e:	f004 fb75 	bl	800528c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8000ba2:	2062      	movs	r0, #98	; 0x62
 8000ba4:	f004 fba8 	bl	80052f8 <HAL_NVIC_EnableIRQ>
}
 8000ba8:	b005      	add	sp, #20
 8000baa:	f85d fb04 	ldr.w	pc, [sp], #4
 8000bae:	bf00      	nop
 8000bb0:	40023800 	.word	0x40023800

08000bb4 <BSP_LCD_InitEx>:
{
 8000bb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000bb8:	b085      	sub	sp, #20
 8000bba:	4606      	mov	r6, r0
  BSP_LCD_Reset();
 8000bbc:	f7ff fec2 	bl	8000944 <BSP_LCD_Reset>
  read_id = LCD_IO_GetID();
 8000bc0:	f7ff fe90 	bl	80008e4 <LCD_IO_GetID>
  if(read_id != LCD_DSI_ID)
 8000bc4:	2811      	cmp	r0, #17
 8000bc6:	d003      	beq.n	8000bd0 <BSP_LCD_InitEx+0x1c>
    return LCD_ERROR;  
 8000bc8:	2001      	movs	r0, #1
}
 8000bca:	b005      	add	sp, #20
 8000bcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  BSP_LCD_MspInit();
 8000bd0:	f7ff ff9c 	bl	8000b0c <BSP_LCD_MspInit>
  hdsi_discovery.Instance = DSI;
 8000bd4:	4c65      	ldr	r4, [pc, #404]	; (8000d6c <BSP_LCD_InitEx+0x1b8>)
 8000bd6:	4b66      	ldr	r3, [pc, #408]	; (8000d70 <BSP_LCD_InitEx+0x1bc>)
 8000bd8:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
  HAL_DSI_DeInit(&(hdsi_discovery));
 8000bdc:	f504 75c4 	add.w	r5, r4, #392	; 0x188
 8000be0:	4628      	mov	r0, r5
 8000be2:	f005 f8d8 	bl	8005d96 <HAL_DSI_DeInit>
  dsiPllInit.PLLNDIV  = 100;
 8000be6:	2364      	movs	r3, #100	; 0x64
 8000be8:	9301      	str	r3, [sp, #4]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 8000bea:	2305      	movs	r3, #5
 8000bec:	9302      	str	r3, [sp, #8]
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	9303      	str	r3, [sp, #12]
  hdsi_discovery.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 8000bf8:	2304      	movs	r3, #4
 8000bfa:	f8c4 3190 	str.w	r3, [r4, #400]	; 0x190
  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 8000bfe:	eb0d 0103 	add.w	r1, sp, r3
 8000c02:	4628      	mov	r0, r5
 8000c04:	f005 f800 	bl	8005c08 <HAL_DSI_Init>
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 8000c08:	2e00      	cmp	r6, #0
 8000c0a:	f040 80a7 	bne.w	8000d5c <BSP_LCD_InitEx+0x1a8>
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 8000c0e:	4b59      	ldr	r3, [pc, #356]	; (8000d74 <BSP_LCD_InitEx+0x1c0>)
 8000c10:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000c14:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 8000c16:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000c1a:	605a      	str	r2, [r3, #4]
  HACT = lcd_x_size;
 8000c1c:	4f55      	ldr	r7, [pc, #340]	; (8000d74 <BSP_LCD_InitEx+0x1c0>)
 8000c1e:	683b      	ldr	r3, [r7, #0]
  VACT = lcd_y_size;
 8000c20:	687a      	ldr	r2, [r7, #4]
  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 8000c22:	4c52      	ldr	r4, [pc, #328]	; (8000d6c <BSP_LCD_InitEx+0x1b8>)
 8000c24:	2500      	movs	r5, #0
 8000c26:	f8c4 511c 	str.w	r5, [r4, #284]	; 0x11c
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 8000c2a:	2105      	movs	r1, #5
 8000c2c:	f8c4 1120 	str.w	r1, [r4, #288]	; 0x120
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000c30:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8000c34:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 8000c38:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 8000c3c:	2102      	movs	r1, #2
 8000c3e:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
  hdsivideo_handle.NullPacketSize = 0xFFF;
 8000c42:	f640 71ff 	movw	r1, #4095	; 0xfff
 8000c46:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
  hdsivideo_handle.NumberOfChunks = 0;
 8000c4a:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 8000c4e:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz)/LcdClock;
 8000c52:	2104      	movs	r1, #4
 8000c54:	f8c4 1144 	str.w	r1, [r4, #324]	; 0x144
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 8000c58:	214d      	movs	r1, #77	; 0x4d
 8000c5a:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 8000c5e:	3346      	adds	r3, #70	; 0x46
 8000c60:	f24f 4124 	movw	r1, #62500	; 0xf424
 8000c64:	fb01 f303 	mul.w	r3, r1, r3
 8000c68:	4943      	ldr	r1, [pc, #268]	; (8000d78 <BSP_LCD_InitEx+0x1c4>)
 8000c6a:	fba1 1303 	umull	r1, r3, r1, r3
 8000c6e:	0b5b      	lsrs	r3, r3, #13
 8000c70:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
  hdsivideo_handle.VerticalSyncActive        = VSA;
 8000c74:	2378      	movs	r3, #120	; 0x78
 8000c76:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
  hdsivideo_handle.VerticalBackPorch         = VBP;
 8000c7a:	2396      	movs	r3, #150	; 0x96
 8000c7c:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 8000c80:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 8000c84:	f8c4 215c 	str.w	r2, [r4, #348]	; 0x15c
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 8000c88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c8c:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
  hdsivideo_handle.LPLargestPacketSize = 16;
 8000c90:	2310      	movs	r3, #16
 8000c92:	f8c4 3164 	str.w	r3, [r4, #356]	; 0x164
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 8000c96:	f8c4 5168 	str.w	r5, [r4, #360]	; 0x168
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 8000c9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c9e:	f8c4 316c 	str.w	r3, [r4, #364]	; 0x16c
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 8000ca2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca6:	f8c4 3170 	str.w	r3, [r4, #368]	; 0x170
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 8000caa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cae:	f8c4 3174 	str.w	r3, [r4, #372]	; 0x174
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 8000cb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cb6:	f8c4 3178 	str.w	r3, [r4, #376]	; 0x178
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 8000cba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cbe:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 8000cc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cc6:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 8000cca:	f504 798e 	add.w	r9, r4, #284	; 0x11c
 8000cce:	f504 78c4 	add.w	r8, r4, #392	; 0x188
 8000cd2:	4649      	mov	r1, r9
 8000cd4:	4640      	mov	r0, r8
 8000cd6:	f005 f8ad 	bl	8005e34 <HAL_DSI_ConfigVideoMode>
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 8000cda:	2301      	movs	r3, #1
 8000cdc:	6723      	str	r3, [r4, #112]	; 0x70
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 8000cde:	2323      	movs	r3, #35	; 0x23
 8000ce0:	67a3      	str	r3, [r4, #120]	; 0x78
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	f103 0223 	add.w	r2, r3, #35	; 0x23
 8000ce8:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 8000cec:	f103 0245 	add.w	r2, r3, #69	; 0x45
 8000cf0:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  hltdc_discovery.LayerCfg->ImageWidth  = lcd_x_size;
 8000cf4:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000cfe:	2308      	movs	r3, #8
 8000d00:	f8c4 31a4 	str.w	r3, [r4, #420]	; 0x1a4
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000d04:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000d08:	f8c4 31b8 	str.w	r3, [r4, #440]	; 0x1b8
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 8000d0c:	2307      	movs	r3, #7
 8000d0e:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000d12:	f8c4 51d0 	str.w	r5, [r4, #464]	; 0x1d0
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000d16:	f504 70d2 	add.w	r0, r4, #420	; 0x1a4
 8000d1a:	f006 fce1 	bl	80076e0 <HAL_RCCEx_PeriphCLKConfig>
  hltdc_discovery.Init.Backcolor.Blue = 0;
 8000d1e:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
  hltdc_discovery.Init.Backcolor.Green = 0;
 8000d22:	f884 5091 	strb.w	r5, [r4, #145]	; 0x91
  hltdc_discovery.Init.Backcolor.Red = 0;
 8000d26:	f884 5092 	strb.w	r5, [r4, #146]	; 0x92
  hltdc_discovery.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000d2a:	66e5      	str	r5, [r4, #108]	; 0x6c
  hltdc_discovery.Instance = LTDC;
 8000d2c:	4b13      	ldr	r3, [pc, #76]	; (8000d7c <BSP_LCD_InitEx+0x1c8>)
 8000d2e:	f844 3f5c 	str.w	r3, [r4, #92]!
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 8000d32:	4649      	mov	r1, r9
 8000d34:	4620      	mov	r0, r4
 8000d36:	f006 f8f7 	bl	8006f28 <HAL_LTDCEx_StructInitFromVideoConfig>
  HAL_LTDC_Init(&hltdc_discovery);
 8000d3a:	4620      	mov	r0, r4
 8000d3c:	f006 f846 	bl	8006dcc <HAL_LTDC_Init>
  HAL_DSI_Start(&hdsi_discovery);
 8000d40:	4640      	mov	r0, r8
 8000d42:	f005 f9ab 	bl	800609c <HAL_DSI_Start>
  BSP_SDRAM_Init();
 8000d46:	f000 f92f 	bl	8000fa8 <BSP_SDRAM_Init>
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8000d4a:	480d      	ldr	r0, [pc, #52]	; (8000d80 <BSP_LCD_InitEx+0x1cc>)
 8000d4c:	f7ff fe7c 	bl	8000a48 <BSP_LCD_SetFont>
  NT35510_Init(NT35510_FORMAT_RGB888, orientation);
 8000d50:	4631      	mov	r1, r6
 8000d52:	4628      	mov	r0, r5
 8000d54:	f7ff fc4a 	bl	80005ec <NT35510_Init>
  return LCD_OK; 
 8000d58:	4628      	mov	r0, r5
 8000d5a:	e736      	b.n	8000bca <BSP_LCD_InitEx+0x16>
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 8000d5c:	4b05      	ldr	r3, [pc, #20]	; (8000d74 <BSP_LCD_InitEx+0x1c0>)
 8000d5e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000d62:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 8000d64:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	e757      	b.n	8000c1c <BSP_LCD_InitEx+0x68>
 8000d6c:	2000029c 	.word	0x2000029c
 8000d70:	40016c00 	.word	0x40016c00
 8000d74:	20000000 	.word	0x20000000
 8000d78:	4c751ce3 	.word	0x4c751ce3
 8000d7c:	40016800 	.word	0x40016800
 8000d80:	2000000c 	.word	0x2000000c

08000d84 <BSP_LCD_Init>:
{
 8000d84:	b508      	push	{r3, lr}
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8000d86:	2001      	movs	r0, #1
 8000d88:	f7ff ff14 	bl	8000bb4 <BSP_LCD_InitEx>
}
 8000d8c:	bd08      	pop	{r3, pc}
	...

08000d90 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8000d90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d94:	b083      	sub	sp, #12
 8000d96:	4681      	mov	r9, r0
  __IO uint32_t tmpmrd = 0;
 8000d98:	f04f 0800 	mov.w	r8, #0
 8000d9c:	f8cd 8004 	str.w	r8, [sp, #4]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8000da0:	4c20      	ldr	r4, [pc, #128]	; (8000e24 <BSP_SDRAM_Initialization_sequence+0x94>)
 8000da2:	2601      	movs	r6, #1
 8000da4:	6026      	str	r6, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000da6:	2710      	movs	r7, #16
 8000da8:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 8000daa:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8000dac:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000db0:	19e5      	adds	r5, r4, r7
 8000db2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000db6:	4621      	mov	r1, r4
 8000db8:	4628      	mov	r0, r5
 8000dba:	f006 ffb2 	bl	8007d22 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8000dbe:	4630      	mov	r0, r6
 8000dc0:	f003 fd4e 	bl	8004860 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000dc8:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 8000dca:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8000dcc:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8000dd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dd4:	4621      	mov	r1, r4
 8000dd6:	4628      	mov	r0, r5
 8000dd8:	f006 ffa3 	bl	8007d22 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000de0:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 8;
 8000de2:	2308      	movs	r3, #8
 8000de4:	60a3      	str	r3, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8000de6:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000dea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dee:	4621      	mov	r1, r4
 8000df0:	4628      	mov	r0, r5
 8000df2:	f006 ff96 	bl	8007d22 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8000df6:	f44f 730c 	mov.w	r3, #560	; 0x230
 8000dfa:	9301      	str	r3, [sp, #4]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8000dfc:	2304      	movs	r3, #4
 8000dfe:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000e00:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 8000e02:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8000e04:	9b01      	ldr	r3, [sp, #4]
 8000e06:	60e3      	str	r3, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000e08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e0c:	4621      	mov	r1, r4
 8000e0e:	4628      	mov	r0, r5
 8000e10:	f006 ff87 	bl	8007d22 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8000e14:	4649      	mov	r1, r9
 8000e16:	4628      	mov	r0, r5
 8000e18:	f006 ffa4 	bl	8007d64 <HAL_SDRAM_ProgramRefreshRate>
}
 8000e1c:	b003      	add	sp, #12
 8000e1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e22:	bf00      	nop
 8000e24:	200004d0 	.word	0x200004d0

08000e28 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8000e28:	b570      	push	{r4, r5, r6, lr}
 8000e2a:	b08e      	sub	sp, #56	; 0x38
 8000e2c:	4606      	mov	r6, r0
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000e2e:	4b55      	ldr	r3, [pc, #340]	; (8000f84 <BSP_SDRAM_MspInit+0x15c>)
 8000e30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e32:	f042 0201 	orr.w	r2, r2, #1
 8000e36:	639a      	str	r2, [r3, #56]	; 0x38
 8000e38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e3a:	f002 0201 	and.w	r2, r2, #1
 8000e3e:	9201      	str	r2, [sp, #4]
 8000e40:	9a01      	ldr	r2, [sp, #4]
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8000e42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e44:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000e48:	631a      	str	r2, [r3, #48]	; 0x30
 8000e4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e4c:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8000e50:	9202      	str	r2, [sp, #8]
 8000e52:	9a02      	ldr	r2, [sp, #8]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e56:	f042 0208 	orr.w	r2, r2, #8
 8000e5a:	631a      	str	r2, [r3, #48]	; 0x30
 8000e5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e5e:	f002 0208 	and.w	r2, r2, #8
 8000e62:	9203      	str	r2, [sp, #12]
 8000e64:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e68:	f042 0210 	orr.w	r2, r2, #16
 8000e6c:	631a      	str	r2, [r3, #48]	; 0x30
 8000e6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e70:	f002 0210 	and.w	r2, r2, #16
 8000e74:	9204      	str	r2, [sp, #16]
 8000e76:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e7a:	f042 0220 	orr.w	r2, r2, #32
 8000e7e:	631a      	str	r2, [r3, #48]	; 0x30
 8000e80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e82:	f002 0220 	and.w	r2, r2, #32
 8000e86:	9205      	str	r2, [sp, #20]
 8000e88:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e90:	631a      	str	r2, [r3, #48]	; 0x30
 8000e92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e94:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000e98:	9206      	str	r2, [sp, #24]
 8000e9a:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000ea2:	631a      	str	r2, [r3, #48]	; 0x30
 8000ea4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ea6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000eaa:	9207      	str	r2, [sp, #28]
 8000eac:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000eae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000eb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000eb4:	631a      	str	r2, [r3, #48]	; 0x30
 8000eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ebc:	9308      	str	r3, [sp, #32]
 8000ebe:	9b08      	ldr	r3, [sp, #32]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	930a      	str	r3, [sp, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	930b      	str	r3, [sp, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8000ec8:	2503      	movs	r5, #3
 8000eca:	950c      	str	r5, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8000ecc:	230c      	movs	r3, #12
 8000ece:	930d      	str	r3, [sp, #52]	; 0x34
  
  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8000ed0:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000ed4:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;
 
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8000ed6:	a909      	add	r1, sp, #36	; 0x24
 8000ed8:	482b      	ldr	r0, [pc, #172]	; (8000f88 <BSP_SDRAM_MspInit+0x160>)
 8000eda:	f005 f979 	bl	80061d0 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8000ede:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000ee2:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
      
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8000ee4:	a909      	add	r1, sp, #36	; 0x24
 8000ee6:	4829      	ldr	r0, [pc, #164]	; (8000f8c <BSP_SDRAM_MspInit+0x164>)
 8000ee8:	f005 f972 	bl	80061d0 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8000eec:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000ef0:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
    
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8000ef2:	a909      	add	r1, sp, #36	; 0x24
 8000ef4:	4826      	ldr	r0, [pc, #152]	; (8000f90 <BSP_SDRAM_MspInit+0x168>)
 8000ef6:	f005 f96b 	bl	80061d0 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 8000efa:	f248 1337 	movw	r3, #33079	; 0x8137
 8000efe:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8000f00:	a909      	add	r1, sp, #36	; 0x24
 8000f02:	4824      	ldr	r0, [pc, #144]	; (8000f94 <BSP_SDRAM_MspInit+0x16c>)
 8000f04:	f005 f964 	bl	80061d0 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8000f08:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8000f0c:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8000f0e:	a909      	add	r1, sp, #36	; 0x24
 8000f10:	4821      	ldr	r0, [pc, #132]	; (8000f98 <BSP_SDRAM_MspInit+0x170>)
 8000f12:	f005 f95d 	bl	80061d0 <HAL_GPIO_Init>
  
  /* GPIOI configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8000f16:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8000f1a:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 8000f1c:	a909      	add	r1, sp, #36	; 0x24
 8000f1e:	481f      	ldr	r0, [pc, #124]	; (8000f9c <BSP_SDRAM_MspInit+0x174>)
 8000f20:	f005 f956 	bl	80061d0 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8000f24:	4b1e      	ldr	r3, [pc, #120]	; (8000fa0 <BSP_SDRAM_MspInit+0x178>)
 8000f26:	2400      	movs	r4, #0
 8000f28:	649c      	str	r4, [r3, #72]	; 0x48
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8000f2a:	2280      	movs	r2, #128	; 0x80
 8000f2c:	64da      	str	r2, [r3, #76]	; 0x4c
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8000f2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f32:	651a      	str	r2, [r3, #80]	; 0x50
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8000f34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f38:	655a      	str	r2, [r3, #84]	; 0x54
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f3a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f3e:	659a      	str	r2, [r3, #88]	; 0x58
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8000f40:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f44:	65da      	str	r2, [r3, #92]	; 0x5c
  dma_handle.Init.Mode                = DMA_NORMAL;
 8000f46:	661c      	str	r4, [r3, #96]	; 0x60
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8000f48:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f4c:	665a      	str	r2, [r3, #100]	; 0x64
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8000f4e:	669c      	str	r4, [r3, #104]	; 0x68
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8000f50:	66dd      	str	r5, [r3, #108]	; 0x6c
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8000f52:	671c      	str	r4, [r3, #112]	; 0x70
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8000f54:	675c      	str	r4, [r3, #116]	; 0x74
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8000f56:	461d      	mov	r5, r3
 8000f58:	4a12      	ldr	r2, [pc, #72]	; (8000fa4 <BSP_SDRAM_MspInit+0x17c>)
 8000f5a:	f845 2f44 	str.w	r2, [r5, #68]!
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8000f5e:	6335      	str	r5, [r6, #48]	; 0x30
 8000f60:	67de      	str	r6, [r3, #124]	; 0x7c
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8000f62:	4628      	mov	r0, r5
 8000f64:	f004 faba 	bl	80054dc <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8000f68:	4628      	mov	r0, r5
 8000f6a:	f004 fa51 	bl	8005410 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8000f6e:	4622      	mov	r2, r4
 8000f70:	210f      	movs	r1, #15
 8000f72:	2038      	movs	r0, #56	; 0x38
 8000f74:	f004 f98a 	bl	800528c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8000f78:	2038      	movs	r0, #56	; 0x38
 8000f7a:	f004 f9bd 	bl	80052f8 <HAL_NVIC_EnableIRQ>
}
 8000f7e:	b00e      	add	sp, #56	; 0x38
 8000f80:	bd70      	pop	{r4, r5, r6, pc}
 8000f82:	bf00      	nop
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40020c00 	.word	0x40020c00
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	40021400 	.word	0x40021400
 8000f94:	40021800 	.word	0x40021800
 8000f98:	40021c00 	.word	0x40021c00
 8000f9c:	40022000 	.word	0x40022000
 8000fa0:	200004d0 	.word	0x200004d0
 8000fa4:	40026410 	.word	0x40026410

08000fa8 <BSP_SDRAM_Init>:
{ 
 8000fa8:	b538      	push	{r3, r4, r5, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8000faa:	4c20      	ldr	r4, [pc, #128]	; (800102c <BSP_SDRAM_Init+0x84>)
 8000fac:	4b20      	ldr	r3, [pc, #128]	; (8001030 <BSP_SDRAM_Init+0x88>)
 8000fae:	6123      	str	r3, [r4, #16]
  Timing.LoadToActiveDelay    = 2;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
  Timing.ExitSelfRefreshDelay = 7;
 8000fb6:	2107      	movs	r1, #7
 8000fb8:	f8c4 10a8 	str.w	r1, [r4, #168]	; 0xa8
  Timing.SelfRefreshTime      = 4;
 8000fbc:	2204      	movs	r2, #4
 8000fbe:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
  Timing.RowCycleDelay        = 7;
 8000fc2:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
  Timing.WriteRecoveryTime    = 2;
 8000fc6:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
  Timing.RPDelay              = 2;
 8000fca:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
  Timing.RCDDelay             = 2;
 8000fce:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	6161      	str	r1, [r4, #20]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000fd6:	61a1      	str	r1, [r4, #24]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8000fd8:	61e2      	str	r2, [r4, #28]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8000fda:	2320      	movs	r3, #32
 8000fdc:	6223      	str	r3, [r4, #32]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000fde:	2340      	movs	r3, #64	; 0x40
 8000fe0:	6263      	str	r3, [r4, #36]	; 0x24
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8000fe2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000fe6:	62a3      	str	r3, [r4, #40]	; 0x28
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000fe8:	62e1      	str	r1, [r4, #44]	; 0x2c
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8000fea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fee:	6323      	str	r3, [r4, #48]	; 0x30
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8000ff0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff4:	6363      	str	r3, [r4, #52]	; 0x34
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8000ff6:	63a1      	str	r1, [r4, #56]	; 0x38
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8000ff8:	f104 0510 	add.w	r5, r4, #16
 8000ffc:	4628      	mov	r0, r5
 8000ffe:	f7ff ff13 	bl	8000e28 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8001002:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
 8001006:	4628      	mov	r0, r5
 8001008:	f006 fe6b 	bl	8007ce2 <HAL_SDRAM_Init>
 800100c:	b148      	cbz	r0, 8001022 <BSP_SDRAM_Init+0x7a>
    sdramstatus = SDRAM_ERROR;
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <BSP_SDRAM_Init+0x8c>)
 8001010:	2201      	movs	r2, #1
 8001012:	701a      	strb	r2, [r3, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8001014:	f240 6003 	movw	r0, #1539	; 0x603
 8001018:	f7ff feba 	bl	8000d90 <BSP_SDRAM_Initialization_sequence>
}
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <BSP_SDRAM_Init+0x8c>)
 800101e:	7818      	ldrb	r0, [r3, #0]
 8001020:	bd38      	pop	{r3, r4, r5, pc}
    sdramstatus = SDRAM_OK;
 8001022:	4b04      	ldr	r3, [pc, #16]	; (8001034 <BSP_SDRAM_Init+0x8c>)
 8001024:	2200      	movs	r2, #0
 8001026:	701a      	strb	r2, [r3, #0]
 8001028:	e7f4      	b.n	8001014 <BSP_SDRAM_Init+0x6c>
 800102a:	bf00      	nop
 800102c:	200004d0 	.word	0x200004d0
 8001030:	a0000140 	.word	0xa0000140
 8001034:	20000008 	.word	0x20000008

08001038 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001038:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800103c:	b97b      	cbnz	r3, 800105e <osKernelInitialize+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800103e:	f3ef 8310 	mrs	r3, PRIMASK
 8001042:	b913      	cbnz	r3, 800104a <osKernelInitialize+0x12>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001044:	f3ef 8311 	mrs	r3, BASEPRI
 8001048:	b11b      	cbz	r3, 8001052 <osKernelInitialize+0x1a>
 800104a:	4b09      	ldr	r3, [pc, #36]	; (8001070 <osKernelInitialize+0x38>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2b02      	cmp	r3, #2
 8001050:	d008      	beq.n	8001064 <osKernelInitialize+0x2c>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8001052:	4b07      	ldr	r3, [pc, #28]	; (8001070 <osKernelInitialize+0x38>)
 8001054:	6818      	ldr	r0, [r3, #0]
 8001056:	b940      	cbnz	r0, 800106a <osKernelInitialize+0x32>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001058:	2201      	movs	r2, #1
 800105a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800105c:	4770      	bx	lr
    stat = osErrorISR;
 800105e:	f06f 0005 	mvn.w	r0, #5
 8001062:	4770      	bx	lr
 8001064:	f06f 0005 	mvn.w	r0, #5
 8001068:	4770      	bx	lr
    } else {
      stat = osError;
 800106a:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800106e:	4770      	bx	lr
 8001070:	200005f0 	.word	0x200005f0

08001074 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001074:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001076:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800107a:	b9a3      	cbnz	r3, 80010a6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800107c:	f3ef 8310 	mrs	r3, PRIMASK
 8001080:	b913      	cbnz	r3, 8001088 <osKernelStart+0x14>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001082:	f3ef 8311 	mrs	r3, BASEPRI
 8001086:	b11b      	cbz	r3, 8001090 <osKernelStart+0x1c>
 8001088:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <osKernelStart+0x44>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b02      	cmp	r3, #2
 800108e:	d00d      	beq.n	80010ac <osKernelStart+0x38>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8001090:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <osKernelStart+0x44>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d10c      	bne.n	80010b2 <osKernelStart+0x3e>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001098:	4b07      	ldr	r3, [pc, #28]	; (80010b8 <osKernelStart+0x44>)
 800109a:	2202      	movs	r2, #2
 800109c:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800109e:	f001 fab5 	bl	800260c <vTaskStartScheduler>
      stat = osOK;
 80010a2:	2000      	movs	r0, #0
      stat = osError;
    }
  }

  return (stat);
}
 80010a4:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 80010a6:	f06f 0005 	mvn.w	r0, #5
 80010aa:	e7fb      	b.n	80010a4 <osKernelStart+0x30>
 80010ac:	f06f 0005 	mvn.w	r0, #5
 80010b0:	e7f8      	b.n	80010a4 <osKernelStart+0x30>
      stat = osError;
 80010b2:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 80010b6:	e7f5      	b.n	80010a4 <osKernelStart+0x30>
 80010b8:	200005f0 	.word	0x200005f0

080010bc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80010bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010be:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80010c0:	2400      	movs	r4, #0
 80010c2:	9405      	str	r4, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80010c4:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80010c8:	2c00      	cmp	r4, #0
 80010ca:	d138      	bne.n	800113e <osThreadNew+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80010cc:	f3ef 8310 	mrs	r3, PRIMASK
 80010d0:	b913      	cbnz	r3, 80010d8 <osThreadNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80010d2:	f3ef 8311 	mrs	r3, BASEPRI
 80010d6:	b11b      	cbz	r3, 80010e0 <osThreadNew+0x24>
 80010d8:	4b2d      	ldr	r3, [pc, #180]	; (8001190 <osThreadNew+0xd4>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d02e      	beq.n	800113e <osThreadNew+0x82>
 80010e0:	b368      	cbz	r0, 800113e <osThreadNew+0x82>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 80010e2:	b322      	cbz	r2, 800112e <osThreadNew+0x72>
      if (attr->name != NULL) {
 80010e4:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 80010e6:	6993      	ldr	r3, [r2, #24]
 80010e8:	b903      	cbnz	r3, 80010ec <osThreadNew+0x30>
    prio  = (UBaseType_t)osPriorityNormal;
 80010ea:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80010ec:	1e5c      	subs	r4, r3, #1
 80010ee:	2c37      	cmp	r4, #55	; 0x37
 80010f0:	d849      	bhi.n	8001186 <osThreadNew+0xca>
 80010f2:	6854      	ldr	r4, [r2, #4]
 80010f4:	f014 0f01 	tst.w	r4, #1
 80010f8:	d147      	bne.n	800118a <osThreadNew+0xce>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 80010fa:	6956      	ldr	r6, [r2, #20]
 80010fc:	b16e      	cbz	r6, 800111a <osThreadNew+0x5e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80010fe:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001102:	6894      	ldr	r4, [r2, #8]
 8001104:	b12c      	cbz	r4, 8001112 <osThreadNew+0x56>
 8001106:	68d7      	ldr	r7, [r2, #12]
 8001108:	2f5b      	cmp	r7, #91	; 0x5b
 800110a:	d902      	bls.n	8001112 <osThreadNew+0x56>
 800110c:	6917      	ldr	r7, [r2, #16]
 800110e:	b107      	cbz	r7, 8001112 <osThreadNew+0x56>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001110:	b9c6      	cbnz	r6, 8001144 <osThreadNew+0x88>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001112:	b12c      	cbz	r4, 8001120 <osThreadNew+0x64>
    mem  = -1;
 8001114:	f04f 34ff 	mov.w	r4, #4294967295
 8001118:	e00e      	b.n	8001138 <osThreadNew+0x7c>
    stack = configMINIMAL_STACK_SIZE;
 800111a:	f04f 0c80 	mov.w	ip, #128	; 0x80
 800111e:	e7f0      	b.n	8001102 <osThreadNew+0x46>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001120:	68d4      	ldr	r4, [r2, #12]
 8001122:	b98c      	cbnz	r4, 8001148 <osThreadNew+0x8c>
 8001124:	6914      	ldr	r4, [r2, #16]
 8001126:	b194      	cbz	r4, 800114e <osThreadNew+0x92>
    mem  = -1;
 8001128:	f04f 34ff 	mov.w	r4, #4294967295
 800112c:	e004      	b.n	8001138 <osThreadNew+0x7c>
    name = NULL;
 800112e:	4615      	mov	r5, r2
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 8001130:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 8001132:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 8001134:	f04f 0c80 	mov.w	ip, #128	; 0x80
    }

    if (mem == 1) {
 8001138:	2c01      	cmp	r4, #1
 800113a:	d00a      	beq.n	8001152 <osThreadNew+0x96>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                    (StaticTask_t *)attr->cb_mem);
    }
    else {
      if (mem == 0) {
 800113c:	b1ac      	cbz	r4, 800116a <osThreadNew+0xae>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800113e:	9805      	ldr	r0, [sp, #20]
}
 8001140:	b007      	add	sp, #28
 8001142:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 8001144:	2401      	movs	r4, #1
 8001146:	e7f7      	b.n	8001138 <osThreadNew+0x7c>
    mem  = -1;
 8001148:	f04f 34ff 	mov.w	r4, #4294967295
 800114c:	e7f4      	b.n	8001138 <osThreadNew+0x7c>
          mem = 0;
 800114e:	2400      	movs	r4, #0
 8001150:	e7f2      	b.n	8001138 <osThreadNew+0x7c>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001152:	6914      	ldr	r4, [r2, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001154:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001156:	9202      	str	r2, [sp, #8]
 8001158:	9401      	str	r4, [sp, #4]
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	460b      	mov	r3, r1
 800115e:	4662      	mov	r2, ip
 8001160:	4629      	mov	r1, r5
 8001162:	f001 f9dd 	bl	8002520 <xTaskCreateStatic>
 8001166:	9005      	str	r0, [sp, #20]
 8001168:	e7e9      	b.n	800113e <osThreadNew+0x82>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800116a:	aa05      	add	r2, sp, #20
 800116c:	9201      	str	r2, [sp, #4]
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	460b      	mov	r3, r1
 8001172:	fa1f f28c 	uxth.w	r2, ip
 8001176:	4629      	mov	r1, r5
 8001178:	f001 fa13 	bl	80025a2 <xTaskCreate>
 800117c:	2801      	cmp	r0, #1
 800117e:	d0de      	beq.n	800113e <osThreadNew+0x82>
          hTask = NULL;
 8001180:	2300      	movs	r3, #0
 8001182:	9305      	str	r3, [sp, #20]
 8001184:	e7db      	b.n	800113e <osThreadNew+0x82>
        return (NULL);
 8001186:	2000      	movs	r0, #0
 8001188:	e7da      	b.n	8001140 <osThreadNew+0x84>
 800118a:	2000      	movs	r0, #0
 800118c:	e7d8      	b.n	8001140 <osThreadNew+0x84>
 800118e:	bf00      	nop
 8001190:	200005f0 	.word	0x200005f0

08001194 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8001194:	b530      	push	{r4, r5, lr}
 8001196:	b085      	sub	sp, #20
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8001198:	0fcb      	lsrs	r3, r1, #31
 800119a:	2800      	cmp	r0, #0
 800119c:	bf08      	it	eq
 800119e:	f043 0301 	orreq.w	r3, r3, #1
 80011a2:	b12b      	cbz	r3, 80011b0 <osThreadFlagsSet+0x1c>
    rflags = (uint32_t)osErrorParameter;
 80011a4:	f06f 0303 	mvn.w	r3, #3
 80011a8:	9303      	str	r3, [sp, #12]
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
    }
  }
  /* Return flags after setting */
  return (rflags);
}
 80011aa:	9803      	ldr	r0, [sp, #12]
 80011ac:	b005      	add	sp, #20
 80011ae:	bd30      	pop	{r4, r5, pc}
 80011b0:	4604      	mov	r4, r0
    rflags = (uint32_t)osError;
 80011b2:	f04f 33ff 	mov.w	r3, #4294967295
 80011b6:	9303      	str	r3, [sp, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80011b8:	f3ef 8305 	mrs	r3, IPSR
    if (IS_IRQ()) {
 80011bc:	b9ab      	cbnz	r3, 80011ea <osThreadFlagsSet+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80011be:	f3ef 8310 	mrs	r3, PRIMASK
 80011c2:	b913      	cbnz	r3, 80011ca <osThreadFlagsSet+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80011c4:	f3ef 8311 	mrs	r3, BASEPRI
 80011c8:	b11b      	cbz	r3, 80011d2 <osThreadFlagsSet+0x3e>
 80011ca:	4b17      	ldr	r3, [pc, #92]	; (8001228 <osThreadFlagsSet+0x94>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d00b      	beq.n	80011ea <osThreadFlagsSet+0x56>
      (void)xTaskNotify (hTask, flags, eSetBits);
 80011d2:	2300      	movs	r3, #0
 80011d4:	2201      	movs	r2, #1
 80011d6:	4620      	mov	r0, r4
 80011d8:	f001 fe7a 	bl	8002ed0 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 80011dc:	ab03      	add	r3, sp, #12
 80011de:	2200      	movs	r2, #0
 80011e0:	4611      	mov	r1, r2
 80011e2:	4620      	mov	r0, r4
 80011e4:	f001 fe74 	bl	8002ed0 <xTaskGenericNotify>
 80011e8:	e7df      	b.n	80011aa <osThreadFlagsSet+0x16>
      yield = pdFALSE;
 80011ea:	2500      	movs	r5, #0
 80011ec:	9502      	str	r5, [sp, #8]
      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 80011ee:	ab02      	add	r3, sp, #8
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	462b      	mov	r3, r5
 80011f4:	2201      	movs	r2, #1
 80011f6:	4620      	mov	r0, r4
 80011f8:	f001 fef2 	bl	8002fe0 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 80011fc:	9500      	str	r5, [sp, #0]
 80011fe:	ab03      	add	r3, sp, #12
 8001200:	462a      	mov	r2, r5
 8001202:	4629      	mov	r1, r5
 8001204:	4620      	mov	r0, r4
 8001206:	f001 feeb 	bl	8002fe0 <xTaskGenericNotifyFromISR>
      portYIELD_FROM_ISR (yield);
 800120a:	9b02      	ldr	r3, [sp, #8]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d0cc      	beq.n	80011aa <osThreadFlagsSet+0x16>
 8001210:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001214:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001218:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800121c:	f3bf 8f4f 	dsb	sy
 8001220:	f3bf 8f6f 	isb	sy
 8001224:	e7c1      	b.n	80011aa <osThreadFlagsSet+0x16>
 8001226:	bf00      	nop
 8001228:	200005f0 	.word	0x200005f0

0800122c <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800122c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001230:	b085      	sub	sp, #20
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001232:	f3ef 8305 	mrs	r3, IPSR
 8001236:	9301      	str	r3, [sp, #4]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8001238:	2b00      	cmp	r3, #0
 800123a:	d14c      	bne.n	80012d6 <osThreadFlagsWait+0xaa>
 800123c:	4681      	mov	r9, r0
 800123e:	468a      	mov	sl, r1
 8001240:	4617      	mov	r7, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001242:	f3ef 8310 	mrs	r3, PRIMASK
 8001246:	b913      	cbnz	r3, 800124e <osThreadFlagsWait+0x22>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001248:	f3ef 8311 	mrs	r3, BASEPRI
 800124c:	b11b      	cbz	r3, 8001256 <osThreadFlagsWait+0x2a>
 800124e:	4b29      	ldr	r3, [pc, #164]	; (80012f4 <osThreadFlagsWait+0xc8>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2b02      	cmp	r3, #2
 8001254:	d045      	beq.n	80012e2 <osThreadFlagsWait+0xb6>
    rflags = (uint32_t)osErrorISR;
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8001256:	f1b9 0f00 	cmp.w	r9, #0
 800125a:	db45      	blt.n	80012e8 <osThreadFlagsWait+0xbc>
    rflags = (uint32_t)osErrorParameter;
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800125c:	f01a 0f02 	tst.w	sl, #2
 8001260:	d007      	beq.n	8001272 <osThreadFlagsWait+0x46>
      clear = 0U;
 8001262:	f8dd 8004 	ldr.w	r8, [sp, #4]
    }

    rflags = 0U;
    tout   = timeout;

    t0 = xTaskGetTickCount();
 8001266:	f001 fa27 	bl	80026b8 <xTaskGetTickCount>
 800126a:	4683      	mov	fp, r0
    tout   = timeout;
 800126c:	463e      	mov	r6, r7
    rflags = 0U;
 800126e:	9d01      	ldr	r5, [sp, #4]
 8001270:	e023      	b.n	80012ba <osThreadFlagsWait+0x8e>
      clear = flags;
 8001272:	46c8      	mov	r8, r9
 8001274:	e7f7      	b.n	8001266 <osThreadFlagsWait+0x3a>
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);

      if (rval == pdPASS) {
        rflags &= flags;
 8001276:	ea05 0509 	and.w	r5, r5, r9
        rflags |= nval;
 800127a:	9b03      	ldr	r3, [sp, #12]
 800127c:	431d      	orrs	r5, r3

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800127e:	f01a 0f01 	tst.w	sl, #1
 8001282:	d00d      	beq.n	80012a0 <osThreadFlagsWait+0x74>
          if ((flags & rflags) == flags) {
 8001284:	ea39 0305 	bics.w	r3, r9, r5
 8001288:	d027      	beq.n	80012da <osThreadFlagsWait+0xae>
            break;
          } else {
            if (timeout == 0U) {
 800128a:	b387      	cbz	r7, 80012ee <osThreadFlagsWait+0xc2>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800128c:	f001 fa14 	bl	80026b8 <xTaskGetTickCount>
 8001290:	eba0 030b 	sub.w	r3, r0, fp

        if (td > tout) {
 8001294:	429e      	cmp	r6, r3
 8001296:	d30b      	bcc.n	80012b0 <osThreadFlagsWait+0x84>
          tout  = 0;
        } else {
          tout -= td;
 8001298:	ebab 0000 	sub.w	r0, fp, r0
 800129c:	4406      	add	r6, r0
 800129e:	e00b      	b.n	80012b8 <osThreadFlagsWait+0x8c>
          if ((flags & rflags) != 0) {
 80012a0:	ea19 0f05 	tst.w	r9, r5
 80012a4:	d119      	bne.n	80012da <osThreadFlagsWait+0xae>
            if (timeout == 0U) {
 80012a6:	2f00      	cmp	r7, #0
 80012a8:	d1f0      	bne.n	800128c <osThreadFlagsWait+0x60>
              rflags = (uint32_t)osErrorResource;
 80012aa:	f06f 0502 	mvn.w	r5, #2
    }
    while (rval != pdFAIL);
  }

  /* Return flags before clearing */
  return (rflags);
 80012ae:	e014      	b.n	80012da <osThreadFlagsWait+0xae>
          tout  = 0;
 80012b0:	9e01      	ldr	r6, [sp, #4]
 80012b2:	e001      	b.n	80012b8 <osThreadFlagsWait+0x8c>
          rflags = (uint32_t)osErrorTimeout;
 80012b4:	f06f 0501 	mvn.w	r5, #1
    while (rval != pdFAIL);
 80012b8:	b17c      	cbz	r4, 80012da <osThreadFlagsWait+0xae>
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 80012ba:	4633      	mov	r3, r6
 80012bc:	aa03      	add	r2, sp, #12
 80012be:	4641      	mov	r1, r8
 80012c0:	2000      	movs	r0, #0
 80012c2:	f001 fdb1 	bl	8002e28 <xTaskNotifyWait>
 80012c6:	4604      	mov	r4, r0
      if (rval == pdPASS) {
 80012c8:	2801      	cmp	r0, #1
 80012ca:	d0d4      	beq.n	8001276 <osThreadFlagsWait+0x4a>
        if (timeout == 0) {
 80012cc:	2f00      	cmp	r7, #0
 80012ce:	d1f1      	bne.n	80012b4 <osThreadFlagsWait+0x88>
          rflags = (uint32_t)osErrorResource;
 80012d0:	f06f 0502 	mvn.w	r5, #2
 80012d4:	e7f0      	b.n	80012b8 <osThreadFlagsWait+0x8c>
    rflags = (uint32_t)osErrorISR;
 80012d6:	f06f 0505 	mvn.w	r5, #5
}
 80012da:	4628      	mov	r0, r5
 80012dc:	b005      	add	sp, #20
 80012de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rflags = (uint32_t)osErrorISR;
 80012e2:	f06f 0505 	mvn.w	r5, #5
 80012e6:	e7f8      	b.n	80012da <osThreadFlagsWait+0xae>
    rflags = (uint32_t)osErrorParameter;
 80012e8:	f06f 0503 	mvn.w	r5, #3
 80012ec:	e7f5      	b.n	80012da <osThreadFlagsWait+0xae>
              rflags = (uint32_t)osErrorResource;
 80012ee:	f06f 0502 	mvn.w	r5, #2
 80012f2:	e7f2      	b.n	80012da <osThreadFlagsWait+0xae>
 80012f4:	200005f0 	.word	0x200005f0

080012f8 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 80012f8:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80012fa:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80012fe:	b983      	cbnz	r3, 8001322 <osDelay+0x2a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001300:	f3ef 8310 	mrs	r3, PRIMASK
 8001304:	b913      	cbnz	r3, 800130c <osDelay+0x14>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001306:	f3ef 8311 	mrs	r3, BASEPRI
 800130a:	b11b      	cbz	r3, 8001314 <osDelay+0x1c>
 800130c:	4b08      	ldr	r3, [pc, #32]	; (8001330 <osDelay+0x38>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b02      	cmp	r3, #2
 8001312:	d009      	beq.n	8001328 <osDelay+0x30>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8001314:	b908      	cbnz	r0, 800131a <osDelay+0x22>
    stat = osOK;
 8001316:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8001318:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 800131a:	f001 fadb 	bl	80028d4 <vTaskDelay>
    stat = osOK;
 800131e:	2000      	movs	r0, #0
 8001320:	e7fa      	b.n	8001318 <osDelay+0x20>
    stat = osErrorISR;
 8001322:	f06f 0005 	mvn.w	r0, #5
 8001326:	e7f7      	b.n	8001318 <osDelay+0x20>
 8001328:	f06f 0005 	mvn.w	r0, #5
 800132c:	e7f4      	b.n	8001318 <osDelay+0x20>
 800132e:	bf00      	nop
 8001330:	200005f0 	.word	0x200005f0

08001334 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8001334:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001336:	f3ef 8305 	mrs	r3, IPSR
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;

  if (!IS_IRQ()) {
 800133a:	bb1b      	cbnz	r3, 8001384 <osEventFlagsNew+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800133c:	f3ef 8310 	mrs	r3, PRIMASK
 8001340:	b913      	cbnz	r3, 8001348 <osEventFlagsNew+0x14>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001342:	f3ef 8311 	mrs	r3, BASEPRI
 8001346:	b11b      	cbz	r3, 8001350 <osEventFlagsNew+0x1c>
 8001348:	4b11      	ldr	r3, [pc, #68]	; (8001390 <osEventFlagsNew+0x5c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b02      	cmp	r3, #2
 800134e:	d01b      	beq.n	8001388 <osEventFlagsNew+0x54>
    mem = -1;

    if (attr != NULL) {
 8001350:	b1a0      	cbz	r0, 800137c <osEventFlagsNew+0x48>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8001352:	6883      	ldr	r3, [r0, #8]
 8001354:	b113      	cbz	r3, 800135c <osEventFlagsNew+0x28>
 8001356:	68c2      	ldr	r2, [r0, #12]
 8001358:	2a1f      	cmp	r2, #31
 800135a:	d80b      	bhi.n	8001374 <osEventFlagsNew+0x40>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800135c:	b12b      	cbz	r3, 800136a <osEventFlagsNew+0x36>
    mem = -1;
 800135e:	f04f 33ff 	mov.w	r3, #4294967295

    if (mem == 1) {
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
    }
    else {
      if (mem == 0) {
 8001362:	b99b      	cbnz	r3, 800138c <osEventFlagsNew+0x58>
        hEventGroup = xEventGroupCreate();
 8001364:	f000 f9c5 	bl	80016f2 <xEventGroupCreate>
 8001368:	e00d      	b.n	8001386 <osEventFlagsNew+0x52>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800136a:	68c3      	ldr	r3, [r0, #12]
 800136c:	b143      	cbz	r3, 8001380 <osEventFlagsNew+0x4c>
    mem = -1;
 800136e:	f04f 33ff 	mov.w	r3, #4294967295
 8001372:	e7f6      	b.n	8001362 <osEventFlagsNew+0x2e>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8001374:	4618      	mov	r0, r3
 8001376:	f000 f993 	bl	80016a0 <xEventGroupCreateStatic>
 800137a:	e004      	b.n	8001386 <osEventFlagsNew+0x52>
      mem = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	e7f0      	b.n	8001362 <osEventFlagsNew+0x2e>
          mem = 0;
 8001380:	2300      	movs	r3, #0
 8001382:	e7ee      	b.n	8001362 <osEventFlagsNew+0x2e>
  hEventGroup = NULL;
 8001384:	2000      	movs	r0, #0
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
}
 8001386:	bd08      	pop	{r3, pc}
  hEventGroup = NULL;
 8001388:	2000      	movs	r0, #0
 800138a:	e7fc      	b.n	8001386 <osEventFlagsNew+0x52>
 800138c:	2000      	movs	r0, #0
  return ((osEventFlagsId_t)hEventGroup);
 800138e:	e7fa      	b.n	8001386 <osEventFlagsNew+0x52>
 8001390:	200005f0 	.word	0x200005f0

08001394 <osEventFlagsSet>:
uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8001394:	b370      	cbz	r0, 80013f4 <osEventFlagsSet+0x60>
uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8001396:	b510      	push	{r4, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	460c      	mov	r4, r1
 800139c:	4603      	mov	r3, r0
  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800139e:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
 80013a2:	d12a      	bne.n	80013fa <osEventFlagsSet+0x66>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80013a4:	f3ef 8205 	mrs	r2, IPSR
    rflags = (uint32_t)osErrorParameter;
  }
  else if (IS_IRQ()) {
 80013a8:	b972      	cbnz	r2, 80013c8 <osEventFlagsSet+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013aa:	f3ef 8210 	mrs	r2, PRIMASK
 80013ae:	b912      	cbnz	r2, 80013b6 <osEventFlagsSet+0x22>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80013b0:	f3ef 8211 	mrs	r2, BASEPRI
 80013b4:	b11a      	cbz	r2, 80013be <osEventFlagsSet+0x2a>
 80013b6:	4a15      	ldr	r2, [pc, #84]	; (800140c <osEventFlagsSet+0x78>)
 80013b8:	6812      	ldr	r2, [r2, #0]
 80013ba:	2a02      	cmp	r2, #2
 80013bc:	d004      	beq.n	80013c8 <osEventFlagsSet+0x34>
      rflags = flags;
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80013be:	4621      	mov	r1, r4
 80013c0:	4618      	mov	r0, r3
 80013c2:	f000 f9a4 	bl	800170e <xEventGroupSetBits>
 80013c6:	e01a      	b.n	80013fe <osEventFlagsSet+0x6a>
    yield = pdFALSE;
 80013c8:	2200      	movs	r2, #0
 80013ca:	9201      	str	r2, [sp, #4]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80013cc:	aa01      	add	r2, sp, #4
 80013ce:	4621      	mov	r1, r4
 80013d0:	4618      	mov	r0, r3
 80013d2:	f000 f9eb 	bl	80017ac <xEventGroupSetBitsFromISR>
 80013d6:	b1a0      	cbz	r0, 8001402 <osEventFlagsSet+0x6e>
      portYIELD_FROM_ISR (yield);
 80013d8:	9b01      	ldr	r3, [sp, #4]
 80013da:	b1ab      	cbz	r3, 8001408 <osEventFlagsSet+0x74>
 80013dc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80013e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013e4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80013e8:	f3bf 8f4f 	dsb	sy
 80013ec:	f3bf 8f6f 	isb	sy
      rflags = flags;
 80013f0:	4620      	mov	r0, r4
 80013f2:	e004      	b.n	80013fe <osEventFlagsSet+0x6a>
    rflags = (uint32_t)osErrorParameter;
 80013f4:	f06f 0003 	mvn.w	r0, #3
  }

  return (rflags);
}
 80013f8:	4770      	bx	lr
    rflags = (uint32_t)osErrorParameter;
 80013fa:	f06f 0003 	mvn.w	r0, #3
}
 80013fe:	b002      	add	sp, #8
 8001400:	bd10      	pop	{r4, pc}
      rflags = (uint32_t)osErrorResource;
 8001402:	f06f 0002 	mvn.w	r0, #2
 8001406:	e7fa      	b.n	80013fe <osEventFlagsSet+0x6a>
      rflags = flags;
 8001408:	4620      	mov	r0, r4
  return (rflags);
 800140a:	e7f8      	b.n	80013fe <osEventFlagsSet+0x6a>
 800140c:	200005f0 	.word	0x200005f0

08001410 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8001410:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001412:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 8001416:	2b00      	cmp	r3, #0
 8001418:	d14d      	bne.n	80014b6 <osMutexNew+0xa6>
 800141a:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800141c:	f3ef 8210 	mrs	r2, PRIMASK
 8001420:	b912      	cbnz	r2, 8001428 <osMutexNew+0x18>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001422:	f3ef 8211 	mrs	r2, BASEPRI
 8001426:	b11a      	cbz	r2, 8001430 <osMutexNew+0x20>
 8001428:	4a26      	ldr	r2, [pc, #152]	; (80014c4 <osMutexNew+0xb4>)
 800142a:	6812      	ldr	r2, [r2, #0]
 800142c:	2a02      	cmp	r2, #2
 800142e:	d045      	beq.n	80014bc <osMutexNew+0xac>
    if (attr != NULL) {
 8001430:	b104      	cbz	r4, 8001434 <osMutexNew+0x24>
      type = attr->attr_bits;
 8001432:	6863      	ldr	r3, [r4, #4]
    } else {
      type = 0U;
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8001434:	f013 0601 	ands.w	r6, r3, #1
 8001438:	d000      	beq.n	800143c <osMutexNew+0x2c>
      rmtx = 1U;
 800143a:	2601      	movs	r6, #1
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800143c:	f013 0f08 	tst.w	r3, #8
 8001440:	d13e      	bne.n	80014c0 <osMutexNew+0xb0>
      mem = -1;

      if (attr != NULL) {
 8001442:	b36c      	cbz	r4, 80014a0 <osMutexNew+0x90>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8001444:	68a1      	ldr	r1, [r4, #8]
 8001446:	b111      	cbz	r1, 800144e <osMutexNew+0x3e>
 8001448:	68e3      	ldr	r3, [r4, #12]
 800144a:	2b4f      	cmp	r3, #79	; 0x4f
 800144c:	d81d      	bhi.n	800148a <osMutexNew+0x7a>
          mem = 1;
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800144e:	b1b9      	cbz	r1, 8001480 <osMutexNew+0x70>
      mem = -1;
 8001450:	f04f 33ff 	mov.w	r3, #4294967295
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
        }
      }
      else {
        if (mem == 0) {
 8001454:	bb6b      	cbnz	r3, 80014b2 <osMutexNew+0xa2>
          if (rmtx != 0U) {
 8001456:	b33e      	cbz	r6, 80014a8 <osMutexNew+0x98>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8001458:	2004      	movs	r0, #4
 800145a:	f000 fc51 	bl	8001d00 <xQueueCreateMutex>
 800145e:	4605      	mov	r5, r0
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8001460:	b12d      	cbz	r5, 800146e <osMutexNew+0x5e>
        if (attr != NULL) {
 8001462:	b104      	cbz	r4, 8001466 <osMutexNew+0x56>
          name = attr->name;
 8001464:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
 8001466:	4621      	mov	r1, r4
 8001468:	4628      	mov	r0, r5
 800146a:	f000 fea5 	bl	80021b8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800146e:	2d00      	cmp	r5, #0
 8001470:	bf0c      	ite	eq
 8001472:	2600      	moveq	r6, #0
 8001474:	f006 0601 	andne.w	r6, r6, #1
 8001478:	b1f6      	cbz	r6, 80014b8 <osMutexNew+0xa8>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800147a:	f045 0501 	orr.w	r5, r5, #1
 800147e:	e01b      	b.n	80014b8 <osMutexNew+0xa8>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8001480:	68e3      	ldr	r3, [r4, #12]
 8001482:	b17b      	cbz	r3, 80014a4 <osMutexNew+0x94>
      mem = -1;
 8001484:	f04f 33ff 	mov.w	r3, #4294967295
 8001488:	e7e4      	b.n	8001454 <osMutexNew+0x44>
        if (rmtx != 0U) {
 800148a:	b126      	cbz	r6, 8001496 <osMutexNew+0x86>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800148c:	2004      	movs	r0, #4
 800148e:	f000 fc42 	bl	8001d16 <xQueueCreateMutexStatic>
 8001492:	4605      	mov	r5, r0
 8001494:	e7e4      	b.n	8001460 <osMutexNew+0x50>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8001496:	2001      	movs	r0, #1
 8001498:	f000 fc3d 	bl	8001d16 <xQueueCreateMutexStatic>
 800149c:	4605      	mov	r5, r0
 800149e:	e7df      	b.n	8001460 <osMutexNew+0x50>
        mem = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	e7d7      	b.n	8001454 <osMutexNew+0x44>
            mem = 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	e7d5      	b.n	8001454 <osMutexNew+0x44>
            hMutex = xSemaphoreCreateMutex ();
 80014a8:	2001      	movs	r0, #1
 80014aa:	f000 fc29 	bl	8001d00 <xQueueCreateMutex>
 80014ae:	4605      	mov	r5, r0
 80014b0:	e7d6      	b.n	8001460 <osMutexNew+0x50>
  hMutex = NULL;
 80014b2:	2500      	movs	r5, #0
 80014b4:	e7db      	b.n	800146e <osMutexNew+0x5e>
 80014b6:	2500      	movs	r5, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 80014b8:	4628      	mov	r0, r5
 80014ba:	bd70      	pop	{r4, r5, r6, pc}
  hMutex = NULL;
 80014bc:	2500      	movs	r5, #0
 80014be:	e7fb      	b.n	80014b8 <osMutexNew+0xa8>
 80014c0:	2500      	movs	r5, #0
  return ((osMutexId_t)hMutex);
 80014c2:	e7f9      	b.n	80014b8 <osMutexNew+0xa8>
 80014c4:	200005f0 	.word	0x200005f0

080014c8 <osMutexAcquire>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80014c8:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 80014cc:	bb22      	cbnz	r2, 8001518 <osMutexAcquire+0x50>
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80014ce:	b510      	push	{r4, lr}
 80014d0:	4603      	mov	r3, r0
 80014d2:	460c      	mov	r4, r1
 80014d4:	f020 0001 	bic.w	r0, r0, #1
 80014d8:	f003 0301 	and.w	r3, r3, #1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80014dc:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 80014e0:	b912      	cbnz	r2, 80014e8 <osMutexAcquire+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80014e2:	f3ef 8211 	mrs	r2, BASEPRI
 80014e6:	b11a      	cbz	r2, 80014f0 <osMutexAcquire+0x28>
 80014e8:	4a15      	ldr	r2, [pc, #84]	; (8001540 <osMutexAcquire+0x78>)
 80014ea:	6812      	ldr	r2, [r2, #0]
 80014ec:	2a02      	cmp	r2, #2
 80014ee:	d016      	beq.n	800151e <osMutexAcquire+0x56>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 80014f0:	b1c0      	cbz	r0, 8001524 <osMutexAcquire+0x5c>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 80014f2:	b143      	cbz	r3, 8001506 <osMutexAcquire+0x3e>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80014f4:	4621      	mov	r1, r4
 80014f6:	f000 fe3d 	bl	8002174 <xQueueTakeMutexRecursive>
 80014fa:	2801      	cmp	r0, #1
 80014fc:	d015      	beq.n	800152a <osMutexAcquire+0x62>
        if (timeout != 0U) {
 80014fe:	b1b4      	cbz	r4, 800152e <osMutexAcquire+0x66>
          stat = osErrorTimeout;
 8001500:	f06f 0001 	mvn.w	r0, #1
 8001504:	e012      	b.n	800152c <osMutexAcquire+0x64>
          stat = osErrorResource;
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8001506:	4621      	mov	r1, r4
 8001508:	f000 fd59 	bl	8001fbe <xQueueSemaphoreTake>
 800150c:	2801      	cmp	r0, #1
 800150e:	d011      	beq.n	8001534 <osMutexAcquire+0x6c>
        if (timeout != 0U) {
 8001510:	b194      	cbz	r4, 8001538 <osMutexAcquire+0x70>
          stat = osErrorTimeout;
 8001512:	f06f 0001 	mvn.w	r0, #1
 8001516:	e009      	b.n	800152c <osMutexAcquire+0x64>
    stat = osErrorISR;
 8001518:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 800151c:	4770      	bx	lr
    stat = osErrorISR;
 800151e:	f06f 0005 	mvn.w	r0, #5
 8001522:	e003      	b.n	800152c <osMutexAcquire+0x64>
    stat = osErrorParameter;
 8001524:	f06f 0003 	mvn.w	r0, #3
 8001528:	e000      	b.n	800152c <osMutexAcquire+0x64>
  stat = osOK;
 800152a:	2000      	movs	r0, #0
}
 800152c:	bd10      	pop	{r4, pc}
          stat = osErrorResource;
 800152e:	f06f 0002 	mvn.w	r0, #2
 8001532:	e7fb      	b.n	800152c <osMutexAcquire+0x64>
  stat = osOK;
 8001534:	2000      	movs	r0, #0
 8001536:	e7f9      	b.n	800152c <osMutexAcquire+0x64>
          stat = osErrorResource;
 8001538:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800153c:	e7f6      	b.n	800152c <osMutexAcquire+0x64>
 800153e:	bf00      	nop
 8001540:	200005f0 	.word	0x200005f0

08001544 <osMutexRelease>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001544:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8001548:	bb02      	cbnz	r2, 800158c <osMutexRelease+0x48>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800154a:	b508      	push	{r3, lr}
 800154c:	4603      	mov	r3, r0
 800154e:	f020 0001 	bic.w	r0, r0, #1
 8001552:	f003 0301 	and.w	r3, r3, #1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001556:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 800155a:	b912      	cbnz	r2, 8001562 <osMutexRelease+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800155c:	f3ef 8211 	mrs	r2, BASEPRI
 8001560:	b11a      	cbz	r2, 800156a <osMutexRelease+0x26>
 8001562:	4a12      	ldr	r2, [pc, #72]	; (80015ac <osMutexRelease+0x68>)
 8001564:	6812      	ldr	r2, [r2, #0]
 8001566:	2a02      	cmp	r2, #2
 8001568:	d013      	beq.n	8001592 <osMutexRelease+0x4e>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800156a:	b1a8      	cbz	r0, 8001598 <osMutexRelease+0x54>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800156c:	b12b      	cbz	r3, 800157a <osMutexRelease+0x36>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800156e:	f000 fbe1 	bl	8001d34 <xQueueGiveMutexRecursive>
 8001572:	2801      	cmp	r0, #1
 8001574:	d113      	bne.n	800159e <osMutexRelease+0x5a>
  stat = osOK;
 8001576:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8001578:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800157a:	2300      	movs	r3, #0
 800157c:	461a      	mov	r2, r3
 800157e:	4619      	mov	r1, r3
 8001580:	f000 fae6 	bl	8001b50 <xQueueGenericSend>
 8001584:	2801      	cmp	r0, #1
 8001586:	d10d      	bne.n	80015a4 <osMutexRelease+0x60>
  stat = osOK;
 8001588:	2000      	movs	r0, #0
 800158a:	e7f5      	b.n	8001578 <osMutexRelease+0x34>
    stat = osErrorISR;
 800158c:	f06f 0005 	mvn.w	r0, #5
}
 8001590:	4770      	bx	lr
    stat = osErrorISR;
 8001592:	f06f 0005 	mvn.w	r0, #5
 8001596:	e7ef      	b.n	8001578 <osMutexRelease+0x34>
    stat = osErrorParameter;
 8001598:	f06f 0003 	mvn.w	r0, #3
 800159c:	e7ec      	b.n	8001578 <osMutexRelease+0x34>
        stat = osErrorResource;
 800159e:	f06f 0002 	mvn.w	r0, #2
 80015a2:	e7e9      	b.n	8001578 <osMutexRelease+0x34>
        stat = osErrorResource;
 80015a4:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 80015a8:	e7e6      	b.n	8001578 <osMutexRelease+0x34>
 80015aa:	bf00      	nop
 80015ac:	200005f0 	.word	0x200005f0

080015b0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80015b0:	b570      	push	{r4, r5, r6, lr}
 80015b2:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80015b4:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d147      	bne.n	800164c <osMessageQueueNew+0x9c>
 80015bc:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80015be:	f3ef 8310 	mrs	r3, PRIMASK
 80015c2:	b913      	cbnz	r3, 80015ca <osMessageQueueNew+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80015c4:	f3ef 8311 	mrs	r3, BASEPRI
 80015c8:	b11b      	cbz	r3, 80015d2 <osMessageQueueNew+0x22>
 80015ca:	4b25      	ldr	r3, [pc, #148]	; (8001660 <osMessageQueueNew+0xb0>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d040      	beq.n	8001654 <osMessageQueueNew+0xa4>
 80015d2:	1e0b      	subs	r3, r1, #0
 80015d4:	bf18      	it	ne
 80015d6:	2301      	movne	r3, #1
 80015d8:	2800      	cmp	r0, #0
 80015da:	d03d      	beq.n	8001658 <osMessageQueueNew+0xa8>
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d03b      	beq.n	8001658 <osMessageQueueNew+0xa8>
    mem = -1;

    if (attr != NULL) {
 80015e0:	b36c      	cbz	r4, 800163e <osMessageQueueNew+0x8e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80015e2:	68a3      	ldr	r3, [r4, #8]
 80015e4:	b14b      	cbz	r3, 80015fa <osMessageQueueNew+0x4a>
 80015e6:	68e2      	ldr	r2, [r4, #12]
 80015e8:	2a4f      	cmp	r2, #79	; 0x4f
 80015ea:	d906      	bls.n	80015fa <osMessageQueueNew+0x4a>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80015ec:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80015ee:	b122      	cbz	r2, 80015fa <osMessageQueueNew+0x4a>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80015f0:	fb01 f500 	mul.w	r5, r1, r0
 80015f4:	6966      	ldr	r6, [r4, #20]
 80015f6:	42ae      	cmp	r6, r5
 80015f8:	d21b      	bcs.n	8001632 <osMessageQueueNew+0x82>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80015fa:	b173      	cbz	r3, 800161a <osMessageQueueNew+0x6a>
    mem = -1;
 80015fc:	f04f 33ff 	mov.w	r3, #4294967295

    if (mem == 1) {
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
    }
    else {
      if (mem == 0) {
 8001600:	bb63      	cbnz	r3, 800165c <osMessageQueueNew+0xac>
        hQueue = xQueueCreate (msg_count, msg_size);
 8001602:	2200      	movs	r2, #0
 8001604:	f000 fa7b 	bl	8001afe <xQueueGenericCreate>
 8001608:	4605      	mov	r5, r0
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800160a:	b305      	cbz	r5, 800164e <osMessageQueueNew+0x9e>
      if (attr != NULL) {
 800160c:	b104      	cbz	r4, 8001610 <osMessageQueueNew+0x60>
        name = attr->name;
 800160e:	6824      	ldr	r4, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 8001610:	4621      	mov	r1, r4
 8001612:	4628      	mov	r0, r5
 8001614:	f000 fdd0 	bl	80021b8 <vQueueAddToRegistry>
 8001618:	e019      	b.n	800164e <osMessageQueueNew+0x9e>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800161a:	68e3      	ldr	r3, [r4, #12]
 800161c:	b98b      	cbnz	r3, 8001642 <osMessageQueueNew+0x92>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800161e:	6923      	ldr	r3, [r4, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8001620:	b113      	cbz	r3, 8001628 <osMessageQueueNew+0x78>
    mem = -1;
 8001622:	f04f 33ff 	mov.w	r3, #4294967295
 8001626:	e7eb      	b.n	8001600 <osMessageQueueNew+0x50>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8001628:	6963      	ldr	r3, [r4, #20]
 800162a:	b16b      	cbz	r3, 8001648 <osMessageQueueNew+0x98>
    mem = -1;
 800162c:	f04f 33ff 	mov.w	r3, #4294967295
 8001630:	e7e6      	b.n	8001600 <osMessageQueueNew+0x50>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8001632:	2500      	movs	r5, #0
 8001634:	9500      	str	r5, [sp, #0]
 8001636:	f000 fa05 	bl	8001a44 <xQueueGenericCreateStatic>
 800163a:	4605      	mov	r5, r0
 800163c:	e7e5      	b.n	800160a <osMessageQueueNew+0x5a>
      mem = 0;
 800163e:	2300      	movs	r3, #0
 8001640:	e7de      	b.n	8001600 <osMessageQueueNew+0x50>
    mem = -1;
 8001642:	f04f 33ff 	mov.w	r3, #4294967295
 8001646:	e7db      	b.n	8001600 <osMessageQueueNew+0x50>
          mem = 0;
 8001648:	2300      	movs	r3, #0
 800164a:	e7d9      	b.n	8001600 <osMessageQueueNew+0x50>
  hQueue = NULL;
 800164c:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800164e:	4628      	mov	r0, r5
 8001650:	b002      	add	sp, #8
 8001652:	bd70      	pop	{r4, r5, r6, pc}
  hQueue = NULL;
 8001654:	2500      	movs	r5, #0
 8001656:	e7fa      	b.n	800164e <osMessageQueueNew+0x9e>
 8001658:	2500      	movs	r5, #0
 800165a:	e7f8      	b.n	800164e <osMessageQueueNew+0x9e>
 800165c:	2500      	movs	r5, #0
  return ((osMessageQueueId_t)hQueue);
 800165e:	e7f6      	b.n	800164e <osMessageQueueNew+0x9e>
 8001660:	200005f0 	.word	0x200005f0

08001664 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001664:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001666:	4b05      	ldr	r3, [pc, #20]	; (800167c <vApplicationGetIdleTaskMemory+0x18>)
 8001668:	1d1c      	adds	r4, r3, #4
 800166a:	6004      	str	r4, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800166c:	3360      	adds	r3, #96	; 0x60
 800166e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001670:	2380      	movs	r3, #128	; 0x80
 8001672:	6013      	str	r3, [r2, #0]
}
 8001674:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	200005f0 	.word	0x200005f0

08001680 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001680:	b410      	push	{r4}
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001682:	4b06      	ldr	r3, [pc, #24]	; (800169c <vApplicationGetTimerTaskMemory+0x1c>)
 8001684:	f503 7418 	add.w	r4, r3, #608	; 0x260
 8001688:	6004      	str	r4, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800168a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800168e:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001690:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001694:	6013      	str	r3, [r2, #0]
}
 8001696:	f85d 4b04 	ldr.w	r4, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	200005f0 	.word	0x200005f0

080016a0 <xEventGroupCreateStatic>:
	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80016a0:	b190      	cbz	r0, 80016c8 <xEventGroupCreateStatic+0x28>
	{
 80016a2:	b510      	push	{r4, lr}
 80016a4:	b082      	sub	sp, #8
 80016a6:	4604      	mov	r4, r0
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80016a8:	2320      	movs	r3, #32
 80016aa:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80016ac:	9b01      	ldr	r3, [sp, #4]
 80016ae:	2b20      	cmp	r3, #32
 80016b0:	d015      	beq.n	80016de <xEventGroupCreateStatic+0x3e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80016b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016b6:	b672      	cpsid	i
 80016b8:	f383 8811 	msr	BASEPRI, r3
 80016bc:	f3bf 8f6f 	isb	sy
 80016c0:	f3bf 8f4f 	dsb	sy
 80016c4:	b662      	cpsie	i
 80016c6:	e7fe      	b.n	80016c6 <xEventGroupCreateStatic+0x26>
 80016c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016cc:	b672      	cpsid	i
 80016ce:	f383 8811 	msr	BASEPRI, r3
 80016d2:	f3bf 8f6f 	isb	sy
 80016d6:	f3bf 8f4f 	dsb	sy
 80016da:	b662      	cpsie	i
		configASSERT( pxEventGroupBuffer );
 80016dc:	e7fe      	b.n	80016dc <xEventGroupCreateStatic+0x3c>
		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */

		if( pxEventBits != NULL )
		{
			pxEventBits->uxEventBits = 0;
 80016de:	2300      	movs	r3, #0
 80016e0:	f840 3b04 	str.w	r3, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80016e4:	f000 f86c 	bl	80017c0 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80016e8:	2301      	movs	r3, #1
 80016ea:	7723      	strb	r3, [r4, #28]
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
	}
 80016ec:	4620      	mov	r0, r4
 80016ee:	b002      	add	sp, #8
 80016f0:	bd10      	pop	{r4, pc}

080016f2 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80016f2:	b538      	push	{r3, r4, r5, lr}
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80016f4:	2020      	movs	r0, #32
 80016f6:	f002 f957 	bl	80039a8 <pvPortMalloc>

		if( pxEventBits != NULL )
 80016fa:	4604      	mov	r4, r0
 80016fc:	b128      	cbz	r0, 800170a <xEventGroupCreate+0x18>
		{
			pxEventBits->uxEventBits = 0;
 80016fe:	2500      	movs	r5, #0
 8001700:	f840 5b04 	str.w	r5, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8001704:	f000 f85c 	bl	80017c0 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8001708:	7725      	strb	r5, [r4, #28]
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
	}
 800170a:	4620      	mov	r0, r4
 800170c:	bd38      	pop	{r3, r4, r5, pc}

0800170e <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800170e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
EventGroup_t *pxEventBits = xEventGroup;
BaseType_t xMatchFound = pdFALSE;

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8001710:	b178      	cbz	r0, 8001732 <xEventGroupSetBits+0x24>
 8001712:	460d      	mov	r5, r1
 8001714:	4604      	mov	r4, r0
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8001716:	f011 477f 	ands.w	r7, r1, #4278190080	; 0xff000000
 800171a:	d015      	beq.n	8001748 <xEventGroupSetBits+0x3a>
 800171c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001720:	b672      	cpsid	i
 8001722:	f383 8811 	msr	BASEPRI, r3
 8001726:	f3bf 8f6f 	isb	sy
 800172a:	f3bf 8f4f 	dsb	sy
 800172e:	b662      	cpsie	i
 8001730:	e7fe      	b.n	8001730 <xEventGroupSetBits+0x22>
 8001732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001736:	b672      	cpsid	i
 8001738:	f383 8811 	msr	BASEPRI, r3
 800173c:	f3bf 8f6f 	isb	sy
 8001740:	f3bf 8f4f 	dsb	sy
 8001744:	b662      	cpsie	i
	configASSERT( xEventGroup );
 8001746:	e7fe      	b.n	8001746 <xEventGroupSetBits+0x38>

	pxList = &( pxEventBits->xTasksWaitingForBits );
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001748:	f100 060c 	add.w	r6, r0, #12
	vTaskSuspendAll();
 800174c:	f000 ffaa 	bl	80026a4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8001750:	6920      	ldr	r0, [r4, #16]

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8001752:	6823      	ldr	r3, [r4, #0]
 8001754:	432b      	orrs	r3, r5
 8001756:	6023      	str	r3, [r4, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8001758:	e00a      	b.n	8001770 <xEventGroupSetBits+0x62>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800175a:	6821      	ldr	r1, [r4, #0]
 800175c:	ea32 0101 	bics.w	r1, r2, r1
 8001760:	d105      	bne.n	800176e <xEventGroupSetBits+0x60>
 8001762:	e011      	b.n	8001788 <xEventGroupSetBits+0x7a>
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8001764:	6821      	ldr	r1, [r4, #0]
 8001766:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 800176a:	f001 f9a5 	bl	8002ab8 <vTaskRemoveFromUnorderedEventList>
{
 800176e:	4628      	mov	r0, r5
		while( pxListItem != pxListEnd )
 8001770:	42b0      	cmp	r0, r6
 8001772:	d00e      	beq.n	8001792 <xEventGroupSetBits+0x84>
			pxNext = listGET_NEXT( pxListItem );
 8001774:	6845      	ldr	r5, [r0, #4]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8001776:	6803      	ldr	r3, [r0, #0]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8001778:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800177c:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8001780:	d1eb      	bne.n	800175a <xEventGroupSetBits+0x4c>
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8001782:	6821      	ldr	r1, [r4, #0]
 8001784:	4211      	tst	r1, r2
 8001786:	d0f2      	beq.n	800176e <xEventGroupSetBits+0x60>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8001788:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800178c:	d0ea      	beq.n	8001764 <xEventGroupSetBits+0x56>
					uxBitsToClear |= uxBitsWaitedFor;
 800178e:	4317      	orrs	r7, r2
 8001790:	e7e8      	b.n	8001764 <xEventGroupSetBits+0x56>
			pxListItem = pxNext;
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8001792:	6823      	ldr	r3, [r4, #0]
 8001794:	ea23 0307 	bic.w	r3, r3, r7
 8001798:	6023      	str	r3, [r4, #0]
	}
	( void ) xTaskResumeAll();
 800179a:	f001 f821 	bl	80027e0 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
}
 800179e:	6820      	ldr	r0, [r4, #0]
 80017a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080017a2 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80017a2:	b508      	push	{r3, lr}
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80017a4:	f7ff ffb3 	bl	800170e <xEventGroupSetBits>
}
 80017a8:	bd08      	pop	{r3, pc}
	...

080017ac <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80017ac:	b508      	push	{r3, lr}
 80017ae:	4613      	mov	r3, r2
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80017b0:	460a      	mov	r2, r1
 80017b2:	4601      	mov	r1, r0
 80017b4:	4801      	ldr	r0, [pc, #4]	; (80017bc <xEventGroupSetBitsFromISR+0x10>)
 80017b6:	f001 feed 	bl	8003594 <xTimerPendFunctionCallFromISR>

		return xReturn;
	}
 80017ba:	bd08      	pop	{r3, pc}
 80017bc:	080017a3 	.word	0x080017a3

080017c0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017c0:	f100 0308 	add.w	r3, r0, #8
 80017c4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80017c6:	f04f 32ff 	mov.w	r2, #4294967295
 80017ca:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017cc:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017ce:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80017d0:	2300      	movs	r3, #0
 80017d2:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80017d4:	4770      	bx	lr

080017d6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80017da:	4770      	bx	lr

080017dc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80017dc:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80017de:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80017e0:	689a      	ldr	r2, [r3, #8]
 80017e2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80017e4:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80017e6:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80017e8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80017ea:	6803      	ldr	r3, [r0, #0]
 80017ec:	3301      	adds	r3, #1
 80017ee:	6003      	str	r3, [r0, #0]
}
 80017f0:	4770      	bx	lr

080017f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80017f2:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80017f4:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80017f6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80017fa:	d011      	beq.n	8001820 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80017fc:	f100 0308 	add.w	r3, r0, #8
 8001800:	461c      	mov	r4, r3
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	42aa      	cmp	r2, r5
 8001808:	d9fa      	bls.n	8001800 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800180a:	6863      	ldr	r3, [r4, #4]
 800180c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800180e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001810:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001812:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001814:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8001816:	6803      	ldr	r3, [r0, #0]
 8001818:	3301      	adds	r3, #1
 800181a:	6003      	str	r3, [r0, #0]
}
 800181c:	bc30      	pop	{r4, r5}
 800181e:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8001820:	6904      	ldr	r4, [r0, #16]
 8001822:	e7f2      	b.n	800180a <vListInsert+0x18>

08001824 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001824:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001826:	6841      	ldr	r1, [r0, #4]
 8001828:	6882      	ldr	r2, [r0, #8]
 800182a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800182c:	6841      	ldr	r1, [r0, #4]
 800182e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001830:	685a      	ldr	r2, [r3, #4]
 8001832:	4282      	cmp	r2, r0
 8001834:	d006      	beq.n	8001844 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001836:	2200      	movs	r2, #0
 8001838:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	3a01      	subs	r2, #1
 800183e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001840:	6818      	ldr	r0, [r3, #0]
}
 8001842:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001844:	6882      	ldr	r2, [r0, #8]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	e7f5      	b.n	8001836 <uxListRemove+0x12>

0800184a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800184a:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800184c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800184e:	b118      	cbz	r0, 8001858 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	6818      	ldr	r0, [r3, #0]
 8001854:	f1c0 0038 	rsb	r0, r0, #56	; 0x38
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 8001858:	4770      	bx	lr

0800185a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800185a:	b510      	push	{r4, lr}
 800185c:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800185e:	f001 ff19 	bl	8003694 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001862:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001864:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001866:	429a      	cmp	r2, r3
 8001868:	d004      	beq.n	8001874 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800186a:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800186c:	f001 ff38 	bl	80036e0 <vPortExitCritical>

	return xReturn;
}
 8001870:	4620      	mov	r0, r4
 8001872:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8001874:	2401      	movs	r4, #1
 8001876:	e7f9      	b.n	800186c <prvIsQueueFull+0x12>

08001878 <prvIsQueueEmpty>:
{
 8001878:	b510      	push	{r4, lr}
 800187a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800187c:	f001 ff0a 	bl	8003694 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001880:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001882:	b923      	cbnz	r3, 800188e <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8001884:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8001886:	f001 ff2b 	bl	80036e0 <vPortExitCritical>
}
 800188a:	4620      	mov	r0, r4
 800188c:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 800188e:	2400      	movs	r4, #0
 8001890:	e7f9      	b.n	8001886 <prvIsQueueEmpty+0xe>

08001892 <prvCopyDataToQueue>:
{
 8001892:	b570      	push	{r4, r5, r6, lr}
 8001894:	4604      	mov	r4, r0
 8001896:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001898:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800189a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800189c:	b95a      	cbnz	r2, 80018b6 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800189e:	6803      	ldr	r3, [r0, #0]
 80018a0:	b11b      	cbz	r3, 80018aa <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 80018a2:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80018a4:	3601      	adds	r6, #1
 80018a6:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80018a8:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80018aa:	6880      	ldr	r0, [r0, #8]
 80018ac:	f001 fa08 	bl	8002cc0 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	60a3      	str	r3, [r4, #8]
 80018b4:	e7f6      	b.n	80018a4 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 80018b6:	b96d      	cbnz	r5, 80018d4 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80018b8:	6840      	ldr	r0, [r0, #4]
 80018ba:	f008 fb36 	bl	8009f2a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80018be:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80018c0:	6863      	ldr	r3, [r4, #4]
 80018c2:	4413      	add	r3, r2
 80018c4:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80018c6:	68a2      	ldr	r2, [r4, #8]
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d319      	bcc.n	8001900 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80018cc:	6823      	ldr	r3, [r4, #0]
 80018ce:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 80018d0:	4628      	mov	r0, r5
 80018d2:	e7e7      	b.n	80018a4 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80018d4:	68c0      	ldr	r0, [r0, #12]
 80018d6:	f008 fb28 	bl	8009f2a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80018da:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80018dc:	4251      	negs	r1, r2
 80018de:	68e3      	ldr	r3, [r4, #12]
 80018e0:	1a9b      	subs	r3, r3, r2
 80018e2:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80018e4:	6822      	ldr	r2, [r4, #0]
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d202      	bcs.n	80018f0 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80018ea:	68a3      	ldr	r3, [r4, #8]
 80018ec:	440b      	add	r3, r1
 80018ee:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80018f0:	2d02      	cmp	r5, #2
 80018f2:	d001      	beq.n	80018f8 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 80018f4:	2000      	movs	r0, #0
 80018f6:	e7d5      	b.n	80018a4 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80018f8:	b126      	cbz	r6, 8001904 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 80018fa:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 80018fc:	2000      	movs	r0, #0
 80018fe:	e7d1      	b.n	80018a4 <prvCopyDataToQueue+0x12>
 8001900:	4628      	mov	r0, r5
 8001902:	e7cf      	b.n	80018a4 <prvCopyDataToQueue+0x12>
 8001904:	2000      	movs	r0, #0
 8001906:	e7cd      	b.n	80018a4 <prvCopyDataToQueue+0x12>

08001908 <prvCopyDataFromQueue>:
{
 8001908:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800190a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800190c:	b16a      	cbz	r2, 800192a <prvCopyDataFromQueue+0x22>
{
 800190e:	b510      	push	{r4, lr}
 8001910:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001912:	68d9      	ldr	r1, [r3, #12]
 8001914:	4411      	add	r1, r2
 8001916:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001918:	689c      	ldr	r4, [r3, #8]
 800191a:	42a1      	cmp	r1, r4
 800191c:	d301      	bcc.n	8001922 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800191e:	6819      	ldr	r1, [r3, #0]
 8001920:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001922:	68d9      	ldr	r1, [r3, #12]
 8001924:	f008 fb01 	bl	8009f2a <memcpy>
}
 8001928:	bd10      	pop	{r4, pc}
 800192a:	4770      	bx	lr

0800192c <prvUnlockQueue>:
{
 800192c:	b538      	push	{r3, r4, r5, lr}
 800192e:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8001930:	f001 feb0 	bl	8003694 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8001934:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8001938:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800193a:	e001      	b.n	8001940 <prvUnlockQueue+0x14>
			--cTxLock;
 800193c:	3c01      	subs	r4, #1
 800193e:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001940:	2c00      	cmp	r4, #0
 8001942:	dd0a      	ble.n	800195a <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001944:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001946:	b143      	cbz	r3, 800195a <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001948:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800194c:	f001 f86e 	bl	8002a2c <xTaskRemoveFromEventList>
 8001950:	2800      	cmp	r0, #0
 8001952:	d0f3      	beq.n	800193c <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8001954:	f001 f946 	bl	8002be4 <vTaskMissedYield>
 8001958:	e7f0      	b.n	800193c <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 800195a:	23ff      	movs	r3, #255	; 0xff
 800195c:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8001960:	f001 febe 	bl	80036e0 <vPortExitCritical>
	taskENTER_CRITICAL();
 8001964:	f001 fe96 	bl	8003694 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8001968:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 800196c:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800196e:	e001      	b.n	8001974 <prvUnlockQueue+0x48>
				--cRxLock;
 8001970:	3c01      	subs	r4, #1
 8001972:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001974:	2c00      	cmp	r4, #0
 8001976:	dd0a      	ble.n	800198e <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001978:	692b      	ldr	r3, [r5, #16]
 800197a:	b143      	cbz	r3, 800198e <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800197c:	f105 0010 	add.w	r0, r5, #16
 8001980:	f001 f854 	bl	8002a2c <xTaskRemoveFromEventList>
 8001984:	2800      	cmp	r0, #0
 8001986:	d0f3      	beq.n	8001970 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 8001988:	f001 f92c 	bl	8002be4 <vTaskMissedYield>
 800198c:	e7f0      	b.n	8001970 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 800198e:	23ff      	movs	r3, #255	; 0xff
 8001990:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8001994:	f001 fea4 	bl	80036e0 <vPortExitCritical>
}
 8001998:	bd38      	pop	{r3, r4, r5, pc}

0800199a <xQueueGenericReset>:
{
 800199a:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800199c:	b1e0      	cbz	r0, 80019d8 <xQueueGenericReset+0x3e>
 800199e:	460d      	mov	r5, r1
 80019a0:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80019a2:	f001 fe77 	bl	8003694 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80019a6:	6823      	ldr	r3, [r4, #0]
 80019a8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80019aa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80019ac:	fb01 3002 	mla	r0, r1, r2, r3
 80019b0:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80019b2:	2000      	movs	r0, #0
 80019b4:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80019b6:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80019b8:	3a01      	subs	r2, #1
 80019ba:	fb02 3301 	mla	r3, r2, r1, r3
 80019be:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80019c0:	23ff      	movs	r3, #255	; 0xff
 80019c2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80019c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80019ca:	bb0d      	cbnz	r5, 8001a10 <xQueueGenericReset+0x76>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80019cc:	6923      	ldr	r3, [r4, #16]
 80019ce:	b973      	cbnz	r3, 80019ee <xQueueGenericReset+0x54>
	taskEXIT_CRITICAL();
 80019d0:	f001 fe86 	bl	80036e0 <vPortExitCritical>
}
 80019d4:	2001      	movs	r0, #1
 80019d6:	bd38      	pop	{r3, r4, r5, pc}
 80019d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019dc:	b672      	cpsid	i
 80019de:	f383 8811 	msr	BASEPRI, r3
 80019e2:	f3bf 8f6f 	isb	sy
 80019e6:	f3bf 8f4f 	dsb	sy
 80019ea:	b662      	cpsie	i
	configASSERT( pxQueue );
 80019ec:	e7fe      	b.n	80019ec <xQueueGenericReset+0x52>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80019ee:	f104 0010 	add.w	r0, r4, #16
 80019f2:	f001 f81b 	bl	8002a2c <xTaskRemoveFromEventList>
 80019f6:	2800      	cmp	r0, #0
 80019f8:	d0ea      	beq.n	80019d0 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 80019fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80019fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a02:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001a06:	f3bf 8f4f 	dsb	sy
 8001a0a:	f3bf 8f6f 	isb	sy
 8001a0e:	e7df      	b.n	80019d0 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001a10:	f104 0010 	add.w	r0, r4, #16
 8001a14:	f7ff fed4 	bl	80017c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001a18:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001a1c:	f7ff fed0 	bl	80017c0 <vListInitialise>
 8001a20:	e7d6      	b.n	80019d0 <xQueueGenericReset+0x36>

08001a22 <prvInitialiseNewQueue>:
{
 8001a22:	b538      	push	{r3, r4, r5, lr}
 8001a24:	461d      	mov	r5, r3
 8001a26:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8001a28:	460b      	mov	r3, r1
 8001a2a:	b949      	cbnz	r1, 8001a40 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001a2c:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8001a2e:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001a30:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001a32:	2101      	movs	r1, #1
 8001a34:	4620      	mov	r0, r4
 8001a36:	f7ff ffb0 	bl	800199a <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8001a3a:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 8001a3e:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001a40:	6022      	str	r2, [r4, #0]
 8001a42:	e7f4      	b.n	8001a2e <prvInitialiseNewQueue+0xc>

08001a44 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001a44:	b950      	cbnz	r0, 8001a5c <xQueueGenericCreateStatic+0x18>
 8001a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a4a:	b672      	cpsid	i
 8001a4c:	f383 8811 	msr	BASEPRI, r3
 8001a50:	f3bf 8f6f 	isb	sy
 8001a54:	f3bf 8f4f 	dsb	sy
 8001a58:	b662      	cpsie	i
 8001a5a:	e7fe      	b.n	8001a5a <xQueueGenericCreateStatic+0x16>
	{
 8001a5c:	b510      	push	{r4, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	461c      	mov	r4, r3
		configASSERT( pxStaticQueue != NULL );
 8001a62:	b193      	cbz	r3, 8001a8a <xQueueGenericCreateStatic+0x46>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001a64:	1e0b      	subs	r3, r1, #0
 8001a66:	bf18      	it	ne
 8001a68:	2301      	movne	r3, #1
 8001a6a:	2a00      	cmp	r2, #0
 8001a6c:	bf08      	it	eq
 8001a6e:	f043 0301 	orreq.w	r3, r3, #1
 8001a72:	b9ab      	cbnz	r3, 8001aa0 <xQueueGenericCreateStatic+0x5c>
 8001a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a78:	b672      	cpsid	i
 8001a7a:	f383 8811 	msr	BASEPRI, r3
 8001a7e:	f3bf 8f6f 	isb	sy
 8001a82:	f3bf 8f4f 	dsb	sy
 8001a86:	b662      	cpsie	i
 8001a88:	e7fe      	b.n	8001a88 <xQueueGenericCreateStatic+0x44>
 8001a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a8e:	b672      	cpsid	i
 8001a90:	f383 8811 	msr	BASEPRI, r3
 8001a94:	f3bf 8f6f 	isb	sy
 8001a98:	f3bf 8f4f 	dsb	sy
 8001a9c:	b662      	cpsie	i
		configASSERT( pxStaticQueue != NULL );
 8001a9e:	e7fe      	b.n	8001a9e <xQueueGenericCreateStatic+0x5a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001aa0:	fab1 f381 	clz	r3, r1
 8001aa4:	095b      	lsrs	r3, r3, #5
 8001aa6:	2a00      	cmp	r2, #0
 8001aa8:	bf18      	it	ne
 8001aaa:	f043 0301 	orrne.w	r3, r3, #1
 8001aae:	b953      	cbnz	r3, 8001ac6 <xQueueGenericCreateStatic+0x82>
 8001ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ab4:	b672      	cpsid	i
 8001ab6:	f383 8811 	msr	BASEPRI, r3
 8001aba:	f3bf 8f6f 	isb	sy
 8001abe:	f3bf 8f4f 	dsb	sy
 8001ac2:	b662      	cpsie	i
 8001ac4:	e7fe      	b.n	8001ac4 <xQueueGenericCreateStatic+0x80>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001ac6:	2350      	movs	r3, #80	; 0x50
 8001ac8:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001aca:	9b03      	ldr	r3, [sp, #12]
 8001acc:	2b50      	cmp	r3, #80	; 0x50
 8001ace:	d00a      	beq.n	8001ae6 <xQueueGenericCreateStatic+0xa2>
 8001ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ad4:	b672      	cpsid	i
 8001ad6:	f383 8811 	msr	BASEPRI, r3
 8001ada:	f3bf 8f6f 	isb	sy
 8001ade:	f3bf 8f4f 	dsb	sy
 8001ae2:	b662      	cpsie	i
 8001ae4:	e7fe      	b.n	8001ae4 <xQueueGenericCreateStatic+0xa0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001ae6:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001aee:	9400      	str	r4, [sp, #0]
 8001af0:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8001af4:	f7ff ff95 	bl	8001a22 <prvInitialiseNewQueue>
	}
 8001af8:	4620      	mov	r0, r4
 8001afa:	b004      	add	sp, #16
 8001afc:	bd10      	pop	{r4, pc}

08001afe <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001afe:	b950      	cbnz	r0, 8001b16 <xQueueGenericCreate+0x18>
 8001b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b04:	b672      	cpsid	i
 8001b06:	f383 8811 	msr	BASEPRI, r3
 8001b0a:	f3bf 8f6f 	isb	sy
 8001b0e:	f3bf 8f4f 	dsb	sy
 8001b12:	b662      	cpsie	i
 8001b14:	e7fe      	b.n	8001b14 <xQueueGenericCreate+0x16>
	{
 8001b16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b18:	b083      	sub	sp, #12
 8001b1a:	460c      	mov	r4, r1
 8001b1c:	4615      	mov	r5, r2
 8001b1e:	4607      	mov	r7, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 8001b20:	b1a1      	cbz	r1, 8001b4c <xQueueGenericCreate+0x4e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b22:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001b26:	3050      	adds	r0, #80	; 0x50
 8001b28:	f001 ff3e 	bl	80039a8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8001b2c:	4606      	mov	r6, r0
 8001b2e:	b150      	cbz	r0, 8001b46 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001b30:	2300      	movs	r3, #0
 8001b32:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001b36:	9000      	str	r0, [sp, #0]
 8001b38:	462b      	mov	r3, r5
 8001b3a:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8001b3e:	4621      	mov	r1, r4
 8001b40:	4638      	mov	r0, r7
 8001b42:	f7ff ff6e 	bl	8001a22 <prvInitialiseNewQueue>
	}
 8001b46:	4630      	mov	r0, r6
 8001b48:	b003      	add	sp, #12
 8001b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xQueueSizeInBytes = ( size_t ) 0;
 8001b4c:	4608      	mov	r0, r1
 8001b4e:	e7ea      	b.n	8001b26 <xQueueGenericCreate+0x28>

08001b50 <xQueueGenericSend>:
{
 8001b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b52:	b085      	sub	sp, #20
 8001b54:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8001b56:	b198      	cbz	r0, 8001b80 <xQueueGenericSend+0x30>
 8001b58:	460f      	mov	r7, r1
 8001b5a:	461d      	mov	r5, r3
 8001b5c:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001b5e:	b1d1      	cbz	r1, 8001b96 <xQueueGenericSend+0x46>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001b60:	2d02      	cmp	r5, #2
 8001b62:	d126      	bne.n	8001bb2 <xQueueGenericSend+0x62>
 8001b64:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d023      	beq.n	8001bb2 <xQueueGenericSend+0x62>
 8001b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b6e:	b672      	cpsid	i
 8001b70:	f383 8811 	msr	BASEPRI, r3
 8001b74:	f3bf 8f6f 	isb	sy
 8001b78:	f3bf 8f4f 	dsb	sy
 8001b7c:	b662      	cpsie	i
 8001b7e:	e7fe      	b.n	8001b7e <xQueueGenericSend+0x2e>
 8001b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b84:	b672      	cpsid	i
 8001b86:	f383 8811 	msr	BASEPRI, r3
 8001b8a:	f3bf 8f6f 	isb	sy
 8001b8e:	f3bf 8f4f 	dsb	sy
 8001b92:	b662      	cpsie	i
	configASSERT( pxQueue );
 8001b94:	e7fe      	b.n	8001b94 <xQueueGenericSend+0x44>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001b96:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d0e1      	beq.n	8001b60 <xQueueGenericSend+0x10>
 8001b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ba0:	b672      	cpsid	i
 8001ba2:	f383 8811 	msr	BASEPRI, r3
 8001ba6:	f3bf 8f6f 	isb	sy
 8001baa:	f3bf 8f4f 	dsb	sy
 8001bae:	b662      	cpsie	i
 8001bb0:	e7fe      	b.n	8001bb0 <xQueueGenericSend+0x60>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001bb2:	f001 f825 	bl	8002c00 <xTaskGetSchedulerState>
 8001bb6:	4606      	mov	r6, r0
 8001bb8:	b968      	cbnz	r0, 8001bd6 <xQueueGenericSend+0x86>
 8001bba:	9b01      	ldr	r3, [sp, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d04a      	beq.n	8001c56 <xQueueGenericSend+0x106>
 8001bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bc4:	b672      	cpsid	i
 8001bc6:	f383 8811 	msr	BASEPRI, r3
 8001bca:	f3bf 8f6f 	isb	sy
 8001bce:	f3bf 8f4f 	dsb	sy
 8001bd2:	b662      	cpsie	i
 8001bd4:	e7fe      	b.n	8001bd4 <xQueueGenericSend+0x84>
 8001bd6:	2600      	movs	r6, #0
 8001bd8:	e03d      	b.n	8001c56 <xQueueGenericSend+0x106>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001bda:	462a      	mov	r2, r5
 8001bdc:	4639      	mov	r1, r7
 8001bde:	4620      	mov	r0, r4
 8001be0:	f7ff fe57 	bl	8001892 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001be4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001be6:	b97b      	cbnz	r3, 8001c08 <xQueueGenericSend+0xb8>
					else if( xYieldRequired != pdFALSE )
 8001be8:	b148      	cbz	r0, 8001bfe <xQueueGenericSend+0xae>
						queueYIELD_IF_USING_PREEMPTION();
 8001bea:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bf2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001bf6:	f3bf 8f4f 	dsb	sy
 8001bfa:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8001bfe:	f001 fd6f 	bl	80036e0 <vPortExitCritical>
				return pdPASS;
 8001c02:	2001      	movs	r0, #1
}
 8001c04:	b005      	add	sp, #20
 8001c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001c08:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001c0c:	f000 ff0e 	bl	8002a2c <xTaskRemoveFromEventList>
 8001c10:	2800      	cmp	r0, #0
 8001c12:	d0f4      	beq.n	8001bfe <xQueueGenericSend+0xae>
							queueYIELD_IF_USING_PREEMPTION();
 8001c14:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001c18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c1c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001c20:	f3bf 8f4f 	dsb	sy
 8001c24:	f3bf 8f6f 	isb	sy
 8001c28:	e7e9      	b.n	8001bfe <xQueueGenericSend+0xae>
					taskEXIT_CRITICAL();
 8001c2a:	f001 fd59 	bl	80036e0 <vPortExitCritical>
					return errQUEUE_FULL;
 8001c2e:	2000      	movs	r0, #0
 8001c30:	e7e8      	b.n	8001c04 <xQueueGenericSend+0xb4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001c32:	a802      	add	r0, sp, #8
 8001c34:	f000 ff86 	bl	8002b44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001c38:	2601      	movs	r6, #1
 8001c3a:	e019      	b.n	8001c70 <xQueueGenericSend+0x120>
		prvLockQueue( pxQueue );
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001c42:	e021      	b.n	8001c88 <xQueueGenericSend+0x138>
 8001c44:	2300      	movs	r3, #0
 8001c46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001c4a:	e023      	b.n	8001c94 <xQueueGenericSend+0x144>
				prvUnlockQueue( pxQueue );
 8001c4c:	4620      	mov	r0, r4
 8001c4e:	f7ff fe6d 	bl	800192c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001c52:	f000 fdc5 	bl	80027e0 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8001c56:	f001 fd1d 	bl	8003694 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001c5a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001c5c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d3bb      	bcc.n	8001bda <xQueueGenericSend+0x8a>
 8001c62:	2d02      	cmp	r5, #2
 8001c64:	d0b9      	beq.n	8001bda <xQueueGenericSend+0x8a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001c66:	9b01      	ldr	r3, [sp, #4]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d0de      	beq.n	8001c2a <xQueueGenericSend+0xda>
				else if( xEntryTimeSet == pdFALSE )
 8001c6c:	2e00      	cmp	r6, #0
 8001c6e:	d0e0      	beq.n	8001c32 <xQueueGenericSend+0xe2>
		taskEXIT_CRITICAL();
 8001c70:	f001 fd36 	bl	80036e0 <vPortExitCritical>
		vTaskSuspendAll();
 8001c74:	f000 fd16 	bl	80026a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001c78:	f001 fd0c 	bl	8003694 <vPortEnterCritical>
 8001c7c:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8001c80:	b252      	sxtb	r2, r2
 8001c82:	f1b2 3fff 	cmp.w	r2, #4294967295
 8001c86:	d0d9      	beq.n	8001c3c <xQueueGenericSend+0xec>
 8001c88:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8001c8c:	b252      	sxtb	r2, r2
 8001c8e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8001c92:	d0d7      	beq.n	8001c44 <xQueueGenericSend+0xf4>
 8001c94:	f001 fd24 	bl	80036e0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001c98:	a901      	add	r1, sp, #4
 8001c9a:	a802      	add	r0, sp, #8
 8001c9c:	f000 ff5c 	bl	8002b58 <xTaskCheckForTimeOut>
 8001ca0:	b9d8      	cbnz	r0, 8001cda <xQueueGenericSend+0x18a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001ca2:	4620      	mov	r0, r4
 8001ca4:	f7ff fdd9 	bl	800185a <prvIsQueueFull>
 8001ca8:	2800      	cmp	r0, #0
 8001caa:	d0cf      	beq.n	8001c4c <xQueueGenericSend+0xfc>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001cac:	9901      	ldr	r1, [sp, #4]
 8001cae:	f104 0010 	add.w	r0, r4, #16
 8001cb2:	f000 fe7f 	bl	80029b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001cb6:	4620      	mov	r0, r4
 8001cb8:	f7ff fe38 	bl	800192c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001cbc:	f000 fd90 	bl	80027e0 <xTaskResumeAll>
 8001cc0:	2800      	cmp	r0, #0
 8001cc2:	d1c8      	bne.n	8001c56 <xQueueGenericSend+0x106>
					portYIELD_WITHIN_API();
 8001cc4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001cc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ccc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001cd0:	f3bf 8f4f 	dsb	sy
 8001cd4:	f3bf 8f6f 	isb	sy
 8001cd8:	e7bd      	b.n	8001c56 <xQueueGenericSend+0x106>
			prvUnlockQueue( pxQueue );
 8001cda:	4620      	mov	r0, r4
 8001cdc:	f7ff fe26 	bl	800192c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001ce0:	f000 fd7e 	bl	80027e0 <xTaskResumeAll>
			return errQUEUE_FULL;
 8001ce4:	2000      	movs	r0, #0
 8001ce6:	e78d      	b.n	8001c04 <xQueueGenericSend+0xb4>

08001ce8 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8001ce8:	b148      	cbz	r0, 8001cfe <prvInitialiseMutex+0x16>
	{
 8001cea:	b508      	push	{r3, lr}
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8001cec:	2100      	movs	r1, #0
 8001cee:	6081      	str	r1, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8001cf0:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8001cf2:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	460a      	mov	r2, r1
 8001cf8:	f7ff ff2a 	bl	8001b50 <xQueueGenericSend>
	}
 8001cfc:	bd08      	pop	{r3, pc}
 8001cfe:	4770      	bx	lr

08001d00 <xQueueCreateMutex>:
	{
 8001d00:	b510      	push	{r4, lr}
 8001d02:	4602      	mov	r2, r0
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8001d04:	2100      	movs	r1, #0
 8001d06:	2001      	movs	r0, #1
 8001d08:	f7ff fef9 	bl	8001afe <xQueueGenericCreate>
 8001d0c:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8001d0e:	f7ff ffeb 	bl	8001ce8 <prvInitialiseMutex>
	}
 8001d12:	4620      	mov	r0, r4
 8001d14:	bd10      	pop	{r4, pc}

08001d16 <xQueueCreateMutexStatic>:
	{
 8001d16:	b510      	push	{r4, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	460b      	mov	r3, r1
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8001d1c:	9000      	str	r0, [sp, #0]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	4611      	mov	r1, r2
 8001d22:	2001      	movs	r0, #1
 8001d24:	f7ff fe8e 	bl	8001a44 <xQueueGenericCreateStatic>
 8001d28:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8001d2a:	f7ff ffdd 	bl	8001ce8 <prvInitialiseMutex>
	}
 8001d2e:	4620      	mov	r0, r4
 8001d30:	b002      	add	sp, #8
 8001d32:	bd10      	pop	{r4, pc}

08001d34 <xQueueGiveMutexRecursive>:
	{
 8001d34:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8001d36:	b138      	cbz	r0, 8001d48 <xQueueGiveMutexRecursive+0x14>
 8001d38:	4604      	mov	r4, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8001d3a:	6885      	ldr	r5, [r0, #8]
 8001d3c:	f000 ff5a 	bl	8002bf4 <xTaskGetCurrentTaskHandle>
 8001d40:	4285      	cmp	r5, r0
 8001d42:	d00c      	beq.n	8001d5e <xQueueGiveMutexRecursive+0x2a>
			xReturn = pdFAIL;
 8001d44:	2000      	movs	r0, #0
	}
 8001d46:	bd38      	pop	{r3, r4, r5, pc}
 8001d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d4c:	b672      	cpsid	i
 8001d4e:	f383 8811 	msr	BASEPRI, r3
 8001d52:	f3bf 8f6f 	isb	sy
 8001d56:	f3bf 8f4f 	dsb	sy
 8001d5a:	b662      	cpsie	i
		configASSERT( pxMutex );
 8001d5c:	e7fe      	b.n	8001d5c <xQueueGiveMutexRecursive+0x28>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8001d5e:	68e3      	ldr	r3, [r4, #12]
 8001d60:	3b01      	subs	r3, #1
 8001d62:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8001d64:	b10b      	cbz	r3, 8001d6a <xQueueGiveMutexRecursive+0x36>
			xReturn = pdPASS;
 8001d66:	2001      	movs	r0, #1
		return xReturn;
 8001d68:	e7ed      	b.n	8001d46 <xQueueGiveMutexRecursive+0x12>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4620      	mov	r0, r4
 8001d70:	f7ff feee 	bl	8001b50 <xQueueGenericSend>
			xReturn = pdPASS;
 8001d74:	2001      	movs	r0, #1
 8001d76:	e7e6      	b.n	8001d46 <xQueueGiveMutexRecursive+0x12>

08001d78 <xQueueGenericSendFromISR>:
{
 8001d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8001d7c:	b1a0      	cbz	r0, 8001da8 <xQueueGenericSendFromISR+0x30>
 8001d7e:	460f      	mov	r7, r1
 8001d80:	4616      	mov	r6, r2
 8001d82:	461c      	mov	r4, r3
 8001d84:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001d86:	b1d1      	cbz	r1, 8001dbe <xQueueGenericSendFromISR+0x46>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001d88:	2c02      	cmp	r4, #2
 8001d8a:	d126      	bne.n	8001dda <xQueueGenericSendFromISR+0x62>
 8001d8c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d023      	beq.n	8001dda <xQueueGenericSendFromISR+0x62>
 8001d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d96:	b672      	cpsid	i
 8001d98:	f383 8811 	msr	BASEPRI, r3
 8001d9c:	f3bf 8f6f 	isb	sy
 8001da0:	f3bf 8f4f 	dsb	sy
 8001da4:	b662      	cpsie	i
 8001da6:	e7fe      	b.n	8001da6 <xQueueGenericSendFromISR+0x2e>
 8001da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dac:	b672      	cpsid	i
 8001dae:	f383 8811 	msr	BASEPRI, r3
 8001db2:	f3bf 8f6f 	isb	sy
 8001db6:	f3bf 8f4f 	dsb	sy
 8001dba:	b662      	cpsie	i
	configASSERT( pxQueue );
 8001dbc:	e7fe      	b.n	8001dbc <xQueueGenericSendFromISR+0x44>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001dbe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0e1      	beq.n	8001d88 <xQueueGenericSendFromISR+0x10>
 8001dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dc8:	b672      	cpsid	i
 8001dca:	f383 8811 	msr	BASEPRI, r3
 8001dce:	f3bf 8f6f 	isb	sy
 8001dd2:	f3bf 8f4f 	dsb	sy
 8001dd6:	b662      	cpsie	i
 8001dd8:	e7fe      	b.n	8001dd8 <xQueueGenericSendFromISR+0x60>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001dda:	f001 fd5f 	bl	800389c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001dde:	f3ef 8811 	mrs	r8, BASEPRI
 8001de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001de6:	b672      	cpsid	i
 8001de8:	f383 8811 	msr	BASEPRI, r3
 8001dec:	f3bf 8f6f 	isb	sy
 8001df0:	f3bf 8f4f 	dsb	sy
 8001df4:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001df6:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001df8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d306      	bcc.n	8001e0c <xQueueGenericSendFromISR+0x94>
 8001dfe:	2c02      	cmp	r4, #2
 8001e00:	d004      	beq.n	8001e0c <xQueueGenericSendFromISR+0x94>
			xReturn = errQUEUE_FULL;
 8001e02:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001e04:	f388 8811 	msr	BASEPRI, r8
}
 8001e08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8001e0c:	f895 9045 	ldrb.w	r9, [r5, #69]	; 0x45
 8001e10:	fa4f f989 	sxtb.w	r9, r9
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001e14:	4622      	mov	r2, r4
 8001e16:	4639      	mov	r1, r7
 8001e18:	4628      	mov	r0, r5
 8001e1a:	f7ff fd3a 	bl	8001892 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8001e1e:	f1b9 3fff 	cmp.w	r9, #4294967295
 8001e22:	d006      	beq.n	8001e32 <xQueueGenericSendFromISR+0xba>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001e24:	f109 0301 	add.w	r3, r9, #1
 8001e28:	b25b      	sxtb	r3, r3
 8001e2a:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 8001e2e:	2001      	movs	r0, #1
 8001e30:	e7e8      	b.n	8001e04 <xQueueGenericSendFromISR+0x8c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001e32:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001e34:	b90b      	cbnz	r3, 8001e3a <xQueueGenericSendFromISR+0xc2>
			xReturn = pdPASS;
 8001e36:	2001      	movs	r0, #1
 8001e38:	e7e4      	b.n	8001e04 <xQueueGenericSendFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001e3a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001e3e:	f000 fdf5 	bl	8002a2c <xTaskRemoveFromEventList>
 8001e42:	b118      	cbz	r0, 8001e4c <xQueueGenericSendFromISR+0xd4>
							if( pxHigherPriorityTaskWoken != NULL )
 8001e44:	b126      	cbz	r6, 8001e50 <xQueueGenericSendFromISR+0xd8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001e46:	2001      	movs	r0, #1
 8001e48:	6030      	str	r0, [r6, #0]
 8001e4a:	e7db      	b.n	8001e04 <xQueueGenericSendFromISR+0x8c>
			xReturn = pdPASS;
 8001e4c:	2001      	movs	r0, #1
 8001e4e:	e7d9      	b.n	8001e04 <xQueueGenericSendFromISR+0x8c>
 8001e50:	2001      	movs	r0, #1
 8001e52:	e7d7      	b.n	8001e04 <xQueueGenericSendFromISR+0x8c>

08001e54 <xQueueReceive>:
{
 8001e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e56:	b085      	sub	sp, #20
 8001e58:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8001e5a:	b1a0      	cbz	r0, 8001e86 <xQueueReceive+0x32>
 8001e5c:	460f      	mov	r7, r1
 8001e5e:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001e60:	b1e1      	cbz	r1, 8001e9c <xQueueReceive+0x48>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001e62:	f000 fecd 	bl	8002c00 <xTaskGetSchedulerState>
 8001e66:	4606      	mov	r6, r0
 8001e68:	bb30      	cbnz	r0, 8001eb8 <xQueueReceive+0x64>
 8001e6a:	9b01      	ldr	r3, [sp, #4]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d064      	beq.n	8001f3a <xQueueReceive+0xe6>
	__asm volatile
 8001e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e74:	b672      	cpsid	i
 8001e76:	f383 8811 	msr	BASEPRI, r3
 8001e7a:	f3bf 8f6f 	isb	sy
 8001e7e:	f3bf 8f4f 	dsb	sy
 8001e82:	b662      	cpsie	i
 8001e84:	e7fe      	b.n	8001e84 <xQueueReceive+0x30>
 8001e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e8a:	b672      	cpsid	i
 8001e8c:	f383 8811 	msr	BASEPRI, r3
 8001e90:	f3bf 8f6f 	isb	sy
 8001e94:	f3bf 8f4f 	dsb	sy
 8001e98:	b662      	cpsie	i
	configASSERT( ( pxQueue ) );
 8001e9a:	e7fe      	b.n	8001e9a <xQueueReceive+0x46>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001e9c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d0df      	beq.n	8001e62 <xQueueReceive+0xe>
 8001ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ea6:	b672      	cpsid	i
 8001ea8:	f383 8811 	msr	BASEPRI, r3
 8001eac:	f3bf 8f6f 	isb	sy
 8001eb0:	f3bf 8f4f 	dsb	sy
 8001eb4:	b662      	cpsie	i
 8001eb6:	e7fe      	b.n	8001eb6 <xQueueReceive+0x62>
 8001eb8:	2600      	movs	r6, #0
 8001eba:	e03e      	b.n	8001f3a <xQueueReceive+0xe6>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001ebc:	4639      	mov	r1, r7
 8001ebe:	4620      	mov	r0, r4
 8001ec0:	f7ff fd22 	bl	8001908 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001ec4:	3d01      	subs	r5, #1
 8001ec6:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001ec8:	6923      	ldr	r3, [r4, #16]
 8001eca:	b923      	cbnz	r3, 8001ed6 <xQueueReceive+0x82>
				taskEXIT_CRITICAL();
 8001ecc:	f001 fc08 	bl	80036e0 <vPortExitCritical>
				return pdPASS;
 8001ed0:	2001      	movs	r0, #1
}
 8001ed2:	b005      	add	sp, #20
 8001ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001ed6:	f104 0010 	add.w	r0, r4, #16
 8001eda:	f000 fda7 	bl	8002a2c <xTaskRemoveFromEventList>
 8001ede:	2800      	cmp	r0, #0
 8001ee0:	d0f4      	beq.n	8001ecc <xQueueReceive+0x78>
						queueYIELD_IF_USING_PREEMPTION();
 8001ee2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001ee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001eea:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001eee:	f3bf 8f4f 	dsb	sy
 8001ef2:	f3bf 8f6f 	isb	sy
 8001ef6:	e7e9      	b.n	8001ecc <xQueueReceive+0x78>
					taskEXIT_CRITICAL();
 8001ef8:	f001 fbf2 	bl	80036e0 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8001efc:	2000      	movs	r0, #0
 8001efe:	e7e8      	b.n	8001ed2 <xQueueReceive+0x7e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001f00:	a802      	add	r0, sp, #8
 8001f02:	f000 fe1f 	bl	8002b44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001f06:	2601      	movs	r6, #1
 8001f08:	e021      	b.n	8001f4e <xQueueReceive+0xfa>
		prvLockQueue( pxQueue );
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001f10:	e029      	b.n	8001f66 <xQueueReceive+0x112>
 8001f12:	2300      	movs	r3, #0
 8001f14:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001f18:	e02b      	b.n	8001f72 <xQueueReceive+0x11e>
				prvUnlockQueue( pxQueue );
 8001f1a:	4620      	mov	r0, r4
 8001f1c:	f7ff fd06 	bl	800192c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001f20:	f000 fc5e 	bl	80027e0 <xTaskResumeAll>
 8001f24:	e009      	b.n	8001f3a <xQueueReceive+0xe6>
			prvUnlockQueue( pxQueue );
 8001f26:	4620      	mov	r0, r4
 8001f28:	f7ff fd00 	bl	800192c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001f2c:	f000 fc58 	bl	80027e0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001f30:	4620      	mov	r0, r4
 8001f32:	f7ff fca1 	bl	8001878 <prvIsQueueEmpty>
 8001f36:	2800      	cmp	r0, #0
 8001f38:	d13f      	bne.n	8001fba <xQueueReceive+0x166>
		taskENTER_CRITICAL();
 8001f3a:	f001 fbab 	bl	8003694 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001f3e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001f40:	2d00      	cmp	r5, #0
 8001f42:	d1bb      	bne.n	8001ebc <xQueueReceive+0x68>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001f44:	9b01      	ldr	r3, [sp, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d0d6      	beq.n	8001ef8 <xQueueReceive+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 8001f4a:	2e00      	cmp	r6, #0
 8001f4c:	d0d8      	beq.n	8001f00 <xQueueReceive+0xac>
		taskEXIT_CRITICAL();
 8001f4e:	f001 fbc7 	bl	80036e0 <vPortExitCritical>
		vTaskSuspendAll();
 8001f52:	f000 fba7 	bl	80026a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001f56:	f001 fb9d 	bl	8003694 <vPortEnterCritical>
 8001f5a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001f5e:	b25b      	sxtb	r3, r3
 8001f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f64:	d0d1      	beq.n	8001f0a <xQueueReceive+0xb6>
 8001f66:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001f6a:	b25b      	sxtb	r3, r3
 8001f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f70:	d0cf      	beq.n	8001f12 <xQueueReceive+0xbe>
 8001f72:	f001 fbb5 	bl	80036e0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001f76:	a901      	add	r1, sp, #4
 8001f78:	a802      	add	r0, sp, #8
 8001f7a:	f000 fded 	bl	8002b58 <xTaskCheckForTimeOut>
 8001f7e:	2800      	cmp	r0, #0
 8001f80:	d1d1      	bne.n	8001f26 <xQueueReceive+0xd2>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001f82:	4620      	mov	r0, r4
 8001f84:	f7ff fc78 	bl	8001878 <prvIsQueueEmpty>
 8001f88:	2800      	cmp	r0, #0
 8001f8a:	d0c6      	beq.n	8001f1a <xQueueReceive+0xc6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001f8c:	9901      	ldr	r1, [sp, #4]
 8001f8e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001f92:	f000 fd0f 	bl	80029b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001f96:	4620      	mov	r0, r4
 8001f98:	f7ff fcc8 	bl	800192c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001f9c:	f000 fc20 	bl	80027e0 <xTaskResumeAll>
 8001fa0:	2800      	cmp	r0, #0
 8001fa2:	d1ca      	bne.n	8001f3a <xQueueReceive+0xe6>
					portYIELD_WITHIN_API();
 8001fa4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001fa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fac:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001fb0:	f3bf 8f4f 	dsb	sy
 8001fb4:	f3bf 8f6f 	isb	sy
 8001fb8:	e7bf      	b.n	8001f3a <xQueueReceive+0xe6>
				return errQUEUE_EMPTY;
 8001fba:	2000      	movs	r0, #0
 8001fbc:	e789      	b.n	8001ed2 <xQueueReceive+0x7e>

08001fbe <xQueueSemaphoreTake>:
{
 8001fbe:	b570      	push	{r4, r5, r6, lr}
 8001fc0:	b084      	sub	sp, #16
 8001fc2:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8001fc4:	b168      	cbz	r0, 8001fe2 <xQueueSemaphoreTake+0x24>
 8001fc6:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8001fc8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001fca:	b1ab      	cbz	r3, 8001ff8 <xQueueSemaphoreTake+0x3a>
 8001fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fd0:	b672      	cpsid	i
 8001fd2:	f383 8811 	msr	BASEPRI, r3
 8001fd6:	f3bf 8f6f 	isb	sy
 8001fda:	f3bf 8f4f 	dsb	sy
 8001fde:	b662      	cpsie	i
 8001fe0:	e7fe      	b.n	8001fe0 <xQueueSemaphoreTake+0x22>
 8001fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fe6:	b672      	cpsid	i
 8001fe8:	f383 8811 	msr	BASEPRI, r3
 8001fec:	f3bf 8f6f 	isb	sy
 8001ff0:	f3bf 8f4f 	dsb	sy
 8001ff4:	b662      	cpsie	i
	configASSERT( ( pxQueue ) );
 8001ff6:	e7fe      	b.n	8001ff6 <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001ff8:	f000 fe02 	bl	8002c00 <xTaskGetSchedulerState>
 8001ffc:	4605      	mov	r5, r0
 8001ffe:	b960      	cbnz	r0, 800201a <xQueueSemaphoreTake+0x5c>
 8002000:	9b01      	ldr	r3, [sp, #4]
 8002002:	b16b      	cbz	r3, 8002020 <xQueueSemaphoreTake+0x62>
 8002004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002008:	b672      	cpsid	i
 800200a:	f383 8811 	msr	BASEPRI, r3
 800200e:	f3bf 8f6f 	isb	sy
 8002012:	f3bf 8f4f 	dsb	sy
 8002016:	b662      	cpsie	i
 8002018:	e7fe      	b.n	8002018 <xQueueSemaphoreTake+0x5a>
 800201a:	2600      	movs	r6, #0
 800201c:	4635      	mov	r5, r6
 800201e:	e057      	b.n	80020d0 <xQueueSemaphoreTake+0x112>
 8002020:	4606      	mov	r6, r0
 8002022:	e055      	b.n	80020d0 <xQueueSemaphoreTake+0x112>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002024:	3b01      	subs	r3, #1
 8002026:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002028:	6823      	ldr	r3, [r4, #0]
 800202a:	b13b      	cbz	r3, 800203c <xQueueSemaphoreTake+0x7e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800202c:	6923      	ldr	r3, [r4, #16]
 800202e:	b94b      	cbnz	r3, 8002044 <xQueueSemaphoreTake+0x86>
				taskEXIT_CRITICAL();
 8002030:	f001 fb56 	bl	80036e0 <vPortExitCritical>
				return pdPASS;
 8002034:	2601      	movs	r6, #1
}
 8002036:	4630      	mov	r0, r6
 8002038:	b004      	add	sp, #16
 800203a:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800203c:	f000 fee4 	bl	8002e08 <pvTaskIncrementMutexHeldCount>
 8002040:	60a0      	str	r0, [r4, #8]
 8002042:	e7f3      	b.n	800202c <xQueueSemaphoreTake+0x6e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002044:	f104 0010 	add.w	r0, r4, #16
 8002048:	f000 fcf0 	bl	8002a2c <xTaskRemoveFromEventList>
 800204c:	2800      	cmp	r0, #0
 800204e:	d0ef      	beq.n	8002030 <xQueueSemaphoreTake+0x72>
						queueYIELD_IF_USING_PREEMPTION();
 8002050:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002054:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002058:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800205c:	f3bf 8f4f 	dsb	sy
 8002060:	f3bf 8f6f 	isb	sy
 8002064:	e7e4      	b.n	8002030 <xQueueSemaphoreTake+0x72>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002066:	b156      	cbz	r6, 800207e <xQueueSemaphoreTake+0xc0>
 8002068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800206c:	b672      	cpsid	i
 800206e:	f383 8811 	msr	BASEPRI, r3
 8002072:	f3bf 8f6f 	isb	sy
 8002076:	f3bf 8f4f 	dsb	sy
 800207a:	b662      	cpsie	i
 800207c:	e7fe      	b.n	800207c <xQueueSemaphoreTake+0xbe>
					taskEXIT_CRITICAL();
 800207e:	f001 fb2f 	bl	80036e0 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8002082:	e7d8      	b.n	8002036 <xQueueSemaphoreTake+0x78>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002084:	a802      	add	r0, sp, #8
 8002086:	f000 fd5d 	bl	8002b44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800208a:	2501      	movs	r5, #1
 800208c:	e02a      	b.n	80020e4 <xQueueSemaphoreTake+0x126>
		prvLockQueue( pxQueue );
 800208e:	2300      	movs	r3, #0
 8002090:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002094:	e032      	b.n	80020fc <xQueueSemaphoreTake+0x13e>
 8002096:	2300      	movs	r3, #0
 8002098:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800209c:	e034      	b.n	8002108 <xQueueSemaphoreTake+0x14a>
						taskENTER_CRITICAL();
 800209e:	f001 faf9 	bl	8003694 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80020a2:	68a0      	ldr	r0, [r4, #8]
 80020a4:	f000 fdbc 	bl	8002c20 <xTaskPriorityInherit>
 80020a8:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 80020aa:	f001 fb19 	bl	80036e0 <vPortExitCritical>
 80020ae:	e03b      	b.n	8002128 <xQueueSemaphoreTake+0x16a>
				prvUnlockQueue( pxQueue );
 80020b0:	4620      	mov	r0, r4
 80020b2:	f7ff fc3b 	bl	800192c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80020b6:	f000 fb93 	bl	80027e0 <xTaskResumeAll>
 80020ba:	e009      	b.n	80020d0 <xQueueSemaphoreTake+0x112>
			prvUnlockQueue( pxQueue );
 80020bc:	4620      	mov	r0, r4
 80020be:	f7ff fc35 	bl	800192c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80020c2:	f000 fb8d 	bl	80027e0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80020c6:	4620      	mov	r0, r4
 80020c8:	f7ff fbd6 	bl	8001878 <prvIsQueueEmpty>
 80020cc:	2800      	cmp	r0, #0
 80020ce:	d142      	bne.n	8002156 <xQueueSemaphoreTake+0x198>
		taskENTER_CRITICAL();
 80020d0:	f001 fae0 	bl	8003694 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80020d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1a4      	bne.n	8002024 <xQueueSemaphoreTake+0x66>
				if( xTicksToWait == ( TickType_t ) 0 )
 80020da:	9b01      	ldr	r3, [sp, #4]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0c2      	beq.n	8002066 <xQueueSemaphoreTake+0xa8>
				else if( xEntryTimeSet == pdFALSE )
 80020e0:	2d00      	cmp	r5, #0
 80020e2:	d0cf      	beq.n	8002084 <xQueueSemaphoreTake+0xc6>
		taskEXIT_CRITICAL();
 80020e4:	f001 fafc 	bl	80036e0 <vPortExitCritical>
		vTaskSuspendAll();
 80020e8:	f000 fadc 	bl	80026a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80020ec:	f001 fad2 	bl	8003694 <vPortEnterCritical>
 80020f0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80020f4:	b25b      	sxtb	r3, r3
 80020f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020fa:	d0c8      	beq.n	800208e <xQueueSemaphoreTake+0xd0>
 80020fc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002100:	b25b      	sxtb	r3, r3
 8002102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002106:	d0c6      	beq.n	8002096 <xQueueSemaphoreTake+0xd8>
 8002108:	f001 faea 	bl	80036e0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800210c:	a901      	add	r1, sp, #4
 800210e:	a802      	add	r0, sp, #8
 8002110:	f000 fd22 	bl	8002b58 <xTaskCheckForTimeOut>
 8002114:	2800      	cmp	r0, #0
 8002116:	d1d1      	bne.n	80020bc <xQueueSemaphoreTake+0xfe>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002118:	4620      	mov	r0, r4
 800211a:	f7ff fbad 	bl	8001878 <prvIsQueueEmpty>
 800211e:	2800      	cmp	r0, #0
 8002120:	d0c6      	beq.n	80020b0 <xQueueSemaphoreTake+0xf2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002122:	6823      	ldr	r3, [r4, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0ba      	beq.n	800209e <xQueueSemaphoreTake+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002128:	9901      	ldr	r1, [sp, #4]
 800212a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800212e:	f000 fc41 	bl	80029b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002132:	4620      	mov	r0, r4
 8002134:	f7ff fbfa 	bl	800192c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002138:	f000 fb52 	bl	80027e0 <xTaskResumeAll>
 800213c:	2800      	cmp	r0, #0
 800213e:	d1c7      	bne.n	80020d0 <xQueueSemaphoreTake+0x112>
					portYIELD_WITHIN_API();
 8002140:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002144:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002148:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800214c:	f3bf 8f4f 	dsb	sy
 8002150:	f3bf 8f6f 	isb	sy
 8002154:	e7bc      	b.n	80020d0 <xQueueSemaphoreTake+0x112>
					if( xInheritanceOccurred != pdFALSE )
 8002156:	b90e      	cbnz	r6, 800215c <xQueueSemaphoreTake+0x19e>
				return errQUEUE_EMPTY;
 8002158:	2600      	movs	r6, #0
 800215a:	e76c      	b.n	8002036 <xQueueSemaphoreTake+0x78>
						taskENTER_CRITICAL();
 800215c:	f001 fa9a 	bl	8003694 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002160:	4620      	mov	r0, r4
 8002162:	f7ff fb72 	bl	800184a <prvGetDisinheritPriorityAfterTimeout>
 8002166:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002168:	68a0      	ldr	r0, [r4, #8]
 800216a:	f000 fdf7 	bl	8002d5c <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800216e:	f001 fab7 	bl	80036e0 <vPortExitCritical>
 8002172:	e7f1      	b.n	8002158 <xQueueSemaphoreTake+0x19a>

08002174 <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 8002174:	b180      	cbz	r0, 8002198 <xQueueTakeMutexRecursive+0x24>
	{
 8002176:	b570      	push	{r4, r5, r6, lr}
 8002178:	460c      	mov	r4, r1
 800217a:	4605      	mov	r5, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800217c:	6886      	ldr	r6, [r0, #8]
 800217e:	f000 fd39 	bl	8002bf4 <xTaskGetCurrentTaskHandle>
 8002182:	4286      	cmp	r6, r0
 8002184:	d013      	beq.n	80021ae <xQueueTakeMutexRecursive+0x3a>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8002186:	4621      	mov	r1, r4
 8002188:	4628      	mov	r0, r5
 800218a:	f7ff ff18 	bl	8001fbe <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 800218e:	b190      	cbz	r0, 80021b6 <xQueueTakeMutexRecursive+0x42>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8002190:	68eb      	ldr	r3, [r5, #12]
 8002192:	3301      	adds	r3, #1
 8002194:	60eb      	str	r3, [r5, #12]
		return xReturn;
 8002196:	e00e      	b.n	80021b6 <xQueueTakeMutexRecursive+0x42>
 8002198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800219c:	b672      	cpsid	i
 800219e:	f383 8811 	msr	BASEPRI, r3
 80021a2:	f3bf 8f6f 	isb	sy
 80021a6:	f3bf 8f4f 	dsb	sy
 80021aa:	b662      	cpsie	i
		configASSERT( pxMutex );
 80021ac:	e7fe      	b.n	80021ac <xQueueTakeMutexRecursive+0x38>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80021ae:	68eb      	ldr	r3, [r5, #12]
 80021b0:	3301      	adds	r3, #1
 80021b2:	60eb      	str	r3, [r5, #12]
			xReturn = pdPASS;
 80021b4:	2001      	movs	r0, #1
	}
 80021b6:	bd70      	pop	{r4, r5, r6, pc}

080021b8 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80021b8:	2300      	movs	r3, #0
 80021ba:	2b07      	cmp	r3, #7
 80021bc:	d80c      	bhi.n	80021d8 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80021be:	4a07      	ldr	r2, [pc, #28]	; (80021dc <vQueueAddToRegistry+0x24>)
 80021c0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80021c4:	b10a      	cbz	r2, 80021ca <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80021c6:	3301      	adds	r3, #1
 80021c8:	e7f7      	b.n	80021ba <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80021ca:	4a04      	ldr	r2, [pc, #16]	; (80021dc <vQueueAddToRegistry+0x24>)
 80021cc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80021d0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80021d4:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80021d6:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	20000cac 	.word	0x20000cac

080021e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80021e0:	b570      	push	{r4, r5, r6, lr}
 80021e2:	4604      	mov	r4, r0
 80021e4:	460d      	mov	r5, r1
 80021e6:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80021e8:	f001 fa54 	bl	8003694 <vPortEnterCritical>
 80021ec:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80021f0:	b25b      	sxtb	r3, r3
 80021f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f6:	d00d      	beq.n	8002214 <vQueueWaitForMessageRestricted+0x34>
 80021f8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80021fc:	b25b      	sxtb	r3, r3
 80021fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002202:	d00b      	beq.n	800221c <vQueueWaitForMessageRestricted+0x3c>
 8002204:	f001 fa6c 	bl	80036e0 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002208:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800220a:	b15b      	cbz	r3, 8002224 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800220c:	4620      	mov	r0, r4
 800220e:	f7ff fb8d 	bl	800192c <prvUnlockQueue>
	}
 8002212:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8002214:	2300      	movs	r3, #0
 8002216:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800221a:	e7ed      	b.n	80021f8 <vQueueWaitForMessageRestricted+0x18>
 800221c:	2300      	movs	r3, #0
 800221e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002222:	e7ef      	b.n	8002204 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002224:	4632      	mov	r2, r6
 8002226:	4629      	mov	r1, r5
 8002228:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800222c:	f000 fbde 	bl	80029ec <vTaskPlaceOnEventListRestricted>
 8002230:	e7ec      	b.n	800220c <vQueueWaitForMessageRestricted+0x2c>
	...

08002234 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002234:	4b07      	ldr	r3, [pc, #28]	; (8002254 <prvResetNextTaskUnblockTime+0x20>)
 8002236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	b923      	cbnz	r3, 8002246 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800223c:	4b05      	ldr	r3, [pc, #20]	; (8002254 <prvResetNextTaskUnblockTime+0x20>)
 800223e:	f04f 32ff 	mov.w	r2, #4294967295
 8002242:	62da      	str	r2, [r3, #44]	; 0x2c
 8002244:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002246:	4b03      	ldr	r3, [pc, #12]	; (8002254 <prvResetNextTaskUnblockTime+0x20>)
 8002248:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800224a:	68d2      	ldr	r2, [r2, #12]
 800224c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800224e:	6852      	ldr	r2, [r2, #4]
 8002250:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 8002252:	4770      	bx	lr
 8002254:	20000cec 	.word	0x20000cec

08002258 <prvInitialiseNewTask>:
{
 8002258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800225c:	4680      	mov	r8, r0
 800225e:	460d      	mov	r5, r1
 8002260:	4617      	mov	r7, r2
 8002262:	4699      	mov	r9, r3
 8002264:	9e08      	ldr	r6, [sp, #32]
 8002266:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800226a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800226c:	0092      	lsls	r2, r2, #2
 800226e:	21a5      	movs	r1, #165	; 0xa5
 8002270:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002272:	f007 fde0 	bl	8009e36 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002276:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002278:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 800227c:	443a      	add	r2, r7
 800227e:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002282:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8002286:	b3a5      	cbz	r5, 80022f2 <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002288:	f04f 0c00 	mov.w	ip, #0
 800228c:	f1bc 0f0f 	cmp.w	ip, #15
 8002290:	d809      	bhi.n	80022a6 <prvInitialiseNewTask+0x4e>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002292:	f815 300c 	ldrb.w	r3, [r5, ip]
 8002296:	eb04 020c 	add.w	r2, r4, ip
 800229a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 800229e:	b113      	cbz	r3, 80022a6 <prvInitialiseNewTask+0x4e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80022a0:	f10c 0c01 	add.w	ip, ip, #1
 80022a4:	e7f2      	b.n	800228c <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80022a6:	2300      	movs	r3, #0
 80022a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80022ac:	2e37      	cmp	r6, #55	; 0x37
 80022ae:	d900      	bls.n	80022b2 <prvInitialiseNewTask+0x5a>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80022b0:	2637      	movs	r6, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 80022b2:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80022b4:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80022b6:	2500      	movs	r5, #0
 80022b8:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80022ba:	1d20      	adds	r0, r4, #4
 80022bc:	f7ff fa8b 	bl	80017d6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80022c0:	f104 0018 	add.w	r0, r4, #24
 80022c4:	f7ff fa87 	bl	80017d6 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80022c8:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022ca:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
 80022ce:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80022d0:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 80022d2:	6565      	str	r5, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80022d4:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80022d8:	464a      	mov	r2, r9
 80022da:	4641      	mov	r1, r8
 80022dc:	4638      	mov	r0, r7
 80022de:	f001 f9af 	bl	8003640 <pxPortInitialiseStack>
 80022e2:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80022e4:	f1ba 0f00 	cmp.w	sl, #0
 80022e8:	d001      	beq.n	80022ee <prvInitialiseNewTask+0x96>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80022ea:	f8ca 4000 	str.w	r4, [sl]
}
 80022ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80022f2:	2300      	movs	r3, #0
 80022f4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 80022f8:	e7d8      	b.n	80022ac <prvInitialiseNewTask+0x54>
	...

080022fc <prvInitialiseTaskLists>:
{
 80022fc:	b570      	push	{r4, r5, r6, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80022fe:	2400      	movs	r4, #0
 8002300:	e007      	b.n	8002312 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002302:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8002306:	0093      	lsls	r3, r2, #2
 8002308:	4810      	ldr	r0, [pc, #64]	; (800234c <prvInitialiseTaskLists+0x50>)
 800230a:	4418      	add	r0, r3
 800230c:	f7ff fa58 	bl	80017c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002310:	3401      	adds	r4, #1
 8002312:	2c37      	cmp	r4, #55	; 0x37
 8002314:	d9f5      	bls.n	8002302 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8002316:	4c0e      	ldr	r4, [pc, #56]	; (8002350 <prvInitialiseTaskLists+0x54>)
 8002318:	f504 6692 	add.w	r6, r4, #1168	; 0x490
 800231c:	4630      	mov	r0, r6
 800231e:	f7ff fa4f 	bl	80017c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002322:	f204 45a4 	addw	r5, r4, #1188	; 0x4a4
 8002326:	4628      	mov	r0, r5
 8002328:	f7ff fa4a 	bl	80017c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800232c:	f104 0014 	add.w	r0, r4, #20
 8002330:	f7ff fa46 	bl	80017c0 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8002334:	f504 6097 	add.w	r0, r4, #1208	; 0x4b8
 8002338:	f7ff fa42 	bl	80017c0 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800233c:	4620      	mov	r0, r4
 800233e:	f7ff fa3f 	bl	80017c0 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8002342:	62a6      	str	r6, [r4, #40]	; 0x28
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002344:	f8c4 54cc 	str.w	r5, [r4, #1228]	; 0x4cc
}
 8002348:	bd70      	pop	{r4, r5, r6, pc}
 800234a:	bf00      	nop
 800234c:	20000d1c 	.word	0x20000d1c
 8002350:	20000cec 	.word	0x20000cec

08002354 <prvAddNewTaskToReadyList>:
{
 8002354:	b538      	push	{r3, r4, r5, lr}
 8002356:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8002358:	f001 f99c 	bl	8003694 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800235c:	4b28      	ldr	r3, [pc, #160]	; (8002400 <prvAddNewTaskToReadyList+0xac>)
 800235e:	f8d3 24d0 	ldr.w	r2, [r3, #1232]	; 0x4d0
 8002362:	3201      	adds	r2, #1
 8002364:	f8c3 24d0 	str.w	r2, [r3, #1232]	; 0x4d0
		if( pxCurrentTCB == NULL )
 8002368:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800236c:	b173      	cbz	r3, 800238c <prvAddNewTaskToReadyList+0x38>
			if( xSchedulerRunning == pdFALSE )
 800236e:	4b24      	ldr	r3, [pc, #144]	; (8002400 <prvAddNewTaskToReadyList+0xac>)
 8002370:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 8002374:	b98b      	cbnz	r3, 800239a <prvAddNewTaskToReadyList+0x46>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002376:	4b22      	ldr	r3, [pc, #136]	; (8002400 <prvAddNewTaskToReadyList+0xac>)
 8002378:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800237c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800237e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002380:	429a      	cmp	r2, r3
 8002382:	d80a      	bhi.n	800239a <prvAddNewTaskToReadyList+0x46>
					pxCurrentTCB = pxNewTCB;
 8002384:	4b1e      	ldr	r3, [pc, #120]	; (8002400 <prvAddNewTaskToReadyList+0xac>)
 8002386:	f8c3 44d4 	str.w	r4, [r3, #1236]	; 0x4d4
 800238a:	e006      	b.n	800239a <prvAddNewTaskToReadyList+0x46>
			pxCurrentTCB = pxNewTCB;
 800238c:	4b1c      	ldr	r3, [pc, #112]	; (8002400 <prvAddNewTaskToReadyList+0xac>)
 800238e:	f8c3 44d4 	str.w	r4, [r3, #1236]	; 0x4d4
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002392:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
 8002396:	2b01      	cmp	r3, #1
 8002398:	d02e      	beq.n	80023f8 <prvAddNewTaskToReadyList+0xa4>
		uxTaskNumber++;
 800239a:	4a19      	ldr	r2, [pc, #100]	; (8002400 <prvAddNewTaskToReadyList+0xac>)
 800239c:	f8d2 34dc 	ldr.w	r3, [r2, #1244]	; 0x4dc
 80023a0:	3301      	adds	r3, #1
 80023a2:	f8c2 34dc 	str.w	r3, [r2, #1244]	; 0x4dc
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80023a6:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 80023a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80023aa:	f8d2 24e0 	ldr.w	r2, [r2, #1248]	; 0x4e0
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d902      	bls.n	80023b8 <prvAddNewTaskToReadyList+0x64>
 80023b2:	4a13      	ldr	r2, [pc, #76]	; (8002400 <prvAddNewTaskToReadyList+0xac>)
 80023b4:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
 80023b8:	4d11      	ldr	r5, [pc, #68]	; (8002400 <prvAddNewTaskToReadyList+0xac>)
 80023ba:	f105 0030 	add.w	r0, r5, #48	; 0x30
 80023be:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80023c2:	1d21      	adds	r1, r4, #4
 80023c4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80023c8:	f7ff fa08 	bl	80017dc <vListInsertEnd>
	taskEXIT_CRITICAL();
 80023cc:	f001 f988 	bl	80036e0 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80023d0:	f8d5 34d8 	ldr.w	r3, [r5, #1240]	; 0x4d8
 80023d4:	b17b      	cbz	r3, 80023f6 <prvAddNewTaskToReadyList+0xa2>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80023d6:	f8d5 34d4 	ldr.w	r3, [r5, #1236]	; 0x4d4
 80023da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80023de:	429a      	cmp	r2, r3
 80023e0:	d209      	bcs.n	80023f6 <prvAddNewTaskToReadyList+0xa2>
			taskYIELD_IF_USING_PREEMPTION();
 80023e2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80023e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023ea:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80023ee:	f3bf 8f4f 	dsb	sy
 80023f2:	f3bf 8f6f 	isb	sy
}
 80023f6:	bd38      	pop	{r3, r4, r5, pc}
				prvInitialiseTaskLists();
 80023f8:	f7ff ff80 	bl	80022fc <prvInitialiseTaskLists>
 80023fc:	e7cd      	b.n	800239a <prvAddNewTaskToReadyList+0x46>
 80023fe:	bf00      	nop
 8002400:	20000cec 	.word	0x20000cec

08002404 <prvDeleteTCB>:
	{
 8002404:	b510      	push	{r4, lr}
 8002406:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002408:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
 800240c:	b173      	cbz	r3, 800242c <prvDeleteTCB+0x28>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800240e:	2b01      	cmp	r3, #1
 8002410:	d013      	beq.n	800243a <prvDeleteTCB+0x36>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002412:	2b02      	cmp	r3, #2
 8002414:	d010      	beq.n	8002438 <prvDeleteTCB+0x34>
 8002416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800241a:	b672      	cpsid	i
 800241c:	f383 8811 	msr	BASEPRI, r3
 8002420:	f3bf 8f6f 	isb	sy
 8002424:	f3bf 8f4f 	dsb	sy
 8002428:	b662      	cpsie	i
 800242a:	e7fe      	b.n	800242a <prvDeleteTCB+0x26>
				vPortFree( pxTCB->pxStack );
 800242c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800242e:	f001 fb2d 	bl	8003a8c <vPortFree>
				vPortFree( pxTCB );
 8002432:	4620      	mov	r0, r4
 8002434:	f001 fb2a 	bl	8003a8c <vPortFree>
	}
 8002438:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 800243a:	f001 fb27 	bl	8003a8c <vPortFree>
 800243e:	e7fb      	b.n	8002438 <prvDeleteTCB+0x34>

08002440 <prvCheckTasksWaitingTermination>:
{
 8002440:	b538      	push	{r3, r4, r5, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002442:	e017      	b.n	8002474 <prvCheckTasksWaitingTermination+0x34>
			taskENTER_CRITICAL();
 8002444:	f001 f926 	bl	8003694 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002448:	4c0d      	ldr	r4, [pc, #52]	; (8002480 <prvCheckTasksWaitingTermination+0x40>)
 800244a:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
 800244e:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002450:	1d28      	adds	r0, r5, #4
 8002452:	f7ff f9e7 	bl	8001824 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002456:	f8d4 34d0 	ldr.w	r3, [r4, #1232]	; 0x4d0
 800245a:	3b01      	subs	r3, #1
 800245c:	f8c4 34d0 	str.w	r3, [r4, #1232]	; 0x4d0
				--uxDeletedTasksWaitingCleanUp;
 8002460:	f8d4 34e4 	ldr.w	r3, [r4, #1252]	; 0x4e4
 8002464:	3b01      	subs	r3, #1
 8002466:	f8c4 34e4 	str.w	r3, [r4, #1252]	; 0x4e4
			taskEXIT_CRITICAL();
 800246a:	f001 f939 	bl	80036e0 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800246e:	4628      	mov	r0, r5
 8002470:	f7ff ffc8 	bl	8002404 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002474:	4b02      	ldr	r3, [pc, #8]	; (8002480 <prvCheckTasksWaitingTermination+0x40>)
 8002476:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1e2      	bne.n	8002444 <prvCheckTasksWaitingTermination+0x4>
}
 800247e:	bd38      	pop	{r3, r4, r5, pc}
 8002480:	20000cec 	.word	0x20000cec

08002484 <prvIdleTask>:
{
 8002484:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8002486:	f7ff ffdb 	bl	8002440 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800248a:	4b07      	ldr	r3, [pc, #28]	; (80024a8 <prvIdleTask+0x24>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	2b01      	cmp	r3, #1
 8002490:	d9f9      	bls.n	8002486 <prvIdleTask+0x2>
				taskYIELD();
 8002492:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800249a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800249e:	f3bf 8f4f 	dsb	sy
 80024a2:	f3bf 8f6f 	isb	sy
 80024a6:	e7ee      	b.n	8002486 <prvIdleTask+0x2>
 80024a8:	20000cec 	.word	0x20000cec

080024ac <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80024ac:	b570      	push	{r4, r5, r6, lr}
 80024ae:	4604      	mov	r4, r0
 80024b0:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80024b2:	4b1a      	ldr	r3, [pc, #104]	; (800251c <prvAddCurrentTaskToDelayedList+0x70>)
 80024b4:	f8d3 64e8 	ldr.w	r6, [r3, #1256]	; 0x4e8
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80024b8:	f8d3 04d4 	ldr.w	r0, [r3, #1236]	; 0x4d4
 80024bc:	3004      	adds	r0, #4
 80024be:	f7ff f9b1 	bl	8001824 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80024c2:	f1b4 3fff 	cmp.w	r4, #4294967295
 80024c6:	bf14      	ite	ne
 80024c8:	2300      	movne	r3, #0
 80024ca:	2301      	moveq	r3, #1
 80024cc:	2d00      	cmp	r5, #0
 80024ce:	bf08      	it	eq
 80024d0:	2300      	moveq	r3, #0
 80024d2:	b97b      	cbnz	r3, 80024f4 <prvAddCurrentTaskToDelayedList+0x48>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80024d4:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80024d6:	4b11      	ldr	r3, [pc, #68]	; (800251c <prvAddCurrentTaskToDelayedList+0x70>)
 80024d8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 80024dc:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80024de:	42a6      	cmp	r6, r4
 80024e0:	d90f      	bls.n	8002502 <prvAddCurrentTaskToDelayedList+0x56>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80024e2:	4b0e      	ldr	r3, [pc, #56]	; (800251c <prvAddCurrentTaskToDelayedList+0x70>)
 80024e4:	f8d3 04cc 	ldr.w	r0, [r3, #1228]	; 0x4cc
 80024e8:	f8d3 14d4 	ldr.w	r1, [r3, #1236]	; 0x4d4
 80024ec:	3104      	adds	r1, #4
 80024ee:	f7ff f980 	bl	80017f2 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80024f2:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80024f4:	4809      	ldr	r0, [pc, #36]	; (800251c <prvAddCurrentTaskToDelayedList+0x70>)
 80024f6:	f8d0 14d4 	ldr.w	r1, [r0, #1236]	; 0x4d4
 80024fa:	3104      	adds	r1, #4
 80024fc:	f7ff f96e 	bl	80017dc <vListInsertEnd>
 8002500:	e7f7      	b.n	80024f2 <prvAddCurrentTaskToDelayedList+0x46>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002502:	4d06      	ldr	r5, [pc, #24]	; (800251c <prvAddCurrentTaskToDelayedList+0x70>)
 8002504:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8002506:	f8d5 14d4 	ldr.w	r1, [r5, #1236]	; 0x4d4
 800250a:	3104      	adds	r1, #4
 800250c:	f7ff f971 	bl	80017f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002510:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002512:	42a3      	cmp	r3, r4
 8002514:	d9ed      	bls.n	80024f2 <prvAddCurrentTaskToDelayedList+0x46>
					xNextTaskUnblockTime = xTimeToWake;
 8002516:	62ec      	str	r4, [r5, #44]	; 0x2c
}
 8002518:	e7eb      	b.n	80024f2 <prvAddCurrentTaskToDelayedList+0x46>
 800251a:	bf00      	nop
 800251c:	20000cec 	.word	0x20000cec

08002520 <xTaskCreateStatic>:
	{
 8002520:	b530      	push	{r4, r5, lr}
 8002522:	b087      	sub	sp, #28
 8002524:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8002526:	b18c      	cbz	r4, 800254c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8002528:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800252a:	b1d5      	cbz	r5, 8002562 <xTaskCreateStatic+0x42>
			volatile size_t xSize = sizeof( StaticTask_t );
 800252c:	255c      	movs	r5, #92	; 0x5c
 800252e:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002530:	9d04      	ldr	r5, [sp, #16]
 8002532:	2d5c      	cmp	r5, #92	; 0x5c
 8002534:	d020      	beq.n	8002578 <xTaskCreateStatic+0x58>
 8002536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800253a:	b672      	cpsid	i
 800253c:	f383 8811 	msr	BASEPRI, r3
 8002540:	f3bf 8f6f 	isb	sy
 8002544:	f3bf 8f4f 	dsb	sy
 8002548:	b662      	cpsie	i
 800254a:	e7fe      	b.n	800254a <xTaskCreateStatic+0x2a>
 800254c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002550:	b672      	cpsid	i
 8002552:	f383 8811 	msr	BASEPRI, r3
 8002556:	f3bf 8f6f 	isb	sy
 800255a:	f3bf 8f4f 	dsb	sy
 800255e:	b662      	cpsie	i
		configASSERT( puxStackBuffer != NULL );
 8002560:	e7fe      	b.n	8002560 <xTaskCreateStatic+0x40>
 8002562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002566:	b672      	cpsid	i
 8002568:	f383 8811 	msr	BASEPRI, r3
 800256c:	f3bf 8f6f 	isb	sy
 8002570:	f3bf 8f4f 	dsb	sy
 8002574:	b662      	cpsie	i
		configASSERT( pxTaskBuffer != NULL );
 8002576:	e7fe      	b.n	8002576 <xTaskCreateStatic+0x56>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002578:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800257a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800257c:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800257e:	2402      	movs	r4, #2
 8002580:	f885 4059 	strb.w	r4, [r5, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002584:	2400      	movs	r4, #0
 8002586:	9403      	str	r4, [sp, #12]
 8002588:	9502      	str	r5, [sp, #8]
 800258a:	ac05      	add	r4, sp, #20
 800258c:	9401      	str	r4, [sp, #4]
 800258e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002590:	9400      	str	r4, [sp, #0]
 8002592:	f7ff fe61 	bl	8002258 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002596:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002598:	f7ff fedc 	bl	8002354 <prvAddNewTaskToReadyList>
	}
 800259c:	9805      	ldr	r0, [sp, #20]
 800259e:	b007      	add	sp, #28
 80025a0:	bd30      	pop	{r4, r5, pc}

080025a2 <xTaskCreate>:
	{
 80025a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80025a6:	b085      	sub	sp, #20
 80025a8:	4607      	mov	r7, r0
 80025aa:	4688      	mov	r8, r1
 80025ac:	4614      	mov	r4, r2
 80025ae:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80025b0:	0090      	lsls	r0, r2, #2
 80025b2:	f001 f9f9 	bl	80039a8 <pvPortMalloc>
			if( pxStack != NULL )
 80025b6:	b300      	cbz	r0, 80025fa <xTaskCreate+0x58>
 80025b8:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80025ba:	205c      	movs	r0, #92	; 0x5c
 80025bc:	f001 f9f4 	bl	80039a8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80025c0:	4605      	mov	r5, r0
 80025c2:	b1b0      	cbz	r0, 80025f2 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 80025c4:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 80025c8:	b1e5      	cbz	r5, 8002604 <xTaskCreate+0x62>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80025ca:	2300      	movs	r3, #0
 80025cc:	f885 3059 	strb.w	r3, [r5, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80025d0:	9303      	str	r3, [sp, #12]
 80025d2:	9502      	str	r5, [sp, #8]
 80025d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80025d6:	9301      	str	r3, [sp, #4]
 80025d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	4633      	mov	r3, r6
 80025de:	4622      	mov	r2, r4
 80025e0:	4641      	mov	r1, r8
 80025e2:	4638      	mov	r0, r7
 80025e4:	f7ff fe38 	bl	8002258 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80025e8:	4628      	mov	r0, r5
 80025ea:	f7ff feb3 	bl	8002354 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80025ee:	2001      	movs	r0, #1
 80025f0:	e005      	b.n	80025fe <xTaskCreate+0x5c>
					vPortFree( pxStack );
 80025f2:	4648      	mov	r0, r9
 80025f4:	f001 fa4a 	bl	8003a8c <vPortFree>
 80025f8:	e7e6      	b.n	80025c8 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80025fa:	f04f 30ff 	mov.w	r0, #4294967295
	}
 80025fe:	b005      	add	sp, #20
 8002600:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002604:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8002608:	e7f9      	b.n	80025fe <xTaskCreate+0x5c>
	...

0800260c <vTaskStartScheduler>:
{
 800260c:	b510      	push	{r4, lr}
 800260e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002610:	2400      	movs	r4, #0
 8002612:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002614:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002616:	aa07      	add	r2, sp, #28
 8002618:	a906      	add	r1, sp, #24
 800261a:	a805      	add	r0, sp, #20
 800261c:	f7ff f822 	bl	8001664 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002620:	9b05      	ldr	r3, [sp, #20]
 8002622:	9302      	str	r3, [sp, #8]
 8002624:	9b06      	ldr	r3, [sp, #24]
 8002626:	9301      	str	r3, [sp, #4]
 8002628:	9400      	str	r4, [sp, #0]
 800262a:	4623      	mov	r3, r4
 800262c:	9a07      	ldr	r2, [sp, #28]
 800262e:	491a      	ldr	r1, [pc, #104]	; (8002698 <vTaskStartScheduler+0x8c>)
 8002630:	481a      	ldr	r0, [pc, #104]	; (800269c <vTaskStartScheduler+0x90>)
 8002632:	f7ff ff75 	bl	8002520 <xTaskCreateStatic>
 8002636:	4b1a      	ldr	r3, [pc, #104]	; (80026a0 <vTaskStartScheduler+0x94>)
 8002638:	f8c3 04f0 	str.w	r0, [r3, #1264]	; 0x4f0
		if( xIdleTaskHandle != NULL )
 800263c:	b140      	cbz	r0, 8002650 <vTaskStartScheduler+0x44>
			xReturn = xTimerCreateTimerTask();
 800263e:	f000 fdd5 	bl	80031ec <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8002642:	2801      	cmp	r0, #1
 8002644:	d006      	beq.n	8002654 <vTaskStartScheduler+0x48>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002646:	f1b0 3fff 	cmp.w	r0, #4294967295
 800264a:	d01a      	beq.n	8002682 <vTaskStartScheduler+0x76>
}
 800264c:	b008      	add	sp, #32
 800264e:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 8002650:	2000      	movs	r0, #0
 8002652:	e7f6      	b.n	8002642 <vTaskStartScheduler+0x36>
 8002654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002658:	b672      	cpsid	i
 800265a:	f383 8811 	msr	BASEPRI, r3
 800265e:	f3bf 8f6f 	isb	sy
 8002662:	f3bf 8f4f 	dsb	sy
 8002666:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8002668:	4b0d      	ldr	r3, [pc, #52]	; (80026a0 <vTaskStartScheduler+0x94>)
 800266a:	f04f 32ff 	mov.w	r2, #4294967295
 800266e:	62da      	str	r2, [r3, #44]	; 0x2c
		xSchedulerRunning = pdTRUE;
 8002670:	2201      	movs	r2, #1
 8002672:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002676:	2200      	movs	r2, #0
 8002678:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
		if( xPortStartScheduler() != pdFALSE )
 800267c:	f001 f8a6 	bl	80037cc <xPortStartScheduler>
 8002680:	e7e4      	b.n	800264c <vTaskStartScheduler+0x40>
 8002682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002686:	b672      	cpsid	i
 8002688:	f383 8811 	msr	BASEPRI, r3
 800268c:	f3bf 8f6f 	isb	sy
 8002690:	f3bf 8f4f 	dsb	sy
 8002694:	b662      	cpsie	i
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002696:	e7fe      	b.n	8002696 <vTaskStartScheduler+0x8a>
 8002698:	0800ec1c 	.word	0x0800ec1c
 800269c:	08002485 	.word	0x08002485
 80026a0:	20000cec 	.word	0x20000cec

080026a4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80026a4:	4a03      	ldr	r2, [pc, #12]	; (80026b4 <vTaskSuspendAll+0x10>)
 80026a6:	f8d2 34ec 	ldr.w	r3, [r2, #1260]	; 0x4ec
 80026aa:	3301      	adds	r3, #1
 80026ac:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
}
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	20000cec 	.word	0x20000cec

080026b8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80026b8:	4b01      	ldr	r3, [pc, #4]	; (80026c0 <xTaskGetTickCount+0x8>)
 80026ba:	f8d3 04e8 	ldr.w	r0, [r3, #1256]	; 0x4e8
}
 80026be:	4770      	bx	lr
 80026c0:	20000cec 	.word	0x20000cec

080026c4 <xTaskIncrementTick>:
{
 80026c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80026c8:	4b44      	ldr	r3, [pc, #272]	; (80027dc <xTaskIncrementTick+0x118>)
 80026ca:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d172      	bne.n	80027b8 <xTaskIncrementTick+0xf4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80026d2:	4b42      	ldr	r3, [pc, #264]	; (80027dc <xTaskIncrementTick+0x118>)
 80026d4:	f8d3 54e8 	ldr.w	r5, [r3, #1256]	; 0x4e8
 80026d8:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 80026da:	f8c3 54e8 	str.w	r5, [r3, #1256]	; 0x4e8
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80026de:	b9dd      	cbnz	r5, 8002718 <xTaskIncrementTick+0x54>
			taskSWITCH_DELAYED_LISTS();
 80026e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	b153      	cbz	r3, 80026fc <xTaskIncrementTick+0x38>
 80026e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ea:	b672      	cpsid	i
 80026ec:	f383 8811 	msr	BASEPRI, r3
 80026f0:	f3bf 8f6f 	isb	sy
 80026f4:	f3bf 8f4f 	dsb	sy
 80026f8:	b662      	cpsie	i
 80026fa:	e7fe      	b.n	80026fa <xTaskIncrementTick+0x36>
 80026fc:	4b37      	ldr	r3, [pc, #220]	; (80027dc <xTaskIncrementTick+0x118>)
 80026fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002700:	f8d3 14cc 	ldr.w	r1, [r3, #1228]	; 0x4cc
 8002704:	6299      	str	r1, [r3, #40]	; 0x28
 8002706:	f8c3 24cc 	str.w	r2, [r3, #1228]	; 0x4cc
 800270a:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	; 0x4f4
 800270e:	3201      	adds	r2, #1
 8002710:	f8c3 24f4 	str.w	r2, [r3, #1268]	; 0x4f4
 8002714:	f7ff fd8e 	bl	8002234 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002718:	4b30      	ldr	r3, [pc, #192]	; (80027dc <xTaskIncrementTick+0x118>)
 800271a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271c:	42ab      	cmp	r3, r5
 800271e:	d940      	bls.n	80027a2 <xTaskIncrementTick+0xde>
BaseType_t xSwitchRequired = pdFALSE;
 8002720:	f04f 0800 	mov.w	r8, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002724:	4a2d      	ldr	r2, [pc, #180]	; (80027dc <xTaskIncrementTick+0x118>)
 8002726:	f8d2 34d4 	ldr.w	r3, [r2, #1236]	; 0x4d4
 800272a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002730:	0099      	lsls	r1, r3, #2
 8002732:	440a      	add	r2, r1
 8002734:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002736:	2b01      	cmp	r3, #1
 8002738:	d946      	bls.n	80027c8 <xTaskIncrementTick+0x104>
				xSwitchRequired = pdTRUE;
 800273a:	f04f 0801 	mov.w	r8, #1
 800273e:	e043      	b.n	80027c8 <xTaskIncrementTick+0x104>
							xSwitchRequired = pdTRUE;
 8002740:	f04f 0801 	mov.w	r8, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002744:	4b25      	ldr	r3, [pc, #148]	; (80027dc <xTaskIncrementTick+0x118>)
 8002746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	b36b      	cbz	r3, 80027a8 <xTaskIncrementTick+0xe4>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800274c:	4b23      	ldr	r3, [pc, #140]	; (80027dc <xTaskIncrementTick+0x118>)
 800274e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002754:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8002756:	429d      	cmp	r5, r3
 8002758:	d32b      	bcc.n	80027b2 <xTaskIncrementTick+0xee>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800275a:	1d27      	adds	r7, r4, #4
 800275c:	4638      	mov	r0, r7
 800275e:	f7ff f861 	bl	8001824 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002762:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002764:	b11b      	cbz	r3, 800276e <xTaskIncrementTick+0xaa>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002766:	f104 0018 	add.w	r0, r4, #24
 800276a:	f7ff f85b 	bl	8001824 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800276e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002770:	4a1a      	ldr	r2, [pc, #104]	; (80027dc <xTaskIncrementTick+0x118>)
 8002772:	f8d2 24e0 	ldr.w	r2, [r2, #1248]	; 0x4e0
 8002776:	4293      	cmp	r3, r2
 8002778:	d902      	bls.n	8002780 <xTaskIncrementTick+0xbc>
 800277a:	4a18      	ldr	r2, [pc, #96]	; (80027dc <xTaskIncrementTick+0x118>)
 800277c:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
 8002780:	4e16      	ldr	r6, [pc, #88]	; (80027dc <xTaskIncrementTick+0x118>)
 8002782:	f106 0030 	add.w	r0, r6, #48	; 0x30
 8002786:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800278a:	009a      	lsls	r2, r3, #2
 800278c:	4639      	mov	r1, r7
 800278e:	4410      	add	r0, r2
 8002790:	f7ff f824 	bl	80017dc <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002794:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002796:	f8d6 34d4 	ldr.w	r3, [r6, #1236]	; 0x4d4
 800279a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279c:	429a      	cmp	r2, r3
 800279e:	d2cf      	bcs.n	8002740 <xTaskIncrementTick+0x7c>
 80027a0:	e7d0      	b.n	8002744 <xTaskIncrementTick+0x80>
BaseType_t xSwitchRequired = pdFALSE;
 80027a2:	f04f 0800 	mov.w	r8, #0
 80027a6:	e7cd      	b.n	8002744 <xTaskIncrementTick+0x80>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027a8:	4b0c      	ldr	r3, [pc, #48]	; (80027dc <xTaskIncrementTick+0x118>)
 80027aa:	f04f 32ff 	mov.w	r2, #4294967295
 80027ae:	62da      	str	r2, [r3, #44]	; 0x2c
					break;
 80027b0:	e7b8      	b.n	8002724 <xTaskIncrementTick+0x60>
						xNextTaskUnblockTime = xItemValue;
 80027b2:	4a0a      	ldr	r2, [pc, #40]	; (80027dc <xTaskIncrementTick+0x118>)
 80027b4:	62d3      	str	r3, [r2, #44]	; 0x2c
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80027b6:	e7b5      	b.n	8002724 <xTaskIncrementTick+0x60>
		++uxPendedTicks;
 80027b8:	4a08      	ldr	r2, [pc, #32]	; (80027dc <xTaskIncrementTick+0x118>)
 80027ba:	f8d2 34f8 	ldr.w	r3, [r2, #1272]	; 0x4f8
 80027be:	3301      	adds	r3, #1
 80027c0:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
BaseType_t xSwitchRequired = pdFALSE;
 80027c4:	f04f 0800 	mov.w	r8, #0
		if( xYieldPending != pdFALSE )
 80027c8:	4b04      	ldr	r3, [pc, #16]	; (80027dc <xTaskIncrementTick+0x118>)
 80027ca:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80027ce:	b10b      	cbz	r3, 80027d4 <xTaskIncrementTick+0x110>
			xSwitchRequired = pdTRUE;
 80027d0:	f04f 0801 	mov.w	r8, #1
}
 80027d4:	4640      	mov	r0, r8
 80027d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80027da:	bf00      	nop
 80027dc:	20000cec 	.word	0x20000cec

080027e0 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 80027e0:	4b3b      	ldr	r3, [pc, #236]	; (80028d0 <xTaskResumeAll+0xf0>)
 80027e2:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80027e6:	b953      	cbnz	r3, 80027fe <xTaskResumeAll+0x1e>
 80027e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ec:	b672      	cpsid	i
 80027ee:	f383 8811 	msr	BASEPRI, r3
 80027f2:	f3bf 8f6f 	isb	sy
 80027f6:	f3bf 8f4f 	dsb	sy
 80027fa:	b662      	cpsie	i
 80027fc:	e7fe      	b.n	80027fc <xTaskResumeAll+0x1c>
{
 80027fe:	b570      	push	{r4, r5, r6, lr}
	taskENTER_CRITICAL();
 8002800:	f000 ff48 	bl	8003694 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8002804:	4b32      	ldr	r3, [pc, #200]	; (80028d0 <xTaskResumeAll+0xf0>)
 8002806:	f8d3 24ec 	ldr.w	r2, [r3, #1260]	; 0x4ec
 800280a:	3a01      	subs	r2, #1
 800280c:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002810:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002814:	2b00      	cmp	r3, #0
 8002816:	d156      	bne.n	80028c6 <xTaskResumeAll+0xe6>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002818:	4b2d      	ldr	r3, [pc, #180]	; (80028d0 <xTaskResumeAll+0xf0>)
 800281a:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
 800281e:	b90b      	cbnz	r3, 8002824 <xTaskResumeAll+0x44>
BaseType_t xAlreadyYielded = pdFALSE;
 8002820:	2400      	movs	r4, #0
 8002822:	e051      	b.n	80028c8 <xTaskResumeAll+0xe8>
TCB_t *pxTCB = NULL;
 8002824:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002826:	4b2a      	ldr	r3, [pc, #168]	; (80028d0 <xTaskResumeAll+0xf0>)
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	b32b      	cbz	r3, 8002878 <xTaskResumeAll+0x98>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800282c:	4d28      	ldr	r5, [pc, #160]	; (80028d0 <xTaskResumeAll+0xf0>)
 800282e:	6a2b      	ldr	r3, [r5, #32]
 8002830:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002832:	f104 0018 	add.w	r0, r4, #24
 8002836:	f7fe fff5 	bl	8001824 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800283a:	1d26      	adds	r6, r4, #4
 800283c:	4630      	mov	r0, r6
 800283e:	f7fe fff1 	bl	8001824 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002842:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002844:	f8d5 24e0 	ldr.w	r2, [r5, #1248]	; 0x4e0
 8002848:	4293      	cmp	r3, r2
 800284a:	d901      	bls.n	8002850 <xTaskResumeAll+0x70>
 800284c:	f8c5 34e0 	str.w	r3, [r5, #1248]	; 0x4e0
 8002850:	4d1f      	ldr	r5, [pc, #124]	; (80028d0 <xTaskResumeAll+0xf0>)
 8002852:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8002856:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800285a:	4631      	mov	r1, r6
 800285c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8002860:	f7fe ffbc 	bl	80017dc <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002864:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002866:	f8d5 34d4 	ldr.w	r3, [r5, #1236]	; 0x4d4
 800286a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286c:	429a      	cmp	r2, r3
 800286e:	d3da      	bcc.n	8002826 <xTaskResumeAll+0x46>
						xYieldPending = pdTRUE;
 8002870:	2201      	movs	r2, #1
 8002872:	f8c5 24fc 	str.w	r2, [r5, #1276]	; 0x4fc
 8002876:	e7d6      	b.n	8002826 <xTaskResumeAll+0x46>
				if( pxTCB != NULL )
 8002878:	b10c      	cbz	r4, 800287e <xTaskResumeAll+0x9e>
					prvResetNextTaskUnblockTime();
 800287a:	f7ff fcdb 	bl	8002234 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800287e:	4b14      	ldr	r3, [pc, #80]	; (80028d0 <xTaskResumeAll+0xf0>)
 8002880:	f8d3 44f8 	ldr.w	r4, [r3, #1272]	; 0x4f8
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002884:	b98c      	cbnz	r4, 80028aa <xTaskResumeAll+0xca>
				if( xYieldPending != pdFALSE )
 8002886:	4b12      	ldr	r3, [pc, #72]	; (80028d0 <xTaskResumeAll+0xf0>)
 8002888:	f8d3 44fc 	ldr.w	r4, [r3, #1276]	; 0x4fc
 800288c:	b1e4      	cbz	r4, 80028c8 <xTaskResumeAll+0xe8>
					taskYIELD_IF_USING_PREEMPTION();
 800288e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002896:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800289a:	f3bf 8f4f 	dsb	sy
 800289e:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80028a2:	2401      	movs	r4, #1
 80028a4:	e010      	b.n	80028c8 <xTaskResumeAll+0xe8>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80028a6:	3c01      	subs	r4, #1
 80028a8:	d008      	beq.n	80028bc <xTaskResumeAll+0xdc>
							if( xTaskIncrementTick() != pdFALSE )
 80028aa:	f7ff ff0b 	bl	80026c4 <xTaskIncrementTick>
 80028ae:	2800      	cmp	r0, #0
 80028b0:	d0f9      	beq.n	80028a6 <xTaskResumeAll+0xc6>
								xYieldPending = pdTRUE;
 80028b2:	4b07      	ldr	r3, [pc, #28]	; (80028d0 <xTaskResumeAll+0xf0>)
 80028b4:	2201      	movs	r2, #1
 80028b6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
 80028ba:	e7f4      	b.n	80028a6 <xTaskResumeAll+0xc6>
						uxPendedTicks = 0;
 80028bc:	4b04      	ldr	r3, [pc, #16]	; (80028d0 <xTaskResumeAll+0xf0>)
 80028be:	2200      	movs	r2, #0
 80028c0:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
 80028c4:	e7df      	b.n	8002886 <xTaskResumeAll+0xa6>
BaseType_t xAlreadyYielded = pdFALSE;
 80028c6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80028c8:	f000 ff0a 	bl	80036e0 <vPortExitCritical>
}
 80028cc:	4620      	mov	r0, r4
 80028ce:	bd70      	pop	{r4, r5, r6, pc}
 80028d0:	20000cec 	.word	0x20000cec

080028d4 <vTaskDelay>:
	{
 80028d4:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80028d6:	b1c0      	cbz	r0, 800290a <vTaskDelay+0x36>
 80028d8:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 80028da:	4b11      	ldr	r3, [pc, #68]	; (8002920 <vTaskDelay+0x4c>)
 80028dc:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80028e0:	b153      	cbz	r3, 80028f8 <vTaskDelay+0x24>
 80028e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e6:	b672      	cpsid	i
 80028e8:	f383 8811 	msr	BASEPRI, r3
 80028ec:	f3bf 8f6f 	isb	sy
 80028f0:	f3bf 8f4f 	dsb	sy
 80028f4:	b662      	cpsie	i
 80028f6:	e7fe      	b.n	80028f6 <vTaskDelay+0x22>
			vTaskSuspendAll();
 80028f8:	f7ff fed4 	bl	80026a4 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80028fc:	2100      	movs	r1, #0
 80028fe:	4620      	mov	r0, r4
 8002900:	f7ff fdd4 	bl	80024ac <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8002904:	f7ff ff6c 	bl	80027e0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8002908:	b948      	cbnz	r0, 800291e <vTaskDelay+0x4a>
			portYIELD_WITHIN_API();
 800290a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800290e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002912:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002916:	f3bf 8f4f 	dsb	sy
 800291a:	f3bf 8f6f 	isb	sy
	}
 800291e:	bd10      	pop	{r4, pc}
 8002920:	20000cec 	.word	0x20000cec

08002924 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002924:	4b22      	ldr	r3, [pc, #136]	; (80029b0 <vTaskSwitchContext+0x8c>)
 8002926:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800292a:	b123      	cbz	r3, 8002936 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800292c:	4b20      	ldr	r3, [pc, #128]	; (80029b0 <vTaskSwitchContext+0x8c>)
 800292e:	2201      	movs	r2, #1
 8002930:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
 8002934:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8002936:	4b1e      	ldr	r3, [pc, #120]	; (80029b0 <vTaskSwitchContext+0x8c>)
 8002938:	2200      	movs	r2, #0
 800293a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800293e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002942:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8002946:	0091      	lsls	r1, r2, #2
 8002948:	4a19      	ldr	r2, [pc, #100]	; (80029b0 <vTaskSwitchContext+0x8c>)
 800294a:	440a      	add	r2, r1
 800294c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800294e:	b96a      	cbnz	r2, 800296c <vTaskSwitchContext+0x48>
 8002950:	b10b      	cbz	r3, 8002956 <vTaskSwitchContext+0x32>
 8002952:	3b01      	subs	r3, #1
 8002954:	e7f5      	b.n	8002942 <vTaskSwitchContext+0x1e>
 8002956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800295a:	b672      	cpsid	i
 800295c:	f383 8811 	msr	BASEPRI, r3
 8002960:	f3bf 8f6f 	isb	sy
 8002964:	f3bf 8f4f 	dsb	sy
 8002968:	b662      	cpsie	i
 800296a:	e7fe      	b.n	800296a <vTaskSwitchContext+0x46>
 800296c:	4a10      	ldr	r2, [pc, #64]	; (80029b0 <vTaskSwitchContext+0x8c>)
 800296e:	4411      	add	r1, r2
 8002970:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8002972:	6840      	ldr	r0, [r0, #4]
 8002974:	6348      	str	r0, [r1, #52]	; 0x34
 8002976:	3230      	adds	r2, #48	; 0x30
 8002978:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 800297c:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8002980:	3108      	adds	r1, #8
 8002982:	440a      	add	r2, r1
 8002984:	4290      	cmp	r0, r2
 8002986:	d00b      	beq.n	80029a0 <vTaskSwitchContext+0x7c>
 8002988:	4909      	ldr	r1, [pc, #36]	; (80029b0 <vTaskSwitchContext+0x8c>)
 800298a:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 800298e:	0082      	lsls	r2, r0, #2
 8002990:	440a      	add	r2, r1
 8002992:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002994:	68d2      	ldr	r2, [r2, #12]
 8002996:	f8c1 24d4 	str.w	r2, [r1, #1236]	; 0x4d4
 800299a:	f8c1 34e0 	str.w	r3, [r1, #1248]	; 0x4e0
}
 800299e:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029a0:	6840      	ldr	r0, [r0, #4]
 80029a2:	4662      	mov	r2, ip
 80029a4:	0091      	lsls	r1, r2, #2
 80029a6:	4a02      	ldr	r2, [pc, #8]	; (80029b0 <vTaskSwitchContext+0x8c>)
 80029a8:	440a      	add	r2, r1
 80029aa:	6350      	str	r0, [r2, #52]	; 0x34
 80029ac:	e7ec      	b.n	8002988 <vTaskSwitchContext+0x64>
 80029ae:	bf00      	nop
 80029b0:	20000cec 	.word	0x20000cec

080029b4 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 80029b4:	b160      	cbz	r0, 80029d0 <vTaskPlaceOnEventList+0x1c>
{
 80029b6:	b510      	push	{r4, lr}
 80029b8:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80029ba:	4a0b      	ldr	r2, [pc, #44]	; (80029e8 <vTaskPlaceOnEventList+0x34>)
 80029bc:	f8d2 14d4 	ldr.w	r1, [r2, #1236]	; 0x4d4
 80029c0:	3118      	adds	r1, #24
 80029c2:	f7fe ff16 	bl	80017f2 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80029c6:	2101      	movs	r1, #1
 80029c8:	4620      	mov	r0, r4
 80029ca:	f7ff fd6f 	bl	80024ac <prvAddCurrentTaskToDelayedList>
}
 80029ce:	bd10      	pop	{r4, pc}
 80029d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d4:	b672      	cpsid	i
 80029d6:	f383 8811 	msr	BASEPRI, r3
 80029da:	f3bf 8f6f 	isb	sy
 80029de:	f3bf 8f4f 	dsb	sy
 80029e2:	b662      	cpsie	i
	configASSERT( pxEventList );
 80029e4:	e7fe      	b.n	80029e4 <vTaskPlaceOnEventList+0x30>
 80029e6:	bf00      	nop
 80029e8:	20000cec 	.word	0x20000cec

080029ec <vTaskPlaceOnEventListRestricted>:
	{
 80029ec:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 80029ee:	b178      	cbz	r0, 8002a10 <vTaskPlaceOnEventListRestricted+0x24>
 80029f0:	460d      	mov	r5, r1
 80029f2:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80029f4:	4a0c      	ldr	r2, [pc, #48]	; (8002a28 <vTaskPlaceOnEventListRestricted+0x3c>)
 80029f6:	f8d2 14d4 	ldr.w	r1, [r2, #1236]	; 0x4d4
 80029fa:	3118      	adds	r1, #24
 80029fc:	f7fe feee 	bl	80017dc <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 8002a00:	b10c      	cbz	r4, 8002a06 <vTaskPlaceOnEventListRestricted+0x1a>
			xTicksToWait = portMAX_DELAY;
 8002a02:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002a06:	4621      	mov	r1, r4
 8002a08:	4628      	mov	r0, r5
 8002a0a:	f7ff fd4f 	bl	80024ac <prvAddCurrentTaskToDelayedList>
	}
 8002a0e:	bd38      	pop	{r3, r4, r5, pc}
 8002a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a14:	b672      	cpsid	i
 8002a16:	f383 8811 	msr	BASEPRI, r3
 8002a1a:	f3bf 8f6f 	isb	sy
 8002a1e:	f3bf 8f4f 	dsb	sy
 8002a22:	b662      	cpsie	i
		configASSERT( pxEventList );
 8002a24:	e7fe      	b.n	8002a24 <vTaskPlaceOnEventListRestricted+0x38>
 8002a26:	bf00      	nop
 8002a28:	20000cec 	.word	0x20000cec

08002a2c <xTaskRemoveFromEventList>:
{
 8002a2c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a2e:	68c3      	ldr	r3, [r0, #12]
 8002a30:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8002a32:	b34c      	cbz	r4, 8002a88 <xTaskRemoveFromEventList+0x5c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002a34:	f104 0518 	add.w	r5, r4, #24
 8002a38:	4628      	mov	r0, r5
 8002a3a:	f7fe fef3 	bl	8001824 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a3e:	4b1b      	ldr	r3, [pc, #108]	; (8002aac <xTaskRemoveFromEventList+0x80>)
 8002a40:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002a44:	bb5b      	cbnz	r3, 8002a9e <xTaskRemoveFromEventList+0x72>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002a46:	1d25      	adds	r5, r4, #4
 8002a48:	4628      	mov	r0, r5
 8002a4a:	f7fe feeb 	bl	8001824 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002a4e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002a50:	4b16      	ldr	r3, [pc, #88]	; (8002aac <xTaskRemoveFromEventList+0x80>)
 8002a52:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002a56:	4298      	cmp	r0, r3
 8002a58:	d902      	bls.n	8002a60 <xTaskRemoveFromEventList+0x34>
 8002a5a:	4b14      	ldr	r3, [pc, #80]	; (8002aac <xTaskRemoveFromEventList+0x80>)
 8002a5c:	f8c3 04e0 	str.w	r0, [r3, #1248]	; 0x4e0
 8002a60:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002a64:	4629      	mov	r1, r5
 8002a66:	4b12      	ldr	r3, [pc, #72]	; (8002ab0 <xTaskRemoveFromEventList+0x84>)
 8002a68:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002a6c:	f7fe feb6 	bl	80017dc <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002a70:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002a72:	4b0e      	ldr	r3, [pc, #56]	; (8002aac <xTaskRemoveFromEventList+0x80>)
 8002a74:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8002a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d914      	bls.n	8002aa8 <xTaskRemoveFromEventList+0x7c>
		xYieldPending = pdTRUE;
 8002a7e:	2001      	movs	r0, #1
 8002a80:	4b0a      	ldr	r3, [pc, #40]	; (8002aac <xTaskRemoveFromEventList+0x80>)
 8002a82:	f8c3 04fc 	str.w	r0, [r3, #1276]	; 0x4fc
}
 8002a86:	bd38      	pop	{r3, r4, r5, pc}
 8002a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a8c:	b672      	cpsid	i
 8002a8e:	f383 8811 	msr	BASEPRI, r3
 8002a92:	f3bf 8f6f 	isb	sy
 8002a96:	f3bf 8f4f 	dsb	sy
 8002a9a:	b662      	cpsie	i
	configASSERT( pxUnblockedTCB );
 8002a9c:	e7fe      	b.n	8002a9c <xTaskRemoveFromEventList+0x70>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002a9e:	4629      	mov	r1, r5
 8002aa0:	4804      	ldr	r0, [pc, #16]	; (8002ab4 <xTaskRemoveFromEventList+0x88>)
 8002aa2:	f7fe fe9b 	bl	80017dc <vListInsertEnd>
 8002aa6:	e7e3      	b.n	8002a70 <xTaskRemoveFromEventList+0x44>
		xReturn = pdFALSE;
 8002aa8:	2000      	movs	r0, #0
	return xReturn;
 8002aaa:	e7ec      	b.n	8002a86 <xTaskRemoveFromEventList+0x5a>
 8002aac:	20000cec 	.word	0x20000cec
 8002ab0:	20000d1c 	.word	0x20000d1c
 8002ab4:	20000d00 	.word	0x20000d00

08002ab8 <vTaskRemoveFromUnorderedEventList>:
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8002ab8:	4b21      	ldr	r3, [pc, #132]	; (8002b40 <vTaskRemoveFromUnorderedEventList+0x88>)
 8002aba:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002abe:	b953      	cbnz	r3, 8002ad6 <vTaskRemoveFromUnorderedEventList+0x1e>
 8002ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac4:	b672      	cpsid	i
 8002ac6:	f383 8811 	msr	BASEPRI, r3
 8002aca:	f3bf 8f6f 	isb	sy
 8002ace:	f3bf 8f4f 	dsb	sy
 8002ad2:	b662      	cpsie	i
 8002ad4:	e7fe      	b.n	8002ad4 <vTaskRemoveFromUnorderedEventList+0x1c>
{
 8002ad6:	b570      	push	{r4, r5, r6, lr}
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8002ad8:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8002adc:	6001      	str	r1, [r0, #0]
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ade:	68c4      	ldr	r4, [r0, #12]
	configASSERT( pxUnblockedTCB );
 8002ae0:	b314      	cbz	r4, 8002b28 <vTaskRemoveFromUnorderedEventList+0x70>
	( void ) uxListRemove( pxEventListItem );
 8002ae2:	f7fe fe9f 	bl	8001824 <uxListRemove>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002ae6:	1d26      	adds	r6, r4, #4
 8002ae8:	4630      	mov	r0, r6
 8002aea:	f7fe fe9b 	bl	8001824 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8002aee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002af0:	4a13      	ldr	r2, [pc, #76]	; (8002b40 <vTaskRemoveFromUnorderedEventList+0x88>)
 8002af2:	f8d2 24e0 	ldr.w	r2, [r2, #1248]	; 0x4e0
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d902      	bls.n	8002b00 <vTaskRemoveFromUnorderedEventList+0x48>
 8002afa:	4a11      	ldr	r2, [pc, #68]	; (8002b40 <vTaskRemoveFromUnorderedEventList+0x88>)
 8002afc:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
 8002b00:	4d0f      	ldr	r5, [pc, #60]	; (8002b40 <vTaskRemoveFromUnorderedEventList+0x88>)
 8002b02:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8002b06:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002b0a:	4631      	mov	r1, r6
 8002b0c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8002b10:	f7fe fe64 	bl	80017dc <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002b14:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002b16:	f8d5 34d4 	ldr.w	r3, [r5, #1236]	; 0x4d4
 8002b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d902      	bls.n	8002b26 <vTaskRemoveFromUnorderedEventList+0x6e>
		xYieldPending = pdTRUE;
 8002b20:	2201      	movs	r2, #1
 8002b22:	f8c5 24fc 	str.w	r2, [r5, #1276]	; 0x4fc
}
 8002b26:	bd70      	pop	{r4, r5, r6, pc}
 8002b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b2c:	b672      	cpsid	i
 8002b2e:	f383 8811 	msr	BASEPRI, r3
 8002b32:	f3bf 8f6f 	isb	sy
 8002b36:	f3bf 8f4f 	dsb	sy
 8002b3a:	b662      	cpsie	i
	configASSERT( pxUnblockedTCB );
 8002b3c:	e7fe      	b.n	8002b3c <vTaskRemoveFromUnorderedEventList+0x84>
 8002b3e:	bf00      	nop
 8002b40:	20000cec 	.word	0x20000cec

08002b44 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002b44:	4b03      	ldr	r3, [pc, #12]	; (8002b54 <vTaskInternalSetTimeOutState+0x10>)
 8002b46:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	; 0x4f4
 8002b4a:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002b4c:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8002b50:	6043      	str	r3, [r0, #4]
}
 8002b52:	4770      	bx	lr
 8002b54:	20000cec 	.word	0x20000cec

08002b58 <xTaskCheckForTimeOut>:
{
 8002b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8002b5a:	b1d8      	cbz	r0, 8002b94 <xTaskCheckForTimeOut+0x3c>
 8002b5c:	460c      	mov	r4, r1
 8002b5e:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8002b60:	b319      	cbz	r1, 8002baa <xTaskCheckForTimeOut+0x52>
	taskENTER_CRITICAL();
 8002b62:	f000 fd97 	bl	8003694 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8002b66:	4b1e      	ldr	r3, [pc, #120]	; (8002be0 <xTaskCheckForTimeOut+0x88>)
 8002b68:	f8d3 14e8 	ldr.w	r1, [r3, #1256]	; 0x4e8
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002b6c:	686b      	ldr	r3, [r5, #4]
 8002b6e:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 8002b70:	6822      	ldr	r2, [r4, #0]
 8002b72:	f1b2 3fff 	cmp.w	r2, #4294967295
 8002b76:	d02b      	beq.n	8002bd0 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002b78:	4e19      	ldr	r6, [pc, #100]	; (8002be0 <xTaskCheckForTimeOut+0x88>)
 8002b7a:	f8d6 64f4 	ldr.w	r6, [r6, #1268]	; 0x4f4
 8002b7e:	682f      	ldr	r7, [r5, #0]
 8002b80:	42b7      	cmp	r7, r6
 8002b82:	d001      	beq.n	8002b88 <xTaskCheckForTimeOut+0x30>
 8002b84:	428b      	cmp	r3, r1
 8002b86:	d928      	bls.n	8002bda <xTaskCheckForTimeOut+0x82>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002b88:	4282      	cmp	r2, r0
 8002b8a:	d819      	bhi.n	8002bc0 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait = 0;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8002b90:	2401      	movs	r4, #1
 8002b92:	e01e      	b.n	8002bd2 <xTaskCheckForTimeOut+0x7a>
 8002b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b98:	b672      	cpsid	i
 8002b9a:	f383 8811 	msr	BASEPRI, r3
 8002b9e:	f3bf 8f6f 	isb	sy
 8002ba2:	f3bf 8f4f 	dsb	sy
 8002ba6:	b662      	cpsie	i
	configASSERT( pxTimeOut );
 8002ba8:	e7fe      	b.n	8002ba8 <xTaskCheckForTimeOut+0x50>
 8002baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bae:	b672      	cpsid	i
 8002bb0:	f383 8811 	msr	BASEPRI, r3
 8002bb4:	f3bf 8f6f 	isb	sy
 8002bb8:	f3bf 8f4f 	dsb	sy
 8002bbc:	b662      	cpsie	i
	configASSERT( pxTicksToWait );
 8002bbe:	e7fe      	b.n	8002bbe <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait -= xElapsedTime;
 8002bc0:	1a5b      	subs	r3, r3, r1
 8002bc2:	4413      	add	r3, r2
 8002bc4:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002bc6:	4628      	mov	r0, r5
 8002bc8:	f7ff ffbc 	bl	8002b44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002bcc:	2400      	movs	r4, #0
 8002bce:	e000      	b.n	8002bd2 <xTaskCheckForTimeOut+0x7a>
				xReturn = pdFALSE;
 8002bd0:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002bd2:	f000 fd85 	bl	80036e0 <vPortExitCritical>
}
 8002bd6:	4620      	mov	r0, r4
 8002bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 8002bda:	2401      	movs	r4, #1
 8002bdc:	e7f9      	b.n	8002bd2 <xTaskCheckForTimeOut+0x7a>
 8002bde:	bf00      	nop
 8002be0:	20000cec 	.word	0x20000cec

08002be4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8002be4:	4b02      	ldr	r3, [pc, #8]	; (8002bf0 <vTaskMissedYield+0xc>)
 8002be6:	2201      	movs	r2, #1
 8002be8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
}
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	20000cec 	.word	0x20000cec

08002bf4 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8002bf4:	4b01      	ldr	r3, [pc, #4]	; (8002bfc <xTaskGetCurrentTaskHandle+0x8>)
 8002bf6:	f8d3 04d4 	ldr.w	r0, [r3, #1236]	; 0x4d4
	}
 8002bfa:	4770      	bx	lr
 8002bfc:	20000cec 	.word	0x20000cec

08002c00 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8002c00:	4b06      	ldr	r3, [pc, #24]	; (8002c1c <xTaskGetSchedulerState+0x1c>)
 8002c02:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 8002c06:	b13b      	cbz	r3, 8002c18 <xTaskGetSchedulerState+0x18>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c08:	4b04      	ldr	r3, [pc, #16]	; (8002c1c <xTaskGetSchedulerState+0x1c>)
 8002c0a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002c0e:	b10b      	cbz	r3, 8002c14 <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_SUSPENDED;
 8002c10:	2000      	movs	r0, #0
	}
 8002c12:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8002c14:	2002      	movs	r0, #2
 8002c16:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002c18:	2001      	movs	r0, #1
 8002c1a:	4770      	bx	lr
 8002c1c:	20000cec 	.word	0x20000cec

08002c20 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8002c20:	2800      	cmp	r0, #0
 8002c22:	d044      	beq.n	8002cae <xTaskPriorityInherit+0x8e>
	{
 8002c24:	b538      	push	{r3, r4, r5, lr}
 8002c26:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002c28:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002c2a:	4a23      	ldr	r2, [pc, #140]	; (8002cb8 <xTaskPriorityInherit+0x98>)
 8002c2c:	f8d2 24d4 	ldr.w	r2, [r2, #1236]	; 0x4d4
 8002c30:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d232      	bcs.n	8002c9c <xTaskPriorityInherit+0x7c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002c36:	6982      	ldr	r2, [r0, #24]
 8002c38:	2a00      	cmp	r2, #0
 8002c3a:	db06      	blt.n	8002c4a <xTaskPriorityInherit+0x2a>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c3c:	4a1e      	ldr	r2, [pc, #120]	; (8002cb8 <xTaskPriorityInherit+0x98>)
 8002c3e:	f8d2 24d4 	ldr.w	r2, [r2, #1236]	; 0x4d4
 8002c42:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c44:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8002c48:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8002c4a:	6961      	ldr	r1, [r4, #20]
 8002c4c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002c50:	4a1a      	ldr	r2, [pc, #104]	; (8002cbc <xTaskPriorityInherit+0x9c>)
 8002c52:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002c56:	4299      	cmp	r1, r3
 8002c58:	d006      	beq.n	8002c68 <xTaskPriorityInherit+0x48>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002c5a:	4b17      	ldr	r3, [pc, #92]	; (8002cb8 <xTaskPriorityInherit+0x98>)
 8002c5c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8002c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c62:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 8002c64:	2001      	movs	r0, #1
	}
 8002c66:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002c68:	1d25      	adds	r5, r4, #4
 8002c6a:	4628      	mov	r0, r5
 8002c6c:	f7fe fdda 	bl	8001824 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002c70:	4b11      	ldr	r3, [pc, #68]	; (8002cb8 <xTaskPriorityInherit+0x98>)
 8002c72:	f8d3 24d4 	ldr.w	r2, [r3, #1236]	; 0x4d4
 8002c76:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8002c78:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8002c7a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002c7e:	4298      	cmp	r0, r3
 8002c80:	d902      	bls.n	8002c88 <xTaskPriorityInherit+0x68>
 8002c82:	4b0d      	ldr	r3, [pc, #52]	; (8002cb8 <xTaskPriorityInherit+0x98>)
 8002c84:	f8c3 04e0 	str.w	r0, [r3, #1248]	; 0x4e0
 8002c88:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c8c:	4629      	mov	r1, r5
 8002c8e:	4b0b      	ldr	r3, [pc, #44]	; (8002cbc <xTaskPriorityInherit+0x9c>)
 8002c90:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002c94:	f7fe fda2 	bl	80017dc <vListInsertEnd>
				xReturn = pdTRUE;
 8002c98:	2001      	movs	r0, #1
 8002c9a:	e7e4      	b.n	8002c66 <xTaskPriorityInherit+0x46>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8002c9c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8002c9e:	4b06      	ldr	r3, [pc, #24]	; (8002cb8 <xTaskPriorityInherit+0x98>)
 8002ca0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8002ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d303      	bcc.n	8002cb2 <xTaskPriorityInherit+0x92>
	BaseType_t xReturn = pdFALSE;
 8002caa:	2000      	movs	r0, #0
 8002cac:	e7db      	b.n	8002c66 <xTaskPriorityInherit+0x46>
 8002cae:	2000      	movs	r0, #0
	}
 8002cb0:	4770      	bx	lr
					xReturn = pdTRUE;
 8002cb2:	2001      	movs	r0, #1
		return xReturn;
 8002cb4:	e7d7      	b.n	8002c66 <xTaskPriorityInherit+0x46>
 8002cb6:	bf00      	nop
 8002cb8:	20000cec 	.word	0x20000cec
 8002cbc:	20000d1c 	.word	0x20000d1c

08002cc0 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8002cc0:	2800      	cmp	r0, #0
 8002cc2:	d042      	beq.n	8002d4a <xTaskPriorityDisinherit+0x8a>
	{
 8002cc4:	b538      	push	{r3, r4, r5, lr}
 8002cc6:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8002cc8:	4b22      	ldr	r3, [pc, #136]	; (8002d54 <xTaskPriorityDisinherit+0x94>)
 8002cca:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8002cce:	4283      	cmp	r3, r0
 8002cd0:	d00a      	beq.n	8002ce8 <xTaskPriorityDisinherit+0x28>
 8002cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd6:	b672      	cpsid	i
 8002cd8:	f383 8811 	msr	BASEPRI, r3
 8002cdc:	f3bf 8f6f 	isb	sy
 8002ce0:	f3bf 8f4f 	dsb	sy
 8002ce4:	b662      	cpsie	i
 8002ce6:	e7fe      	b.n	8002ce6 <xTaskPriorityDisinherit+0x26>
			configASSERT( pxTCB->uxMutexesHeld );
 8002ce8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002cea:	b953      	cbnz	r3, 8002d02 <xTaskPriorityDisinherit+0x42>
 8002cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf0:	b672      	cpsid	i
 8002cf2:	f383 8811 	msr	BASEPRI, r3
 8002cf6:	f3bf 8f6f 	isb	sy
 8002cfa:	f3bf 8f4f 	dsb	sy
 8002cfe:	b662      	cpsie	i
 8002d00:	e7fe      	b.n	8002d00 <xTaskPriorityDisinherit+0x40>
			( pxTCB->uxMutexesHeld )--;
 8002d02:	3b01      	subs	r3, #1
 8002d04:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002d06:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002d08:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8002d0a:	4291      	cmp	r1, r2
 8002d0c:	d01f      	beq.n	8002d4e <xTaskPriorityDisinherit+0x8e>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002d0e:	b10b      	cbz	r3, 8002d14 <xTaskPriorityDisinherit+0x54>
	BaseType_t xReturn = pdFALSE;
 8002d10:	2000      	movs	r0, #0
	}
 8002d12:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d14:	1d05      	adds	r5, r0, #4
 8002d16:	4628      	mov	r0, r5
 8002d18:	f7fe fd84 	bl	8001824 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002d1c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002d1e:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d20:	f1c0 0338 	rsb	r3, r0, #56	; 0x38
 8002d24:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8002d26:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <xTaskPriorityDisinherit+0x94>)
 8002d28:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002d2c:	4298      	cmp	r0, r3
 8002d2e:	d902      	bls.n	8002d36 <xTaskPriorityDisinherit+0x76>
 8002d30:	4b08      	ldr	r3, [pc, #32]	; (8002d54 <xTaskPriorityDisinherit+0x94>)
 8002d32:	f8c3 04e0 	str.w	r0, [r3, #1248]	; 0x4e0
 8002d36:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002d3a:	4629      	mov	r1, r5
 8002d3c:	4b06      	ldr	r3, [pc, #24]	; (8002d58 <xTaskPriorityDisinherit+0x98>)
 8002d3e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002d42:	f7fe fd4b 	bl	80017dc <vListInsertEnd>
					xReturn = pdTRUE;
 8002d46:	2001      	movs	r0, #1
 8002d48:	e7e3      	b.n	8002d12 <xTaskPriorityDisinherit+0x52>
	BaseType_t xReturn = pdFALSE;
 8002d4a:	2000      	movs	r0, #0
	}
 8002d4c:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8002d4e:	2000      	movs	r0, #0
 8002d50:	e7df      	b.n	8002d12 <xTaskPriorityDisinherit+0x52>
 8002d52:	bf00      	nop
 8002d54:	20000cec 	.word	0x20000cec
 8002d58:	20000d1c 	.word	0x20000d1c

08002d5c <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8002d5c:	2800      	cmp	r0, #0
 8002d5e:	d04d      	beq.n	8002dfc <vTaskPriorityDisinheritAfterTimeout+0xa0>
	{
 8002d60:	b538      	push	{r3, r4, r5, lr}
 8002d62:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 8002d64:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002d66:	b953      	cbnz	r3, 8002d7e <vTaskPriorityDisinheritAfterTimeout+0x22>
 8002d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d6c:	b672      	cpsid	i
 8002d6e:	f383 8811 	msr	BASEPRI, r3
 8002d72:	f3bf 8f6f 	isb	sy
 8002d76:	f3bf 8f4f 	dsb	sy
 8002d7a:	b662      	cpsie	i
 8002d7c:	e7fe      	b.n	8002d7c <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8002d7e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8002d80:	428a      	cmp	r2, r1
 8002d82:	d200      	bcs.n	8002d86 <vTaskPriorityDisinheritAfterTimeout+0x2a>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8002d84:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 8002d86:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002d88:	4291      	cmp	r1, r2
 8002d8a:	d001      	beq.n	8002d90 <vTaskPriorityDisinheritAfterTimeout+0x34>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d000      	beq.n	8002d92 <vTaskPriorityDisinheritAfterTimeout+0x36>
	}
 8002d90:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 8002d92:	4b1b      	ldr	r3, [pc, #108]	; (8002e00 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
 8002d94:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8002d98:	42a3      	cmp	r3, r4
 8002d9a:	d024      	beq.n	8002de6 <vTaskPriorityDisinheritAfterTimeout+0x8a>
					pxTCB->uxPriority = uxPriorityToUse;
 8002d9c:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002d9e:	69a3      	ldr	r3, [r4, #24]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	db02      	blt.n	8002daa <vTaskPriorityDisinheritAfterTimeout+0x4e>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002da4:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8002da8:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002daa:	6962      	ldr	r2, [r4, #20]
 8002dac:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002db0:	4b14      	ldr	r3, [pc, #80]	; (8002e04 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 8002db2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d1ea      	bne.n	8002d90 <vTaskPriorityDisinheritAfterTimeout+0x34>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002dba:	1d25      	adds	r5, r4, #4
 8002dbc:	4628      	mov	r0, r5
 8002dbe:	f7fe fd31 	bl	8001824 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8002dc2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002dc4:	4b0e      	ldr	r3, [pc, #56]	; (8002e00 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
 8002dc6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002dca:	4298      	cmp	r0, r3
 8002dcc:	d902      	bls.n	8002dd4 <vTaskPriorityDisinheritAfterTimeout+0x78>
 8002dce:	4b0c      	ldr	r3, [pc, #48]	; (8002e00 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
 8002dd0:	f8c3 04e0 	str.w	r0, [r3, #1248]	; 0x4e0
 8002dd4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002dd8:	4629      	mov	r1, r5
 8002dda:	4b0a      	ldr	r3, [pc, #40]	; (8002e04 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 8002ddc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002de0:	f7fe fcfc 	bl	80017dc <vListInsertEnd>
	}
 8002de4:	e7d4      	b.n	8002d90 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8002de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dea:	b672      	cpsid	i
 8002dec:	f383 8811 	msr	BASEPRI, r3
 8002df0:	f3bf 8f6f 	isb	sy
 8002df4:	f3bf 8f4f 	dsb	sy
 8002df8:	b662      	cpsie	i
					configASSERT( pxTCB != pxCurrentTCB );
 8002dfa:	e7fe      	b.n	8002dfa <vTaskPriorityDisinheritAfterTimeout+0x9e>
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	20000cec 	.word	0x20000cec
 8002e04:	20000d1c 	.word	0x20000d1c

08002e08 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8002e08:	4b06      	ldr	r3, [pc, #24]	; (8002e24 <pvTaskIncrementMutexHeldCount+0x1c>)
 8002e0a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8002e0e:	b12b      	cbz	r3, 8002e1c <pvTaskIncrementMutexHeldCount+0x14>
			( pxCurrentTCB->uxMutexesHeld )++;
 8002e10:	4b04      	ldr	r3, [pc, #16]	; (8002e24 <pvTaskIncrementMutexHeldCount+0x1c>)
 8002e12:	f8d3 24d4 	ldr.w	r2, [r3, #1236]	; 0x4d4
 8002e16:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002e18:	3301      	adds	r3, #1
 8002e1a:	6513      	str	r3, [r2, #80]	; 0x50
		return pxCurrentTCB;
 8002e1c:	4b01      	ldr	r3, [pc, #4]	; (8002e24 <pvTaskIncrementMutexHeldCount+0x1c>)
 8002e1e:	f8d3 04d4 	ldr.w	r0, [r3, #1236]	; 0x4d4
	}
 8002e22:	4770      	bx	lr
 8002e24:	20000cec 	.word	0x20000cec

08002e28 <xTaskNotifyWait>:
	{
 8002e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e2a:	4606      	mov	r6, r0
 8002e2c:	460f      	mov	r7, r1
 8002e2e:	4614      	mov	r4, r2
 8002e30:	461d      	mov	r5, r3
		taskENTER_CRITICAL();
 8002e32:	f000 fc2f 	bl	8003694 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8002e36:	4b25      	ldr	r3, [pc, #148]	; (8002ecc <xTaskNotifyWait+0xa4>)
 8002e38:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8002e3c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002e40:	b2d2      	uxtb	r2, r2
 8002e42:	2a02      	cmp	r2, #2
 8002e44:	d00c      	beq.n	8002e60 <xTaskNotifyWait+0x38>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8002e46:	4a21      	ldr	r2, [pc, #132]	; (8002ecc <xTaskNotifyWait+0xa4>)
 8002e48:	f8d2 14d4 	ldr.w	r1, [r2, #1236]	; 0x4d4
 8002e4c:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8002e4e:	ea23 0306 	bic.w	r3, r3, r6
 8002e52:	654b      	str	r3, [r1, #84]	; 0x54
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8002e54:	f8d2 34d4 	ldr.w	r3, [r2, #1236]	; 0x4d4
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				if( xTicksToWait > ( TickType_t ) 0 )
 8002e5e:	b9e5      	cbnz	r5, 8002e9a <xTaskNotifyWait+0x72>
		taskEXIT_CRITICAL();
 8002e60:	f000 fc3e 	bl	80036e0 <vPortExitCritical>
		taskENTER_CRITICAL();
 8002e64:	f000 fc16 	bl	8003694 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 8002e68:	b124      	cbz	r4, 8002e74 <xTaskNotifyWait+0x4c>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8002e6a:	4b18      	ldr	r3, [pc, #96]	; (8002ecc <xTaskNotifyWait+0xa4>)
 8002e6c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8002e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e72:	6023      	str	r3, [r4, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8002e74:	4b15      	ldr	r3, [pc, #84]	; (8002ecc <xTaskNotifyWait+0xa4>)
 8002e76:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8002e7a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d019      	beq.n	8002eb8 <xTaskNotifyWait+0x90>
				xReturn = pdFALSE;
 8002e84:	2400      	movs	r4, #0
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002e86:	4b11      	ldr	r3, [pc, #68]	; (8002ecc <xTaskNotifyWait+0xa4>)
 8002e88:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		taskEXIT_CRITICAL();
 8002e92:	f000 fc25 	bl	80036e0 <vPortExitCritical>
	}
 8002e96:	4620      	mov	r0, r4
 8002e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002e9a:	4611      	mov	r1, r2
 8002e9c:	4628      	mov	r0, r5
 8002e9e:	f7ff fb05 	bl	80024ac <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 8002ea2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eaa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002eae:	f3bf 8f4f 	dsb	sy
 8002eb2:	f3bf 8f6f 	isb	sy
 8002eb6:	e7d3      	b.n	8002e60 <xTaskNotifyWait+0x38>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8002eb8:	4b04      	ldr	r3, [pc, #16]	; (8002ecc <xTaskNotifyWait+0xa4>)
 8002eba:	f8d3 24d4 	ldr.w	r2, [r3, #1236]	; 0x4d4
 8002ebe:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002ec0:	ea23 0307 	bic.w	r3, r3, r7
 8002ec4:	6553      	str	r3, [r2, #84]	; 0x54
				xReturn = pdTRUE;
 8002ec6:	2401      	movs	r4, #1
 8002ec8:	e7dd      	b.n	8002e86 <xTaskNotifyWait+0x5e>
 8002eca:	bf00      	nop
 8002ecc:	20000cec 	.word	0x20000cec

08002ed0 <xTaskGenericNotify>:
	{
 8002ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToNotify );
 8002ed2:	b1a8      	cbz	r0, 8002f00 <xTaskGenericNotify+0x30>
 8002ed4:	460f      	mov	r7, r1
 8002ed6:	4614      	mov	r4, r2
 8002ed8:	461d      	mov	r5, r3
 8002eda:	4606      	mov	r6, r0
		taskENTER_CRITICAL();
 8002edc:	f000 fbda 	bl	8003694 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 8002ee0:	b10d      	cbz	r5, 8002ee6 <xTaskGenericNotify+0x16>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8002ee2:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8002ee4:	602b      	str	r3, [r5, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8002ee6:	f896 3058 	ldrb.w	r3, [r6, #88]	; 0x58
 8002eea:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8002eec:	2202      	movs	r2, #2
 8002eee:	f886 2058 	strb.w	r2, [r6, #88]	; 0x58
			switch( eAction )
 8002ef2:	2c04      	cmp	r4, #4
 8002ef4:	d821      	bhi.n	8002f3a <xTaskGenericNotify+0x6a>
 8002ef6:	e8df f004 	tbb	[pc, r4]
 8002efa:	0e2f      	.short	0x0e2f
 8002efc:	1813      	.short	0x1813
 8002efe:	1b          	.byte	0x1b
 8002eff:	00          	.byte	0x00
 8002f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f04:	b672      	cpsid	i
 8002f06:	f383 8811 	msr	BASEPRI, r3
 8002f0a:	f3bf 8f6f 	isb	sy
 8002f0e:	f3bf 8f4f 	dsb	sy
 8002f12:	b662      	cpsie	i
		configASSERT( xTaskToNotify );
 8002f14:	e7fe      	b.n	8002f14 <xTaskGenericNotify+0x44>
					pxTCB->ulNotifiedValue |= ulValue;
 8002f16:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8002f18:	433a      	orrs	r2, r7
 8002f1a:	6572      	str	r2, [r6, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8002f1c:	2401      	movs	r4, #1
					break;
 8002f1e:	e01c      	b.n	8002f5a <xTaskGenericNotify+0x8a>
					( pxTCB->ulNotifiedValue )++;
 8002f20:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8002f22:	3201      	adds	r2, #1
 8002f24:	6572      	str	r2, [r6, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8002f26:	2401      	movs	r4, #1
					break;
 8002f28:	e017      	b.n	8002f5a <xTaskGenericNotify+0x8a>
					pxTCB->ulNotifiedValue = ulValue;
 8002f2a:	6577      	str	r7, [r6, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8002f2c:	2401      	movs	r4, #1
					break;
 8002f2e:	e014      	b.n	8002f5a <xTaskGenericNotify+0x8a>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d018      	beq.n	8002f66 <xTaskGenericNotify+0x96>
						pxTCB->ulNotifiedValue = ulValue;
 8002f34:	6577      	str	r7, [r6, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8002f36:	2401      	movs	r4, #1
 8002f38:	e00f      	b.n	8002f5a <xTaskGenericNotify+0x8a>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8002f3a:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8002f3c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8002f40:	d013      	beq.n	8002f6a <xTaskGenericNotify+0x9a>
 8002f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f46:	b672      	cpsid	i
 8002f48:	f383 8811 	msr	BASEPRI, r3
 8002f4c:	f3bf 8f6f 	isb	sy
 8002f50:	f3bf 8f4f 	dsb	sy
 8002f54:	b662      	cpsie	i
 8002f56:	e7fe      	b.n	8002f56 <xTaskGenericNotify+0x86>
			switch( eAction )
 8002f58:	2401      	movs	r4, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d007      	beq.n	8002f6e <xTaskGenericNotify+0x9e>
		taskEXIT_CRITICAL();
 8002f5e:	f000 fbbf 	bl	80036e0 <vPortExitCritical>
	}
 8002f62:	4620      	mov	r0, r4
 8002f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						xReturn = pdFAIL;
 8002f66:	2400      	movs	r4, #0
 8002f68:	e7f7      	b.n	8002f5a <xTaskGenericNotify+0x8a>
	BaseType_t xReturn = pdPASS;
 8002f6a:	2401      	movs	r4, #1
 8002f6c:	e7f5      	b.n	8002f5a <xTaskGenericNotify+0x8a>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f6e:	1d35      	adds	r5, r6, #4
 8002f70:	4628      	mov	r0, r5
 8002f72:	f7fe fc57 	bl	8001824 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8002f76:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8002f78:	4b17      	ldr	r3, [pc, #92]	; (8002fd8 <xTaskGenericNotify+0x108>)
 8002f7a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002f7e:	4298      	cmp	r0, r3
 8002f80:	d902      	bls.n	8002f88 <xTaskGenericNotify+0xb8>
 8002f82:	4b15      	ldr	r3, [pc, #84]	; (8002fd8 <xTaskGenericNotify+0x108>)
 8002f84:	f8c3 04e0 	str.w	r0, [r3, #1248]	; 0x4e0
 8002f88:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002f8c:	4629      	mov	r1, r5
 8002f8e:	4b13      	ldr	r3, [pc, #76]	; (8002fdc <xTaskGenericNotify+0x10c>)
 8002f90:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002f94:	f7fe fc22 	bl	80017dc <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8002f98:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8002f9a:	b153      	cbz	r3, 8002fb2 <xTaskGenericNotify+0xe2>
 8002f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa0:	b672      	cpsid	i
 8002fa2:	f383 8811 	msr	BASEPRI, r3
 8002fa6:	f3bf 8f6f 	isb	sy
 8002faa:	f3bf 8f4f 	dsb	sy
 8002fae:	b662      	cpsie	i
 8002fb0:	e7fe      	b.n	8002fb0 <xTaskGenericNotify+0xe0>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002fb2:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8002fb4:	4b08      	ldr	r3, [pc, #32]	; (8002fd8 <xTaskGenericNotify+0x108>)
 8002fb6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8002fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d9ce      	bls.n	8002f5e <xTaskGenericNotify+0x8e>
					taskYIELD_IF_USING_PREEMPTION();
 8002fc0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002fc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fc8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002fcc:	f3bf 8f4f 	dsb	sy
 8002fd0:	f3bf 8f6f 	isb	sy
 8002fd4:	e7c3      	b.n	8002f5e <xTaskGenericNotify+0x8e>
 8002fd6:	bf00      	nop
 8002fd8:	20000cec 	.word	0x20000cec
 8002fdc:	20000d1c 	.word	0x20000d1c

08002fe0 <xTaskGenericNotifyFromISR>:
		configASSERT( xTaskToNotify );
 8002fe0:	b320      	cbz	r0, 800302c <xTaskGenericNotifyFromISR+0x4c>
	{
 8002fe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fe6:	460e      	mov	r6, r1
 8002fe8:	4614      	mov	r4, r2
 8002fea:	461d      	mov	r5, r3
 8002fec:	4607      	mov	r7, r0
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002fee:	f000 fc55 	bl	800389c <vPortValidateInterruptPriority>
	__asm volatile
 8002ff2:	f3ef 8311 	mrs	r3, BASEPRI
 8002ff6:	f04f 0250 	mov.w	r2, #80	; 0x50
 8002ffa:	b672      	cpsid	i
 8002ffc:	f382 8811 	msr	BASEPRI, r2
 8003000:	f3bf 8f6f 	isb	sy
 8003004:	f3bf 8f4f 	dsb	sy
 8003008:	b662      	cpsie	i
 800300a:	4698      	mov	r8, r3
			if( pulPreviousNotificationValue != NULL )
 800300c:	b10d      	cbz	r5, 8003012 <xTaskGenericNotifyFromISR+0x32>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800300e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003010:	602b      	str	r3, [r5, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8003012:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8003016:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8003018:	2202      	movs	r2, #2
 800301a:	f887 2058 	strb.w	r2, [r7, #88]	; 0x58
			switch( eAction )
 800301e:	2c04      	cmp	r4, #4
 8003020:	d821      	bhi.n	8003066 <xTaskGenericNotifyFromISR+0x86>
 8003022:	e8df f004 	tbb	[pc, r4]
 8003026:	0e2f      	.short	0x0e2f
 8003028:	1813      	.short	0x1813
 800302a:	1b          	.byte	0x1b
 800302b:	00          	.byte	0x00
	__asm volatile
 800302c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003030:	b672      	cpsid	i
 8003032:	f383 8811 	msr	BASEPRI, r3
 8003036:	f3bf 8f6f 	isb	sy
 800303a:	f3bf 8f4f 	dsb	sy
 800303e:	b662      	cpsie	i
		configASSERT( xTaskToNotify );
 8003040:	e7fe      	b.n	8003040 <xTaskGenericNotifyFromISR+0x60>
					pxTCB->ulNotifiedValue |= ulValue;
 8003042:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003044:	4332      	orrs	r2, r6
 8003046:	657a      	str	r2, [r7, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8003048:	2401      	movs	r4, #1
					break;
 800304a:	e01c      	b.n	8003086 <xTaskGenericNotifyFromISR+0xa6>
					( pxTCB->ulNotifiedValue )++;
 800304c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800304e:	3201      	adds	r2, #1
 8003050:	657a      	str	r2, [r7, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8003052:	2401      	movs	r4, #1
					break;
 8003054:	e017      	b.n	8003086 <xTaskGenericNotifyFromISR+0xa6>
					pxTCB->ulNotifiedValue = ulValue;
 8003056:	657e      	str	r6, [r7, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8003058:	2401      	movs	r4, #1
					break;
 800305a:	e014      	b.n	8003086 <xTaskGenericNotifyFromISR+0xa6>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800305c:	2b02      	cmp	r3, #2
 800305e:	d019      	beq.n	8003094 <xTaskGenericNotifyFromISR+0xb4>
						pxTCB->ulNotifiedValue = ulValue;
 8003060:	657e      	str	r6, [r7, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8003062:	2401      	movs	r4, #1
 8003064:	e00f      	b.n	8003086 <xTaskGenericNotifyFromISR+0xa6>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8003066:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003068:	f1b2 3fff 	cmp.w	r2, #4294967295
 800306c:	d014      	beq.n	8003098 <xTaskGenericNotifyFromISR+0xb8>
 800306e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003072:	b672      	cpsid	i
 8003074:	f383 8811 	msr	BASEPRI, r3
 8003078:	f3bf 8f6f 	isb	sy
 800307c:	f3bf 8f4f 	dsb	sy
 8003080:	b662      	cpsie	i
 8003082:	e7fe      	b.n	8003082 <xTaskGenericNotifyFromISR+0xa2>
			switch( eAction )
 8003084:	2401      	movs	r4, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003086:	2b01      	cmp	r3, #1
 8003088:	d008      	beq.n	800309c <xTaskGenericNotifyFromISR+0xbc>
	__asm volatile
 800308a:	f388 8811 	msr	BASEPRI, r8
	}
 800308e:	4620      	mov	r0, r4
 8003090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						xReturn = pdFAIL;
 8003094:	2400      	movs	r4, #0
 8003096:	e7f6      	b.n	8003086 <xTaskGenericNotifyFromISR+0xa6>
	BaseType_t xReturn = pdPASS;
 8003098:	2401      	movs	r4, #1
 800309a:	e7f4      	b.n	8003086 <xTaskGenericNotifyFromISR+0xa6>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800309c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309e:	b153      	cbz	r3, 80030b6 <xTaskGenericNotifyFromISR+0xd6>
	__asm volatile
 80030a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a4:	b672      	cpsid	i
 80030a6:	f383 8811 	msr	BASEPRI, r3
 80030aa:	f3bf 8f6f 	isb	sy
 80030ae:	f3bf 8f4f 	dsb	sy
 80030b2:	b662      	cpsie	i
 80030b4:	e7fe      	b.n	80030b4 <xTaskGenericNotifyFromISR+0xd4>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030b6:	4b18      	ldr	r3, [pc, #96]	; (8003118 <xTaskGenericNotifyFromISR+0x138>)
 80030b8:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80030bc:	bb2b      	cbnz	r3, 800310a <xTaskGenericNotifyFromISR+0x12a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030be:	1d3d      	adds	r5, r7, #4
 80030c0:	4628      	mov	r0, r5
 80030c2:	f7fe fbaf 	bl	8001824 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80030c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80030c8:	4b13      	ldr	r3, [pc, #76]	; (8003118 <xTaskGenericNotifyFromISR+0x138>)
 80030ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80030ce:	4298      	cmp	r0, r3
 80030d0:	d902      	bls.n	80030d8 <xTaskGenericNotifyFromISR+0xf8>
 80030d2:	4b11      	ldr	r3, [pc, #68]	; (8003118 <xTaskGenericNotifyFromISR+0x138>)
 80030d4:	f8c3 04e0 	str.w	r0, [r3, #1248]	; 0x4e0
 80030d8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80030dc:	4629      	mov	r1, r5
 80030de:	4b0f      	ldr	r3, [pc, #60]	; (800311c <xTaskGenericNotifyFromISR+0x13c>)
 80030e0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80030e4:	f7fe fb7a 	bl	80017dc <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80030e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030ea:	4b0b      	ldr	r3, [pc, #44]	; (8003118 <xTaskGenericNotifyFromISR+0x138>)
 80030ec:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 80030f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d9c9      	bls.n	800308a <xTaskGenericNotifyFromISR+0xaa>
					if( pxHigherPriorityTaskWoken != NULL )
 80030f6:	9b06      	ldr	r3, [sp, #24]
 80030f8:	b113      	cbz	r3, 8003100 <xTaskGenericNotifyFromISR+0x120>
						*pxHigherPriorityTaskWoken = pdTRUE;
 80030fa:	2301      	movs	r3, #1
 80030fc:	9a06      	ldr	r2, [sp, #24]
 80030fe:	6013      	str	r3, [r2, #0]
					xYieldPending = pdTRUE;
 8003100:	4b05      	ldr	r3, [pc, #20]	; (8003118 <xTaskGenericNotifyFromISR+0x138>)
 8003102:	2201      	movs	r2, #1
 8003104:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
 8003108:	e7bf      	b.n	800308a <xTaskGenericNotifyFromISR+0xaa>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800310a:	f107 0118 	add.w	r1, r7, #24
 800310e:	4804      	ldr	r0, [pc, #16]	; (8003120 <xTaskGenericNotifyFromISR+0x140>)
 8003110:	f7fe fb64 	bl	80017dc <vListInsertEnd>
 8003114:	e7e8      	b.n	80030e8 <xTaskGenericNotifyFromISR+0x108>
 8003116:	bf00      	nop
 8003118:	20000cec 	.word	0x20000cec
 800311c:	20000d1c 	.word	0x20000d1c
 8003120:	20000d00 	.word	0x20000d00

08003124 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003124:	4b06      	ldr	r3, [pc, #24]	; (8003140 <prvGetNextExpireTime+0x1c>)
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	6813      	ldr	r3, [r2, #0]
 800312a:	b92b      	cbnz	r3, 8003138 <prvGetNextExpireTime+0x14>
 800312c:	2301      	movs	r3, #1
 800312e:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003130:	b923      	cbnz	r3, 800313c <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003132:	68d3      	ldr	r3, [r2, #12]
 8003134:	6818      	ldr	r0, [r3, #0]
 8003136:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003138:	2300      	movs	r3, #0
 800313a:	e7f8      	b.n	800312e <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800313c:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 800313e:	4770      	bx	lr
 8003140:	200011ec 	.word	0x200011ec

08003144 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003144:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003146:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003148:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800314a:	4291      	cmp	r1, r2
 800314c:	d80c      	bhi.n	8003168 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800314e:	1ad2      	subs	r2, r2, r3
 8003150:	6983      	ldr	r3, [r0, #24]
 8003152:	429a      	cmp	r2, r3
 8003154:	d301      	bcc.n	800315a <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003156:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8003158:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800315a:	1d01      	adds	r1, r0, #4
 800315c:	4b0b      	ldr	r3, [pc, #44]	; (800318c <prvInsertTimerInActiveList+0x48>)
 800315e:	6858      	ldr	r0, [r3, #4]
 8003160:	f7fe fb47 	bl	80017f2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8003164:	2000      	movs	r0, #0
 8003166:	e7f7      	b.n	8003158 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003168:	429a      	cmp	r2, r3
 800316a:	bf2c      	ite	cs
 800316c:	2200      	movcs	r2, #0
 800316e:	2201      	movcc	r2, #1
 8003170:	4299      	cmp	r1, r3
 8003172:	bf38      	it	cc
 8003174:	2200      	movcc	r2, #0
 8003176:	b10a      	cbz	r2, 800317c <prvInsertTimerInActiveList+0x38>
			xProcessTimerNow = pdTRUE;
 8003178:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800317a:	e7ed      	b.n	8003158 <prvInsertTimerInActiveList+0x14>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800317c:	1d01      	adds	r1, r0, #4
 800317e:	4b03      	ldr	r3, [pc, #12]	; (800318c <prvInsertTimerInActiveList+0x48>)
 8003180:	6818      	ldr	r0, [r3, #0]
 8003182:	f7fe fb36 	bl	80017f2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8003186:	2000      	movs	r0, #0
 8003188:	e7e6      	b.n	8003158 <prvInsertTimerInActiveList+0x14>
 800318a:	bf00      	nop
 800318c:	200011ec 	.word	0x200011ec

08003190 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003190:	b570      	push	{r4, r5, r6, lr}
 8003192:	b082      	sub	sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003194:	f000 fa7e 	bl	8003694 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003198:	4b12      	ldr	r3, [pc, #72]	; (80031e4 <prvCheckForValidListAndQueue+0x54>)
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	b11b      	cbz	r3, 80031a6 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800319e:	f000 fa9f 	bl	80036e0 <vPortExitCritical>
}
 80031a2:	b002      	add	sp, #8
 80031a4:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
 80031a6:	4c0f      	ldr	r4, [pc, #60]	; (80031e4 <prvCheckForValidListAndQueue+0x54>)
 80031a8:	f104 060c 	add.w	r6, r4, #12
 80031ac:	4630      	mov	r0, r6
 80031ae:	f7fe fb07 	bl	80017c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80031b2:	f104 0520 	add.w	r5, r4, #32
 80031b6:	4628      	mov	r0, r5
 80031b8:	f7fe fb02 	bl	80017c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80031bc:	6026      	str	r6, [r4, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80031be:	6065      	str	r5, [r4, #4]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80031c0:	2300      	movs	r3, #0
 80031c2:	9300      	str	r3, [sp, #0]
 80031c4:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80031c8:	f104 0284 	add.w	r2, r4, #132	; 0x84
 80031cc:	2110      	movs	r1, #16
 80031ce:	200a      	movs	r0, #10
 80031d0:	f7fe fc38 	bl	8001a44 <xQueueGenericCreateStatic>
 80031d4:	60a0      	str	r0, [r4, #8]
				if( xTimerQueue != NULL )
 80031d6:	2800      	cmp	r0, #0
 80031d8:	d0e1      	beq.n	800319e <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80031da:	4903      	ldr	r1, [pc, #12]	; (80031e8 <prvCheckForValidListAndQueue+0x58>)
 80031dc:	f7fe ffec 	bl	80021b8 <vQueueAddToRegistry>
 80031e0:	e7dd      	b.n	800319e <prvCheckForValidListAndQueue+0xe>
 80031e2:	bf00      	nop
 80031e4:	200011ec 	.word	0x200011ec
 80031e8:	0800ec24 	.word	0x0800ec24

080031ec <xTimerCreateTimerTask>:
{
 80031ec:	b510      	push	{r4, lr}
 80031ee:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 80031f0:	f7ff ffce 	bl	8003190 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 80031f4:	4b14      	ldr	r3, [pc, #80]	; (8003248 <xTimerCreateTimerTask+0x5c>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	b1d3      	cbz	r3, 8003230 <xTimerCreateTimerTask+0x44>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80031fa:	2400      	movs	r4, #0
 80031fc:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80031fe:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003200:	aa07      	add	r2, sp, #28
 8003202:	a906      	add	r1, sp, #24
 8003204:	a805      	add	r0, sp, #20
 8003206:	f7fe fa3b 	bl	8001680 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800320a:	9b05      	ldr	r3, [sp, #20]
 800320c:	9302      	str	r3, [sp, #8]
 800320e:	9b06      	ldr	r3, [sp, #24]
 8003210:	9301      	str	r3, [sp, #4]
 8003212:	2302      	movs	r3, #2
 8003214:	9300      	str	r3, [sp, #0]
 8003216:	4623      	mov	r3, r4
 8003218:	9a07      	ldr	r2, [sp, #28]
 800321a:	490c      	ldr	r1, [pc, #48]	; (800324c <xTimerCreateTimerTask+0x60>)
 800321c:	480c      	ldr	r0, [pc, #48]	; (8003250 <xTimerCreateTimerTask+0x64>)
 800321e:	f7ff f97f 	bl	8002520 <xTaskCreateStatic>
 8003222:	4b09      	ldr	r3, [pc, #36]	; (8003248 <xTimerCreateTimerTask+0x5c>)
 8003224:	f8c3 0124 	str.w	r0, [r3, #292]	; 0x124
			if( xTimerTaskHandle != NULL )
 8003228:	b110      	cbz	r0, 8003230 <xTimerCreateTimerTask+0x44>
}
 800322a:	2001      	movs	r0, #1
 800322c:	b008      	add	sp, #32
 800322e:	bd10      	pop	{r4, pc}
 8003230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003234:	b672      	cpsid	i
 8003236:	f383 8811 	msr	BASEPRI, r3
 800323a:	f3bf 8f6f 	isb	sy
 800323e:	f3bf 8f4f 	dsb	sy
 8003242:	b662      	cpsie	i
	configASSERT( xReturn );
 8003244:	e7fe      	b.n	8003244 <xTimerCreateTimerTask+0x58>
 8003246:	bf00      	nop
 8003248:	200011ec 	.word	0x200011ec
 800324c:	0800ec2c 	.word	0x0800ec2c
 8003250:	0800357d 	.word	0x0800357d

08003254 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8003254:	b1b8      	cbz	r0, 8003286 <xTimerGenericCommand+0x32>
 8003256:	469c      	mov	ip, r3
 8003258:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 800325a:	4819      	ldr	r0, [pc, #100]	; (80032c0 <xTimerGenericCommand+0x6c>)
 800325c:	6880      	ldr	r0, [r0, #8]
 800325e:	b368      	cbz	r0, 80032bc <xTimerGenericCommand+0x68>
{
 8003260:	b500      	push	{lr}
 8003262:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8003264:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003266:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003268:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800326a:	2905      	cmp	r1, #5
 800326c:	dc1e      	bgt.n	80032ac <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800326e:	f7ff fcc7 	bl	8002c00 <xTaskGetSchedulerState>
 8003272:	2802      	cmp	r0, #2
 8003274:	d012      	beq.n	800329c <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003276:	2300      	movs	r3, #0
 8003278:	461a      	mov	r2, r3
 800327a:	4669      	mov	r1, sp
 800327c:	4810      	ldr	r0, [pc, #64]	; (80032c0 <xTimerGenericCommand+0x6c>)
 800327e:	6880      	ldr	r0, [r0, #8]
 8003280:	f7fe fc66 	bl	8001b50 <xQueueGenericSend>
 8003284:	e017      	b.n	80032b6 <xTimerGenericCommand+0x62>
 8003286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800328a:	b672      	cpsid	i
 800328c:	f383 8811 	msr	BASEPRI, r3
 8003290:	f3bf 8f6f 	isb	sy
 8003294:	f3bf 8f4f 	dsb	sy
 8003298:	b662      	cpsie	i
	configASSERT( xTimer );
 800329a:	e7fe      	b.n	800329a <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800329c:	2300      	movs	r3, #0
 800329e:	9a06      	ldr	r2, [sp, #24]
 80032a0:	4669      	mov	r1, sp
 80032a2:	4807      	ldr	r0, [pc, #28]	; (80032c0 <xTimerGenericCommand+0x6c>)
 80032a4:	6880      	ldr	r0, [r0, #8]
 80032a6:	f7fe fc53 	bl	8001b50 <xQueueGenericSend>
 80032aa:	e004      	b.n	80032b6 <xTimerGenericCommand+0x62>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80032ac:	2300      	movs	r3, #0
 80032ae:	4662      	mov	r2, ip
 80032b0:	4669      	mov	r1, sp
 80032b2:	f7fe fd61 	bl	8001d78 <xQueueGenericSendFromISR>
}
 80032b6:	b005      	add	sp, #20
 80032b8:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 80032bc:	2000      	movs	r0, #0
}
 80032be:	4770      	bx	lr
 80032c0:	200011ec 	.word	0x200011ec

080032c4 <prvSwitchTimerLists>:
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80032c4:	4b22      	ldr	r3, [pc, #136]	; (8003350 <prvSwitchTimerLists+0x8c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	2a00      	cmp	r2, #0
 80032cc:	d03b      	beq.n	8003346 <prvSwitchTimerLists+0x82>
{
 80032ce:	b570      	push	{r4, r5, r6, lr}
 80032d0:	b082      	sub	sp, #8
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032d6:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80032d8:	1d25      	adds	r5, r4, #4
 80032da:	4628      	mov	r0, r5
 80032dc:	f7fe faa2 	bl	8001824 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80032e0:	6a23      	ldr	r3, [r4, #32]
 80032e2:	4620      	mov	r0, r4
 80032e4:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80032e6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80032ea:	f013 0f04 	tst.w	r3, #4
 80032ee:	d10a      	bne.n	8003306 <prvSwitchTimerLists+0x42>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80032f0:	4b17      	ldr	r3, [pc, #92]	; (8003350 <prvSwitchTimerLists+0x8c>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	2a00      	cmp	r2, #0
 80032f8:	d1eb      	bne.n	80032d2 <prvSwitchTimerLists+0xe>
	pxCurrentTimerList = pxOverflowTimerList;
 80032fa:	4a15      	ldr	r2, [pc, #84]	; (8003350 <prvSwitchTimerLists+0x8c>)
 80032fc:	6851      	ldr	r1, [r2, #4]
 80032fe:	6011      	str	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003300:	6053      	str	r3, [r2, #4]
}
 8003302:	b002      	add	sp, #8
 8003304:	bd70      	pop	{r4, r5, r6, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003306:	69a3      	ldr	r3, [r4, #24]
 8003308:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 800330a:	429e      	cmp	r6, r3
 800330c:	d207      	bcs.n	800331e <prvSwitchTimerLists+0x5a>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800330e:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003310:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003312:	4629      	mov	r1, r5
 8003314:	4b0e      	ldr	r3, [pc, #56]	; (8003350 <prvSwitchTimerLists+0x8c>)
 8003316:	6818      	ldr	r0, [r3, #0]
 8003318:	f7fe fa6b 	bl	80017f2 <vListInsert>
 800331c:	e7e8      	b.n	80032f0 <prvSwitchTimerLists+0x2c>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800331e:	2100      	movs	r1, #0
 8003320:	9100      	str	r1, [sp, #0]
 8003322:	460b      	mov	r3, r1
 8003324:	4632      	mov	r2, r6
 8003326:	4620      	mov	r0, r4
 8003328:	f7ff ff94 	bl	8003254 <xTimerGenericCommand>
				configASSERT( xResult );
 800332c:	2800      	cmp	r0, #0
 800332e:	d1df      	bne.n	80032f0 <prvSwitchTimerLists+0x2c>
 8003330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003334:	b672      	cpsid	i
 8003336:	f383 8811 	msr	BASEPRI, r3
 800333a:	f3bf 8f6f 	isb	sy
 800333e:	f3bf 8f4f 	dsb	sy
 8003342:	b662      	cpsie	i
 8003344:	e7fe      	b.n	8003344 <prvSwitchTimerLists+0x80>
	pxCurrentTimerList = pxOverflowTimerList;
 8003346:	4a02      	ldr	r2, [pc, #8]	; (8003350 <prvSwitchTimerLists+0x8c>)
 8003348:	6851      	ldr	r1, [r2, #4]
 800334a:	6011      	str	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800334c:	6053      	str	r3, [r2, #4]
 800334e:	4770      	bx	lr
 8003350:	200011ec 	.word	0x200011ec

08003354 <prvSampleTimeNow>:
{
 8003354:	b538      	push	{r3, r4, r5, lr}
 8003356:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 8003358:	f7ff f9ae 	bl	80026b8 <xTaskGetTickCount>
 800335c:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 800335e:	4b08      	ldr	r3, [pc, #32]	; (8003380 <prvSampleTimeNow+0x2c>)
 8003360:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8003364:	4283      	cmp	r3, r0
 8003366:	d806      	bhi.n	8003376 <prvSampleTimeNow+0x22>
		*pxTimerListsWereSwitched = pdFALSE;
 8003368:	2300      	movs	r3, #0
 800336a:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 800336c:	4b04      	ldr	r3, [pc, #16]	; (8003380 <prvSampleTimeNow+0x2c>)
 800336e:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
}
 8003372:	4620      	mov	r0, r4
 8003374:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 8003376:	f7ff ffa5 	bl	80032c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800337a:	2301      	movs	r3, #1
 800337c:	602b      	str	r3, [r5, #0]
 800337e:	e7f5      	b.n	800336c <prvSampleTimeNow+0x18>
 8003380:	200011ec 	.word	0x200011ec

08003384 <prvProcessExpiredTimer>:
{
 8003384:	b570      	push	{r4, r5, r6, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	4606      	mov	r6, r0
 800338a:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800338c:	4918      	ldr	r1, [pc, #96]	; (80033f0 <prvProcessExpiredTimer+0x6c>)
 800338e:	6809      	ldr	r1, [r1, #0]
 8003390:	68c9      	ldr	r1, [r1, #12]
 8003392:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003394:	1d20      	adds	r0, r4, #4
 8003396:	f7fe fa45 	bl	8001824 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800339a:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
 800339e:	f01c 0f04 	tst.w	ip, #4
 80033a2:	d108      	bne.n	80033b6 <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80033a4:	f02c 0c01 	bic.w	ip, ip, #1
 80033a8:	f884 c028 	strb.w	ip, [r4, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80033ac:	6a23      	ldr	r3, [r4, #32]
 80033ae:	4620      	mov	r0, r4
 80033b0:	4798      	blx	r3
}
 80033b2:	b002      	add	sp, #8
 80033b4:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80033b6:	69a1      	ldr	r1, [r4, #24]
 80033b8:	4633      	mov	r3, r6
 80033ba:	462a      	mov	r2, r5
 80033bc:	4431      	add	r1, r6
 80033be:	4620      	mov	r0, r4
 80033c0:	f7ff fec0 	bl	8003144 <prvInsertTimerInActiveList>
 80033c4:	2800      	cmp	r0, #0
 80033c6:	d0f1      	beq.n	80033ac <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80033c8:	2100      	movs	r1, #0
 80033ca:	9100      	str	r1, [sp, #0]
 80033cc:	460b      	mov	r3, r1
 80033ce:	4632      	mov	r2, r6
 80033d0:	4620      	mov	r0, r4
 80033d2:	f7ff ff3f 	bl	8003254 <xTimerGenericCommand>
			configASSERT( xResult );
 80033d6:	2800      	cmp	r0, #0
 80033d8:	d1e8      	bne.n	80033ac <prvProcessExpiredTimer+0x28>
 80033da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033de:	b672      	cpsid	i
 80033e0:	f383 8811 	msr	BASEPRI, r3
 80033e4:	f3bf 8f6f 	isb	sy
 80033e8:	f3bf 8f4f 	dsb	sy
 80033ec:	b662      	cpsie	i
 80033ee:	e7fe      	b.n	80033ee <prvProcessExpiredTimer+0x6a>
 80033f0:	200011ec 	.word	0x200011ec

080033f4 <prvProcessTimerOrBlockTask>:
{
 80033f4:	b570      	push	{r4, r5, r6, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	4606      	mov	r6, r0
 80033fa:	460c      	mov	r4, r1
	vTaskSuspendAll();
 80033fc:	f7ff f952 	bl	80026a4 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003400:	a801      	add	r0, sp, #4
 8003402:	f7ff ffa7 	bl	8003354 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8003406:	9b01      	ldr	r3, [sp, #4]
 8003408:	bb3b      	cbnz	r3, 800345a <prvProcessTimerOrBlockTask+0x66>
 800340a:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800340c:	42b0      	cmp	r0, r6
 800340e:	bf28      	it	cs
 8003410:	2c00      	cmpcs	r4, #0
 8003412:	d019      	beq.n	8003448 <prvProcessTimerOrBlockTask+0x54>
				if( xListWasEmpty != pdFALSE )
 8003414:	b124      	cbz	r4, 8003420 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003416:	4a13      	ldr	r2, [pc, #76]	; (8003464 <prvProcessTimerOrBlockTask+0x70>)
 8003418:	6852      	ldr	r2, [r2, #4]
 800341a:	6812      	ldr	r2, [r2, #0]
 800341c:	b9da      	cbnz	r2, 8003456 <prvProcessTimerOrBlockTask+0x62>
 800341e:	2401      	movs	r4, #1
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003420:	4622      	mov	r2, r4
 8003422:	1b71      	subs	r1, r6, r5
 8003424:	4b0f      	ldr	r3, [pc, #60]	; (8003464 <prvProcessTimerOrBlockTask+0x70>)
 8003426:	6898      	ldr	r0, [r3, #8]
 8003428:	f7fe feda 	bl	80021e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800342c:	f7ff f9d8 	bl	80027e0 <xTaskResumeAll>
 8003430:	b9a8      	cbnz	r0, 800345e <prvProcessTimerOrBlockTask+0x6a>
					portYIELD_WITHIN_API();
 8003432:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800343a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800343e:	f3bf 8f4f 	dsb	sy
 8003442:	f3bf 8f6f 	isb	sy
 8003446:	e00a      	b.n	800345e <prvProcessTimerOrBlockTask+0x6a>
				( void ) xTaskResumeAll();
 8003448:	f7ff f9ca 	bl	80027e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800344c:	4629      	mov	r1, r5
 800344e:	4630      	mov	r0, r6
 8003450:	f7ff ff98 	bl	8003384 <prvProcessExpiredTimer>
 8003454:	e003      	b.n	800345e <prvProcessTimerOrBlockTask+0x6a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003456:	461c      	mov	r4, r3
 8003458:	e7e2      	b.n	8003420 <prvProcessTimerOrBlockTask+0x2c>
			( void ) xTaskResumeAll();
 800345a:	f7ff f9c1 	bl	80027e0 <xTaskResumeAll>
}
 800345e:	b002      	add	sp, #8
 8003460:	bd70      	pop	{r4, r5, r6, pc}
 8003462:	bf00      	nop
 8003464:	200011ec 	.word	0x200011ec

08003468 <prvProcessReceivedCommands>:
{
 8003468:	b510      	push	{r4, lr}
 800346a:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800346c:	e002      	b.n	8003474 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800346e:	9b04      	ldr	r3, [sp, #16]
 8003470:	2b00      	cmp	r3, #0
 8003472:	da0f      	bge.n	8003494 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003474:	2200      	movs	r2, #0
 8003476:	a904      	add	r1, sp, #16
 8003478:	4b3f      	ldr	r3, [pc, #252]	; (8003578 <prvProcessReceivedCommands+0x110>)
 800347a:	6898      	ldr	r0, [r3, #8]
 800347c:	f7fe fcea 	bl	8001e54 <xQueueReceive>
 8003480:	2800      	cmp	r0, #0
 8003482:	d077      	beq.n	8003574 <prvProcessReceivedCommands+0x10c>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003484:	9b04      	ldr	r3, [sp, #16]
 8003486:	2b00      	cmp	r3, #0
 8003488:	daf1      	bge.n	800346e <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800348a:	9907      	ldr	r1, [sp, #28]
 800348c:	9806      	ldr	r0, [sp, #24]
 800348e:	9b05      	ldr	r3, [sp, #20]
 8003490:	4798      	blx	r3
 8003492:	e7ec      	b.n	800346e <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003494:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003496:	6963      	ldr	r3, [r4, #20]
 8003498:	b113      	cbz	r3, 80034a0 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800349a:	1d20      	adds	r0, r4, #4
 800349c:	f7fe f9c2 	bl	8001824 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80034a0:	a803      	add	r0, sp, #12
 80034a2:	f7ff ff57 	bl	8003354 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 80034a6:	9b04      	ldr	r3, [sp, #16]
 80034a8:	2b09      	cmp	r3, #9
 80034aa:	d8e3      	bhi.n	8003474 <prvProcessReceivedCommands+0xc>
 80034ac:	e8df f003 	tbb	[pc, r3]
 80034b0:	32050505 	.word	0x32050505
 80034b4:	05055439 	.word	0x05055439
 80034b8:	3932      	.short	0x3932
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80034ba:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80034be:	f043 0301 	orr.w	r3, r3, #1
 80034c2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80034c6:	9b05      	ldr	r3, [sp, #20]
 80034c8:	69a1      	ldr	r1, [r4, #24]
 80034ca:	4602      	mov	r2, r0
 80034cc:	4419      	add	r1, r3
 80034ce:	4620      	mov	r0, r4
 80034d0:	f7ff fe38 	bl	8003144 <prvInsertTimerInActiveList>
 80034d4:	2800      	cmp	r0, #0
 80034d6:	d0cd      	beq.n	8003474 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80034d8:	6a23      	ldr	r3, [r4, #32]
 80034da:	4620      	mov	r0, r4
 80034dc:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80034de:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80034e2:	f013 0f04 	tst.w	r3, #4
 80034e6:	d0c5      	beq.n	8003474 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80034e8:	69a2      	ldr	r2, [r4, #24]
 80034ea:	2100      	movs	r1, #0
 80034ec:	9100      	str	r1, [sp, #0]
 80034ee:	460b      	mov	r3, r1
 80034f0:	9805      	ldr	r0, [sp, #20]
 80034f2:	4402      	add	r2, r0
 80034f4:	4620      	mov	r0, r4
 80034f6:	f7ff fead 	bl	8003254 <xTimerGenericCommand>
							configASSERT( xResult );
 80034fa:	2800      	cmp	r0, #0
 80034fc:	d1ba      	bne.n	8003474 <prvProcessReceivedCommands+0xc>
 80034fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003502:	b672      	cpsid	i
 8003504:	f383 8811 	msr	BASEPRI, r3
 8003508:	f3bf 8f6f 	isb	sy
 800350c:	f3bf 8f4f 	dsb	sy
 8003510:	b662      	cpsie	i
 8003512:	e7fe      	b.n	8003512 <prvProcessReceivedCommands+0xaa>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003514:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8003518:	f023 0301 	bic.w	r3, r3, #1
 800351c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					break;
 8003520:	e7a8      	b.n	8003474 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003522:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8003526:	f043 0301 	orr.w	r3, r3, #1
 800352a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800352e:	9905      	ldr	r1, [sp, #20]
 8003530:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003532:	b131      	cbz	r1, 8003542 <prvProcessReceivedCommands+0xda>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003534:	4603      	mov	r3, r0
 8003536:	4602      	mov	r2, r0
 8003538:	4401      	add	r1, r0
 800353a:	4620      	mov	r0, r4
 800353c:	f7ff fe02 	bl	8003144 <prvInsertTimerInActiveList>
					break;
 8003540:	e798      	b.n	8003474 <prvProcessReceivedCommands+0xc>
 8003542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003546:	b672      	cpsid	i
 8003548:	f383 8811 	msr	BASEPRI, r3
 800354c:	f3bf 8f6f 	isb	sy
 8003550:	f3bf 8f4f 	dsb	sy
 8003554:	b662      	cpsie	i
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003556:	e7fe      	b.n	8003556 <prvProcessReceivedCommands+0xee>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003558:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800355c:	f013 0f02 	tst.w	r3, #2
 8003560:	d004      	beq.n	800356c <prvProcessReceivedCommands+0x104>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003562:	f023 0301 	bic.w	r3, r3, #1
 8003566:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800356a:	e783      	b.n	8003474 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 800356c:	4620      	mov	r0, r4
 800356e:	f000 fa8d 	bl	8003a8c <vPortFree>
 8003572:	e77f      	b.n	8003474 <prvProcessReceivedCommands+0xc>
}
 8003574:	b008      	add	sp, #32
 8003576:	bd10      	pop	{r4, pc}
 8003578:	200011ec 	.word	0x200011ec

0800357c <prvTimerTask>:
{
 800357c:	b500      	push	{lr}
 800357e:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003580:	a801      	add	r0, sp, #4
 8003582:	f7ff fdcf 	bl	8003124 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003586:	9901      	ldr	r1, [sp, #4]
 8003588:	f7ff ff34 	bl	80033f4 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 800358c:	f7ff ff6c 	bl	8003468 <prvProcessReceivedCommands>
	for( ;; )
 8003590:	e7f6      	b.n	8003580 <prvTimerTask+0x4>
	...

08003594 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8003594:	b510      	push	{r4, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	4614      	mov	r4, r2
 800359a:	461a      	mov	r2, r3
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800359c:	f06f 0301 	mvn.w	r3, #1
 80035a0:	9300      	str	r3, [sp, #0]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80035a2:	9001      	str	r0, [sp, #4]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80035a4:	9102      	str	r1, [sp, #8]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80035a6:	9403      	str	r4, [sp, #12]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80035a8:	2300      	movs	r3, #0
 80035aa:	4669      	mov	r1, sp
 80035ac:	4802      	ldr	r0, [pc, #8]	; (80035b8 <xTimerPendFunctionCallFromISR+0x24>)
 80035ae:	6880      	ldr	r0, [r0, #8]
 80035b0:	f7fe fbe2 	bl	8001d78 <xQueueGenericSendFromISR>

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
 80035b4:	b004      	add	sp, #16
 80035b6:	bd10      	pop	{r4, pc}
 80035b8:	200011ec 	.word	0x200011ec

080035bc <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80035bc:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80035be:	2300      	movs	r3, #0
 80035c0:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80035c2:	4b0f      	ldr	r3, [pc, #60]	; (8003600 <prvTaskExitError+0x44>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ca:	d00a      	beq.n	80035e2 <prvTaskExitError+0x26>
 80035cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d0:	b672      	cpsid	i
 80035d2:	f383 8811 	msr	BASEPRI, r3
 80035d6:	f3bf 8f6f 	isb	sy
 80035da:	f3bf 8f4f 	dsb	sy
 80035de:	b662      	cpsie	i
 80035e0:	e7fe      	b.n	80035e0 <prvTaskExitError+0x24>
 80035e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e6:	b672      	cpsid	i
 80035e8:	f383 8811 	msr	BASEPRI, r3
 80035ec:	f3bf 8f6f 	isb	sy
 80035f0:	f3bf 8f4f 	dsb	sy
 80035f4:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80035f6:	9b01      	ldr	r3, [sp, #4]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d0fc      	beq.n	80035f6 <prvTaskExitError+0x3a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80035fc:	b002      	add	sp, #8
 80035fe:	4770      	bx	lr
 8003600:	20000014 	.word	0x20000014

08003604 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003604:	4808      	ldr	r0, [pc, #32]	; (8003628 <prvPortStartFirstTask+0x24>)
 8003606:	6800      	ldr	r0, [r0, #0]
 8003608:	6800      	ldr	r0, [r0, #0]
 800360a:	f380 8808 	msr	MSP, r0
 800360e:	f04f 0000 	mov.w	r0, #0
 8003612:	f380 8814 	msr	CONTROL, r0
 8003616:	b662      	cpsie	i
 8003618:	b661      	cpsie	f
 800361a:	f3bf 8f4f 	dsb	sy
 800361e:	f3bf 8f6f 	isb	sy
 8003622:	df00      	svc	0
 8003624:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003626:	0000      	.short	0x0000
 8003628:	e000ed08 	.word	0xe000ed08

0800362c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800362c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800363c <vPortEnableVFP+0x10>
 8003630:	6801      	ldr	r1, [r0, #0]
 8003632:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003636:	6001      	str	r1, [r0, #0]
 8003638:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800363a:	0000      	.short	0x0000
 800363c:	e000ed88 	.word	0xe000ed88

08003640 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003640:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003644:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003648:	f021 0101 	bic.w	r1, r1, #1
 800364c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003650:	4b05      	ldr	r3, [pc, #20]	; (8003668 <pxPortInitialiseStack+0x28>)
 8003652:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003656:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800365a:	f06f 0302 	mvn.w	r3, #2
 800365e:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8003662:	3844      	subs	r0, #68	; 0x44
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	080035bd 	.word	0x080035bd
 800366c:	00000000 	.word	0x00000000

08003670 <SVC_Handler>:
	__asm volatile (
 8003670:	4b07      	ldr	r3, [pc, #28]	; (8003690 <pxCurrentTCBConst2>)
 8003672:	6819      	ldr	r1, [r3, #0]
 8003674:	6808      	ldr	r0, [r1, #0]
 8003676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800367a:	f380 8809 	msr	PSP, r0
 800367e:	f3bf 8f6f 	isb	sy
 8003682:	f04f 0000 	mov.w	r0, #0
 8003686:	f380 8811 	msr	BASEPRI, r0
 800368a:	4770      	bx	lr
 800368c:	f3af 8000 	nop.w

08003690 <pxCurrentTCBConst2>:
 8003690:	200011c0 	.word	0x200011c0

08003694 <vPortEnterCritical>:
 8003694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003698:	b672      	cpsid	i
 800369a:	f383 8811 	msr	BASEPRI, r3
 800369e:	f3bf 8f6f 	isb	sy
 80036a2:	f3bf 8f4f 	dsb	sy
 80036a6:	b662      	cpsie	i
	uxCriticalNesting++;
 80036a8:	4a0c      	ldr	r2, [pc, #48]	; (80036dc <vPortEnterCritical+0x48>)
 80036aa:	6813      	ldr	r3, [r2, #0]
 80036ac:	3301      	adds	r3, #1
 80036ae:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d000      	beq.n	80036b6 <vPortEnterCritical+0x22>
}
 80036b4:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80036b6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80036ba:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 80036be:	f013 0fff 	tst.w	r3, #255	; 0xff
 80036c2:	d0f7      	beq.n	80036b4 <vPortEnterCritical+0x20>
 80036c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c8:	b672      	cpsid	i
 80036ca:	f383 8811 	msr	BASEPRI, r3
 80036ce:	f3bf 8f6f 	isb	sy
 80036d2:	f3bf 8f4f 	dsb	sy
 80036d6:	b662      	cpsie	i
 80036d8:	e7fe      	b.n	80036d8 <vPortEnterCritical+0x44>
 80036da:	bf00      	nop
 80036dc:	20000014 	.word	0x20000014

080036e0 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80036e0:	4b0a      	ldr	r3, [pc, #40]	; (800370c <vPortExitCritical+0x2c>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	b953      	cbnz	r3, 80036fc <vPortExitCritical+0x1c>
 80036e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ea:	b672      	cpsid	i
 80036ec:	f383 8811 	msr	BASEPRI, r3
 80036f0:	f3bf 8f6f 	isb	sy
 80036f4:	f3bf 8f4f 	dsb	sy
 80036f8:	b662      	cpsie	i
 80036fa:	e7fe      	b.n	80036fa <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 80036fc:	3b01      	subs	r3, #1
 80036fe:	4a03      	ldr	r2, [pc, #12]	; (800370c <vPortExitCritical+0x2c>)
 8003700:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003702:	b90b      	cbnz	r3, 8003708 <vPortExitCritical+0x28>
	__asm volatile
 8003704:	f383 8811 	msr	BASEPRI, r3
}
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	20000014 	.word	0x20000014

08003710 <PendSV_Handler>:
	__asm volatile
 8003710:	f3ef 8009 	mrs	r0, PSP
 8003714:	f3bf 8f6f 	isb	sy
 8003718:	4b15      	ldr	r3, [pc, #84]	; (8003770 <pxCurrentTCBConst>)
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	f01e 0f10 	tst.w	lr, #16
 8003720:	bf08      	it	eq
 8003722:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003726:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800372a:	6010      	str	r0, [r2, #0]
 800372c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003730:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003734:	b672      	cpsid	i
 8003736:	f380 8811 	msr	BASEPRI, r0
 800373a:	f3bf 8f4f 	dsb	sy
 800373e:	f3bf 8f6f 	isb	sy
 8003742:	b662      	cpsie	i
 8003744:	f7ff f8ee 	bl	8002924 <vTaskSwitchContext>
 8003748:	f04f 0000 	mov.w	r0, #0
 800374c:	f380 8811 	msr	BASEPRI, r0
 8003750:	bc09      	pop	{r0, r3}
 8003752:	6819      	ldr	r1, [r3, #0]
 8003754:	6808      	ldr	r0, [r1, #0]
 8003756:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800375a:	f01e 0f10 	tst.w	lr, #16
 800375e:	bf08      	it	eq
 8003760:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003764:	f380 8809 	msr	PSP, r0
 8003768:	f3bf 8f6f 	isb	sy
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop

08003770 <pxCurrentTCBConst>:
 8003770:	200011c0 	.word	0x200011c0

08003774 <SysTick_Handler>:
{
 8003774:	b508      	push	{r3, lr}
	__asm volatile
 8003776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377a:	b672      	cpsid	i
 800377c:	f383 8811 	msr	BASEPRI, r3
 8003780:	f3bf 8f6f 	isb	sy
 8003784:	f3bf 8f4f 	dsb	sy
 8003788:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 800378a:	f7fe ff9b 	bl	80026c4 <xTaskIncrementTick>
 800378e:	b128      	cbz	r0, 800379c <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003790:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003794:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003798:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 800379c:	2300      	movs	r3, #0
 800379e:	f383 8811 	msr	BASEPRI, r3
}
 80037a2:	bd08      	pop	{r3, pc}

080037a4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80037a4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80037a8:	2300      	movs	r3, #0
 80037aa:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80037ac:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80037ae:	4b05      	ldr	r3, [pc, #20]	; (80037c4 <vPortSetupTimerInterrupt+0x20>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4905      	ldr	r1, [pc, #20]	; (80037c8 <vPortSetupTimerInterrupt+0x24>)
 80037b4:	fba1 1303 	umull	r1, r3, r1, r3
 80037b8:	099b      	lsrs	r3, r3, #6
 80037ba:	3b01      	subs	r3, #1
 80037bc:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80037be:	2307      	movs	r3, #7
 80037c0:	6113      	str	r3, [r2, #16]
}
 80037c2:	4770      	bx	lr
 80037c4:	200000a8 	.word	0x200000a8
 80037c8:	10624dd3 	.word	0x10624dd3

080037cc <xPortStartScheduler>:
{
 80037cc:	b530      	push	{r4, r5, lr}
 80037ce:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80037d0:	4b2f      	ldr	r3, [pc, #188]	; (8003890 <xPortStartScheduler+0xc4>)
 80037d2:	781a      	ldrb	r2, [r3, #0]
 80037d4:	b2d2      	uxtb	r2, r2
 80037d6:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80037d8:	22ff      	movs	r2, #255	; 0xff
 80037da:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80037e4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80037e8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80037ec:	4a29      	ldr	r2, [pc, #164]	; (8003894 <xPortStartScheduler+0xc8>)
 80037ee:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80037f0:	2307      	movs	r3, #7
 80037f2:	6053      	str	r3, [r2, #4]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80037f4:	e009      	b.n	800380a <xPortStartScheduler+0x3e>
			ulMaxPRIGROUPValue--;
 80037f6:	4a27      	ldr	r2, [pc, #156]	; (8003894 <xPortStartScheduler+0xc8>)
 80037f8:	6853      	ldr	r3, [r2, #4]
 80037fa:	3b01      	subs	r3, #1
 80037fc:	6053      	str	r3, [r2, #4]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80037fe:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003802:	005b      	lsls	r3, r3, #1
 8003804:	b2db      	uxtb	r3, r3
 8003806:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800380a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800380e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003812:	d1f0      	bne.n	80037f6 <xPortStartScheduler+0x2a>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003814:	4b1f      	ldr	r3, [pc, #124]	; (8003894 <xPortStartScheduler+0xc8>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	2b03      	cmp	r3, #3
 800381a:	d00a      	beq.n	8003832 <xPortStartScheduler+0x66>
	__asm volatile
 800381c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003820:	b672      	cpsid	i
 8003822:	f383 8811 	msr	BASEPRI, r3
 8003826:	f3bf 8f6f 	isb	sy
 800382a:	f3bf 8f4f 	dsb	sy
 800382e:	b662      	cpsie	i
 8003830:	e7fe      	b.n	8003830 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003832:	021b      	lsls	r3, r3, #8
 8003834:	4a17      	ldr	r2, [pc, #92]	; (8003894 <xPortStartScheduler+0xc8>)
 8003836:	6053      	str	r3, [r2, #4]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003838:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800383c:	6053      	str	r3, [r2, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800383e:	9b01      	ldr	r3, [sp, #4]
 8003840:	b2db      	uxtb	r3, r3
 8003842:	4a13      	ldr	r2, [pc, #76]	; (8003890 <xPortStartScheduler+0xc4>)
 8003844:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003846:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 800384a:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800384e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003852:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003856:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800385a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800385e:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8003862:	f7ff ff9f 	bl	80037a4 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8003866:	2500      	movs	r5, #0
 8003868:	4b0b      	ldr	r3, [pc, #44]	; (8003898 <xPortStartScheduler+0xcc>)
 800386a:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800386c:	f7ff fede 	bl	800362c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003870:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8003874:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003878:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 800387c:	f7ff fec2 	bl	8003604 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8003880:	f7ff f850 	bl	8002924 <vTaskSwitchContext>
	prvTaskExitError();
 8003884:	f7ff fe9a 	bl	80035bc <prvTaskExitError>
}
 8003888:	4628      	mov	r0, r5
 800388a:	b003      	add	sp, #12
 800388c:	bd30      	pop	{r4, r5, pc}
 800388e:	bf00      	nop
 8003890:	e000e400 	.word	0xe000e400
 8003894:	20001318 	.word	0x20001318
 8003898:	20000014 	.word	0x20000014

0800389c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800389c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80038a0:	2b0f      	cmp	r3, #15
 80038a2:	d911      	bls.n	80038c8 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80038a4:	4a13      	ldr	r2, [pc, #76]	; (80038f4 <vPortValidateInterruptPriority+0x58>)
 80038a6:	5c9b      	ldrb	r3, [r3, r2]
 80038a8:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80038aa:	4a13      	ldr	r2, [pc, #76]	; (80038f8 <vPortValidateInterruptPriority+0x5c>)
 80038ac:	7812      	ldrb	r2, [r2, #0]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d90a      	bls.n	80038c8 <vPortValidateInterruptPriority+0x2c>
 80038b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b6:	b672      	cpsid	i
 80038b8:	f383 8811 	msr	BASEPRI, r3
 80038bc:	f3bf 8f6f 	isb	sy
 80038c0:	f3bf 8f4f 	dsb	sy
 80038c4:	b662      	cpsie	i
 80038c6:	e7fe      	b.n	80038c6 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80038c8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80038cc:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 80038d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80038d4:	4a08      	ldr	r2, [pc, #32]	; (80038f8 <vPortValidateInterruptPriority+0x5c>)
 80038d6:	6852      	ldr	r2, [r2, #4]
 80038d8:	4293      	cmp	r3, r2
 80038da:	d90a      	bls.n	80038f2 <vPortValidateInterruptPriority+0x56>
 80038dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e0:	b672      	cpsid	i
 80038e2:	f383 8811 	msr	BASEPRI, r3
 80038e6:	f3bf 8f6f 	isb	sy
 80038ea:	f3bf 8f4f 	dsb	sy
 80038ee:	b662      	cpsie	i
 80038f0:	e7fe      	b.n	80038f0 <vPortValidateInterruptPriority+0x54>
	}
 80038f2:	4770      	bx	lr
 80038f4:	e000e3f0 	.word	0xe000e3f0
 80038f8:	20001318 	.word	0x20001318

080038fc <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80038fc:	4a10      	ldr	r2, [pc, #64]	; (8003940 <prvHeapInit+0x44>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80038fe:	f012 0f07 	tst.w	r2, #7
 8003902:	d01a      	beq.n	800393a <prvHeapInit+0x3e>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003904:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003906:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800390a:	f5c1 5370 	rsb	r3, r1, #15360	; 0x3c00
 800390e:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003910:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003912:	490c      	ldr	r1, [pc, #48]	; (8003944 <prvHeapInit+0x48>)
 8003914:	600a      	str	r2, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003916:	2000      	movs	r0, #0
 8003918:	6048      	str	r0, [r1, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800391a:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800391c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800391e:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8003922:	608b      	str	r3, [r1, #8]
	pxEnd->xBlockSize = 0;
 8003924:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003926:	6018      	str	r0, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003928:	1a98      	subs	r0, r3, r2
 800392a:	6050      	str	r0, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800392c:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800392e:	60c8      	str	r0, [r1, #12]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003930:	6108      	str	r0, [r1, #16]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003932:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003936:	614b      	str	r3, [r1, #20]
}
 8003938:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800393a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800393e:	e7e8      	b.n	8003912 <prvHeapInit+0x16>
 8003940:	20001338 	.word	0x20001338
 8003944:	20001320 	.word	0x20001320

08003948 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003948:	4b16      	ldr	r3, [pc, #88]	; (80039a4 <prvInsertBlockIntoFreeList+0x5c>)
 800394a:	461a      	mov	r2, r3
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4283      	cmp	r3, r0
 8003950:	d3fb      	bcc.n	800394a <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003952:	6851      	ldr	r1, [r2, #4]
 8003954:	eb02 0c01 	add.w	ip, r2, r1
 8003958:	4584      	cmp	ip, r0
 800395a:	d009      	beq.n	8003970 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800395c:	6841      	ldr	r1, [r0, #4]
 800395e:	eb00 0c01 	add.w	ip, r0, r1
 8003962:	4563      	cmp	r3, ip
 8003964:	d009      	beq.n	800397a <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003966:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003968:	4290      	cmp	r0, r2
 800396a:	d019      	beq.n	80039a0 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800396c:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 800396e:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003970:	6840      	ldr	r0, [r0, #4]
 8003972:	4401      	add	r1, r0
 8003974:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8003976:	4610      	mov	r0, r2
 8003978:	e7f0      	b.n	800395c <prvInsertBlockIntoFreeList+0x14>
{
 800397a:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800397c:	4c09      	ldr	r4, [pc, #36]	; (80039a4 <prvInsertBlockIntoFreeList+0x5c>)
 800397e:	68a4      	ldr	r4, [r4, #8]
 8003980:	42a3      	cmp	r3, r4
 8003982:	d00b      	beq.n	800399c <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	4419      	add	r1, r3
 8003988:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800398a:	6813      	ldr	r3, [r2, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8003990:	4290      	cmp	r0, r2
 8003992:	d000      	beq.n	8003996 <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003994:	6010      	str	r0, [r2, #0]
	}
}
 8003996:	f85d 4b04 	ldr.w	r4, [sp], #4
 800399a:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800399c:	6004      	str	r4, [r0, #0]
 800399e:	e7f7      	b.n	8003990 <prvInsertBlockIntoFreeList+0x48>
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	20001320 	.word	0x20001320

080039a8 <pvPortMalloc>:
{
 80039a8:	b570      	push	{r4, r5, r6, lr}
 80039aa:	4605      	mov	r5, r0
	vTaskSuspendAll();
 80039ac:	f7fe fe7a 	bl	80026a4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80039b0:	4b35      	ldr	r3, [pc, #212]	; (8003a88 <pvPortMalloc+0xe0>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	b1a3      	cbz	r3, 80039e0 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80039b6:	4b34      	ldr	r3, [pc, #208]	; (8003a88 <pvPortMalloc+0xe0>)
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	421d      	tst	r5, r3
 80039bc:	d14b      	bne.n	8003a56 <pvPortMalloc+0xae>
			if( xWantedSize > 0 )
 80039be:	b135      	cbz	r5, 80039ce <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 80039c0:	3508      	adds	r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80039c2:	f015 0f07 	tst.w	r5, #7
 80039c6:	d002      	beq.n	80039ce <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80039c8:	f025 0507 	bic.w	r5, r5, #7
 80039cc:	3508      	adds	r5, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80039ce:	2d00      	cmp	r5, #0
 80039d0:	d043      	beq.n	8003a5a <pvPortMalloc+0xb2>
 80039d2:	4b2d      	ldr	r3, [pc, #180]	; (8003a88 <pvPortMalloc+0xe0>)
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	42ab      	cmp	r3, r5
 80039d8:	d350      	bcc.n	8003a7c <pvPortMalloc+0xd4>
				pxBlock = xStart.pxNextFreeBlock;
 80039da:	4a2b      	ldr	r2, [pc, #172]	; (8003a88 <pvPortMalloc+0xe0>)
 80039dc:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80039de:	e004      	b.n	80039ea <pvPortMalloc+0x42>
			prvHeapInit();
 80039e0:	f7ff ff8c 	bl	80038fc <prvHeapInit>
 80039e4:	e7e7      	b.n	80039b6 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 80039e6:	4622      	mov	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 80039e8:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80039ea:	6863      	ldr	r3, [r4, #4]
 80039ec:	42ab      	cmp	r3, r5
 80039ee:	d202      	bcs.n	80039f6 <pvPortMalloc+0x4e>
 80039f0:	6823      	ldr	r3, [r4, #0]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1f7      	bne.n	80039e6 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 80039f6:	4b24      	ldr	r3, [pc, #144]	; (8003a88 <pvPortMalloc+0xe0>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	42a3      	cmp	r3, r4
 80039fc:	d040      	beq.n	8003a80 <pvPortMalloc+0xd8>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80039fe:	6816      	ldr	r6, [r2, #0]
 8003a00:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003a02:	6823      	ldr	r3, [r4, #0]
 8003a04:	6013      	str	r3, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003a06:	6863      	ldr	r3, [r4, #4]
 8003a08:	1b5b      	subs	r3, r3, r5
 8003a0a:	2b10      	cmp	r3, #16
 8003a0c:	d912      	bls.n	8003a34 <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003a0e:	1960      	adds	r0, r4, r5
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a10:	f010 0f07 	tst.w	r0, #7
 8003a14:	d00a      	beq.n	8003a2c <pvPortMalloc+0x84>
 8003a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a1a:	b672      	cpsid	i
 8003a1c:	f383 8811 	msr	BASEPRI, r3
 8003a20:	f3bf 8f6f 	isb	sy
 8003a24:	f3bf 8f4f 	dsb	sy
 8003a28:	b662      	cpsie	i
 8003a2a:	e7fe      	b.n	8003a2a <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003a2c:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003a2e:	6065      	str	r5, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003a30:	f7ff ff8a 	bl	8003948 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003a34:	6861      	ldr	r1, [r4, #4]
 8003a36:	4a14      	ldr	r2, [pc, #80]	; (8003a88 <pvPortMalloc+0xe0>)
 8003a38:	6913      	ldr	r3, [r2, #16]
 8003a3a:	1a5b      	subs	r3, r3, r1
 8003a3c:	6113      	str	r3, [r2, #16]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003a3e:	68d2      	ldr	r2, [r2, #12]
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d201      	bcs.n	8003a48 <pvPortMalloc+0xa0>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003a44:	4a10      	ldr	r2, [pc, #64]	; (8003a88 <pvPortMalloc+0xe0>)
 8003a46:	60d3      	str	r3, [r2, #12]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003a48:	4b0f      	ldr	r3, [pc, #60]	; (8003a88 <pvPortMalloc+0xe0>)
 8003a4a:	695b      	ldr	r3, [r3, #20]
 8003a4c:	430b      	orrs	r3, r1
 8003a4e:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003a50:	2300      	movs	r3, #0
 8003a52:	6023      	str	r3, [r4, #0]
 8003a54:	e002      	b.n	8003a5c <pvPortMalloc+0xb4>
void *pvReturn = NULL;
 8003a56:	2600      	movs	r6, #0
 8003a58:	e000      	b.n	8003a5c <pvPortMalloc+0xb4>
 8003a5a:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 8003a5c:	f7fe fec0 	bl	80027e0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a60:	f016 0f07 	tst.w	r6, #7
 8003a64:	d00e      	beq.n	8003a84 <pvPortMalloc+0xdc>
 8003a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a6a:	b672      	cpsid	i
 8003a6c:	f383 8811 	msr	BASEPRI, r3
 8003a70:	f3bf 8f6f 	isb	sy
 8003a74:	f3bf 8f4f 	dsb	sy
 8003a78:	b662      	cpsie	i
 8003a7a:	e7fe      	b.n	8003a7a <pvPortMalloc+0xd2>
void *pvReturn = NULL;
 8003a7c:	2600      	movs	r6, #0
 8003a7e:	e7ed      	b.n	8003a5c <pvPortMalloc+0xb4>
 8003a80:	2600      	movs	r6, #0
 8003a82:	e7eb      	b.n	8003a5c <pvPortMalloc+0xb4>
}
 8003a84:	4630      	mov	r0, r6
 8003a86:	bd70      	pop	{r4, r5, r6, pc}
 8003a88:	20001320 	.word	0x20001320

08003a8c <vPortFree>:
	if( pv != NULL )
 8003a8c:	2800      	cmp	r0, #0
 8003a8e:	d034      	beq.n	8003afa <vPortFree+0x6e>
{
 8003a90:	b538      	push	{r3, r4, r5, lr}
 8003a92:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8003a94:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003a98:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8003a9c:	4a17      	ldr	r2, [pc, #92]	; (8003afc <vPortFree+0x70>)
 8003a9e:	6952      	ldr	r2, [r2, #20]
 8003aa0:	4213      	tst	r3, r2
 8003aa2:	d10a      	bne.n	8003aba <vPortFree+0x2e>
 8003aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa8:	b672      	cpsid	i
 8003aaa:	f383 8811 	msr	BASEPRI, r3
 8003aae:	f3bf 8f6f 	isb	sy
 8003ab2:	f3bf 8f4f 	dsb	sy
 8003ab6:	b662      	cpsie	i
 8003ab8:	e7fe      	b.n	8003ab8 <vPortFree+0x2c>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003aba:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8003abe:	b151      	cbz	r1, 8003ad6 <vPortFree+0x4a>
 8003ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac4:	b672      	cpsid	i
 8003ac6:	f383 8811 	msr	BASEPRI, r3
 8003aca:	f3bf 8f6f 	isb	sy
 8003ace:	f3bf 8f4f 	dsb	sy
 8003ad2:	b662      	cpsie	i
 8003ad4:	e7fe      	b.n	8003ad4 <vPortFree+0x48>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003ad6:	ea23 0302 	bic.w	r3, r3, r2
 8003ada:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8003ade:	f7fe fde1 	bl	80026a4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003ae2:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8003ae6:	4a05      	ldr	r2, [pc, #20]	; (8003afc <vPortFree+0x70>)
 8003ae8:	6913      	ldr	r3, [r2, #16]
 8003aea:	440b      	add	r3, r1
 8003aec:	6113      	str	r3, [r2, #16]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003aee:	4628      	mov	r0, r5
 8003af0:	f7ff ff2a 	bl	8003948 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8003af4:	f7fe fe74 	bl	80027e0 <xTaskResumeAll>
}
 8003af8:	bd38      	pop	{r3, r4, r5, pc}
 8003afa:	4770      	bx	lr
 8003afc:	20001320 	.word	0x20001320

08003b00 <PushButton_Thread>:
    while (*angle >= 360.0f) *angle -= 360.0f;
    while (*angle < 0.0f) *angle += 360.0f;
}


void PushButton_Thread(void *argument) {
 8003b00:	b500      	push	{lr}
 8003b02:	b087      	sub	sp, #28
	// PA0 button init
	GPIO_InitTypeDef GPIO_InitStruct = { .Pin = GPIO_PIN_0, .Mode =
 8003b04:	2300      	movs	r3, #0
 8003b06:	9301      	str	r3, [sp, #4]
 8003b08:	9302      	str	r3, [sp, #8]
 8003b0a:	9303      	str	r3, [sp, #12]
 8003b0c:	9304      	str	r3, [sp, #16]
 8003b0e:	9305      	str	r3, [sp, #20]
 8003b10:	2301      	movs	r3, #1
 8003b12:	9301      	str	r3, [sp, #4]
 8003b14:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8003b18:	9302      	str	r3, [sp, #8]
			GPIO_MODE_IT_RISING_FALLING, .Pull = GPIO_NOPULL };
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b1a:	a901      	add	r1, sp, #4
 8003b1c:	4803      	ldr	r0, [pc, #12]	; (8003b2c <PushButton_Thread+0x2c>)
 8003b1e:	f002 fb57 	bl	80061d0 <HAL_GPIO_Init>
	while(1){
		osDelay(10000);
 8003b22:	f242 7010 	movw	r0, #10000	; 0x2710
 8003b26:	f7fd fbe7 	bl	80012f8 <osDelay>
	while(1){
 8003b2a:	e7fa      	b.n	8003b22 <PushButton_Thread+0x22>
 8003b2c:	40020000 	.word	0x40020000

08003b30 <LCDRefresh_Thread>:
void LCDRefresh_Thread(void *argument) {
 8003b30:	b510      	push	{r4, lr}
	BSP_LCD_Init();
 8003b32:	f7fd f927 	bl	8000d84 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0,LCD_FB_START_ADDRESS);
 8003b36:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8003b3a:	2000      	movs	r0, #0
 8003b3c:	f7fc ff3e 	bl	80009bc <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(0);
 8003b40:	2000      	movs	r0, #0
 8003b42:	f7fc ff7b 	bl	8000a3c <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 8003b46:	f7fc ffb3 	bl	8000ab0 <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8003b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8003b4e:	f7fc ff93 	bl	8000a78 <BSP_LCD_Clear>
	uint32_t frameBufferWidth = BSP_LCD_GetXSize();
 8003b52:	f7fc ff27 	bl	80009a4 <BSP_LCD_GetXSize>
 8003b56:	4604      	mov	r4, r0
	uint32_t frameBufferHeight = BSP_LCD_GetYSize();
 8003b58:	f7fc ff2a 	bl	80009b0 <BSP_LCD_GetYSize>
	for (uint32_t y = 0; y < frameBufferHeight; y++) {
 8003b5c:	f04f 0c00 	mov.w	ip, #0
 8003b60:	e00c      	b.n	8003b7c <LCDRefresh_Thread+0x4c>
	    	((uint32_t*)LCD_FB_START_ADDRESS)[y * frameBufferWidth + x] = color;
 8003b62:	fb04 230c 	mla	r3, r4, ip, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8003b6c:	f46f 417f 	mvn.w	r1, #65280	; 0xff00
 8003b70:	6019      	str	r1, [r3, #0]
	    for (uint32_t x = 0; x < frameBufferWidth; x++) {
 8003b72:	3201      	adds	r2, #1
 8003b74:	42a2      	cmp	r2, r4
 8003b76:	d3f4      	bcc.n	8003b62 <LCDRefresh_Thread+0x32>
	for (uint32_t y = 0; y < frameBufferHeight; y++) {
 8003b78:	f10c 0c01 	add.w	ip, ip, #1
 8003b7c:	4584      	cmp	ip, r0
 8003b7e:	d201      	bcs.n	8003b84 <LCDRefresh_Thread+0x54>
	    for (uint32_t x = 0; x < frameBufferWidth; x++) {
 8003b80:	2200      	movs	r2, #0
 8003b82:	e7f7      	b.n	8003b74 <LCDRefresh_Thread+0x44>
    	osMutexAcquire(frameBufferMutex, osWaitForever);
 8003b84:	4c06      	ldr	r4, [pc, #24]	; (8003ba0 <LCDRefresh_Thread+0x70>)
 8003b86:	f04f 31ff 	mov.w	r1, #4294967295
 8003b8a:	6820      	ldr	r0, [r4, #0]
 8003b8c:	f7fd fc9c 	bl	80014c8 <osMutexAcquire>
		osMutexRelease(frameBufferMutex);
 8003b90:	6820      	ldr	r0, [r4, #0]
 8003b92:	f7fd fcd7 	bl	8001544 <osMutexRelease>
		osDelay(1000); // 25Hz
 8003b96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b9a:	f7fd fbad 	bl	80012f8 <osDelay>
    while (1) {
 8003b9e:	e7f1      	b.n	8003b84 <LCDRefresh_Thread+0x54>
 8003ba0:	20004f38 	.word	0x20004f38

08003ba4 <main>:
int main(void) {
 8003ba4:	b500      	push	{lr}
 8003ba6:	b085      	sub	sp, #20
	Sys_Init();
 8003ba8:	f001 f80a 	bl	8004bc0 <Sys_Init>
	osKernelInitialize();
 8003bac:	f7fd fa44 	bl	8001038 <osKernelInitialize>
	GyroThreadHandle = osThreadNew(Gyro_Thread, NULL, &Gyro_Thread_attributes);
 8003bb0:	4e1e      	ldr	r6, [pc, #120]	; (8003c2c <main+0x88>)
 8003bb2:	4632      	mov	r2, r6
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	481e      	ldr	r0, [pc, #120]	; (8003c30 <main+0x8c>)
 8003bb8:	f7fd fa80 	bl	80010bc <osThreadNew>
 8003bbc:	4c1d      	ldr	r4, [pc, #116]	; (8003c34 <main+0x90>)
 8003bbe:	6060      	str	r0, [r4, #4]
	UART_ThreadHandle = osThreadNew(UART_Thread, NULL, &UART_Thread_attributes);
 8003bc0:	f106 0224 	add.w	r2, r6, #36	; 0x24
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	481c      	ldr	r0, [pc, #112]	; (8003c38 <main+0x94>)
 8003bc8:	f7fd fa78 	bl	80010bc <osThreadNew>
 8003bcc:	60a0      	str	r0, [r4, #8]
	uartQueueHandle = osMessageQueueNew(1, sizeof(MPU6050_t),
 8003bce:	f106 0248 	add.w	r2, r6, #72	; 0x48
 8003bd2:	2158      	movs	r1, #88	; 0x58
 8003bd4:	2001      	movs	r0, #1
 8003bd6:	f7fd fceb 	bl	80015b0 <osMessageQueueNew>
 8003bda:	60e0      	str	r0, [r4, #12]
	const osSemaphoreAttr_t mpuDataSemaphore_attributes = {
 8003bdc:	2500      	movs	r5, #0
 8003bde:	9500      	str	r5, [sp, #0]
 8003be0:	9501      	str	r5, [sp, #4]
 8003be2:	9502      	str	r5, [sp, #8]
 8003be4:	9503      	str	r5, [sp, #12]
 8003be6:	4b15      	ldr	r3, [pc, #84]	; (8003c3c <main+0x98>)
 8003be8:	9300      	str	r3, [sp, #0]
    frameBufferMutex = osMutexNew(&frameBufferMutex_attributes);
 8003bea:	f106 0060 	add.w	r0, r6, #96	; 0x60
 8003bee:	f7fd fc0f 	bl	8001410 <osMutexNew>
 8003bf2:	6020      	str	r0, [r4, #0]
    LCDRefresh_ThreadHandle=osThreadNew(LCDRefresh_Thread, NULL, &LCDRefresh_Thread_attributes);
 8003bf4:	f106 0270 	add.w	r2, r6, #112	; 0x70
 8003bf8:	4629      	mov	r1, r5
 8003bfa:	4811      	ldr	r0, [pc, #68]	; (8003c40 <main+0x9c>)
 8003bfc:	f7fd fa5e 	bl	80010bc <osThreadNew>
 8003c00:	6120      	str	r0, [r4, #16]
    LCDBuffer_ThreadHandle=osThreadNew(LCDBuffer_Thread, NULL, &LCDBuffer_Thread_attributes);
 8003c02:	f106 0294 	add.w	r2, r6, #148	; 0x94
 8003c06:	4629      	mov	r1, r5
 8003c08:	480e      	ldr	r0, [pc, #56]	; (8003c44 <main+0xa0>)
 8003c0a:	f7fd fa57 	bl	80010bc <osThreadNew>
 8003c0e:	6160      	str	r0, [r4, #20]
	PushButton_ThreadHandle = osThreadNew(PushButton_Thread, NULL, &PushButton_Thread_attributes);
 8003c10:	f106 02b8 	add.w	r2, r6, #184	; 0xb8
 8003c14:	4629      	mov	r1, r5
 8003c16:	480c      	ldr	r0, [pc, #48]	; (8003c48 <main+0xa4>)
 8003c18:	f7fd fa50 	bl	80010bc <osThreadNew>
 8003c1c:	61a0      	str	r0, [r4, #24]
	pushButtonFlag = osEventFlagsNew(NULL);	osKernelStart();
 8003c1e:	4628      	mov	r0, r5
 8003c20:	f7fd fb88 	bl	8001334 <osEventFlagsNew>
 8003c24:	61e0      	str	r0, [r4, #28]
 8003c26:	f7fd fa25 	bl	8001074 <osKernelStart>
	while (1) {
 8003c2a:	e7fe      	b.n	8003c2a <main+0x86>
 8003c2c:	0800ea94 	.word	0x0800ea94
 8003c30:	08003d99 	.word	0x08003d99
 8003c34:	20004f38 	.word	0x20004f38
 8003c38:	0800405d 	.word	0x0800405d
 8003c3c:	0800ec34 	.word	0x0800ec34
 8003c40:	08003b31 	.word	0x08003b31
 8003c44:	08004369 	.word	0x08004369
 8003c48:	08003b01 	.word	0x08003b01

08003c4c <USART1_IRQHandler>:
void USART1_IRQHandler(void) {
 8003c4c:	b508      	push	{r3, lr}
	HAL_UART_IRQHandler(&USB_UART);
 8003c4e:	4802      	ldr	r0, [pc, #8]	; (8003c58 <USART1_IRQHandler+0xc>)
 8003c50:	f004 fcd4 	bl	80085fc <HAL_UART_IRQHandler>
}
 8003c54:	bd08      	pop	{r3, pc}
 8003c56:	bf00      	nop
 8003c58:	200053ac 	.word	0x200053ac

08003c5c <USART6_IRQHandler>:
void USART6_IRQHandler(void) {
 8003c5c:	b508      	push	{r3, lr}
	HAL_UART_IRQHandler(&DISCO_UART);
 8003c5e:	4802      	ldr	r0, [pc, #8]	; (8003c68 <USART6_IRQHandler+0xc>)
 8003c60:	f004 fccc 	bl	80085fc <HAL_UART_IRQHandler>
}
 8003c64:	bd08      	pop	{r3, pc}
 8003c66:	bf00      	nop
 8003c68:	20004f58 	.word	0x20004f58

08003c6c <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void) {
 8003c6c:	b508      	push	{r3, lr}
	HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003c6e:	4802      	ldr	r0, [pc, #8]	; (8003c78 <DMA2_Stream1_IRQHandler+0xc>)
 8003c70:	f001 fcfe 	bl	8005670 <HAL_DMA_IRQHandler>
}
 8003c74:	bd08      	pop	{r3, pc}
 8003c76:	bf00      	nop
 8003c78:	20004fe0 	.word	0x20004fe0

08003c7c <DMA2_Stream5_IRQHandler>:
void DMA2_Stream5_IRQHandler(void) {
 8003c7c:	b508      	push	{r3, lr}
	HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003c7e:	4802      	ldr	r0, [pc, #8]	; (8003c88 <DMA2_Stream5_IRQHandler+0xc>)
 8003c80:	f001 fcf6 	bl	8005670 <HAL_DMA_IRQHandler>
}
 8003c84:	bd08      	pop	{r3, pc}
 8003c86:	bf00      	nop
 8003c88:	20005040 	.word	0x20005040

08003c8c <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void) {
 8003c8c:	b508      	push	{r3, lr}
    HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8003c8e:	4802      	ldr	r0, [pc, #8]	; (8003c98 <DMA2_Stream6_IRQHandler+0xc>)
 8003c90:	f001 fcee 	bl	8005670 <HAL_DMA_IRQHandler>
}
 8003c94:	bd08      	pop	{r3, pc}
 8003c96:	bf00      	nop
 8003c98:	200050a0 	.word	0x200050a0

08003c9c <DMA2_Stream7_IRQHandler>:
void DMA2_Stream7_IRQHandler(void) {
 8003c9c:	b508      	push	{r3, lr}
    HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003c9e:	4802      	ldr	r0, [pc, #8]	; (8003ca8 <DMA2_Stream7_IRQHandler+0xc>)
 8003ca0:	f001 fce6 	bl	8005670 <HAL_DMA_IRQHandler>
}
 8003ca4:	bd08      	pop	{r3, pc}
 8003ca6:	bf00      	nop
 8003ca8:	20005100 	.word	0x20005100

08003cac <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003cac:	b538      	push	{r3, r4, r5, lr}
	if(huart->Instance==USART6){
 8003cae:	6802      	ldr	r2, [r0, #0]
 8003cb0:	4b0a      	ldr	r3, [pc, #40]	; (8003cdc <HAL_UART_RxCpltCallback+0x30>)
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d000      	beq.n	8003cb8 <HAL_UART_RxCpltCallback+0xc>
}
 8003cb6:	bd38      	pop	{r3, r4, r5, pc}
	    HAL_UART_AbortReceive(&DISCO_UART);// Cancel receving attemp
 8003cb8:	4c09      	ldr	r4, [pc, #36]	; (8003ce0 <HAL_UART_RxCpltCallback+0x34>)
 8003cba:	f104 0520 	add.w	r5, r4, #32
 8003cbe:	4628      	mov	r0, r5
 8003cc0:	f004 fb7a 	bl	80083b8 <HAL_UART_AbortReceive>
		HAL_UART_Receive_DMA(&DISCO_UART, &PeerMpu6050 , sizeof(MPU6050_t));// Get ready to receive Buffer
 8003cc4:	2258      	movs	r2, #88	; 0x58
 8003cc6:	f504 710a 	add.w	r1, r4, #552	; 0x228
 8003cca:	4628      	mov	r0, r5
 8003ccc:	f005 f9ba 	bl	8009044 <HAL_UART_Receive_DMA>
		osThreadFlagsSet(LCDBuffer_ThreadHandle, 0x00000001U);
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	6960      	ldr	r0, [r4, #20]
 8003cd4:	f7fd fa5e 	bl	8001194 <osThreadFlagsSet>
}
 8003cd8:	e7ed      	b.n	8003cb6 <HAL_UART_RxCpltCallback+0xa>
 8003cda:	bf00      	nop
 8003cdc:	40011400 	.word	0x40011400
 8003ce0:	20004f38 	.word	0x20004f38

08003ce4 <HAL_UART_TxCpltCallback>:
}
 8003ce4:	4770      	bx	lr
	...

08003ce8 <I2C_init>:
void I2C_init() {
 8003ce8:	b500      	push	{lr}
 8003cea:	b087      	sub	sp, #28
	hi2c1.Instance = I2C1;
 8003cec:	4822      	ldr	r0, [pc, #136]	; (8003d78 <I2C_init+0x90>)
 8003cee:	4b23      	ldr	r3, [pc, #140]	; (8003d7c <I2C_init+0x94>)
 8003cf0:	f8c0 3280 	str.w	r3, [r0, #640]	; 0x280
	hi2c1.Init.Timing = 0x00506682;
 8003cf4:	4b22      	ldr	r3, [pc, #136]	; (8003d80 <I2C_init+0x98>)
 8003cf6:	f8c0 3284 	str.w	r3, [r0, #644]	; 0x284
	hi2c1.Init.OwnAddress1 = 0;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	f8c0 3288 	str.w	r3, [r0, #648]	; 0x288
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003d00:	2201      	movs	r2, #1
 8003d02:	f8c0 228c 	str.w	r2, [r0, #652]	; 0x28c
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003d06:	f8c0 3290 	str.w	r3, [r0, #656]	; 0x290
	hi2c1.Init.OwnAddress2 = 0;
 8003d0a:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003d0e:	f8c0 3298 	str.w	r3, [r0, #664]	; 0x298
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003d12:	f8c0 329c 	str.w	r3, [r0, #668]	; 0x29c
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003d16:	f8c0 32a0 	str.w	r3, [r0, #672]	; 0x2a0
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003d1a:	f500 7020 	add.w	r0, r0, #640	; 0x280
 8003d1e:	f002 fd15 	bl	800674c <HAL_I2C_Init>
 8003d22:	b9e0      	cbnz	r0, 8003d5e <I2C_init+0x76>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003d24:	2100      	movs	r1, #0
 8003d26:	4817      	ldr	r0, [pc, #92]	; (8003d84 <I2C_init+0x9c>)
 8003d28:	f002 ff1c 	bl	8006b64 <HAL_I2CEx_ConfigAnalogFilter>
 8003d2c:	b9d8      	cbnz	r0, 8003d66 <I2C_init+0x7e>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003d2e:	2100      	movs	r1, #0
 8003d30:	4814      	ldr	r0, [pc, #80]	; (8003d84 <I2C_init+0x9c>)
 8003d32:	f002 ff45 	bl	8006bc0 <HAL_I2CEx_ConfigDigitalFilter>
 8003d36:	b9d0      	cbnz	r0, 8003d6e <I2C_init+0x86>
	gpio_init.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8003d38:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003d3c:	9301      	str	r3, [sp, #4]
	gpio_init.Mode = GPIO_MODE_AF_OD;
 8003d3e:	2312      	movs	r3, #18
 8003d40:	9302      	str	r3, [sp, #8]
	gpio_init.Pull = GPIO_PULLUP;
 8003d42:	2301      	movs	r3, #1
 8003d44:	9303      	str	r3, [sp, #12]
	gpio_init.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d46:	2303      	movs	r3, #3
 8003d48:	9304      	str	r3, [sp, #16]
	gpio_init.Alternate = GPIO_AF4_I2C1;
 8003d4a:	2304      	movs	r3, #4
 8003d4c:	9305      	str	r3, [sp, #20]
	HAL_GPIO_Init(GPIOB, &gpio_init);
 8003d4e:	eb0d 0103 	add.w	r1, sp, r3
 8003d52:	480d      	ldr	r0, [pc, #52]	; (8003d88 <I2C_init+0xa0>)
 8003d54:	f002 fa3c 	bl	80061d0 <HAL_GPIO_Init>
}
 8003d58:	b007      	add	sp, #28
 8003d5a:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("I2C init failed\n\r");
 8003d5e:	480b      	ldr	r0, [pc, #44]	; (8003d8c <I2C_init+0xa4>)
 8003d60:	f005 ff3e 	bl	8009be0 <iprintf>
 8003d64:	e7de      	b.n	8003d24 <I2C_init+0x3c>
		printf("I2C analog filter init failed\n\r");
 8003d66:	480a      	ldr	r0, [pc, #40]	; (8003d90 <I2C_init+0xa8>)
 8003d68:	f005 ff3a 	bl	8009be0 <iprintf>
 8003d6c:	e7df      	b.n	8003d2e <I2C_init+0x46>
		printf("I2C digital filter init failed\n\r");
 8003d6e:	4809      	ldr	r0, [pc, #36]	; (8003d94 <I2C_init+0xac>)
 8003d70:	f005 ff36 	bl	8009be0 <iprintf>
 8003d74:	e7e0      	b.n	8003d38 <I2C_init+0x50>
 8003d76:	bf00      	nop
 8003d78:	20004f38 	.word	0x20004f38
 8003d7c:	40005400 	.word	0x40005400
 8003d80:	00506682 	.word	0x00506682
 8003d84:	200051b8 	.word	0x200051b8
 8003d88:	40020400 	.word	0x40020400
 8003d8c:	0800ec48 	.word	0x0800ec48
 8003d90:	0800ec5c 	.word	0x0800ec5c
 8003d94:	0800ec7c 	.word	0x0800ec7c

08003d98 <Gyro_Thread>:
void Gyro_Thread(void *argument) {
 8003d98:	b508      	push	{r3, lr}
	I2C_init();
 8003d9a:	f7ff ffa5 	bl	8003ce8 <I2C_init>
	MPU6050_Init(&hi2c1);
 8003d9e:	4824      	ldr	r0, [pc, #144]	; (8003e30 <Gyro_Thread+0x98>)
 8003da0:	f000 ff2a 	bl	8004bf8 <MPU6050_Init>
	osDelay(100);
 8003da4:	2064      	movs	r0, #100	; 0x64
 8003da6:	f7fd faa7 	bl	80012f8 <osDelay>
 8003daa:	e00e      	b.n	8003dca <Gyro_Thread+0x32>
			HAL_UART_AbortTransmit(&DISCO_UART);// Cancel receving attemp
 8003dac:	4d21      	ldr	r5, [pc, #132]	; (8003e34 <Gyro_Thread+0x9c>)
 8003dae:	f105 0420 	add.w	r4, r5, #32
 8003db2:	4620      	mov	r0, r4
 8003db4:	f004 facc 	bl	8008350 <HAL_UART_AbortTransmit>
			HAL_UART_Transmit_DMA(&DISCO_UART, &mpu6050, sizeof(MPU6050_t));
 8003db8:	2258      	movs	r2, #88	; 0x58
 8003dba:	f505 7136 	add.w	r1, r5, #728	; 0x2d8
 8003dbe:	4620      	mov	r0, r4
 8003dc0:	f004 fa7c 	bl	80082bc <HAL_UART_Transmit_DMA>
		osDelay(100);
 8003dc4:	2064      	movs	r0, #100	; 0x64
 8003dc6:	f7fd fa97 	bl	80012f8 <osDelay>
		MPU6050_Read_All(&hi2c1, &mpu6050);
 8003dca:	4c1a      	ldr	r4, [pc, #104]	; (8003e34 <Gyro_Thread+0x9c>)
 8003dcc:	f504 7136 	add.w	r1, r4, #728	; 0x2d8
 8003dd0:	f504 7020 	add.w	r0, r4, #640	; 0x280
 8003dd4:	f000 ffc4 	bl	8004d60 <MPU6050_Read_All>
		if((mpu6050.Gx == 0) && (mpu6050.Gy == 0) && (mpu6050.Gz == 0) && (mpu6050.Ax == 0) && (mpu6050.Ay == 0) && (mpu6050.Az == 0)) {
 8003dd8:	ed94 7bc0 	vldr	d7, [r4, #768]	; 0x300
 8003ddc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8003de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003de4:	d1e2      	bne.n	8003dac <Gyro_Thread+0x14>
 8003de6:	ed94 7bc2 	vldr	d7, [r4, #776]	; 0x308
 8003dea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8003dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003df2:	d1db      	bne.n	8003dac <Gyro_Thread+0x14>
 8003df4:	ed94 7bc4 	vldr	d7, [r4, #784]	; 0x310
 8003df8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8003dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e00:	d1d4      	bne.n	8003dac <Gyro_Thread+0x14>
 8003e02:	ed94 7bb8 	vldr	d7, [r4, #736]	; 0x2e0
 8003e06:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8003e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e0e:	d1cd      	bne.n	8003dac <Gyro_Thread+0x14>
 8003e10:	ed94 7bba 	vldr	d7, [r4, #744]	; 0x2e8
 8003e14:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8003e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e1c:	d1c6      	bne.n	8003dac <Gyro_Thread+0x14>
 8003e1e:	ed94 7bbc 	vldr	d7, [r4, #752]	; 0x2f0
 8003e22:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8003e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e2a:	d0cb      	beq.n	8003dc4 <Gyro_Thread+0x2c>
 8003e2c:	e7be      	b.n	8003dac <Gyro_Thread+0x14>
 8003e2e:	bf00      	nop
 8003e30:	200051b8 	.word	0x200051b8
 8003e34:	20004f38 	.word	0x20004f38

08003e38 <DMA_init>:
void DMA_init() {
 8003e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e3c:	b082      	sub	sp, #8
	__HAL_RCC_DMA2_CLK_ENABLE();
 8003e3e:	4b65      	ldr	r3, [pc, #404]	; (8003fd4 <DMA_init+0x19c>)
 8003e40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e42:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003e46:	631a      	str	r2, [r3, #48]	; 0x30
 8003e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e4e:	9301      	str	r3, [sp, #4]
 8003e50:	9b01      	ldr	r3, [sp, #4]
	hdma_usart1_tx.Instance = DMA2_Stream7;
 8003e52:	4c61      	ldr	r4, [pc, #388]	; (8003fd8 <DMA_init+0x1a0>)
 8003e54:	4b61      	ldr	r3, [pc, #388]	; (8003fdc <DMA_init+0x1a4>)
 8003e56:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
	hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8003e5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003e5e:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
	hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003e62:	2040      	movs	r0, #64	; 0x40
 8003e64:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0
	hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e68:	2500      	movs	r5, #0
 8003e6a:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
	hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003e6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e72:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
	hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e76:	f8c4 51dc 	str.w	r5, [r4, #476]	; 0x1dc
	hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e7a:	f8c4 51e0 	str.w	r5, [r4, #480]	; 0x1e0
	hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003e7e:	f8c4 51e4 	str.w	r5, [r4, #484]	; 0x1e4
	hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003e82:	f8c4 51e8 	str.w	r5, [r4, #488]	; 0x1e8
	hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e86:	f8c4 51ec 	str.w	r5, [r4, #492]	; 0x1ec
	hdma_usart1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003e8a:	2603      	movs	r6, #3
 8003e8c:	f8c4 61f0 	str.w	r6, [r4, #496]	; 0x1f0
	hdma_usart1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8003e90:	f8c4 51f4 	str.w	r5, [r4, #500]	; 0x1f4
	hdma_usart1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003e94:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
	hdma_usart1_rx.Instance = DMA2_Stream5;
 8003e98:	4951      	ldr	r1, [pc, #324]	; (8003fe0 <DMA_init+0x1a8>)
 8003e9a:	f8c4 1108 	str.w	r1, [r4, #264]	; 0x108
	hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003e9e:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
	hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ea2:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
	hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ea6:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
	hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003eaa:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
	hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003eae:	f8c4 511c 	str.w	r5, [r4, #284]	; 0x11c
	hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003eb2:	f8c4 5120 	str.w	r5, [r4, #288]	; 0x120
	hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003eb6:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
	hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003eba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ebe:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
	hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ec2:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
	hdma_usart1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003ec6:	f8c4 6130 	str.w	r6, [r4, #304]	; 0x130
	hdma_usart1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8003eca:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
	hdma_usart1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003ece:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
	hdma_usart6_tx.Instance = DMA2_Stream6;
 8003ed2:	3118      	adds	r1, #24
 8003ed4:	f8c4 1168 	str.w	r1, [r4, #360]	; 0x168
	hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8003ed8:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8003edc:	f8c4 116c 	str.w	r1, [r4, #364]	; 0x16c
	hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ee0:	f8c4 0170 	str.w	r0, [r4, #368]	; 0x170
	hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ee4:	f8c4 5174 	str.w	r5, [r4, #372]	; 0x174
	hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003ee8:	f8c4 3178 	str.w	r3, [r4, #376]	; 0x178
	hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003eec:	f8c4 517c 	str.w	r5, [r4, #380]	; 0x17c
	hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ef0:	f8c4 5180 	str.w	r5, [r4, #384]	; 0x180
	hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8003ef4:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
	hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003ef8:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
	hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003efc:	f8c4 518c 	str.w	r5, [r4, #396]	; 0x18c
	hdma_usart6_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003f00:	f8c4 6190 	str.w	r6, [r4, #400]	; 0x190
	hdma_usart6_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8003f04:	f8c4 5194 	str.w	r5, [r4, #404]	; 0x194
	hdma_usart6_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003f08:	f8c4 5198 	str.w	r5, [r4, #408]	; 0x198
	hdma_usart6_rx.Instance = DMA2_Stream1;
 8003f0c:	4835      	ldr	r0, [pc, #212]	; (8003fe4 <DMA_init+0x1ac>)
 8003f0e:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
	hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003f12:	f8c4 10ac 	str.w	r1, [r4, #172]	; 0xac
	hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f16:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
	hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f1a:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
	hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003f1e:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
	hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f22:	f8c4 50bc 	str.w	r5, [r4, #188]	; 0xbc
	hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f26:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
	hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8003f2a:	f8c4 50c4 	str.w	r5, [r4, #196]	; 0xc4
	hdma_usart6_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003f2e:	f8c4 20c8 	str.w	r2, [r4, #200]	; 0xc8
	hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f32:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
	hdma_usart6_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003f36:	f8c4 60d0 	str.w	r6, [r4, #208]	; 0xd0
	hdma_usart6_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8003f3a:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
	hdma_usart6_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003f3e:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);    // UART RX
 8003f42:	2039      	movs	r0, #57	; 0x39
 8003f44:	f001 f9d8 	bl	80052f8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 6, 0);
 8003f48:	462a      	mov	r2, r5
 8003f4a:	2106      	movs	r1, #6
 8003f4c:	2039      	movs	r0, #57	; 0x39
 8003f4e:	f001 f99d 	bl	800528c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);    // USB RX
 8003f52:	2044      	movs	r0, #68	; 0x44
 8003f54:	f001 f9d0 	bl	80052f8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 6, 1);
 8003f58:	2201      	movs	r2, #1
 8003f5a:	2106      	movs	r1, #6
 8003f5c:	2044      	movs	r0, #68	; 0x44
 8003f5e:	f001 f995 	bl	800528c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);    // UART TX
 8003f62:	2045      	movs	r0, #69	; 0x45
 8003f64:	f001 f9c8 	bl	80052f8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 6, 2);
 8003f68:	2202      	movs	r2, #2
 8003f6a:	2106      	movs	r1, #6
 8003f6c:	2045      	movs	r0, #69	; 0x45
 8003f6e:	f001 f98d 	bl	800528c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);    // USB TX
 8003f72:	2046      	movs	r0, #70	; 0x46
 8003f74:	f001 f9c0 	bl	80052f8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 6, 3);
 8003f78:	4632      	mov	r2, r6
 8003f7a:	2106      	movs	r1, #6
 8003f7c:	2046      	movs	r0, #70	; 0x46
 8003f7e:	f001 f985 	bl	800528c <HAL_NVIC_SetPriority>
	HAL_DMA_Init(&hdma_usart1_rx);
 8003f82:	f504 7784 	add.w	r7, r4, #264	; 0x108
 8003f86:	4638      	mov	r0, r7
 8003f88:	f001 fa42 	bl	8005410 <HAL_DMA_Init>
	HAL_DMA_Init(&hdma_usart1_tx);
 8003f8c:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
 8003f90:	4640      	mov	r0, r8
 8003f92:	f001 fa3d 	bl	8005410 <HAL_DMA_Init>
	HAL_DMA_Init(&hdma_usart6_rx);
 8003f96:	f104 05a8 	add.w	r5, r4, #168	; 0xa8
 8003f9a:	4628      	mov	r0, r5
 8003f9c:	f001 fa38 	bl	8005410 <HAL_DMA_Init>
	HAL_DMA_Init(&hdma_usart6_tx);
 8003fa0:	f504 76b4 	add.w	r6, r4, #360	; 0x168
 8003fa4:	4630      	mov	r0, r6
 8003fa6:	f001 fa33 	bl	8005410 <HAL_DMA_Init>
	__HAL_LINKDMA(&USB_UART, hdmatx, hdma_usart1_tx);
 8003faa:	4b0f      	ldr	r3, [pc, #60]	; (8003fe8 <DMA_init+0x1b0>)
 8003fac:	f8c3 8070 	str.w	r8, [r3, #112]	; 0x70
 8003fb0:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
	__HAL_LINKDMA(&USB_UART, hdmarx, hdma_usart1_rx);
 8003fb4:	675f      	str	r7, [r3, #116]	; 0x74
 8003fb6:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	__HAL_LINKDMA(&DISCO_UART, hdmatx, hdma_usart6_tx);
 8003fba:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
 8003fbe:	f104 0320 	add.w	r3, r4, #32
 8003fc2:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
	__HAL_LINKDMA(&DISCO_UART, hdmarx, hdma_usart6_rx);
 8003fc6:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
 8003fca:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
}
 8003fce:	b002      	add	sp, #8
 8003fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fd4:	40023800 	.word	0x40023800
 8003fd8:	20004f38 	.word	0x20004f38
 8003fdc:	400264b8 	.word	0x400264b8
 8003fe0:	40026488 	.word	0x40026488
 8003fe4:	40026428 	.word	0x40026428
 8003fe8:	200053ac 	.word	0x200053ac

08003fec <UART_init>:
void UART_init() {
 8003fec:	b538      	push	{r3, r4, r5, lr}
	USB_UART_ptr->Instance = USART1;
 8003fee:	4816      	ldr	r0, [pc, #88]	; (8004048 <UART_init+0x5c>)
 8003ff0:	4b16      	ldr	r3, [pc, #88]	; (800404c <UART_init+0x60>)
 8003ff2:	6003      	str	r3, [r0, #0]
	USB_UART_ptr->Init.BaudRate = 115200;
 8003ff4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003ff8:	6043      	str	r3, [r0, #4]
	USB_UART_ptr->Init.WordLength = UART_WORDLENGTH_8B;
 8003ffa:	2400      	movs	r4, #0
 8003ffc:	6084      	str	r4, [r0, #8]
	USB_UART_ptr->Init.StopBits = UART_STOPBITS_1;
 8003ffe:	60c4      	str	r4, [r0, #12]
	USB_UART_ptr->Init.Parity = UART_PARITY_NONE;
 8004000:	6104      	str	r4, [r0, #16]
	USB_UART_ptr->Init.Mode = UART_MODE_TX_RX;
 8004002:	250c      	movs	r5, #12
 8004004:	6145      	str	r5, [r0, #20]
	USB_UART_ptr->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004006:	6184      	str	r4, [r0, #24]
	HAL_UART_Init(&USB_UART);
 8004008:	f004 ff96 	bl	8008f38 <HAL_UART_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800400c:	4622      	mov	r2, r4
 800400e:	2105      	movs	r1, #5
 8004010:	2025      	movs	r0, #37	; 0x25
 8004012:	f001 f93b 	bl	800528c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004016:	2025      	movs	r0, #37	; 0x25
 8004018:	f001 f96e 	bl	80052f8 <HAL_NVIC_EnableIRQ>
	DISCO_UART_ptr->Instance = USART6;
 800401c:	480c      	ldr	r0, [pc, #48]	; (8004050 <UART_init+0x64>)
 800401e:	4b0d      	ldr	r3, [pc, #52]	; (8004054 <UART_init+0x68>)
 8004020:	6203      	str	r3, [r0, #32]
	DISCO_UART_ptr->Init.BaudRate = 500000;
 8004022:	4b0d      	ldr	r3, [pc, #52]	; (8004058 <UART_init+0x6c>)
 8004024:	6243      	str	r3, [r0, #36]	; 0x24
	DISCO_UART_ptr->Init.WordLength = UART_WORDLENGTH_8B;
 8004026:	6284      	str	r4, [r0, #40]	; 0x28
	DISCO_UART_ptr->Init.StopBits = UART_STOPBITS_1;
 8004028:	62c4      	str	r4, [r0, #44]	; 0x2c
	DISCO_UART_ptr->Init.Parity = UART_PARITY_NONE;
 800402a:	6304      	str	r4, [r0, #48]	; 0x30
	DISCO_UART_ptr->Init.Mode = UART_MODE_TX_RX;
 800402c:	6345      	str	r5, [r0, #52]	; 0x34
	DISCO_UART_ptr->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800402e:	6384      	str	r4, [r0, #56]	; 0x38
	HAL_UART_Init(&DISCO_UART);
 8004030:	3020      	adds	r0, #32
 8004032:	f004 ff81 	bl	8008f38 <HAL_UART_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 2);
 8004036:	2202      	movs	r2, #2
 8004038:	2105      	movs	r1, #5
 800403a:	2047      	movs	r0, #71	; 0x47
 800403c:	f001 f926 	bl	800528c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004040:	2047      	movs	r0, #71	; 0x47
 8004042:	f001 f959 	bl	80052f8 <HAL_NVIC_EnableIRQ>
}
 8004046:	bd38      	pop	{r3, r4, r5, pc}
 8004048:	200053ac 	.word	0x200053ac
 800404c:	40011000 	.word	0x40011000
 8004050:	20004f38 	.word	0x20004f38
 8004054:	40011400 	.word	0x40011400
 8004058:	0007a120 	.word	0x0007a120

0800405c <UART_Thread>:
void UART_Thread(void *argument) {
 800405c:	b508      	push	{r3, lr}
	DMA_init();
 800405e:	f7ff feeb 	bl	8003e38 <DMA_init>
	UART_init();
 8004062:	f7ff ffc3 	bl	8003fec <UART_init>
		osDelay(100);
 8004066:	2064      	movs	r0, #100	; 0x64
 8004068:	f7fd f946 	bl	80012f8 <osDelay>
	while (1) {
 800406c:	e7fb      	b.n	8004066 <UART_Thread+0xa>

0800406e <DrawCharToBuffer>:
						uint32_t textColor,  uint32_t* buffer, uint32_t bufferWidth) {
 800406e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004072:	4606      	mov	r6, r0
 8004074:	460d      	mov	r5, r1
 8004076:	4614      	mov	r4, r2
 8004078:	461a      	mov	r2, r3
 800407a:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 800407e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8004082:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8004084:	980b      	ldr	r0, [sp, #44]	; 0x2c
    for (uint16_t i = 0; i < charHeight; i++) {
 8004086:	2100      	movs	r1, #0
 8004088:	e024      	b.n	80040d4 <DrawCharToBuffer+0x66>
        for (uint16_t j = 0; j < charWidth; j++) {
 800408a:	f10c 0c01 	add.w	ip, ip, #1
 800408e:	fa1f fc8c 	uxth.w	ip, ip
 8004092:	4594      	cmp	ip, r2
 8004094:	d21c      	bcs.n	80040d0 <DrawCharToBuffer+0x62>
            uint16_t bit = (charBitmap[i * ((charWidth + 7) / 8) + j / 8] >> (7 - j % 8)) & 0x1;
 8004096:	468e      	mov	lr, r1
 8004098:	f102 0a07 	add.w	sl, r2, #7
 800409c:	ea4f 0aea 	mov.w	sl, sl, asr #3
 80040a0:	ea4f 03dc 	mov.w	r3, ip, lsr #3
 80040a4:	fb0a 3301 	mla	r3, sl, r1, r3
 80040a8:	5ce3      	ldrb	r3, [r4, r3]
 80040aa:	ea6f 0a0c 	mvn.w	sl, ip
 80040ae:	f00a 0a07 	and.w	sl, sl, #7
 80040b2:	fa43 f30a 	asr.w	r3, r3, sl
            if(!bit)continue;
 80040b6:	f013 0f01 	tst.w	r3, #1
 80040ba:	d0e6      	beq.n	800408a <DrawCharToBuffer+0x1c>
            uint32_t *pixel = buffer + (y + i) * bufferWidth + (x + j);
 80040bc:	44ae      	add	lr, r5
 80040be:	eb06 030c 	add.w	r3, r6, ip
 80040c2:	fb00 3e0e 	mla	lr, r0, lr, r3
            if ((x + j) < bufferWidth) {
 80040c6:	4283      	cmp	r3, r0
 80040c8:	d2df      	bcs.n	800408a <DrawCharToBuffer+0x1c>
                *pixel = color;
 80040ca:	f847 802e 	str.w	r8, [r7, lr, lsl #2]
 80040ce:	e7dc      	b.n	800408a <DrawCharToBuffer+0x1c>
    for (uint16_t i = 0; i < charHeight; i++) {
 80040d0:	3101      	adds	r1, #1
 80040d2:	b289      	uxth	r1, r1
 80040d4:	4549      	cmp	r1, r9
 80040d6:	d202      	bcs.n	80040de <DrawCharToBuffer+0x70>
        for (uint16_t j = 0; j < charWidth; j++) {
 80040d8:	f04f 0c00 	mov.w	ip, #0
 80040dc:	e7d9      	b.n	8004092 <DrawCharToBuffer+0x24>
}
 80040de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080040e2 <DrawStringToBuffer>:
void DrawStringToBuffer(char* str, uint16_t x, uint16_t y, uint32_t textColor, uint32_t* buffer, uint32_t bufferWidth) {
 80040e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040e6:	b085      	sub	sp, #20
 80040e8:	4605      	mov	r5, r0
 80040ea:	460c      	mov	r4, r1
 80040ec:	4617      	mov	r7, r2
 80040ee:	469b      	mov	fp, r3
 80040f0:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    sFONT *pFont = BSP_LCD_GetFont(); // Get the current font
 80040f4:	f7fc fcb4 	bl	8000a60 <BSP_LCD_GetFont>
 80040f8:	4682      	mov	sl, r0
    uint16_t charWidth = pFont->Width;
 80040fa:	8886      	ldrh	r6, [r0, #4]
    uint16_t charHeight = pFont->Height;
 80040fc:	f8b0 8006 	ldrh.w	r8, [r0, #6]
    while (*str) {
 8004100:	e01e      	b.n	8004140 <DrawStringToBuffer+0x5e>
        uint8_t *charBitmap = &pFont->table[(*str - ' ') * charHeight * ((charWidth + 7) / 8)];
 8004102:	f8da 0000 	ldr.w	r0, [sl]
 8004106:	3b20      	subs	r3, #32
 8004108:	fb08 f103 	mul.w	r1, r8, r3
 800410c:	1df2      	adds	r2, r6, #7
 800410e:	10d2      	asrs	r2, r2, #3
        DrawCharToBuffer(x, y, charBitmap, charWidth, charHeight, textColor,  buffer, bufferWidth);
 8004110:	f8cd 900c 	str.w	r9, [sp, #12]
 8004114:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004116:	9302      	str	r3, [sp, #8]
 8004118:	f8cd b004 	str.w	fp, [sp, #4]
 800411c:	f8cd 8000 	str.w	r8, [sp]
 8004120:	4633      	mov	r3, r6
 8004122:	fb02 0201 	mla	r2, r2, r1, r0
 8004126:	4639      	mov	r1, r7
 8004128:	4620      	mov	r0, r4
 800412a:	f7ff ffa0 	bl	800406e <DrawCharToBuffer>
        x += charWidth; // Move to the next character position
 800412e:	4434      	add	r4, r6
 8004130:	b2a4      	uxth	r4, r4
        if (x + charWidth > bufferWidth) {
 8004132:	19a3      	adds	r3, r4, r6
 8004134:	454b      	cmp	r3, r9
 8004136:	d902      	bls.n	800413e <DrawStringToBuffer+0x5c>
            y += charHeight;
 8004138:	4447      	add	r7, r8
 800413a:	b2bf      	uxth	r7, r7
            x = 0; // Reset x to start of next line
 800413c:	2400      	movs	r4, #0
        str++;
 800413e:	3501      	adds	r5, #1
    while (*str) {
 8004140:	782b      	ldrb	r3, [r5, #0]
 8004142:	b133      	cbz	r3, 8004152 <DrawStringToBuffer+0x70>
        if (*str < ' ' || *str > '~') {
 8004144:	f1a3 0220 	sub.w	r2, r3, #32
 8004148:	b2d2      	uxtb	r2, r2
 800414a:	2a5e      	cmp	r2, #94	; 0x5e
 800414c:	d9d9      	bls.n	8004102 <DrawStringToBuffer+0x20>
            str++;
 800414e:	3501      	adds	r5, #1
            continue; // Skip non-printable characters
 8004150:	e7f6      	b.n	8004140 <DrawStringToBuffer+0x5e>
}
 8004152:	b005      	add	sp, #20
 8004154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004158 <toRadians>:
    return degrees * (PI / 180.0);
 8004158:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 800415c:	ed9f 7b04 	vldr	d7, [pc, #16]	; 8004170 <toRadians+0x18>
 8004160:	ee20 0b07 	vmul.f64	d0, d0, d7
}
 8004164:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	f3af 8000 	nop.w
 8004170:	a2529d39 	.word	0xa2529d39
 8004174:	3f91df46 	.word	0x3f91df46

08004178 <DrawLineInBuffer>:
void DrawLineInBuffer(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint32_t color, uint32_t* buffer, uint32_t bufferWidth) {
 8004178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800417c:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8004180:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8004184:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    int dx = abs(x1 - x0), sx = x0 < x1 ? 1 : -1;
 8004186:	1a15      	subs	r5, r2, r0
 8004188:	2d00      	cmp	r5, #0
 800418a:	bfb8      	it	lt
 800418c:	426d      	neglt	r5, r5
 800418e:	4282      	cmp	r2, r0
 8004190:	d90d      	bls.n	80041ae <DrawLineInBuffer+0x36>
 8004192:	f04f 0801 	mov.w	r8, #1
    int dy = -abs(y1 - y0), sy = y0 < y1 ? 1 : -1;
 8004196:	1a5f      	subs	r7, r3, r1
 8004198:	2f00      	cmp	r7, #0
 800419a:	bfb8      	it	lt
 800419c:	427f      	neglt	r7, r7
 800419e:	427e      	negs	r6, r7
 80041a0:	428b      	cmp	r3, r1
 80041a2:	d907      	bls.n	80041b4 <DrawLineInBuffer+0x3c>
 80041a4:	f04f 0901 	mov.w	r9, #1
    int err = dx + dy, e2;
 80041a8:	eba5 0c07 	sub.w	ip, r5, r7
 80041ac:	e017      	b.n	80041de <DrawLineInBuffer+0x66>
    int dx = abs(x1 - x0), sx = x0 < x1 ? 1 : -1;
 80041ae:	f04f 38ff 	mov.w	r8, #4294967295
 80041b2:	e7f0      	b.n	8004196 <DrawLineInBuffer+0x1e>
    int dy = -abs(y1 - y0), sy = y0 < y1 ? 1 : -1;
 80041b4:	f04f 39ff 	mov.w	r9, #4294967295
 80041b8:	e7f6      	b.n	80041a8 <DrawLineInBuffer+0x30>
        if (x0 == x1 && y0 == y1) break;
 80041ba:	4290      	cmp	r0, r2
 80041bc:	bf08      	it	eq
 80041be:	4299      	cmpeq	r1, r3
 80041c0:	d017      	beq.n	80041f2 <DrawLineInBuffer+0x7a>
        e2 = 2 * err;
 80041c2:	ea4f 0e4c 	mov.w	lr, ip, lsl #1
        if (e2 >= dy) { err += dy; x0 += sx; }
 80041c6:	ebb6 0f4c 	cmp.w	r6, ip, lsl #1
 80041ca:	dc03      	bgt.n	80041d4 <DrawLineInBuffer+0x5c>
 80041cc:	ebac 0c07 	sub.w	ip, ip, r7
 80041d0:	4440      	add	r0, r8
 80041d2:	b280      	uxth	r0, r0
        if (e2 <= dx) { err += dx; y0 += sy; }
 80041d4:	4575      	cmp	r5, lr
 80041d6:	db02      	blt.n	80041de <DrawLineInBuffer+0x66>
 80041d8:	44ac      	add	ip, r5
 80041da:	4449      	add	r1, r9
 80041dc:	b289      	uxth	r1, r1
        if (x0 >= 0 && x0 < bufferWidth && y0 >= 0 && y0 < bufferWidth) {
 80041de:	4686      	mov	lr, r0
 80041e0:	42a0      	cmp	r0, r4
 80041e2:	d2ea      	bcs.n	80041ba <DrawLineInBuffer+0x42>
 80041e4:	42a1      	cmp	r1, r4
 80041e6:	d2e8      	bcs.n	80041ba <DrawLineInBuffer+0x42>
            buffer[y0 * bufferWidth + x0] = color;
 80041e8:	fb04 0e01 	mla	lr, r4, r1, r0
 80041ec:	f84b a02e 	str.w	sl, [fp, lr, lsl #2]
 80041f0:	e7e3      	b.n	80041ba <DrawLineInBuffer+0x42>
}
 80041f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080041f6 <rotateX>:
void rotateX(float* y, float* z, float angleX) {
 80041f6:	b538      	push	{r3, r4, r5, lr}
 80041f8:	ed2d 8b08 	vpush	{d8-d11}
 80041fc:	4605      	mov	r5, r0
 80041fe:	460c      	mov	r4, r1
    float rad = toRadians(angleX);
 8004200:	f7ff ffaa 	bl	8004158 <toRadians>
    float temp = *y;
 8004204:	ed95 aa00 	vldr	s20, [r5]
    *y = cos(rad) * (*y) - sin(rad) * (*z);
 8004208:	eeb7 bac0 	vcvt.f64.f32	d11, s0
 800420c:	eeb0 0b4b 	vmov.f64	d0, d11
 8004210:	f007 ff9e 	bl	800c150 <cos>
 8004214:	eeb0 8b40 	vmov.f64	d8, d0
 8004218:	eeb7 aaca 	vcvt.f64.f32	d10, s20
 800421c:	ee20 9b0a 	vmul.f64	d9, d0, d10
 8004220:	eeb0 0b4b 	vmov.f64	d0, d11
 8004224:	f007 ffec 	bl	800c200 <sin>
 8004228:	ed94 7a00 	vldr	s14, [r4]
 800422c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8004230:	ee00 9b47 	vmls.f64	d9, d0, d7
 8004234:	eeb7 9bc9 	vcvt.f32.f64	s18, d9
 8004238:	ed85 9a00 	vstr	s18, [r5]
    *z = sin(rad) * temp + cos(rad) * (*z);
 800423c:	ed94 7a00 	vldr	s14, [r4]
 8004240:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8004244:	ee28 8b07 	vmul.f64	d8, d8, d7
 8004248:	ee0a 8b00 	vmla.f64	d8, d10, d0
 800424c:	eeb7 8bc8 	vcvt.f32.f64	s16, d8
 8004250:	ed84 8a00 	vstr	s16, [r4]
}
 8004254:	ecbd 8b08 	vpop	{d8-d11}
 8004258:	bd38      	pop	{r3, r4, r5, pc}

0800425a <rotateY>:
void rotateY(float* x, float* z, float angleY) {
 800425a:	b538      	push	{r3, r4, r5, lr}
 800425c:	ed2d 8b08 	vpush	{d8-d11}
 8004260:	4605      	mov	r5, r0
 8004262:	460c      	mov	r4, r1
    float rad = toRadians(angleY);
 8004264:	f7ff ff78 	bl	8004158 <toRadians>
    float temp = *x;
 8004268:	ed95 aa00 	vldr	s20, [r5]
    *x = cos(rad) * (*x) + sin(rad) * (*z);
 800426c:	eeb7 bac0 	vcvt.f64.f32	d11, s0
 8004270:	eeb0 0b4b 	vmov.f64	d0, d11
 8004274:	f007 ff6c 	bl	800c150 <cos>
 8004278:	eeb0 8b40 	vmov.f64	d8, d0
 800427c:	eeb7 aaca 	vcvt.f64.f32	d10, s20
 8004280:	ee20 9b0a 	vmul.f64	d9, d0, d10
 8004284:	eeb0 0b4b 	vmov.f64	d0, d11
 8004288:	f007 ffba 	bl	800c200 <sin>
 800428c:	ed94 7a00 	vldr	s14, [r4]
 8004290:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8004294:	ee00 9b07 	vmla.f64	d9, d0, d7
 8004298:	eeb7 9bc9 	vcvt.f32.f64	s18, d9
 800429c:	ed85 9a00 	vstr	s18, [r5]
    *z = -sin(rad) * temp + cos(rad) * (*z);
 80042a0:	ed94 7a00 	vldr	s14, [r4]
 80042a4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80042a8:	ee28 8b07 	vmul.f64	d8, d8, d7
 80042ac:	ee00 8b4a 	vmls.f64	d8, d0, d10
 80042b0:	eeb7 8bc8 	vcvt.f32.f64	s16, d8
 80042b4:	ed84 8a00 	vstr	s16, [r4]
}
 80042b8:	ecbd 8b08 	vpop	{d8-d11}
 80042bc:	bd38      	pop	{r3, r4, r5, pc}

080042be <rotateZ>:
void rotateZ(float* x, float* y, float angleZ) {
 80042be:	b538      	push	{r3, r4, r5, lr}
 80042c0:	ed2d 8b08 	vpush	{d8-d11}
 80042c4:	4605      	mov	r5, r0
 80042c6:	460c      	mov	r4, r1
    float rad = toRadians(angleZ);
 80042c8:	f7ff ff46 	bl	8004158 <toRadians>
    float temp = *x;
 80042cc:	ed95 aa00 	vldr	s20, [r5]
    *x = cos(rad) * (*x) - sin(rad) * (*y);
 80042d0:	eeb7 bac0 	vcvt.f64.f32	d11, s0
 80042d4:	eeb0 0b4b 	vmov.f64	d0, d11
 80042d8:	f007 ff3a 	bl	800c150 <cos>
 80042dc:	eeb0 8b40 	vmov.f64	d8, d0
 80042e0:	eeb7 aaca 	vcvt.f64.f32	d10, s20
 80042e4:	ee20 9b0a 	vmul.f64	d9, d0, d10
 80042e8:	eeb0 0b4b 	vmov.f64	d0, d11
 80042ec:	f007 ff88 	bl	800c200 <sin>
 80042f0:	ed94 7a00 	vldr	s14, [r4]
 80042f4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80042f8:	ee00 9b47 	vmls.f64	d9, d0, d7
 80042fc:	eeb7 9bc9 	vcvt.f32.f64	s18, d9
 8004300:	ed85 9a00 	vstr	s18, [r5]
    *y = sin(rad) * temp + cos(rad) * (*y);
 8004304:	ed94 7a00 	vldr	s14, [r4]
 8004308:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800430c:	ee28 8b07 	vmul.f64	d8, d8, d7
 8004310:	ee0a 8b00 	vmla.f64	d8, d10, d0
 8004314:	eeb7 8bc8 	vcvt.f32.f64	s16, d8
 8004318:	ed84 8a00 	vstr	s16, [r4]
}
 800431c:	ecbd 8b08 	vpop	{d8-d11}
 8004320:	bd38      	pop	{r3, r4, r5, pc}
	...

08004324 <normalizeAngle>:
    while (*angle >= 360.0f) *angle -= 360.0f;
 8004324:	e005      	b.n	8004332 <normalizeAngle+0xe>
 8004326:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004364 <normalizeAngle+0x40>
 800432a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800432e:	edc0 7a00 	vstr	s15, [r0]
 8004332:	edd0 7a00 	vldr	s15, [r0]
 8004336:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8004364 <normalizeAngle+0x40>
 800433a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800433e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004342:	daf0      	bge.n	8004326 <normalizeAngle+0x2>
 8004344:	e005      	b.n	8004352 <normalizeAngle+0x2e>
    while (*angle < 0.0f) *angle += 360.0f;
 8004346:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8004364 <normalizeAngle+0x40>
 800434a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800434e:	edc0 7a00 	vstr	s15, [r0]
 8004352:	edd0 7a00 	vldr	s15, [r0]
 8004356:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800435a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800435e:	d4f2      	bmi.n	8004346 <normalizeAngle+0x22>
}
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	43b40000 	.word	0x43b40000

08004368 <LCDBuffer_Thread>:
void LCDBuffer_Thread(void *argument){
 8004368:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800436c:	ed2d 8b02 	vpush	{d8}
 8004370:	b09f      	sub	sp, #124	; 0x7c
	osDelay(100);
 8004372:	2064      	movs	r0, #100	; 0x64
 8004374:	f7fc ffc0 	bl	80012f8 <osDelay>
    uint32_t frameBufferWidth = BSP_LCD_GetXSize();
 8004378:	f7fc fb14 	bl	80009a4 <BSP_LCD_GetXSize>
    uint32_t frameBufferHeight = BSP_LCD_GetYSize();
 800437c:	f7fc fb18 	bl	80009b0 <BSP_LCD_GetYSize>
	HAL_UART_Receive_DMA(&DISCO_UART, &PeerMpu6050 , sizeof(MPU6050_t));// Get ready to receive Buffer
 8004380:	4870      	ldr	r0, [pc, #448]	; (8004544 <LCDBuffer_Thread+0x1dc>)
 8004382:	2258      	movs	r2, #88	; 0x58
 8004384:	f500 710a 	add.w	r1, r0, #552	; 0x228
 8004388:	3020      	adds	r0, #32
 800438a:	f004 fe5b 	bl	8009044 <HAL_UART_Receive_DMA>
 800438e:	e1b0      	b.n	80046f2 <LCDBuffer_Thread+0x38a>
			int next = (i + 1) % 4;
 8004390:	1c4d      	adds	r5, r1, #1
 8004392:	426a      	negs	r2, r5
 8004394:	f005 0303 	and.w	r3, r5, #3
 8004398:	f002 0203 	and.w	r2, r2, #3
 800439c:	bf58      	it	pl
 800439e:	4253      	negpl	r3, r2
			DrawLineInBuffer((uint16_t)transformedVertices[i][0], (uint16_t)transformedVertices[i][1],
 80043a0:	4a68      	ldr	r2, [pc, #416]	; (8004544 <LCDBuffer_Thread+0x1dc>)
 80043a2:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 80043a6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 80043aa:	edd0 7af9 	vldr	s15, [r0, #996]	; 0x3e4
 80043ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043b2:	ee17 0a90 	vmov	r0, s15
 80043b6:	b284      	uxth	r4, r0
 80043b8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80043bc:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80043c0:	edd1 7afa 	vldr	s15, [r1, #1000]	; 0x3e8
 80043c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043c8:	ee17 1a90 	vmov	r1, s15
 80043cc:	b28e      	uxth	r6, r1
							 (uint16_t)transformedVertices[next][0], (uint16_t)transformedVertices[next][1],
 80043ce:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80043d2:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80043d6:	edd1 7af9 	vldr	s15, [r1, #996]	; 0x3e4
 80043da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043de:	ee17 1a90 	vmov	r1, s15
 80043e2:	b28f      	uxth	r7, r1
 80043e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80043e8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80043ec:	edd2 7afa 	vldr	s15, [r2, #1000]	; 0x3e8
 80043f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043f4:	ee17 3a90 	vmov	r3, s15
 80043f8:	fa1f f883 	uxth.w	r8, r3
			DrawLineInBuffer((uint16_t)transformedVertices[i][0], (uint16_t)transformedVertices[i][1],
 80043fc:	f7fc fad2 	bl	80009a4 <BSP_LCD_GetXSize>
 8004400:	9002      	str	r0, [sp, #8]
 8004402:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8004406:	9301      	str	r3, [sp, #4]
 8004408:	f46f 437f 	mvn.w	r3, #65280	; 0xff00
 800440c:	9300      	str	r3, [sp, #0]
 800440e:	4643      	mov	r3, r8
 8004410:	463a      	mov	r2, r7
 8004412:	4631      	mov	r1, r6
 8004414:	4620      	mov	r0, r4
 8004416:	f7ff feaf 	bl	8004178 <DrawLineInBuffer>
		for (int i = 0; i < 4; i++) {
 800441a:	4629      	mov	r1, r5
 800441c:	2903      	cmp	r1, #3
 800441e:	ddb7      	ble.n	8004390 <LCDBuffer_Thread+0x28>
        memcpy(transformedVertices, initialVertices, sizeof(initialVertices));
 8004420:	4e48      	ldr	r6, [pc, #288]	; (8004544 <LCDBuffer_Thread+0x1dc>)
 8004422:	f506 7479 	add.w	r4, r6, #996	; 0x3e4
 8004426:	4d48      	ldr	r5, [pc, #288]	; (8004548 <LCDBuffer_Thread+0x1e0>)
 8004428:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800442a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800442c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800442e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004430:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004434:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        accumulatedAngleX += (float)PeerMpu6050.Gx * deltaT;
 8004438:	ed96 7b94 	vldr	d7, [r6, #592]	; 0x250
 800443c:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8004440:	f206 4014 	addw	r0, r6, #1044	; 0x414
 8004444:	edd0 7a00 	vldr	s15, [r0]
 8004448:	ee77 7a87 	vadd.f32	s15, s15, s14
 800444c:	edc0 7a00 	vstr	s15, [r0]
        normalizeAngle(&accumulatedAngleX);
 8004450:	f7ff ff68 	bl	8004324 <normalizeAngle>
        accumulatedAngleY += (float)PeerMpu6050.Gy * deltaT;
 8004454:	ed96 7b96 	vldr	d7, [r6, #600]	; 0x258
 8004458:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 800445c:	f506 6083 	add.w	r0, r6, #1048	; 0x418
 8004460:	edd0 7a00 	vldr	s15, [r0]
 8004464:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004468:	edc0 7a00 	vstr	s15, [r0]
        normalizeAngle(&accumulatedAngleY);
 800446c:	f7ff ff5a 	bl	8004324 <normalizeAngle>
        accumulatedAngleZ += (float)PeerMpu6050.Gz * deltaT;
 8004470:	ed96 7b98 	vldr	d7, [r6, #608]	; 0x260
 8004474:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8004478:	f206 401c 	addw	r0, r6, #1052	; 0x41c
 800447c:	edd0 7a00 	vldr	s15, [r0]
 8004480:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004484:	edc0 7a00 	vstr	s15, [r0]
        normalizeAngle(&accumulatedAngleZ);
 8004488:	f7ff ff4c 	bl	8004324 <normalizeAngle>
        for (int i = 0; i < 4; i++) {
 800448c:	2400      	movs	r4, #0
 800448e:	e031      	b.n	80044f4 <LCDBuffer_Thread+0x18c>
            rotateX(&transformedVertices[i][1], &transformedVertices[i][2], accumulatedAngleX);
 8004490:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8004544 <LCDBuffer_Thread+0x1dc>
 8004494:	f508 7779 	add.w	r7, r8, #996	; 0x3e4
 8004498:	ea4f 0944 	mov.w	r9, r4, lsl #1
 800449c:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 80044a0:	00ad      	lsls	r5, r5, #2
 80044a2:	3504      	adds	r5, #4
 80044a4:	443d      	add	r5, r7
 80044a6:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 80044aa:	00b6      	lsls	r6, r6, #2
 80044ac:	3608      	adds	r6, #8
 80044ae:	443e      	add	r6, r7
 80044b0:	f208 4314 	addw	r3, r8, #1044	; 0x414
 80044b4:	ed93 0a00 	vldr	s0, [r3]
 80044b8:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 80044bc:	4631      	mov	r1, r6
 80044be:	4628      	mov	r0, r5
 80044c0:	f7ff fe99 	bl	80041f6 <rotateX>
            rotateY(&transformedVertices[i][0], &transformedVertices[i][2], accumulatedAngleY);
 80044c4:	44a1      	add	r9, r4
 80044c6:	eb07 0789 	add.w	r7, r7, r9, lsl #2
 80044ca:	f508 6383 	add.w	r3, r8, #1048	; 0x418
 80044ce:	ed93 0a00 	vldr	s0, [r3]
 80044d2:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 80044d6:	4631      	mov	r1, r6
 80044d8:	4638      	mov	r0, r7
 80044da:	f7ff febe 	bl	800425a <rotateY>
            rotateZ(&transformedVertices[i][0], &transformedVertices[i][1], accumulatedAngleZ);
 80044de:	f208 431c 	addw	r3, r8, #1052	; 0x41c
 80044e2:	ed93 0a00 	vldr	s0, [r3]
 80044e6:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 80044ea:	4629      	mov	r1, r5
 80044ec:	4638      	mov	r0, r7
 80044ee:	f7ff fee6 	bl	80042be <rotateZ>
        for (int i = 0; i < 4; i++) {
 80044f2:	3401      	adds	r4, #1
 80044f4:	2c03      	cmp	r4, #3
 80044f6:	ddcb      	ble.n	8004490 <LCDBuffer_Thread+0x128>
        uint32_t centerX = BSP_LCD_GetXSize() / 2;
 80044f8:	f7fc fa54 	bl	80009a4 <BSP_LCD_GetXSize>
 80044fc:	0843      	lsrs	r3, r0, #1
 80044fe:	ee08 3a90 	vmov	s17, r3
        uint32_t centerY = BSP_LCD_GetYSize() / 2;
 8004502:	f7fc fa55 	bl	80009b0 <BSP_LCD_GetYSize>
 8004506:	0843      	lsrs	r3, r0, #1
 8004508:	ee08 3a10 	vmov	s16, r3
        for (int i = 0; i < 4; i++) {
 800450c:	2200      	movs	r2, #0
 800450e:	e015      	b.n	800453c <LCDBuffer_Thread+0x1d4>
            transformedVertices[i][0] += centerX;
 8004510:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8004514:	4b0b      	ldr	r3, [pc, #44]	; (8004544 <LCDBuffer_Thread+0x1dc>)
 8004516:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800451a:	eeb8 7a68 	vcvt.f32.u32	s14, s17
 800451e:	edd3 7af9 	vldr	s15, [r3, #996]	; 0x3e4
 8004522:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004526:	edc3 7af9 	vstr	s15, [r3, #996]	; 0x3e4
            transformedVertices[i][1] += centerY;
 800452a:	eeb8 7a48 	vcvt.f32.u32	s14, s16
 800452e:	edd3 7afa 	vldr	s15, [r3, #1000]	; 0x3e8
 8004532:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004536:	edc3 7afa 	vstr	s15, [r3, #1000]	; 0x3e8
        for (int i = 0; i < 4; i++) {
 800453a:	3201      	adds	r2, #1
 800453c:	2a03      	cmp	r2, #3
 800453e:	dde7      	ble.n	8004510 <LCDBuffer_Thread+0x1a8>
		for (int i = 0; i < 4; i++) {
 8004540:	2300      	movs	r3, #0
 8004542:	e049      	b.n	80045d8 <LCDBuffer_Thread+0x270>
 8004544:	20004f38 	.word	0x20004f38
 8004548:	0800ebac 	.word	0x0800ebac
			int next = (i + 1) % 4;
 800454c:	1c5d      	adds	r5, r3, #1
 800454e:	4269      	negs	r1, r5
 8004550:	f005 0203 	and.w	r2, r5, #3
 8004554:	f001 0103 	and.w	r1, r1, #3
 8004558:	bf58      	it	pl
 800455a:	424a      	negpl	r2, r1
			DrawLineInBuffer((uint16_t)transformedVertices[i][0], (uint16_t)transformedVertices[i][1],
 800455c:	49af      	ldr	r1, [pc, #700]	; (800481c <LCDBuffer_Thread+0x4b4>)
 800455e:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8004562:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8004566:	edd0 7af9 	vldr	s15, [r0, #996]	; 0x3e4
 800456a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800456e:	ee17 0a90 	vmov	r0, s15
 8004572:	b284      	uxth	r4, r0
 8004574:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004578:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800457c:	edd3 7afa 	vldr	s15, [r3, #1000]	; 0x3e8
 8004580:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004584:	ee17 3a90 	vmov	r3, s15
 8004588:	b29e      	uxth	r6, r3
							 (uint16_t)transformedVertices[next][0], (uint16_t)transformedVertices[next][1],
 800458a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800458e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8004592:	edd3 7af9 	vldr	s15, [r3, #996]	; 0x3e4
 8004596:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800459a:	ee17 3a90 	vmov	r3, s15
 800459e:	b29f      	uxth	r7, r3
 80045a0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80045a4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80045a8:	edd1 7afa 	vldr	s15, [r1, #1000]	; 0x3e8
 80045ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045b0:	ee17 3a90 	vmov	r3, s15
 80045b4:	fa1f f883 	uxth.w	r8, r3
			DrawLineInBuffer((uint16_t)transformedVertices[i][0], (uint16_t)transformedVertices[i][1],
 80045b8:	f7fc f9f4 	bl	80009a4 <BSP_LCD_GetXSize>
 80045bc:	9002      	str	r0, [sp, #8]
 80045be:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80045c2:	9301      	str	r3, [sp, #4]
 80045c4:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 80045c8:	9300      	str	r3, [sp, #0]
 80045ca:	4643      	mov	r3, r8
 80045cc:	463a      	mov	r2, r7
 80045ce:	4631      	mov	r1, r6
 80045d0:	4620      	mov	r0, r4
 80045d2:	f7ff fdd1 	bl	8004178 <DrawLineInBuffer>
		for (int i = 0; i < 4; i++) {
 80045d6:	462b      	mov	r3, r5
 80045d8:	2b03      	cmp	r3, #3
 80045da:	ddb7      	ble.n	800454c <LCDBuffer_Thread+0x1e4>
        		transformedVertices[0][0] - centerX, transformedVertices[0][1] - centerY,
 80045dc:	4c8f      	ldr	r4, [pc, #572]	; (800481c <LCDBuffer_Thread+0x4b4>)
 80045de:	edd4 0af9 	vldr	s1, [r4, #996]	; 0x3e4
 80045e2:	eef8 8a68 	vcvt.f32.u32	s17, s17
 80045e6:	ee70 0ae8 	vsub.f32	s1, s1, s17
 80045ea:	ed94 7afa 	vldr	s14, [r4, #1000]	; 0x3e8
 80045ee:	eeb8 8a48 	vcvt.f32.u32	s16, s16
 80045f2:	ee37 7a48 	vsub.f32	s14, s14, s16
				transformedVertices[1][0] - centerX, transformedVertices[1][1] - centerY,
 80045f6:	ed94 6afc 	vldr	s12, [r4, #1008]	; 0x3f0
 80045fa:	ee36 6a68 	vsub.f32	s12, s12, s17
 80045fe:	ed94 5afd 	vldr	s10, [r4, #1012]	; 0x3f4
 8004602:	ee35 5a48 	vsub.f32	s10, s10, s16
				transformedVertices[2][0] - centerX, transformedVertices[2][1] - centerY,
 8004606:	ed94 4aff 	vldr	s8, [r4, #1020]	; 0x3fc
 800460a:	ee34 4a68 	vsub.f32	s8, s8, s17
 800460e:	f504 6380 	add.w	r3, r4, #1024	; 0x400
 8004612:	ed93 3a00 	vldr	s6, [r3]
 8004616:	ee33 3a48 	vsub.f32	s6, s6, s16
				transformedVertices[3][0] - centerX, transformedVertices[3][1] - centerY);
 800461a:	f504 6381 	add.w	r3, r4, #1032	; 0x408
 800461e:	ed93 2a00 	vldr	s4, [r3]
 8004622:	ee32 2a68 	vsub.f32	s4, s4, s17
 8004626:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 800462a:	ed93 1a00 	vldr	s2, [r3]
 800462e:	ee31 1a48 	vsub.f32	s2, s2, s16
        sprintf(points, "V1: (%6.2f, %6.2f) V2: (%6.2f, %6.2f)      V3: (%6.2f, %6.2f) V4: (%6.2f, %6.2f)",
 8004632:	f504 755b 	add.w	r5, r4, #876	; 0x36c
 8004636:	eeb7 1ac1 	vcvt.f64.f32	d1, s2
 800463a:	ed8d 1b0c 	vstr	d1, [sp, #48]	; 0x30
 800463e:	eeb7 2ac2 	vcvt.f64.f32	d2, s4
 8004642:	ed8d 2b0a 	vstr	d2, [sp, #40]	; 0x28
 8004646:	eeb7 3ac3 	vcvt.f64.f32	d3, s6
 800464a:	ed8d 3b08 	vstr	d3, [sp, #32]
 800464e:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
 8004652:	ed8d 4b06 	vstr	d4, [sp, #24]
 8004656:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 800465a:	ed8d 5b04 	vstr	d5, [sp, #16]
 800465e:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8004662:	ed8d 6b02 	vstr	d6, [sp, #8]
 8004666:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800466a:	ed8d 7b00 	vstr	d7, [sp]
 800466e:	eeb7 7ae0 	vcvt.f64.f32	d7, s1
 8004672:	ec53 2b17 	vmov	r2, r3, d7
 8004676:	496a      	ldr	r1, [pc, #424]	; (8004820 <LCDBuffer_Thread+0x4b8>)
 8004678:	4628      	mov	r0, r5
 800467a:	f005 fb79 	bl	8009d70 <siprintf>
        DrawStringToBuffer(points, 0, 24 * 5, 0xFFFFFF00, (uint8_t*)LCD_FB_START_ADDRESS, BSP_LCD_GetXSize());
 800467e:	f7fc f991 	bl	80009a4 <BSP_LCD_GetXSize>
 8004682:	9001      	str	r0, [sp, #4]
 8004684:	f04f 4640 	mov.w	r6, #3221225472	; 0xc0000000
 8004688:	9600      	str	r6, [sp, #0]
 800468a:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 800468e:	2278      	movs	r2, #120	; 0x78
 8004690:	2100      	movs	r1, #0
 8004692:	4628      	mov	r0, r5
 8004694:	f7ff fd25 	bl	80040e2 <DrawStringToBuffer>
        sprintf(accumulated, "Accum X: %.2f Y: %.2f Z: %.2f", accumulatedAngleX, accumulatedAngleY, accumulatedAngleZ);
 8004698:	f204 4314 	addw	r3, r4, #1044	; 0x414
 800469c:	edd3 6a00 	vldr	s13, [r3]
 80046a0:	f504 756a 	add.w	r5, r4, #936	; 0x3a8
 80046a4:	f204 431c 	addw	r3, r4, #1052	; 0x41c
 80046a8:	ed93 7a00 	vldr	s14, [r3]
 80046ac:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80046b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80046b4:	f504 6383 	add.w	r3, r4, #1048	; 0x418
 80046b8:	ed93 7a00 	vldr	s14, [r3]
 80046bc:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80046c0:	ed8d 7b00 	vstr	d7, [sp]
 80046c4:	eeb7 7ae6 	vcvt.f64.f32	d7, s13
 80046c8:	ec53 2b17 	vmov	r2, r3, d7
 80046cc:	4955      	ldr	r1, [pc, #340]	; (8004824 <LCDBuffer_Thread+0x4bc>)
 80046ce:	4628      	mov	r0, r5
 80046d0:	f005 fb4e 	bl	8009d70 <siprintf>
        DrawStringToBuffer(accumulated, 0, 24*15, 0xFFFFFF00, (uint8_t*)LCD_FB_START_ADDRESS, BSP_LCD_GetXSize());
 80046d4:	f7fc f966 	bl	80009a4 <BSP_LCD_GetXSize>
 80046d8:	9001      	str	r0, [sp, #4]
 80046da:	9600      	str	r6, [sp, #0]
 80046dc:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 80046e0:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80046e4:	2100      	movs	r1, #0
 80046e6:	4628      	mov	r0, r5
 80046e8:	f7ff fcfb 	bl	80040e2 <DrawStringToBuffer>
        osMutexRelease(frameBufferMutex);
 80046ec:	6820      	ldr	r0, [r4, #0]
 80046ee:	f7fc ff29 	bl	8001544 <osMutexRelease>
      osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever); // Wait for new MPU6050 data
 80046f2:	f04f 32ff 	mov.w	r2, #4294967295
 80046f6:	2100      	movs	r1, #0
 80046f8:	2001      	movs	r0, #1
 80046fa:	f7fc fd97 	bl	800122c <osThreadFlagsWait>
      osMutexAcquire(frameBufferMutex, osWaitForever);
 80046fe:	4e47      	ldr	r6, [pc, #284]	; (800481c <LCDBuffer_Thread+0x4b4>)
 8004700:	f04f 31ff 	mov.w	r1, #4294967295
 8004704:	6830      	ldr	r0, [r6, #0]
 8004706:	f7fc fedf 	bl	80014c8 <osMutexAcquire>
      	char text[60] = "  G X |  G Y |  G Z |  A X |  A Y |  A Z";
 800470a:	ac0f      	add	r4, sp, #60	; 0x3c
 800470c:	4d46      	ldr	r5, [pc, #280]	; (8004828 <LCDBuffer_Thread+0x4c0>)
 800470e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004710:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004712:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004714:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004716:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800471a:	c403      	stmia	r4!, {r0, r1}
 800471c:	7022      	strb	r2, [r4, #0]
 800471e:	2400      	movs	r4, #0
 8004720:	f8cd 4065 	str.w	r4, [sp, #101]	; 0x65
 8004724:	f8cd 4069 	str.w	r4, [sp, #105]	; 0x69
 8004728:	f8cd 406d 	str.w	r4, [sp, #109]	; 0x6d
 800472c:	f8cd 4071 	str.w	r4, [sp, #113]	; 0x71
 8004730:	941d      	str	r4, [sp, #116]	; 0x74
        DrawStringToBuffer(text, 0, 0, 0xFFFFFF00, (uint8_t*)LCD_FB_START_ADDRESS, BSP_LCD_GetXSize());
 8004732:	f7fc f937 	bl	80009a4 <BSP_LCD_GetXSize>
 8004736:	9001      	str	r0, [sp, #4]
 8004738:	f04f 4540 	mov.w	r5, #3221225472	; 0xc0000000
 800473c:	9500      	str	r5, [sp, #0]
 800473e:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 8004742:	4622      	mov	r2, r4
 8004744:	4621      	mov	r1, r4
 8004746:	a80f      	add	r0, sp, #60	; 0x3c
 8004748:	f7ff fccb 	bl	80040e2 <DrawStringToBuffer>
        DrawStringToBuffer(mpu_data, 0, 24, 0xFFFF00FF, (uint8_t*)LCD_FB_START_ADDRESS, BSP_LCD_GetXSize());
 800474c:	f7fc f92a 	bl	80009a4 <BSP_LCD_GetXSize>
 8004750:	f506 774c 	add.w	r7, r6, #816	; 0x330
 8004754:	9001      	str	r0, [sp, #4]
 8004756:	9500      	str	r5, [sp, #0]
 8004758:	f46f 437f 	mvn.w	r3, #65280	; 0xff00
 800475c:	2218      	movs	r2, #24
 800475e:	4621      	mov	r1, r4
 8004760:	4638      	mov	r0, r7
 8004762:	f7ff fcbe 	bl	80040e2 <DrawStringToBuffer>
                (float)PeerMpu6050.Gx, (float)PeerMpu6050.Gy, (float)PeerMpu6050.Gz,
 8004766:	ed96 7b94 	vldr	d7, [r6, #592]	; 0x250
 800476a:	eef7 2bc7 	vcvt.f32.f64	s5, d7
 800476e:	ed96 7b96 	vldr	d7, [r6, #600]	; 0x258
 8004772:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8004776:	ed96 6b98 	vldr	d6, [r6, #608]	; 0x260
 800477a:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
                (float)PeerMpu6050.Ax, (float)PeerMpu6050.Ay, (float)PeerMpu6050.Az);
 800477e:	ed96 5b8c 	vldr	d5, [r6, #560]	; 0x230
 8004782:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
 8004786:	ed96 4b8e 	vldr	d4, [r6, #568]	; 0x238
 800478a:	eeb7 4bc4 	vcvt.f32.f64	s8, d4
 800478e:	ed96 3b90 	vldr	d3, [r6, #576]	; 0x240
 8004792:	eeb7 3bc3 	vcvt.f32.f64	s6, d3
        sprintf(mpu_data, "%6.2f %6.2f %6.2f %6.2f %6.2f %6.2f",
 8004796:	eeb7 3ac3 	vcvt.f64.f32	d3, s6
 800479a:	ed8d 3b08 	vstr	d3, [sp, #32]
 800479e:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
 80047a2:	ed8d 4b06 	vstr	d4, [sp, #24]
 80047a6:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 80047aa:	ed8d 5b04 	vstr	d5, [sp, #16]
 80047ae:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 80047b2:	ed8d 6b02 	vstr	d6, [sp, #8]
 80047b6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80047ba:	ed8d 7b00 	vstr	d7, [sp]
 80047be:	eeb7 7ae2 	vcvt.f64.f32	d7, s5
 80047c2:	ec53 2b17 	vmov	r2, r3, d7
 80047c6:	4919      	ldr	r1, [pc, #100]	; (800482c <LCDBuffer_Thread+0x4c4>)
 80047c8:	4638      	mov	r0, r7
 80047ca:	f005 fad1 	bl	8009d70 <siprintf>
        DrawStringToBuffer(mpu_data, 0, 24, 0xFFFFFF00, (uint8_t*)LCD_FB_START_ADDRESS, BSP_LCD_GetXSize());
 80047ce:	f7fc f8e9 	bl	80009a4 <BSP_LCD_GetXSize>
 80047d2:	9001      	str	r0, [sp, #4]
 80047d4:	9500      	str	r5, [sp, #0]
 80047d6:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 80047da:	2218      	movs	r2, #24
 80047dc:	4621      	mov	r1, r4
 80047de:	4638      	mov	r0, r7
 80047e0:	f7ff fc7f 	bl	80040e2 <DrawStringToBuffer>
        DrawStringToBuffer(points, 0, 24 * 5, 0xFFFF00FF, (uint8_t*)LCD_FB_START_ADDRESS, BSP_LCD_GetXSize());
 80047e4:	f7fc f8de 	bl	80009a4 <BSP_LCD_GetXSize>
 80047e8:	9001      	str	r0, [sp, #4]
 80047ea:	9500      	str	r5, [sp, #0]
 80047ec:	f46f 437f 	mvn.w	r3, #65280	; 0xff00
 80047f0:	2278      	movs	r2, #120	; 0x78
 80047f2:	4621      	mov	r1, r4
 80047f4:	f506 705b 	add.w	r0, r6, #876	; 0x36c
 80047f8:	f7ff fc73 	bl	80040e2 <DrawStringToBuffer>
        DrawStringToBuffer(accumulated, 0, 24 * 15, 0xFFFF00FF, (uint8_t*)LCD_FB_START_ADDRESS, BSP_LCD_GetXSize());
 80047fc:	f7fc f8d2 	bl	80009a4 <BSP_LCD_GetXSize>
 8004800:	9001      	str	r0, [sp, #4]
 8004802:	9500      	str	r5, [sp, #0]
 8004804:	f46f 437f 	mvn.w	r3, #65280	; 0xff00
 8004808:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800480c:	4621      	mov	r1, r4
 800480e:	f506 706a 	add.w	r0, r6, #936	; 0x3a8
 8004812:	f7ff fc66 	bl	80040e2 <DrawStringToBuffer>
		for (int i = 0; i < 4; i++) {
 8004816:	4621      	mov	r1, r4
 8004818:	e600      	b.n	800441c <LCDBuffer_Thread+0xb4>
 800481a:	bf00      	nop
 800481c:	20004f38 	.word	0x20004f38
 8004820:	0800ecc4 	.word	0x0800ecc4
 8004824:	0800ed18 	.word	0x0800ed18
 8004828:	0800eb70 	.word	0x0800eb70
 800482c:	0800eca0 	.word	0x0800eca0

08004830 <EXTI0_IRQHandler>:
	}
}

void EXTI0_IRQHandler(void) {
 8004830:	b510      	push	{r4, lr}
	// When External interrupt 0 happened
	// Set flag here [EVENT]
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);  // Clear the interrupt flag
 8004832:	2101      	movs	r1, #1
 8004834:	4b08      	ldr	r3, [pc, #32]	; (8004858 <EXTI0_IRQHandler+0x28>)
 8004836:	6159      	str	r1, [r3, #20]
	osEventFlagsSet(pushButtonFlag, 0x00000001U);
 8004838:	4c08      	ldr	r4, [pc, #32]	; (800485c <EXTI0_IRQHandler+0x2c>)
 800483a:	69e0      	ldr	r0, [r4, #28]
 800483c:	f7fc fdaa 	bl	8001394 <osEventFlagsSet>
	accumulatedAngleX = 0;
 8004840:	f204 4214 	addw	r2, r4, #1044	; 0x414
 8004844:	2300      	movs	r3, #0
 8004846:	6013      	str	r3, [r2, #0]
	accumulatedAngleY = 0;
 8004848:	f504 6283 	add.w	r2, r4, #1048	; 0x418
 800484c:	6013      	str	r3, [r2, #0]
	accumulatedAngleZ = 0;
 800484e:	f204 441c 	addw	r4, r4, #1052	; 0x41c
 8004852:	6023      	str	r3, [r4, #0]
}
 8004854:	bd10      	pop	{r4, pc}
 8004856:	bf00      	nop
 8004858:	40013c00 	.word	0x40013c00
 800485c:	20004f38 	.word	0x20004f38

08004860 <HAL_Delay>:

void HAL_Delay( uint32_t ulDelayMs )
{
 8004860:	b508      	push	{r3, lr}
    vTaskDelay(ulDelayMs);
 8004862:	f7fe f837 	bl	80028d4 <vTaskDelay>
}
 8004866:	bd08      	pop	{r3, pc}

08004868 <SystemClock_Config>:
  *            Main regulator output voltage  = Scale1 mode
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
void SystemClock_Config(void) {
 8004868:	b500      	push	{lr}
 800486a:	b093      	sub	sp, #76	; 0x4c
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800486c:	2301      	movs	r3, #1
 800486e:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004870:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004874:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004876:	2302      	movs	r3, #2
 8004878:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800487a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800487e:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.PLL.PLLM = 25;
 8004880:	2219      	movs	r2, #25
 8004882:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 432;
 8004884:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8004888:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800488a:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800488c:	2309      	movs	r3, #9
 800488e:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = 7;
 8004890:	2307      	movs	r3, #7
 8004892:	930c      	str	r3, [sp, #48]	; 0x30

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8004894:	4668      	mov	r0, sp
 8004896:	f002 fbb3 	bl	8007000 <HAL_RCC_OscConfig>
  if(ret != HAL_OK) {
 800489a:	b100      	cbz	r0, 800489e <SystemClock_Config+0x36>
    while(1) { ; }
 800489c:	e7fe      	b.n	800489c <SystemClock_Config+0x34>
  }

  /* Activate the OverDrive to reach the 216 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
 800489e:	f002 fb71 	bl	8006f84 <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK) {
 80048a2:	b100      	cbz	r0, 80048a6 <SystemClock_Config+0x3e>
    while(1) { ; }
 80048a4:	e7fe      	b.n	80048a4 <SystemClock_Config+0x3c>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80048a6:	230f      	movs	r3, #15
 80048a8:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80048aa:	2302      	movs	r3, #2
 80048ac:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80048ae:	2300      	movs	r3, #0
 80048b0:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80048b2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80048b6:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80048b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048bc:	9311      	str	r3, [sp, #68]	; 0x44

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 80048be:	2107      	movs	r1, #7
 80048c0:	a80d      	add	r0, sp, #52	; 0x34
 80048c2:	f002 fe13 	bl	80074ec <HAL_RCC_ClockConfig>
  if(ret != HAL_OK) {
 80048c6:	b100      	cbz	r0, 80048ca <SystemClock_Config+0x62>
    while(1) { ; }
 80048c8:	e7fe      	b.n	80048c8 <SystemClock_Config+0x60>
  }
}
 80048ca:	b013      	add	sp, #76	; 0x4c
 80048cc:	f85d fb04 	ldr.w	pc, [sp], #4

080048d0 <CPU_CACHE_Enable>:

// Enables CPU Instruction and Data Caches
void CPU_CACHE_Enable(void) {
 80048d0:	b410      	push	{r4}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80048d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80048d6:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80048da:	4b1c      	ldr	r3, [pc, #112]	; (800494c <CPU_CACHE_Enable+0x7c>)
 80048dc:	2100      	movs	r1, #0
 80048de:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80048e2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80048e6:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80048ea:	695a      	ldr	r2, [r3, #20]
 80048ec:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80048f0:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80048f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80048f6:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80048fa:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80048fe:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8004902:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8004906:	f3c4 304e 	ubfx	r0, r4, #13, #15
 800490a:	e000      	b.n	800490e <CPU_CACHE_Enable+0x3e>
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
    } while(sets-- != 0U);
 800490c:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800490e:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8004912:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8004916:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 800491a:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 800491e:	490b      	ldr	r1, [pc, #44]	; (800494c <CPU_CACHE_Enable+0x7c>)
 8004920:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8004924:	4613      	mov	r3, r2
 8004926:	3a01      	subs	r2, #1
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1f2      	bne.n	8004912 <CPU_CACHE_Enable+0x42>
    } while(sets-- != 0U);
 800492c:	1e43      	subs	r3, r0, #1
 800492e:	2800      	cmp	r0, #0
 8004930:	d1ec      	bne.n	800490c <CPU_CACHE_Enable+0x3c>
 8004932:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8004936:	694b      	ldr	r3, [r1, #20]
 8004938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800493c:	614b      	str	r3, [r1, #20]
 800493e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004942:	f3bf 8f6f 	isb	sy
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 8004946:	f85d 4b04 	ldr.w	r4, [sp], #4
 800494a:	4770      	bx	lr
 800494c:	e000ed00 	.word	0xe000ed00

08004950 <Clock_Inits>:
	initUart(&USB_UART, 115200, USART1);
	setbuf(stdout, NULL);
}

// Initializes clocks for various peripherals. Some might need to be added!
void Clock_Inits(void) {
 8004950:	b0a2      	sub	sp, #136	; 0x88
	// Clock all GPIO ports and Timers.
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004952:	4b9a      	ldr	r3, [pc, #616]	; (8004bbc <Clock_Inits+0x26c>)
 8004954:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004956:	f042 0201 	orr.w	r2, r2, #1
 800495a:	631a      	str	r2, [r3, #48]	; 0x30
 800495c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800495e:	f002 0201 	and.w	r2, r2, #1
 8004962:	9200      	str	r2, [sp, #0]
 8004964:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8004966:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004968:	f042 0202 	orr.w	r2, r2, #2
 800496c:	631a      	str	r2, [r3, #48]	; 0x30
 800496e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004970:	f002 0202 	and.w	r2, r2, #2
 8004974:	9201      	str	r2, [sp, #4]
 8004976:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8004978:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800497a:	f042 0204 	orr.w	r2, r2, #4
 800497e:	631a      	str	r2, [r3, #48]	; 0x30
 8004980:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004982:	f002 0204 	and.w	r2, r2, #4
 8004986:	9202      	str	r2, [sp, #8]
 8004988:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800498a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800498c:	f042 0208 	orr.w	r2, r2, #8
 8004990:	631a      	str	r2, [r3, #48]	; 0x30
 8004992:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004994:	f002 0208 	and.w	r2, r2, #8
 8004998:	9203      	str	r2, [sp, #12]
 800499a:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800499c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800499e:	f042 0210 	orr.w	r2, r2, #16
 80049a2:	631a      	str	r2, [r3, #48]	; 0x30
 80049a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049a6:	f002 0210 	and.w	r2, r2, #16
 80049aa:	9204      	str	r2, [sp, #16]
 80049ac:	9a04      	ldr	r2, [sp, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80049ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049b0:	f042 0220 	orr.w	r2, r2, #32
 80049b4:	631a      	str	r2, [r3, #48]	; 0x30
 80049b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049b8:	f002 0220 	and.w	r2, r2, #32
 80049bc:	9205      	str	r2, [sp, #20]
 80049be:	9a05      	ldr	r2, [sp, #20]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80049c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049c6:	631a      	str	r2, [r3, #48]	; 0x30
 80049c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049ca:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80049ce:	9206      	str	r2, [sp, #24]
 80049d0:	9a06      	ldr	r2, [sp, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80049d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80049d8:	631a      	str	r2, [r3, #48]	; 0x30
 80049da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049dc:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80049e0:	9207      	str	r2, [sp, #28]
 80049e2:	9a07      	ldr	r2, [sp, #28]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 80049e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049ea:	631a      	str	r2, [r3, #48]	; 0x30
 80049ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049ee:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80049f2:	9208      	str	r2, [sp, #32]
 80049f4:	9a08      	ldr	r2, [sp, #32]
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 80049f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049fc:	631a      	str	r2, [r3, #48]	; 0x30
 80049fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a00:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8004a04:	9209      	str	r2, [sp, #36]	; 0x24
 8004a06:	9a09      	ldr	r2, [sp, #36]	; 0x24
	__HAL_RCC_GPIOK_CLK_ENABLE();
 8004a08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a0a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a0e:	631a      	str	r2, [r3, #48]	; 0x30
 8004a10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a12:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8004a16:	920a      	str	r2, [sp, #40]	; 0x28
 8004a18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a20:	645a      	str	r2, [r3, #68]	; 0x44
 8004a22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a24:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004a28:	920b      	str	r2, [sp, #44]	; 0x2c
 8004a2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	__HAL_RCC_TIM1_CLK_ENABLE();
 8004a2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a2e:	f042 0201 	orr.w	r2, r2, #1
 8004a32:	645a      	str	r2, [r3, #68]	; 0x44
 8004a34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a36:	f002 0201 	and.w	r2, r2, #1
 8004a3a:	920c      	str	r2, [sp, #48]	; 0x30
 8004a3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	__HAL_RCC_TIM2_CLK_ENABLE();
 8004a3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a40:	f042 0201 	orr.w	r2, r2, #1
 8004a44:	641a      	str	r2, [r3, #64]	; 0x40
 8004a46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a48:	f002 0201 	and.w	r2, r2, #1
 8004a4c:	920d      	str	r2, [sp, #52]	; 0x34
 8004a4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	__HAL_RCC_TIM3_CLK_ENABLE();
 8004a50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a52:	f042 0202 	orr.w	r2, r2, #2
 8004a56:	641a      	str	r2, [r3, #64]	; 0x40
 8004a58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a5a:	f002 0202 	and.w	r2, r2, #2
 8004a5e:	920e      	str	r2, [sp, #56]	; 0x38
 8004a60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	__HAL_RCC_TIM4_CLK_ENABLE();
 8004a62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a64:	f042 0204 	orr.w	r2, r2, #4
 8004a68:	641a      	str	r2, [r3, #64]	; 0x40
 8004a6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a6c:	f002 0204 	and.w	r2, r2, #4
 8004a70:	920f      	str	r2, [sp, #60]	; 0x3c
 8004a72:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
	__HAL_RCC_TIM5_CLK_ENABLE();
 8004a74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a76:	f042 0208 	orr.w	r2, r2, #8
 8004a7a:	641a      	str	r2, [r3, #64]	; 0x40
 8004a7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a7e:	f002 0208 	and.w	r2, r2, #8
 8004a82:	9210      	str	r2, [sp, #64]	; 0x40
 8004a84:	9a10      	ldr	r2, [sp, #64]	; 0x40
	__HAL_RCC_TIM6_CLK_ENABLE();
 8004a86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a88:	f042 0210 	orr.w	r2, r2, #16
 8004a8c:	641a      	str	r2, [r3, #64]	; 0x40
 8004a8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a90:	f002 0210 	and.w	r2, r2, #16
 8004a94:	9211      	str	r2, [sp, #68]	; 0x44
 8004a96:	9a11      	ldr	r2, [sp, #68]	; 0x44
	__HAL_RCC_TIM7_CLK_ENABLE();
 8004a98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a9a:	f042 0220 	orr.w	r2, r2, #32
 8004a9e:	641a      	str	r2, [r3, #64]	; 0x40
 8004aa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004aa2:	f002 0220 	and.w	r2, r2, #32
 8004aa6:	9212      	str	r2, [sp, #72]	; 0x48
 8004aa8:	9a12      	ldr	r2, [sp, #72]	; 0x48
	__HAL_RCC_TIM8_CLK_ENABLE();
 8004aaa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aac:	f042 0202 	orr.w	r2, r2, #2
 8004ab0:	645a      	str	r2, [r3, #68]	; 0x44
 8004ab2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ab4:	f002 0202 	and.w	r2, r2, #2
 8004ab8:	9213      	str	r2, [sp, #76]	; 0x4c
 8004aba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
	__HAL_RCC_TIM9_CLK_ENABLE();
 8004abc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004abe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004ac2:	645a      	str	r2, [r3, #68]	; 0x44
 8004ac4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ac6:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8004aca:	9214      	str	r2, [sp, #80]	; 0x50
 8004acc:	9a14      	ldr	r2, [sp, #80]	; 0x50
	__HAL_RCC_TIM10_CLK_ENABLE();
 8004ace:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ad0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004ad4:	645a      	str	r2, [r3, #68]	; 0x44
 8004ad6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ad8:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8004adc:	9215      	str	r2, [sp, #84]	; 0x54
 8004ade:	9a15      	ldr	r2, [sp, #84]	; 0x54
	__HAL_RCC_TIM11_CLK_ENABLE();
 8004ae0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ae2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004ae6:	645a      	str	r2, [r3, #68]	; 0x44
 8004ae8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aea:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8004aee:	9216      	str	r2, [sp, #88]	; 0x58
 8004af0:	9a16      	ldr	r2, [sp, #88]	; 0x58
	__HAL_RCC_TIM12_CLK_ENABLE();
 8004af2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004af4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004af8:	641a      	str	r2, [r3, #64]	; 0x40
 8004afa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004afc:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8004b00:	9217      	str	r2, [sp, #92]	; 0x5c
 8004b02:	9a17      	ldr	r2, [sp, #92]	; 0x5c
	__HAL_RCC_TIM13_CLK_ENABLE();
 8004b04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b06:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b0a:	641a      	str	r2, [r3, #64]	; 0x40
 8004b0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b0e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8004b12:	9218      	str	r2, [sp, #96]	; 0x60
 8004b14:	9a18      	ldr	r2, [sp, #96]	; 0x60
	__HAL_RCC_TIM14_CLK_ENABLE();
 8004b16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b1c:	641a      	str	r2, [r3, #64]	; 0x40
 8004b1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b20:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8004b24:	9219      	str	r2, [sp, #100]	; 0x64
 8004b26:	9a19      	ldr	r2, [sp, #100]	; 0x64

	// Enable SPI2 clock
	__HAL_RCC_SPI2_CLK_ENABLE();
 8004b28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b2e:	641a      	str	r2, [r3, #64]	; 0x40
 8004b30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b32:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004b36:	921a      	str	r2, [sp, #104]	; 0x68
 8004b38:	9a1a      	ldr	r2, [sp, #104]	; 0x68

	// ADC and DAC
	__HAL_RCC_DAC_CLK_ENABLE();
 8004b3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b3c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004b40:	641a      	str	r2, [r3, #64]	; 0x40
 8004b42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b44:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8004b48:	921b      	str	r2, [sp, #108]	; 0x6c
 8004b4a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
	__HAL_RCC_ADC1_CLK_ENABLE();
 8004b4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b52:	645a      	str	r2, [r3, #68]	; 0x44
 8004b54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b56:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8004b5a:	921c      	str	r2, [sp, #112]	; 0x70
 8004b5c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
	__HAL_RCC_ADC2_CLK_ENABLE();
 8004b5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b64:	645a      	str	r2, [r3, #68]	; 0x44
 8004b66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b68:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8004b6c:	921d      	str	r2, [sp, #116]	; 0x74
 8004b6e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
	__HAL_RCC_ADC3_CLK_ENABLE();
 8004b70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b76:	645a      	str	r2, [r3, #68]	; 0x44
 8004b78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b7a:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8004b7e:	921e      	str	r2, [sp, #120]	; 0x78
 8004b80:	9a1e      	ldr	r2, [sp, #120]	; 0x78

	// DMA Clocks
	__HAL_RCC_DMA1_CLK_ENABLE();
 8004b82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b84:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8004b88:	631a      	str	r2, [r3, #48]	; 0x30
 8004b8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b8c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004b90:	921f      	str	r2, [sp, #124]	; 0x7c
 8004b92:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
	__HAL_RCC_DMA2_CLK_ENABLE();
 8004b94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b96:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004b9a:	631a      	str	r2, [r3, #48]	; 0x30
 8004b9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b9e:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8004ba2:	9220      	str	r2, [sp, #128]	; 0x80
 8004ba4:	9a20      	ldr	r2, [sp, #128]	; 0x80

	// I2C Clock
	__HAL_RCC_I2C1_CLK_ENABLE();
 8004ba6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ba8:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8004bac:	641a      	str	r2, [r3, #64]	; 0x40
 8004bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bb4:	9321      	str	r3, [sp, #132]	; 0x84
 8004bb6:	9b21      	ldr	r3, [sp, #132]	; 0x84

}
 8004bb8:	b022      	add	sp, #136	; 0x88
 8004bba:	4770      	bx	lr
 8004bbc:	40023800 	.word	0x40023800

08004bc0 <Sys_Init>:
void Sys_Init(void) {
 8004bc0:	b508      	push	{r3, lr}
	CPU_CACHE_Enable();		// Enable CPU Caching
 8004bc2:	f7ff fe85 	bl	80048d0 <CPU_CACHE_Enable>
	HAL_Init();				// Initialize HAL
 8004bc6:	f000 fb33 	bl	8005230 <HAL_Init>
	SystemClock_Config(); 	// Configure the system clock to 216 MHz
 8004bca:	f7ff fe4d 	bl	8004868 <SystemClock_Config>
	Clock_Inits();
 8004bce:	f7ff febf 	bl	8004950 <Clock_Inits>
	initUart(&USB_UART, 115200, USART1);
 8004bd2:	4a06      	ldr	r2, [pc, #24]	; (8004bec <Sys_Init+0x2c>)
 8004bd4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8004bd8:	4805      	ldr	r0, [pc, #20]	; (8004bf0 <Sys_Init+0x30>)
 8004bda:	f000 fac7 	bl	800516c <initUart>
	setbuf(stdout, NULL);
 8004bde:	4b05      	ldr	r3, [pc, #20]	; (8004bf4 <Sys_Init+0x34>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2100      	movs	r1, #0
 8004be4:	6898      	ldr	r0, [r3, #8]
 8004be6:	f005 f80d 	bl	8009c04 <setbuf>
}
 8004bea:	bd08      	pop	{r3, pc}
 8004bec:	40011000 	.word	0x40011000
 8004bf0:	200053ac 	.word	0x200053ac
 8004bf4:	2000010c 	.word	0x2000010c

08004bf8 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8004bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bfc:	b086      	sub	sp, #24
 8004bfe:	4605      	mov	r5, r0
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8004c00:	2364      	movs	r3, #100	; 0x64
 8004c02:	9302      	str	r3, [sp, #8]
 8004c04:	2301      	movs	r3, #1
 8004c06:	9301      	str	r3, [sp, #4]
 8004c08:	f10d 0217 	add.w	r2, sp, #23
 8004c0c:	9200      	str	r2, [sp, #0]
 8004c0e:	2275      	movs	r2, #117	; 0x75
 8004c10:	21d0      	movs	r1, #208	; 0xd0
 8004c12:	f001 fecf 	bl	80069b4 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8004c16:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8004c1a:	2b68      	cmp	r3, #104	; 0x68
 8004c1c:	d003      	beq.n	8004c26 <MPU6050_Init+0x2e>
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
        return 0;
    }
    return 1;
 8004c1e:	2001      	movs	r0, #1
}
 8004c20:	b006      	add	sp, #24
 8004c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        Data = 0;
 8004c26:	2400      	movs	r4, #0
 8004c28:	f88d 4016 	strb.w	r4, [sp, #22]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8004c2c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8004c30:	f8cd 8008 	str.w	r8, [sp, #8]
 8004c34:	2601      	movs	r6, #1
 8004c36:	9601      	str	r6, [sp, #4]
 8004c38:	f10d 0716 	add.w	r7, sp, #22
 8004c3c:	9700      	str	r7, [sp, #0]
 8004c3e:	4633      	mov	r3, r6
 8004c40:	226b      	movs	r2, #107	; 0x6b
 8004c42:	21d0      	movs	r1, #208	; 0xd0
 8004c44:	4628      	mov	r0, r5
 8004c46:	f001 fddf 	bl	8006808 <HAL_I2C_Mem_Write>
        Data = 0x07;
 8004c4a:	2307      	movs	r3, #7
 8004c4c:	f88d 3016 	strb.w	r3, [sp, #22]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8004c50:	f8cd 8008 	str.w	r8, [sp, #8]
 8004c54:	9601      	str	r6, [sp, #4]
 8004c56:	9700      	str	r7, [sp, #0]
 8004c58:	4633      	mov	r3, r6
 8004c5a:	2219      	movs	r2, #25
 8004c5c:	21d0      	movs	r1, #208	; 0xd0
 8004c5e:	4628      	mov	r0, r5
 8004c60:	f001 fdd2 	bl	8006808 <HAL_I2C_Mem_Write>
        Data = 0x00;
 8004c64:	f88d 4016 	strb.w	r4, [sp, #22]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8004c68:	f8cd 8008 	str.w	r8, [sp, #8]
 8004c6c:	9601      	str	r6, [sp, #4]
 8004c6e:	9700      	str	r7, [sp, #0]
 8004c70:	4633      	mov	r3, r6
 8004c72:	221c      	movs	r2, #28
 8004c74:	21d0      	movs	r1, #208	; 0xd0
 8004c76:	4628      	mov	r0, r5
 8004c78:	f001 fdc6 	bl	8006808 <HAL_I2C_Mem_Write>
        Data = 0x00;
 8004c7c:	f88d 4016 	strb.w	r4, [sp, #22]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8004c80:	f8cd 8008 	str.w	r8, [sp, #8]
 8004c84:	9601      	str	r6, [sp, #4]
 8004c86:	9700      	str	r7, [sp, #0]
 8004c88:	4633      	mov	r3, r6
 8004c8a:	221b      	movs	r2, #27
 8004c8c:	21d0      	movs	r1, #208	; 0xd0
 8004c8e:	4628      	mov	r0, r5
 8004c90:	f001 fdba 	bl	8006808 <HAL_I2C_Mem_Write>
        return 0;
 8004c94:	4620      	mov	r0, r4
 8004c96:	e7c3      	b.n	8004c20 <MPU6050_Init+0x28>

08004c98 <Kalman_getAngle>:
        DataStruct->Gx = -DataStruct->Gx;
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
}

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8004c98:	ed2d 8b04 	vpush	{d8-d9}
 8004c9c:	b084      	sub	sp, #16
    double rate = newRate - Kalman->bias;
 8004c9e:	ed90 8b08 	vldr	d8, [r0, #32]
 8004ca2:	ee31 1b48 	vsub.f64	d1, d1, d8
    Kalman->angle += dt * rate;
 8004ca6:	ed90 6b06 	vldr	d6, [r0, #24]
 8004caa:	ee01 6b02 	vmla.f64	d6, d1, d2
 8004cae:	ed80 6b06 	vstr	d6, [r0, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8004cb2:	ed90 4b10 	vldr	d4, [r0, #64]	; 0x40
 8004cb6:	ee24 7b02 	vmul.f64	d7, d4, d2
 8004cba:	ed90 3b0c 	vldr	d3, [r0, #48]	; 0x30
 8004cbe:	ee37 9b43 	vsub.f64	d9, d7, d3
 8004cc2:	ed90 1b0e 	vldr	d1, [r0, #56]	; 0x38
 8004cc6:	ee39 9b41 	vsub.f64	d9, d9, d1
 8004cca:	ed90 5b00 	vldr	d5, [r0]
 8004cce:	ee39 9b05 	vadd.f64	d9, d9, d5
 8004cd2:	ed90 5b0a 	vldr	d5, [r0, #40]	; 0x28
 8004cd6:	ee09 5b02 	vmla.f64	d5, d9, d2
 8004cda:	ed80 5b0a 	vstr	d5, [r0, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8004cde:	ee33 3b47 	vsub.f64	d3, d3, d7
 8004ce2:	ed80 3b0c 	vstr	d3, [r0, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8004ce6:	ee31 7b47 	vsub.f64	d7, d1, d7
 8004cea:	ed80 7b0e 	vstr	d7, [r0, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8004cee:	ed90 1b02 	vldr	d1, [r0, #8]
 8004cf2:	ee01 4b02 	vmla.f64	d4, d1, d2
 8004cf6:	ed80 4b10 	vstr	d4, [r0, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8004cfa:	ed90 2b04 	vldr	d2, [r0, #16]
 8004cfe:	ee35 2b02 	vadd.f64	d2, d5, d2
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8004d02:	ee85 9b02 	vdiv.f64	d9, d5, d2
 8004d06:	ed8d 9b00 	vstr	d9, [sp]
    K[1] = Kalman->P[1][0] / S;
 8004d0a:	ee87 1b02 	vdiv.f64	d1, d7, d2
 8004d0e:	ed8d 1b02 	vstr	d1, [sp, #8]

    double y = newAngle - Kalman->angle;
 8004d12:	ee30 2b46 	vsub.f64	d2, d0, d6
    Kalman->angle += K[0] * y;
 8004d16:	ee09 6b02 	vmla.f64	d6, d9, d2
 8004d1a:	eeb0 0b46 	vmov.f64	d0, d6
 8004d1e:	ed80 6b06 	vstr	d6, [r0, #24]
    Kalman->bias += K[1] * y;
 8004d22:	ee01 8b02 	vmla.f64	d8, d1, d2
 8004d26:	ed80 8b08 	vstr	d8, [r0, #32]

    double P00_temp = Kalman->P[0][0];
    double P01_temp = Kalman->P[0][1];

    Kalman->P[0][0] -= K[0] * P00_temp;
 8004d2a:	eeb0 6b45 	vmov.f64	d6, d5
 8004d2e:	ee05 6b49 	vmls.f64	d6, d5, d9
 8004d32:	ed80 6b0a 	vstr	d6, [r0, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8004d36:	eeb0 6b43 	vmov.f64	d6, d3
 8004d3a:	ee03 6b49 	vmls.f64	d6, d3, d9
 8004d3e:	ed80 6b0c 	vstr	d6, [r0, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8004d42:	ee05 7b41 	vmls.f64	d7, d5, d1
 8004d46:	ed80 7b0e 	vstr	d7, [r0, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8004d4a:	ee03 4b41 	vmls.f64	d4, d3, d1
 8004d4e:	ed80 4b10 	vstr	d4, [r0, #64]	; 0x40

    return Kalman->angle;
};
 8004d52:	b004      	add	sp, #16
 8004d54:	ecbd 8b04 	vpop	{d8-d9}
 8004d58:	4770      	bx	lr
 8004d5a:	0000      	movs	r0, r0
 8004d5c:	0000      	movs	r0, r0
	...

08004d60 <MPU6050_Read_All>:
{
 8004d60:	b570      	push	{r4, r5, r6, lr}
 8004d62:	ed2d 8b04 	vpush	{d8-d9}
 8004d66:	b088      	sub	sp, #32
 8004d68:	460c      	mov	r4, r1
    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8004d6a:	2364      	movs	r3, #100	; 0x64
 8004d6c:	9302      	str	r3, [sp, #8]
 8004d6e:	230e      	movs	r3, #14
 8004d70:	9301      	str	r3, [sp, #4]
 8004d72:	ab04      	add	r3, sp, #16
 8004d74:	9300      	str	r3, [sp, #0]
 8004d76:	2301      	movs	r3, #1
 8004d78:	223b      	movs	r2, #59	; 0x3b
 8004d7a:	21d0      	movs	r1, #208	; 0xd0
 8004d7c:	f001 fe1a 	bl	80069b4 <HAL_I2C_Mem_Read>
    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8004d80:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8004d84:	f89d 2011 	ldrb.w	r2, [sp, #17]
 8004d88:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8004d8c:	b212      	sxth	r2, r2
 8004d8e:	8022      	strh	r2, [r4, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8004d90:	f89d 1012 	ldrb.w	r1, [sp, #18]
 8004d94:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8004d98:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004d9c:	b21b      	sxth	r3, r3
 8004d9e:	8063      	strh	r3, [r4, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8004da0:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8004da4:	f89d 5015 	ldrb.w	r5, [sp, #21]
 8004da8:	ea45 2501 	orr.w	r5, r5, r1, lsl #8
 8004dac:	b22d      	sxth	r5, r5
 8004dae:	80a5      	strh	r5, [r4, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8004db0:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8004db4:	0209      	lsls	r1, r1, #8
 8004db6:	b209      	sxth	r1, r1
 8004db8:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8004dbc:	4301      	orrs	r1, r0
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8004dbe:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8004dc2:	f89d e019 	ldrb.w	lr, [sp, #25]
 8004dc6:	ea4e 2e00 	orr.w	lr, lr, r0, lsl #8
 8004dca:	fa0f fe8e 	sxth.w	lr, lr
 8004dce:	f8a4 e020 	strh.w	lr, [r4, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8004dd2:	f89d 001a 	ldrb.w	r0, [sp, #26]
 8004dd6:	f89d c01b 	ldrb.w	ip, [sp, #27]
 8004dda:	ea4c 2c00 	orr.w	ip, ip, r0, lsl #8
 8004dde:	fa0f fc8c 	sxth.w	ip, ip
 8004de2:	f8a4 c022 	strh.w	ip, [r4, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8004de6:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8004dea:	f89d 001d 	ldrb.w	r0, [sp, #29]
 8004dee:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 8004df2:	b200      	sxth	r0, r0
 8004df4:	84a0      	strh	r0, [r4, #36]	; 0x24
    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8004df6:	ee07 2a90 	vmov	s15, r2
 8004dfa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004dfe:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8004fa8 <MPU6050_Read_All+0x248>
 8004e02:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004e06:	ed84 7b02 	vstr	d7, [r4, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8004e0a:	ee07 3a90 	vmov	s15, r3
 8004e0e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004e12:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004e16:	ed84 7b04 	vstr	d7, [r4, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8004e1a:	ee07 5a90 	vmov	s15, r5
 8004e1e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004e22:	ed9f 5b63 	vldr	d5, [pc, #396]	; 8004fb0 <MPU6050_Read_All+0x250>
 8004e26:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8004e2a:	ed84 6b06 	vstr	d6, [r4, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8004e2e:	ee07 1a90 	vmov	s15, r1
 8004e32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e36:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8004fe8 <MPU6050_Read_All+0x288>
 8004e3a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004e3e:	eddf 7a6b 	vldr	s15, [pc, #428]	; 8004fec <MPU6050_Read_All+0x28c>
 8004e42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e46:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8004e4a:	ee07 ea90 	vmov	s15, lr
 8004e4e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004e52:	ed9f 6b59 	vldr	d6, [pc, #356]	; 8004fb8 <MPU6050_Read_All+0x258>
 8004e56:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8004e5a:	ed84 5b0a 	vstr	d5, [r4, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8004e5e:	ee07 ca90 	vmov	s15, ip
 8004e62:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004e66:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8004e6a:	ed84 5b0c 	vstr	d5, [r4, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8004e6e:	ee07 0a90 	vmov	s15, r0
 8004e72:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004e76:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8004e7a:	ed84 5b0e 	vstr	d5, [r4, #56]	; 0x38
    double dt = (double)(xTaskGetTickCount() - timer) / 1000;
 8004e7e:	f7fd fc1b 	bl	80026b8 <xTaskGetTickCount>
 8004e82:	4d5b      	ldr	r5, [pc, #364]	; (8004ff0 <MPU6050_Read_All+0x290>)
 8004e84:	682b      	ldr	r3, [r5, #0]
 8004e86:	1ac0      	subs	r0, r0, r3
 8004e88:	ee07 0a90 	vmov	s15, r0
 8004e8c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8004e90:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 8004fc0 <MPU6050_Read_All+0x260>
 8004e94:	ee87 8b06 	vdiv.f64	d8, d7, d6
    timer = xTaskGetTickCount();
 8004e98:	f7fd fc0e 	bl	80026b8 <xTaskGetTickCount>
 8004e9c:	6028      	str	r0, [r5, #0]
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8004e9e:	f9b4 5000 	ldrsh.w	r5, [r4]
 8004ea2:	f9b4 6004 	ldrsh.w	r6, [r4, #4]
 8004ea6:	fb06 f306 	mul.w	r3, r6, r6
 8004eaa:	fb05 3305 	mla	r3, r5, r5, r3
 8004eae:	ee00 3a10 	vmov	s0, r3
    double roll_sqrt = sqrt(
 8004eb2:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 8004eb6:	f007 f82f 	bl	800bf18 <sqrt>
    if (roll_sqrt != 0.0)
 8004eba:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8004ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ec2:	d061      	beq.n	8004f88 <MPU6050_Read_All+0x228>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8004ec4:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8004ec8:	ee07 3a10 	vmov	s14, r3
 8004ecc:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8004ed0:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8004ed4:	f007 f840 	bl	800bf58 <atan>
 8004ed8:	ed9f 9b3b 	vldr	d9, [pc, #236]	; 8004fc8 <MPU6050_Read_All+0x268>
 8004edc:	ee20 9b09 	vmul.f64	d9, d0, d9
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8004ee0:	426b      	negs	r3, r5
 8004ee2:	ee00 3a10 	vmov	s0, r3
 8004ee6:	ee07 6a90 	vmov	s15, r6
 8004eea:	eeb8 1be7 	vcvt.f64.s32	d1, s15
 8004eee:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 8004ef2:	f007 f80f 	bl	800bf14 <atan2>
 8004ef6:	ed9f 7b34 	vldr	d7, [pc, #208]	; 8004fc8 <MPU6050_Read_All+0x268>
 8004efa:	ee20 0b07 	vmul.f64	d0, d0, d7
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8004efe:	ed9f 7b34 	vldr	d7, [pc, #208]	; 8004fd0 <MPU6050_Read_All+0x270>
 8004f02:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8004f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f0a:	d508      	bpl.n	8004f1e <MPU6050_Read_All+0x1be>
 8004f0c:	ed94 6b14 	vldr	d6, [r4, #80]	; 0x50
 8004f10:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8004fd8 <MPU6050_Read_All+0x278>
 8004f14:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f1c:	dc0f      	bgt.n	8004f3e <MPU6050_Read_All+0x1de>
 8004f1e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8004fd8 <MPU6050_Read_All+0x278>
 8004f22:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8004f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f2a:	dd30      	ble.n	8004f8e <MPU6050_Read_All+0x22e>
 8004f2c:	ed94 6b14 	vldr	d6, [r4, #80]	; 0x50
 8004f30:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8004fd0 <MPU6050_Read_All+0x270>
 8004f34:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f3c:	d527      	bpl.n	8004f8e <MPU6050_Read_All+0x22e>
        KalmanY.angle = pitch;
 8004f3e:	4b2d      	ldr	r3, [pc, #180]	; (8004ff4 <MPU6050_Read_All+0x294>)
 8004f40:	ed83 0b06 	vstr	d0, [r3, #24]
        DataStruct->KalmanAngleY = pitch;
 8004f44:	ed84 0b14 	vstr	d0, [r4, #80]	; 0x50
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8004f48:	ed94 7b14 	vldr	d7, [r4, #80]	; 0x50
 8004f4c:	eeb0 7bc7 	vabs.f64	d7, d7
 8004f50:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8004fd8 <MPU6050_Read_All+0x278>
 8004f54:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f5c:	dd05      	ble.n	8004f6a <MPU6050_Read_All+0x20a>
        DataStruct->Gx = -DataStruct->Gx;
 8004f5e:	ed94 7b0a 	vldr	d7, [r4, #40]	; 0x28
 8004f62:	eeb1 7b47 	vneg.f64	d7, d7
 8004f66:	ed84 7b0a 	vstr	d7, [r4, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8004f6a:	eeb0 2b48 	vmov.f64	d2, d8
 8004f6e:	ed94 1b0a 	vldr	d1, [r4, #40]	; 0x28
 8004f72:	eeb0 0b49 	vmov.f64	d0, d9
 8004f76:	4820      	ldr	r0, [pc, #128]	; (8004ff8 <MPU6050_Read_All+0x298>)
 8004f78:	f7ff fe8e 	bl	8004c98 <Kalman_getAngle>
 8004f7c:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
}
 8004f80:	b008      	add	sp, #32
 8004f82:	ecbd 8b04 	vpop	{d8-d9}
 8004f86:	bd70      	pop	{r4, r5, r6, pc}
        roll = 0.0;
 8004f88:	ed9f 9b15 	vldr	d9, [pc, #84]	; 8004fe0 <MPU6050_Read_All+0x280>
 8004f8c:	e7a8      	b.n	8004ee0 <MPU6050_Read_All+0x180>
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8004f8e:	eeb0 2b48 	vmov.f64	d2, d8
 8004f92:	ed94 1b0c 	vldr	d1, [r4, #48]	; 0x30
 8004f96:	4817      	ldr	r0, [pc, #92]	; (8004ff4 <MPU6050_Read_All+0x294>)
 8004f98:	f7ff fe7e 	bl	8004c98 <Kalman_getAngle>
 8004f9c:	ed84 0b14 	vstr	d0, [r4, #80]	; 0x50
 8004fa0:	e7d2      	b.n	8004f48 <MPU6050_Read_All+0x1e8>
 8004fa2:	bf00      	nop
 8004fa4:	f3af 8000 	nop.w
 8004fa8:	00000000 	.word	0x00000000
 8004fac:	3f100000 	.word	0x3f100000
 8004fb0:	00000000 	.word	0x00000000
 8004fb4:	40cc2900 	.word	0x40cc2900
 8004fb8:	00000000 	.word	0x00000000
 8004fbc:	40606000 	.word	0x40606000
 8004fc0:	00000000 	.word	0x00000000
 8004fc4:	408f4000 	.word	0x408f4000
 8004fc8:	1a63c1f8 	.word	0x1a63c1f8
 8004fcc:	404ca5dc 	.word	0x404ca5dc
 8004fd0:	00000000 	.word	0x00000000
 8004fd4:	c0568000 	.word	0xc0568000
 8004fd8:	00000000 	.word	0x00000000
 8004fdc:	40568000 	.word	0x40568000
	...
 8004fe8:	43aa0000 	.word	0x43aa0000
 8004fec:	42121eb8 	.word	0x42121eb8
 8004ff0:	2000535c 	.word	0x2000535c
 8004ff4:	20000018 	.word	0x20000018
 8004ff8:	20000060 	.word	0x20000060

08004ffc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ffc:	b500      	push	{lr}
 8004ffe:	b089      	sub	sp, #36	; 0x24
 8005000:	4601      	mov	r1, r0
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8005002:	2200      	movs	r2, #0
 8005004:	2037      	movs	r0, #55	; 0x37
 8005006:	f000 f941 	bl	800528c <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800500a:	2037      	movs	r0, #55	; 0x37
 800500c:	f000 f974 	bl	80052f8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8005010:	4b15      	ldr	r3, [pc, #84]	; (8005068 <HAL_InitTick+0x6c>)
 8005012:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005014:	f042 0220 	orr.w	r2, r2, #32
 8005018:	641a      	str	r2, [r3, #64]	; 0x40
 800501a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501c:	f003 0320 	and.w	r3, r3, #32
 8005020:	9301      	str	r3, [sp, #4]
 8005022:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005024:	a902      	add	r1, sp, #8
 8005026:	a803      	add	r0, sp, #12
 8005028:	f002 fb3c 	bl	80076a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800502c:	f002 fb1a 	bl	8007664 <HAL_RCC_GetPCLK1Freq>
 8005030:	0043      	lsls	r3, r0, #1

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8005032:	4a0e      	ldr	r2, [pc, #56]	; (800506c <HAL_InitTick+0x70>)
 8005034:	fba2 2303 	umull	r2, r3, r2, r3
 8005038:	0c9b      	lsrs	r3, r3, #18
 800503a:	3b01      	subs	r3, #1

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800503c:	480c      	ldr	r0, [pc, #48]	; (8005070 <HAL_InitTick+0x74>)
 800503e:	4a0d      	ldr	r2, [pc, #52]	; (8005074 <HAL_InitTick+0x78>)
 8005040:	6002      	str	r2, [r0, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8005042:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005046:	60c2      	str	r2, [r0, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8005048:	6043      	str	r3, [r0, #4]
  htim7.Init.ClockDivision = 0;
 800504a:	2300      	movs	r3, #0
 800504c:	6103      	str	r3, [r0, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800504e:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8005050:	f003 f844 	bl	80080dc <HAL_TIM_Base_Init>
 8005054:	b118      	cbz	r0, 800505e <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
  }

  /* Return function status */
  return HAL_ERROR;
 8005056:	2001      	movs	r0, #1
}
 8005058:	b009      	add	sp, #36	; 0x24
 800505a:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim7);
 800505e:	4804      	ldr	r0, [pc, #16]	; (8005070 <HAL_InitTick+0x74>)
 8005060:	f002 fe9a 	bl	8007d98 <HAL_TIM_Base_Start_IT>
 8005064:	e7f8      	b.n	8005058 <HAL_InitTick+0x5c>
 8005066:	bf00      	nop
 8005068:	40023800 	.word	0x40023800
 800506c:	431bde83 	.word	0x431bde83
 8005070:	20005360 	.word	0x20005360
 8005074:	40001400 	.word	0x40001400

08005078 <TIM7_IRQHandler>:
  /* Enable TIM7 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim7, TIM_IT_UPDATE);
}

void TIM7_IRQHandler(void)
{
 8005078:	b508      	push	{r3, lr}
  HAL_TIM_IRQHandler(&htim7);
 800507a:	4802      	ldr	r0, [pc, #8]	; (8005084 <TIM7_IRQHandler+0xc>)
 800507c:	f002 fed9 	bl	8007e32 <HAL_TIM_IRQHandler>
}
 8005080:	bd08      	pop	{r3, pc}
 8005082:	bf00      	nop
 8005084:	20005360 	.word	0x20005360

08005088 <HAL_UART_MspInit>:

UART_HandleTypeDef USB_UART;
// Initialize Hardware Resources
// Peripheral's clock enable
// Peripheral's GPIO Configuration
void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 8005088:	b530      	push	{r4, r5, lr}
 800508a:	b08b      	sub	sp, #44	; 0x2c
	GPIO_InitTypeDef  GPIO_InitStruct;

	if (huart->Instance == USART1) {
 800508c:	6803      	ldr	r3, [r0, #0]
 800508e:	4a32      	ldr	r2, [pc, #200]	; (8005158 <HAL_UART_MspInit+0xd0>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d004      	beq.n	800509e <HAL_UART_MspInit+0x16>
		
		// Enable Interrupt Mode
		HAL_NVIC_SetPriority(USART1_IRQn, 10, 0);
		HAL_NVIC_EnableIRQ(USART1_IRQn);

	} else if (huart->Instance == USART6) {
 8005094:	4a31      	ldr	r2, [pc, #196]	; (800515c <HAL_UART_MspInit+0xd4>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d034      	beq.n	8005104 <HAL_UART_MspInit+0x7c>

		// Enable UART Clocking
		__USART6_CLK_ENABLE();

	}
}
 800509a:	b00b      	add	sp, #44	; 0x2c
 800509c:	bd30      	pop	{r4, r5, pc}
		__GPIOA_CLK_ENABLE();
 800509e:	4c30      	ldr	r4, [pc, #192]	; (8005160 <HAL_UART_MspInit+0xd8>)
 80050a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80050a2:	f043 0301 	orr.w	r3, r3, #1
 80050a6:	6323      	str	r3, [r4, #48]	; 0x30
 80050a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	9301      	str	r3, [sp, #4]
 80050b0:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin       = GPIO_PIN_9;
 80050b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050b6:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80050b8:	2302      	movs	r3, #2
 80050ba:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80050bc:	2301      	movs	r3, #1
 80050be:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 80050c0:	2303      	movs	r3, #3
 80050c2:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80050c4:	2307      	movs	r3, #7
 80050c6:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //TX Config
 80050c8:	4d26      	ldr	r5, [pc, #152]	; (8005164 <HAL_UART_MspInit+0xdc>)
 80050ca:	a905      	add	r1, sp, #20
 80050cc:	4628      	mov	r0, r5
 80050ce:	f001 f87f 	bl	80061d0 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 80050d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050d6:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config
 80050d8:	a905      	add	r1, sp, #20
 80050da:	4628      	mov	r0, r5
 80050dc:	f001 f878 	bl	80061d0 <HAL_GPIO_Init>
		__USART1_CLK_ENABLE();
 80050e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80050e2:	f043 0310 	orr.w	r3, r3, #16
 80050e6:	6463      	str	r3, [r4, #68]	; 0x44
 80050e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80050ea:	f003 0310 	and.w	r3, r3, #16
 80050ee:	9302      	str	r3, [sp, #8]
 80050f0:	9b02      	ldr	r3, [sp, #8]
		HAL_NVIC_SetPriority(USART1_IRQn, 10, 0);
 80050f2:	2200      	movs	r2, #0
 80050f4:	210a      	movs	r1, #10
 80050f6:	2025      	movs	r0, #37	; 0x25
 80050f8:	f000 f8c8 	bl	800528c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART1_IRQn);
 80050fc:	2025      	movs	r0, #37	; 0x25
 80050fe:	f000 f8fb 	bl	80052f8 <HAL_NVIC_EnableIRQ>
 8005102:	e7ca      	b.n	800509a <HAL_UART_MspInit+0x12>
		__GPIOC_CLK_ENABLE();
 8005104:	4c16      	ldr	r4, [pc, #88]	; (8005160 <HAL_UART_MspInit+0xd8>)
 8005106:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005108:	f043 0304 	orr.w	r3, r3, #4
 800510c:	6323      	str	r3, [r4, #48]	; 0x30
 800510e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005110:	f003 0304 	and.w	r3, r3, #4
 8005114:	9303      	str	r3, [sp, #12]
 8005116:	9b03      	ldr	r3, [sp, #12]
		GPIO_InitStruct.Pin       = GPIO_PIN_6;
 8005118:	2340      	movs	r3, #64	; 0x40
 800511a:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800511c:	2302      	movs	r3, #2
 800511e:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8005120:	2301      	movs	r3, #1
 8005122:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8005124:	2303      	movs	r3, #3
 8005126:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005128:	2308      	movs	r3, #8
 800512a:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //TX Config
 800512c:	4d0e      	ldr	r5, [pc, #56]	; (8005168 <HAL_UART_MspInit+0xe0>)
 800512e:	a905      	add	r1, sp, #20
 8005130:	4628      	mov	r0, r5
 8005132:	f001 f84d 	bl	80061d0 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005136:	2380      	movs	r3, #128	; 0x80
 8005138:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //RX Config
 800513a:	a905      	add	r1, sp, #20
 800513c:	4628      	mov	r0, r5
 800513e:	f001 f847 	bl	80061d0 <HAL_GPIO_Init>
		__USART6_CLK_ENABLE();
 8005142:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005144:	f043 0320 	orr.w	r3, r3, #32
 8005148:	6463      	str	r3, [r4, #68]	; 0x44
 800514a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800514c:	f003 0320 	and.w	r3, r3, #32
 8005150:	9304      	str	r3, [sp, #16]
 8005152:	9b04      	ldr	r3, [sp, #16]
}
 8005154:	e7a1      	b.n	800509a <HAL_UART_MspInit+0x12>
 8005156:	bf00      	nop
 8005158:	40011000 	.word	0x40011000
 800515c:	40011400 	.word	0x40011400
 8005160:	40023800 	.word	0x40023800
 8005164:	40020000 	.word	0x40020000
 8005168:	40020800 	.word	0x40020800

0800516c <initUart>:

//UART Initialization
void initUart(UART_HandleTypeDef* Uhand, uint32_t Baud, USART_TypeDef* Tgt) {
 800516c:	b508      	push	{r3, lr}
	Uhand->Instance        = Tgt;
 800516e:	6002      	str	r2, [r0, #0]

	Uhand->Init.BaudRate   = Baud;
 8005170:	6041      	str	r1, [r0, #4]
	Uhand->Init.WordLength = UART_WORDLENGTH_8B;
 8005172:	2200      	movs	r2, #0
 8005174:	6082      	str	r2, [r0, #8]
	Uhand->Init.StopBits   = UART_STOPBITS_1;
 8005176:	60c2      	str	r2, [r0, #12]
	Uhand->Init.Parity     = UART_PARITY_NONE;
 8005178:	6102      	str	r2, [r0, #16]
	Uhand->Init.Mode       = UART_MODE_TX_RX;
 800517a:	210c      	movs	r1, #12
 800517c:	6141      	str	r1, [r0, #20]
	Uhand->Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800517e:	6182      	str	r2, [r0, #24]

	HAL_UART_Init(Uhand);
 8005180:	f003 feda 	bl	8008f38 <HAL_UART_Init>
}
 8005184:	bd08      	pop	{r3, pc}
	...

08005188 <_write>:

============================================================================= */


// Make printf(), putchar(), etc. default to work over USB UART
int _write(int file, char *ptr, int len) {
 8005188:	b510      	push	{r4, lr}
 800518a:	4614      	mov	r4, r2
	// HAL_UART_Transmit(&USB_UART, (uint8_t*) ptr, len, 1000);
	HAL_UART_Transmit_IT(&USB_UART, (uint8_t*) ptr, len);
 800518c:	b292      	uxth	r2, r2
 800518e:	4802      	ldr	r0, [pc, #8]	; (8005198 <_write+0x10>)
 8005190:	f003 f862 	bl	8008258 <HAL_UART_Transmit_IT>
	return len;
}
 8005194:	4620      	mov	r0, r4
 8005196:	bd10      	pop	{r4, pc}
 8005198:	200053ac 	.word	0x200053ac

0800519c <_read>:

// Make scanf(), getchar(), etc. default to work over USB UART
int _read(int file, char *ptr, int len) {
 800519c:	b508      	push	{r3, lr}
	*ptr = 0x00; // Clear the character buffer because scanf() is finicky
 800519e:	2200      	movs	r2, #0
 80051a0:	700a      	strb	r2, [r1, #0]
	len = 1; // Again because of scanf's finickiness, len must = 1
	HAL_UART_Receive(&USB_UART, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80051a2:	f04f 33ff 	mov.w	r3, #4294967295
 80051a6:	2201      	movs	r2, #1
 80051a8:	4802      	ldr	r0, [pc, #8]	; (80051b4 <_read+0x18>)
 80051aa:	f003 fe04 	bl	8008db6 <HAL_UART_Receive>
	return len;
}
 80051ae:	2001      	movs	r0, #1
 80051b0:	bd08      	pop	{r3, pc}
 80051b2:	bf00      	nop
 80051b4:	200053ac 	.word	0x200053ac

080051b8 <_lseek>:
	}
  return i; // The way this is set up, it will always report the wrong size
}

// These functions need to be defined for compiler version gcc-arm version 11.3__attribute__((weak)) void _close(void){}
__attribute__((weak)) void _lseek(void){}
 80051b8:	4770      	bx	lr

080051ba <_fstat>:
__attribute__((weak)) void _fstat(void){}
 80051ba:	4770      	bx	lr

080051bc <_getpid>:
__attribute__((weak)) void _getpid(void){}
 80051bc:	4770      	bx	lr

080051be <_kill>:
__attribute__((weak)) void _ispid(void){}
__attribute__((weak)) void _kill(void){}
 80051be:	4770      	bx	lr

080051c0 <_isatty>:
__attribute__((weak)) void _isatty(void){}
 80051c0:	4770      	bx	lr
	...

080051c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80051c4:	480d      	ldr	r0, [pc, #52]	; (80051fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80051c6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 80051c8:	480d      	ldr	r0, [pc, #52]	; (8005200 <LoopForever+0x6>)
  ldr r1, =_edata
 80051ca:	490e      	ldr	r1, [pc, #56]	; (8005204 <LoopForever+0xa>)
  ldr r2, =_sidata
 80051cc:	4a0e      	ldr	r2, [pc, #56]	; (8005208 <LoopForever+0xe>)
  movs r3, #0
 80051ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80051d0:	e002      	b.n	80051d8 <LoopCopyDataInit>

080051d2 <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 80051d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80051d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80051d6:	3304      	adds	r3, #4

080051d8 <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 80051d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80051da:	428c      	cmp	r4, r1



  bcc CopyDataInit
 80051dc:	d3f9      	bcc.n	80051d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80051de:	4a0b      	ldr	r2, [pc, #44]	; (800520c <LoopForever+0x12>)
  ldr r4, =_ebss
 80051e0:	4c0b      	ldr	r4, [pc, #44]	; (8005210 <LoopForever+0x16>)
  movs r3, #0
 80051e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80051e4:	e001      	b.n	80051ea <LoopFillZerobss>

080051e6 <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 80051e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80051e8:	3204      	adds	r2, #4

080051ea <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 80051ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80051ec:	d3fb      	bcc.n	80051e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80051ee:	f000 f813 	bl	8005218 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80051f2:	f004 fe73 	bl	8009edc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80051f6:	f7fe fcd5 	bl	8003ba4 <main>

080051fa <LoopForever>:

LoopForever:
    b LoopForever
 80051fa:	e7fe      	b.n	80051fa <LoopForever>
  ldr   r0, =_estack
 80051fc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8005200:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005204:	2000027c 	.word	0x2000027c
  ldr r2, =_sidata
 8005208:	0800f358 	.word	0x0800f358
  ldr r2, =_sbss
 800520c:	20000280 	.word	0x20000280
  ldr r4, =_ebss
 8005210:	20005588 	.word	0x20005588

08005214 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005214:	e7fe      	b.n	8005214 <ADC_IRQHandler>
	...

08005218 <SystemInit>:
 * @retval None
 */
void SystemInit(void) {
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8005218:	4a03      	ldr	r2, [pc, #12]	; (8005228 <SystemInit+0x10>)
 800521a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800521e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005222:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005226:	4770      	bx	lr
 8005228:	e000ed00 	.word	0xe000ed00

0800522c <HAL_MspInit>:
 */
__weak void HAL_MspInit(void) {
	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_MspInit could be implemented in the user file
	 */
}
 800522c:	4770      	bx	lr
	...

08005230 <HAL_Init>:
HAL_StatusTypeDef HAL_Init(void) {
 8005230:	b508      	push	{r3, lr}
  __HAL_FLASH_ART_ENABLE();
 8005232:	4b09      	ldr	r3, [pc, #36]	; (8005258 <HAL_Init+0x28>)
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800523a:	601a      	str	r2, [r3, #0]
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005242:	601a      	str	r2, [r3, #0]
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005244:	2003      	movs	r0, #3
 8005246:	f000 f80f 	bl	8005268 <HAL_NVIC_SetPriorityGrouping>
	HAL_InitTick(TICK_INT_PRIORITY);
 800524a:	200f      	movs	r0, #15
 800524c:	f7ff fed6 	bl	8004ffc <HAL_InitTick>
	HAL_MspInit();
 8005250:	f7ff ffec 	bl	800522c <HAL_MspInit>
}
 8005254:	2000      	movs	r0, #0
 8005256:	bd08      	pop	{r3, pc}
 8005258:	40023c00 	.word	0x40023c00

0800525c <HAL_GetTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
 *       implementations in user file.
 * @retval tick value
 */
__weak uint32_t HAL_GetTick(void) {
	return uwTick;
 800525c:	4b01      	ldr	r3, [pc, #4]	; (8005264 <HAL_GetTick+0x8>)
 800525e:	6818      	ldr	r0, [r3, #0]
}
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	20005434 	.word	0x20005434

08005268 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005268:	4906      	ldr	r1, [pc, #24]	; (8005284 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 800526a:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800526c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005270:	041b      	lsls	r3, r3, #16
 8005272:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005274:	0200      	lsls	r0, r0, #8
 8005276:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800527a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800527c:	4a02      	ldr	r2, [pc, #8]	; (8005288 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800527e:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8005280:	60ca      	str	r2, [r1, #12]
	/* Check the parameters */
	assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

	/* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
	NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005282:	4770      	bx	lr
 8005284:	e000ed00 	.word	0xe000ed00
 8005288:	05fa0000 	.word	0x05fa0000

0800528c <HAL_NVIC_SetPriority>:
 *         This parameter can be a value between 0 and 15
 *         A lower priority value indicates a higher priority.          
 * @retval None
 */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority,
		uint32_t SubPriority) {
 800528c:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800528e:	4b17      	ldr	r3, [pc, #92]	; (80052ec <HAL_NVIC_SetPriority+0x60>)
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005296:	f1c3 0c07 	rsb	ip, r3, #7
 800529a:	f1bc 0f04 	cmp.w	ip, #4
 800529e:	bf28      	it	cs
 80052a0:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80052a4:	f103 0e04 	add.w	lr, r3, #4
 80052a8:	f1be 0f06 	cmp.w	lr, #6
 80052ac:	d914      	bls.n	80052d8 <HAL_NVIC_SetPriority+0x4c>
 80052ae:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052b0:	f04f 3eff 	mov.w	lr, #4294967295
 80052b4:	fa0e fc0c 	lsl.w	ip, lr, ip
 80052b8:	ea21 010c 	bic.w	r1, r1, ip
 80052bc:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80052be:	fa0e fe03 	lsl.w	lr, lr, r3
 80052c2:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052c6:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 80052c8:	2800      	cmp	r0, #0
 80052ca:	db07      	blt.n	80052dc <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052cc:	0112      	lsls	r2, r2, #4
 80052ce:	b2d2      	uxtb	r2, r2
 80052d0:	4b07      	ldr	r3, [pc, #28]	; (80052f0 <HAL_NVIC_SetPriority+0x64>)
 80052d2:	541a      	strb	r2, [r3, r0]

	prioritygroup = NVIC_GetPriorityGrouping();

	NVIC_SetPriority(IRQn,
			NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80052d4:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80052d8:	2300      	movs	r3, #0
 80052da:	e7e9      	b.n	80052b0 <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052dc:	f000 000f 	and.w	r0, r0, #15
 80052e0:	0112      	lsls	r2, r2, #4
 80052e2:	b2d2      	uxtb	r2, r2
 80052e4:	4b03      	ldr	r3, [pc, #12]	; (80052f4 <HAL_NVIC_SetPriority+0x68>)
 80052e6:	541a      	strb	r2, [r3, r0]
 80052e8:	e7f4      	b.n	80052d4 <HAL_NVIC_SetPriority+0x48>
 80052ea:	bf00      	nop
 80052ec:	e000ed00 	.word	0xe000ed00
 80052f0:	e000e400 	.word	0xe000e400
 80052f4:	e000ed14 	.word	0xe000ed14

080052f8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80052f8:	2800      	cmp	r0, #0
 80052fa:	db07      	blt.n	800530c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80052fc:	f000 021f 	and.w	r2, r0, #31
 8005300:	0940      	lsrs	r0, r0, #5
 8005302:	2301      	movs	r3, #1
 8005304:	4093      	lsls	r3, r2
 8005306:	4a02      	ldr	r2, [pc, #8]	; (8005310 <HAL_NVIC_EnableIRQ+0x18>)
 8005308:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
	/* Check the parameters */
	assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

	/* Enable interrupt */
	NVIC_EnableIRQ(IRQn);
}
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	e000e100 	.word	0xe000e100

08005314 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005314:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005316:	6805      	ldr	r5, [r0, #0]
 8005318:	682c      	ldr	r4, [r5, #0]
 800531a:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 800531e:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005320:	6804      	ldr	r4, [r0, #0]
 8005322:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005324:	6883      	ldr	r3, [r0, #8]
 8005326:	2b40      	cmp	r3, #64	; 0x40
 8005328:	d005      	beq.n	8005336 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 800532a:	6803      	ldr	r3, [r0, #0]
 800532c:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 800532e:	6803      	ldr	r3, [r0, #0]
 8005330:	60da      	str	r2, [r3, #12]
  }
}
 8005332:	bc30      	pop	{r4, r5}
 8005334:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8005336:	6803      	ldr	r3, [r0, #0]
 8005338:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 800533a:	6803      	ldr	r3, [r0, #0]
 800533c:	60d9      	str	r1, [r3, #12]
 800533e:	e7f8      	b.n	8005332 <DMA_SetConfig+0x1e>

08005340 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005340:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005342:	6801      	ldr	r1, [r0, #0]
 8005344:	b2ca      	uxtb	r2, r1
 8005346:	3a10      	subs	r2, #16
 8005348:	4b0a      	ldr	r3, [pc, #40]	; (8005374 <DMA_CalcBaseAndBitshift+0x34>)
 800534a:	fba3 4302 	umull	r4, r3, r3, r2
 800534e:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005350:	4c09      	ldr	r4, [pc, #36]	; (8005378 <DMA_CalcBaseAndBitshift+0x38>)
 8005352:	5ce3      	ldrb	r3, [r4, r3]
 8005354:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005356:	2a5f      	cmp	r2, #95	; 0x5f
 8005358:	d907      	bls.n	800536a <DMA_CalcBaseAndBitshift+0x2a>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800535a:	4b08      	ldr	r3, [pc, #32]	; (800537c <DMA_CalcBaseAndBitshift+0x3c>)
 800535c:	400b      	ands	r3, r1
 800535e:	3304      	adds	r3, #4
 8005360:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8005362:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8005364:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005368:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800536a:	4b04      	ldr	r3, [pc, #16]	; (800537c <DMA_CalcBaseAndBitshift+0x3c>)
 800536c:	400b      	ands	r3, r1
 800536e:	6583      	str	r3, [r0, #88]	; 0x58
 8005370:	e7f7      	b.n	8005362 <DMA_CalcBaseAndBitshift+0x22>
 8005372:	bf00      	nop
 8005374:	aaaaaaab 	.word	0xaaaaaaab
 8005378:	0800ec04 	.word	0x0800ec04
 800537c:	fffffc00 	.word	0xfffffc00

08005380 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005380:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005382:	6982      	ldr	r2, [r0, #24]
 8005384:	b992      	cbnz	r2, 80053ac <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8005386:	2b01      	cmp	r3, #1
 8005388:	d00a      	beq.n	80053a0 <DMA_CheckFifoParam+0x20>
 800538a:	2b02      	cmp	r3, #2
 800538c:	d002      	beq.n	8005394 <DMA_CheckFifoParam+0x14>
 800538e:	b10b      	cbz	r3, 8005394 <DMA_CheckFifoParam+0x14>
 8005390:	2000      	movs	r0, #0
 8005392:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005394:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005396:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800539a:	d128      	bne.n	80053ee <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 800539c:	2000      	movs	r0, #0
 800539e:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80053a0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80053a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80053a6:	d024      	beq.n	80053f2 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 80053a8:	2000      	movs	r0, #0
 80053aa:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80053ac:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80053b0:	d009      	beq.n	80053c6 <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d925      	bls.n	8005402 <DMA_CheckFifoParam+0x82>
 80053b6:	2b03      	cmp	r3, #3
 80053b8:	d125      	bne.n	8005406 <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053ba:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80053bc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80053c0:	d123      	bne.n	800540a <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 80053c2:	2000      	movs	r0, #0
 80053c4:	4770      	bx	lr
    switch (tmp)
 80053c6:	2b03      	cmp	r3, #3
 80053c8:	d803      	bhi.n	80053d2 <DMA_CheckFifoParam+0x52>
 80053ca:	e8df f003 	tbb	[pc, r3]
 80053ce:	0414      	.short	0x0414
 80053d0:	0a14      	.short	0x0a14
 80053d2:	2000      	movs	r0, #0
 80053d4:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053d6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80053d8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80053dc:	d10d      	bne.n	80053fa <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 80053de:	2000      	movs	r0, #0
 80053e0:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80053e2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80053e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80053e8:	d009      	beq.n	80053fe <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 80053ea:	2000      	movs	r0, #0
 80053ec:	4770      	bx	lr
        status = HAL_ERROR;
 80053ee:	2001      	movs	r0, #1
 80053f0:	4770      	bx	lr
        status = HAL_ERROR;
 80053f2:	2001      	movs	r0, #1
 80053f4:	4770      	bx	lr
      status = HAL_ERROR;
 80053f6:	2001      	movs	r0, #1
 80053f8:	4770      	bx	lr
        status = HAL_ERROR;
 80053fa:	2001      	movs	r0, #1
 80053fc:	4770      	bx	lr
        status = HAL_ERROR;
 80053fe:	2001      	movs	r0, #1
 8005400:	4770      	bx	lr
      status = HAL_ERROR;
 8005402:	2001      	movs	r0, #1
 8005404:	4770      	bx	lr
    switch (tmp)
 8005406:	2000      	movs	r0, #0
 8005408:	4770      	bx	lr
      {
        status = HAL_ERROR;
 800540a:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 800540c:	4770      	bx	lr
	...

08005410 <HAL_DMA_Init>:
{
 8005410:	b570      	push	{r4, r5, r6, lr}
 8005412:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005414:	f7ff ff22 	bl	800525c <HAL_GetTick>
  if(hdma == NULL)
 8005418:	2c00      	cmp	r4, #0
 800541a:	d05b      	beq.n	80054d4 <HAL_DMA_Init+0xc4>
 800541c:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 800541e:	2302      	movs	r3, #2
 8005420:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8005424:	2300      	movs	r3, #0
 8005426:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 800542a:	6822      	ldr	r2, [r4, #0]
 800542c:	6813      	ldr	r3, [r2, #0]
 800542e:	f023 0301 	bic.w	r3, r3, #1
 8005432:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005434:	6823      	ldr	r3, [r4, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	f012 0f01 	tst.w	r2, #1
 800543c:	d00a      	beq.n	8005454 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800543e:	f7ff ff0d 	bl	800525c <HAL_GetTick>
 8005442:	1b43      	subs	r3, r0, r5
 8005444:	2b05      	cmp	r3, #5
 8005446:	d9f5      	bls.n	8005434 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005448:	2320      	movs	r3, #32
 800544a:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800544c:	2003      	movs	r0, #3
 800544e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8005452:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8005454:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005456:	4920      	ldr	r1, [pc, #128]	; (80054d8 <HAL_DMA_Init+0xc8>)
 8005458:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800545a:	6862      	ldr	r2, [r4, #4]
 800545c:	68a0      	ldr	r0, [r4, #8]
 800545e:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005460:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005462:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005464:	6920      	ldr	r0, [r4, #16]
 8005466:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005468:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800546a:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800546c:	69a0      	ldr	r0, [r4, #24]
 800546e:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8005470:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005472:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8005474:	6a20      	ldr	r0, [r4, #32]
 8005476:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005478:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800547a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800547c:	2904      	cmp	r1, #4
 800547e:	d01e      	beq.n	80054be <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8005480:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8005482:	6826      	ldr	r6, [r4, #0]
 8005484:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005486:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 800548a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800548c:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800548e:	2b04      	cmp	r3, #4
 8005490:	d107      	bne.n	80054a2 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8005492:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005494:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005496:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005498:	b11b      	cbz	r3, 80054a2 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800549a:	4620      	mov	r0, r4
 800549c:	f7ff ff70 	bl	8005380 <DMA_CheckFifoParam>
 80054a0:	b990      	cbnz	r0, 80054c8 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 80054a2:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80054a4:	4620      	mov	r0, r4
 80054a6:	f7ff ff4b 	bl	8005340 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80054aa:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80054ac:	233f      	movs	r3, #63	; 0x3f
 80054ae:	4093      	lsls	r3, r2
 80054b0:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054b2:	2000      	movs	r0, #0
 80054b4:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80054b6:	2301      	movs	r3, #1
 80054b8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80054bc:	e7c9      	b.n	8005452 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80054be:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80054c0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80054c2:	4301      	orrs	r1, r0
 80054c4:	430a      	orrs	r2, r1
 80054c6:	e7db      	b.n	8005480 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80054c8:	2340      	movs	r3, #64	; 0x40
 80054ca:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80054cc:	2001      	movs	r0, #1
 80054ce:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 80054d2:	e7be      	b.n	8005452 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 80054d4:	2001      	movs	r0, #1
 80054d6:	e7bc      	b.n	8005452 <HAL_DMA_Init+0x42>
 80054d8:	e010803f 	.word	0xe010803f

080054dc <HAL_DMA_DeInit>:
  if(hdma == NULL)
 80054dc:	2800      	cmp	r0, #0
 80054de:	d02d      	beq.n	800553c <HAL_DMA_DeInit+0x60>
{
 80054e0:	b538      	push	{r3, r4, r5, lr}
 80054e2:	4605      	mov	r5, r0
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80054e4:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
 80054e8:	b2c0      	uxtb	r0, r0
 80054ea:	2802      	cmp	r0, #2
 80054ec:	d025      	beq.n	800553a <HAL_DMA_DeInit+0x5e>
  __HAL_DMA_DISABLE(hdma);
 80054ee:	682a      	ldr	r2, [r5, #0]
 80054f0:	6813      	ldr	r3, [r2, #0]
 80054f2:	f023 0301 	bic.w	r3, r3, #1
 80054f6:	6013      	str	r3, [r2, #0]
  hdma->Instance->CR   = 0U;
 80054f8:	682b      	ldr	r3, [r5, #0]
 80054fa:	2400      	movs	r4, #0
 80054fc:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 80054fe:	682b      	ldr	r3, [r5, #0]
 8005500:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8005502:	682b      	ldr	r3, [r5, #0]
 8005504:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8005506:	682b      	ldr	r3, [r5, #0]
 8005508:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 800550a:	682b      	ldr	r3, [r5, #0]
 800550c:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800550e:	682b      	ldr	r3, [r5, #0]
 8005510:	2221      	movs	r2, #33	; 0x21
 8005512:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005514:	4628      	mov	r0, r5
 8005516:	f7ff ff13 	bl	8005340 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800551a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800551c:	233f      	movs	r3, #63	; 0x3f
 800551e:	4093      	lsls	r3, r2
 8005520:	6083      	str	r3, [r0, #8]
  hdma->XferCpltCallback = NULL;
 8005522:	63ec      	str	r4, [r5, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8005524:	642c      	str	r4, [r5, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8005526:	646c      	str	r4, [r5, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005528:	64ac      	str	r4, [r5, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800552a:	64ec      	str	r4, [r5, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 800552c:	652c      	str	r4, [r5, #80]	; 0x50
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800552e:	656c      	str	r4, [r5, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_RESET;
 8005530:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8005534:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  return HAL_OK;
 8005538:	4620      	mov	r0, r4
}
 800553a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800553c:	2001      	movs	r0, #1
}
 800553e:	4770      	bx	lr

08005540 <HAL_DMA_Start_IT>:
{
 8005540:	b538      	push	{r3, r4, r5, lr}
 8005542:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005544:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8005546:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 800554a:	2801      	cmp	r0, #1
 800554c:	d030      	beq.n	80055b0 <HAL_DMA_Start_IT+0x70>
 800554e:	2001      	movs	r0, #1
 8005550:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8005554:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 8005558:	b2c0      	uxtb	r0, r0
 800555a:	2801      	cmp	r0, #1
 800555c:	d004      	beq.n	8005568 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 800555e:	2300      	movs	r3, #0
 8005560:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_BUSY;
 8005564:	2002      	movs	r0, #2
}
 8005566:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8005568:	2002      	movs	r0, #2
 800556a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800556e:	2000      	movs	r0, #0
 8005570:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005572:	4620      	mov	r0, r4
 8005574:	f7ff fece 	bl	8005314 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005578:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800557a:	233f      	movs	r3, #63	; 0x3f
 800557c:	4093      	lsls	r3, r2
 800557e:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005580:	6822      	ldr	r2, [r4, #0]
 8005582:	6813      	ldr	r3, [r2, #0]
 8005584:	f043 0316 	orr.w	r3, r3, #22
 8005588:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800558a:	6822      	ldr	r2, [r4, #0]
 800558c:	6953      	ldr	r3, [r2, #20]
 800558e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005592:	6153      	str	r3, [r2, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8005594:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005596:	b123      	cbz	r3, 80055a2 <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CR  |= DMA_IT_HT;
 8005598:	6822      	ldr	r2, [r4, #0]
 800559a:	6813      	ldr	r3, [r2, #0]
 800559c:	f043 0308 	orr.w	r3, r3, #8
 80055a0:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80055a2:	6822      	ldr	r2, [r4, #0]
 80055a4:	6813      	ldr	r3, [r2, #0]
 80055a6:	f043 0301 	orr.w	r3, r3, #1
 80055aa:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055ac:	2000      	movs	r0, #0
 80055ae:	e7da      	b.n	8005566 <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 80055b0:	2002      	movs	r0, #2
 80055b2:	e7d8      	b.n	8005566 <HAL_DMA_Start_IT+0x26>

080055b4 <HAL_DMA_Abort>:
{
 80055b4:	b570      	push	{r4, r5, r6, lr}
 80055b6:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80055b8:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 80055ba:	f7ff fe4f 	bl	800525c <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80055be:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d006      	beq.n	80055d6 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055c8:	2380      	movs	r3, #128	; 0x80
 80055ca:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80055cc:	2300      	movs	r3, #0
 80055ce:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 80055d2:	2001      	movs	r0, #1
}
 80055d4:	bd70      	pop	{r4, r5, r6, pc}
 80055d6:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80055d8:	6822      	ldr	r2, [r4, #0]
 80055da:	6813      	ldr	r3, [r2, #0]
 80055dc:	f023 0316 	bic.w	r3, r3, #22
 80055e0:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80055e2:	6822      	ldr	r2, [r4, #0]
 80055e4:	6953      	ldr	r3, [r2, #20]
 80055e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055ea:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80055ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80055ee:	b1e3      	cbz	r3, 800562a <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80055f0:	6822      	ldr	r2, [r4, #0]
 80055f2:	6813      	ldr	r3, [r2, #0]
 80055f4:	f023 0308 	bic.w	r3, r3, #8
 80055f8:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80055fa:	6822      	ldr	r2, [r4, #0]
 80055fc:	6813      	ldr	r3, [r2, #0]
 80055fe:	f023 0301 	bic.w	r3, r3, #1
 8005602:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005604:	6823      	ldr	r3, [r4, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f013 0f01 	tst.w	r3, #1
 800560c:	d011      	beq.n	8005632 <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800560e:	f7ff fe25 	bl	800525c <HAL_GetTick>
 8005612:	1b43      	subs	r3, r0, r5
 8005614:	2b05      	cmp	r3, #5
 8005616:	d9f5      	bls.n	8005604 <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005618:	2320      	movs	r3, #32
 800561a:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800561c:	2003      	movs	r0, #3
 800561e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8005622:	2300      	movs	r3, #0
 8005624:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8005628:	e7d4      	b.n	80055d4 <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800562a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800562c:	2b00      	cmp	r3, #0
 800562e:	d1df      	bne.n	80055f0 <HAL_DMA_Abort+0x3c>
 8005630:	e7e3      	b.n	80055fa <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005632:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005634:	233f      	movs	r3, #63	; 0x3f
 8005636:	4093      	lsls	r3, r2
 8005638:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 800563a:	2301      	movs	r3, #1
 800563c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8005640:	2000      	movs	r0, #0
 8005642:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return HAL_OK;
 8005646:	e7c5      	b.n	80055d4 <HAL_DMA_Abort+0x20>

08005648 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005648:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800564c:	b2db      	uxtb	r3, r3
 800564e:	2b02      	cmp	r3, #2
 8005650:	d003      	beq.n	800565a <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005652:	2380      	movs	r3, #128	; 0x80
 8005654:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8005656:	2001      	movs	r0, #1
 8005658:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 800565a:	2305      	movs	r3, #5
 800565c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8005660:	6802      	ldr	r2, [r0, #0]
 8005662:	6813      	ldr	r3, [r2, #0]
 8005664:	f023 0301 	bic.w	r3, r3, #1
 8005668:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800566a:	2000      	movs	r0, #0
}
 800566c:	4770      	bx	lr
	...

08005670 <HAL_DMA_IRQHandler>:
{
 8005670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005672:	b083      	sub	sp, #12
 8005674:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
 8005676:	2300      	movs	r3, #0
 8005678:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;
 800567a:	4b72      	ldr	r3, [pc, #456]	; (8005844 <HAL_DMA_IRQHandler+0x1d4>)
 800567c:	681d      	ldr	r5, [r3, #0]
 800567e:	4b72      	ldr	r3, [pc, #456]	; (8005848 <HAL_DMA_IRQHandler+0x1d8>)
 8005680:	fba3 3505 	umull	r3, r5, r3, r5
 8005684:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005686:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8005688:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800568a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800568c:	2308      	movs	r3, #8
 800568e:	4093      	lsls	r3, r2
 8005690:	4233      	tst	r3, r6
 8005692:	d010      	beq.n	80056b6 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005694:	6803      	ldr	r3, [r0, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	f012 0f04 	tst.w	r2, #4
 800569c:	d00b      	beq.n	80056b6 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	f022 0204 	bic.w	r2, r2, #4
 80056a4:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80056a6:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80056a8:	2308      	movs	r3, #8
 80056aa:	4093      	lsls	r3, r2
 80056ac:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80056ae:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80056b0:	f043 0301 	orr.w	r3, r3, #1
 80056b4:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80056b6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80056b8:	2301      	movs	r3, #1
 80056ba:	4093      	lsls	r3, r2
 80056bc:	4233      	tst	r3, r6
 80056be:	d009      	beq.n	80056d4 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80056c0:	6822      	ldr	r2, [r4, #0]
 80056c2:	6952      	ldr	r2, [r2, #20]
 80056c4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80056c8:	d004      	beq.n	80056d4 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80056ca:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80056cc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80056ce:	f043 0302 	orr.w	r3, r3, #2
 80056d2:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80056d4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80056d6:	2304      	movs	r3, #4
 80056d8:	4093      	lsls	r3, r2
 80056da:	4233      	tst	r3, r6
 80056dc:	d009      	beq.n	80056f2 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80056de:	6822      	ldr	r2, [r4, #0]
 80056e0:	6812      	ldr	r2, [r2, #0]
 80056e2:	f012 0f02 	tst.w	r2, #2
 80056e6:	d004      	beq.n	80056f2 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80056e8:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80056ea:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80056ec:	f043 0304 	orr.w	r3, r3, #4
 80056f0:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80056f2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80056f4:	2310      	movs	r3, #16
 80056f6:	4093      	lsls	r3, r2
 80056f8:	4233      	tst	r3, r6
 80056fa:	d024      	beq.n	8005746 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80056fc:	6822      	ldr	r2, [r4, #0]
 80056fe:	6812      	ldr	r2, [r2, #0]
 8005700:	f012 0f08 	tst.w	r2, #8
 8005704:	d01f      	beq.n	8005746 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005706:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005708:	6823      	ldr	r3, [r4, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8005710:	d00d      	beq.n	800572e <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8005718:	d104      	bne.n	8005724 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 800571a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800571c:	b19b      	cbz	r3, 8005746 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 800571e:	4620      	mov	r0, r4
 8005720:	4798      	blx	r3
 8005722:	e010      	b.n	8005746 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005724:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005726:	b173      	cbz	r3, 8005746 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8005728:	4620      	mov	r0, r4
 800572a:	4798      	blx	r3
 800572c:	e00b      	b.n	8005746 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005734:	d103      	bne.n	800573e <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	f022 0208 	bic.w	r2, r2, #8
 800573c:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800573e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005740:	b10b      	cbz	r3, 8005746 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8005742:	4620      	mov	r0, r4
 8005744:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005746:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005748:	2320      	movs	r3, #32
 800574a:	4093      	lsls	r3, r2
 800574c:	4233      	tst	r3, r6
 800574e:	d055      	beq.n	80057fc <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005750:	6822      	ldr	r2, [r4, #0]
 8005752:	6812      	ldr	r2, [r2, #0]
 8005754:	f012 0f10 	tst.w	r2, #16
 8005758:	d050      	beq.n	80057fc <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800575a:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800575c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b05      	cmp	r3, #5
 8005764:	d00e      	beq.n	8005784 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005766:	6823      	ldr	r3, [r4, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800576e:	d033      	beq.n	80057d8 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8005776:	d12a      	bne.n	80057ce <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8005778:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800577a:	2b00      	cmp	r3, #0
 800577c:	d03e      	beq.n	80057fc <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 800577e:	4620      	mov	r0, r4
 8005780:	4798      	blx	r3
 8005782:	e03b      	b.n	80057fc <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005784:	6822      	ldr	r2, [r4, #0]
 8005786:	6813      	ldr	r3, [r2, #0]
 8005788:	f023 0316 	bic.w	r3, r3, #22
 800578c:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800578e:	6822      	ldr	r2, [r4, #0]
 8005790:	6953      	ldr	r3, [r2, #20]
 8005792:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005796:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005798:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800579a:	b1a3      	cbz	r3, 80057c6 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800579c:	6822      	ldr	r2, [r4, #0]
 800579e:	6813      	ldr	r3, [r2, #0]
 80057a0:	f023 0308 	bic.w	r3, r3, #8
 80057a4:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057a6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80057a8:	233f      	movs	r3, #63	; 0x3f
 80057aa:	4093      	lsls	r3, r2
 80057ac:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 80057ae:	2301      	movs	r3, #1
 80057b0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80057b4:	2300      	movs	r3, #0
 80057b6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 80057ba:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d03f      	beq.n	8005840 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 80057c0:	4620      	mov	r0, r4
 80057c2:	4798      	blx	r3
        return;
 80057c4:	e03c      	b.n	8005840 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80057c6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d1e7      	bne.n	800579c <HAL_DMA_IRQHandler+0x12c>
 80057cc:	e7eb      	b.n	80057a6 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 80057ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80057d0:	b1a3      	cbz	r3, 80057fc <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 80057d2:	4620      	mov	r0, r4
 80057d4:	4798      	blx	r3
 80057d6:	e011      	b.n	80057fc <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	f412 7f80 	tst.w	r2, #256	; 0x100
 80057de:	d109      	bne.n	80057f4 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	f022 0210 	bic.w	r2, r2, #16
 80057e6:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80057e8:	2301      	movs	r3, #1
 80057ea:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 80057ee:	2300      	movs	r3, #0
 80057f0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 80057f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80057f6:	b10b      	cbz	r3, 80057fc <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 80057f8:	4620      	mov	r0, r4
 80057fa:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80057fc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80057fe:	b1fb      	cbz	r3, 8005840 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005800:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005802:	f013 0f01 	tst.w	r3, #1
 8005806:	d017      	beq.n	8005838 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8005808:	2305      	movs	r3, #5
 800580a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800580e:	6822      	ldr	r2, [r4, #0]
 8005810:	6813      	ldr	r3, [r2, #0]
 8005812:	f023 0301 	bic.w	r3, r3, #1
 8005816:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8005818:	9b01      	ldr	r3, [sp, #4]
 800581a:	3301      	adds	r3, #1
 800581c:	9301      	str	r3, [sp, #4]
 800581e:	42ab      	cmp	r3, r5
 8005820:	d804      	bhi.n	800582c <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005822:	6823      	ldr	r3, [r4, #0]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f013 0f01 	tst.w	r3, #1
 800582a:	d1f5      	bne.n	8005818 <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 800582c:	2301      	movs	r3, #1
 800582e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8005832:	2300      	movs	r3, #0
 8005834:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8005838:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800583a:	b10b      	cbz	r3, 8005840 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 800583c:	4620      	mov	r0, r4
 800583e:	4798      	blx	r3
}
 8005840:	b003      	add	sp, #12
 8005842:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005844:	200000a8 	.word	0x200000a8
 8005848:	1b4e81b5 	.word	0x1b4e81b5

0800584c <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 800584c:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 800584e:	4770      	bx	lr

08005850 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8005850:	b430      	push	{r4, r5}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8005852:	6805      	ldr	r5, [r0, #0]
 8005854:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 8005856:	f004 4c40 	and.w	ip, r4, #3221225472	; 0xc0000000
 800585a:	9c02      	ldr	r4, [sp, #8]
 800585c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8005860:	ea4c 0404 	orr.w	r4, ip, r4
 8005864:	646c      	str	r4, [r5, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005866:	6803      	ldr	r3, [r0, #0]
 8005868:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800586a:	6843      	ldr	r3, [r0, #4]
 800586c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005870:	d003      	beq.n	800587a <DMA2D_SetConfig+0x2a>
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005872:	6803      	ldr	r3, [r0, #0]
 8005874:	60d9      	str	r1, [r3, #12]
  }
}
 8005876:	bc30      	pop	{r4, r5}
 8005878:	4770      	bx	lr
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800587a:	f001 4c7f 	and.w	ip, r1, #4278190080	; 0xff000000
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800587e:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005882:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005886:	b2ca      	uxtb	r2, r1
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005888:	6884      	ldr	r4, [r0, #8]
 800588a:	b19c      	cbz	r4, 80058b4 <DMA2D_SetConfig+0x64>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800588c:	2c01      	cmp	r4, #1
 800588e:	d00f      	beq.n	80058b0 <DMA2D_SetConfig+0x60>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005890:	2c02      	cmp	r4, #2
 8005892:	d012      	beq.n	80058ba <DMA2D_SetConfig+0x6a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005894:	2c03      	cmp	r4, #3
 8005896:	d018      	beq.n	80058ca <DMA2D_SetConfig+0x7a>
      tmp1 = (tmp1 >> 28U);
 8005898:	ea4f 7c1c 	mov.w	ip, ip, lsr #28
      tmp2 = (tmp2 >> 20U);
 800589c:	0d1b      	lsrs	r3, r3, #20
      tmp3 = (tmp3 >> 12U);
 800589e:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80058a0:	021b      	lsls	r3, r3, #8
 80058a2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 80058a6:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
 80058aa:	ea43 1112 	orr.w	r1, r3, r2, lsr #4
 80058ae:	e001      	b.n	80058b4 <DMA2D_SetConfig+0x64>
      tmp = (tmp3 | tmp2 | tmp4);
 80058b0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80058b4:	6803      	ldr	r3, [r0, #0]
 80058b6:	6399      	str	r1, [r3, #56]	; 0x38
 80058b8:	e7dd      	b.n	8005876 <DMA2D_SetConfig+0x26>
      tmp2 = (tmp2 >> 19U);
 80058ba:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 10U);
 80058bc:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80058be:	02db      	lsls	r3, r3, #11
 80058c0:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 80058c4:	ea43 01d2 	orr.w	r1, r3, r2, lsr #3
 80058c8:	e7f4      	b.n	80058b4 <DMA2D_SetConfig+0x64>
      tmp1 = (tmp1 >> 31U);
 80058ca:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
      tmp2 = (tmp2 >> 19U);
 80058ce:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 80058d0:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80058d2:	029b      	lsls	r3, r3, #10
 80058d4:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 80058d8:	ea43 33cc 	orr.w	r3, r3, ip, lsl #15
 80058dc:	ea43 01d2 	orr.w	r1, r3, r2, lsr #3
 80058e0:	e7e8      	b.n	80058b4 <DMA2D_SetConfig+0x64>

080058e2 <HAL_DMA2D_MspInit>:
}
 80058e2:	4770      	bx	lr

080058e4 <HAL_DMA2D_Init>:
  if (hdma2d == NULL)
 80058e4:	2800      	cmp	r0, #0
 80058e6:	d032      	beq.n	800594e <HAL_DMA2D_Init+0x6a>
{
 80058e8:	b510      	push	{r4, lr}
 80058ea:	4604      	mov	r4, r0
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80058ec:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80058f0:	b343      	cbz	r3, 8005944 <HAL_DMA2D_Init+0x60>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80058f2:	2302      	movs	r3, #2
 80058f4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80058f8:	6822      	ldr	r2, [r4, #0]
 80058fa:	6813      	ldr	r3, [r2, #0]
 80058fc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005900:	6861      	ldr	r1, [r4, #4]
 8005902:	430b      	orrs	r3, r1
 8005904:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005906:	6822      	ldr	r2, [r4, #0]
 8005908:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800590a:	f023 0307 	bic.w	r3, r3, #7
 800590e:	68a1      	ldr	r1, [r4, #8]
 8005910:	430b      	orrs	r3, r1
 8005912:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005914:	6822      	ldr	r2, [r4, #0]
 8005916:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8005918:	4b0e      	ldr	r3, [pc, #56]	; (8005954 <HAL_DMA2D_Init+0x70>)
 800591a:	400b      	ands	r3, r1
 800591c:	68e1      	ldr	r1, [r4, #12]
 800591e:	430b      	orrs	r3, r1
 8005920:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8005922:	6821      	ldr	r1, [r4, #0]
 8005924:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8005926:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800592a:	6920      	ldr	r0, [r4, #16]
 800592c:	6962      	ldr	r2, [r4, #20]
 800592e:	0552      	lsls	r2, r2, #21
 8005930:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
 8005934:	4313      	orrs	r3, r2
 8005936:	634b      	str	r3, [r1, #52]	; 0x34
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005938:	2000      	movs	r0, #0
 800593a:	6560      	str	r0, [r4, #84]	; 0x54
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800593c:	2301      	movs	r3, #1
 800593e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8005942:	bd10      	pop	{r4, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8005944:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_DMA2D_MspInit(hdma2d);
 8005948:	f7ff ffcb 	bl	80058e2 <HAL_DMA2D_MspInit>
 800594c:	e7d1      	b.n	80058f2 <HAL_DMA2D_Init+0xe>
    return HAL_ERROR;
 800594e:	2001      	movs	r0, #1
}
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	ffffc000 	.word	0xffffc000

08005958 <HAL_DMA2D_Start>:
{
 8005958:	b510      	push	{r4, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	4604      	mov	r4, r0
  __HAL_LOCK(hdma2d);
 800595e:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 8005962:	2801      	cmp	r0, #1
 8005964:	d012      	beq.n	800598c <HAL_DMA2D_Start+0x34>
 8005966:	2001      	movs	r0, #1
 8005968:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800596c:	2002      	movs	r0, #2
 800596e:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005972:	9804      	ldr	r0, [sp, #16]
 8005974:	9000      	str	r0, [sp, #0]
 8005976:	4620      	mov	r0, r4
 8005978:	f7ff ff6a 	bl	8005850 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 800597c:	6822      	ldr	r2, [r4, #0]
 800597e:	6813      	ldr	r3, [r2, #0]
 8005980:	f043 0301 	orr.w	r3, r3, #1
 8005984:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8005986:	2000      	movs	r0, #0
}
 8005988:	b002      	add	sp, #8
 800598a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdma2d);
 800598c:	2002      	movs	r0, #2
 800598e:	e7fb      	b.n	8005988 <HAL_DMA2D_Start+0x30>

08005990 <HAL_DMA2D_PollForTransfer>:
{
 8005990:	b570      	push	{r4, r5, r6, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	4604      	mov	r4, r0
 8005996:	460d      	mov	r5, r1
  __IO uint32_t isrflags = 0x0U;
 8005998:	2300      	movs	r3, #0
 800599a:	9301      	str	r3, [sp, #4]
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800599c:	6803      	ldr	r3, [r0, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f013 0f01 	tst.w	r3, #1
 80059a4:	d111      	bne.n	80059ca <HAL_DMA2D_PollForTransfer+0x3a>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80059a6:	6822      	ldr	r2, [r4, #0]
 80059a8:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80059aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80059ac:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 80059ae:	f013 0f20 	tst.w	r3, #32
 80059b2:	d147      	bne.n	8005a44 <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80059b4:	6823      	ldr	r3, [r4, #0]
 80059b6:	2212      	movs	r2, #18
 80059b8:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80059ba:	2301      	movs	r3, #1
 80059bc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hdma2d);
 80059c0:	2000      	movs	r0, #0
 80059c2:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
}
 80059c6:	b002      	add	sp, #8
 80059c8:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 80059ca:	f7ff fc47 	bl	800525c <HAL_GetTick>
 80059ce:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80059d0:	6823      	ldr	r3, [r4, #0]
 80059d2:	685a      	ldr	r2, [r3, #4]
 80059d4:	f012 0f02 	tst.w	r2, #2
 80059d8:	d1e5      	bne.n	80059a6 <HAL_DMA2D_PollForTransfer+0x16>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80059da:	685a      	ldr	r2, [r3, #4]
 80059dc:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80059de:	9a01      	ldr	r2, [sp, #4]
 80059e0:	f012 0f21 	tst.w	r2, #33	; 0x21
 80059e4:	d114      	bne.n	8005a10 <HAL_DMA2D_PollForTransfer+0x80>
      if (Timeout != HAL_MAX_DELAY)
 80059e6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80059ea:	d0f1      	beq.n	80059d0 <HAL_DMA2D_PollForTransfer+0x40>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80059ec:	f7ff fc36 	bl	800525c <HAL_GetTick>
 80059f0:	1b80      	subs	r0, r0, r6
 80059f2:	42a8      	cmp	r0, r5
 80059f4:	d801      	bhi.n	80059fa <HAL_DMA2D_PollForTransfer+0x6a>
 80059f6:	2d00      	cmp	r5, #0
 80059f8:	d1ea      	bne.n	80059d0 <HAL_DMA2D_PollForTransfer+0x40>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80059fa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80059fc:	f043 0320 	orr.w	r3, r3, #32
 8005a00:	6563      	str	r3, [r4, #84]	; 0x54
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005a02:	2003      	movs	r0, #3
 8005a04:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
          __HAL_UNLOCK(hdma2d);
 8005a08:	2300      	movs	r3, #0
 8005a0a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
          return HAL_TIMEOUT;
 8005a0e:	e7da      	b.n	80059c6 <HAL_DMA2D_PollForTransfer+0x36>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005a10:	9a01      	ldr	r2, [sp, #4]
 8005a12:	f012 0f20 	tst.w	r2, #32
 8005a16:	d003      	beq.n	8005a20 <HAL_DMA2D_PollForTransfer+0x90>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005a18:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005a1a:	f042 0202 	orr.w	r2, r2, #2
 8005a1e:	6562      	str	r2, [r4, #84]	; 0x54
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005a20:	9a01      	ldr	r2, [sp, #4]
 8005a22:	f012 0f01 	tst.w	r2, #1
 8005a26:	d003      	beq.n	8005a30 <HAL_DMA2D_PollForTransfer+0xa0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005a28:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005a2a:	f042 0201 	orr.w	r2, r2, #1
 8005a2e:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005a30:	2221      	movs	r2, #33	; 0x21
 8005a32:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005a34:	2304      	movs	r3, #4
 8005a36:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hdma2d);
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        return HAL_ERROR;
 8005a40:	2001      	movs	r0, #1
 8005a42:	e7c0      	b.n	80059c6 <HAL_DMA2D_PollForTransfer+0x36>
    tickstart = HAL_GetTick();
 8005a44:	f7ff fc0a 	bl	800525c <HAL_GetTick>
 8005a48:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005a4a:	6823      	ldr	r3, [r4, #0]
 8005a4c:	685a      	ldr	r2, [r3, #4]
 8005a4e:	f012 0f10 	tst.w	r2, #16
 8005a52:	d1af      	bne.n	80059b4 <HAL_DMA2D_PollForTransfer+0x24>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005a54:	685a      	ldr	r2, [r3, #4]
 8005a56:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005a58:	9a01      	ldr	r2, [sp, #4]
 8005a5a:	f012 0f29 	tst.w	r2, #41	; 0x29
 8005a5e:	d114      	bne.n	8005a8a <HAL_DMA2D_PollForTransfer+0xfa>
      if (Timeout != HAL_MAX_DELAY)
 8005a60:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005a64:	d0f1      	beq.n	8005a4a <HAL_DMA2D_PollForTransfer+0xba>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005a66:	f7ff fbf9 	bl	800525c <HAL_GetTick>
 8005a6a:	1b80      	subs	r0, r0, r6
 8005a6c:	42a8      	cmp	r0, r5
 8005a6e:	d801      	bhi.n	8005a74 <HAL_DMA2D_PollForTransfer+0xe4>
 8005a70:	2d00      	cmp	r5, #0
 8005a72:	d1ea      	bne.n	8005a4a <HAL_DMA2D_PollForTransfer+0xba>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005a74:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005a76:	f043 0320 	orr.w	r3, r3, #32
 8005a7a:	6563      	str	r3, [r4, #84]	; 0x54
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005a7c:	2003      	movs	r0, #3
 8005a7e:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
          __HAL_UNLOCK(hdma2d);
 8005a82:	2300      	movs	r3, #0
 8005a84:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
          return HAL_TIMEOUT;
 8005a88:	e79d      	b.n	80059c6 <HAL_DMA2D_PollForTransfer+0x36>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005a8a:	9a01      	ldr	r2, [sp, #4]
 8005a8c:	f012 0f08 	tst.w	r2, #8
 8005a90:	d003      	beq.n	8005a9a <HAL_DMA2D_PollForTransfer+0x10a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005a92:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005a94:	f042 0204 	orr.w	r2, r2, #4
 8005a98:	6562      	str	r2, [r4, #84]	; 0x54
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005a9a:	9a01      	ldr	r2, [sp, #4]
 8005a9c:	f012 0f20 	tst.w	r2, #32
 8005aa0:	d003      	beq.n	8005aaa <HAL_DMA2D_PollForTransfer+0x11a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005aa2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005aa4:	f042 0202 	orr.w	r2, r2, #2
 8005aa8:	6562      	str	r2, [r4, #84]	; 0x54
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005aaa:	9a01      	ldr	r2, [sp, #4]
 8005aac:	f012 0f01 	tst.w	r2, #1
 8005ab0:	d003      	beq.n	8005aba <HAL_DMA2D_PollForTransfer+0x12a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005ab2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005ab4:	f042 0201 	orr.w	r2, r2, #1
 8005ab8:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005aba:	2229      	movs	r2, #41	; 0x29
 8005abc:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005abe:	2304      	movs	r3, #4
 8005ac0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hdma2d);
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        return HAL_ERROR;
 8005aca:	2001      	movs	r0, #1
 8005acc:	e77b      	b.n	80059c6 <HAL_DMA2D_PollForTransfer+0x36>
	...

08005ad0 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 8005ad0:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8005ad4:	2a01      	cmp	r2, #1
 8005ad6:	d067      	beq.n	8005ba8 <HAL_DMA2D_ConfigLayer+0xd8>
{
 8005ad8:	b430      	push	{r4, r5}
 8005ada:	4603      	mov	r3, r0
  __HAL_LOCK(hdma2d);
 8005adc:	2201      	movs	r2, #1
 8005ade:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005ae2:	2202      	movs	r2, #2
 8005ae4:	f880 2051 	strb.w	r2, [r0, #81]	; 0x51
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005ae8:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8005aec:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8005af0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005af2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8005af4:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 8005af8:	6b05      	ldr	r5, [r0, #48]	; 0x30
 8005afa:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8005afe:	6b40      	ldr	r0, [r0, #52]	; 0x34
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005b00:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005b04:	3c09      	subs	r4, #9
 8005b06:	2c01      	cmp	r4, #1
 8005b08:	d920      	bls.n	8005b4c <HAL_DMA2D_ConfigLayer+0x7c>
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005b0a:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8005b0e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8005b12:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8005b14:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005b18:	bb59      	cbnz	r1, 8005b72 <HAL_DMA2D_ConfigLayer+0xa2>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005b1a:	681c      	ldr	r4, [r3, #0]
 8005b1c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005b1e:	4823      	ldr	r0, [pc, #140]	; (8005bac <HAL_DMA2D_ConfigLayer+0xdc>)
 8005b20:	4028      	ands	r0, r5
 8005b22:	4310      	orrs	r0, r2
 8005b24:	6260      	str	r0, [r4, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005b26:	6818      	ldr	r0, [r3, #0]
 8005b28:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8005b2c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8005b30:	6a14      	ldr	r4, [r2, #32]
 8005b32:	6184      	str	r4, [r0, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005b34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b36:	3a09      	subs	r2, #9
 8005b38:	2a01      	cmp	r2, #1
 8005b3a:	d910      	bls.n	8005b5e <HAL_DMA2D_ConfigLayer+0x8e>
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hdma2d);
 8005b42:	2000      	movs	r0, #0
 8005b44:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
}
 8005b48:	bc30      	pop	{r4, r5}
 8005b4a:	4770      	bx	lr
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005b4c:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8005b50:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8005b54:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8005b56:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
 8005b5a:	4302      	orrs	r2, r0
 8005b5c:	e7dc      	b.n	8005b18 <HAL_DMA2D_ConfigLayer+0x48>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005b5e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8005b62:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8005b66:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005b68:	6819      	ldr	r1, [r3, #0]
 8005b6a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005b6e:	628a      	str	r2, [r1, #40]	; 0x28
 8005b70:	e7e4      	b.n	8005b3c <HAL_DMA2D_ConfigLayer+0x6c>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005b72:	681c      	ldr	r4, [r3, #0]
 8005b74:	69e5      	ldr	r5, [r4, #28]
 8005b76:	480d      	ldr	r0, [pc, #52]	; (8005bac <HAL_DMA2D_ConfigLayer+0xdc>)
 8005b78:	4028      	ands	r0, r5
 8005b7a:	4310      	orrs	r0, r2
 8005b7c:	61e0      	str	r0, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005b7e:	6818      	ldr	r0, [r3, #0]
 8005b80:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8005b84:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8005b88:	6a14      	ldr	r4, [r2, #32]
 8005b8a:	6104      	str	r4, [r0, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005b8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b8e:	3a09      	subs	r2, #9
 8005b90:	2a01      	cmp	r2, #1
 8005b92:	d8d3      	bhi.n	8005b3c <HAL_DMA2D_ConfigLayer+0x6c>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005b94:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8005b98:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8005b9c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005b9e:	6819      	ldr	r1, [r3, #0]
 8005ba0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005ba4:	620a      	str	r2, [r1, #32]
 8005ba6:	e7c9      	b.n	8005b3c <HAL_DMA2D_ConfigLayer+0x6c>
  __HAL_LOCK(hdma2d);
 8005ba8:	2002      	movs	r0, #2
}
 8005baa:	4770      	bx	lr
 8005bac:	00ccfff0 	.word	0x00ccfff0

08005bb0 <DSI_ConfigPacketHeader>:
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8005bb0:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8005bb4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8005bb8:	9b00      	ldr	r3, [sp, #0]
 8005bba:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005bbe:	66c2      	str	r2, [r0, #108]	; 0x6c
}
 8005bc0:	4770      	bx	lr

08005bc2 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8005bc2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bc6:	4605      	mov	r5, r0
 8005bc8:	4689      	mov	r9, r1
 8005bca:	4617      	mov	r7, r2
 8005bcc:	4698      	mov	r8, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8005bce:	f7ff fb45 	bl	800525c <HAL_GetTick>
 8005bd2:	4606      	mov	r6, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8005bd4:	682c      	ldr	r4, [r5, #0]
 8005bd6:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8005bd8:	f013 0f01 	tst.w	r3, #1
 8005bdc:	d107      	bne.n	8005bee <DSI_ShortWrite+0x2c>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8005bde:	f7ff fb3d 	bl	800525c <HAL_GetTick>
 8005be2:	1b80      	subs	r0, r0, r6
 8005be4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005be8:	d9f4      	bls.n	8005bd4 <DSI_ShortWrite+0x12>
    {
      return HAL_TIMEOUT;
 8005bea:	2003      	movs	r0, #3
 8005bec:	e008      	b.n	8005c00 <DSI_ShortWrite+0x3e>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8005bee:	ea47 1389 	orr.w	r3, r7, r9, lsl #6
 8005bf2:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
 8005bf6:	9a08      	ldr	r2, [sp, #32]
 8005bf8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005bfc:	66e3      	str	r3, [r4, #108]	; 0x6c

  return HAL_OK;
 8005bfe:	2000      	movs	r0, #0
}
 8005c00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005c04 <HAL_DSI_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 8005c04:	4770      	bx	lr
	...

08005c08 <HAL_DSI_Init>:
  if (hdsi == NULL)
 8005c08:	2800      	cmp	r0, #0
 8005c0a:	f000 80bd 	beq.w	8005d88 <HAL_DSI_Init+0x180>
{
 8005c0e:	b570      	push	{r4, r5, r6, lr}
 8005c10:	b082      	sub	sp, #8
 8005c12:	460d      	mov	r5, r1
 8005c14:	4604      	mov	r4, r0
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8005c16:	7c43      	ldrb	r3, [r0, #17]
 8005c18:	b31b      	cbz	r3, 8005c62 <HAL_DSI_Init+0x5a>
  hdsi->State = HAL_DSI_STATE_BUSY;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 8005c1e:	2300      	movs	r3, #0
 8005c20:	9300      	str	r3, [sp, #0]
 8005c22:	6822      	ldr	r2, [r4, #0]
 8005c24:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8005c28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c2c:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
 8005c30:	6823      	ldr	r3, [r4, #0]
 8005c32:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8005c36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c3a:	9300      	str	r3, [sp, #0]
 8005c3c:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 8005c3e:	f7ff fb0d 	bl	800525c <HAL_GetTick>
 8005c42:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8005c44:	6823      	ldr	r3, [r4, #0]
 8005c46:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8005c4a:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8005c4e:	d10b      	bne.n	8005c68 <HAL_DSI_Init+0x60>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8005c50:	f7ff fb04 	bl	800525c <HAL_GetTick>
 8005c54:	1b80      	subs	r0, r0, r6
 8005c56:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005c5a:	d9f3      	bls.n	8005c44 <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 8005c5c:	2003      	movs	r0, #3
}
 8005c5e:	b002      	add	sp, #8
 8005c60:	bd70      	pop	{r4, r5, r6, pc}
    HAL_DSI_MspInit(hdsi);
 8005c62:	f7ff ffcf 	bl	8005c04 <HAL_DSI_MspInit>
 8005c66:	e7d8      	b.n	8005c1a <HAL_DSI_Init+0x12>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8005c68:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8005c6c:	4a47      	ldr	r2, [pc, #284]	; (8005d8c <HAL_DSI_Init+0x184>)
 8005c6e:	400a      	ands	r2, r1
 8005c70:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8005c74:	6821      	ldr	r1, [r4, #0]
 8005c76:	f8d1 2430 	ldr.w	r2, [r1, #1072]	; 0x430
 8005c7a:	6828      	ldr	r0, [r5, #0]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8005c7c:	686b      	ldr	r3, [r5, #4]
 8005c7e:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8005c80:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8005c84:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8005c86:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	f8c1 3430 	str.w	r3, [r1, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 8005c90:	2300      	movs	r3, #0
 8005c92:	9301      	str	r3, [sp, #4]
 8005c94:	6822      	ldr	r2, [r4, #0]
 8005c96:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8005c9a:	f043 0301 	orr.w	r3, r3, #1
 8005c9e:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
 8005ca2:	6823      	ldr	r3, [r4, #0]
 8005ca4:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8005ca8:	f003 0301 	and.w	r3, r3, #1
 8005cac:	9301      	str	r3, [sp, #4]
 8005cae:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 8005cb0:	2001      	movs	r0, #1
 8005cb2:	f7fe fdd5 	bl	8004860 <HAL_Delay>
  tickstart = HAL_GetTick();
 8005cb6:	f7ff fad1 	bl	800525c <HAL_GetTick>
 8005cba:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8005cbc:	6823      	ldr	r3, [r4, #0]
 8005cbe:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8005cc2:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005cc6:	d107      	bne.n	8005cd8 <HAL_DSI_Init+0xd0>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8005cc8:	f7ff fac8 	bl	800525c <HAL_GetTick>
 8005ccc:	1b80      	subs	r0, r0, r6
 8005cce:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005cd2:	d9f3      	bls.n	8005cbc <HAL_DSI_Init+0xb4>
      return HAL_TIMEOUT;
 8005cd4:	2003      	movs	r0, #3
 8005cd6:	e7c2      	b.n	8005c5e <HAL_DSI_Init+0x56>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8005cd8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005cdc:	f042 0206 	orr.w	r2, r2, #6
 8005ce0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8005ce4:	6822      	ldr	r2, [r4, #0]
 8005ce6:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005cea:	f023 0303 	bic.w	r3, r3, #3
 8005cee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8005cf2:	6822      	ldr	r2, [r4, #0]
 8005cf4:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005cf8:	6861      	ldr	r1, [r4, #4]
 8005cfa:	430b      	orrs	r3, r1
 8005cfc:	f043 0301 	orr.w	r3, r3, #1
 8005d00:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8005d04:	6822      	ldr	r2, [r4, #0]
 8005d06:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 8005d0a:	f023 0303 	bic.w	r3, r3, #3
 8005d0e:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8005d12:	6822      	ldr	r2, [r4, #0]
 8005d14:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 8005d18:	68e1      	ldr	r1, [r4, #12]
 8005d1a:	430b      	orrs	r3, r1
 8005d1c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8005d20:	6822      	ldr	r2, [r4, #0]
 8005d22:	6893      	ldr	r3, [r2, #8]
 8005d24:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005d28:	6093      	str	r3, [r2, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8005d2a:	6822      	ldr	r2, [r4, #0]
 8005d2c:	6893      	ldr	r3, [r2, #8]
 8005d2e:	68a1      	ldr	r1, [r4, #8]
 8005d30:	430b      	orrs	r3, r1
 8005d32:	6093      	str	r3, [r2, #8]
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8005d34:	686b      	ldr	r3, [r5, #4]
 8005d36:	b903      	cbnz	r3, 8005d3a <HAL_DSI_Init+0x132>
 8005d38:	2301      	movs	r3, #1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8005d3a:	4a15      	ldr	r2, [pc, #84]	; (8005d90 <HAL_DSI_Init+0x188>)
 8005d3c:	fb02 f303 	mul.w	r3, r2, r3
 8005d40:	68aa      	ldr	r2, [r5, #8]
 8005d42:	f002 0203 	and.w	r2, r2, #3
 8005d46:	4093      	lsls	r3, r2
 8005d48:	682a      	ldr	r2, [r5, #0]
 8005d4a:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8005d4e:	fb01 f202 	mul.w	r2, r1, r2
 8005d52:	fbb3 f3f2 	udiv	r3, r3, r2
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8005d56:	6821      	ldr	r1, [r4, #0]
 8005d58:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
 8005d5c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8005d60:	f8c1 2418 	str.w	r2, [r1, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8005d64:	6821      	ldr	r1, [r4, #0]
 8005d66:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	f8c1 3418 	str.w	r3, [r1, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 8005d70:	6823      	ldr	r3, [r4, #0]
 8005d72:	2000      	movs	r0, #0
 8005d74:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8005d78:	6823      	ldr	r3, [r4, #0]
 8005d7a:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8005d7e:	61a0      	str	r0, [r4, #24]
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8005d80:	6160      	str	r0, [r4, #20]
  hdsi->State = HAL_DSI_STATE_READY;
 8005d82:	2301      	movs	r3, #1
 8005d84:	7463      	strb	r3, [r4, #17]
  return HAL_OK;
 8005d86:	e76a      	b.n	8005c5e <HAL_DSI_Init+0x56>
    return HAL_ERROR;
 8005d88:	2001      	movs	r0, #1
}
 8005d8a:	4770      	bx	lr
 8005d8c:	fffc8603 	.word	0xfffc8603
 8005d90:	003d0900 	.word	0x003d0900

08005d94 <HAL_DSI_MspDeInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspDeInit could be implemented in the user file
   */
}
 8005d94:	4770      	bx	lr

08005d96 <HAL_DSI_DeInit>:
  if (hdsi == NULL)
 8005d96:	2800      	cmp	r0, #0
 8005d98:	d04a      	beq.n	8005e30 <HAL_DSI_DeInit+0x9a>
{
 8005d9a:	b530      	push	{r4, r5, lr}
 8005d9c:	b085      	sub	sp, #20
 8005d9e:	4604      	mov	r4, r0
  hdsi->State = HAL_DSI_STATE_BUSY;
 8005da0:	2303      	movs	r3, #3
 8005da2:	7443      	strb	r3, [r0, #17]
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8005da4:	2500      	movs	r5, #0
 8005da6:	9500      	str	r5, [sp, #0]
 8005da8:	6802      	ldr	r2, [r0, #0]
 8005daa:	f8d2 3404 	ldr.w	r3, [r2, #1028]	; 0x404
 8005dae:	f023 0308 	bic.w	r3, r3, #8
 8005db2:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
 8005db6:	6803      	ldr	r3, [r0, #0]
 8005db8:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005dbc:	f002 0208 	and.w	r2, r2, #8
 8005dc0:	9200      	str	r2, [sp, #0]
 8005dc2:	9a00      	ldr	r2, [sp, #0]
  __HAL_DSI_DISABLE(hdsi);
 8005dc4:	9501      	str	r5, [sp, #4]
 8005dc6:	685a      	ldr	r2, [r3, #4]
 8005dc8:	f022 0201 	bic.w	r2, r2, #1
 8005dcc:	605a      	str	r2, [r3, #4]
 8005dce:	6803      	ldr	r3, [r0, #0]
 8005dd0:	685a      	ldr	r2, [r3, #4]
 8005dd2:	f002 0201 	and.w	r2, r2, #1
 8005dd6:	9201      	str	r2, [sp, #4]
 8005dd8:	9a01      	ldr	r2, [sp, #4]
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8005dda:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005dde:	f022 0206 	bic.w	r2, r2, #6
 8005de2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  __HAL_DSI_PLL_DISABLE(hdsi);
 8005de6:	9502      	str	r5, [sp, #8]
 8005de8:	6802      	ldr	r2, [r0, #0]
 8005dea:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8005dee:	f023 0301 	bic.w	r3, r3, #1
 8005df2:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
 8005df6:	6803      	ldr	r3, [r0, #0]
 8005df8:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8005dfc:	f002 0201 	and.w	r2, r2, #1
 8005e00:	9202      	str	r2, [sp, #8]
 8005e02:	9a02      	ldr	r2, [sp, #8]
  __HAL_DSI_REG_DISABLE(hdsi);
 8005e04:	9503      	str	r5, [sp, #12]
 8005e06:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8005e0a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005e0e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8005e12:	6803      	ldr	r3, [r0, #0]
 8005e14:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8005e18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e1c:	9303      	str	r3, [sp, #12]
 8005e1e:	9b03      	ldr	r3, [sp, #12]
  HAL_DSI_MspDeInit(hdsi);
 8005e20:	f7ff ffb8 	bl	8005d94 <HAL_DSI_MspDeInit>
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8005e24:	6165      	str	r5, [r4, #20]
  hdsi->State = HAL_DSI_STATE_RESET;
 8005e26:	7465      	strb	r5, [r4, #17]
  __HAL_UNLOCK(hdsi);
 8005e28:	7425      	strb	r5, [r4, #16]
  return HAL_OK;
 8005e2a:	4628      	mov	r0, r5
}
 8005e2c:	b005      	add	sp, #20
 8005e2e:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8005e30:	2001      	movs	r0, #1
}
 8005e32:	4770      	bx	lr

08005e34 <HAL_DSI_ConfigVideoMode>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005e34:	7c02      	ldrb	r2, [r0, #16]
 8005e36:	2a01      	cmp	r2, #1
 8005e38:	f000 8123 	beq.w	8006082 <HAL_DSI_ConfigVideoMode+0x24e>
{
 8005e3c:	b430      	push	{r4, r5}
 8005e3e:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8005e40:	2201      	movs	r2, #1
 8005e42:	7402      	strb	r2, [r0, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8005e44:	6800      	ldr	r0, [r0, #0]
 8005e46:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8005e48:	f022 0201 	bic.w	r2, r2, #1
 8005e4c:	6342      	str	r2, [r0, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8005e4e:	6818      	ldr	r0, [r3, #0]
 8005e50:	f8d0 2400 	ldr.w	r2, [r0, #1024]	; 0x400
 8005e54:	f022 0201 	bic.w	r2, r2, #1
 8005e58:	f8c0 2400 	str.w	r2, [r0, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8005e5c:	6818      	ldr	r0, [r3, #0]
 8005e5e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8005e60:	f022 0203 	bic.w	r2, r2, #3
 8005e64:	6382      	str	r2, [r0, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8005e66:	6818      	ldr	r0, [r3, #0]
 8005e68:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8005e6a:	68cc      	ldr	r4, [r1, #12]
 8005e6c:	4322      	orrs	r2, r4
 8005e6e:	6382      	str	r2, [r0, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8005e70:	6818      	ldr	r0, [r3, #0]
 8005e72:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005e74:	4a84      	ldr	r2, [pc, #528]	; (8006088 <HAL_DSI_ConfigVideoMode+0x254>)
 8005e76:	4022      	ands	r2, r4
 8005e78:	63c2      	str	r2, [r0, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8005e7a:	6818      	ldr	r0, [r3, #0]
 8005e7c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005e7e:	690c      	ldr	r4, [r1, #16]
 8005e80:	4322      	orrs	r2, r4
 8005e82:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8005e84:	6818      	ldr	r0, [r3, #0]
 8005e86:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005e88:	4c80      	ldr	r4, [pc, #512]	; (800608c <HAL_DSI_ConfigVideoMode+0x258>)
 8005e8a:	4022      	ands	r2, r4
 8005e8c:	6402      	str	r2, [r0, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8005e8e:	6818      	ldr	r0, [r3, #0]
 8005e90:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005e92:	694d      	ldr	r5, [r1, #20]
 8005e94:	432a      	orrs	r2, r5
 8005e96:	6402      	str	r2, [r0, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8005e98:	6818      	ldr	r0, [r3, #0]
 8005e9a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005e9c:	4022      	ands	r2, r4
 8005e9e:	6442      	str	r2, [r0, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8005ea0:	6818      	ldr	r0, [r3, #0]
 8005ea2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005ea4:	698c      	ldr	r4, [r1, #24]
 8005ea6:	4322      	orrs	r2, r4
 8005ea8:	6442      	str	r2, [r0, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8005eaa:	6818      	ldr	r0, [r3, #0]
 8005eac:	68c2      	ldr	r2, [r0, #12]
 8005eae:	f022 0203 	bic.w	r2, r2, #3
 8005eb2:	60c2      	str	r2, [r0, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8005eb4:	6818      	ldr	r0, [r3, #0]
 8005eb6:	68c2      	ldr	r2, [r0, #12]
 8005eb8:	680c      	ldr	r4, [r1, #0]
 8005eba:	4322      	orrs	r2, r4
 8005ebc:	60c2      	str	r2, [r0, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8005ebe:	6818      	ldr	r0, [r3, #0]
 8005ec0:	6942      	ldr	r2, [r0, #20]
 8005ec2:	f022 0207 	bic.w	r2, r2, #7
 8005ec6:	6142      	str	r2, [r0, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8005ec8:	681c      	ldr	r4, [r3, #0]
 8005eca:	6960      	ldr	r0, [r4, #20]
 8005ecc:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8005ece:	6a0d      	ldr	r5, [r1, #32]
 8005ed0:	432a      	orrs	r2, r5
 8005ed2:	69cd      	ldr	r5, [r1, #28]
 8005ed4:	432a      	orrs	r2, r5
 8005ed6:	4302      	orrs	r2, r0
 8005ed8:	6162      	str	r2, [r4, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8005eda:	6818      	ldr	r0, [r3, #0]
 8005edc:	6902      	ldr	r2, [r0, #16]
 8005ede:	f022 020f 	bic.w	r2, r2, #15
 8005ee2:	6102      	str	r2, [r0, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8005ee4:	6818      	ldr	r0, [r3, #0]
 8005ee6:	6902      	ldr	r2, [r0, #16]
 8005ee8:	684c      	ldr	r4, [r1, #4]
 8005eea:	4322      	orrs	r2, r4
 8005eec:	6102      	str	r2, [r0, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8005eee:	6818      	ldr	r0, [r3, #0]
 8005ef0:	f8d0 2400 	ldr.w	r2, [r0, #1024]	; 0x400
 8005ef4:	f022 020e 	bic.w	r2, r2, #14
 8005ef8:	f8c0 2400 	str.w	r2, [r0, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8005efc:	6818      	ldr	r0, [r3, #0]
 8005efe:	f8d0 2400 	ldr.w	r2, [r0, #1024]	; 0x400
 8005f02:	684c      	ldr	r4, [r1, #4]
 8005f04:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8005f08:	f8c0 2400 	str.w	r2, [r0, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8005f0c:	684a      	ldr	r2, [r1, #4]
 8005f0e:	2a03      	cmp	r2, #3
 8005f10:	f000 80ac 	beq.w	800606c <HAL_DSI_ConfigVideoMode+0x238>
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8005f14:	6818      	ldr	r0, [r3, #0]
 8005f16:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8005f18:	4c5d      	ldr	r4, [pc, #372]	; (8006090 <HAL_DSI_ConfigVideoMode+0x25c>)
 8005f1a:	4022      	ands	r2, r4
 8005f1c:	6482      	str	r2, [r0, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8005f1e:	6818      	ldr	r0, [r3, #0]
 8005f20:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8005f22:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8005f24:	432a      	orrs	r2, r5
 8005f26:	6482      	str	r2, [r0, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8005f28:	6818      	ldr	r0, [r3, #0]
 8005f2a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8005f2c:	4022      	ands	r2, r4
 8005f2e:	64c2      	str	r2, [r0, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8005f30:	6818      	ldr	r0, [r3, #0]
 8005f32:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8005f34:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8005f36:	4322      	orrs	r2, r4
 8005f38:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8005f3a:	6818      	ldr	r0, [r3, #0]
 8005f3c:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8005f3e:	4a55      	ldr	r2, [pc, #340]	; (8006094 <HAL_DSI_ConfigVideoMode+0x260>)
 8005f40:	4022      	ands	r2, r4
 8005f42:	6502      	str	r2, [r0, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8005f44:	6818      	ldr	r0, [r3, #0]
 8005f46:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8005f48:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 8005f4a:	4322      	orrs	r2, r4
 8005f4c:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8005f4e:	681c      	ldr	r4, [r3, #0]
 8005f50:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005f52:	4851      	ldr	r0, [pc, #324]	; (8006098 <HAL_DSI_ConfigVideoMode+0x264>)
 8005f54:	4002      	ands	r2, r0
 8005f56:	6562      	str	r2, [r4, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8005f58:	681c      	ldr	r4, [r3, #0]
 8005f5a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005f5c:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8005f5e:	432a      	orrs	r2, r5
 8005f60:	6562      	str	r2, [r4, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8005f62:	681c      	ldr	r4, [r3, #0]
 8005f64:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8005f66:	4002      	ands	r2, r0
 8005f68:	65a2      	str	r2, [r4, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8005f6a:	681c      	ldr	r4, [r3, #0]
 8005f6c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8005f6e:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 8005f70:	432a      	orrs	r2, r5
 8005f72:	65a2      	str	r2, [r4, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8005f74:	681c      	ldr	r4, [r3, #0]
 8005f76:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005f78:	4002      	ands	r2, r0
 8005f7a:	65e2      	str	r2, [r4, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8005f7c:	6818      	ldr	r0, [r3, #0]
 8005f7e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8005f80:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8005f82:	4322      	orrs	r2, r4
 8005f84:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8005f86:	6818      	ldr	r0, [r3, #0]
 8005f88:	6e04      	ldr	r4, [r0, #96]	; 0x60
 8005f8a:	4a3f      	ldr	r2, [pc, #252]	; (8006088 <HAL_DSI_ConfigVideoMode+0x254>)
 8005f8c:	4022      	ands	r2, r4
 8005f8e:	6602      	str	r2, [r0, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8005f90:	6818      	ldr	r0, [r3, #0]
 8005f92:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8005f94:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 8005f96:	4322      	orrs	r2, r4
 8005f98:	6602      	str	r2, [r0, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8005f9a:	6818      	ldr	r0, [r3, #0]
 8005f9c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8005f9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005fa2:	6382      	str	r2, [r0, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8005fa4:	6818      	ldr	r0, [r3, #0]
 8005fa6:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8005fa8:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 8005faa:	4322      	orrs	r2, r4
 8005fac:	6382      	str	r2, [r0, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8005fae:	6818      	ldr	r0, [r3, #0]
 8005fb0:	6982      	ldr	r2, [r0, #24]
 8005fb2:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8005fb6:	6182      	str	r2, [r0, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8005fb8:	6818      	ldr	r0, [r3, #0]
 8005fba:	6982      	ldr	r2, [r0, #24]
 8005fbc:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 8005fbe:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005fc2:	6182      	str	r2, [r0, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8005fc4:	6818      	ldr	r0, [r3, #0]
 8005fc6:	6982      	ldr	r2, [r0, #24]
 8005fc8:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005fcc:	6182      	str	r2, [r0, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8005fce:	6818      	ldr	r0, [r3, #0]
 8005fd0:	6982      	ldr	r2, [r0, #24]
 8005fd2:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8005fd4:	4322      	orrs	r2, r4
 8005fd6:	6182      	str	r2, [r0, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8005fd8:	6818      	ldr	r0, [r3, #0]
 8005fda:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8005fdc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fe0:	6382      	str	r2, [r0, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8005fe2:	6818      	ldr	r0, [r3, #0]
 8005fe4:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8005fe6:	6d0c      	ldr	r4, [r1, #80]	; 0x50
 8005fe8:	4322      	orrs	r2, r4
 8005fea:	6382      	str	r2, [r0, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8005fec:	6818      	ldr	r0, [r3, #0]
 8005fee:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8005ff0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005ff4:	6382      	str	r2, [r0, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8005ff6:	6818      	ldr	r0, [r3, #0]
 8005ff8:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8005ffa:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8005ffc:	4322      	orrs	r2, r4
 8005ffe:	6382      	str	r2, [r0, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8006000:	6818      	ldr	r0, [r3, #0]
 8006002:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8006004:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006008:	6382      	str	r2, [r0, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 800600a:	6818      	ldr	r0, [r3, #0]
 800600c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800600e:	6d8c      	ldr	r4, [r1, #88]	; 0x58
 8006010:	4322      	orrs	r2, r4
 8006012:	6382      	str	r2, [r0, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8006014:	6818      	ldr	r0, [r3, #0]
 8006016:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8006018:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800601c:	6382      	str	r2, [r0, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 800601e:	6818      	ldr	r0, [r3, #0]
 8006020:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8006022:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
 8006024:	4322      	orrs	r2, r4
 8006026:	6382      	str	r2, [r0, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8006028:	6818      	ldr	r0, [r3, #0]
 800602a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800602c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006030:	6382      	str	r2, [r0, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8006032:	6818      	ldr	r0, [r3, #0]
 8006034:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8006036:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 8006038:	4322      	orrs	r2, r4
 800603a:	6382      	str	r2, [r0, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 800603c:	6818      	ldr	r0, [r3, #0]
 800603e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8006040:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006044:	6382      	str	r2, [r0, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8006046:	6818      	ldr	r0, [r3, #0]
 8006048:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800604a:	6e4c      	ldr	r4, [r1, #100]	; 0x64
 800604c:	4322      	orrs	r2, r4
 800604e:	6382      	str	r2, [r0, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8006050:	6818      	ldr	r0, [r3, #0]
 8006052:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8006054:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006058:	6382      	str	r2, [r0, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 800605a:	6818      	ldr	r0, [r3, #0]
 800605c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800605e:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8006060:	430a      	orrs	r2, r1
 8006062:	6382      	str	r2, [r0, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006064:	2000      	movs	r0, #0
 8006066:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
}
 8006068:	bc30      	pop	{r4, r5}
 800606a:	4770      	bx	lr
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 800606c:	6818      	ldr	r0, [r3, #0]
 800606e:	6902      	ldr	r2, [r0, #16]
 8006070:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006074:	6102      	str	r2, [r0, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8006076:	6818      	ldr	r0, [r3, #0]
 8006078:	6902      	ldr	r2, [r0, #16]
 800607a:	688c      	ldr	r4, [r1, #8]
 800607c:	4322      	orrs	r2, r4
 800607e:	6102      	str	r2, [r0, #16]
 8006080:	e748      	b.n	8005f14 <HAL_DSI_ConfigVideoMode+0xe0>
  __HAL_LOCK(hdsi);
 8006082:	2002      	movs	r0, #2
}
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop
 8006088:	ffffc000 	.word	0xffffc000
 800608c:	ffffe000 	.word	0xffffe000
 8006090:	fffff000 	.word	0xfffff000
 8006094:	ffff8000 	.word	0xffff8000
 8006098:	fffffc00 	.word	0xfffffc00

0800609c <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800609c:	7c02      	ldrb	r2, [r0, #16]
 800609e:	2a01      	cmp	r2, #1
 80060a0:	d021      	beq.n	80060e6 <HAL_DSI_Start+0x4a>
{
 80060a2:	b082      	sub	sp, #8
 80060a4:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 80060a6:	2201      	movs	r2, #1
 80060a8:	7402      	strb	r2, [r0, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 80060aa:	2000      	movs	r0, #0
 80060ac:	9000      	str	r0, [sp, #0]
 80060ae:	6819      	ldr	r1, [r3, #0]
 80060b0:	684a      	ldr	r2, [r1, #4]
 80060b2:	f042 0201 	orr.w	r2, r2, #1
 80060b6:	604a      	str	r2, [r1, #4]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	6851      	ldr	r1, [r2, #4]
 80060bc:	f001 0101 	and.w	r1, r1, #1
 80060c0:	9100      	str	r1, [sp, #0]
 80060c2:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80060c4:	9001      	str	r0, [sp, #4]
 80060c6:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
 80060ca:	f041 0108 	orr.w	r1, r1, #8
 80060ce:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 80060d8:	f002 0208 	and.w	r2, r2, #8
 80060dc:	9201      	str	r2, [sp, #4]
 80060de:	9a01      	ldr	r2, [sp, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80060e0:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
}
 80060e2:	b002      	add	sp, #8
 80060e4:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80060e6:	2002      	movs	r0, #2
}
 80060e8:	4770      	bx	lr

080060ea <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 80060ea:	b510      	push	{r4, lr}
 80060ec:	b082      	sub	sp, #8
 80060ee:	4604      	mov	r4, r0
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 80060f0:	7c00      	ldrb	r0, [r0, #16]
 80060f2:	2801      	cmp	r0, #1
 80060f4:	d00a      	beq.n	800610c <HAL_DSI_ShortWrite+0x22>
 80060f6:	2001      	movs	r0, #1
 80060f8:	7420      	strb	r0, [r4, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 80060fa:	9804      	ldr	r0, [sp, #16]
 80060fc:	9000      	str	r0, [sp, #0]
 80060fe:	4620      	mov	r0, r4
 8006100:	f7ff fd5f 	bl	8005bc2 <DSI_ShortWrite>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006104:	2300      	movs	r3, #0
 8006106:	7423      	strb	r3, [r4, #16]

  return status;
}
 8006108:	b002      	add	sp, #8
 800610a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdsi);
 800610c:	2002      	movs	r0, #2
 800610e:	e7fb      	b.n	8006108 <HAL_DSI_ShortWrite+0x1e>

08006110 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8006110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006114:	b082      	sub	sp, #8
 8006116:	461d      	mov	r5, r3
 8006118:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800611a:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800611e:	7c03      	ldrb	r3, [r0, #16]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d053      	beq.n	80061cc <HAL_DSI_LongWrite+0xbc>
 8006124:	4604      	mov	r4, r0
 8006126:	468a      	mov	sl, r1
 8006128:	4617      	mov	r7, r2
 800612a:	2301      	movs	r3, #1
 800612c:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 800612e:	f7ff f895 	bl	800525c <HAL_GetTick>
 8006132:	4681      	mov	r9, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8006134:	6822      	ldr	r2, [r4, #0]
 8006136:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8006138:	f013 0f01 	tst.w	r3, #1
 800613c:	d10a      	bne.n	8006154 <HAL_DSI_LongWrite+0x44>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800613e:	f7ff f88d 	bl	800525c <HAL_GetTick>
 8006142:	eba0 0009 	sub.w	r0, r0, r9
 8006146:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800614a:	d9f3      	bls.n	8006134 <HAL_DSI_LongWrite+0x24>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 800614c:	2300      	movs	r3, #0
 800614e:	7423      	strb	r3, [r4, #16]

      return HAL_TIMEOUT;
 8006150:	2003      	movs	r0, #3
 8006152:	e038      	b.n	80061c6 <HAL_DSI_LongWrite+0xb6>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8006154:	46ac      	mov	ip, r5
 8006156:	2d03      	cmp	r5, #3
 8006158:	bf28      	it	cs
 800615a:	f04f 0c03 	movcs.w	ip, #3

  for (count = 0U; count < nbBytes; count++)
 800615e:	2300      	movs	r3, #0
 8006160:	e005      	b.n	800616e <HAL_DSI_LongWrite+0x5e>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8006162:	f818 1003 	ldrb.w	r1, [r8, r3]
 8006166:	3301      	adds	r3, #1
 8006168:	00d8      	lsls	r0, r3, #3
 800616a:	4081      	lsls	r1, r0
 800616c:	430e      	orrs	r6, r1
  for (count = 0U; count < nbBytes; count++)
 800616e:	4563      	cmp	r3, ip
 8006170:	d3f7      	bcc.n	8006162 <HAL_DSI_LongWrite+0x52>
  }
  hdsi->Instance->GPDR = fifoword;
 8006172:	6716      	str	r6, [r2, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8006174:	eba5 060c 	sub.w	r6, r5, ip
  pparams += nbBytes;
 8006178:	eb08 000c 	add.w	r0, r8, ip
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 800617c:	e00f      	b.n	800619e <HAL_DSI_LongWrite+0x8e>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
    fifoword = 0U;
    for (count = 0U; count < nbBytes; count++)
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800617e:	f810 e00c 	ldrb.w	lr, [r0, ip]
 8006182:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8006186:	fa0e fe02 	lsl.w	lr, lr, r2
 800618a:	ea43 030e 	orr.w	r3, r3, lr
    for (count = 0U; count < nbBytes; count++)
 800618e:	f10c 0c01 	add.w	ip, ip, #1
 8006192:	458c      	cmp	ip, r1
 8006194:	d3f3      	bcc.n	800617e <HAL_DSI_LongWrite+0x6e>
    }
    hdsi->Instance->GPDR = fifoword;
 8006196:	6822      	ldr	r2, [r4, #0]
 8006198:	6713      	str	r3, [r2, #112]	; 0x70

    uicounter -= nbBytes;
 800619a:	1a76      	subs	r6, r6, r1
    pparams += nbBytes;
 800619c:	4408      	add	r0, r1
  while (uicounter != 0U)
 800619e:	b136      	cbz	r6, 80061ae <HAL_DSI_LongWrite+0x9e>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80061a0:	4631      	mov	r1, r6
 80061a2:	2e04      	cmp	r6, #4
 80061a4:	bf28      	it	cs
 80061a6:	2104      	movcs	r1, #4
    fifoword = 0U;
 80061a8:	2300      	movs	r3, #0
    for (count = 0U; count < nbBytes; count++)
 80061aa:	469c      	mov	ip, r3
 80061ac:	e7f1      	b.n	8006192 <HAL_DSI_LongWrite+0x82>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 80061ae:	1c6b      	adds	r3, r5, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 80061b0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80061b4:	9200      	str	r2, [sp, #0]
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	463a      	mov	r2, r7
 80061ba:	4651      	mov	r1, sl
 80061bc:	6820      	ldr	r0, [r4, #0]
 80061be:	f7ff fcf7 	bl	8005bb0 <DSI_ConfigPacketHeader>
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80061c2:	2000      	movs	r0, #0
 80061c4:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 80061c6:	b002      	add	sp, #8
 80061c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hdsi);
 80061cc:	2002      	movs	r0, #2
 80061ce:	e7fa      	b.n	80061c6 <HAL_DSI_LongWrite+0xb6>

080061d0 <HAL_GPIO_Init>:
	assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
	assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
	assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

	/* Configure the port pins */
	for (position = 0; position < GPIO_NUMBER; position++) {
 80061d0:	2300      	movs	r3, #0
 80061d2:	2b0f      	cmp	r3, #15
 80061d4:	f200 80f4 	bhi.w	80063c0 <HAL_GPIO_Init+0x1f0>
void HAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init) {
 80061d8:	b570      	push	{r4, r5, r6, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	e066      	b.n	80062ac <HAL_GPIO_Init+0xdc>
			if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT)
					|| ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)) {
				/* Check the Speed parameter */
				assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
				/* Configure the IO Speed */
				temp = GPIOx->OSPEEDR;
 80061de:	6885      	ldr	r5, [r0, #8]
				temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80061e0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80061e4:	2403      	movs	r4, #3
 80061e6:	fa04 f40e 	lsl.w	r4, r4, lr
 80061ea:	ea25 0504 	bic.w	r5, r5, r4
				temp |= (GPIO_Init->Speed << (position * 2));
 80061ee:	68cc      	ldr	r4, [r1, #12]
 80061f0:	fa04 f40e 	lsl.w	r4, r4, lr
 80061f4:	432c      	orrs	r4, r5
				GPIOx->OSPEEDR = temp;
 80061f6:	6084      	str	r4, [r0, #8]

				/* Configure the IO Output Type */
				temp = GPIOx->OTYPER;
 80061f8:	6844      	ldr	r4, [r0, #4]
				temp &= ~(GPIO_OTYPER_OT_0 << position);
 80061fa:	ea24 0402 	bic.w	r4, r4, r2
				temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos)
 80061fe:	684a      	ldr	r2, [r1, #4]
 8006200:	f3c2 1200 	ubfx	r2, r2, #4, #1
						<< position);
 8006204:	409a      	lsls	r2, r3
				temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos)
 8006206:	4322      	orrs	r2, r4
				GPIOx->OTYPER = temp;
 8006208:	6042      	str	r2, [r0, #4]
 800620a:	e05d      	b.n	80062c8 <HAL_GPIO_Init+0xf8>
			if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
				/* Check the Alternate function parameter */
				assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

				/* Configure Alternate function mapped with the current IO */
				temp = GPIOx->AFR[position >> 3];
 800620c:	08dc      	lsrs	r4, r3, #3
 800620e:	3408      	adds	r4, #8
 8006210:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
				temp &= ~((uint32_t) 0xF
						<< ((uint32_t) (position & (uint32_t) 0x07) * 4));
 8006214:	f003 0507 	and.w	r5, r3, #7
 8006218:	00ad      	lsls	r5, r5, #2
 800621a:	f04f 0e0f 	mov.w	lr, #15
 800621e:	fa0e fe05 	lsl.w	lr, lr, r5
				temp &= ~((uint32_t) 0xF
 8006222:	ea22 0e0e 	bic.w	lr, r2, lr
				temp |= ((uint32_t) (GPIO_Init->Alternate)
 8006226:	690a      	ldr	r2, [r1, #16]
						<< (((uint32_t) position & (uint32_t) 0x07) * 4));
 8006228:	40aa      	lsls	r2, r5
				temp |= ((uint32_t) (GPIO_Init->Alternate)
 800622a:	ea42 020e 	orr.w	r2, r2, lr
				GPIOx->AFR[position >> 3] = temp;
 800622e:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8006232:	e05d      	b.n	80062f0 <HAL_GPIO_Init+0x120>
				/* Enable SYSCFG Clock */
				__HAL_RCC_SYSCFG_CLK_ENABLE();

				temp = SYSCFG->EXTICR[position >> 2];
				temp &= ~(((uint32_t) 0x0F) << (4 * (position & 0x03)));
				temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 8006234:	2209      	movs	r2, #9
 8006236:	e000      	b.n	800623a <HAL_GPIO_Init+0x6a>
 8006238:	2200      	movs	r2, #0
						<< (4 * (position & 0x03)));
 800623a:	fa02 f20e 	lsl.w	r2, r2, lr
				temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 800623e:	432a      	orrs	r2, r5
				SYSCFG->EXTICR[position >> 2] = temp;
 8006240:	3402      	adds	r4, #2
 8006242:	4d60      	ldr	r5, [pc, #384]	; (80063c4 <HAL_GPIO_Init+0x1f4>)
 8006244:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

				/* Clear Rising Falling edge configuration */
				temp = EXTI->RTSR;
 8006248:	4a5f      	ldr	r2, [pc, #380]	; (80063c8 <HAL_GPIO_Init+0x1f8>)
 800624a:	6894      	ldr	r4, [r2, #8]
				temp &= ~((uint32_t) iocurrent);
 800624c:	ea6f 020c 	mvn.w	r2, ip
 8006250:	ea24 050c 	bic.w	r5, r4, ip
				if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u) {
 8006254:	684e      	ldr	r6, [r1, #4]
 8006256:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 800625a:	d001      	beq.n	8006260 <HAL_GPIO_Init+0x90>
					temp |= iocurrent;
 800625c:	ea4c 0504 	orr.w	r5, ip, r4
				}
				EXTI->RTSR = temp;
 8006260:	4c59      	ldr	r4, [pc, #356]	; (80063c8 <HAL_GPIO_Init+0x1f8>)
 8006262:	60a5      	str	r5, [r4, #8]

				temp = EXTI->FTSR;
 8006264:	68e4      	ldr	r4, [r4, #12]
				temp &= ~((uint32_t) iocurrent);
 8006266:	ea02 0504 	and.w	r5, r2, r4
				if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u) {
 800626a:	684e      	ldr	r6, [r1, #4]
 800626c:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8006270:	d001      	beq.n	8006276 <HAL_GPIO_Init+0xa6>
					temp |= iocurrent;
 8006272:	ea4c 0504 	orr.w	r5, ip, r4
				}
				EXTI->FTSR = temp;
 8006276:	4c54      	ldr	r4, [pc, #336]	; (80063c8 <HAL_GPIO_Init+0x1f8>)
 8006278:	60e5      	str	r5, [r4, #12]

				temp = EXTI->EMR;
 800627a:	6864      	ldr	r4, [r4, #4]
				temp &= ~((uint32_t) iocurrent);
 800627c:	ea02 0504 	and.w	r5, r2, r4
				if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u) {
 8006280:	684e      	ldr	r6, [r1, #4]
 8006282:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8006286:	d001      	beq.n	800628c <HAL_GPIO_Init+0xbc>
					temp |= iocurrent;
 8006288:	ea4c 0504 	orr.w	r5, ip, r4
				}
				EXTI->EMR = temp;
 800628c:	4c4e      	ldr	r4, [pc, #312]	; (80063c8 <HAL_GPIO_Init+0x1f8>)
 800628e:	6065      	str	r5, [r4, #4]

				/* Clear EXTI line configuration */
				temp = EXTI->IMR;
 8006290:	6824      	ldr	r4, [r4, #0]
				temp &= ~((uint32_t) iocurrent);
 8006292:	4022      	ands	r2, r4
				if ((GPIO_Init->Mode & EXTI_IT) != 0x00u) {
 8006294:	684d      	ldr	r5, [r1, #4]
 8006296:	f415 3f80 	tst.w	r5, #65536	; 0x10000
 800629a:	d001      	beq.n	80062a0 <HAL_GPIO_Init+0xd0>
					temp |= iocurrent;
 800629c:	ea4c 0204 	orr.w	r2, ip, r4
				}
				EXTI->IMR = temp;
 80062a0:	4c49      	ldr	r4, [pc, #292]	; (80063c8 <HAL_GPIO_Init+0x1f8>)
 80062a2:	6022      	str	r2, [r4, #0]
	for (position = 0; position < GPIO_NUMBER; position++) {
 80062a4:	3301      	adds	r3, #1
 80062a6:	2b0f      	cmp	r3, #15
 80062a8:	f200 8088 	bhi.w	80063bc <HAL_GPIO_Init+0x1ec>
		ioposition = ((uint32_t) 0x01) << position;
 80062ac:	2201      	movs	r2, #1
 80062ae:	409a      	lsls	r2, r3
		iocurrent = (uint32_t) (GPIO_Init->Pin) & ioposition;
 80062b0:	680c      	ldr	r4, [r1, #0]
 80062b2:	ea04 0c02 	and.w	ip, r4, r2
		if (iocurrent == ioposition) {
 80062b6:	ea32 0404 	bics.w	r4, r2, r4
 80062ba:	d1f3      	bne.n	80062a4 <HAL_GPIO_Init+0xd4>
			if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT)
 80062bc:	684c      	ldr	r4, [r1, #4]
 80062be:	f004 0403 	and.w	r4, r4, #3
					|| ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)) {
 80062c2:	3c01      	subs	r4, #1
			if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT)
 80062c4:	2c01      	cmp	r4, #1
 80062c6:	d98a      	bls.n	80061de <HAL_GPIO_Init+0xe>
			if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) {
 80062c8:	684a      	ldr	r2, [r1, #4]
 80062ca:	f002 0203 	and.w	r2, r2, #3
 80062ce:	2a03      	cmp	r2, #3
 80062d0:	d009      	beq.n	80062e6 <HAL_GPIO_Init+0x116>
				temp = GPIOx->PUPDR;
 80062d2:	68c4      	ldr	r4, [r0, #12]
				temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80062d4:	005d      	lsls	r5, r3, #1
 80062d6:	2203      	movs	r2, #3
 80062d8:	40aa      	lsls	r2, r5
 80062da:	ea24 0402 	bic.w	r4, r4, r2
				temp |= ((GPIO_Init->Pull) << (position * 2));
 80062de:	688a      	ldr	r2, [r1, #8]
 80062e0:	40aa      	lsls	r2, r5
 80062e2:	4322      	orrs	r2, r4
				GPIOx->PUPDR = temp;
 80062e4:	60c2      	str	r2, [r0, #12]
			if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
 80062e6:	684a      	ldr	r2, [r1, #4]
 80062e8:	f002 0203 	and.w	r2, r2, #3
 80062ec:	2a02      	cmp	r2, #2
 80062ee:	d08d      	beq.n	800620c <HAL_GPIO_Init+0x3c>
			temp = GPIOx->MODER;
 80062f0:	6804      	ldr	r4, [r0, #0]
			temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80062f2:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80062f6:	2203      	movs	r2, #3
 80062f8:	fa02 f20e 	lsl.w	r2, r2, lr
 80062fc:	ea24 0402 	bic.w	r4, r4, r2
			temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006300:	684a      	ldr	r2, [r1, #4]
 8006302:	f002 0203 	and.w	r2, r2, #3
 8006306:	fa02 f20e 	lsl.w	r2, r2, lr
 800630a:	4322      	orrs	r2, r4
			GPIOx->MODER = temp;
 800630c:	6002      	str	r2, [r0, #0]
			if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u) {
 800630e:	684a      	ldr	r2, [r1, #4]
 8006310:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 8006314:	d0c6      	beq.n	80062a4 <HAL_GPIO_Init+0xd4>
				__HAL_RCC_SYSCFG_CLK_ENABLE();
 8006316:	4a2d      	ldr	r2, [pc, #180]	; (80063cc <HAL_GPIO_Init+0x1fc>)
 8006318:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800631a:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800631e:	6454      	str	r4, [r2, #68]	; 0x44
 8006320:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006322:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8006326:	9201      	str	r2, [sp, #4]
 8006328:	9a01      	ldr	r2, [sp, #4]
				temp = SYSCFG->EXTICR[position >> 2];
 800632a:	089c      	lsrs	r4, r3, #2
 800632c:	1ca5      	adds	r5, r4, #2
 800632e:	4a25      	ldr	r2, [pc, #148]	; (80063c4 <HAL_GPIO_Init+0x1f4>)
 8006330:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
				temp &= ~(((uint32_t) 0x0F) << (4 * (position & 0x03)));
 8006334:	f003 0e03 	and.w	lr, r3, #3
 8006338:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800633c:	220f      	movs	r2, #15
 800633e:	fa02 f20e 	lsl.w	r2, r2, lr
 8006342:	ea25 0502 	bic.w	r5, r5, r2
				temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 8006346:	4a22      	ldr	r2, [pc, #136]	; (80063d0 <HAL_GPIO_Init+0x200>)
 8006348:	4290      	cmp	r0, r2
 800634a:	f43f af75 	beq.w	8006238 <HAL_GPIO_Init+0x68>
 800634e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006352:	4290      	cmp	r0, r2
 8006354:	d022      	beq.n	800639c <HAL_GPIO_Init+0x1cc>
 8006356:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800635a:	4290      	cmp	r0, r2
 800635c:	d020      	beq.n	80063a0 <HAL_GPIO_Init+0x1d0>
 800635e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006362:	4290      	cmp	r0, r2
 8006364:	d01e      	beq.n	80063a4 <HAL_GPIO_Init+0x1d4>
 8006366:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800636a:	4290      	cmp	r0, r2
 800636c:	d01c      	beq.n	80063a8 <HAL_GPIO_Init+0x1d8>
 800636e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006372:	4290      	cmp	r0, r2
 8006374:	d01a      	beq.n	80063ac <HAL_GPIO_Init+0x1dc>
 8006376:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800637a:	4290      	cmp	r0, r2
 800637c:	d018      	beq.n	80063b0 <HAL_GPIO_Init+0x1e0>
 800637e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006382:	4290      	cmp	r0, r2
 8006384:	d016      	beq.n	80063b4 <HAL_GPIO_Init+0x1e4>
 8006386:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800638a:	4290      	cmp	r0, r2
 800638c:	d014      	beq.n	80063b8 <HAL_GPIO_Init+0x1e8>
 800638e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006392:	4290      	cmp	r0, r2
 8006394:	f43f af4e 	beq.w	8006234 <HAL_GPIO_Init+0x64>
 8006398:	220a      	movs	r2, #10
 800639a:	e74e      	b.n	800623a <HAL_GPIO_Init+0x6a>
 800639c:	2201      	movs	r2, #1
 800639e:	e74c      	b.n	800623a <HAL_GPIO_Init+0x6a>
 80063a0:	2202      	movs	r2, #2
 80063a2:	e74a      	b.n	800623a <HAL_GPIO_Init+0x6a>
 80063a4:	2203      	movs	r2, #3
 80063a6:	e748      	b.n	800623a <HAL_GPIO_Init+0x6a>
 80063a8:	2204      	movs	r2, #4
 80063aa:	e746      	b.n	800623a <HAL_GPIO_Init+0x6a>
 80063ac:	2205      	movs	r2, #5
 80063ae:	e744      	b.n	800623a <HAL_GPIO_Init+0x6a>
 80063b0:	2206      	movs	r2, #6
 80063b2:	e742      	b.n	800623a <HAL_GPIO_Init+0x6a>
 80063b4:	2207      	movs	r2, #7
 80063b6:	e740      	b.n	800623a <HAL_GPIO_Init+0x6a>
 80063b8:	2208      	movs	r2, #8
 80063ba:	e73e      	b.n	800623a <HAL_GPIO_Init+0x6a>
			}
		}
	}
}
 80063bc:	b002      	add	sp, #8
 80063be:	bd70      	pop	{r4, r5, r6, pc}
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	40013800 	.word	0x40013800
 80063c8:	40013c00 	.word	0x40013c00
 80063cc:	40023800 	.word	0x40023800
 80063d0:	40020000 	.word	0x40020000

080063d4 <HAL_GPIO_WritePin>:
		GPIO_PinState PinState) {
	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));
	assert_param(IS_GPIO_PIN_ACTION(PinState));

	if (PinState != GPIO_PIN_RESET) {
 80063d4:	b10a      	cbz	r2, 80063da <HAL_GPIO_WritePin+0x6>
		GPIOx->BSRR = GPIO_Pin;
 80063d6:	6181      	str	r1, [r0, #24]
 80063d8:	4770      	bx	lr
	} else {
		GPIOx->BSRR = (uint32_t) GPIO_Pin << 16;
 80063da:	0409      	lsls	r1, r1, #16
 80063dc:	6181      	str	r1, [r0, #24]
	}
}
 80063de:	4770      	bx	lr

080063e0 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80063e0:	6803      	ldr	r3, [r0, #0]
 80063e2:	699a      	ldr	r2, [r3, #24]
 80063e4:	f012 0f02 	tst.w	r2, #2
 80063e8:	d001      	beq.n	80063ee <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 80063ea:	2200      	movs	r2, #0
 80063ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80063ee:	6803      	ldr	r3, [r0, #0]
 80063f0:	699a      	ldr	r2, [r3, #24]
 80063f2:	f012 0f01 	tst.w	r2, #1
 80063f6:	d103      	bne.n	8006400 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80063f8:	699a      	ldr	r2, [r3, #24]
 80063fa:	f042 0201 	orr.w	r2, r2, #1
 80063fe:	619a      	str	r2, [r3, #24]
  }
}
 8006400:	4770      	bx	lr

08006402 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006402:	b410      	push	{r4}
 8006404:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006406:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800640a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800640e:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006410:	4321      	orrs	r1, r4
 8006412:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006416:	6802      	ldr	r2, [r0, #0]
 8006418:	6853      	ldr	r3, [r2, #4]
 800641a:	0d64      	lsrs	r4, r4, #21
 800641c:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8006420:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8006424:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8006428:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 800642c:	f044 0403 	orr.w	r4, r4, #3
 8006430:	ea23 0304 	bic.w	r3, r3, r4
 8006434:	430b      	orrs	r3, r1
 8006436:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006438:	f85d 4b04 	ldr.w	r4, [sp], #4
 800643c:	4770      	bx	lr

0800643e <I2C_IsErrorOccurred>:
{
 800643e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006442:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 8006444:	6803      	ldr	r3, [r0, #0]
 8006446:	699e      	ldr	r6, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006448:	f016 0610 	ands.w	r6, r6, #16
 800644c:	d07e      	beq.n	800654c <I2C_IsErrorOccurred+0x10e>
 800644e:	460d      	mov	r5, r1
 8006450:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006452:	2210      	movs	r2, #16
 8006454:	61da      	str	r2, [r3, #28]
  uint32_t error_code = 0;
 8006456:	2600      	movs	r6, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006458:	4637      	mov	r7, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800645a:	6823      	ldr	r3, [r4, #0]
 800645c:	6998      	ldr	r0, [r3, #24]
 800645e:	f010 0f20 	tst.w	r0, #32
 8006462:	d132      	bne.n	80064ca <I2C_IsErrorOccurred+0x8c>
 8006464:	bb8f      	cbnz	r7, 80064ca <I2C_IsErrorOccurred+0x8c>
      if (Timeout != HAL_MAX_DELAY)
 8006466:	f1b5 3fff 	cmp.w	r5, #4294967295
 800646a:	d0f6      	beq.n	800645a <I2C_IsErrorOccurred+0x1c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800646c:	f7fe fef6 	bl	800525c <HAL_GetTick>
 8006470:	eba0 0008 	sub.w	r0, r0, r8
 8006474:	42a8      	cmp	r0, r5
 8006476:	d801      	bhi.n	800647c <I2C_IsErrorOccurred+0x3e>
 8006478:	2d00      	cmp	r5, #0
 800647a:	d1ee      	bne.n	800645a <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800647c:	6821      	ldr	r1, [r4, #0]
 800647e:	684a      	ldr	r2, [r1, #4]
 8006480:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
          tmp2 = hi2c->Mode;
 8006484:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8006488:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800648a:	6988      	ldr	r0, [r1, #24]
 800648c:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8006490:	d004      	beq.n	800649c <I2C_IsErrorOccurred+0x5e>
              (tmp2 != HAL_I2C_MODE_SLAVE))
 8006492:	3b20      	subs	r3, #32
 8006494:	bf18      	it	ne
 8006496:	2301      	movne	r3, #1
              (tmp1 != I2C_CR2_STOP) && \
 8006498:	b902      	cbnz	r2, 800649c <I2C_IsErrorOccurred+0x5e>
 800649a:	b973      	cbnz	r3, 80064ba <I2C_IsErrorOccurred+0x7c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800649c:	6823      	ldr	r3, [r4, #0]
 800649e:	699b      	ldr	r3, [r3, #24]
 80064a0:	f013 0f20 	tst.w	r3, #32
 80064a4:	d1d9      	bne.n	800645a <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80064a6:	f7fe fed9 	bl	800525c <HAL_GetTick>
 80064aa:	eba0 0008 	sub.w	r0, r0, r8
 80064ae:	2819      	cmp	r0, #25
 80064b0:	d9f4      	bls.n	800649c <I2C_IsErrorOccurred+0x5e>
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80064b2:	f046 0620 	orr.w	r6, r6, #32
              status = HAL_ERROR;
 80064b6:	2701      	movs	r7, #1
              break;
 80064b8:	e7cf      	b.n	800645a <I2C_IsErrorOccurred+0x1c>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80064ba:	684b      	ldr	r3, [r1, #4]
 80064bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80064c0:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 80064c2:	f7fe fecb 	bl	800525c <HAL_GetTick>
 80064c6:	4680      	mov	r8, r0
 80064c8:	e7e8      	b.n	800649c <I2C_IsErrorOccurred+0x5e>
    if (status == HAL_OK)
 80064ca:	b90f      	cbnz	r7, 80064d0 <I2C_IsErrorOccurred+0x92>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064cc:	2220      	movs	r2, #32
 80064ce:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 80064d0:	f046 0604 	orr.w	r6, r6, #4
    status = HAL_ERROR;
 80064d4:	2501      	movs	r5, #1
  itflag = hi2c->Instance->ISR;
 80064d6:	6822      	ldr	r2, [r4, #0]
 80064d8:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80064da:	f413 7f80 	tst.w	r3, #256	; 0x100
 80064de:	d005      	beq.n	80064ec <I2C_IsErrorOccurred+0xae>
    error_code |= HAL_I2C_ERROR_BERR;
 80064e0:	f046 0601 	orr.w	r6, r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80064e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80064e8:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 80064ea:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80064ec:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80064f0:	d006      	beq.n	8006500 <I2C_IsErrorOccurred+0xc2>
    error_code |= HAL_I2C_ERROR_OVR;
 80064f2:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80064f6:	6822      	ldr	r2, [r4, #0]
 80064f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80064fc:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 80064fe:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006500:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006504:	d024      	beq.n	8006550 <I2C_IsErrorOccurred+0x112>
    error_code |= HAL_I2C_ERROR_ARLO;
 8006506:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800650a:	6823      	ldr	r3, [r4, #0]
 800650c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006510:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 8006512:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 8006514:	4620      	mov	r0, r4
 8006516:	f7ff ff63 	bl	80063e0 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800651a:	6822      	ldr	r2, [r4, #0]
 800651c:	6853      	ldr	r3, [r2, #4]
 800651e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8006522:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8006526:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800652a:	f023 0301 	bic.w	r3, r3, #1
 800652e:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8006530:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006532:	4333      	orrs	r3, r6
 8006534:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006536:	2320      	movs	r3, #32
 8006538:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800653c:	2300      	movs	r3, #0
 800653e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8006542:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8006546:	4628      	mov	r0, r5
 8006548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_StatusTypeDef status = HAL_OK;
 800654c:	2500      	movs	r5, #0
 800654e:	e7c2      	b.n	80064d6 <I2C_IsErrorOccurred+0x98>
  if (status != HAL_OK)
 8006550:	2d00      	cmp	r5, #0
 8006552:	d0f8      	beq.n	8006546 <I2C_IsErrorOccurred+0x108>
 8006554:	e7de      	b.n	8006514 <I2C_IsErrorOccurred+0xd6>

08006556 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8006556:	b570      	push	{r4, r5, r6, lr}
 8006558:	4604      	mov	r4, r0
 800655a:	460d      	mov	r5, r1
 800655c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800655e:	6823      	ldr	r3, [r4, #0]
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	f013 0f02 	tst.w	r3, #2
 8006566:	d11d      	bne.n	80065a4 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006568:	4632      	mov	r2, r6
 800656a:	4629      	mov	r1, r5
 800656c:	4620      	mov	r0, r4
 800656e:	f7ff ff66 	bl	800643e <I2C_IsErrorOccurred>
 8006572:	b9c8      	cbnz	r0, 80065a8 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8006574:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006578:	d0f1      	beq.n	800655e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800657a:	f7fe fe6f 	bl	800525c <HAL_GetTick>
 800657e:	1b80      	subs	r0, r0, r6
 8006580:	42a8      	cmp	r0, r5
 8006582:	d801      	bhi.n	8006588 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8006584:	2d00      	cmp	r5, #0
 8006586:	d1ea      	bne.n	800655e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006588:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800658a:	f043 0320 	orr.w	r3, r3, #32
 800658e:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006590:	2320      	movs	r3, #32
 8006592:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006596:	2300      	movs	r3, #0
 8006598:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800659c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80065a0:	2001      	movs	r0, #1
 80065a2:	e000      	b.n	80065a6 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 80065a4:	2000      	movs	r0, #0
}
 80065a6:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80065a8:	2001      	movs	r0, #1
 80065aa:	e7fc      	b.n	80065a6 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

080065ac <I2C_WaitOnFlagUntilTimeout>:
{
 80065ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065b0:	4606      	mov	r6, r0
 80065b2:	4688      	mov	r8, r1
 80065b4:	4617      	mov	r7, r2
 80065b6:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80065b8:	6834      	ldr	r4, [r6, #0]
 80065ba:	69a4      	ldr	r4, [r4, #24]
 80065bc:	ea38 0404 	bics.w	r4, r8, r4
 80065c0:	bf0c      	ite	eq
 80065c2:	2401      	moveq	r4, #1
 80065c4:	2400      	movne	r4, #0
 80065c6:	42bc      	cmp	r4, r7
 80065c8:	d118      	bne.n	80065fc <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80065ca:	f1b5 3fff 	cmp.w	r5, #4294967295
 80065ce:	d0f3      	beq.n	80065b8 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065d0:	f7fe fe44 	bl	800525c <HAL_GetTick>
 80065d4:	9b06      	ldr	r3, [sp, #24]
 80065d6:	1ac0      	subs	r0, r0, r3
 80065d8:	42a8      	cmp	r0, r5
 80065da:	d801      	bhi.n	80065e0 <I2C_WaitOnFlagUntilTimeout+0x34>
 80065dc:	2d00      	cmp	r5, #0
 80065de:	d1eb      	bne.n	80065b8 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80065e0:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80065e2:	f043 0320 	orr.w	r3, r3, #32
 80065e6:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80065e8:	2320      	movs	r3, #32
 80065ea:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065ee:	2300      	movs	r3, #0
 80065f0:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80065f4:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 80065f8:	2001      	movs	r0, #1
 80065fa:	e000      	b.n	80065fe <I2C_WaitOnFlagUntilTimeout+0x52>
  return HAL_OK;
 80065fc:	2000      	movs	r0, #0
}
 80065fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006604 <I2C_RequestMemoryWrite>:
{
 8006604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006608:	b082      	sub	sp, #8
 800660a:	4604      	mov	r4, r0
 800660c:	4690      	mov	r8, r2
 800660e:	461d      	mov	r5, r3
 8006610:	9e08      	ldr	r6, [sp, #32]
 8006612:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006614:	4b19      	ldr	r3, [pc, #100]	; (800667c <I2C_RequestMemoryWrite+0x78>)
 8006616:	9300      	str	r3, [sp, #0]
 8006618:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800661c:	b2ea      	uxtb	r2, r5
 800661e:	f7ff fef0 	bl	8006402 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006622:	463a      	mov	r2, r7
 8006624:	4631      	mov	r1, r6
 8006626:	4620      	mov	r0, r4
 8006628:	f7ff ff95 	bl	8006556 <I2C_WaitOnTXISFlagUntilTimeout>
 800662c:	b9f8      	cbnz	r0, 800666e <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800662e:	2d01      	cmp	r5, #1
 8006630:	d10e      	bne.n	8006650 <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006632:	6823      	ldr	r3, [r4, #0]
 8006634:	fa5f f288 	uxtb.w	r2, r8
 8006638:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800663a:	9700      	str	r7, [sp, #0]
 800663c:	4633      	mov	r3, r6
 800663e:	2200      	movs	r2, #0
 8006640:	2180      	movs	r1, #128	; 0x80
 8006642:	4620      	mov	r0, r4
 8006644:	f7ff ffb2 	bl	80065ac <I2C_WaitOnFlagUntilTimeout>
 8006648:	b9a8      	cbnz	r0, 8006676 <I2C_RequestMemoryWrite+0x72>
}
 800664a:	b002      	add	sp, #8
 800664c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006650:	6823      	ldr	r3, [r4, #0]
 8006652:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8006656:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006658:	463a      	mov	r2, r7
 800665a:	4631      	mov	r1, r6
 800665c:	4620      	mov	r0, r4
 800665e:	f7ff ff7a 	bl	8006556 <I2C_WaitOnTXISFlagUntilTimeout>
 8006662:	b930      	cbnz	r0, 8006672 <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006664:	6823      	ldr	r3, [r4, #0]
 8006666:	fa5f f288 	uxtb.w	r2, r8
 800666a:	629a      	str	r2, [r3, #40]	; 0x28
 800666c:	e7e5      	b.n	800663a <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 800666e:	2001      	movs	r0, #1
 8006670:	e7eb      	b.n	800664a <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 8006672:	2001      	movs	r0, #1
 8006674:	e7e9      	b.n	800664a <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 8006676:	2001      	movs	r0, #1
 8006678:	e7e7      	b.n	800664a <I2C_RequestMemoryWrite+0x46>
 800667a:	bf00      	nop
 800667c:	80002000 	.word	0x80002000

08006680 <I2C_RequestMemoryRead>:
{
 8006680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006684:	b082      	sub	sp, #8
 8006686:	4604      	mov	r4, r0
 8006688:	4690      	mov	r8, r2
 800668a:	461d      	mov	r5, r3
 800668c:	9e08      	ldr	r6, [sp, #32]
 800668e:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006690:	4b18      	ldr	r3, [pc, #96]	; (80066f4 <I2C_RequestMemoryRead+0x74>)
 8006692:	9300      	str	r3, [sp, #0]
 8006694:	2300      	movs	r3, #0
 8006696:	b2ea      	uxtb	r2, r5
 8006698:	f7ff feb3 	bl	8006402 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800669c:	463a      	mov	r2, r7
 800669e:	4631      	mov	r1, r6
 80066a0:	4620      	mov	r0, r4
 80066a2:	f7ff ff58 	bl	8006556 <I2C_WaitOnTXISFlagUntilTimeout>
 80066a6:	b9f8      	cbnz	r0, 80066e8 <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80066a8:	2d01      	cmp	r5, #1
 80066aa:	d10e      	bne.n	80066ca <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80066ac:	6823      	ldr	r3, [r4, #0]
 80066ae:	fa5f f288 	uxtb.w	r2, r8
 80066b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80066b4:	9700      	str	r7, [sp, #0]
 80066b6:	4633      	mov	r3, r6
 80066b8:	2200      	movs	r2, #0
 80066ba:	2140      	movs	r1, #64	; 0x40
 80066bc:	4620      	mov	r0, r4
 80066be:	f7ff ff75 	bl	80065ac <I2C_WaitOnFlagUntilTimeout>
 80066c2:	b9a8      	cbnz	r0, 80066f0 <I2C_RequestMemoryRead+0x70>
}
 80066c4:	b002      	add	sp, #8
 80066c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80066ca:	6823      	ldr	r3, [r4, #0]
 80066cc:	ea4f 2218 	mov.w	r2, r8, lsr #8
 80066d0:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066d2:	463a      	mov	r2, r7
 80066d4:	4631      	mov	r1, r6
 80066d6:	4620      	mov	r0, r4
 80066d8:	f7ff ff3d 	bl	8006556 <I2C_WaitOnTXISFlagUntilTimeout>
 80066dc:	b930      	cbnz	r0, 80066ec <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80066de:	6823      	ldr	r3, [r4, #0]
 80066e0:	fa5f f288 	uxtb.w	r2, r8
 80066e4:	629a      	str	r2, [r3, #40]	; 0x28
 80066e6:	e7e5      	b.n	80066b4 <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 80066e8:	2001      	movs	r0, #1
 80066ea:	e7eb      	b.n	80066c4 <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 80066ec:	2001      	movs	r0, #1
 80066ee:	e7e9      	b.n	80066c4 <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 80066f0:	2001      	movs	r0, #1
 80066f2:	e7e7      	b.n	80066c4 <I2C_RequestMemoryRead+0x44>
 80066f4:	80002000 	.word	0x80002000

080066f8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80066f8:	b570      	push	{r4, r5, r6, lr}
 80066fa:	4605      	mov	r5, r0
 80066fc:	460c      	mov	r4, r1
 80066fe:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006700:	682b      	ldr	r3, [r5, #0]
 8006702:	699b      	ldr	r3, [r3, #24]
 8006704:	f013 0f20 	tst.w	r3, #32
 8006708:	d11a      	bne.n	8006740 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800670a:	4632      	mov	r2, r6
 800670c:	4621      	mov	r1, r4
 800670e:	4628      	mov	r0, r5
 8006710:	f7ff fe95 	bl	800643e <I2C_IsErrorOccurred>
 8006714:	b9b0      	cbnz	r0, 8006744 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006716:	f7fe fda1 	bl	800525c <HAL_GetTick>
 800671a:	1b80      	subs	r0, r0, r6
 800671c:	42a0      	cmp	r0, r4
 800671e:	d801      	bhi.n	8006724 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8006720:	2c00      	cmp	r4, #0
 8006722:	d1ed      	bne.n	8006700 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006724:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8006726:	f043 0320 	orr.w	r3, r3, #32
 800672a:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800672c:	2320      	movs	r3, #32
 800672e:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006732:	2300      	movs	r3, #0
 8006734:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006738:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 800673c:	2001      	movs	r0, #1
}
 800673e:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8006740:	2000      	movs	r0, #0
 8006742:	e7fc      	b.n	800673e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8006744:	2001      	movs	r0, #1
 8006746:	e7fa      	b.n	800673e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08006748 <HAL_I2C_MspInit>:
}
 8006748:	4770      	bx	lr
	...

0800674c <HAL_I2C_Init>:
  if (hi2c == NULL)
 800674c:	2800      	cmp	r0, #0
 800674e:	d057      	beq.n	8006800 <HAL_I2C_Init+0xb4>
{
 8006750:	b510      	push	{r4, lr}
 8006752:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006754:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006758:	2b00      	cmp	r3, #0
 800675a:	d041      	beq.n	80067e0 <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800675c:	2324      	movs	r3, #36	; 0x24
 800675e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8006762:	6822      	ldr	r2, [r4, #0]
 8006764:	6813      	ldr	r3, [r2, #0]
 8006766:	f023 0301 	bic.w	r3, r3, #1
 800676a:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800676c:	6863      	ldr	r3, [r4, #4]
 800676e:	6822      	ldr	r2, [r4, #0]
 8006770:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8006774:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006776:	6822      	ldr	r2, [r4, #0]
 8006778:	6893      	ldr	r3, [r2, #8]
 800677a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800677e:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006780:	68e3      	ldr	r3, [r4, #12]
 8006782:	2b01      	cmp	r3, #1
 8006784:	d031      	beq.n	80067ea <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006786:	68a3      	ldr	r3, [r4, #8]
 8006788:	6822      	ldr	r2, [r4, #0]
 800678a:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 800678e:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006790:	68e3      	ldr	r3, [r4, #12]
 8006792:	2b02      	cmp	r3, #2
 8006794:	d02f      	beq.n	80067f6 <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006796:	6822      	ldr	r2, [r4, #0]
 8006798:	6851      	ldr	r1, [r2, #4]
 800679a:	4b1a      	ldr	r3, [pc, #104]	; (8006804 <HAL_I2C_Init+0xb8>)
 800679c:	430b      	orrs	r3, r1
 800679e:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80067a0:	6822      	ldr	r2, [r4, #0]
 80067a2:	68d3      	ldr	r3, [r2, #12]
 80067a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80067a8:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80067aa:	6923      	ldr	r3, [r4, #16]
 80067ac:	6962      	ldr	r2, [r4, #20]
 80067ae:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80067b0:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80067b2:	6822      	ldr	r2, [r4, #0]
 80067b4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80067b8:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80067ba:	69e3      	ldr	r3, [r4, #28]
 80067bc:	6a21      	ldr	r1, [r4, #32]
 80067be:	6822      	ldr	r2, [r4, #0]
 80067c0:	430b      	orrs	r3, r1
 80067c2:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 80067c4:	6822      	ldr	r2, [r4, #0]
 80067c6:	6813      	ldr	r3, [r2, #0]
 80067c8:	f043 0301 	orr.w	r3, r3, #1
 80067cc:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067ce:	2000      	movs	r0, #0
 80067d0:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80067d2:	2320      	movs	r3, #32
 80067d4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80067d8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80067da:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80067de:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80067e0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80067e4:	f7ff ffb0 	bl	8006748 <HAL_I2C_MspInit>
 80067e8:	e7b8      	b.n	800675c <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80067ea:	68a3      	ldr	r3, [r4, #8]
 80067ec:	6822      	ldr	r2, [r4, #0]
 80067ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067f2:	6093      	str	r3, [r2, #8]
 80067f4:	e7cc      	b.n	8006790 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80067f6:	6823      	ldr	r3, [r4, #0]
 80067f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067fc:	605a      	str	r2, [r3, #4]
 80067fe:	e7ca      	b.n	8006796 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8006800:	2001      	movs	r0, #1
}
 8006802:	4770      	bx	lr
 8006804:	02008000 	.word	0x02008000

08006808 <HAL_I2C_Mem_Write>:
{
 8006808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800680c:	b083      	sub	sp, #12
 800680e:	460d      	mov	r5, r1
 8006810:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8006814:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006816:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 800681a:	b2c9      	uxtb	r1, r1
 800681c:	2920      	cmp	r1, #32
 800681e:	f040 80bc 	bne.w	800699a <HAL_I2C_Mem_Write+0x192>
 8006822:	4604      	mov	r4, r0
 8006824:	4690      	mov	r8, r2
 8006826:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8006828:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800682a:	f1ba 0f00 	cmp.w	sl, #0
 800682e:	bf18      	it	ne
 8006830:	2b00      	cmpne	r3, #0
 8006832:	d016      	beq.n	8006862 <HAL_I2C_Mem_Write+0x5a>
    __HAL_LOCK(hi2c);
 8006834:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8006838:	2b01      	cmp	r3, #1
 800683a:	f000 80b2 	beq.w	80069a2 <HAL_I2C_Mem_Write+0x19a>
 800683e:	f04f 0b01 	mov.w	fp, #1
 8006842:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8006846:	f7fe fd09 	bl	800525c <HAL_GetTick>
 800684a:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800684c:	9000      	str	r0, [sp, #0]
 800684e:	2319      	movs	r3, #25
 8006850:	465a      	mov	r2, fp
 8006852:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006856:	4620      	mov	r0, r4
 8006858:	f7ff fea8 	bl	80065ac <I2C_WaitOnFlagUntilTimeout>
 800685c:	b130      	cbz	r0, 800686c <HAL_I2C_Mem_Write+0x64>
      return HAL_ERROR;
 800685e:	2001      	movs	r0, #1
 8006860:	e09c      	b.n	800699c <HAL_I2C_Mem_Write+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006862:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006866:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8006868:	2001      	movs	r0, #1
 800686a:	e097      	b.n	800699c <HAL_I2C_Mem_Write+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800686c:	2321      	movs	r3, #33	; 0x21
 800686e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006872:	2340      	movs	r3, #64	; 0x40
 8006874:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006878:	2300      	movs	r3, #0
 800687a:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800687c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800687e:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8006880:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006884:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006886:	9601      	str	r6, [sp, #4]
 8006888:	9700      	str	r7, [sp, #0]
 800688a:	464b      	mov	r3, r9
 800688c:	4642      	mov	r2, r8
 800688e:	4629      	mov	r1, r5
 8006890:	4620      	mov	r0, r4
 8006892:	f7ff feb7 	bl	8006604 <I2C_RequestMemoryWrite>
 8006896:	b970      	cbnz	r0, 80068b6 <HAL_I2C_Mem_Write+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006898:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800689a:	b29b      	uxth	r3, r3
 800689c:	2bff      	cmp	r3, #255	; 0xff
 800689e:	d90f      	bls.n	80068c0 <HAL_I2C_Mem_Write+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80068a0:	22ff      	movs	r2, #255	; 0xff
 80068a2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80068a4:	2300      	movs	r3, #0
 80068a6:	9300      	str	r3, [sp, #0]
 80068a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80068ac:	4629      	mov	r1, r5
 80068ae:	4620      	mov	r0, r4
 80068b0:	f7ff fda7 	bl	8006402 <I2C_TransferConfig>
 80068b4:	e021      	b.n	80068fa <HAL_I2C_Mem_Write+0xf2>
      __HAL_UNLOCK(hi2c);
 80068b6:	2300      	movs	r3, #0
 80068b8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80068bc:	4658      	mov	r0, fp
 80068be:	e06d      	b.n	800699c <HAL_I2C_Mem_Write+0x194>
      hi2c->XferSize = hi2c->XferCount;
 80068c0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80068c2:	b292      	uxth	r2, r2
 80068c4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80068c6:	2300      	movs	r3, #0
 80068c8:	9300      	str	r3, [sp, #0]
 80068ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80068ce:	b2d2      	uxtb	r2, r2
 80068d0:	4629      	mov	r1, r5
 80068d2:	4620      	mov	r0, r4
 80068d4:	f7ff fd95 	bl	8006402 <I2C_TransferConfig>
 80068d8:	e00f      	b.n	80068fa <HAL_I2C_Mem_Write+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 80068da:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80068dc:	b292      	uxth	r2, r2
 80068de:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80068e0:	2300      	movs	r3, #0
 80068e2:	9300      	str	r3, [sp, #0]
 80068e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80068e8:	b2d2      	uxtb	r2, r2
 80068ea:	4629      	mov	r1, r5
 80068ec:	4620      	mov	r0, r4
 80068ee:	f7ff fd88 	bl	8006402 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80068f2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d033      	beq.n	8006962 <HAL_I2C_Mem_Write+0x15a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068fa:	4632      	mov	r2, r6
 80068fc:	4639      	mov	r1, r7
 80068fe:	4620      	mov	r0, r4
 8006900:	f7ff fe29 	bl	8006556 <I2C_WaitOnTXISFlagUntilTimeout>
 8006904:	2800      	cmp	r0, #0
 8006906:	d14e      	bne.n	80069a6 <HAL_I2C_Mem_Write+0x19e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006908:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800690a:	6823      	ldr	r3, [r4, #0]
 800690c:	7812      	ldrb	r2, [r2, #0]
 800690e:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8006910:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006912:	3301      	adds	r3, #1
 8006914:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8006916:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006918:	b29b      	uxth	r3, r3
 800691a:	3b01      	subs	r3, #1
 800691c:	b29b      	uxth	r3, r3
 800691e:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8006920:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006922:	3b01      	subs	r3, #1
 8006924:	b29b      	uxth	r3, r3
 8006926:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006928:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800692a:	b292      	uxth	r2, r2
 800692c:	2a00      	cmp	r2, #0
 800692e:	d0e0      	beq.n	80068f2 <HAL_I2C_Mem_Write+0xea>
 8006930:	2b00      	cmp	r3, #0
 8006932:	d1de      	bne.n	80068f2 <HAL_I2C_Mem_Write+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006934:	9600      	str	r6, [sp, #0]
 8006936:	463b      	mov	r3, r7
 8006938:	2200      	movs	r2, #0
 800693a:	2180      	movs	r1, #128	; 0x80
 800693c:	4620      	mov	r0, r4
 800693e:	f7ff fe35 	bl	80065ac <I2C_WaitOnFlagUntilTimeout>
 8006942:	bb90      	cbnz	r0, 80069aa <HAL_I2C_Mem_Write+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006944:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006946:	b29b      	uxth	r3, r3
 8006948:	2bff      	cmp	r3, #255	; 0xff
 800694a:	d9c6      	bls.n	80068da <HAL_I2C_Mem_Write+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800694c:	22ff      	movs	r2, #255	; 0xff
 800694e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006950:	2300      	movs	r3, #0
 8006952:	9300      	str	r3, [sp, #0]
 8006954:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006958:	4629      	mov	r1, r5
 800695a:	4620      	mov	r0, r4
 800695c:	f7ff fd51 	bl	8006402 <I2C_TransferConfig>
 8006960:	e7c7      	b.n	80068f2 <HAL_I2C_Mem_Write+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006962:	4632      	mov	r2, r6
 8006964:	4639      	mov	r1, r7
 8006966:	4620      	mov	r0, r4
 8006968:	f7ff fec6 	bl	80066f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800696c:	b9f8      	cbnz	r0, 80069ae <HAL_I2C_Mem_Write+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800696e:	6823      	ldr	r3, [r4, #0]
 8006970:	2220      	movs	r2, #32
 8006972:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8006974:	6821      	ldr	r1, [r4, #0]
 8006976:	684b      	ldr	r3, [r1, #4]
 8006978:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800697c:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8006980:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8006984:	f023 0301 	bic.w	r3, r3, #1
 8006988:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800698a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800698e:	2300      	movs	r3, #0
 8006990:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8006994:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8006998:	e000      	b.n	800699c <HAL_I2C_Mem_Write+0x194>
    return HAL_BUSY;
 800699a:	2002      	movs	r0, #2
}
 800699c:	b003      	add	sp, #12
 800699e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80069a2:	2002      	movs	r0, #2
 80069a4:	e7fa      	b.n	800699c <HAL_I2C_Mem_Write+0x194>
        return HAL_ERROR;
 80069a6:	2001      	movs	r0, #1
 80069a8:	e7f8      	b.n	800699c <HAL_I2C_Mem_Write+0x194>
          return HAL_ERROR;
 80069aa:	2001      	movs	r0, #1
 80069ac:	e7f6      	b.n	800699c <HAL_I2C_Mem_Write+0x194>
      return HAL_ERROR;
 80069ae:	2001      	movs	r0, #1
 80069b0:	e7f4      	b.n	800699c <HAL_I2C_Mem_Write+0x194>
	...

080069b4 <HAL_I2C_Mem_Read>:
{
 80069b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069b8:	b083      	sub	sp, #12
 80069ba:	460d      	mov	r5, r1
 80069bc:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 80069c0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80069c2:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 80069c6:	b2c9      	uxtb	r1, r1
 80069c8:	2920      	cmp	r1, #32
 80069ca:	f040 80bd 	bne.w	8006b48 <HAL_I2C_Mem_Read+0x194>
 80069ce:	4604      	mov	r4, r0
 80069d0:	4690      	mov	r8, r2
 80069d2:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 80069d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80069d6:	f1ba 0f00 	cmp.w	sl, #0
 80069da:	bf18      	it	ne
 80069dc:	2b00      	cmpne	r3, #0
 80069de:	d016      	beq.n	8006a0e <HAL_I2C_Mem_Read+0x5a>
    __HAL_LOCK(hi2c);
 80069e0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	f000 80b3 	beq.w	8006b50 <HAL_I2C_Mem_Read+0x19c>
 80069ea:	f04f 0b01 	mov.w	fp, #1
 80069ee:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80069f2:	f7fe fc33 	bl	800525c <HAL_GetTick>
 80069f6:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80069f8:	9000      	str	r0, [sp, #0]
 80069fa:	2319      	movs	r3, #25
 80069fc:	465a      	mov	r2, fp
 80069fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006a02:	4620      	mov	r0, r4
 8006a04:	f7ff fdd2 	bl	80065ac <I2C_WaitOnFlagUntilTimeout>
 8006a08:	b130      	cbz	r0, 8006a18 <HAL_I2C_Mem_Read+0x64>
      return HAL_ERROR;
 8006a0a:	2001      	movs	r0, #1
 8006a0c:	e09d      	b.n	8006b4a <HAL_I2C_Mem_Read+0x196>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006a0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a12:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8006a14:	2001      	movs	r0, #1
 8006a16:	e098      	b.n	8006b4a <HAL_I2C_Mem_Read+0x196>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006a18:	2322      	movs	r3, #34	; 0x22
 8006a1a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006a1e:	2340      	movs	r3, #64	; 0x40
 8006a20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a24:	2300      	movs	r3, #0
 8006a26:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8006a28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a2a:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8006a2c:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006a30:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006a32:	9601      	str	r6, [sp, #4]
 8006a34:	9700      	str	r7, [sp, #0]
 8006a36:	464b      	mov	r3, r9
 8006a38:	4642      	mov	r2, r8
 8006a3a:	4629      	mov	r1, r5
 8006a3c:	4620      	mov	r0, r4
 8006a3e:	f7ff fe1f 	bl	8006680 <I2C_RequestMemoryRead>
 8006a42:	b970      	cbnz	r0, 8006a62 <HAL_I2C_Mem_Read+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a44:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	2bff      	cmp	r3, #255	; 0xff
 8006a4a:	d90f      	bls.n	8006a6c <HAL_I2C_Mem_Read+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a4c:	22ff      	movs	r2, #255	; 0xff
 8006a4e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006a50:	4b43      	ldr	r3, [pc, #268]	; (8006b60 <HAL_I2C_Mem_Read+0x1ac>)
 8006a52:	9300      	str	r3, [sp, #0]
 8006a54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a58:	4629      	mov	r1, r5
 8006a5a:	4620      	mov	r0, r4
 8006a5c:	f7ff fcd1 	bl	8006402 <I2C_TransferConfig>
 8006a60:	e021      	b.n	8006aa6 <HAL_I2C_Mem_Read+0xf2>
      __HAL_UNLOCK(hi2c);
 8006a62:	2300      	movs	r3, #0
 8006a64:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8006a68:	4658      	mov	r0, fp
 8006a6a:	e06e      	b.n	8006b4a <HAL_I2C_Mem_Read+0x196>
      hi2c->XferSize = hi2c->XferCount;
 8006a6c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8006a6e:	b292      	uxth	r2, r2
 8006a70:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006a72:	4b3b      	ldr	r3, [pc, #236]	; (8006b60 <HAL_I2C_Mem_Read+0x1ac>)
 8006a74:	9300      	str	r3, [sp, #0]
 8006a76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006a7a:	b2d2      	uxtb	r2, r2
 8006a7c:	4629      	mov	r1, r5
 8006a7e:	4620      	mov	r0, r4
 8006a80:	f7ff fcbf 	bl	8006402 <I2C_TransferConfig>
 8006a84:	e00f      	b.n	8006aa6 <HAL_I2C_Mem_Read+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 8006a86:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8006a88:	b292      	uxth	r2, r2
 8006a8a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	9300      	str	r3, [sp, #0]
 8006a90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006a94:	b2d2      	uxtb	r2, r2
 8006a96:	4629      	mov	r1, r5
 8006a98:	4620      	mov	r0, r4
 8006a9a:	f7ff fcb2 	bl	8006402 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8006a9e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d034      	beq.n	8006b10 <HAL_I2C_Mem_Read+0x15c>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006aa6:	9600      	str	r6, [sp, #0]
 8006aa8:	463b      	mov	r3, r7
 8006aaa:	2200      	movs	r2, #0
 8006aac:	2104      	movs	r1, #4
 8006aae:	4620      	mov	r0, r4
 8006ab0:	f7ff fd7c 	bl	80065ac <I2C_WaitOnFlagUntilTimeout>
 8006ab4:	2800      	cmp	r0, #0
 8006ab6:	d14d      	bne.n	8006b54 <HAL_I2C_Mem_Read+0x1a0>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006ab8:	6823      	ldr	r3, [r4, #0]
 8006aba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006abc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006abe:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8006ac0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8006ac6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8006ac8:	3a01      	subs	r2, #1
 8006aca:	b292      	uxth	r2, r2
 8006acc:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006ace:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	3b01      	subs	r3, #1
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006ad8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d0de      	beq.n	8006a9e <HAL_I2C_Mem_Read+0xea>
 8006ae0:	2a00      	cmp	r2, #0
 8006ae2:	d1dc      	bne.n	8006a9e <HAL_I2C_Mem_Read+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006ae4:	9600      	str	r6, [sp, #0]
 8006ae6:	463b      	mov	r3, r7
 8006ae8:	2180      	movs	r1, #128	; 0x80
 8006aea:	4620      	mov	r0, r4
 8006aec:	f7ff fd5e 	bl	80065ac <I2C_WaitOnFlagUntilTimeout>
 8006af0:	bb90      	cbnz	r0, 8006b58 <HAL_I2C_Mem_Read+0x1a4>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006af2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	2bff      	cmp	r3, #255	; 0xff
 8006af8:	d9c5      	bls.n	8006a86 <HAL_I2C_Mem_Read+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006afa:	22ff      	movs	r2, #255	; 0xff
 8006afc:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006afe:	2300      	movs	r3, #0
 8006b00:	9300      	str	r3, [sp, #0]
 8006b02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b06:	4629      	mov	r1, r5
 8006b08:	4620      	mov	r0, r4
 8006b0a:	f7ff fc7a 	bl	8006402 <I2C_TransferConfig>
 8006b0e:	e7c6      	b.n	8006a9e <HAL_I2C_Mem_Read+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b10:	4632      	mov	r2, r6
 8006b12:	4639      	mov	r1, r7
 8006b14:	4620      	mov	r0, r4
 8006b16:	f7ff fdef 	bl	80066f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006b1a:	b9f8      	cbnz	r0, 8006b5c <HAL_I2C_Mem_Read+0x1a8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b1c:	6823      	ldr	r3, [r4, #0]
 8006b1e:	2220      	movs	r2, #32
 8006b20:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8006b22:	6821      	ldr	r1, [r4, #0]
 8006b24:	684b      	ldr	r3, [r1, #4]
 8006b26:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8006b2a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8006b2e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8006b32:	f023 0301 	bic.w	r3, r3, #1
 8006b36:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006b38:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8006b42:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8006b46:	e000      	b.n	8006b4a <HAL_I2C_Mem_Read+0x196>
    return HAL_BUSY;
 8006b48:	2002      	movs	r0, #2
}
 8006b4a:	b003      	add	sp, #12
 8006b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8006b50:	2002      	movs	r0, #2
 8006b52:	e7fa      	b.n	8006b4a <HAL_I2C_Mem_Read+0x196>
        return HAL_ERROR;
 8006b54:	2001      	movs	r0, #1
 8006b56:	e7f8      	b.n	8006b4a <HAL_I2C_Mem_Read+0x196>
          return HAL_ERROR;
 8006b58:	2001      	movs	r0, #1
 8006b5a:	e7f6      	b.n	8006b4a <HAL_I2C_Mem_Read+0x196>
      return HAL_ERROR;
 8006b5c:	2001      	movs	r0, #1
 8006b5e:	e7f4      	b.n	8006b4a <HAL_I2C_Mem_Read+0x196>
 8006b60:	80002400 	.word	0x80002400

08006b64 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006b64:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b66:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8006b6a:	b2d2      	uxtb	r2, r2
 8006b6c:	2a20      	cmp	r2, #32
 8006b6e:	d123      	bne.n	8006bb8 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b70:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8006b74:	2a01      	cmp	r2, #1
 8006b76:	d021      	beq.n	8006bbc <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b7e:	2224      	movs	r2, #36	; 0x24
 8006b80:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b84:	6800      	ldr	r0, [r0, #0]
 8006b86:	6802      	ldr	r2, [r0, #0]
 8006b88:	f022 0201 	bic.w	r2, r2, #1
 8006b8c:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006b8e:	6818      	ldr	r0, [r3, #0]
 8006b90:	6802      	ldr	r2, [r0, #0]
 8006b92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006b96:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006b98:	6818      	ldr	r0, [r3, #0]
 8006b9a:	6802      	ldr	r2, [r0, #0]
 8006b9c:	4311      	orrs	r1, r2
 8006b9e:	6001      	str	r1, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006ba0:	6819      	ldr	r1, [r3, #0]
 8006ba2:	680a      	ldr	r2, [r1, #0]
 8006ba4:	f042 0201 	orr.w	r2, r2, #1
 8006ba8:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006baa:	2220      	movs	r2, #32
 8006bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bb0:	2000      	movs	r0, #0
 8006bb2:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 8006bb6:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8006bb8:	2002      	movs	r0, #2
 8006bba:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8006bbc:	2002      	movs	r0, #2
  }
}
 8006bbe:	4770      	bx	lr

08006bc0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006bc0:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bc2:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8006bc6:	b2d2      	uxtb	r2, r2
 8006bc8:	2a20      	cmp	r2, #32
 8006bca:	d121      	bne.n	8006c10 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bcc:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8006bd0:	2a01      	cmp	r2, #1
 8006bd2:	d01f      	beq.n	8006c14 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006bda:	2224      	movs	r2, #36	; 0x24
 8006bdc:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006be0:	6800      	ldr	r0, [r0, #0]
 8006be2:	6802      	ldr	r2, [r0, #0]
 8006be4:	f022 0201 	bic.w	r2, r2, #1
 8006be8:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006bea:	6818      	ldr	r0, [r3, #0]
 8006bec:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006bee:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006bf2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006bf6:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006bf8:	6819      	ldr	r1, [r3, #0]
 8006bfa:	680a      	ldr	r2, [r1, #0]
 8006bfc:	f042 0201 	orr.w	r2, r2, #1
 8006c00:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c02:	2220      	movs	r2, #32
 8006c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c08:	2000      	movs	r0, #0
 8006c0a:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 8006c0e:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8006c10:	2002      	movs	r0, #2
 8006c12:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8006c14:	2002      	movs	r0, #2
  }
}
 8006c16:	4770      	bx	lr

08006c18 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006c18:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006c1a:	684d      	ldr	r5, [r1, #4]
 8006c1c:	6803      	ldr	r3, [r0, #0]
 8006c1e:	68dc      	ldr	r4, [r3, #12]
 8006c20:	f3c4 440b 	ubfx	r4, r4, #16, #12
 8006c24:	4425      	add	r5, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006c26:	ea4f 1cc2 	mov.w	ip, r2, lsl #7
 8006c2a:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8006c2e:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 8006c32:	f404 4470 	and.w	r4, r4, #61440	; 0xf000
 8006c36:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006c3a:	680b      	ldr	r3, [r1, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006c3c:	6804      	ldr	r4, [r0, #0]
 8006c3e:	68e6      	ldr	r6, [r4, #12]
 8006c40:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006c44:	4433      	add	r3, r6
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006c46:	3301      	adds	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006c48:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006c4c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006c50:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006c54:	68cd      	ldr	r5, [r1, #12]
 8006c56:	6803      	ldr	r3, [r0, #0]
 8006c58:	68dc      	ldr	r4, [r3, #12]
 8006c5a:	f3c4 040a 	ubfx	r4, r4, #0, #11
 8006c5e:	4425      	add	r5, r4
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006c60:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8006c64:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8006c68:	f404 4470 	and.w	r4, r4, #61440	; 0xf000
 8006c6c:	f8c3 408c 	str.w	r4, [r3, #140]	; 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006c70:	688b      	ldr	r3, [r1, #8]
 8006c72:	6804      	ldr	r4, [r0, #0]
 8006c74:	68e6      	ldr	r6, [r4, #12]
 8006c76:	f3c6 0e0a 	ubfx	lr, r6, #0, #11
 8006c7a:	4473      	add	r3, lr
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 8006c82:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8006c86:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006c8a:	6803      	ldr	r3, [r0, #0]
 8006c8c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8006c90:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 8006c94:	f024 0407 	bic.w	r4, r4, #7
 8006c98:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006c9c:	6803      	ldr	r3, [r0, #0]
 8006c9e:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8006ca2:	690c      	ldr	r4, [r1, #16]
 8006ca4:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006ca8:	f891 e031 	ldrb.w	lr, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006cac:	f891 6032 	ldrb.w	r6, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006cb0:	698d      	ldr	r5, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006cb2:	6803      	ldr	r3, [r0, #0]
 8006cb4:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8006cb8:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
 8006cbc:	2400      	movs	r4, #0
 8006cbe:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006cc2:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 8006cc6:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 8006cca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8006cce:	6806      	ldr	r6, [r0, #0]
 8006cd0:	eb06 1ec2 	add.w	lr, r6, r2, lsl #7
 8006cd4:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8006cd8:	f8ce 309c 	str.w	r3, [lr, #156]	; 0x9c
 8006cdc:	f10e 0e84 	add.w	lr, lr, #132	; 0x84

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006ce0:	6803      	ldr	r3, [r0, #0]
 8006ce2:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8006ce6:	f8d3 5098 	ldr.w	r5, [r3, #152]	; 0x98
 8006cea:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8006cee:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006cf2:	6803      	ldr	r3, [r0, #0]
 8006cf4:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8006cf8:	694d      	ldr	r5, [r1, #20]
 8006cfa:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006cfe:	6803      	ldr	r3, [r0, #0]
 8006d00:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8006d04:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 8006d08:	4d2d      	ldr	r5, [pc, #180]	; (8006dc0 <LTDC_SetConfig+0x1a8>)
 8006d0a:	4035      	ands	r5, r6
 8006d0c:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006d10:	6a0d      	ldr	r5, [r1, #32]
 8006d12:	6803      	ldr	r3, [r0, #0]
 8006d14:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8006d18:	69ce      	ldr	r6, [r1, #28]
 8006d1a:	4335      	orrs	r5, r6
 8006d1c:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006d20:	6803      	ldr	r3, [r0, #0]
 8006d22:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8006d26:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 8006d2a:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006d2e:	6803      	ldr	r3, [r0, #0]
 8006d30:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8006d34:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8006d36:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006d3a:	690b      	ldr	r3, [r1, #16]
 8006d3c:	b183      	cbz	r3, 8006d60 <LTDC_SetConfig+0x148>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	2b06      	cmp	r3, #6
 8006d42:	d805      	bhi.n	8006d50 <LTDC_SetConfig+0x138>
 8006d44:	e8df f003 	tbb	[pc, r3]
 8006d48:	0608063a 	.word	0x0608063a
 8006d4c:	0404      	.short	0x0404
 8006d4e:	0a          	.byte	0x0a
 8006d4f:	00          	.byte	0x00
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006d50:	2501      	movs	r5, #1
 8006d52:	e006      	b.n	8006d62 <LTDC_SetConfig+0x14a>
 8006d54:	2502      	movs	r5, #2
 8006d56:	e004      	b.n	8006d62 <LTDC_SetConfig+0x14a>
 8006d58:	2502      	movs	r5, #2
 8006d5a:	e002      	b.n	8006d62 <LTDC_SetConfig+0x14a>
 8006d5c:	2502      	movs	r5, #2
 8006d5e:	e000      	b.n	8006d62 <LTDC_SetConfig+0x14a>
    tmp = 4U;
 8006d60:	2504      	movs	r5, #4
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006d62:	6803      	ldr	r3, [r0, #0]
 8006d64:	4463      	add	r3, ip
 8006d66:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006d6a:	f002 22e0 	and.w	r2, r2, #3758153728	; 0xe000e000
 8006d6e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006d72:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8006d74:	fb05 f403 	mul.w	r4, r5, r3
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006d78:	684b      	ldr	r3, [r1, #4]
 8006d7a:	680a      	ldr	r2, [r1, #0]
 8006d7c:	1a9b      	subs	r3, r3, r2
 8006d7e:	fb05 f303 	mul.w	r3, r5, r3
 8006d82:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006d84:	6802      	ldr	r2, [r0, #0]
 8006d86:	4462      	add	r2, ip
 8006d88:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006d8c:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006d90:	6803      	ldr	r3, [r0, #0]
 8006d92:	4463      	add	r3, ip
 8006d94:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8006d98:	4a0a      	ldr	r2, [pc, #40]	; (8006dc4 <LTDC_SetConfig+0x1ac>)
 8006d9a:	4022      	ands	r2, r4
 8006d9c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006da0:	6803      	ldr	r3, [r0, #0]
 8006da2:	4463      	add	r3, ip
 8006da4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8006da6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006daa:	6803      	ldr	r3, [r0, #0]
 8006dac:	4463      	add	r3, ip
 8006dae:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006db2:	f042 0201 	orr.w	r2, r2, #1
 8006db6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8006dba:	bd70      	pop	{r4, r5, r6, pc}
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006dbc:	2503      	movs	r5, #3
 8006dbe:	e7d0      	b.n	8006d62 <LTDC_SetConfig+0x14a>
 8006dc0:	fffff8f8 	.word	0xfffff8f8
 8006dc4:	fffff800 	.word	0xfffff800

08006dc8 <HAL_LTDC_MspInit>:
}
 8006dc8:	4770      	bx	lr
	...

08006dcc <HAL_LTDC_Init>:
  if (hltdc == NULL)
 8006dcc:	2800      	cmp	r0, #0
 8006dce:	d072      	beq.n	8006eb6 <HAL_LTDC_Init+0xea>
{
 8006dd0:	b538      	push	{r3, r4, r5, lr}
 8006dd2:	4604      	mov	r4, r0
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006dd4:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d067      	beq.n	8006eac <HAL_LTDC_Init+0xe0>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006ddc:	2302      	movs	r3, #2
 8006dde:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006de2:	6822      	ldr	r2, [r4, #0]
 8006de4:	6993      	ldr	r3, [r2, #24]
 8006de6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006dea:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006dec:	6821      	ldr	r1, [r4, #0]
 8006dee:	698a      	ldr	r2, [r1, #24]
 8006df0:	6863      	ldr	r3, [r4, #4]
 8006df2:	68a0      	ldr	r0, [r4, #8]
 8006df4:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006df6:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006df8:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006dfa:	6920      	ldr	r0, [r4, #16]
 8006dfc:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006e02:	6821      	ldr	r1, [r4, #0]
 8006e04:	688a      	ldr	r2, [r1, #8]
 8006e06:	4b2d      	ldr	r3, [pc, #180]	; (8006ebc <HAL_LTDC_Init+0xf0>)
 8006e08:	401a      	ands	r2, r3
 8006e0a:	608a      	str	r2, [r1, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006e0c:	6820      	ldr	r0, [r4, #0]
 8006e0e:	6882      	ldr	r2, [r0, #8]
 8006e10:	69a1      	ldr	r1, [r4, #24]
 8006e12:	6965      	ldr	r5, [r4, #20]
 8006e14:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8006e18:	430a      	orrs	r2, r1
 8006e1a:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006e1c:	6821      	ldr	r1, [r4, #0]
 8006e1e:	68ca      	ldr	r2, [r1, #12]
 8006e20:	401a      	ands	r2, r3
 8006e22:	60ca      	str	r2, [r1, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006e24:	6820      	ldr	r0, [r4, #0]
 8006e26:	68c2      	ldr	r2, [r0, #12]
 8006e28:	6a21      	ldr	r1, [r4, #32]
 8006e2a:	69e5      	ldr	r5, [r4, #28]
 8006e2c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8006e30:	430a      	orrs	r2, r1
 8006e32:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006e34:	6821      	ldr	r1, [r4, #0]
 8006e36:	690a      	ldr	r2, [r1, #16]
 8006e38:	401a      	ands	r2, r3
 8006e3a:	610a      	str	r2, [r1, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006e3c:	6820      	ldr	r0, [r4, #0]
 8006e3e:	6902      	ldr	r2, [r0, #16]
 8006e40:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006e42:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006e44:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8006e48:	430a      	orrs	r2, r1
 8006e4a:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006e4c:	6821      	ldr	r1, [r4, #0]
 8006e4e:	694a      	ldr	r2, [r1, #20]
 8006e50:	4013      	ands	r3, r2
 8006e52:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006e54:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006e56:	6821      	ldr	r1, [r4, #0]
 8006e58:	694b      	ldr	r3, [r1, #20]
 8006e5a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006e5c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8006e60:	4313      	orrs	r3, r2
 8006e62:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006e64:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006e68:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8006e6c:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006e6e:	6821      	ldr	r1, [r4, #0]
 8006e70:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8006e72:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006e76:	62ca      	str	r2, [r1, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006e78:	6821      	ldr	r1, [r4, #0]
 8006e7a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8006e7c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8006e80:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8006e84:	4303      	orrs	r3, r0
 8006e86:	4313      	orrs	r3, r2
 8006e88:	62cb      	str	r3, [r1, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006e8a:	6822      	ldr	r2, [r4, #0]
 8006e8c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8006e8e:	f043 0306 	orr.w	r3, r3, #6
 8006e92:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8006e94:	6822      	ldr	r2, [r4, #0]
 8006e96:	6993      	ldr	r3, [r2, #24]
 8006e98:	f043 0301 	orr.w	r3, r3, #1
 8006e9c:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006e9e:	2000      	movs	r0, #0
 8006ea0:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8006eaa:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 8006eac:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8006eb0:	f7ff ff8a 	bl	8006dc8 <HAL_LTDC_MspInit>
 8006eb4:	e792      	b.n	8006ddc <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 8006eb6:	2001      	movs	r0, #1
}
 8006eb8:	4770      	bx	lr
 8006eba:	bf00      	nop
 8006ebc:	f000f800 	.word	0xf000f800

08006ec0 <HAL_LTDC_ConfigLayer>:
{
 8006ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 8006ec2:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d02c      	beq.n	8006f24 <HAL_LTDC_ConfigLayer+0x64>
 8006eca:	4604      	mov	r4, r0
 8006ecc:	460d      	mov	r5, r1
 8006ece:	4616      	mov	r6, r2
 8006ed0:	2701      	movs	r7, #1
 8006ed2:	f880 70a0 	strb.w	r7, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006ed6:	2302      	movs	r3, #2
 8006ed8:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006edc:	f04f 0c34 	mov.w	ip, #52	; 0x34
 8006ee0:	fb0c 0c02 	mla	ip, ip, r2, r0
 8006ee4:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
 8006ee8:	468e      	mov	lr, r1
 8006eea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8006eee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8006ef2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8006ef6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8006efa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8006efe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8006f02:	f8de 3000 	ldr.w	r3, [lr]
 8006f06:	f8cc 3000 	str.w	r3, [ip]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006f0a:	4632      	mov	r2, r6
 8006f0c:	4629      	mov	r1, r5
 8006f0e:	4620      	mov	r0, r4
 8006f10:	f7ff fe82 	bl	8006c18 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006f14:	6823      	ldr	r3, [r4, #0]
 8006f16:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006f18:	f884 70a1 	strb.w	r7, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8006f1c:	2000      	movs	r0, #0
 8006f1e:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8006f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hltdc);
 8006f24:	2002      	movs	r0, #2
 8006f26:	e7fc      	b.n	8006f22 <HAL_LTDC_ConfigLayer+0x62>

08006f28 <HAL_LTDCEx_StructInitFromVideoConfig>:

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == \
 8006f28:	6a4b      	ldr	r3, [r1, #36]	; 0x24
                            DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 8006f2a:	b10b      	cbz	r3, 8006f30 <HAL_LTDCEx_StructInitFromVideoConfig+0x8>
 8006f2c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == \
 8006f30:	60c3      	str	r3, [r0, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 8006f32:	6a0b      	ldr	r3, [r1, #32]
 8006f34:	bb0b      	cbnz	r3, 8006f7a <HAL_LTDCEx_StructInitFromVideoConfig+0x52>
 8006f36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006f3a:	6083      	str	r3, [r0, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 8006f3c:	69cb      	ldr	r3, [r1, #28]
 8006f3e:	b9f3      	cbnz	r3, 8006f7e <HAL_LTDCEx_StructInitFromVideoConfig+0x56>
 8006f40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006f44:	6043      	str	r3, [r0, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 8006f46:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8006f48:	3b01      	subs	r3, #1
 8006f4a:	6183      	str	r3, [r0, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 8006f4c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8006f4e:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 8006f50:	4413      	add	r3, r2
 8006f52:	3b01      	subs	r3, #1
 8006f54:	6203      	str	r3, [r0, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8006f56:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8006f58:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 8006f5a:	4413      	add	r3, r2
                                   VidCfg->VerticalActive - 1U;
 8006f5c:	6c0a      	ldr	r2, [r1, #64]	; 0x40
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8006f5e:	4413      	add	r3, r2
                                   VidCfg->VerticalActive - 1U;
 8006f60:	3b01      	subs	r3, #1
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8006f62:	6283      	str	r3, [r0, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8006f64:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8006f66:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 8006f68:	4413      	add	r3, r2
                                   VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 8006f6a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8006f6c:	4413      	add	r3, r2
                                   VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 8006f6e:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8006f70:	4413      	add	r3, r2
 8006f72:	3b01      	subs	r3, #1
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8006f74:	6303      	str	r3, [r0, #48]	; 0x30

  return HAL_OK;
}
 8006f76:	2000      	movs	r0, #0
 8006f78:	4770      	bx	lr
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	e7dd      	b.n	8006f3a <HAL_LTDCEx_StructInitFromVideoConfig+0x12>
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	e7e0      	b.n	8006f44 <HAL_LTDCEx_StructInitFromVideoConfig+0x1c>
	...

08006f84 <HAL_PWREx_EnableOverDrive>:
 *         critical tasks and when the system clock source is either HSI or HSE. 
 *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
 *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void) {
 8006f84:	b510      	push	{r4, lr}
 8006f86:	b082      	sub	sp, #8
	uint32_t tickstart = 0;

	__HAL_RCC_PWR_CLK_ENABLE();
 8006f88:	4b1b      	ldr	r3, [pc, #108]	; (8006ff8 <HAL_PWREx_EnableOverDrive+0x74>)
 8006f8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f8c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006f90:	641a      	str	r2, [r3, #64]	; 0x40
 8006f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f98:	9301      	str	r3, [sp, #4]
 8006f9a:	9b01      	ldr	r3, [sp, #4]

	/* Enable the Over-drive to extend the clock frequency to 216 MHz */
	__HAL_PWR_OVERDRIVE_ENABLE();
 8006f9c:	4a17      	ldr	r2, [pc, #92]	; (8006ffc <HAL_PWREx_EnableOverDrive+0x78>)
 8006f9e:	6813      	ldr	r3, [r2, #0]
 8006fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fa4:	6013      	str	r3, [r2, #0]

	/* Get tick */
	tickstart = HAL_GetTick();
 8006fa6:	f7fe f959 	bl	800525c <HAL_GetTick>
 8006faa:	4604      	mov	r4, r0

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY)) {
 8006fac:	4b13      	ldr	r3, [pc, #76]	; (8006ffc <HAL_PWREx_EnableOverDrive+0x78>)
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8006fb4:	d108      	bne.n	8006fc8 <HAL_PWREx_EnableOverDrive+0x44>
		if ((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE) {
 8006fb6:	f7fe f951 	bl	800525c <HAL_GetTick>
 8006fba:	1b00      	subs	r0, r0, r4
 8006fbc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006fc0:	d9f4      	bls.n	8006fac <HAL_PWREx_EnableOverDrive+0x28>
			return HAL_TIMEOUT;
 8006fc2:	2003      	movs	r0, #3
		if ((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE) {
			return HAL_TIMEOUT;
		}
	}
	return HAL_OK;
}
 8006fc4:	b002      	add	sp, #8
 8006fc6:	bd10      	pop	{r4, pc}
	__HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006fc8:	4a0c      	ldr	r2, [pc, #48]	; (8006ffc <HAL_PWREx_EnableOverDrive+0x78>)
 8006fca:	6813      	ldr	r3, [r2, #0]
 8006fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fd0:	6013      	str	r3, [r2, #0]
	tickstart = HAL_GetTick();
 8006fd2:	f7fe f943 	bl	800525c <HAL_GetTick>
 8006fd6:	4604      	mov	r4, r0
	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY)) {
 8006fd8:	4b08      	ldr	r3, [pc, #32]	; (8006ffc <HAL_PWREx_EnableOverDrive+0x78>)
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006fe0:	d107      	bne.n	8006ff2 <HAL_PWREx_EnableOverDrive+0x6e>
		if ((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE) {
 8006fe2:	f7fe f93b 	bl	800525c <HAL_GetTick>
 8006fe6:	1b00      	subs	r0, r0, r4
 8006fe8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006fec:	d9f4      	bls.n	8006fd8 <HAL_PWREx_EnableOverDrive+0x54>
			return HAL_TIMEOUT;
 8006fee:	2003      	movs	r0, #3
 8006ff0:	e7e8      	b.n	8006fc4 <HAL_PWREx_EnableOverDrive+0x40>
	return HAL_OK;
 8006ff2:	2000      	movs	r0, #0
 8006ff4:	e7e6      	b.n	8006fc4 <HAL_PWREx_EnableOverDrive+0x40>
 8006ff6:	bf00      	nop
 8006ff8:	40023800 	.word	0x40023800
 8006ffc:	40007000 	.word	0x40007000

08007000 <HAL_RCC_OscConfig>:
	uint32_t tickstart;
	uint32_t pll_config;
	FlagStatus pwrclkchanged = RESET;

	/* Check Null pointer */
	if (RCC_OscInitStruct == NULL) {
 8007000:	2800      	cmp	r0, #0
 8007002:	f000 8206 	beq.w	8007412 <HAL_RCC_OscConfig+0x412>
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef *RCC_OscInitStruct) {
 8007006:	b570      	push	{r4, r5, r6, lr}
 8007008:	b082      	sub	sp, #8
 800700a:	4604      	mov	r4, r0

	/* Check the parameters */
	assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

	/*------------------------------- HSE Configuration ------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE)
 800700c:	6803      	ldr	r3, [r0, #0]
 800700e:	f013 0f01 	tst.w	r3, #1
 8007012:	d029      	beq.n	8007068 <HAL_RCC_OscConfig+0x68>
			== RCC_OSCILLATORTYPE_HSE) {
		/* Check the parameters */
		assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
		/* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007014:	4b95      	ldr	r3, [pc, #596]	; (800726c <HAL_RCC_OscConfig+0x26c>)
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	f003 030c 	and.w	r3, r3, #12
 800701c:	2b04      	cmp	r3, #4
 800701e:	d01a      	beq.n	8007056 <HAL_RCC_OscConfig+0x56>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE()
 8007020:	4b92      	ldr	r3, [pc, #584]	; (800726c <HAL_RCC_OscConfig+0x26c>)
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	f003 030c 	and.w	r3, r3, #12
 8007028:	2b08      	cmp	r3, #8
 800702a:	d00f      	beq.n	800704c <HAL_RCC_OscConfig+0x4c>
					&& (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
				return HAL_ERROR;
			}
		} else {
			/* Set the new HSE configuration ---------------------------------------*/
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800702c:	6863      	ldr	r3, [r4, #4]
 800702e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007032:	d040      	beq.n	80070b6 <HAL_RCC_OscConfig+0xb6>
 8007034:	2b00      	cmp	r3, #0
 8007036:	d154      	bne.n	80070e2 <HAL_RCC_OscConfig+0xe2>
 8007038:	4b8c      	ldr	r3, [pc, #560]	; (800726c <HAL_RCC_OscConfig+0x26c>)
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007040:	601a      	str	r2, [r3, #0]
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007048:	601a      	str	r2, [r3, #0]
 800704a:	e039      	b.n	80070c0 <HAL_RCC_OscConfig+0xc0>
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 800704c:	4b87      	ldr	r3, [pc, #540]	; (800726c <HAL_RCC_OscConfig+0x26c>)
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8007054:	d0ea      	beq.n	800702c <HAL_RCC_OscConfig+0x2c>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007056:	4b85      	ldr	r3, [pc, #532]	; (800726c <HAL_RCC_OscConfig+0x26c>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800705e:	d003      	beq.n	8007068 <HAL_RCC_OscConfig+0x68>
					&& (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 8007060:	6863      	ldr	r3, [r4, #4]
 8007062:	2b00      	cmp	r3, #0
 8007064:	f000 81d7 	beq.w	8007416 <HAL_RCC_OscConfig+0x416>
				}
			}
		}
	}
	/*----------------------------- HSI Configuration --------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI)
 8007068:	6823      	ldr	r3, [r4, #0]
 800706a:	f013 0f02 	tst.w	r3, #2
 800706e:	d074      	beq.n	800715a <HAL_RCC_OscConfig+0x15a>
		assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
		assert_param(
				IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

		/* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007070:	4b7e      	ldr	r3, [pc, #504]	; (800726c <HAL_RCC_OscConfig+0x26c>)
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	f013 0f0c 	tst.w	r3, #12
 8007078:	d05e      	beq.n	8007138 <HAL_RCC_OscConfig+0x138>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE()
 800707a:	4b7c      	ldr	r3, [pc, #496]	; (800726c <HAL_RCC_OscConfig+0x26c>)
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	f003 030c 	and.w	r3, r3, #12
 8007082:	2b08      	cmp	r3, #8
 8007084:	d053      	beq.n	800712e <HAL_RCC_OscConfig+0x12e>
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
						RCC_OscInitStruct->HSICalibrationValue);
			}
		} else {
			/* Check the HSI State */
			if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF) {
 8007086:	68e3      	ldr	r3, [r4, #12]
 8007088:	2b00      	cmp	r3, #0
 800708a:	f000 8089 	beq.w	80071a0 <HAL_RCC_OscConfig+0x1a0>
				/* Enable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_ENABLE();
 800708e:	4a77      	ldr	r2, [pc, #476]	; (800726c <HAL_RCC_OscConfig+0x26c>)
 8007090:	6813      	ldr	r3, [r2, #0]
 8007092:	f043 0301 	orr.w	r3, r3, #1
 8007096:	6013      	str	r3, [r2, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8007098:	f7fe f8e0 	bl	800525c <HAL_GetTick>
 800709c:	4605      	mov	r5, r0

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 800709e:	4b73      	ldr	r3, [pc, #460]	; (800726c <HAL_RCC_OscConfig+0x26c>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f013 0f02 	tst.w	r3, #2
 80070a6:	d172      	bne.n	800718e <HAL_RCC_OscConfig+0x18e>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 80070a8:	f7fe f8d8 	bl	800525c <HAL_GetTick>
 80070ac:	1b40      	subs	r0, r0, r5
 80070ae:	2802      	cmp	r0, #2
 80070b0:	d9f5      	bls.n	800709e <HAL_RCC_OscConfig+0x9e>
						return HAL_TIMEOUT;
 80070b2:	2003      	movs	r0, #3
 80070b4:	e1b4      	b.n	8007420 <HAL_RCC_OscConfig+0x420>
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070b6:	4a6d      	ldr	r2, [pc, #436]	; (800726c <HAL_RCC_OscConfig+0x26c>)
 80070b8:	6813      	ldr	r3, [r2, #0]
 80070ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070be:	6013      	str	r3, [r2, #0]
			if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF) {
 80070c0:	6863      	ldr	r3, [r4, #4]
 80070c2:	b32b      	cbz	r3, 8007110 <HAL_RCC_OscConfig+0x110>
				tickstart = HAL_GetTick();
 80070c4:	f7fe f8ca 	bl	800525c <HAL_GetTick>
 80070c8:	4605      	mov	r5, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 80070ca:	4b68      	ldr	r3, [pc, #416]	; (800726c <HAL_RCC_OscConfig+0x26c>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80070d2:	d1c9      	bne.n	8007068 <HAL_RCC_OscConfig+0x68>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 80070d4:	f7fe f8c2 	bl	800525c <HAL_GetTick>
 80070d8:	1b40      	subs	r0, r0, r5
 80070da:	2864      	cmp	r0, #100	; 0x64
 80070dc:	d9f5      	bls.n	80070ca <HAL_RCC_OscConfig+0xca>
						return HAL_TIMEOUT;
 80070de:	2003      	movs	r0, #3
 80070e0:	e19e      	b.n	8007420 <HAL_RCC_OscConfig+0x420>
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80070e6:	d009      	beq.n	80070fc <HAL_RCC_OscConfig+0xfc>
 80070e8:	4b60      	ldr	r3, [pc, #384]	; (800726c <HAL_RCC_OscConfig+0x26c>)
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80070f0:	601a      	str	r2, [r3, #0]
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80070f8:	601a      	str	r2, [r3, #0]
 80070fa:	e7e1      	b.n	80070c0 <HAL_RCC_OscConfig+0xc0>
 80070fc:	4b5b      	ldr	r3, [pc, #364]	; (800726c <HAL_RCC_OscConfig+0x26c>)
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007104:	601a      	str	r2, [r3, #0]
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800710c:	601a      	str	r2, [r3, #0]
 800710e:	e7d7      	b.n	80070c0 <HAL_RCC_OscConfig+0xc0>
				tickstart = HAL_GetTick();
 8007110:	f7fe f8a4 	bl	800525c <HAL_GetTick>
 8007114:	4605      	mov	r5, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 8007116:	4b55      	ldr	r3, [pc, #340]	; (800726c <HAL_RCC_OscConfig+0x26c>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800711e:	d0a3      	beq.n	8007068 <HAL_RCC_OscConfig+0x68>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8007120:	f7fe f89c 	bl	800525c <HAL_GetTick>
 8007124:	1b40      	subs	r0, r0, r5
 8007126:	2864      	cmp	r0, #100	; 0x64
 8007128:	d9f5      	bls.n	8007116 <HAL_RCC_OscConfig+0x116>
						return HAL_TIMEOUT;
 800712a:	2003      	movs	r0, #3
 800712c:	e178      	b.n	8007420 <HAL_RCC_OscConfig+0x420>
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 800712e:	4b4f      	ldr	r3, [pc, #316]	; (800726c <HAL_RCC_OscConfig+0x26c>)
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8007136:	d1a6      	bne.n	8007086 <HAL_RCC_OscConfig+0x86>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007138:	4b4c      	ldr	r3, [pc, #304]	; (800726c <HAL_RCC_OscConfig+0x26c>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f013 0f02 	tst.w	r3, #2
 8007140:	d003      	beq.n	800714a <HAL_RCC_OscConfig+0x14a>
					&& (RCC_OscInitStruct->HSIState != RCC_HSI_ON)) {
 8007142:	68e3      	ldr	r3, [r4, #12]
 8007144:	2b01      	cmp	r3, #1
 8007146:	f040 8168 	bne.w	800741a <HAL_RCC_OscConfig+0x41a>
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 800714a:	4a48      	ldr	r2, [pc, #288]	; (800726c <HAL_RCC_OscConfig+0x26c>)
 800714c:	6813      	ldr	r3, [r2, #0]
 800714e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007152:	6921      	ldr	r1, [r4, #16]
 8007154:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8007158:	6013      	str	r3, [r2, #0]
				}
			}
		}
	}
	/*------------------------------ LSI Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI)
 800715a:	6823      	ldr	r3, [r4, #0]
 800715c:	f013 0f08 	tst.w	r3, #8
 8007160:	d046      	beq.n	80071f0 <HAL_RCC_OscConfig+0x1f0>
			== RCC_OSCILLATORTYPE_LSI) {
		/* Check the parameters */
		assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

		/* Check the LSI State */
		if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF) {
 8007162:	6963      	ldr	r3, [r4, #20]
 8007164:	b383      	cbz	r3, 80071c8 <HAL_RCC_OscConfig+0x1c8>
			/* Enable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_ENABLE();
 8007166:	4a41      	ldr	r2, [pc, #260]	; (800726c <HAL_RCC_OscConfig+0x26c>)
 8007168:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800716a:	f043 0301 	orr.w	r3, r3, #1
 800716e:	6753      	str	r3, [r2, #116]	; 0x74

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8007170:	f7fe f874 	bl	800525c <HAL_GetTick>
 8007174:	4605      	mov	r5, r0

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 8007176:	4b3d      	ldr	r3, [pc, #244]	; (800726c <HAL_RCC_OscConfig+0x26c>)
 8007178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800717a:	f013 0f02 	tst.w	r3, #2
 800717e:	d137      	bne.n	80071f0 <HAL_RCC_OscConfig+0x1f0>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 8007180:	f7fe f86c 	bl	800525c <HAL_GetTick>
 8007184:	1b40      	subs	r0, r0, r5
 8007186:	2802      	cmp	r0, #2
 8007188:	d9f5      	bls.n	8007176 <HAL_RCC_OscConfig+0x176>
					return HAL_TIMEOUT;
 800718a:	2003      	movs	r0, #3
 800718c:	e148      	b.n	8007420 <HAL_RCC_OscConfig+0x420>
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 800718e:	4a37      	ldr	r2, [pc, #220]	; (800726c <HAL_RCC_OscConfig+0x26c>)
 8007190:	6813      	ldr	r3, [r2, #0]
 8007192:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007196:	6921      	ldr	r1, [r4, #16]
 8007198:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800719c:	6013      	str	r3, [r2, #0]
 800719e:	e7dc      	b.n	800715a <HAL_RCC_OscConfig+0x15a>
				__HAL_RCC_HSI_DISABLE();
 80071a0:	4a32      	ldr	r2, [pc, #200]	; (800726c <HAL_RCC_OscConfig+0x26c>)
 80071a2:	6813      	ldr	r3, [r2, #0]
 80071a4:	f023 0301 	bic.w	r3, r3, #1
 80071a8:	6013      	str	r3, [r2, #0]
				tickstart = HAL_GetTick();
 80071aa:	f7fe f857 	bl	800525c <HAL_GetTick>
 80071ae:	4605      	mov	r5, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 80071b0:	4b2e      	ldr	r3, [pc, #184]	; (800726c <HAL_RCC_OscConfig+0x26c>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f013 0f02 	tst.w	r3, #2
 80071b8:	d0cf      	beq.n	800715a <HAL_RCC_OscConfig+0x15a>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 80071ba:	f7fe f84f 	bl	800525c <HAL_GetTick>
 80071be:	1b40      	subs	r0, r0, r5
 80071c0:	2802      	cmp	r0, #2
 80071c2:	d9f5      	bls.n	80071b0 <HAL_RCC_OscConfig+0x1b0>
						return HAL_TIMEOUT;
 80071c4:	2003      	movs	r0, #3
 80071c6:	e12b      	b.n	8007420 <HAL_RCC_OscConfig+0x420>
				}
			}
		} else {
			/* Disable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_DISABLE();
 80071c8:	4a28      	ldr	r2, [pc, #160]	; (800726c <HAL_RCC_OscConfig+0x26c>)
 80071ca:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80071cc:	f023 0301 	bic.w	r3, r3, #1
 80071d0:	6753      	str	r3, [r2, #116]	; 0x74

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 80071d2:	f7fe f843 	bl	800525c <HAL_GetTick>
 80071d6:	4605      	mov	r5, r0

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 80071d8:	4b24      	ldr	r3, [pc, #144]	; (800726c <HAL_RCC_OscConfig+0x26c>)
 80071da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071dc:	f013 0f02 	tst.w	r3, #2
 80071e0:	d006      	beq.n	80071f0 <HAL_RCC_OscConfig+0x1f0>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 80071e2:	f7fe f83b 	bl	800525c <HAL_GetTick>
 80071e6:	1b40      	subs	r0, r0, r5
 80071e8:	2802      	cmp	r0, #2
 80071ea:	d9f5      	bls.n	80071d8 <HAL_RCC_OscConfig+0x1d8>
					return HAL_TIMEOUT;
 80071ec:	2003      	movs	r0, #3
 80071ee:	e117      	b.n	8007420 <HAL_RCC_OscConfig+0x420>
				}
			}
		}
	}
	/*------------------------------ LSE Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE)
 80071f0:	6823      	ldr	r3, [r4, #0]
 80071f2:	f013 0f04 	tst.w	r3, #4
 80071f6:	d07d      	beq.n	80072f4 <HAL_RCC_OscConfig+0x2f4>
		/* Check the parameters */
		assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

		/* Update LSE configuration in Backup Domain control register    */
		/* Requires to enable write access to Backup Domain of necessary */
		if (__HAL_RCC_PWR_IS_CLK_DISABLED()) {
 80071f8:	4b1c      	ldr	r3, [pc, #112]	; (800726c <HAL_RCC_OscConfig+0x26c>)
 80071fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071fc:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8007200:	d11e      	bne.n	8007240 <HAL_RCC_OscConfig+0x240>
			/* Enable Power Clock*/
			__HAL_RCC_PWR_CLK_ENABLE();
 8007202:	4b1a      	ldr	r3, [pc, #104]	; (800726c <HAL_RCC_OscConfig+0x26c>)
 8007204:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007206:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800720a:	641a      	str	r2, [r3, #64]	; 0x40
 800720c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800720e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007212:	9301      	str	r3, [sp, #4]
 8007214:	9b01      	ldr	r3, [sp, #4]
			pwrclkchanged = SET;
 8007216:	2501      	movs	r5, #1
		}

		if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP)) {
 8007218:	4b15      	ldr	r3, [pc, #84]	; (8007270 <HAL_RCC_OscConfig+0x270>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007220:	d010      	beq.n	8007244 <HAL_RCC_OscConfig+0x244>
				}
			}
		}

		/* Set the new LSE configuration -----------------------------------------*/
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007222:	68a3      	ldr	r3, [r4, #8]
 8007224:	2b01      	cmp	r3, #1
 8007226:	d025      	beq.n	8007274 <HAL_RCC_OscConfig+0x274>
 8007228:	2b00      	cmp	r3, #0
 800722a:	d13b      	bne.n	80072a4 <HAL_RCC_OscConfig+0x2a4>
 800722c:	4b0f      	ldr	r3, [pc, #60]	; (800726c <HAL_RCC_OscConfig+0x26c>)
 800722e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007230:	f022 0201 	bic.w	r2, r2, #1
 8007234:	671a      	str	r2, [r3, #112]	; 0x70
 8007236:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007238:	f022 0204 	bic.w	r2, r2, #4
 800723c:	671a      	str	r2, [r3, #112]	; 0x70
 800723e:	e01e      	b.n	800727e <HAL_RCC_OscConfig+0x27e>
	FlagStatus pwrclkchanged = RESET;
 8007240:	2500      	movs	r5, #0
 8007242:	e7e9      	b.n	8007218 <HAL_RCC_OscConfig+0x218>
			PWR->CR1 |= PWR_CR1_DBP;
 8007244:	4a0a      	ldr	r2, [pc, #40]	; (8007270 <HAL_RCC_OscConfig+0x270>)
 8007246:	6813      	ldr	r3, [r2, #0]
 8007248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800724c:	6013      	str	r3, [r2, #0]
			tickstart = HAL_GetTick();
 800724e:	f7fe f805 	bl	800525c <HAL_GetTick>
 8007252:	4606      	mov	r6, r0
			while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP)) {
 8007254:	4b06      	ldr	r3, [pc, #24]	; (8007270 <HAL_RCC_OscConfig+0x270>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f413 7f80 	tst.w	r3, #256	; 0x100
 800725c:	d1e1      	bne.n	8007222 <HAL_RCC_OscConfig+0x222>
				if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 800725e:	f7fd fffd 	bl	800525c <HAL_GetTick>
 8007262:	1b80      	subs	r0, r0, r6
 8007264:	2864      	cmp	r0, #100	; 0x64
 8007266:	d9f5      	bls.n	8007254 <HAL_RCC_OscConfig+0x254>
					return HAL_TIMEOUT;
 8007268:	2003      	movs	r0, #3
 800726a:	e0d9      	b.n	8007420 <HAL_RCC_OscConfig+0x420>
 800726c:	40023800 	.word	0x40023800
 8007270:	40007000 	.word	0x40007000
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007274:	4a72      	ldr	r2, [pc, #456]	; (8007440 <HAL_RCC_OscConfig+0x440>)
 8007276:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8007278:	f043 0301 	orr.w	r3, r3, #1
 800727c:	6713      	str	r3, [r2, #112]	; 0x70
		/* Check the LSE State */
		if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF) {
 800727e:	68a3      	ldr	r3, [r4, #8]
 8007280:	b333      	cbz	r3, 80072d0 <HAL_RCC_OscConfig+0x2d0>
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8007282:	f7fd ffeb 	bl	800525c <HAL_GetTick>
 8007286:	4606      	mov	r6, r0

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 8007288:	4b6d      	ldr	r3, [pc, #436]	; (8007440 <HAL_RCC_OscConfig+0x440>)
 800728a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800728c:	f013 0f02 	tst.w	r3, #2
 8007290:	d12f      	bne.n	80072f2 <HAL_RCC_OscConfig+0x2f2>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8007292:	f7fd ffe3 	bl	800525c <HAL_GetTick>
 8007296:	1b80      	subs	r0, r0, r6
 8007298:	f241 3388 	movw	r3, #5000	; 0x1388
 800729c:	4298      	cmp	r0, r3
 800729e:	d9f3      	bls.n	8007288 <HAL_RCC_OscConfig+0x288>
					return HAL_TIMEOUT;
 80072a0:	2003      	movs	r0, #3
 80072a2:	e0bd      	b.n	8007420 <HAL_RCC_OscConfig+0x420>
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072a4:	2b05      	cmp	r3, #5
 80072a6:	d009      	beq.n	80072bc <HAL_RCC_OscConfig+0x2bc>
 80072a8:	4b65      	ldr	r3, [pc, #404]	; (8007440 <HAL_RCC_OscConfig+0x440>)
 80072aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80072ac:	f022 0201 	bic.w	r2, r2, #1
 80072b0:	671a      	str	r2, [r3, #112]	; 0x70
 80072b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80072b4:	f022 0204 	bic.w	r2, r2, #4
 80072b8:	671a      	str	r2, [r3, #112]	; 0x70
 80072ba:	e7e0      	b.n	800727e <HAL_RCC_OscConfig+0x27e>
 80072bc:	4b60      	ldr	r3, [pc, #384]	; (8007440 <HAL_RCC_OscConfig+0x440>)
 80072be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80072c0:	f042 0204 	orr.w	r2, r2, #4
 80072c4:	671a      	str	r2, [r3, #112]	; 0x70
 80072c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80072c8:	f042 0201 	orr.w	r2, r2, #1
 80072cc:	671a      	str	r2, [r3, #112]	; 0x70
 80072ce:	e7d6      	b.n	800727e <HAL_RCC_OscConfig+0x27e>
				}
			}
		} else {
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 80072d0:	f7fd ffc4 	bl	800525c <HAL_GetTick>
 80072d4:	4606      	mov	r6, r0

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 80072d6:	4b5a      	ldr	r3, [pc, #360]	; (8007440 <HAL_RCC_OscConfig+0x440>)
 80072d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072da:	f013 0f02 	tst.w	r3, #2
 80072de:	d008      	beq.n	80072f2 <HAL_RCC_OscConfig+0x2f2>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 80072e0:	f7fd ffbc 	bl	800525c <HAL_GetTick>
 80072e4:	1b80      	subs	r0, r0, r6
 80072e6:	f241 3388 	movw	r3, #5000	; 0x1388
 80072ea:	4298      	cmp	r0, r3
 80072ec:	d9f3      	bls.n	80072d6 <HAL_RCC_OscConfig+0x2d6>
					return HAL_TIMEOUT;
 80072ee:	2003      	movs	r0, #3
 80072f0:	e096      	b.n	8007420 <HAL_RCC_OscConfig+0x420>
				}
			}
		}

		/* Restore clock configuration if changed */
		if (pwrclkchanged == SET) {
 80072f2:	b9fd      	cbnz	r5, 8007334 <HAL_RCC_OscConfig+0x334>
		}
	}
	/*-------------------------------- PLL Configuration -----------------------*/
	/* Check the parameters */
	assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
	if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE) {
 80072f4:	69a3      	ldr	r3, [r4, #24]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	f000 8091 	beq.w	800741e <HAL_RCC_OscConfig+0x41e>
		/* Check if the PLL is used as system clock or not */
		if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {
 80072fc:	4a50      	ldr	r2, [pc, #320]	; (8007440 <HAL_RCC_OscConfig+0x440>)
 80072fe:	6892      	ldr	r2, [r2, #8]
 8007300:	f002 020c 	and.w	r2, r2, #12
 8007304:	2a08      	cmp	r2, #8
 8007306:	d059      	beq.n	80073bc <HAL_RCC_OscConfig+0x3bc>
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON) {
 8007308:	2b02      	cmp	r3, #2
 800730a:	d019      	beq.n	8007340 <HAL_RCC_OscConfig+0x340>
						return HAL_TIMEOUT;
					}
				}
			} else {
				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 800730c:	4a4c      	ldr	r2, [pc, #304]	; (8007440 <HAL_RCC_OscConfig+0x440>)
 800730e:	6813      	ldr	r3, [r2, #0]
 8007310:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007314:	6013      	str	r3, [r2, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8007316:	f7fd ffa1 	bl	800525c <HAL_GetTick>
 800731a:	4604      	mov	r4, r0

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 800731c:	4b48      	ldr	r3, [pc, #288]	; (8007440 <HAL_RCC_OscConfig+0x440>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8007324:	d048      	beq.n	80073b8 <HAL_RCC_OscConfig+0x3b8>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8007326:	f7fd ff99 	bl	800525c <HAL_GetTick>
 800732a:	1b00      	subs	r0, r0, r4
 800732c:	2802      	cmp	r0, #2
 800732e:	d9f5      	bls.n	800731c <HAL_RCC_OscConfig+0x31c>
						return HAL_TIMEOUT;
 8007330:	2003      	movs	r0, #3
 8007332:	e075      	b.n	8007420 <HAL_RCC_OscConfig+0x420>
			__HAL_RCC_PWR_CLK_DISABLE();
 8007334:	4a42      	ldr	r2, [pc, #264]	; (8007440 <HAL_RCC_OscConfig+0x440>)
 8007336:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8007338:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800733c:	6413      	str	r3, [r2, #64]	; 0x40
 800733e:	e7d9      	b.n	80072f4 <HAL_RCC_OscConfig+0x2f4>
				__HAL_RCC_PLL_DISABLE();
 8007340:	4a3f      	ldr	r2, [pc, #252]	; (8007440 <HAL_RCC_OscConfig+0x440>)
 8007342:	6813      	ldr	r3, [r2, #0]
 8007344:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007348:	6013      	str	r3, [r2, #0]
				tickstart = HAL_GetTick();
 800734a:	f7fd ff87 	bl	800525c <HAL_GetTick>
 800734e:	4605      	mov	r5, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8007350:	4b3b      	ldr	r3, [pc, #236]	; (8007440 <HAL_RCC_OscConfig+0x440>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8007358:	d006      	beq.n	8007368 <HAL_RCC_OscConfig+0x368>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 800735a:	f7fd ff7f 	bl	800525c <HAL_GetTick>
 800735e:	1b40      	subs	r0, r0, r5
 8007360:	2802      	cmp	r0, #2
 8007362:	d9f5      	bls.n	8007350 <HAL_RCC_OscConfig+0x350>
						return HAL_TIMEOUT;
 8007364:	2003      	movs	r0, #3
 8007366:	e05b      	b.n	8007420 <HAL_RCC_OscConfig+0x420>
				__HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007368:	69e3      	ldr	r3, [r4, #28]
 800736a:	6a22      	ldr	r2, [r4, #32]
 800736c:	4313      	orrs	r3, r2
 800736e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007370:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8007374:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007376:	0852      	lsrs	r2, r2, #1
 8007378:	3a01      	subs	r2, #1
 800737a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800737e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007380:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007384:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007386:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800738a:	4a2d      	ldr	r2, [pc, #180]	; (8007440 <HAL_RCC_OscConfig+0x440>)
 800738c:	6053      	str	r3, [r2, #4]
				__HAL_RCC_PLL_ENABLE();
 800738e:	6813      	ldr	r3, [r2, #0]
 8007390:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007394:	6013      	str	r3, [r2, #0]
				tickstart = HAL_GetTick();
 8007396:	f7fd ff61 	bl	800525c <HAL_GetTick>
 800739a:	4604      	mov	r4, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 800739c:	4b28      	ldr	r3, [pc, #160]	; (8007440 <HAL_RCC_OscConfig+0x440>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80073a4:	d106      	bne.n	80073b4 <HAL_RCC_OscConfig+0x3b4>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 80073a6:	f7fd ff59 	bl	800525c <HAL_GetTick>
 80073aa:	1b00      	subs	r0, r0, r4
 80073ac:	2802      	cmp	r0, #2
 80073ae:	d9f5      	bls.n	800739c <HAL_RCC_OscConfig+0x39c>
						return HAL_TIMEOUT;
 80073b0:	2003      	movs	r0, #3
 80073b2:	e035      	b.n	8007420 <HAL_RCC_OscConfig+0x420>
					{
				return HAL_ERROR;
			}
		}
	}
	return HAL_OK;
 80073b4:	2000      	movs	r0, #0
 80073b6:	e033      	b.n	8007420 <HAL_RCC_OscConfig+0x420>
 80073b8:	2000      	movs	r0, #0
 80073ba:	e031      	b.n	8007420 <HAL_RCC_OscConfig+0x420>
			pll_config = RCC->PLLCFGR;
 80073bc:	4a20      	ldr	r2, [pc, #128]	; (8007440 <HAL_RCC_OscConfig+0x440>)
 80073be:	6852      	ldr	r2, [r2, #4]
			if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d02f      	beq.n	8007424 <HAL_RCC_OscConfig+0x424>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 80073c4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
							!= RCC_OscInitStruct->PLL.PLLSource)
 80073c8:	69e1      	ldr	r1, [r4, #28]
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 80073ca:	428b      	cmp	r3, r1
 80073cc:	d12c      	bne.n	8007428 <HAL_RCC_OscConfig+0x428>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 80073ce:	f002 033f 	and.w	r3, r2, #63	; 0x3f
							!= RCC_OscInitStruct->PLL.PLLM)
 80073d2:	6a21      	ldr	r1, [r4, #32]
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 80073d4:	428b      	cmp	r3, r1
 80073d6:	d129      	bne.n	800742c <HAL_RCC_OscConfig+0x42c>
							!= (RCC_OscInitStruct->PLL.PLLN
 80073d8:	6a61      	ldr	r1, [r4, #36]	; 0x24
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)
 80073da:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80073de:	4013      	ands	r3, r2
 80073e0:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 80073e4:	d124      	bne.n	8007430 <HAL_RCC_OscConfig+0x430>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)
 80073e6:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
							!= ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U)
 80073ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80073ec:	085b      	lsrs	r3, r3, #1
 80073ee:	3b01      	subs	r3, #1
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)
 80073f0:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 80073f4:	d11e      	bne.n	8007434 <HAL_RCC_OscConfig+0x434>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 80073f6:	f002 6370 	and.w	r3, r2, #251658240	; 0xf000000
							!= (RCC_OscInitStruct->PLL.PLLQ
 80073fa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 80073fc:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 8007400:	d11a      	bne.n	8007438 <HAL_RCC_OscConfig+0x438>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)
 8007402:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
							!= (RCC_OscInitStruct->PLL.PLLR
 8007406:	6b23      	ldr	r3, [r4, #48]	; 0x30
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)
 8007408:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
 800740c:	d116      	bne.n	800743c <HAL_RCC_OscConfig+0x43c>
	return HAL_OK;
 800740e:	2000      	movs	r0, #0
 8007410:	e006      	b.n	8007420 <HAL_RCC_OscConfig+0x420>
		return HAL_ERROR;
 8007412:	2001      	movs	r0, #1
}
 8007414:	4770      	bx	lr
				return HAL_ERROR;
 8007416:	2001      	movs	r0, #1
 8007418:	e002      	b.n	8007420 <HAL_RCC_OscConfig+0x420>
				return HAL_ERROR;
 800741a:	2001      	movs	r0, #1
 800741c:	e000      	b.n	8007420 <HAL_RCC_OscConfig+0x420>
	return HAL_OK;
 800741e:	2000      	movs	r0, #0
}
 8007420:	b002      	add	sp, #8
 8007422:	bd70      	pop	{r4, r5, r6, pc}
				return HAL_ERROR;
 8007424:	2001      	movs	r0, #1
 8007426:	e7fb      	b.n	8007420 <HAL_RCC_OscConfig+0x420>
 8007428:	2001      	movs	r0, #1
 800742a:	e7f9      	b.n	8007420 <HAL_RCC_OscConfig+0x420>
 800742c:	2001      	movs	r0, #1
 800742e:	e7f7      	b.n	8007420 <HAL_RCC_OscConfig+0x420>
 8007430:	2001      	movs	r0, #1
 8007432:	e7f5      	b.n	8007420 <HAL_RCC_OscConfig+0x420>
 8007434:	2001      	movs	r0, #1
 8007436:	e7f3      	b.n	8007420 <HAL_RCC_OscConfig+0x420>
 8007438:	2001      	movs	r0, #1
 800743a:	e7f1      	b.n	8007420 <HAL_RCC_OscConfig+0x420>
 800743c:	2001      	movs	r0, #1
 800743e:	e7ef      	b.n	8007420 <HAL_RCC_OscConfig+0x420>
 8007440:	40023800 	.word	0x40023800

08007444 <HAL_RCC_GetSysClockFreq>:
 *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
 *
 *
 * @retval SYSCLK frequency
 */
uint32_t HAL_RCC_GetSysClockFreq(void) {
 8007444:	b508      	push	{r3, lr}
	uint32_t pllm = 0, pllvco = 0, pllp = 0;
	uint32_t sysclockfreq = 0;

	/* Get SYSCLK source -------------------------------------------------------*/
	switch (RCC->CFGR & RCC_CFGR_SWS) {
 8007446:	4b26      	ldr	r3, [pc, #152]	; (80074e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	f003 030c 	and.w	r3, r3, #12
 800744e:	2b04      	cmp	r3, #4
 8007450:	d041      	beq.n	80074d6 <HAL_RCC_GetSysClockFreq+0x92>
 8007452:	2b08      	cmp	r3, #8
 8007454:	d141      	bne.n	80074da <HAL_RCC_GetSysClockFreq+0x96>
	}
	case RCC_SYSCLKSOURCE_STATUS_PLLCLK: /* PLL used as system clock  source */
	{
		/* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
		 SYSCLK = PLL_VCO / PLLP */
		pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007456:	4b22      	ldr	r3, [pc, #136]	; (80074e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007458:	685a      	ldr	r2, [r3, #4]
 800745a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
		if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI) {
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8007464:	d012      	beq.n	800748c <HAL_RCC_GetSysClockFreq+0x48>
			/* HSE used as PLL clock source */
			pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8007466:	4b1e      	ldr	r3, [pc, #120]	; (80074e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007468:	6859      	ldr	r1, [r3, #4]
 800746a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800746e:	481d      	ldr	r0, [pc, #116]	; (80074e4 <HAL_RCC_GetSysClockFreq+0xa0>)
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8007470:	2300      	movs	r3, #0
 8007472:	fba1 0100 	umull	r0, r1, r1, r0
 8007476:	f7f8 ff3b 	bl	80002f0 <__aeabi_uldivmod>
			pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
		}
		pllp =
				((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos)
 800747a:	4b19      	ldr	r3, [pc, #100]	; (80074e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	f3c3 4301 	ubfx	r3, r3, #16, #2
						+ 1) * 2);
 8007482:	3301      	adds	r3, #1
		pllp =
 8007484:	005b      	lsls	r3, r3, #1

		sysclockfreq = pllvco / pllp;
 8007486:	fbb0 f0f3 	udiv	r0, r0, r3
		break;
 800748a:	e027      	b.n	80074dc <HAL_RCC_GetSysClockFreq+0x98>
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 800748c:	4b14      	ldr	r3, [pc, #80]	; (80074e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800748e:	6858      	ldr	r0, [r3, #4]
 8007490:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8007494:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8007498:	ebbc 0c00 	subs.w	ip, ip, r0
 800749c:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80074a0:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80074a4:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80074a8:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80074ac:	ebb1 010c 	subs.w	r1, r1, ip
 80074b0:	eb63 030e 	sbc.w	r3, r3, lr
 80074b4:	00db      	lsls	r3, r3, #3
 80074b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074ba:	00c9      	lsls	r1, r1, #3
 80074bc:	eb11 0c00 	adds.w	ip, r1, r0
 80074c0:	f143 0300 	adc.w	r3, r3, #0
 80074c4:	0299      	lsls	r1, r3, #10
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 80074c6:	2300      	movs	r3, #0
 80074c8:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80074cc:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80074d0:	f7f8 ff0e 	bl	80002f0 <__aeabi_uldivmod>
 80074d4:	e7d1      	b.n	800747a <HAL_RCC_GetSysClockFreq+0x36>
		sysclockfreq = HSE_VALUE;
 80074d6:	4803      	ldr	r0, [pc, #12]	; (80074e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80074d8:	e000      	b.n	80074dc <HAL_RCC_GetSysClockFreq+0x98>
	switch (RCC->CFGR & RCC_CFGR_SWS) {
 80074da:	4803      	ldr	r0, [pc, #12]	; (80074e8 <HAL_RCC_GetSysClockFreq+0xa4>)
		sysclockfreq = HSI_VALUE;
		break;
	}
	}
	return sysclockfreq;
}
 80074dc:	bd08      	pop	{r3, pc}
 80074de:	bf00      	nop
 80074e0:	40023800 	.word	0x40023800
 80074e4:	017d7840 	.word	0x017d7840
 80074e8:	00f42400 	.word	0x00f42400

080074ec <HAL_RCC_ClockConfig>:
	if (RCC_ClkInitStruct == NULL) {
 80074ec:	2800      	cmp	r0, #0
 80074ee:	f000 80a0 	beq.w	8007632 <HAL_RCC_ClockConfig+0x146>
		uint32_t FLatency) {
 80074f2:	b570      	push	{r4, r5, r6, lr}
 80074f4:	460d      	mov	r5, r1
 80074f6:	4604      	mov	r4, r0
	if (FLatency > __HAL_FLASH_GET_LATENCY()) {
 80074f8:	4b52      	ldr	r3, [pc, #328]	; (8007644 <HAL_RCC_ClockConfig+0x158>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f003 030f 	and.w	r3, r3, #15
 8007500:	428b      	cmp	r3, r1
 8007502:	d20b      	bcs.n	800751c <HAL_RCC_ClockConfig+0x30>
		__HAL_FLASH_SET_LATENCY(FLatency);
 8007504:	4a4f      	ldr	r2, [pc, #316]	; (8007644 <HAL_RCC_ClockConfig+0x158>)
 8007506:	6813      	ldr	r3, [r2, #0]
 8007508:	f023 030f 	bic.w	r3, r3, #15
 800750c:	430b      	orrs	r3, r1
 800750e:	6013      	str	r3, [r2, #0]
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 8007510:	6813      	ldr	r3, [r2, #0]
 8007512:	f003 030f 	and.w	r3, r3, #15
 8007516:	428b      	cmp	r3, r1
 8007518:	f040 808d 	bne.w	8007636 <HAL_RCC_ClockConfig+0x14a>
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK)
 800751c:	6823      	ldr	r3, [r4, #0]
 800751e:	f013 0f02 	tst.w	r3, #2
 8007522:	d017      	beq.n	8007554 <HAL_RCC_ClockConfig+0x68>
		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 8007524:	f013 0f04 	tst.w	r3, #4
 8007528:	d004      	beq.n	8007534 <HAL_RCC_ClockConfig+0x48>
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800752a:	4a47      	ldr	r2, [pc, #284]	; (8007648 <HAL_RCC_ClockConfig+0x15c>)
 800752c:	6893      	ldr	r3, [r2, #8]
 800752e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007532:	6093      	str	r3, [r2, #8]
		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 8007534:	6823      	ldr	r3, [r4, #0]
 8007536:	f013 0f08 	tst.w	r3, #8
 800753a:	d004      	beq.n	8007546 <HAL_RCC_ClockConfig+0x5a>
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800753c:	4a42      	ldr	r2, [pc, #264]	; (8007648 <HAL_RCC_ClockConfig+0x15c>)
 800753e:	6893      	ldr	r3, [r2, #8]
 8007540:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007544:	6093      	str	r3, [r2, #8]
		MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007546:	4a40      	ldr	r2, [pc, #256]	; (8007648 <HAL_RCC_ClockConfig+0x15c>)
 8007548:	6893      	ldr	r3, [r2, #8]
 800754a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800754e:	68a1      	ldr	r1, [r4, #8]
 8007550:	430b      	orrs	r3, r1
 8007552:	6093      	str	r3, [r2, #8]
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK)
 8007554:	6823      	ldr	r3, [r4, #0]
 8007556:	f013 0f01 	tst.w	r3, #1
 800755a:	d031      	beq.n	80075c0 <HAL_RCC_ClockConfig+0xd4>
		if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 800755c:	6863      	ldr	r3, [r4, #4]
 800755e:	2b01      	cmp	r3, #1
 8007560:	d020      	beq.n	80075a4 <HAL_RCC_ClockConfig+0xb8>
		else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) {
 8007562:	2b02      	cmp	r3, #2
 8007564:	d025      	beq.n	80075b2 <HAL_RCC_ClockConfig+0xc6>
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8007566:	4a38      	ldr	r2, [pc, #224]	; (8007648 <HAL_RCC_ClockConfig+0x15c>)
 8007568:	6812      	ldr	r2, [r2, #0]
 800756a:	f012 0f02 	tst.w	r2, #2
 800756e:	d064      	beq.n	800763a <HAL_RCC_ClockConfig+0x14e>
		__HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007570:	4935      	ldr	r1, [pc, #212]	; (8007648 <HAL_RCC_ClockConfig+0x15c>)
 8007572:	688a      	ldr	r2, [r1, #8]
 8007574:	f022 0203 	bic.w	r2, r2, #3
 8007578:	4313      	orrs	r3, r2
 800757a:	608b      	str	r3, [r1, #8]
		tickstart = HAL_GetTick();
 800757c:	f7fd fe6e 	bl	800525c <HAL_GetTick>
 8007580:	4606      	mov	r6, r0
		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 8007582:	4b31      	ldr	r3, [pc, #196]	; (8007648 <HAL_RCC_ClockConfig+0x15c>)
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	f003 030c 	and.w	r3, r3, #12
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
 800758a:	6862      	ldr	r2, [r4, #4]
 800758c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8007590:	d016      	beq.n	80075c0 <HAL_RCC_ClockConfig+0xd4>
			if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 8007592:	f7fd fe63 	bl	800525c <HAL_GetTick>
 8007596:	1b80      	subs	r0, r0, r6
 8007598:	f241 3388 	movw	r3, #5000	; 0x1388
 800759c:	4298      	cmp	r0, r3
 800759e:	d9f0      	bls.n	8007582 <HAL_RCC_ClockConfig+0x96>
				return HAL_TIMEOUT;
 80075a0:	2003      	movs	r0, #3
 80075a2:	e045      	b.n	8007630 <HAL_RCC_ClockConfig+0x144>
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 80075a4:	4a28      	ldr	r2, [pc, #160]	; (8007648 <HAL_RCC_ClockConfig+0x15c>)
 80075a6:	6812      	ldr	r2, [r2, #0]
 80075a8:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80075ac:	d1e0      	bne.n	8007570 <HAL_RCC_ClockConfig+0x84>
				return HAL_ERROR;
 80075ae:	2001      	movs	r0, #1
 80075b0:	e03e      	b.n	8007630 <HAL_RCC_ClockConfig+0x144>
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 80075b2:	4a25      	ldr	r2, [pc, #148]	; (8007648 <HAL_RCC_ClockConfig+0x15c>)
 80075b4:	6812      	ldr	r2, [r2, #0]
 80075b6:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80075ba:	d1d9      	bne.n	8007570 <HAL_RCC_ClockConfig+0x84>
				return HAL_ERROR;
 80075bc:	2001      	movs	r0, #1
 80075be:	e037      	b.n	8007630 <HAL_RCC_ClockConfig+0x144>
	if (FLatency < __HAL_FLASH_GET_LATENCY()) {
 80075c0:	4b20      	ldr	r3, [pc, #128]	; (8007644 <HAL_RCC_ClockConfig+0x158>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f003 030f 	and.w	r3, r3, #15
 80075c8:	42ab      	cmp	r3, r5
 80075ca:	d90a      	bls.n	80075e2 <HAL_RCC_ClockConfig+0xf6>
		__HAL_FLASH_SET_LATENCY(FLatency);
 80075cc:	4a1d      	ldr	r2, [pc, #116]	; (8007644 <HAL_RCC_ClockConfig+0x158>)
 80075ce:	6813      	ldr	r3, [r2, #0]
 80075d0:	f023 030f 	bic.w	r3, r3, #15
 80075d4:	432b      	orrs	r3, r5
 80075d6:	6013      	str	r3, [r2, #0]
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 80075d8:	6813      	ldr	r3, [r2, #0]
 80075da:	f003 030f 	and.w	r3, r3, #15
 80075de:	42ab      	cmp	r3, r5
 80075e0:	d12d      	bne.n	800763e <HAL_RCC_ClockConfig+0x152>
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 80075e2:	6823      	ldr	r3, [r4, #0]
 80075e4:	f013 0f04 	tst.w	r3, #4
 80075e8:	d006      	beq.n	80075f8 <HAL_RCC_ClockConfig+0x10c>
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1,
 80075ea:	4a17      	ldr	r2, [pc, #92]	; (8007648 <HAL_RCC_ClockConfig+0x15c>)
 80075ec:	6893      	ldr	r3, [r2, #8]
 80075ee:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80075f2:	68e1      	ldr	r1, [r4, #12]
 80075f4:	430b      	orrs	r3, r1
 80075f6:	6093      	str	r3, [r2, #8]
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 80075f8:	6823      	ldr	r3, [r4, #0]
 80075fa:	f013 0f08 	tst.w	r3, #8
 80075fe:	d007      	beq.n	8007610 <HAL_RCC_ClockConfig+0x124>
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2,
 8007600:	4a11      	ldr	r2, [pc, #68]	; (8007648 <HAL_RCC_ClockConfig+0x15c>)
 8007602:	6893      	ldr	r3, [r2, #8]
 8007604:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007608:	6921      	ldr	r1, [r4, #16]
 800760a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800760e:	6093      	str	r3, [r2, #8]
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 8007610:	f7ff ff18 	bl	8007444 <HAL_RCC_GetSysClockFreq>
			>> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007614:	4b0c      	ldr	r3, [pc, #48]	; (8007648 <HAL_RCC_ClockConfig+0x15c>)
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800761c:	4a0b      	ldr	r2, [pc, #44]	; (800764c <HAL_RCC_ClockConfig+0x160>)
 800761e:	5cd3      	ldrb	r3, [r2, r3]
 8007620:	40d8      	lsrs	r0, r3
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 8007622:	4b0b      	ldr	r3, [pc, #44]	; (8007650 <HAL_RCC_ClockConfig+0x164>)
 8007624:	6018      	str	r0, [r3, #0]
	HAL_InitTick(uwTickPrio);
 8007626:	4b0b      	ldr	r3, [pc, #44]	; (8007654 <HAL_RCC_ClockConfig+0x168>)
 8007628:	6818      	ldr	r0, [r3, #0]
 800762a:	f7fd fce7 	bl	8004ffc <HAL_InitTick>
	return HAL_OK;
 800762e:	2000      	movs	r0, #0
}
 8007630:	bd70      	pop	{r4, r5, r6, pc}
		return HAL_ERROR;
 8007632:	2001      	movs	r0, #1
}
 8007634:	4770      	bx	lr
			return HAL_ERROR;
 8007636:	2001      	movs	r0, #1
 8007638:	e7fa      	b.n	8007630 <HAL_RCC_ClockConfig+0x144>
				return HAL_ERROR;
 800763a:	2001      	movs	r0, #1
 800763c:	e7f8      	b.n	8007630 <HAL_RCC_ClockConfig+0x144>
			return HAL_ERROR;
 800763e:	2001      	movs	r0, #1
 8007640:	e7f6      	b.n	8007630 <HAL_RCC_ClockConfig+0x144>
 8007642:	bf00      	nop
 8007644:	40023c00 	.word	0x40023c00
 8007648:	40023800 	.word	0x40023800
 800764c:	0800ebec 	.word	0x0800ebec
 8007650:	200000a8 	.word	0x200000a8
 8007654:	200000b0 	.word	0x200000b0

08007658 <HAL_RCC_GetHCLKFreq>:
 * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
 * @retval HCLK frequency
 */
uint32_t HAL_RCC_GetHCLKFreq(void) {
	return SystemCoreClock;
}
 8007658:	4b01      	ldr	r3, [pc, #4]	; (8007660 <HAL_RCC_GetHCLKFreq+0x8>)
 800765a:	6818      	ldr	r0, [r3, #0]
 800765c:	4770      	bx	lr
 800765e:	bf00      	nop
 8007660:	200000a8 	.word	0x200000a8

08007664 <HAL_RCC_GetPCLK1Freq>:
 * @brief  Returns the PCLK1 frequency
 * @note   Each time PCLK1 changes, this function must be called to update the
 *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK1 frequency
 */
uint32_t HAL_RCC_GetPCLK1Freq(void) {
 8007664:	b508      	push	{r3, lr}
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (HAL_RCC_GetHCLKFreq()
 8007666:	f7ff fff7 	bl	8007658 <HAL_RCC_GetHCLKFreq>
			>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800766a:	4b04      	ldr	r3, [pc, #16]	; (800767c <HAL_RCC_GetPCLK1Freq+0x18>)
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8007672:	4a03      	ldr	r2, [pc, #12]	; (8007680 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8007674:	5cd3      	ldrb	r3, [r2, r3]
}
 8007676:	40d8      	lsrs	r0, r3
 8007678:	bd08      	pop	{r3, pc}
 800767a:	bf00      	nop
 800767c:	40023800 	.word	0x40023800
 8007680:	0800ebfc 	.word	0x0800ebfc

08007684 <HAL_RCC_GetPCLK2Freq>:
 * @brief  Returns the PCLK2 frequency
 * @note   Each time PCLK2 changes, this function must be called to update the
 *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK2 frequency
 */
uint32_t HAL_RCC_GetPCLK2Freq(void) {
 8007684:	b508      	push	{r3, lr}
	/* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
	return (HAL_RCC_GetHCLKFreq()
 8007686:	f7ff ffe7 	bl	8007658 <HAL_RCC_GetHCLKFreq>
			>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800768a:	4b04      	ldr	r3, [pc, #16]	; (800769c <HAL_RCC_GetPCLK2Freq+0x18>)
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8007692:	4a03      	ldr	r2, [pc, #12]	; (80076a0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8007694:	5cd3      	ldrb	r3, [r2, r3]
}
 8007696:	40d8      	lsrs	r0, r3
 8007698:	bd08      	pop	{r3, pc}
 800769a:	bf00      	nop
 800769c:	40023800 	.word	0x40023800
 80076a0:	0800ebfc 	.word	0x0800ebfc

080076a4 <HAL_RCC_GetClockConfig>:
 * @retval None
 */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct,
		uint32_t *pFLatency) {
	/* Set all possible values for the Clock type parameter --------------------*/
	RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 80076a4:	230f      	movs	r3, #15
 80076a6:	6003      	str	r3, [r0, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

	/* Get the SYSCLK configuration --------------------------------------------*/
	RCC_ClkInitStruct->SYSCLKSource = (uint32_t) (RCC->CFGR & RCC_CFGR_SW);
 80076a8:	4b0b      	ldr	r3, [pc, #44]	; (80076d8 <HAL_RCC_GetClockConfig+0x34>)
 80076aa:	689a      	ldr	r2, [r3, #8]
 80076ac:	f002 0203 	and.w	r2, r2, #3
 80076b0:	6042      	str	r2, [r0, #4]

	/* Get the HCLK configuration ----------------------------------------------*/
	RCC_ClkInitStruct->AHBCLKDivider = (uint32_t) (RCC->CFGR & RCC_CFGR_HPRE);
 80076b2:	689a      	ldr	r2, [r3, #8]
 80076b4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80076b8:	6082      	str	r2, [r0, #8]

	/* Get the APB1 configuration ----------------------------------------------*/
	RCC_ClkInitStruct->APB1CLKDivider = (uint32_t) (RCC->CFGR & RCC_CFGR_PPRE1);
 80076ba:	689a      	ldr	r2, [r3, #8]
 80076bc:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80076c0:	60c2      	str	r2, [r0, #12]

	/* Get the APB2 configuration ----------------------------------------------*/
	RCC_ClkInitStruct->APB2CLKDivider = (uint32_t) ((RCC->CFGR & RCC_CFGR_PPRE2)
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	08db      	lsrs	r3, r3, #3
 80076c6:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80076ca:	6103      	str	r3, [r0, #16]
			>> 3);

	/* Get the Flash Wait State (Latency) configuration ------------------------*/
	*pFLatency = (uint32_t) (FLASH->ACR & FLASH_ACR_LATENCY);
 80076cc:	4b03      	ldr	r3, [pc, #12]	; (80076dc <HAL_RCC_GetClockConfig+0x38>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f003 030f 	and.w	r3, r3, #15
 80076d4:	600b      	str	r3, [r1, #0]
}
 80076d6:	4770      	bx	lr
 80076d8:	40023800 	.word	0x40023800
 80076dc:	40023c00 	.word	0x40023c00

080076e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80076e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076e2:	b083      	sub	sp, #12
 80076e4:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80076e6:	6806      	ldr	r6, [r0, #0]
 80076e8:	f016 0601 	ands.w	r6, r6, #1
 80076ec:	d00d      	beq.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80076ee:	4bb5      	ldr	r3, [pc, #724]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80076f0:	689a      	ldr	r2, [r3, #8]
 80076f2:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80076f6:	609a      	str	r2, [r3, #8]
 80076f8:	689a      	ldr	r2, [r3, #8]
 80076fa:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80076fc:	430a      	orrs	r2, r1
 80076fe:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007700:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007702:	2b00      	cmp	r3, #0
 8007704:	f000 8167 	beq.w	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  uint32_t plli2sused = 0;
 8007708:	2600      	movs	r6, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800770a:	6825      	ldr	r5, [r4, #0]
 800770c:	f415 2500 	ands.w	r5, r5, #524288	; 0x80000
 8007710:	d011      	beq.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007712:	4aac      	ldr	r2, [pc, #688]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007714:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8007718:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800771c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800771e:	430b      	orrs	r3, r1
 8007720:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007724:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007726:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800772a:	f000 8156 	beq.w	80079da <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800772e:	2b00      	cmp	r3, #0
 8007730:	f000 8155 	beq.w	80079de <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  uint32_t pllsaiused = 0;
 8007734:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007736:	6823      	ldr	r3, [r4, #0]
 8007738:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800773c:	d00f      	beq.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x7e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800773e:	4aa1      	ldr	r2, [pc, #644]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007740:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8007744:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8007748:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800774a:	430b      	orrs	r3, r1
 800774c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007750:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007752:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007756:	f000 8144 	beq.w	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x302>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800775a:	b903      	cbnz	r3, 800775e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      pllsaiused = 1;
 800775c:	2501      	movs	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800775e:	6823      	ldr	r3, [r4, #0]
 8007760:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8007764:	d000      	beq.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
      plli2sused = 1;
 8007766:	2601      	movs	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007768:	f013 0f20 	tst.w	r3, #32
 800776c:	f040 813b 	bne.w	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x306>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007770:	6823      	ldr	r3, [r4, #0]
 8007772:	f013 0f10 	tst.w	r3, #16
 8007776:	d00c      	beq.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007778:	4b92      	ldr	r3, [pc, #584]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800777a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800777e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007782:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8007786:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800778a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800778c:	430a      	orrs	r2, r1
 800778e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007792:	6823      	ldr	r3, [r4, #0]
 8007794:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8007798:	d008      	beq.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800779a:	4a8a      	ldr	r2, [pc, #552]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800779c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80077a0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80077a4:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80077a6:	430b      	orrs	r3, r1
 80077a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80077ac:	6823      	ldr	r3, [r4, #0]
 80077ae:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80077b2:	d008      	beq.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80077b4:	4a83      	ldr	r2, [pc, #524]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80077b6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80077ba:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80077be:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80077c0:	430b      	orrs	r3, r1
 80077c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80077c6:	6823      	ldr	r3, [r4, #0]
 80077c8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80077cc:	d008      	beq.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80077ce:	4a7d      	ldr	r2, [pc, #500]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80077d0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80077d4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80077d8:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80077da:	430b      	orrs	r3, r1
 80077dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80077e0:	6823      	ldr	r3, [r4, #0]
 80077e2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80077e6:	d008      	beq.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80077e8:	4a76      	ldr	r2, [pc, #472]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80077ea:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80077ee:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80077f2:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80077f4:	430b      	orrs	r3, r1
 80077f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80077fa:	6823      	ldr	r3, [r4, #0]
 80077fc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007800:	d008      	beq.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007802:	4a70      	ldr	r2, [pc, #448]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007804:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007808:	f023 0303 	bic.w	r3, r3, #3
 800780c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800780e:	430b      	orrs	r3, r1
 8007810:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007814:	6823      	ldr	r3, [r4, #0]
 8007816:	f013 0f80 	tst.w	r3, #128	; 0x80
 800781a:	d008      	beq.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800781c:	4a69      	ldr	r2, [pc, #420]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800781e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007822:	f023 030c 	bic.w	r3, r3, #12
 8007826:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007828:	430b      	orrs	r3, r1
 800782a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800782e:	6823      	ldr	r3, [r4, #0]
 8007830:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007834:	d008      	beq.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007836:	4a63      	ldr	r2, [pc, #396]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007838:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800783c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007840:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007842:	430b      	orrs	r3, r1
 8007844:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007848:	6823      	ldr	r3, [r4, #0]
 800784a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800784e:	d008      	beq.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007850:	4a5c      	ldr	r2, [pc, #368]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007852:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007856:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800785a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800785c:	430b      	orrs	r3, r1
 800785e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007862:	6823      	ldr	r3, [r4, #0]
 8007864:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8007868:	d008      	beq.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800786a:	4a56      	ldr	r2, [pc, #344]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800786c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007870:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007874:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8007876:	430b      	orrs	r3, r1
 8007878:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800787c:	6823      	ldr	r3, [r4, #0]
 800787e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8007882:	d008      	beq.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007884:	4a4f      	ldr	r2, [pc, #316]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007886:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800788a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800788e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007890:	430b      	orrs	r3, r1
 8007892:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007896:	6823      	ldr	r3, [r4, #0]
 8007898:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800789c:	d008      	beq.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800789e:	4a49      	ldr	r2, [pc, #292]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80078a0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80078a4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80078a8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80078aa:	430b      	orrs	r3, r1
 80078ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80078b0:	6823      	ldr	r3, [r4, #0]
 80078b2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80078b6:	d008      	beq.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80078b8:	4a42      	ldr	r2, [pc, #264]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80078ba:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80078be:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80078c2:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80078c4:	430b      	orrs	r3, r1
 80078c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80078ca:	6823      	ldr	r3, [r4, #0]
 80078cc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80078d0:	d008      	beq.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80078d2:	4a3c      	ldr	r2, [pc, #240]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80078d4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80078d8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80078dc:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80078de:	430b      	orrs	r3, r1
 80078e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80078e4:	6823      	ldr	r3, [r4, #0]
 80078e6:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80078ea:	d00d      	beq.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80078ec:	4a35      	ldr	r2, [pc, #212]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80078ee:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80078f2:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80078f6:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80078f8:	430b      	orrs	r3, r1
 80078fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80078fe:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8007900:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007904:	f000 80d5 	beq.w	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007908:	6823      	ldr	r3, [r4, #0]
 800790a:	f013 0f08 	tst.w	r3, #8
 800790e:	d000      	beq.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    pllsaiused = 1;
 8007910:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007912:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8007916:	d008      	beq.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007918:	4a2a      	ldr	r2, [pc, #168]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800791a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800791e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8007922:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8007924:	430b      	orrs	r3, r1
 8007926:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800792a:	6823      	ldr	r3, [r4, #0]
 800792c:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8007930:	d009      	beq.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007932:	4a24      	ldr	r2, [pc, #144]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007934:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007938:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800793c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8007940:	430b      	orrs	r3, r1
 8007942:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007946:	6823      	ldr	r3, [r4, #0]
 8007948:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 800794c:	d009      	beq.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x282>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800794e:	4a1d      	ldr	r2, [pc, #116]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007950:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007954:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007958:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800795c:	430b      	orrs	r3, r1
 800795e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007962:	6823      	ldr	r3, [r4, #0]
 8007964:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8007968:	d009      	beq.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800796a:	4a16      	ldr	r2, [pc, #88]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800796c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8007970:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007974:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8007978:	430b      	orrs	r3, r1
 800797a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800797e:	6823      	ldr	r3, [r4, #0]
 8007980:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8007984:	d009      	beq.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007986:	4a0f      	ldr	r2, [pc, #60]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007988:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800798c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007990:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8007994:	430b      	orrs	r3, r1
 8007996:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800799a:	b926      	cbnz	r6, 80079a6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
 800799c:	6823      	ldr	r3, [r4, #0]
 800799e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80079a2:	f000 8106 	beq.w	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80079a6:	4a07      	ldr	r2, [pc, #28]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80079a8:	6813      	ldr	r3, [r2, #0]
 80079aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80079ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079b0:	f7fd fc54 	bl	800525c <HAL_GetTick>
 80079b4:	4606      	mov	r6, r0

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80079b6:	4b03      	ldr	r3, [pc, #12]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80079be:	d07a      	beq.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
 80079c0:	e002      	b.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 80079c2:	bf00      	nop
 80079c4:	40023800 	.word	0x40023800
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80079c8:	f7fd fc48 	bl	800525c <HAL_GetTick>
 80079cc:	1b80      	subs	r0, r0, r6
 80079ce:	2864      	cmp	r0, #100	; 0x64
 80079d0:	d9f1      	bls.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80079d2:	2003      	movs	r0, #3
 80079d4:	e0f0      	b.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
      plli2sused = 1;
 80079d6:	2601      	movs	r6, #1
 80079d8:	e697      	b.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1;
 80079da:	2601      	movs	r6, #1
 80079dc:	e6a7      	b.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x4e>
      pllsaiused = 1;
 80079de:	2501      	movs	r5, #1
 80079e0:	e6a9      	b.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x56>
      plli2sused = 1;
 80079e2:	2601      	movs	r6, #1
 80079e4:	e6b9      	b.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    __HAL_RCC_PWR_CLK_ENABLE();
 80079e6:	4b7f      	ldr	r3, [pc, #508]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80079e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079ea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80079ee:	641a      	str	r2, [r3, #64]	; 0x40
 80079f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079f6:	9301      	str	r3, [sp, #4]
 80079f8:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80079fa:	4a7b      	ldr	r2, [pc, #492]	; (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 80079fc:	6813      	ldr	r3, [r2, #0]
 80079fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a02:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8007a04:	f7fd fc2a 	bl	800525c <HAL_GetTick>
 8007a08:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007a0a:	4b77      	ldr	r3, [pc, #476]	; (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007a12:	d106      	bne.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x342>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a14:	f7fd fc22 	bl	800525c <HAL_GetTick>
 8007a18:	1bc0      	subs	r0, r0, r7
 8007a1a:	2864      	cmp	r0, #100	; 0x64
 8007a1c:	d9f5      	bls.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x32a>
        return HAL_TIMEOUT;
 8007a1e:	2003      	movs	r0, #3
 8007a20:	e0ca      	b.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007a22:	4b70      	ldr	r3, [pc, #448]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007a26:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8007a2a:	d015      	beq.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8007a2c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007a2e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d010      	beq.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x378>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007a36:	4b6b      	ldr	r3, [pc, #428]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007a38:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007a3a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8007a3e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007a40:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8007a44:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007a46:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007a48:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8007a4c:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8007a4e:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a52:	f013 0f01 	tst.w	r3, #1
 8007a56:	d112      	bne.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a58:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007a5a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8007a5e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8007a62:	d01d      	beq.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8007a64:	4a5f      	ldr	r2, [pc, #380]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007a66:	6893      	ldr	r3, [r2, #8]
 8007a68:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007a6c:	6093      	str	r3, [r2, #8]
 8007a6e:	495d      	ldr	r1, [pc, #372]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007a70:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8007a72:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007a74:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	670b      	str	r3, [r1, #112]	; 0x70
 8007a7c:	e678      	b.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x90>
        tickstart = HAL_GetTick();
 8007a7e:	f7fd fbed 	bl	800525c <HAL_GetTick>
 8007a82:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a84:	4b57      	ldr	r3, [pc, #348]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a88:	f013 0f02 	tst.w	r3, #2
 8007a8c:	d1e4      	bne.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x378>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a8e:	f7fd fbe5 	bl	800525c <HAL_GetTick>
 8007a92:	1bc0      	subs	r0, r0, r7
 8007a94:	f241 3388 	movw	r3, #5000	; 0x1388
 8007a98:	4298      	cmp	r0, r3
 8007a9a:	d9f3      	bls.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
            return HAL_TIMEOUT;
 8007a9c:	2003      	movs	r0, #3
 8007a9e:	e08b      	b.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007aa0:	4850      	ldr	r0, [pc, #320]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007aa2:	6882      	ldr	r2, [r0, #8]
 8007aa4:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8007aa8:	4950      	ldr	r1, [pc, #320]	; (8007bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007aaa:	4019      	ands	r1, r3
 8007aac:	430a      	orrs	r2, r1
 8007aae:	6082      	str	r2, [r0, #8]
 8007ab0:	e7dd      	b.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x38e>
      pllsaiused = 1;
 8007ab2:	2501      	movs	r5, #1
 8007ab4:	e728      	b.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x228>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007ab6:	6823      	ldr	r3, [r4, #0]
 8007ab8:	f013 0f01 	tst.w	r3, #1
 8007abc:	d013      	beq.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007abe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007ac0:	b98b      	cbnz	r3, 8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007ac2:	4a48      	ldr	r2, [pc, #288]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007ac4:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007ac8:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007acc:	6860      	ldr	r0, [r4, #4]
 8007ace:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007ad2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8007ad6:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8007ada:	430b      	orrs	r3, r1
 8007adc:	68a1      	ldr	r1, [r4, #8]
 8007ade:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8007ae2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007ae6:	6823      	ldr	r3, [r4, #0]
 8007ae8:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8007aec:	d003      	beq.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007aee:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8007af0:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8007af4:	d006      	beq.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8007af6:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8007afa:	d01e      	beq.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x45a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007afc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007afe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b02:	d11a      	bne.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x45a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007b04:	4a37      	ldr	r2, [pc, #220]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007b06:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007b0a:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007b0e:	6860      	ldr	r0, [r4, #4]
 8007b10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007b14:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8007b18:	68e0      	ldr	r0, [r4, #12]
 8007b1a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8007b1e:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8007b22:	430b      	orrs	r3, r1
 8007b24:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007b28:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8007b2c:	f023 031f 	bic.w	r3, r3, #31
 8007b30:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007b32:	3901      	subs	r1, #1
 8007b34:	430b      	orrs	r3, r1
 8007b36:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007b3a:	6823      	ldr	r3, [r4, #0]
 8007b3c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8007b40:	d011      	beq.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x486>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007b42:	4a28      	ldr	r2, [pc, #160]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007b44:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007b48:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007b4c:	6866      	ldr	r6, [r4, #4]
 8007b4e:	6923      	ldr	r3, [r4, #16]
 8007b50:	041b      	lsls	r3, r3, #16
 8007b52:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8007b56:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8007b5a:	4303      	orrs	r3, r0
 8007b5c:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8007b60:	430b      	orrs	r3, r1
 8007b62:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007b66:	6823      	ldr	r3, [r4, #0]
 8007b68:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8007b6c:	d00d      	beq.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007b6e:	6862      	ldr	r2, [r4, #4]
 8007b70:	6923      	ldr	r3, [r4, #16]
 8007b72:	041b      	lsls	r3, r3, #16
 8007b74:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8007b78:	68e2      	ldr	r2, [r4, #12]
 8007b7a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007b7e:	68a2      	ldr	r2, [r4, #8]
 8007b80:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8007b84:	4a17      	ldr	r2, [pc, #92]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007b86:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007b8a:	4a16      	ldr	r2, [pc, #88]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007b8c:	6813      	ldr	r3, [r2, #0]
 8007b8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007b92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b94:	f7fd fb62 	bl	800525c <HAL_GetTick>
 8007b98:	4606      	mov	r6, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007b9a:	4b12      	ldr	r3, [pc, #72]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8007ba2:	d106      	bne.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007ba4:	f7fd fb5a 	bl	800525c <HAL_GetTick>
 8007ba8:	1b80      	subs	r0, r0, r6
 8007baa:	2864      	cmp	r0, #100	; 0x64
 8007bac:	d9f5      	bls.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007bae:	2003      	movs	r0, #3
 8007bb0:	e002      	b.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007bb2:	2d01      	cmp	r5, #1
 8007bb4:	d002      	beq.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8007bb6:	2000      	movs	r0, #0
}
 8007bb8:	b003      	add	sp, #12
 8007bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 8007bbc:	4a09      	ldr	r2, [pc, #36]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007bbe:	6813      	ldr	r3, [r2, #0]
 8007bc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007bc4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8007bc6:	f7fd fb49 	bl	800525c <HAL_GetTick>
 8007bca:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007bcc:	4b05      	ldr	r3, [pc, #20]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8007bd4:	d00c      	beq.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x510>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007bd6:	f7fd fb41 	bl	800525c <HAL_GetTick>
 8007bda:	1b40      	subs	r0, r0, r5
 8007bdc:	2864      	cmp	r0, #100	; 0x64
 8007bde:	d9f5      	bls.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x4ec>
        return HAL_TIMEOUT;
 8007be0:	2003      	movs	r0, #3
 8007be2:	e7e9      	b.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8007be4:	40023800 	.word	0x40023800
 8007be8:	40007000 	.word	0x40007000
 8007bec:	0ffffcff 	.word	0x0ffffcff
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007bf0:	6823      	ldr	r3, [r4, #0]
 8007bf2:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8007bf6:	d001      	beq.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x51c>
 8007bf8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8007bfa:	b122      	cbz	r2, 8007c06 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8007bfc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8007c00:	d01d      	beq.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x55e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007c02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c04:	b9db      	cbnz	r3, 8007c3e <HAL_RCCEx_PeriphCLKConfig+0x55e>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007c06:	4a35      	ldr	r2, [pc, #212]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8007c08:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007c0c:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007c10:	6960      	ldr	r0, [r4, #20]
 8007c12:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007c16:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8007c1a:	69a0      	ldr	r0, [r4, #24]
 8007c1c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8007c20:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8007c24:	430b      	orrs	r3, r1
 8007c26:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007c2a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8007c2e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8007c32:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007c34:	3901      	subs	r1, #1
 8007c36:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007c3a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007c3e:	6823      	ldr	r3, [r4, #0]
 8007c40:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8007c44:	d003      	beq.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x56e>
 8007c46:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8007c48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c4c:	d031      	beq.n	8007cb2 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007c4e:	6823      	ldr	r3, [r4, #0]
 8007c50:	f013 0f08 	tst.w	r3, #8
 8007c54:	d019      	beq.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007c56:	4a21      	ldr	r2, [pc, #132]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8007c58:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007c5c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007c60:	6960      	ldr	r0, [r4, #20]
 8007c62:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007c66:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8007c6a:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8007c6e:	430b      	orrs	r3, r1
 8007c70:	69e1      	ldr	r1, [r4, #28]
 8007c72:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8007c76:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007c7a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8007c7e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007c82:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007c84:	430b      	orrs	r3, r1
 8007c86:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8007c8a:	4a14      	ldr	r2, [pc, #80]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8007c8c:	6813      	ldr	r3, [r2, #0]
 8007c8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c92:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8007c94:	f7fd fae2 	bl	800525c <HAL_GetTick>
 8007c98:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007c9a:	4b10      	ldr	r3, [pc, #64]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8007ca2:	d119      	bne.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007ca4:	f7fd fada 	bl	800525c <HAL_GetTick>
 8007ca8:	1b00      	subs	r0, r0, r4
 8007caa:	2864      	cmp	r0, #100	; 0x64
 8007cac:	d9f5      	bls.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
        return HAL_TIMEOUT;
 8007cae:	2003      	movs	r0, #3
 8007cb0:	e782      	b.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007cb2:	4a0a      	ldr	r2, [pc, #40]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8007cb4:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007cb8:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007cbc:	6965      	ldr	r5, [r4, #20]
 8007cbe:	6a23      	ldr	r3, [r4, #32]
 8007cc0:	041b      	lsls	r3, r3, #16
 8007cc2:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8007cc6:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8007cca:	4303      	orrs	r3, r0
 8007ccc:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8007cd0:	430b      	orrs	r3, r1
 8007cd2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8007cd6:	e7ba      	b.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x56e>
  return HAL_OK;
 8007cd8:	2000      	movs	r0, #0
 8007cda:	e76d      	b.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8007cdc:	40023800 	.word	0x40023800

08007ce0 <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8007ce0:	4770      	bx	lr

08007ce2 <HAL_SDRAM_Init>:
  if (hsdram == NULL)
 8007ce2:	b1e0      	cbz	r0, 8007d1e <HAL_SDRAM_Init+0x3c>
{
 8007ce4:	b538      	push	{r3, r4, r5, lr}
 8007ce6:	460d      	mov	r5, r1
 8007ce8:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8007cea:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8007cee:	b18b      	cbz	r3, 8007d14 <HAL_SDRAM_Init+0x32>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007cf0:	2302      	movs	r3, #2
 8007cf2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007cf6:	4621      	mov	r1, r4
 8007cf8:	f851 0b04 	ldr.w	r0, [r1], #4
 8007cfc:	f001 f9c2 	bl	8009084 <FMC_SDRAM_Init>
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8007d00:	6862      	ldr	r2, [r4, #4]
 8007d02:	4629      	mov	r1, r5
 8007d04:	6820      	ldr	r0, [r4, #0]
 8007d06:	f001 f9f7 	bl	80090f8 <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 8007d10:	2000      	movs	r0, #0
}
 8007d12:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8007d14:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8007d18:	f7ff ffe2 	bl	8007ce0 <HAL_SDRAM_MspInit>
 8007d1c:	e7e8      	b.n	8007cf0 <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 8007d1e:	2001      	movs	r0, #1
}
 8007d20:	4770      	bx	lr

08007d22 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8007d22:	b538      	push	{r3, r4, r5, lr}
 8007d24:	4604      	mov	r4, r0
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8007d26:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8007d2a:	b2d8      	uxtb	r0, r3

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8007d2c:	2802      	cmp	r0, #2
 8007d2e:	d005      	beq.n	8007d3c <HAL_SDRAM_SendCommand+0x1a>
 8007d30:	460d      	mov	r5, r1
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8007d32:	2805      	cmp	r0, #5
 8007d34:	bf18      	it	ne
 8007d36:	2801      	cmpne	r0, #1
 8007d38:	d001      	beq.n	8007d3e <HAL_SDRAM_SendCommand+0x1c>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 8007d3a:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8007d3c:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007d3e:	2302      	movs	r3, #2
 8007d40:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007d44:	6820      	ldr	r0, [r4, #0]
 8007d46:	f001 fa2b 	bl	80091a0 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007d4a:	682b      	ldr	r3, [r5, #0]
 8007d4c:	2b02      	cmp	r3, #2
 8007d4e:	d004      	beq.n	8007d5a <HAL_SDRAM_SendCommand+0x38>
      hsdram->State = HAL_SDRAM_STATE_READY;
 8007d50:	2301      	movs	r3, #1
 8007d52:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 8007d56:	2000      	movs	r0, #0
 8007d58:	e7f0      	b.n	8007d3c <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007d5a:	2305      	movs	r3, #5
 8007d5c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 8007d60:	2000      	movs	r0, #0
 8007d62:	e7eb      	b.n	8007d3c <HAL_SDRAM_SendCommand+0x1a>

08007d64 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8007d64:	b510      	push	{r4, lr}
 8007d66:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007d68:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8007d6c:	b2d8      	uxtb	r0, r3
 8007d6e:	2802      	cmp	r0, #2
 8007d70:	d005      	beq.n	8007d7e <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8007d72:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d001      	beq.n	8007d80 <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 8007d7c:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8007d7e:	bd10      	pop	{r4, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007d80:	2302      	movs	r3, #2
 8007d82:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8007d86:	6820      	ldr	r0, [r4, #0]
 8007d88:	f001 fa22 	bl	80091d0 <FMC_SDRAM_ProgramRefreshRate>
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 8007d92:	2000      	movs	r0, #0
 8007d94:	e7f3      	b.n	8007d7e <HAL_SDRAM_ProgramRefreshRate+0x1a>

08007d96 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007d96:	4770      	bx	lr

08007d98 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007d98:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d13a      	bne.n	8007e18 <HAL_TIM_Base_Start_IT+0x80>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007da2:	2302      	movs	r3, #2
 8007da4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007da8:	6802      	ldr	r2, [r0, #0]
 8007daa:	68d3      	ldr	r3, [r2, #12]
 8007dac:	f043 0301 	orr.w	r3, r3, #1
 8007db0:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007db2:	6803      	ldr	r3, [r0, #0]
 8007db4:	4a1a      	ldr	r2, [pc, #104]	; (8007e20 <HAL_TIM_Base_Start_IT+0x88>)
 8007db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dba:	bf18      	it	ne
 8007dbc:	4293      	cmpne	r3, r2
 8007dbe:	d01d      	beq.n	8007dfc <HAL_TIM_Base_Start_IT+0x64>
 8007dc0:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d019      	beq.n	8007dfc <HAL_TIM_Base_Start_IT+0x64>
 8007dc8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d015      	beq.n	8007dfc <HAL_TIM_Base_Start_IT+0x64>
 8007dd0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d011      	beq.n	8007dfc <HAL_TIM_Base_Start_IT+0x64>
 8007dd8:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d00d      	beq.n	8007dfc <HAL_TIM_Base_Start_IT+0x64>
 8007de0:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d009      	beq.n	8007dfc <HAL_TIM_Base_Start_IT+0x64>
 8007de8:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d005      	beq.n	8007dfc <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	f042 0201 	orr.w	r2, r2, #1
 8007df6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007df8:	2000      	movs	r0, #0
 8007dfa:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007dfc:	6899      	ldr	r1, [r3, #8]
 8007dfe:	4a09      	ldr	r2, [pc, #36]	; (8007e24 <HAL_TIM_Base_Start_IT+0x8c>)
 8007e00:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e02:	2a06      	cmp	r2, #6
 8007e04:	bf18      	it	ne
 8007e06:	f5b2 3f80 	cmpne.w	r2, #65536	; 0x10000
 8007e0a:	d007      	beq.n	8007e1c <HAL_TIM_Base_Start_IT+0x84>
      __HAL_TIM_ENABLE(htim);
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	f042 0201 	orr.w	r2, r2, #1
 8007e12:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007e14:	2000      	movs	r0, #0
 8007e16:	4770      	bx	lr
    return HAL_ERROR;
 8007e18:	2001      	movs	r0, #1
 8007e1a:	4770      	bx	lr
  return HAL_OK;
 8007e1c:	2000      	movs	r0, #0
}
 8007e1e:	4770      	bx	lr
 8007e20:	40010000 	.word	0x40010000
 8007e24:	00010007 	.word	0x00010007

08007e28 <HAL_TIM_PeriodElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007e28:	4770      	bx	lr

08007e2a <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007e2a:	4770      	bx	lr

08007e2c <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007e2c:	4770      	bx	lr

08007e2e <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e2e:	4770      	bx	lr

08007e30 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e30:	4770      	bx	lr

08007e32 <HAL_TIM_IRQHandler>:
{
 8007e32:	b510      	push	{r4, lr}
 8007e34:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007e36:	6803      	ldr	r3, [r0, #0]
 8007e38:	691a      	ldr	r2, [r3, #16]
 8007e3a:	f012 0f02 	tst.w	r2, #2
 8007e3e:	d011      	beq.n	8007e64 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007e40:	68da      	ldr	r2, [r3, #12]
 8007e42:	f012 0f02 	tst.w	r2, #2
 8007e46:	d00d      	beq.n	8007e64 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007e48:	f06f 0202 	mvn.w	r2, #2
 8007e4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e52:	6803      	ldr	r3, [r0, #0]
 8007e54:	699b      	ldr	r3, [r3, #24]
 8007e56:	f013 0f03 	tst.w	r3, #3
 8007e5a:	d079      	beq.n	8007f50 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8007e5c:	f7ff ffe6 	bl	8007e2c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e60:	2300      	movs	r3, #0
 8007e62:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007e64:	6823      	ldr	r3, [r4, #0]
 8007e66:	691a      	ldr	r2, [r3, #16]
 8007e68:	f012 0f04 	tst.w	r2, #4
 8007e6c:	d012      	beq.n	8007e94 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007e6e:	68da      	ldr	r2, [r3, #12]
 8007e70:	f012 0f04 	tst.w	r2, #4
 8007e74:	d00e      	beq.n	8007e94 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007e76:	f06f 0204 	mvn.w	r2, #4
 8007e7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e7c:	2302      	movs	r3, #2
 8007e7e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e80:	6823      	ldr	r3, [r4, #0]
 8007e82:	699b      	ldr	r3, [r3, #24]
 8007e84:	f413 7f40 	tst.w	r3, #768	; 0x300
 8007e88:	d068      	beq.n	8007f5c <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8007e8a:	4620      	mov	r0, r4
 8007e8c:	f7ff ffce 	bl	8007e2c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e90:	2300      	movs	r3, #0
 8007e92:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007e94:	6823      	ldr	r3, [r4, #0]
 8007e96:	691a      	ldr	r2, [r3, #16]
 8007e98:	f012 0f08 	tst.w	r2, #8
 8007e9c:	d012      	beq.n	8007ec4 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007e9e:	68da      	ldr	r2, [r3, #12]
 8007ea0:	f012 0f08 	tst.w	r2, #8
 8007ea4:	d00e      	beq.n	8007ec4 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007ea6:	f06f 0208 	mvn.w	r2, #8
 8007eaa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007eac:	2304      	movs	r3, #4
 8007eae:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007eb0:	6823      	ldr	r3, [r4, #0]
 8007eb2:	69db      	ldr	r3, [r3, #28]
 8007eb4:	f013 0f03 	tst.w	r3, #3
 8007eb8:	d057      	beq.n	8007f6a <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8007eba:	4620      	mov	r0, r4
 8007ebc:	f7ff ffb6 	bl	8007e2c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007ec4:	6823      	ldr	r3, [r4, #0]
 8007ec6:	691a      	ldr	r2, [r3, #16]
 8007ec8:	f012 0f10 	tst.w	r2, #16
 8007ecc:	d012      	beq.n	8007ef4 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007ece:	68da      	ldr	r2, [r3, #12]
 8007ed0:	f012 0f10 	tst.w	r2, #16
 8007ed4:	d00e      	beq.n	8007ef4 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007ed6:	f06f 0210 	mvn.w	r2, #16
 8007eda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007edc:	2308      	movs	r3, #8
 8007ede:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ee0:	6823      	ldr	r3, [r4, #0]
 8007ee2:	69db      	ldr	r3, [r3, #28]
 8007ee4:	f413 7f40 	tst.w	r3, #768	; 0x300
 8007ee8:	d046      	beq.n	8007f78 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8007eea:	4620      	mov	r0, r4
 8007eec:	f7ff ff9e 	bl	8007e2c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007ef4:	6823      	ldr	r3, [r4, #0]
 8007ef6:	691a      	ldr	r2, [r3, #16]
 8007ef8:	f012 0f01 	tst.w	r2, #1
 8007efc:	d003      	beq.n	8007f06 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007efe:	68da      	ldr	r2, [r3, #12]
 8007f00:	f012 0f01 	tst.w	r2, #1
 8007f04:	d13f      	bne.n	8007f86 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007f06:	6823      	ldr	r3, [r4, #0]
 8007f08:	691a      	ldr	r2, [r3, #16]
 8007f0a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007f0e:	d003      	beq.n	8007f18 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007f10:	68da      	ldr	r2, [r3, #12]
 8007f12:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007f16:	d13d      	bne.n	8007f94 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007f18:	6823      	ldr	r3, [r4, #0]
 8007f1a:	691a      	ldr	r2, [r3, #16]
 8007f1c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8007f20:	d003      	beq.n	8007f2a <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007f22:	68da      	ldr	r2, [r3, #12]
 8007f24:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007f28:	d13b      	bne.n	8007fa2 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007f2a:	6823      	ldr	r3, [r4, #0]
 8007f2c:	691a      	ldr	r2, [r3, #16]
 8007f2e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007f32:	d003      	beq.n	8007f3c <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007f34:	68da      	ldr	r2, [r3, #12]
 8007f36:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007f3a:	d139      	bne.n	8007fb0 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007f3c:	6823      	ldr	r3, [r4, #0]
 8007f3e:	691a      	ldr	r2, [r3, #16]
 8007f40:	f012 0f20 	tst.w	r2, #32
 8007f44:	d003      	beq.n	8007f4e <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007f46:	68da      	ldr	r2, [r3, #12]
 8007f48:	f012 0f20 	tst.w	r2, #32
 8007f4c:	d137      	bne.n	8007fbe <HAL_TIM_IRQHandler+0x18c>
}
 8007f4e:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f50:	f7ff ff6b 	bl	8007e2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f54:	4620      	mov	r0, r4
 8007f56:	f7ff ff6a 	bl	8007e2e <HAL_TIM_PWM_PulseFinishedCallback>
 8007f5a:	e781      	b.n	8007e60 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f5c:	4620      	mov	r0, r4
 8007f5e:	f7ff ff64 	bl	8007e2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f62:	4620      	mov	r0, r4
 8007f64:	f7ff ff63 	bl	8007e2e <HAL_TIM_PWM_PulseFinishedCallback>
 8007f68:	e792      	b.n	8007e90 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f6a:	4620      	mov	r0, r4
 8007f6c:	f7ff ff5d 	bl	8007e2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f70:	4620      	mov	r0, r4
 8007f72:	f7ff ff5c 	bl	8007e2e <HAL_TIM_PWM_PulseFinishedCallback>
 8007f76:	e7a3      	b.n	8007ec0 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f78:	4620      	mov	r0, r4
 8007f7a:	f7ff ff56 	bl	8007e2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f7e:	4620      	mov	r0, r4
 8007f80:	f7ff ff55 	bl	8007e2e <HAL_TIM_PWM_PulseFinishedCallback>
 8007f84:	e7b4      	b.n	8007ef0 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007f86:	f06f 0201 	mvn.w	r2, #1
 8007f8a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f8c:	4620      	mov	r0, r4
 8007f8e:	f7ff ff4b 	bl	8007e28 <HAL_TIM_PeriodElapsedCallback>
 8007f92:	e7b8      	b.n	8007f06 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007f94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007f98:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8007f9a:	4620      	mov	r0, r4
 8007f9c:	f000 f8cf 	bl	800813e <HAL_TIMEx_BreakCallback>
 8007fa0:	e7ba      	b.n	8007f18 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007fa2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007fa6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8007fa8:	4620      	mov	r0, r4
 8007faa:	f000 f8c9 	bl	8008140 <HAL_TIMEx_Break2Callback>
 8007fae:	e7bc      	b.n	8007f2a <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007fb0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007fb4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8007fb6:	4620      	mov	r0, r4
 8007fb8:	f7ff ff3a 	bl	8007e30 <HAL_TIM_TriggerCallback>
 8007fbc:	e7be      	b.n	8007f3c <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007fbe:	f06f 0220 	mvn.w	r2, #32
 8007fc2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8007fc4:	4620      	mov	r0, r4
 8007fc6:	f000 f8b9 	bl	800813c <HAL_TIMEx_CommutCallback>
}
 8007fca:	e7c0      	b.n	8007f4e <HAL_TIM_IRQHandler+0x11c>

08007fcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007fcc:	b530      	push	{r4, r5, lr}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007fce:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007fd0:	4a3b      	ldr	r2, [pc, #236]	; (80080c0 <TIM_Base_SetConfig+0xf4>)
 8007fd2:	4290      	cmp	r0, r2
 8007fd4:	bf14      	ite	ne
 8007fd6:	f04f 0e00 	movne.w	lr, #0
 8007fda:	f04f 0e01 	moveq.w	lr, #1
 8007fde:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007fe2:	bf14      	ite	ne
 8007fe4:	4672      	movne	r2, lr
 8007fe6:	f04e 0201 	orreq.w	r2, lr, #1
 8007fea:	b9aa      	cbnz	r2, 8008018 <TIM_Base_SetConfig+0x4c>
 8007fec:	4c35      	ldr	r4, [pc, #212]	; (80080c4 <TIM_Base_SetConfig+0xf8>)
 8007fee:	42a0      	cmp	r0, r4
 8007ff0:	bf14      	ite	ne
 8007ff2:	2400      	movne	r4, #0
 8007ff4:	2401      	moveq	r4, #1
 8007ff6:	4d34      	ldr	r5, [pc, #208]	; (80080c8 <TIM_Base_SetConfig+0xfc>)
 8007ff8:	42a8      	cmp	r0, r5
 8007ffa:	d00d      	beq.n	8008018 <TIM_Base_SetConfig+0x4c>
 8007ffc:	b964      	cbnz	r4, 8008018 <TIM_Base_SetConfig+0x4c>
 8007ffe:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8008002:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
 8008006:	42a0      	cmp	r0, r4
 8008008:	bf14      	ite	ne
 800800a:	2400      	movne	r4, #0
 800800c:	2401      	moveq	r4, #1
 800800e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008012:	42a8      	cmp	r0, r5
 8008014:	d000      	beq.n	8008018 <TIM_Base_SetConfig+0x4c>
 8008016:	b11c      	cbz	r4, 8008020 <TIM_Base_SetConfig+0x54>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008018:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800801c:	684c      	ldr	r4, [r1, #4]
 800801e:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008020:	2a00      	cmp	r2, #0
 8008022:	d133      	bne.n	800808c <TIM_Base_SetConfig+0xc0>
 8008024:	4a27      	ldr	r2, [pc, #156]	; (80080c4 <TIM_Base_SetConfig+0xf8>)
 8008026:	4290      	cmp	r0, r2
 8008028:	bf14      	ite	ne
 800802a:	2200      	movne	r2, #0
 800802c:	2201      	moveq	r2, #1
 800802e:	4c26      	ldr	r4, [pc, #152]	; (80080c8 <TIM_Base_SetConfig+0xfc>)
 8008030:	42a0      	cmp	r0, r4
 8008032:	d02b      	beq.n	800808c <TIM_Base_SetConfig+0xc0>
 8008034:	bb52      	cbnz	r2, 800808c <TIM_Base_SetConfig+0xc0>
 8008036:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800803a:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 800803e:	4290      	cmp	r0, r2
 8008040:	bf14      	ite	ne
 8008042:	2200      	movne	r2, #0
 8008044:	2201      	moveq	r2, #1
 8008046:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800804a:	42a0      	cmp	r0, r4
 800804c:	d01e      	beq.n	800808c <TIM_Base_SetConfig+0xc0>
 800804e:	b9ea      	cbnz	r2, 800808c <TIM_Base_SetConfig+0xc0>
 8008050:	4a1e      	ldr	r2, [pc, #120]	; (80080cc <TIM_Base_SetConfig+0x100>)
 8008052:	4290      	cmp	r0, r2
 8008054:	bf14      	ite	ne
 8008056:	2200      	movne	r2, #0
 8008058:	2201      	moveq	r2, #1
 800805a:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 800805e:	42a0      	cmp	r0, r4
 8008060:	d014      	beq.n	800808c <TIM_Base_SetConfig+0xc0>
 8008062:	b99a      	cbnz	r2, 800808c <TIM_Base_SetConfig+0xc0>
 8008064:	4a1a      	ldr	r2, [pc, #104]	; (80080d0 <TIM_Base_SetConfig+0x104>)
 8008066:	4290      	cmp	r0, r2
 8008068:	bf14      	ite	ne
 800806a:	2200      	movne	r2, #0
 800806c:	2201      	moveq	r2, #1
 800806e:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8008072:	42a0      	cmp	r0, r4
 8008074:	d00a      	beq.n	800808c <TIM_Base_SetConfig+0xc0>
 8008076:	b94a      	cbnz	r2, 800808c <TIM_Base_SetConfig+0xc0>
 8008078:	4a16      	ldr	r2, [pc, #88]	; (80080d4 <TIM_Base_SetConfig+0x108>)
 800807a:	4290      	cmp	r0, r2
 800807c:	bf14      	ite	ne
 800807e:	2200      	movne	r2, #0
 8008080:	2201      	moveq	r2, #1
 8008082:	f5a4 3496 	sub.w	r4, r4, #76800	; 0x12c00
 8008086:	42a0      	cmp	r0, r4
 8008088:	d000      	beq.n	800808c <TIM_Base_SetConfig+0xc0>
 800808a:	b122      	cbz	r2, 8008096 <TIM_Base_SetConfig+0xca>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800808c:	f423 7c40 	bic.w	ip, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008090:	68cb      	ldr	r3, [r1, #12]
 8008092:	ea43 030c 	orr.w	r3, r3, ip
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008096:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800809a:	694a      	ldr	r2, [r1, #20]
 800809c:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800809e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80080a0:	688a      	ldr	r2, [r1, #8]
 80080a2:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80080a4:	680a      	ldr	r2, [r1, #0]
 80080a6:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80080a8:	4a0b      	ldr	r2, [pc, #44]	; (80080d8 <TIM_Base_SetConfig+0x10c>)
 80080aa:	4290      	cmp	r0, r2
 80080ac:	bf14      	ite	ne
 80080ae:	4673      	movne	r3, lr
 80080b0:	f04e 0301 	orreq.w	r3, lr, #1
 80080b4:	b10b      	cbz	r3, 80080ba <TIM_Base_SetConfig+0xee>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80080b6:	690b      	ldr	r3, [r1, #16]
 80080b8:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80080ba:	2301      	movs	r3, #1
 80080bc:	6143      	str	r3, [r0, #20]
}
 80080be:	bd30      	pop	{r4, r5, pc}
 80080c0:	40010000 	.word	0x40010000
 80080c4:	40000800 	.word	0x40000800
 80080c8:	40000400 	.word	0x40000400
 80080cc:	40014400 	.word	0x40014400
 80080d0:	40001800 	.word	0x40001800
 80080d4:	40002000 	.word	0x40002000
 80080d8:	40010400 	.word	0x40010400

080080dc <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80080dc:	b360      	cbz	r0, 8008138 <HAL_TIM_Base_Init+0x5c>
{
 80080de:	b510      	push	{r4, lr}
 80080e0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80080e2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80080e6:	b313      	cbz	r3, 800812e <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 80080e8:	2302      	movs	r3, #2
 80080ea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080ee:	4621      	mov	r1, r4
 80080f0:	f851 0b04 	ldr.w	r0, [r1], #4
 80080f4:	f7ff ff6a 	bl	8007fcc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080f8:	2301      	movs	r3, #1
 80080fa:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080fe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8008102:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8008106:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800810a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800810e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008112:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008116:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800811a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800811e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8008122:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8008126:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800812a:	2000      	movs	r0, #0
}
 800812c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800812e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8008132:	f7ff fe30 	bl	8007d96 <HAL_TIM_Base_MspInit>
 8008136:	e7d7      	b.n	80080e8 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8008138:	2001      	movs	r0, #1
}
 800813a:	4770      	bx	lr

0800813c <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800813c:	4770      	bx	lr

0800813e <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800813e:	4770      	bx	lr

08008140 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008140:	4770      	bx	lr

08008142 <UART_EndTxTransfer>:
 * @param  huart UART handle.
 * @retval None
 */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart) {
	/* Disable TXEIE and TCIE interrupts */
	ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008142:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008144:	e852 3f00 	ldrex	r3, [r2]
 8008148:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800814c:	e842 3100 	strex	r1, r3, [r2]
 8008150:	2900      	cmp	r1, #0
 8008152:	d1f6      	bne.n	8008142 <UART_EndTxTransfer>

	/* At end of Tx process, restore huart->gState to Ready */
	huart->gState = HAL_UART_STATE_READY;
 8008154:	2320      	movs	r3, #32
 8008156:	67c3      	str	r3, [r0, #124]	; 0x7c
}
 8008158:	4770      	bx	lr

0800815a <UART_EndRxTransfer>:
 * @param  huart UART handle.
 * @retval None
 */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart) {
	/* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
	ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800815a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800815c:	e852 3f00 	ldrex	r3, [r2]
 8008160:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008164:	e842 3100 	strex	r1, r3, [r2]
 8008168:	2900      	cmp	r1, #0
 800816a:	d1f6      	bne.n	800815a <UART_EndRxTransfer>
	ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800816c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800816e:	f102 0308 	add.w	r3, r2, #8
 8008172:	e853 3f00 	ldrex	r3, [r3]
 8008176:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800817a:	3208      	adds	r2, #8
 800817c:	e842 3100 	strex	r1, r3, [r2]
 8008180:	2900      	cmp	r1, #0
 8008182:	d1f3      	bne.n	800816c <UART_EndRxTransfer+0x12>

	/* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
	if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
 8008184:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8008186:	2b01      	cmp	r3, #1
 8008188:	d006      	beq.n	8008198 <UART_EndRxTransfer+0x3e>
		ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
	}

	/* At end of Rx process, restore huart->RxState to Ready */
	huart->RxState = HAL_UART_STATE_READY;
 800818a:	2320      	movs	r3, #32
 800818c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008190:	2300      	movs	r3, #0
 8008192:	6603      	str	r3, [r0, #96]	; 0x60

	/* Reset RxIsr function pointer */
	huart->RxISR = NULL;
 8008194:	6683      	str	r3, [r0, #104]	; 0x68
}
 8008196:	4770      	bx	lr
		ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008198:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800819a:	e852 3f00 	ldrex	r3, [r2]
 800819e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a2:	e842 3100 	strex	r1, r3, [r2]
 80081a6:	2900      	cmp	r1, #0
 80081a8:	d1f6      	bne.n	8008198 <UART_EndRxTransfer+0x3e>
 80081aa:	e7ee      	b.n	800818a <UART_EndRxTransfer+0x30>

080081ac <UART_TxISR_8BIT>:
 * @param huart UART handle.
 * @retval None
 */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart) {
	/* Check that a Tx process is ongoing */
	if (huart->gState == HAL_UART_STATE_BUSY_TX) {
 80081ac:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80081ae:	2b21      	cmp	r3, #33	; 0x21
 80081b0:	d000      	beq.n	80081b4 <UART_TxISR_8BIT+0x8>
					& (uint8_t) 0xFF);
			huart->pTxBuffPtr++;
			huart->TxXferCount--;
		}
	}
}
 80081b2:	4770      	bx	lr
		if (huart->TxXferCount == 0U) {
 80081b4:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	b993      	cbnz	r3, 80081e2 <UART_TxISR_8BIT+0x36>
			ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80081bc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081be:	e852 3f00 	ldrex	r3, [r2]
 80081c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c6:	e842 3100 	strex	r1, r3, [r2]
 80081ca:	2900      	cmp	r1, #0
 80081cc:	d1f6      	bne.n	80081bc <UART_TxISR_8BIT+0x10>
			ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80081ce:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d0:	e852 3f00 	ldrex	r3, [r2]
 80081d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d8:	e842 3100 	strex	r1, r3, [r2]
 80081dc:	2900      	cmp	r1, #0
 80081de:	d1f6      	bne.n	80081ce <UART_TxISR_8BIT+0x22>
 80081e0:	4770      	bx	lr
			huart->Instance->TDR = (uint8_t) (*huart->pTxBuffPtr
 80081e2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80081e4:	781a      	ldrb	r2, [r3, #0]
 80081e6:	6803      	ldr	r3, [r0, #0]
 80081e8:	629a      	str	r2, [r3, #40]	; 0x28
			huart->pTxBuffPtr++;
 80081ea:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80081ec:	3301      	adds	r3, #1
 80081ee:	64c3      	str	r3, [r0, #76]	; 0x4c
			huart->TxXferCount--;
 80081f0:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80081f4:	b29b      	uxth	r3, r3
 80081f6:	3b01      	subs	r3, #1
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
}
 80081fe:	e7d8      	b.n	80081b2 <UART_TxISR_8BIT+0x6>

08008200 <UART_TxISR_16BIT>:
 */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart) {
	const uint16_t *tmp;

	/* Check that a Tx process is ongoing */
	if (huart->gState == HAL_UART_STATE_BUSY_TX) {
 8008200:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8008202:	2b21      	cmp	r3, #33	; 0x21
 8008204:	d000      	beq.n	8008208 <UART_TxISR_16BIT+0x8>
			huart->Instance->TDR = (((uint32_t) (*tmp)) & 0x01FFUL);
			huart->pTxBuffPtr += 2U;
			huart->TxXferCount--;
		}
	}
}
 8008206:	4770      	bx	lr
		if (huart->TxXferCount == 0U) {
 8008208:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 800820c:	b29b      	uxth	r3, r3
 800820e:	b993      	cbnz	r3, 8008236 <UART_TxISR_16BIT+0x36>
			ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008210:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008212:	e852 3f00 	ldrex	r3, [r2]
 8008216:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800821a:	e842 3100 	strex	r1, r3, [r2]
 800821e:	2900      	cmp	r1, #0
 8008220:	d1f6      	bne.n	8008210 <UART_TxISR_16BIT+0x10>
			ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008222:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008224:	e852 3f00 	ldrex	r3, [r2]
 8008228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800822c:	e842 3100 	strex	r1, r3, [r2]
 8008230:	2900      	cmp	r1, #0
 8008232:	d1f6      	bne.n	8008222 <UART_TxISR_16BIT+0x22>
 8008234:	4770      	bx	lr
			tmp = (const uint16_t*) huart->pTxBuffPtr;
 8008236:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
			huart->Instance->TDR = (((uint32_t) (*tmp)) & 0x01FFUL);
 8008238:	881b      	ldrh	r3, [r3, #0]
 800823a:	6802      	ldr	r2, [r0, #0]
 800823c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008240:	6293      	str	r3, [r2, #40]	; 0x28
			huart->pTxBuffPtr += 2U;
 8008242:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008244:	3302      	adds	r3, #2
 8008246:	64c3      	str	r3, [r0, #76]	; 0x4c
			huart->TxXferCount--;
 8008248:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 800824c:	b29b      	uxth	r3, r3
 800824e:	3b01      	subs	r3, #1
 8008250:	b29b      	uxth	r3, r3
 8008252:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
}
 8008256:	e7d6      	b.n	8008206 <UART_TxISR_16BIT+0x6>

08008258 <HAL_UART_Transmit_IT>:
	if (huart->gState == HAL_UART_STATE_READY) {
 8008258:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800825a:	2b20      	cmp	r3, #32
 800825c:	d125      	bne.n	80082aa <HAL_UART_Transmit_IT+0x52>
		if ((pData == NULL) || (Size == 0U)) {
 800825e:	2a00      	cmp	r2, #0
 8008260:	bf18      	it	ne
 8008262:	2900      	cmpne	r1, #0
 8008264:	d023      	beq.n	80082ae <HAL_UART_Transmit_IT+0x56>
		huart->pTxBuffPtr = pData;
 8008266:	64c1      	str	r1, [r0, #76]	; 0x4c
		huart->TxXferSize = Size;
 8008268:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
		huart->TxXferCount = Size;
 800826c:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
		huart->TxISR = NULL;
 8008270:	2300      	movs	r3, #0
 8008272:	66c3      	str	r3, [r0, #108]	; 0x6c
		huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008274:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		huart->gState = HAL_UART_STATE_BUSY_TX;
 8008278:	2321      	movs	r3, #33	; 0x21
 800827a:	67c3      	str	r3, [r0, #124]	; 0x7c
		if ((huart->Init.WordLength == UART_WORDLENGTH_9B)
 800827c:	6883      	ldr	r3, [r0, #8]
 800827e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008282:	d00c      	beq.n	800829e <HAL_UART_Transmit_IT+0x46>
			huart->TxISR = UART_TxISR_8BIT;
 8008284:	4b0b      	ldr	r3, [pc, #44]	; (80082b4 <HAL_UART_Transmit_IT+0x5c>)
 8008286:	66c3      	str	r3, [r0, #108]	; 0x6c
		ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008288:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800828a:	e852 3f00 	ldrex	r3, [r2]
 800828e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008292:	e842 3100 	strex	r1, r3, [r2]
 8008296:	2900      	cmp	r1, #0
 8008298:	d1f6      	bne.n	8008288 <HAL_UART_Transmit_IT+0x30>
		return HAL_OK;
 800829a:	2000      	movs	r0, #0
 800829c:	4770      	bx	lr
				&& (huart->Init.Parity == UART_PARITY_NONE)) {
 800829e:	6903      	ldr	r3, [r0, #16]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d1ef      	bne.n	8008284 <HAL_UART_Transmit_IT+0x2c>
			huart->TxISR = UART_TxISR_16BIT;
 80082a4:	4b04      	ldr	r3, [pc, #16]	; (80082b8 <HAL_UART_Transmit_IT+0x60>)
 80082a6:	66c3      	str	r3, [r0, #108]	; 0x6c
 80082a8:	e7ee      	b.n	8008288 <HAL_UART_Transmit_IT+0x30>
		return HAL_BUSY;
 80082aa:	2002      	movs	r0, #2
 80082ac:	4770      	bx	lr
			return HAL_ERROR;
 80082ae:	2001      	movs	r0, #1
}
 80082b0:	4770      	bx	lr
 80082b2:	bf00      	nop
 80082b4:	080081ad 	.word	0x080081ad
 80082b8:	08008201 	.word	0x08008201

080082bc <HAL_UART_Transmit_DMA>:
		const uint8_t *pData, uint16_t Size) {
 80082bc:	4613      	mov	r3, r2
	if (huart->gState == HAL_UART_STATE_READY) {
 80082be:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 80082c0:	2a20      	cmp	r2, #32
 80082c2:	d13b      	bne.n	800833c <HAL_UART_Transmit_DMA+0x80>
		const uint8_t *pData, uint16_t Size) {
 80082c4:	b510      	push	{r4, lr}
 80082c6:	4604      	mov	r4, r0
		if ((pData == NULL) || (Size == 0U)) {
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	bf18      	it	ne
 80082cc:	2900      	cmpne	r1, #0
 80082ce:	d037      	beq.n	8008340 <HAL_UART_Transmit_DMA+0x84>
		huart->pTxBuffPtr = pData;
 80082d0:	64c1      	str	r1, [r0, #76]	; 0x4c
		huart->TxXferSize = Size;
 80082d2:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
		huart->TxXferCount = Size;
 80082d6:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
		huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082da:	2200      	movs	r2, #0
 80082dc:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
		huart->gState = HAL_UART_STATE_BUSY_TX;
 80082e0:	2221      	movs	r2, #33	; 0x21
 80082e2:	67c2      	str	r2, [r0, #124]	; 0x7c
		if (huart->hdmatx != NULL) {
 80082e4:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80082e6:	b1c2      	cbz	r2, 800831a <HAL_UART_Transmit_DMA+0x5e>
			huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80082e8:	4916      	ldr	r1, [pc, #88]	; (8008344 <HAL_UART_Transmit_DMA+0x88>)
 80082ea:	63d1      	str	r1, [r2, #60]	; 0x3c
			huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80082ec:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80082ee:	4916      	ldr	r1, [pc, #88]	; (8008348 <HAL_UART_Transmit_DMA+0x8c>)
 80082f0:	6411      	str	r1, [r2, #64]	; 0x40
			huart->hdmatx->XferErrorCallback = UART_DMAError;
 80082f2:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80082f4:	4915      	ldr	r1, [pc, #84]	; (800834c <HAL_UART_Transmit_DMA+0x90>)
 80082f6:	64d1      	str	r1, [r2, #76]	; 0x4c
			huart->hdmatx->XferAbortCallback = NULL;
 80082f8:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80082fa:	2100      	movs	r1, #0
 80082fc:	6511      	str	r1, [r2, #80]	; 0x50
					(uint32_t) &huart->Instance->TDR, Size) != HAL_OK) {
 80082fe:	6802      	ldr	r2, [r0, #0]
			if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t) huart->pTxBuffPtr,
 8008300:	3228      	adds	r2, #40	; 0x28
 8008302:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8008304:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8008306:	f7fd f91b 	bl	8005540 <HAL_DMA_Start_IT>
 800830a:	b130      	cbz	r0, 800831a <HAL_UART_Transmit_DMA+0x5e>
				huart->ErrorCode = HAL_UART_ERROR_DMA;
 800830c:	2310      	movs	r3, #16
 800830e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
				huart->gState = HAL_UART_STATE_READY;
 8008312:	2320      	movs	r3, #32
 8008314:	67e3      	str	r3, [r4, #124]	; 0x7c
				return HAL_ERROR;
 8008316:	2001      	movs	r0, #1
 8008318:	e00f      	b.n	800833a <HAL_UART_Transmit_DMA+0x7e>
		__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800831a:	6823      	ldr	r3, [r4, #0]
 800831c:	2240      	movs	r2, #64	; 0x40
 800831e:	621a      	str	r2, [r3, #32]
		ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008320:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008322:	f102 0308 	add.w	r3, r2, #8
 8008326:	e853 3f00 	ldrex	r3, [r3]
 800832a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832e:	3208      	adds	r2, #8
 8008330:	e842 3100 	strex	r1, r3, [r2]
 8008334:	2900      	cmp	r1, #0
 8008336:	d1f3      	bne.n	8008320 <HAL_UART_Transmit_DMA+0x64>
		return HAL_OK;
 8008338:	2000      	movs	r0, #0
}
 800833a:	bd10      	pop	{r4, pc}
		return HAL_BUSY;
 800833c:	2002      	movs	r0, #2
}
 800833e:	4770      	bx	lr
			return HAL_ERROR;
 8008340:	2001      	movs	r0, #1
 8008342:	e7fa      	b.n	800833a <HAL_UART_Transmit_DMA+0x7e>
 8008344:	08008467 	.word	0x08008467
 8008348:	080084d1 	.word	0x080084d1
 800834c:	080084df 	.word	0x080084df

08008350 <HAL_UART_AbortTransmit>:
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart) {
 8008350:	b510      	push	{r4, lr}
 8008352:	4604      	mov	r4, r0
	ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008354:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008356:	e852 3f00 	ldrex	r3, [r2]
 800835a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800835e:	e842 3100 	strex	r1, r3, [r2]
 8008362:	2900      	cmp	r1, #0
 8008364:	d1f6      	bne.n	8008354 <HAL_UART_AbortTransmit+0x4>
	if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) {
 8008366:	6823      	ldr	r3, [r4, #0]
 8008368:	689b      	ldr	r3, [r3, #8]
 800836a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800836e:	d013      	beq.n	8008398 <HAL_UART_AbortTransmit+0x48>
		ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008370:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008372:	f102 0308 	add.w	r3, r2, #8
 8008376:	e853 3f00 	ldrex	r3, [r3]
 800837a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800837e:	3208      	adds	r2, #8
 8008380:	e842 3100 	strex	r1, r3, [r2]
 8008384:	2900      	cmp	r1, #0
 8008386:	d1f3      	bne.n	8008370 <HAL_UART_AbortTransmit+0x20>
		if (huart->hdmatx != NULL) {
 8008388:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800838a:	b12b      	cbz	r3, 8008398 <HAL_UART_AbortTransmit+0x48>
			huart->hdmatx->XferAbortCallback = NULL;
 800838c:	2200      	movs	r2, #0
 800838e:	651a      	str	r2, [r3, #80]	; 0x50
			if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK) {
 8008390:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8008392:	f7fd f90f 	bl	80055b4 <HAL_DMA_Abort>
 8008396:	b928      	cbnz	r0, 80083a4 <HAL_UART_AbortTransmit+0x54>
	huart->TxXferCount = 0U;
 8008398:	2000      	movs	r0, #0
 800839a:	f8a4 0052 	strh.w	r0, [r4, #82]	; 0x52
	huart->gState = HAL_UART_STATE_READY;
 800839e:	2320      	movs	r3, #32
 80083a0:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 80083a2:	bd10      	pop	{r4, pc}
				if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT) {
 80083a4:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80083a6:	f7fd fa51 	bl	800584c <HAL_DMA_GetError>
 80083aa:	2820      	cmp	r0, #32
 80083ac:	d1f4      	bne.n	8008398 <HAL_UART_AbortTransmit+0x48>
					huart->ErrorCode = HAL_UART_ERROR_DMA;
 80083ae:	2310      	movs	r3, #16
 80083b0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
					return HAL_TIMEOUT;
 80083b4:	2003      	movs	r0, #3
 80083b6:	e7f4      	b.n	80083a2 <HAL_UART_AbortTransmit+0x52>

080083b8 <HAL_UART_AbortReceive>:
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart) {
 80083b8:	b510      	push	{r4, lr}
 80083ba:	4604      	mov	r4, r0
	ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083bc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083be:	e852 3f00 	ldrex	r3, [r2]
 80083c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c6:	e842 3100 	strex	r1, r3, [r2]
 80083ca:	2900      	cmp	r1, #0
 80083cc:	d1f6      	bne.n	80083bc <HAL_UART_AbortReceive+0x4>
	ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083ce:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d0:	f102 0308 	add.w	r3, r2, #8
 80083d4:	e853 3f00 	ldrex	r3, [r3]
 80083d8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083dc:	3208      	adds	r2, #8
 80083de:	e842 3100 	strex	r1, r3, [r2]
 80083e2:	2900      	cmp	r1, #0
 80083e4:	d1f3      	bne.n	80083ce <HAL_UART_AbortReceive+0x16>
	if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
 80083e6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d028      	beq.n	800843e <HAL_UART_AbortReceive+0x86>
	if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 80083ec:	6823      	ldr	r3, [r4, #0]
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80083f4:	d013      	beq.n	800841e <HAL_UART_AbortReceive+0x66>
		ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083f6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f8:	f102 0308 	add.w	r3, r2, #8
 80083fc:	e853 3f00 	ldrex	r3, [r3]
 8008400:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008404:	3208      	adds	r2, #8
 8008406:	e842 3100 	strex	r1, r3, [r2]
 800840a:	2900      	cmp	r1, #0
 800840c:	d1f3      	bne.n	80083f6 <HAL_UART_AbortReceive+0x3e>
		if (huart->hdmarx != NULL) {
 800840e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8008410:	b12b      	cbz	r3, 800841e <HAL_UART_AbortReceive+0x66>
			huart->hdmarx->XferAbortCallback = NULL;
 8008412:	2200      	movs	r2, #0
 8008414:	651a      	str	r2, [r3, #80]	; 0x50
			if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK) {
 8008416:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8008418:	f7fd f8cc 	bl	80055b4 <HAL_DMA_Abort>
 800841c:	b9c8      	cbnz	r0, 8008452 <HAL_UART_AbortReceive+0x9a>
	huart->RxXferCount = 0U;
 800841e:	2000      	movs	r0, #0
 8008420:	f8a4 005a 	strh.w	r0, [r4, #90]	; 0x5a
	__HAL_UART_CLEAR_FLAG(huart,
 8008424:	6823      	ldr	r3, [r4, #0]
 8008426:	220f      	movs	r2, #15
 8008428:	621a      	str	r2, [r3, #32]
	__HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800842a:	6822      	ldr	r2, [r4, #0]
 800842c:	6993      	ldr	r3, [r2, #24]
 800842e:	f043 0308 	orr.w	r3, r3, #8
 8008432:	6193      	str	r3, [r2, #24]
	huart->RxState = HAL_UART_STATE_READY;
 8008434:	2320      	movs	r3, #32
 8008436:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800843a:	6620      	str	r0, [r4, #96]	; 0x60
}
 800843c:	bd10      	pop	{r4, pc}
		ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800843e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008440:	e852 3f00 	ldrex	r3, [r2]
 8008444:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008448:	e842 3100 	strex	r1, r3, [r2]
 800844c:	2900      	cmp	r1, #0
 800844e:	d1f6      	bne.n	800843e <HAL_UART_AbortReceive+0x86>
 8008450:	e7cc      	b.n	80083ec <HAL_UART_AbortReceive+0x34>
				if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT) {
 8008452:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8008454:	f7fd f9fa 	bl	800584c <HAL_DMA_GetError>
 8008458:	2820      	cmp	r0, #32
 800845a:	d1e0      	bne.n	800841e <HAL_UART_AbortReceive+0x66>
					huart->ErrorCode = HAL_UART_ERROR_DMA;
 800845c:	2310      	movs	r3, #16
 800845e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
					return HAL_TIMEOUT;
 8008462:	2003      	movs	r0, #3
 8008464:	e7ea      	b.n	800843c <HAL_UART_AbortReceive+0x84>

08008466 <UART_DMATransmitCplt>:
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma) {
 8008466:	b508      	push	{r3, lr}
 8008468:	4603      	mov	r3, r0
	UART_HandleTypeDef *huart = (UART_HandleTypeDef*) (hdma->Parent);
 800846a:	6b80      	ldr	r0, [r0, #56]	; 0x38
	if (hdma->Init.Mode == DMA_CIRCULAR) {
 800846c:	69db      	ldr	r3, [r3, #28]
 800846e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008472:	d118      	bne.n	80084a6 <UART_DMATransmitCplt+0x40>
		huart->TxXferCount = 0U;
 8008474:	2300      	movs	r3, #0
 8008476:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
		ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800847a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800847c:	f102 0308 	add.w	r3, r2, #8
 8008480:	e853 3f00 	ldrex	r3, [r3]
 8008484:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008488:	3208      	adds	r2, #8
 800848a:	e842 3100 	strex	r1, r3, [r2]
 800848e:	2900      	cmp	r1, #0
 8008490:	d1f3      	bne.n	800847a <UART_DMATransmitCplt+0x14>
		ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008492:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008494:	e852 3f00 	ldrex	r3, [r2]
 8008498:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800849c:	e842 3100 	strex	r1, r3, [r2]
 80084a0:	2900      	cmp	r1, #0
 80084a2:	d1f6      	bne.n	8008492 <UART_DMATransmitCplt+0x2c>
}
 80084a4:	bd08      	pop	{r3, pc}
		HAL_UART_TxCpltCallback(huart);
 80084a6:	f7fb fc1d 	bl	8003ce4 <HAL_UART_TxCpltCallback>
}
 80084aa:	e7fb      	b.n	80084a4 <UART_DMATransmitCplt+0x3e>

080084ac <UART_EndTransmit_IT>:
 * @brief  Wrap up transmission in non-blocking mode.
 * @param  huart pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart) {
 80084ac:	b508      	push	{r3, lr}
	/* Disable the UART Transmit Complete Interrupt */
	ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80084ae:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b0:	e852 3f00 	ldrex	r3, [r2]
 80084b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b8:	e842 3100 	strex	r1, r3, [r2]
 80084bc:	2900      	cmp	r1, #0
 80084be:	d1f6      	bne.n	80084ae <UART_EndTransmit_IT+0x2>

	/* Tx process is ended, restore huart->gState to Ready */
	huart->gState = HAL_UART_STATE_READY;
 80084c0:	2320      	movs	r3, #32
 80084c2:	67c3      	str	r3, [r0, #124]	; 0x7c

	/* Cleat TxISR function pointer */
	huart->TxISR = NULL;
 80084c4:	2300      	movs	r3, #0
 80084c6:	66c3      	str	r3, [r0, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
	/*Call legacy weak Tx complete callback*/
	HAL_UART_TxCpltCallback(huart);
 80084c8:	f7fb fc0c 	bl	8003ce4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084cc:	bd08      	pop	{r3, pc}

080084ce <HAL_UART_TxHalfCpltCallback>:
}
 80084ce:	4770      	bx	lr

080084d0 <UART_DMATxHalfCplt>:
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma) {
 80084d0:	b508      	push	{r3, lr}
	HAL_UART_TxHalfCpltCallback(huart);
 80084d2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80084d4:	f7ff fffb 	bl	80084ce <HAL_UART_TxHalfCpltCallback>
}
 80084d8:	bd08      	pop	{r3, pc}

080084da <HAL_UART_RxHalfCpltCallback>:
}
 80084da:	4770      	bx	lr

080084dc <HAL_UART_ErrorCallback>:
}
 80084dc:	4770      	bx	lr

080084de <UART_DMAError>:
static void UART_DMAError(DMA_HandleTypeDef *hdma) {
 80084de:	b538      	push	{r3, r4, r5, lr}
	UART_HandleTypeDef *huart = (UART_HandleTypeDef*) (hdma->Parent);
 80084e0:	6b84      	ldr	r4, [r0, #56]	; 0x38
	const HAL_UART_StateTypeDef gstate = huart->gState;
 80084e2:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
	const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80084e4:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
	if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80084e8:	6823      	ldr	r3, [r4, #0]
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 80084f0:	d001      	beq.n	80084f6 <UART_DMAError+0x18>
			&& (gstate == HAL_UART_STATE_BUSY_TX)) {
 80084f2:	2a21      	cmp	r2, #33	; 0x21
 80084f4:	d010      	beq.n	8008518 <UART_DMAError+0x3a>
	if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084f6:	6823      	ldr	r3, [r4, #0]
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	f013 0f40 	tst.w	r3, #64	; 0x40
 80084fe:	d001      	beq.n	8008504 <UART_DMAError+0x26>
			&& (rxstate == HAL_UART_STATE_BUSY_RX)) {
 8008500:	2d22      	cmp	r5, #34	; 0x22
 8008502:	d010      	beq.n	8008526 <UART_DMAError+0x48>
	huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008504:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8008508:	f043 0310 	orr.w	r3, r3, #16
 800850c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	HAL_UART_ErrorCallback(huart);
 8008510:	4620      	mov	r0, r4
 8008512:	f7ff ffe3 	bl	80084dc <HAL_UART_ErrorCallback>
}
 8008516:	bd38      	pop	{r3, r4, r5, pc}
		huart->TxXferCount = 0U;
 8008518:	2300      	movs	r3, #0
 800851a:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
		UART_EndTxTransfer(huart);
 800851e:	4620      	mov	r0, r4
 8008520:	f7ff fe0f 	bl	8008142 <UART_EndTxTransfer>
 8008524:	e7e7      	b.n	80084f6 <UART_DMAError+0x18>
		huart->RxXferCount = 0U;
 8008526:	2300      	movs	r3, #0
 8008528:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
		UART_EndRxTransfer(huart);
 800852c:	4620      	mov	r0, r4
 800852e:	f7ff fe14 	bl	800815a <UART_EndRxTransfer>
 8008532:	e7e7      	b.n	8008504 <UART_DMAError+0x26>

08008534 <UART_DMAAbortOnError>:
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma) {
 8008534:	b508      	push	{r3, lr}
	UART_HandleTypeDef *huart = (UART_HandleTypeDef*) (hdma->Parent);
 8008536:	6b80      	ldr	r0, [r0, #56]	; 0x38
	huart->RxXferCount = 0U;
 8008538:	2300      	movs	r3, #0
 800853a:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
	huart->TxXferCount = 0U;
 800853e:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
	HAL_UART_ErrorCallback(huart);
 8008542:	f7ff ffcb 	bl	80084dc <HAL_UART_ErrorCallback>
}
 8008546:	bd08      	pop	{r3, pc}

08008548 <HAL_UARTEx_RxEventCallback>:
}
 8008548:	4770      	bx	lr

0800854a <UART_DMARxHalfCplt>:
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma) {
 800854a:	b508      	push	{r3, lr}
	UART_HandleTypeDef *huart = (UART_HandleTypeDef*) (hdma->Parent);
 800854c:	6b80      	ldr	r0, [r0, #56]	; 0x38
	huart->RxEventType = HAL_UART_RXEVENT_HT;
 800854e:	2301      	movs	r3, #1
 8008550:	6643      	str	r3, [r0, #100]	; 0x64
	if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
 8008552:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8008554:	2b01      	cmp	r3, #1
 8008556:	d002      	beq.n	800855e <UART_DMARxHalfCplt+0x14>
		HAL_UART_RxHalfCpltCallback(huart);
 8008558:	f7ff ffbf 	bl	80084da <HAL_UART_RxHalfCpltCallback>
}
 800855c:	bd08      	pop	{r3, pc}
		HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800855e:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 8008562:	0849      	lsrs	r1, r1, #1
 8008564:	f7ff fff0 	bl	8008548 <HAL_UARTEx_RxEventCallback>
 8008568:	e7f8      	b.n	800855c <UART_DMARxHalfCplt+0x12>

0800856a <UART_DMAReceiveCplt>:
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma) {
 800856a:	b508      	push	{r3, lr}
 800856c:	4603      	mov	r3, r0
	UART_HandleTypeDef *huart = (UART_HandleTypeDef*) (hdma->Parent);
 800856e:	6b80      	ldr	r0, [r0, #56]	; 0x38
	if (hdma->Init.Mode != DMA_CIRCULAR) {
 8008570:	69db      	ldr	r3, [r3, #28]
 8008572:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008576:	d029      	beq.n	80085cc <UART_DMAReceiveCplt+0x62>
		huart->RxXferCount = 0U;
 8008578:	2300      	movs	r3, #0
 800857a:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
		ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800857e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008580:	e852 3f00 	ldrex	r3, [r2]
 8008584:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008588:	e842 3100 	strex	r1, r3, [r2]
 800858c:	2900      	cmp	r1, #0
 800858e:	d1f6      	bne.n	800857e <UART_DMAReceiveCplt+0x14>
		ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008590:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008592:	f102 0308 	add.w	r3, r2, #8
 8008596:	e853 3f00 	ldrex	r3, [r3]
 800859a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800859e:	3208      	adds	r2, #8
 80085a0:	e842 3100 	strex	r1, r3, [r2]
 80085a4:	2900      	cmp	r1, #0
 80085a6:	d1f3      	bne.n	8008590 <UART_DMAReceiveCplt+0x26>
		ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085a8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085aa:	f102 0308 	add.w	r3, r2, #8
 80085ae:	e853 3f00 	ldrex	r3, [r3]
 80085b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b6:	3208      	adds	r2, #8
 80085b8:	e842 3100 	strex	r1, r3, [r2]
 80085bc:	2900      	cmp	r1, #0
 80085be:	d1f3      	bne.n	80085a8 <UART_DMAReceiveCplt+0x3e>
		huart->RxState = HAL_UART_STATE_READY;
 80085c0:	2320      	movs	r3, #32
 80085c2:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
		if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
 80085c6:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d007      	beq.n	80085dc <UART_DMAReceiveCplt+0x72>
	huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085cc:	2300      	movs	r3, #0
 80085ce:	6643      	str	r3, [r0, #100]	; 0x64
	if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
 80085d0:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80085d2:	2b01      	cmp	r3, #1
 80085d4:	d00c      	beq.n	80085f0 <UART_DMAReceiveCplt+0x86>
		HAL_UART_RxCpltCallback(huart);
 80085d6:	f7fb fb69 	bl	8003cac <HAL_UART_RxCpltCallback>
}
 80085da:	bd08      	pop	{r3, pc}
			ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085dc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085de:	e852 3f00 	ldrex	r3, [r2]
 80085e2:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e6:	e842 3100 	strex	r1, r3, [r2]
 80085ea:	2900      	cmp	r1, #0
 80085ec:	d1f6      	bne.n	80085dc <UART_DMAReceiveCplt+0x72>
 80085ee:	e7ed      	b.n	80085cc <UART_DMAReceiveCplt+0x62>
		HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80085f0:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 80085f4:	f7ff ffa8 	bl	8008548 <HAL_UARTEx_RxEventCallback>
 80085f8:	e7ef      	b.n	80085da <UART_DMAReceiveCplt+0x70>

080085fa <HAL_UARTEx_WakeupCallback>:
}
 80085fa:	4770      	bx	lr

080085fc <HAL_UART_IRQHandler>:
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart) {
 80085fc:	b570      	push	{r4, r5, r6, lr}
 80085fe:	4604      	mov	r4, r0
	uint32_t isrflags = READ_REG(huart->Instance->ISR);
 8008600:	6801      	ldr	r1, [r0, #0]
 8008602:	69cb      	ldr	r3, [r1, #28]
	uint32_t cr1its = READ_REG(huart->Instance->CR1);
 8008604:	6808      	ldr	r0, [r1, #0]
	uint32_t cr3its = READ_REG(huart->Instance->CR3);
 8008606:	688d      	ldr	r5, [r1, #8]
	errorflags = (isrflags
 8008608:	f640 020f 	movw	r2, #2063	; 0x80f
	if (errorflags == 0U) {
 800860c:	401a      	ands	r2, r3
 800860e:	d105      	bne.n	800861c <HAL_UART_IRQHandler+0x20>
		if (((isrflags & USART_ISR_RXNE) != 0U)
 8008610:	f013 0f20 	tst.w	r3, #32
 8008614:	d002      	beq.n	800861c <HAL_UART_IRQHandler+0x20>
				&& ((cr1its & USART_CR1_RXNEIE) != 0U)) {
 8008616:	f010 0f20 	tst.w	r0, #32
 800861a:	d120      	bne.n	800865e <HAL_UART_IRQHandler+0x62>
	if ((errorflags != 0U)
 800861c:	b12a      	cbz	r2, 800862a <HAL_UART_IRQHandler+0x2e>
			&& (((cr3its & USART_CR3_EIE) != 0U)
 800861e:	f015 0201 	ands.w	r2, r5, #1
 8008622:	d122      	bne.n	800866a <HAL_UART_IRQHandler+0x6e>
					|| ((cr1its
 8008624:	4eae      	ldr	r6, [pc, #696]	; (80088e0 <HAL_UART_IRQHandler+0x2e4>)
 8008626:	4230      	tst	r0, r6
 8008628:	d11f      	bne.n	800866a <HAL_UART_IRQHandler+0x6e>
	if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800862a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800862c:	2a01      	cmp	r2, #1
 800862e:	f000 80ab 	beq.w	8008788 <HAL_UART_IRQHandler+0x18c>
	if (((isrflags & USART_ISR_WUF) != 0U)
 8008632:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008636:	d003      	beq.n	8008640 <HAL_UART_IRQHandler+0x44>
			&& ((cr3its & USART_CR3_WUFIE) != 0U)) {
 8008638:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 800863c:	f040 813e 	bne.w	80088bc <HAL_UART_IRQHandler+0x2c0>
	if (((isrflags & USART_ISR_TXE) != 0U)
 8008640:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008644:	d003      	beq.n	800864e <HAL_UART_IRQHandler+0x52>
			&& ((cr1its & USART_CR1_TXEIE) != 0U)) {
 8008646:	f010 0f80 	tst.w	r0, #128	; 0x80
 800864a:	f040 813e 	bne.w	80088ca <HAL_UART_IRQHandler+0x2ce>
	if (((isrflags & USART_ISR_TC) != 0U)
 800864e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008652:	d003      	beq.n	800865c <HAL_UART_IRQHandler+0x60>
			&& ((cr1its & USART_CR1_TCIE) != 0U)) {
 8008654:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008658:	f040 813e 	bne.w	80088d8 <HAL_UART_IRQHandler+0x2dc>
}
 800865c:	bd70      	pop	{r4, r5, r6, pc}
			if (huart->RxISR != NULL) {
 800865e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008660:	2b00      	cmp	r3, #0
 8008662:	d0fb      	beq.n	800865c <HAL_UART_IRQHandler+0x60>
				huart->RxISR(huart);
 8008664:	4620      	mov	r0, r4
 8008666:	4798      	blx	r3
			return;
 8008668:	e7f8      	b.n	800865c <HAL_UART_IRQHandler+0x60>
		if (((isrflags & USART_ISR_PE) != 0U)
 800866a:	f013 0f01 	tst.w	r3, #1
 800866e:	d009      	beq.n	8008684 <HAL_UART_IRQHandler+0x88>
				&& ((cr1its & USART_CR1_PEIE) != 0U)) {
 8008670:	f410 7f80 	tst.w	r0, #256	; 0x100
 8008674:	d006      	beq.n	8008684 <HAL_UART_IRQHandler+0x88>
			__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008676:	2501      	movs	r5, #1
 8008678:	620d      	str	r5, [r1, #32]
			huart->ErrorCode |= HAL_UART_ERROR_PE;
 800867a:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800867e:	4329      	orrs	r1, r5
 8008680:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
		if (((isrflags & USART_ISR_FE) != 0U)
 8008684:	f013 0f02 	tst.w	r3, #2
 8008688:	d009      	beq.n	800869e <HAL_UART_IRQHandler+0xa2>
				&& ((cr3its & USART_CR3_EIE) != 0U)) {
 800868a:	b142      	cbz	r2, 800869e <HAL_UART_IRQHandler+0xa2>
			__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800868c:	6821      	ldr	r1, [r4, #0]
 800868e:	2502      	movs	r5, #2
 8008690:	620d      	str	r5, [r1, #32]
			huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008692:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8008696:	f041 0104 	orr.w	r1, r1, #4
 800869a:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
		if (((isrflags & USART_ISR_NE) != 0U)
 800869e:	f013 0f04 	tst.w	r3, #4
 80086a2:	d009      	beq.n	80086b8 <HAL_UART_IRQHandler+0xbc>
				&& ((cr3its & USART_CR3_EIE) != 0U)) {
 80086a4:	b142      	cbz	r2, 80086b8 <HAL_UART_IRQHandler+0xbc>
			__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80086a6:	6821      	ldr	r1, [r4, #0]
 80086a8:	2504      	movs	r5, #4
 80086aa:	620d      	str	r5, [r1, #32]
			huart->ErrorCode |= HAL_UART_ERROR_NE;
 80086ac:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80086b0:	f041 0102 	orr.w	r1, r1, #2
 80086b4:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
		if (((isrflags & USART_ISR_ORE) != 0U)
 80086b8:	f013 0f08 	tst.w	r3, #8
 80086bc:	d00b      	beq.n	80086d6 <HAL_UART_IRQHandler+0xda>
				&& (((cr1its & USART_CR1_RXNEIE) != 0U)
 80086be:	f010 0f20 	tst.w	r0, #32
 80086c2:	d100      	bne.n	80086c6 <HAL_UART_IRQHandler+0xca>
						|| ((cr3its & USART_CR3_EIE) != 0U))) {
 80086c4:	b13a      	cbz	r2, 80086d6 <HAL_UART_IRQHandler+0xda>
			__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80086c6:	6822      	ldr	r2, [r4, #0]
 80086c8:	2108      	movs	r1, #8
 80086ca:	6211      	str	r1, [r2, #32]
			huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80086cc:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80086d0:	430a      	orrs	r2, r1
 80086d2:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
		if (((isrflags & USART_ISR_RTOF) != 0U)
 80086d6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80086da:	d00c      	beq.n	80086f6 <HAL_UART_IRQHandler+0xfa>
				&& ((cr1its & USART_CR1_RTOIE) != 0U)) {
 80086dc:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 80086e0:	d009      	beq.n	80086f6 <HAL_UART_IRQHandler+0xfa>
			__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086e2:	6822      	ldr	r2, [r4, #0]
 80086e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80086e8:	6211      	str	r1, [r2, #32]
			huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80086ea:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80086ee:	f042 0220 	orr.w	r2, r2, #32
 80086f2:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
		if (huart->ErrorCode != HAL_UART_ERROR_NONE) {
 80086f6:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80086fa:	2a00      	cmp	r2, #0
 80086fc:	d0ae      	beq.n	800865c <HAL_UART_IRQHandler+0x60>
			if (((isrflags & USART_ISR_RXNE) != 0U)
 80086fe:	f013 0f20 	tst.w	r3, #32
 8008702:	d006      	beq.n	8008712 <HAL_UART_IRQHandler+0x116>
					&& ((cr1its & USART_CR1_RXNEIE) != 0U)) {
 8008704:	f010 0f20 	tst.w	r0, #32
 8008708:	d003      	beq.n	8008712 <HAL_UART_IRQHandler+0x116>
				if (huart->RxISR != NULL) {
 800870a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800870c:	b10b      	cbz	r3, 8008712 <HAL_UART_IRQHandler+0x116>
					huart->RxISR(huart);
 800870e:	4620      	mov	r0, r4
 8008710:	4798      	blx	r3
			errorcode = huart->ErrorCode;
 8008712:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
			if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008716:	6823      	ldr	r3, [r4, #0]
 8008718:	689b      	ldr	r3, [r3, #8]
 800871a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800871e:	d102      	bne.n	8008726 <HAL_UART_IRQHandler+0x12a>
					|| ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE))
 8008720:	f012 0f28 	tst.w	r2, #40	; 0x28
 8008724:	d029      	beq.n	800877a <HAL_UART_IRQHandler+0x17e>
				UART_EndRxTransfer(huart);
 8008726:	4620      	mov	r0, r4
 8008728:	f7ff fd17 	bl	800815a <UART_EndRxTransfer>
				if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 800872c:	6823      	ldr	r3, [r4, #0]
 800872e:	689b      	ldr	r3, [r3, #8]
 8008730:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008734:	d01d      	beq.n	8008772 <HAL_UART_IRQHandler+0x176>
					ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008736:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008738:	f102 0308 	add.w	r3, r2, #8
 800873c:	e853 3f00 	ldrex	r3, [r3]
 8008740:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008744:	3208      	adds	r2, #8
 8008746:	e842 3100 	strex	r1, r3, [r2]
 800874a:	2900      	cmp	r1, #0
 800874c:	d1f3      	bne.n	8008736 <HAL_UART_IRQHandler+0x13a>
					if (huart->hdmarx != NULL) {
 800874e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8008750:	b15b      	cbz	r3, 800876a <HAL_UART_IRQHandler+0x16e>
						huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008752:	4a64      	ldr	r2, [pc, #400]	; (80088e4 <HAL_UART_IRQHandler+0x2e8>)
 8008754:	651a      	str	r2, [r3, #80]	; 0x50
						if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK) {
 8008756:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8008758:	f7fc ff76 	bl	8005648 <HAL_DMA_Abort_IT>
 800875c:	2800      	cmp	r0, #0
 800875e:	f43f af7d 	beq.w	800865c <HAL_UART_IRQHandler+0x60>
							huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008762:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8008764:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008766:	4798      	blx	r3
 8008768:	e778      	b.n	800865c <HAL_UART_IRQHandler+0x60>
						HAL_UART_ErrorCallback(huart);
 800876a:	4620      	mov	r0, r4
 800876c:	f7ff feb6 	bl	80084dc <HAL_UART_ErrorCallback>
 8008770:	e774      	b.n	800865c <HAL_UART_IRQHandler+0x60>
					HAL_UART_ErrorCallback(huart);
 8008772:	4620      	mov	r0, r4
 8008774:	f7ff feb2 	bl	80084dc <HAL_UART_ErrorCallback>
 8008778:	e770      	b.n	800865c <HAL_UART_IRQHandler+0x60>
				HAL_UART_ErrorCallback(huart);
 800877a:	4620      	mov	r0, r4
 800877c:	f7ff feae 	bl	80084dc <HAL_UART_ErrorCallback>
				huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008780:	2300      	movs	r3, #0
 8008782:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		return;
 8008786:	e769      	b.n	800865c <HAL_UART_IRQHandler+0x60>
			&& ((isrflags & USART_ISR_IDLE) != 0U)
 8008788:	f013 0f10 	tst.w	r3, #16
 800878c:	f43f af51 	beq.w	8008632 <HAL_UART_IRQHandler+0x36>
			&& ((cr1its & USART_ISR_IDLE) != 0U)) {
 8008790:	f010 0f10 	tst.w	r0, #16
 8008794:	f43f af4d 	beq.w	8008632 <HAL_UART_IRQHandler+0x36>
		__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008798:	2310      	movs	r3, #16
 800879a:	620b      	str	r3, [r1, #32]
		if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 800879c:	6823      	ldr	r3, [r4, #0]
 800879e:	689b      	ldr	r3, [r3, #8]
 80087a0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80087a4:	d050      	beq.n	8008848 <HAL_UART_IRQHandler+0x24c>
			uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(
 80087a6:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80087a8:	6813      	ldr	r3, [r2, #0]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	b29b      	uxth	r3, r3
			if ((nb_remaining_rx_data > 0U)
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	f43f af54 	beq.w	800865c <HAL_UART_IRQHandler+0x60>
					&& (nb_remaining_rx_data < huart->RxXferSize)) {
 80087b4:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 80087b8:	4299      	cmp	r1, r3
 80087ba:	f67f af4f 	bls.w	800865c <HAL_UART_IRQHandler+0x60>
				huart->RxXferCount = nb_remaining_rx_data;
 80087be:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
				if (huart->hdmarx->Init.Mode != DMA_CIRCULAR) {
 80087c2:	69d3      	ldr	r3, [r2, #28]
 80087c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087c8:	d031      	beq.n	800882e <HAL_UART_IRQHandler+0x232>
					ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087ca:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087cc:	e852 3f00 	ldrex	r3, [r2]
 80087d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d4:	e842 3100 	strex	r1, r3, [r2]
 80087d8:	2900      	cmp	r1, #0
 80087da:	d1f6      	bne.n	80087ca <HAL_UART_IRQHandler+0x1ce>
					ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087dc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087de:	f102 0308 	add.w	r3, r2, #8
 80087e2:	e853 3f00 	ldrex	r3, [r3]
 80087e6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ea:	3208      	adds	r2, #8
 80087ec:	e842 3100 	strex	r1, r3, [r2]
 80087f0:	2900      	cmp	r1, #0
 80087f2:	d1f3      	bne.n	80087dc <HAL_UART_IRQHandler+0x1e0>
					ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087f4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f6:	f102 0308 	add.w	r3, r2, #8
 80087fa:	e853 3f00 	ldrex	r3, [r3]
 80087fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008802:	3208      	adds	r2, #8
 8008804:	e842 3100 	strex	r1, r3, [r2]
 8008808:	2900      	cmp	r1, #0
 800880a:	d1f3      	bne.n	80087f4 <HAL_UART_IRQHandler+0x1f8>
					huart->RxState = HAL_UART_STATE_READY;
 800880c:	2320      	movs	r3, #32
 800880e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
					huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008812:	2300      	movs	r3, #0
 8008814:	6623      	str	r3, [r4, #96]	; 0x60
					ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008816:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008818:	e852 3f00 	ldrex	r3, [r2]
 800881c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008820:	e842 3100 	strex	r1, r3, [r2]
 8008824:	2900      	cmp	r1, #0
 8008826:	d1f6      	bne.n	8008816 <HAL_UART_IRQHandler+0x21a>
					(void) HAL_DMA_Abort(huart->hdmarx);
 8008828:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800882a:	f7fc fec3 	bl	80055b4 <HAL_DMA_Abort>
				huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800882e:	2302      	movs	r3, #2
 8008830:	6663      	str	r3, [r4, #100]	; 0x64
						(huart->RxXferSize - huart->RxXferCount));
 8008832:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8008836:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800883a:	b29b      	uxth	r3, r3
				HAL_UARTEx_RxEventCallback(huart,
 800883c:	1ac9      	subs	r1, r1, r3
 800883e:	b289      	uxth	r1, r1
 8008840:	4620      	mov	r0, r4
 8008842:	f7ff fe81 	bl	8008548 <HAL_UARTEx_RxEventCallback>
			return;
 8008846:	e709      	b.n	800865c <HAL_UART_IRQHandler+0x60>
			uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008848:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 800884c:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8008850:	b29b      	uxth	r3, r3
 8008852:	1ac9      	subs	r1, r1, r3
 8008854:	b289      	uxth	r1, r1
			if ((huart->RxXferCount > 0U) && (nb_rx_data > 0U)) {
 8008856:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800885a:	b29b      	uxth	r3, r3
 800885c:	2b00      	cmp	r3, #0
 800885e:	f43f aefd 	beq.w	800865c <HAL_UART_IRQHandler+0x60>
 8008862:	2900      	cmp	r1, #0
 8008864:	f43f aefa 	beq.w	800865c <HAL_UART_IRQHandler+0x60>
				ATOMIC_CLEAR_BIT(huart->Instance->CR1,
 8008868:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800886a:	e852 3f00 	ldrex	r3, [r2]
 800886e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008872:	e842 3000 	strex	r0, r3, [r2]
 8008876:	2800      	cmp	r0, #0
 8008878:	d1f6      	bne.n	8008868 <HAL_UART_IRQHandler+0x26c>
				ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800887a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800887c:	f102 0308 	add.w	r3, r2, #8
 8008880:	e853 3f00 	ldrex	r3, [r3]
 8008884:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008888:	3208      	adds	r2, #8
 800888a:	e842 3000 	strex	r0, r3, [r2]
 800888e:	2800      	cmp	r0, #0
 8008890:	d1f3      	bne.n	800887a <HAL_UART_IRQHandler+0x27e>
				huart->RxState = HAL_UART_STATE_READY;
 8008892:	2320      	movs	r3, #32
 8008894:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
				huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008898:	2300      	movs	r3, #0
 800889a:	6623      	str	r3, [r4, #96]	; 0x60
				huart->RxISR = NULL;
 800889c:	66a3      	str	r3, [r4, #104]	; 0x68
				ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800889e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a0:	e852 3f00 	ldrex	r3, [r2]
 80088a4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a8:	e842 3000 	strex	r0, r3, [r2]
 80088ac:	2800      	cmp	r0, #0
 80088ae:	d1f6      	bne.n	800889e <HAL_UART_IRQHandler+0x2a2>
				huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80088b0:	2302      	movs	r3, #2
 80088b2:	6663      	str	r3, [r4, #100]	; 0x64
				HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80088b4:	4620      	mov	r0, r4
 80088b6:	f7ff fe47 	bl	8008548 <HAL_UARTEx_RxEventCallback>
			return;
 80088ba:	e6cf      	b.n	800865c <HAL_UART_IRQHandler+0x60>
		__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80088bc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80088c0:	620b      	str	r3, [r1, #32]
		HAL_UARTEx_WakeupCallback(huart);
 80088c2:	4620      	mov	r0, r4
 80088c4:	f7ff fe99 	bl	80085fa <HAL_UARTEx_WakeupCallback>
		return;
 80088c8:	e6c8      	b.n	800865c <HAL_UART_IRQHandler+0x60>
		if (huart->TxISR != NULL) {
 80088ca:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	f43f aec5 	beq.w	800865c <HAL_UART_IRQHandler+0x60>
			huart->TxISR(huart);
 80088d2:	4620      	mov	r0, r4
 80088d4:	4798      	blx	r3
		return;
 80088d6:	e6c1      	b.n	800865c <HAL_UART_IRQHandler+0x60>
		UART_EndTransmit_IT(huart);
 80088d8:	4620      	mov	r0, r4
 80088da:	f7ff fde7 	bl	80084ac <UART_EndTransmit_IT>
		return;
 80088de:	e6bd      	b.n	800865c <HAL_UART_IRQHandler+0x60>
 80088e0:	04000120 	.word	0x04000120
 80088e4:	08008535 	.word	0x08008535

080088e8 <UART_SetConfig>:
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart) {
 80088e8:	b510      	push	{r4, lr}
 80088ea:	4604      	mov	r4, r0
	tmpreg = (uint32_t) huart->Init.WordLength | huart->Init.Parity
 80088ec:	6883      	ldr	r3, [r0, #8]
 80088ee:	6902      	ldr	r2, [r0, #16]
 80088f0:	4313      	orrs	r3, r2
			| huart->Init.Mode | huart->Init.OverSampling;
 80088f2:	6942      	ldr	r2, [r0, #20]
 80088f4:	4313      	orrs	r3, r2
 80088f6:	69c2      	ldr	r2, [r0, #28]
	tmpreg = (uint32_t) huart->Init.WordLength | huart->Init.Parity
 80088f8:	4313      	orrs	r3, r2
	MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80088fa:	6801      	ldr	r1, [r0, #0]
 80088fc:	6808      	ldr	r0, [r1, #0]
 80088fe:	4a93      	ldr	r2, [pc, #588]	; (8008b4c <UART_SetConfig+0x264>)
 8008900:	4002      	ands	r2, r0
 8008902:	431a      	orrs	r2, r3
 8008904:	600a      	str	r2, [r1, #0]
	MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008906:	6822      	ldr	r2, [r4, #0]
 8008908:	6853      	ldr	r3, [r2, #4]
 800890a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800890e:	68e1      	ldr	r1, [r4, #12]
 8008910:	430b      	orrs	r3, r1
 8008912:	6053      	str	r3, [r2, #4]
	tmpreg = (uint32_t) huart->Init.HwFlowCtl;
 8008914:	69a2      	ldr	r2, [r4, #24]
	tmpreg |= huart->Init.OneBitSampling;
 8008916:	6a23      	ldr	r3, [r4, #32]
 8008918:	431a      	orrs	r2, r3
	MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800891a:	6821      	ldr	r1, [r4, #0]
 800891c:	688b      	ldr	r3, [r1, #8]
 800891e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008922:	4313      	orrs	r3, r2
 8008924:	608b      	str	r3, [r1, #8]
	UART_GETCLOCKSOURCE(huart, clocksource);
 8008926:	6823      	ldr	r3, [r4, #0]
 8008928:	4a89      	ldr	r2, [pc, #548]	; (8008b50 <UART_SetConfig+0x268>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d019      	beq.n	8008962 <UART_SetConfig+0x7a>
 800892e:	4a89      	ldr	r2, [pc, #548]	; (8008b54 <UART_SetConfig+0x26c>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d029      	beq.n	8008988 <UART_SetConfig+0xa0>
 8008934:	4a88      	ldr	r2, [pc, #544]	; (8008b58 <UART_SetConfig+0x270>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d03e      	beq.n	80089b8 <UART_SetConfig+0xd0>
 800893a:	4a88      	ldr	r2, [pc, #544]	; (8008b5c <UART_SetConfig+0x274>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d062      	beq.n	8008a06 <UART_SetConfig+0x11e>
 8008940:	4a87      	ldr	r2, [pc, #540]	; (8008b60 <UART_SetConfig+0x278>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d071      	beq.n	8008a2a <UART_SetConfig+0x142>
 8008946:	4a87      	ldr	r2, [pc, #540]	; (8008b64 <UART_SetConfig+0x27c>)
 8008948:	4293      	cmp	r3, r2
 800894a:	f000 8083 	beq.w	8008a54 <UART_SetConfig+0x16c>
 800894e:	4a86      	ldr	r2, [pc, #536]	; (8008b68 <UART_SetConfig+0x280>)
 8008950:	4293      	cmp	r3, r2
 8008952:	f000 8094 	beq.w	8008a7e <UART_SetConfig+0x196>
 8008956:	4a85      	ldr	r2, [pc, #532]	; (8008b6c <UART_SetConfig+0x284>)
 8008958:	4293      	cmp	r3, r2
 800895a:	f000 80a5 	beq.w	8008aa8 <UART_SetConfig+0x1c0>
 800895e:	2310      	movs	r3, #16
 8008960:	e03a      	b.n	80089d8 <UART_SetConfig+0xf0>
 8008962:	4b83      	ldr	r3, [pc, #524]	; (8008b70 <UART_SetConfig+0x288>)
 8008964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008968:	f003 0303 	and.w	r3, r3, #3
 800896c:	2b03      	cmp	r3, #3
 800896e:	d809      	bhi.n	8008984 <UART_SetConfig+0x9c>
 8008970:	e8df f003 	tbb	[pc, r3]
 8008974:	06ae0402 	.word	0x06ae0402
 8008978:	2301      	movs	r3, #1
 800897a:	e02d      	b.n	80089d8 <UART_SetConfig+0xf0>
 800897c:	2304      	movs	r3, #4
 800897e:	e02b      	b.n	80089d8 <UART_SetConfig+0xf0>
 8008980:	2308      	movs	r3, #8
 8008982:	e029      	b.n	80089d8 <UART_SetConfig+0xf0>
 8008984:	2310      	movs	r3, #16
 8008986:	e027      	b.n	80089d8 <UART_SetConfig+0xf0>
 8008988:	4b79      	ldr	r3, [pc, #484]	; (8008b70 <UART_SetConfig+0x288>)
 800898a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800898e:	f003 030c 	and.w	r3, r3, #12
 8008992:	2b0c      	cmp	r3, #12
 8008994:	d80e      	bhi.n	80089b4 <UART_SetConfig+0xcc>
 8008996:	e8df f003 	tbb	[pc, r3]
 800899a:	0d07      	.short	0x0d07
 800899c:	0d090d0d 	.word	0x0d090d0d
 80089a0:	0d9d0d0d 	.word	0x0d9d0d0d
 80089a4:	0d0d      	.short	0x0d0d
 80089a6:	0b          	.byte	0x0b
 80089a7:	00          	.byte	0x00
 80089a8:	2300      	movs	r3, #0
 80089aa:	e015      	b.n	80089d8 <UART_SetConfig+0xf0>
 80089ac:	2304      	movs	r3, #4
 80089ae:	e013      	b.n	80089d8 <UART_SetConfig+0xf0>
 80089b0:	2308      	movs	r3, #8
 80089b2:	e011      	b.n	80089d8 <UART_SetConfig+0xf0>
 80089b4:	2310      	movs	r3, #16
 80089b6:	e00f      	b.n	80089d8 <UART_SetConfig+0xf0>
 80089b8:	4b6d      	ldr	r3, [pc, #436]	; (8008b70 <UART_SetConfig+0x288>)
 80089ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089be:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80089c2:	2b20      	cmp	r3, #32
 80089c4:	f000 8088 	beq.w	8008ad8 <UART_SetConfig+0x1f0>
 80089c8:	d819      	bhi.n	80089fe <UART_SetConfig+0x116>
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	f000 8086 	beq.w	8008adc <UART_SetConfig+0x1f4>
 80089d0:	2b10      	cmp	r3, #16
 80089d2:	f040 8085 	bne.w	8008ae0 <UART_SetConfig+0x1f8>
 80089d6:	2304      	movs	r3, #4
	if (huart->Init.OverSampling == UART_OVERSAMPLING_8) {
 80089d8:	69e0      	ldr	r0, [r4, #28]
 80089da:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80089de:	f000 80ab 	beq.w	8008b38 <UART_SetConfig+0x250>
		switch (clocksource) {
 80089e2:	2b08      	cmp	r3, #8
 80089e4:	f200 810c 	bhi.w	8008c00 <UART_SetConfig+0x318>
 80089e8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80089ec:	00fb00e8 	.word	0x00fb00e8
 80089f0:	010a00e6 	.word	0x010a00e6
 80089f4:	010a00fe 	.word	0x010a00fe
 80089f8:	010a010a 	.word	0x010a010a
 80089fc:	0101      	.short	0x0101
	UART_GETCLOCKSOURCE(huart, clocksource);
 80089fe:	2b30      	cmp	r3, #48	; 0x30
 8008a00:	d170      	bne.n	8008ae4 <UART_SetConfig+0x1fc>
 8008a02:	2308      	movs	r3, #8
 8008a04:	e7e8      	b.n	80089d8 <UART_SetConfig+0xf0>
 8008a06:	4b5a      	ldr	r3, [pc, #360]	; (8008b70 <UART_SetConfig+0x288>)
 8008a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a0c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008a10:	2b80      	cmp	r3, #128	; 0x80
 8008a12:	d069      	beq.n	8008ae8 <UART_SetConfig+0x200>
 8008a14:	d805      	bhi.n	8008a22 <UART_SetConfig+0x13a>
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d068      	beq.n	8008aec <UART_SetConfig+0x204>
 8008a1a:	2b40      	cmp	r3, #64	; 0x40
 8008a1c:	d168      	bne.n	8008af0 <UART_SetConfig+0x208>
 8008a1e:	2304      	movs	r3, #4
 8008a20:	e7da      	b.n	80089d8 <UART_SetConfig+0xf0>
 8008a22:	2bc0      	cmp	r3, #192	; 0xc0
 8008a24:	d166      	bne.n	8008af4 <UART_SetConfig+0x20c>
 8008a26:	2308      	movs	r3, #8
 8008a28:	e7d6      	b.n	80089d8 <UART_SetConfig+0xf0>
 8008a2a:	4b51      	ldr	r3, [pc, #324]	; (8008b70 <UART_SetConfig+0x288>)
 8008a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a38:	d05e      	beq.n	8008af8 <UART_SetConfig+0x210>
 8008a3a:	d806      	bhi.n	8008a4a <UART_SetConfig+0x162>
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d05d      	beq.n	8008afc <UART_SetConfig+0x214>
 8008a40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a44:	d15c      	bne.n	8008b00 <UART_SetConfig+0x218>
 8008a46:	2304      	movs	r3, #4
 8008a48:	e7c6      	b.n	80089d8 <UART_SetConfig+0xf0>
 8008a4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a4e:	d159      	bne.n	8008b04 <UART_SetConfig+0x21c>
 8008a50:	2308      	movs	r3, #8
 8008a52:	e7c1      	b.n	80089d8 <UART_SetConfig+0xf0>
 8008a54:	4b46      	ldr	r3, [pc, #280]	; (8008b70 <UART_SetConfig+0x288>)
 8008a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a5a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008a5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a62:	d051      	beq.n	8008b08 <UART_SetConfig+0x220>
 8008a64:	d806      	bhi.n	8008a74 <UART_SetConfig+0x18c>
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d050      	beq.n	8008b0c <UART_SetConfig+0x224>
 8008a6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a6e:	d14f      	bne.n	8008b10 <UART_SetConfig+0x228>
 8008a70:	2304      	movs	r3, #4
 8008a72:	e7b1      	b.n	80089d8 <UART_SetConfig+0xf0>
 8008a74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008a78:	d14c      	bne.n	8008b14 <UART_SetConfig+0x22c>
 8008a7a:	2308      	movs	r3, #8
 8008a7c:	e7ac      	b.n	80089d8 <UART_SetConfig+0xf0>
 8008a7e:	4b3c      	ldr	r3, [pc, #240]	; (8008b70 <UART_SetConfig+0x288>)
 8008a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a84:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008a88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a8c:	d044      	beq.n	8008b18 <UART_SetConfig+0x230>
 8008a8e:	d806      	bhi.n	8008a9e <UART_SetConfig+0x1b6>
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d043      	beq.n	8008b1c <UART_SetConfig+0x234>
 8008a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a98:	d142      	bne.n	8008b20 <UART_SetConfig+0x238>
 8008a9a:	2304      	movs	r3, #4
 8008a9c:	e79c      	b.n	80089d8 <UART_SetConfig+0xf0>
 8008a9e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008aa2:	d13f      	bne.n	8008b24 <UART_SetConfig+0x23c>
 8008aa4:	2308      	movs	r3, #8
 8008aa6:	e797      	b.n	80089d8 <UART_SetConfig+0xf0>
 8008aa8:	4b31      	ldr	r3, [pc, #196]	; (8008b70 <UART_SetConfig+0x288>)
 8008aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008aae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008ab2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ab6:	d037      	beq.n	8008b28 <UART_SetConfig+0x240>
 8008ab8:	d805      	bhi.n	8008ac6 <UART_SetConfig+0x1de>
 8008aba:	b3bb      	cbz	r3, 8008b2c <UART_SetConfig+0x244>
 8008abc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ac0:	d136      	bne.n	8008b30 <UART_SetConfig+0x248>
 8008ac2:	2304      	movs	r3, #4
 8008ac4:	e788      	b.n	80089d8 <UART_SetConfig+0xf0>
 8008ac6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008aca:	d133      	bne.n	8008b34 <UART_SetConfig+0x24c>
 8008acc:	2308      	movs	r3, #8
 8008ace:	e783      	b.n	80089d8 <UART_SetConfig+0xf0>
 8008ad0:	2302      	movs	r3, #2
 8008ad2:	e781      	b.n	80089d8 <UART_SetConfig+0xf0>
 8008ad4:	2302      	movs	r3, #2
 8008ad6:	e77f      	b.n	80089d8 <UART_SetConfig+0xf0>
 8008ad8:	2302      	movs	r3, #2
 8008ada:	e77d      	b.n	80089d8 <UART_SetConfig+0xf0>
 8008adc:	2300      	movs	r3, #0
 8008ade:	e77b      	b.n	80089d8 <UART_SetConfig+0xf0>
 8008ae0:	2310      	movs	r3, #16
 8008ae2:	e779      	b.n	80089d8 <UART_SetConfig+0xf0>
 8008ae4:	2310      	movs	r3, #16
 8008ae6:	e777      	b.n	80089d8 <UART_SetConfig+0xf0>
 8008ae8:	2302      	movs	r3, #2
 8008aea:	e775      	b.n	80089d8 <UART_SetConfig+0xf0>
 8008aec:	2300      	movs	r3, #0
 8008aee:	e773      	b.n	80089d8 <UART_SetConfig+0xf0>
 8008af0:	2310      	movs	r3, #16
 8008af2:	e771      	b.n	80089d8 <UART_SetConfig+0xf0>
 8008af4:	2310      	movs	r3, #16
 8008af6:	e76f      	b.n	80089d8 <UART_SetConfig+0xf0>
 8008af8:	2302      	movs	r3, #2
 8008afa:	e76d      	b.n	80089d8 <UART_SetConfig+0xf0>
 8008afc:	2300      	movs	r3, #0
 8008afe:	e76b      	b.n	80089d8 <UART_SetConfig+0xf0>
 8008b00:	2310      	movs	r3, #16
 8008b02:	e769      	b.n	80089d8 <UART_SetConfig+0xf0>
 8008b04:	2310      	movs	r3, #16
 8008b06:	e767      	b.n	80089d8 <UART_SetConfig+0xf0>
 8008b08:	2302      	movs	r3, #2
 8008b0a:	e765      	b.n	80089d8 <UART_SetConfig+0xf0>
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	e763      	b.n	80089d8 <UART_SetConfig+0xf0>
 8008b10:	2310      	movs	r3, #16
 8008b12:	e761      	b.n	80089d8 <UART_SetConfig+0xf0>
 8008b14:	2310      	movs	r3, #16
 8008b16:	e75f      	b.n	80089d8 <UART_SetConfig+0xf0>
 8008b18:	2302      	movs	r3, #2
 8008b1a:	e75d      	b.n	80089d8 <UART_SetConfig+0xf0>
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	e75b      	b.n	80089d8 <UART_SetConfig+0xf0>
 8008b20:	2310      	movs	r3, #16
 8008b22:	e759      	b.n	80089d8 <UART_SetConfig+0xf0>
 8008b24:	2310      	movs	r3, #16
 8008b26:	e757      	b.n	80089d8 <UART_SetConfig+0xf0>
 8008b28:	2302      	movs	r3, #2
 8008b2a:	e755      	b.n	80089d8 <UART_SetConfig+0xf0>
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	e753      	b.n	80089d8 <UART_SetConfig+0xf0>
 8008b30:	2310      	movs	r3, #16
 8008b32:	e751      	b.n	80089d8 <UART_SetConfig+0xf0>
 8008b34:	2310      	movs	r3, #16
 8008b36:	e74f      	b.n	80089d8 <UART_SetConfig+0xf0>
		switch (clocksource) {
 8008b38:	2b08      	cmp	r3, #8
 8008b3a:	d85b      	bhi.n	8008bf4 <UART_SetConfig+0x30c>
 8008b3c:	e8df f003 	tbb	[pc, r3]
 8008b40:	5a3a341a 	.word	0x5a3a341a
 8008b44:	5a5a5a37 	.word	0x5a5a5a37
 8008b48:	1e          	.byte	0x1e
 8008b49:	00          	.byte	0x00
 8008b4a:	bf00      	nop
 8008b4c:	efff69f3 	.word	0xefff69f3
 8008b50:	40011000 	.word	0x40011000
 8008b54:	40004400 	.word	0x40004400
 8008b58:	40004800 	.word	0x40004800
 8008b5c:	40004c00 	.word	0x40004c00
 8008b60:	40005000 	.word	0x40005000
 8008b64:	40011400 	.word	0x40011400
 8008b68:	40007800 	.word	0x40007800
 8008b6c:	40007c00 	.word	0x40007c00
 8008b70:	40023800 	.word	0x40023800
			pclk = HAL_RCC_GetPCLK1Freq();
 8008b74:	f7fe fd76 	bl	8007664 <HAL_RCC_GetPCLK1Freq>
		if (pclk != 0U) {
 8008b78:	2800      	cmp	r0, #0
 8008b7a:	d03d      	beq.n	8008bf8 <UART_SetConfig+0x310>
			usartdiv = (uint32_t) (UART_DIV_SAMPLING8(pclk,
 8008b7c:	6862      	ldr	r2, [r4, #4]
 8008b7e:	0853      	lsrs	r3, r2, #1
 8008b80:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8008b84:	fbb3 f3f2 	udiv	r3, r3, r2
			if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX)) {
 8008b88:	f1a3 0110 	sub.w	r1, r3, #16
 8008b8c:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8008b90:	4291      	cmp	r1, r2
 8008b92:	d833      	bhi.n	8008bfc <UART_SetConfig+0x314>
				brrtemp = (uint16_t) (usartdiv & 0xFFF0U);
 8008b94:	b29a      	uxth	r2, r3
 8008b96:	f022 020f 	bic.w	r2, r2, #15
				brrtemp |= (uint16_t) ((usartdiv & (uint16_t) 0x000FU) >> 1U);
 8008b9a:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8008b9e:	4313      	orrs	r3, r2
				huart->Instance->BRR = brrtemp;
 8008ba0:	6822      	ldr	r2, [r4, #0]
 8008ba2:	60d3      	str	r3, [r2, #12]
 8008ba4:	2000      	movs	r0, #0
 8008ba6:	e030      	b.n	8008c0a <UART_SetConfig+0x322>
			pclk = HAL_RCC_GetPCLK2Freq();
 8008ba8:	f7fe fd6c 	bl	8007684 <HAL_RCC_GetPCLK2Freq>
			break;
 8008bac:	e7e4      	b.n	8008b78 <UART_SetConfig+0x290>
			pclk = HAL_RCC_GetSysClockFreq();
 8008bae:	f7fe fc49 	bl	8007444 <HAL_RCC_GetSysClockFreq>
			break;
 8008bb2:	e7e1      	b.n	8008b78 <UART_SetConfig+0x290>
			pclk = (uint32_t) HSI_VALUE;
 8008bb4:	4817      	ldr	r0, [pc, #92]	; (8008c14 <UART_SetConfig+0x32c>)
 8008bb6:	e7e1      	b.n	8008b7c <UART_SetConfig+0x294>
		switch (clocksource) {
 8008bb8:	4816      	ldr	r0, [pc, #88]	; (8008c14 <UART_SetConfig+0x32c>)
 8008bba:	e002      	b.n	8008bc2 <UART_SetConfig+0x2da>
			pclk = HAL_RCC_GetPCLK1Freq();
 8008bbc:	f7fe fd52 	bl	8007664 <HAL_RCC_GetPCLK1Freq>
		if (pclk != 0U) {
 8008bc0:	b300      	cbz	r0, 8008c04 <UART_SetConfig+0x31c>
			usartdiv = (uint32_t) (UART_DIV_SAMPLING16(pclk,
 8008bc2:	6863      	ldr	r3, [r4, #4]
 8008bc4:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8008bc8:	fbb0 f0f3 	udiv	r0, r0, r3
			if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX)) {
 8008bcc:	f1a0 0210 	sub.w	r2, r0, #16
 8008bd0:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d817      	bhi.n	8008c08 <UART_SetConfig+0x320>
				huart->Instance->BRR = (uint16_t) usartdiv;
 8008bd8:	6823      	ldr	r3, [r4, #0]
 8008bda:	b280      	uxth	r0, r0
 8008bdc:	60d8      	str	r0, [r3, #12]
 8008bde:	2000      	movs	r0, #0
 8008be0:	e013      	b.n	8008c0a <UART_SetConfig+0x322>
			pclk = HAL_RCC_GetPCLK2Freq();
 8008be2:	f7fe fd4f 	bl	8007684 <HAL_RCC_GetPCLK2Freq>
			break;
 8008be6:	e7eb      	b.n	8008bc0 <UART_SetConfig+0x2d8>
			pclk = HAL_RCC_GetSysClockFreq();
 8008be8:	f7fe fc2c 	bl	8007444 <HAL_RCC_GetSysClockFreq>
			break;
 8008bec:	e7e8      	b.n	8008bc0 <UART_SetConfig+0x2d8>
			pclk = (uint32_t) LSE_VALUE;
 8008bee:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008bf2:	e7e6      	b.n	8008bc2 <UART_SetConfig+0x2da>
		switch (clocksource) {
 8008bf4:	2001      	movs	r0, #1
 8008bf6:	e008      	b.n	8008c0a <UART_SetConfig+0x322>
 8008bf8:	2000      	movs	r0, #0
 8008bfa:	e006      	b.n	8008c0a <UART_SetConfig+0x322>
				ret = HAL_ERROR;
 8008bfc:	2001      	movs	r0, #1
 8008bfe:	e004      	b.n	8008c0a <UART_SetConfig+0x322>
		switch (clocksource) {
 8008c00:	2001      	movs	r0, #1
 8008c02:	e002      	b.n	8008c0a <UART_SetConfig+0x322>
 8008c04:	2000      	movs	r0, #0
 8008c06:	e000      	b.n	8008c0a <UART_SetConfig+0x322>
				ret = HAL_ERROR;
 8008c08:	2001      	movs	r0, #1
	huart->RxISR = NULL;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	66a3      	str	r3, [r4, #104]	; 0x68
	huart->TxISR = NULL;
 8008c0e:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8008c10:	bd10      	pop	{r4, pc}
 8008c12:	bf00      	nop
 8008c14:	00f42400 	.word	0x00f42400

08008c18 <UART_AdvFeatureConfig>:
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8008c18:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008c1a:	f013 0f01 	tst.w	r3, #1
 8008c1e:	d006      	beq.n	8008c2e <UART_AdvFeatureConfig+0x16>
		MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV,
 8008c20:	6802      	ldr	r2, [r0, #0]
 8008c22:	6853      	ldr	r3, [r2, #4]
 8008c24:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008c28:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8008c2a:	430b      	orrs	r3, r1
 8008c2c:	6053      	str	r3, [r2, #4]
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8008c2e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008c30:	f013 0f02 	tst.w	r3, #2
 8008c34:	d006      	beq.n	8008c44 <UART_AdvFeatureConfig+0x2c>
		MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV,
 8008c36:	6802      	ldr	r2, [r0, #0]
 8008c38:	6853      	ldr	r3, [r2, #4]
 8008c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c3e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8008c40:	430b      	orrs	r3, r1
 8008c42:	6053      	str	r3, [r2, #4]
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8008c44:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008c46:	f013 0f04 	tst.w	r3, #4
 8008c4a:	d006      	beq.n	8008c5a <UART_AdvFeatureConfig+0x42>
		MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV,
 8008c4c:	6802      	ldr	r2, [r0, #0]
 8008c4e:	6853      	ldr	r3, [r2, #4]
 8008c50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c54:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8008c56:	430b      	orrs	r3, r1
 8008c58:	6053      	str	r3, [r2, #4]
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8008c5a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008c5c:	f013 0f08 	tst.w	r3, #8
 8008c60:	d006      	beq.n	8008c70 <UART_AdvFeatureConfig+0x58>
		MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP,
 8008c62:	6802      	ldr	r2, [r0, #0]
 8008c64:	6853      	ldr	r3, [r2, #4]
 8008c66:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008c6a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8008c6c:	430b      	orrs	r3, r1
 8008c6e:	6053      	str	r3, [r2, #4]
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8008c70:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008c72:	f013 0f10 	tst.w	r3, #16
 8008c76:	d006      	beq.n	8008c86 <UART_AdvFeatureConfig+0x6e>
		MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS,
 8008c78:	6802      	ldr	r2, [r0, #0]
 8008c7a:	6893      	ldr	r3, [r2, #8]
 8008c7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c80:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8008c82:	430b      	orrs	r3, r1
 8008c84:	6093      	str	r3, [r2, #8]
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8008c86:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008c88:	f013 0f20 	tst.w	r3, #32
 8008c8c:	d006      	beq.n	8008c9c <UART_AdvFeatureConfig+0x84>
		MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE,
 8008c8e:	6802      	ldr	r2, [r0, #0]
 8008c90:	6893      	ldr	r3, [r2, #8]
 8008c92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008c96:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8008c98:	430b      	orrs	r3, r1
 8008c9a:	6093      	str	r3, [r2, #8]
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8008c9c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008c9e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008ca2:	d00a      	beq.n	8008cba <UART_AdvFeatureConfig+0xa2>
		MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN,
 8008ca4:	6802      	ldr	r2, [r0, #0]
 8008ca6:	6853      	ldr	r3, [r2, #4]
 8008ca8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008cac:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8008cae:	430b      	orrs	r3, r1
 8008cb0:	6053      	str	r3, [r2, #4]
		if (huart->AdvancedInit.AutoBaudRateEnable
 8008cb2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008cb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008cb8:	d00b      	beq.n	8008cd2 <UART_AdvFeatureConfig+0xba>
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8008cba:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008cbc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008cc0:	d006      	beq.n	8008cd0 <UART_AdvFeatureConfig+0xb8>
		MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST,
 8008cc2:	6802      	ldr	r2, [r0, #0]
 8008cc4:	6853      	ldr	r3, [r2, #4]
 8008cc6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8008cca:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8008ccc:	430b      	orrs	r3, r1
 8008cce:	6053      	str	r3, [r2, #4]
}
 8008cd0:	4770      	bx	lr
			MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE,
 8008cd2:	6802      	ldr	r2, [r0, #0]
 8008cd4:	6853      	ldr	r3, [r2, #4]
 8008cd6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008cda:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8008cdc:	430b      	orrs	r3, r1
 8008cde:	6053      	str	r3, [r2, #4]
 8008ce0:	e7eb      	b.n	8008cba <UART_AdvFeatureConfig+0xa2>

08008ce2 <UART_WaitOnFlagUntilTimeout>:
		uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout) {
 8008ce2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ce6:	4605      	mov	r5, r0
 8008ce8:	460f      	mov	r7, r1
 8008cea:	4616      	mov	r6, r2
 8008cec:	4699      	mov	r9, r3
 8008cee:	f8dd 8020 	ldr.w	r8, [sp, #32]
	while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) {
 8008cf2:	682b      	ldr	r3, [r5, #0]
 8008cf4:	69dc      	ldr	r4, [r3, #28]
 8008cf6:	ea37 0404 	bics.w	r4, r7, r4
 8008cfa:	bf0c      	ite	eq
 8008cfc:	2401      	moveq	r4, #1
 8008cfe:	2400      	movne	r4, #0
 8008d00:	42b4      	cmp	r4, r6
 8008d02:	d155      	bne.n	8008db0 <UART_WaitOnFlagUntilTimeout+0xce>
		if (Timeout != HAL_MAX_DELAY) {
 8008d04:	f1b8 3fff 	cmp.w	r8, #4294967295
 8008d08:	d0f3      	beq.n	8008cf2 <UART_WaitOnFlagUntilTimeout+0x10>
			if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8008d0a:	f7fc faa7 	bl	800525c <HAL_GetTick>
 8008d0e:	eba0 0009 	sub.w	r0, r0, r9
 8008d12:	4540      	cmp	r0, r8
 8008d14:	d82e      	bhi.n	8008d74 <UART_WaitOnFlagUntilTimeout+0x92>
 8008d16:	f1b8 0f00 	cmp.w	r8, #0
 8008d1a:	d02b      	beq.n	8008d74 <UART_WaitOnFlagUntilTimeout+0x92>
			if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) {
 8008d1c:	682b      	ldr	r3, [r5, #0]
 8008d1e:	681a      	ldr	r2, [r3, #0]
 8008d20:	f012 0f04 	tst.w	r2, #4
 8008d24:	d0e5      	beq.n	8008cf2 <UART_WaitOnFlagUntilTimeout+0x10>
				if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET) {
 8008d26:	69da      	ldr	r2, [r3, #28]
 8008d28:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8008d2c:	d0e1      	beq.n	8008cf2 <UART_WaitOnFlagUntilTimeout+0x10>
					__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008d32:	621a      	str	r2, [r3, #32]
					ATOMIC_CLEAR_BIT(huart->Instance->CR1,
 8008d34:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d36:	e852 3f00 	ldrex	r3, [r2]
 8008d3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d3e:	e842 3100 	strex	r1, r3, [r2]
 8008d42:	2900      	cmp	r1, #0
 8008d44:	d1f6      	bne.n	8008d34 <UART_WaitOnFlagUntilTimeout+0x52>
					ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d46:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d48:	f102 0308 	add.w	r3, r2, #8
 8008d4c:	e853 3f00 	ldrex	r3, [r3]
 8008d50:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d54:	3208      	adds	r2, #8
 8008d56:	e842 3100 	strex	r1, r3, [r2]
 8008d5a:	2900      	cmp	r1, #0
 8008d5c:	d1f3      	bne.n	8008d46 <UART_WaitOnFlagUntilTimeout+0x64>
					huart->gState = HAL_UART_STATE_READY;
 8008d5e:	2320      	movs	r3, #32
 8008d60:	67eb      	str	r3, [r5, #124]	; 0x7c
					huart->RxState = HAL_UART_STATE_READY;
 8008d62:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
					huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008d66:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
					__HAL_UNLOCK(huart);
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
					return HAL_TIMEOUT;
 8008d70:	2003      	movs	r0, #3
 8008d72:	e01e      	b.n	8008db2 <UART_WaitOnFlagUntilTimeout+0xd0>
				ATOMIC_CLEAR_BIT(huart->Instance->CR1,
 8008d74:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d76:	e852 3f00 	ldrex	r3, [r2]
 8008d7a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d7e:	e842 3100 	strex	r1, r3, [r2]
 8008d82:	2900      	cmp	r1, #0
 8008d84:	d1f6      	bne.n	8008d74 <UART_WaitOnFlagUntilTimeout+0x92>
				ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d86:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d88:	f102 0308 	add.w	r3, r2, #8
 8008d8c:	e853 3f00 	ldrex	r3, [r3]
 8008d90:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d94:	3208      	adds	r2, #8
 8008d96:	e842 3100 	strex	r1, r3, [r2]
 8008d9a:	2900      	cmp	r1, #0
 8008d9c:	d1f3      	bne.n	8008d86 <UART_WaitOnFlagUntilTimeout+0xa4>
				huart->gState = HAL_UART_STATE_READY;
 8008d9e:	2320      	movs	r3, #32
 8008da0:	67eb      	str	r3, [r5, #124]	; 0x7c
				huart->RxState = HAL_UART_STATE_READY;
 8008da2:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
				__HAL_UNLOCK(huart);
 8008da6:	2300      	movs	r3, #0
 8008da8:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
				return HAL_TIMEOUT;
 8008dac:	2003      	movs	r0, #3
 8008dae:	e000      	b.n	8008db2 <UART_WaitOnFlagUntilTimeout+0xd0>
	return HAL_OK;
 8008db0:	2000      	movs	r0, #0
}
 8008db2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08008db6 <HAL_UART_Receive>:
		uint16_t Size, uint32_t Timeout) {
 8008db6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008dba:	b083      	sub	sp, #12
 8008dbc:	461e      	mov	r6, r3
	if (huart->RxState == HAL_UART_STATE_READY) {
 8008dbe:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8008dc2:	2b20      	cmp	r3, #32
 8008dc4:	d178      	bne.n	8008eb8 <HAL_UART_Receive+0x102>
 8008dc6:	4604      	mov	r4, r0
 8008dc8:	460d      	mov	r5, r1
 8008dca:	4690      	mov	r8, r2
		if ((pData == NULL) || (Size == 0U)) {
 8008dcc:	2a00      	cmp	r2, #0
 8008dce:	bf18      	it	ne
 8008dd0:	2900      	cmpne	r1, #0
 8008dd2:	d101      	bne.n	8008dd8 <HAL_UART_Receive+0x22>
			return HAL_ERROR;
 8008dd4:	2001      	movs	r0, #1
 8008dd6:	e070      	b.n	8008eba <HAL_UART_Receive+0x104>
		huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008dde:	2222      	movs	r2, #34	; 0x22
 8008de0:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008de4:	6603      	str	r3, [r0, #96]	; 0x60
		tickstart = HAL_GetTick();
 8008de6:	f7fc fa39 	bl	800525c <HAL_GetTick>
 8008dea:	4607      	mov	r7, r0
		huart->RxXferSize = Size;
 8008dec:	f8a4 8058 	strh.w	r8, [r4, #88]	; 0x58
		huart->RxXferCount = Size;
 8008df0:	f8a4 805a 	strh.w	r8, [r4, #90]	; 0x5a
		UART_MASK_COMPUTATION(huart);
 8008df4:	68a3      	ldr	r3, [r4, #8]
 8008df6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dfa:	d006      	beq.n	8008e0a <HAL_UART_Receive+0x54>
 8008dfc:	b9a3      	cbnz	r3, 8008e28 <HAL_UART_Receive+0x72>
 8008dfe:	6922      	ldr	r2, [r4, #16]
 8008e00:	b972      	cbnz	r2, 8008e20 <HAL_UART_Receive+0x6a>
 8008e02:	22ff      	movs	r2, #255	; 0xff
 8008e04:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8008e08:	e014      	b.n	8008e34 <HAL_UART_Receive+0x7e>
 8008e0a:	6922      	ldr	r2, [r4, #16]
 8008e0c:	b922      	cbnz	r2, 8008e18 <HAL_UART_Receive+0x62>
 8008e0e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008e12:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8008e16:	e00d      	b.n	8008e34 <HAL_UART_Receive+0x7e>
 8008e18:	22ff      	movs	r2, #255	; 0xff
 8008e1a:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8008e1e:	e009      	b.n	8008e34 <HAL_UART_Receive+0x7e>
 8008e20:	227f      	movs	r2, #127	; 0x7f
 8008e22:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8008e26:	e005      	b.n	8008e34 <HAL_UART_Receive+0x7e>
 8008e28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e2c:	d00a      	beq.n	8008e44 <HAL_UART_Receive+0x8e>
 8008e2e:	2200      	movs	r2, #0
 8008e30:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
		uhMask = huart->Mask;
 8008e34:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
		if ((huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008e38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e3c:	d00c      	beq.n	8008e58 <HAL_UART_Receive+0xa2>
			pdata16bits = NULL;
 8008e3e:	f04f 0900 	mov.w	r9, #0
 8008e42:	e01f      	b.n	8008e84 <HAL_UART_Receive+0xce>
		UART_MASK_COMPUTATION(huart);
 8008e44:	6922      	ldr	r2, [r4, #16]
 8008e46:	b91a      	cbnz	r2, 8008e50 <HAL_UART_Receive+0x9a>
 8008e48:	227f      	movs	r2, #127	; 0x7f
 8008e4a:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8008e4e:	e7f1      	b.n	8008e34 <HAL_UART_Receive+0x7e>
 8008e50:	223f      	movs	r2, #63	; 0x3f
 8008e52:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8008e56:	e7ed      	b.n	8008e34 <HAL_UART_Receive+0x7e>
				&& (huart->Init.Parity == UART_PARITY_NONE)) {
 8008e58:	6923      	ldr	r3, [r4, #16]
 8008e5a:	b113      	cbz	r3, 8008e62 <HAL_UART_Receive+0xac>
			pdata16bits = NULL;
 8008e5c:	f04f 0900 	mov.w	r9, #0
 8008e60:	e010      	b.n	8008e84 <HAL_UART_Receive+0xce>
			pdata16bits = (uint16_t*) pData;
 8008e62:	46a9      	mov	r9, r5
			pdata8bits = NULL;
 8008e64:	2500      	movs	r5, #0
 8008e66:	e00d      	b.n	8008e84 <HAL_UART_Receive+0xce>
						(uint8_t) (huart->Instance->RDR & (uint8_t) uhMask);
 8008e68:	6823      	ldr	r3, [r4, #0]
 8008e6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e6c:	fa5f f388 	uxtb.w	r3, r8
 8008e70:	4013      	ands	r3, r2
				*pdata8bits =
 8008e72:	f805 3b01 	strb.w	r3, [r5], #1
			huart->RxXferCount--;
 8008e76:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 8008e7a:	b292      	uxth	r2, r2
 8008e7c:	3a01      	subs	r2, #1
 8008e7e:	b292      	uxth	r2, r2
 8008e80:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
		while (huart->RxXferCount > 0U) {
 8008e84:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8008e88:	b29b      	uxth	r3, r3
 8008e8a:	b183      	cbz	r3, 8008eae <HAL_UART_Receive+0xf8>
			if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET,
 8008e8c:	9600      	str	r6, [sp, #0]
 8008e8e:	463b      	mov	r3, r7
 8008e90:	2200      	movs	r2, #0
 8008e92:	2120      	movs	r1, #32
 8008e94:	4620      	mov	r0, r4
 8008e96:	f7ff ff24 	bl	8008ce2 <UART_WaitOnFlagUntilTimeout>
 8008e9a:	b988      	cbnz	r0, 8008ec0 <HAL_UART_Receive+0x10a>
			if (pdata8bits == NULL) {
 8008e9c:	2d00      	cmp	r5, #0
 8008e9e:	d1e3      	bne.n	8008e68 <HAL_UART_Receive+0xb2>
				*pdata16bits = (uint16_t) (huart->Instance->RDR & uhMask);
 8008ea0:	6823      	ldr	r3, [r4, #0]
 8008ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea4:	ea08 0303 	and.w	r3, r8, r3
 8008ea8:	f829 3b02 	strh.w	r3, [r9], #2
				pdata16bits++;
 8008eac:	e7e3      	b.n	8008e76 <HAL_UART_Receive+0xc0>
		huart->RxState = HAL_UART_STATE_READY;
 8008eae:	2320      	movs	r3, #32
 8008eb0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		return HAL_OK;
 8008eb4:	2000      	movs	r0, #0
 8008eb6:	e000      	b.n	8008eba <HAL_UART_Receive+0x104>
		return HAL_BUSY;
 8008eb8:	2002      	movs	r0, #2
}
 8008eba:	b003      	add	sp, #12
 8008ebc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				return HAL_TIMEOUT;
 8008ec0:	2003      	movs	r0, #3
 8008ec2:	e7fa      	b.n	8008eba <HAL_UART_Receive+0x104>

08008ec4 <UART_CheckIdleState>:
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart) {
 8008ec4:	b530      	push	{r4, r5, lr}
 8008ec6:	b083      	sub	sp, #12
 8008ec8:	4604      	mov	r4, r0
	huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	tickstart = HAL_GetTick();
 8008ed0:	f7fc f9c4 	bl	800525c <HAL_GetTick>
 8008ed4:	4605      	mov	r5, r0
	if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE) {
 8008ed6:	6822      	ldr	r2, [r4, #0]
 8008ed8:	6812      	ldr	r2, [r2, #0]
 8008eda:	f012 0f08 	tst.w	r2, #8
 8008ede:	d10f      	bne.n	8008f00 <UART_CheckIdleState+0x3c>
	if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE) {
 8008ee0:	6823      	ldr	r3, [r4, #0]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f013 0f04 	tst.w	r3, #4
 8008ee8:	d118      	bne.n	8008f1c <UART_CheckIdleState+0x58>
	huart->gState = HAL_UART_STATE_READY;
 8008eea:	2320      	movs	r3, #32
 8008eec:	67e3      	str	r3, [r4, #124]	; 0x7c
	huart->RxState = HAL_UART_STATE_READY;
 8008eee:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ef2:	2000      	movs	r0, #0
 8008ef4:	6620      	str	r0, [r4, #96]	; 0x60
	huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ef6:	6660      	str	r0, [r4, #100]	; 0x64
	__HAL_UNLOCK(huart);
 8008ef8:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
}
 8008efc:	b003      	add	sp, #12
 8008efe:	bd30      	pop	{r4, r5, pc}
		if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET,
 8008f00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f04:	9300      	str	r3, [sp, #0]
 8008f06:	4603      	mov	r3, r0
 8008f08:	2200      	movs	r2, #0
 8008f0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008f0e:	4620      	mov	r0, r4
 8008f10:	f7ff fee7 	bl	8008ce2 <UART_WaitOnFlagUntilTimeout>
 8008f14:	2800      	cmp	r0, #0
 8008f16:	d0e3      	beq.n	8008ee0 <UART_CheckIdleState+0x1c>
			return HAL_TIMEOUT;
 8008f18:	2003      	movs	r0, #3
 8008f1a:	e7ef      	b.n	8008efc <UART_CheckIdleState+0x38>
		if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,
 8008f1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f20:	9300      	str	r3, [sp, #0]
 8008f22:	462b      	mov	r3, r5
 8008f24:	2200      	movs	r2, #0
 8008f26:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008f2a:	4620      	mov	r0, r4
 8008f2c:	f7ff fed9 	bl	8008ce2 <UART_WaitOnFlagUntilTimeout>
 8008f30:	2800      	cmp	r0, #0
 8008f32:	d0da      	beq.n	8008eea <UART_CheckIdleState+0x26>
			return HAL_TIMEOUT;
 8008f34:	2003      	movs	r0, #3
 8008f36:	e7e1      	b.n	8008efc <UART_CheckIdleState+0x38>

08008f38 <HAL_UART_Init>:
	if (huart == NULL) {
 8008f38:	b368      	cbz	r0, 8008f96 <HAL_UART_Init+0x5e>
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart) {
 8008f3a:	b510      	push	{r4, lr}
 8008f3c:	4604      	mov	r4, r0
	if (huart->gState == HAL_UART_STATE_RESET) {
 8008f3e:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8008f40:	b303      	cbz	r3, 8008f84 <HAL_UART_Init+0x4c>
	huart->gState = HAL_UART_STATE_BUSY;
 8008f42:	2324      	movs	r3, #36	; 0x24
 8008f44:	67e3      	str	r3, [r4, #124]	; 0x7c
	__HAL_UART_DISABLE(huart);
 8008f46:	6822      	ldr	r2, [r4, #0]
 8008f48:	6813      	ldr	r3, [r2, #0]
 8008f4a:	f023 0301 	bic.w	r3, r3, #1
 8008f4e:	6013      	str	r3, [r2, #0]
	if (UART_SetConfig(huart) == HAL_ERROR) {
 8008f50:	4620      	mov	r0, r4
 8008f52:	f7ff fcc9 	bl	80088e8 <UART_SetConfig>
 8008f56:	2801      	cmp	r0, #1
 8008f58:	d013      	beq.n	8008f82 <HAL_UART_Init+0x4a>
	if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT) {
 8008f5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f5c:	b9bb      	cbnz	r3, 8008f8e <HAL_UART_Init+0x56>
	CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f5e:	6822      	ldr	r2, [r4, #0]
 8008f60:	6853      	ldr	r3, [r2, #4]
 8008f62:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8008f66:	6053      	str	r3, [r2, #4]
	CLEAR_BIT(huart->Instance->CR3,
 8008f68:	6822      	ldr	r2, [r4, #0]
 8008f6a:	6893      	ldr	r3, [r2, #8]
 8008f6c:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8008f70:	6093      	str	r3, [r2, #8]
	__HAL_UART_ENABLE(huart);
 8008f72:	6822      	ldr	r2, [r4, #0]
 8008f74:	6813      	ldr	r3, [r2, #0]
 8008f76:	f043 0301 	orr.w	r3, r3, #1
 8008f7a:	6013      	str	r3, [r2, #0]
	return (UART_CheckIdleState(huart));
 8008f7c:	4620      	mov	r0, r4
 8008f7e:	f7ff ffa1 	bl	8008ec4 <UART_CheckIdleState>
}
 8008f82:	bd10      	pop	{r4, pc}
		huart->Lock = HAL_UNLOCKED;
 8008f84:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
		HAL_UART_MspInit(huart);
 8008f88:	f7fc f87e 	bl	8005088 <HAL_UART_MspInit>
 8008f8c:	e7d9      	b.n	8008f42 <HAL_UART_Init+0xa>
		UART_AdvFeatureConfig(huart);
 8008f8e:	4620      	mov	r0, r4
 8008f90:	f7ff fe42 	bl	8008c18 <UART_AdvFeatureConfig>
 8008f94:	e7e3      	b.n	8008f5e <HAL_UART_Init+0x26>
		return HAL_ERROR;
 8008f96:	2001      	movs	r0, #1
}
 8008f98:	4770      	bx	lr
	...

08008f9c <UART_Start_Receive_DMA>:
		uint8_t *pData, uint16_t Size) {
 8008f9c:	b510      	push	{r4, lr}
 8008f9e:	4604      	mov	r4, r0
 8008fa0:	4613      	mov	r3, r2
	huart->pRxBuffPtr = pData;
 8008fa2:	6541      	str	r1, [r0, #84]	; 0x54
	huart->RxXferSize = Size;
 8008fa4:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
	huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fa8:	2200      	movs	r2, #0
 8008faa:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
	huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008fae:	2222      	movs	r2, #34	; 0x22
 8008fb0:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
	if (huart->hdmarx != NULL) {
 8008fb4:	6f42      	ldr	r2, [r0, #116]	; 0x74
 8008fb6:	b18a      	cbz	r2, 8008fdc <UART_Start_Receive_DMA+0x40>
		huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008fb8:	491f      	ldr	r1, [pc, #124]	; (8009038 <UART_Start_Receive_DMA+0x9c>)
 8008fba:	63d1      	str	r1, [r2, #60]	; 0x3c
		huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008fbc:	6f42      	ldr	r2, [r0, #116]	; 0x74
 8008fbe:	491f      	ldr	r1, [pc, #124]	; (800903c <UART_Start_Receive_DMA+0xa0>)
 8008fc0:	6411      	str	r1, [r2, #64]	; 0x40
		huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008fc2:	6f42      	ldr	r2, [r0, #116]	; 0x74
 8008fc4:	491e      	ldr	r1, [pc, #120]	; (8009040 <UART_Start_Receive_DMA+0xa4>)
 8008fc6:	64d1      	str	r1, [r2, #76]	; 0x4c
		huart->hdmarx->XferAbortCallback = NULL;
 8008fc8:	6f42      	ldr	r2, [r0, #116]	; 0x74
 8008fca:	2100      	movs	r1, #0
 8008fcc:	6511      	str	r1, [r2, #80]	; 0x50
		if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t) &huart->Instance->RDR,
 8008fce:	6801      	ldr	r1, [r0, #0]
 8008fd0:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8008fd2:	3124      	adds	r1, #36	; 0x24
 8008fd4:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8008fd6:	f7fc fab3 	bl	8005540 <HAL_DMA_Start_IT>
 8008fda:	bb20      	cbnz	r0, 8009026 <UART_Start_Receive_DMA+0x8a>
	if (huart->Init.Parity != UART_PARITY_NONE) {
 8008fdc:	6923      	ldr	r3, [r4, #16]
 8008fde:	b143      	cbz	r3, 8008ff2 <UART_Start_Receive_DMA+0x56>
		ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008fe0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fe2:	e852 3f00 	ldrex	r3, [r2]
 8008fe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fea:	e842 3100 	strex	r1, r3, [r2]
 8008fee:	2900      	cmp	r1, #0
 8008ff0:	d1f6      	bne.n	8008fe0 <UART_Start_Receive_DMA+0x44>
	ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ff2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff4:	f102 0308 	add.w	r3, r2, #8
 8008ff8:	e853 3f00 	ldrex	r3, [r3]
 8008ffc:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009000:	3208      	adds	r2, #8
 8009002:	e842 3100 	strex	r1, r3, [r2]
 8009006:	2900      	cmp	r1, #0
 8009008:	d1f3      	bne.n	8008ff2 <UART_Start_Receive_DMA+0x56>
	ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800900a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800900c:	f102 0308 	add.w	r3, r2, #8
 8009010:	e853 3f00 	ldrex	r3, [r3]
 8009014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009018:	3208      	adds	r2, #8
 800901a:	e842 3100 	strex	r1, r3, [r2]
 800901e:	2900      	cmp	r1, #0
 8009020:	d1f3      	bne.n	800900a <UART_Start_Receive_DMA+0x6e>
	return HAL_OK;
 8009022:	2000      	movs	r0, #0
}
 8009024:	bd10      	pop	{r4, pc}
			huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009026:	2310      	movs	r3, #16
 8009028:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
			huart->RxState = HAL_UART_STATE_READY;
 800902c:	2320      	movs	r3, #32
 800902e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
			return HAL_ERROR;
 8009032:	2001      	movs	r0, #1
 8009034:	e7f6      	b.n	8009024 <UART_Start_Receive_DMA+0x88>
 8009036:	bf00      	nop
 8009038:	0800856b 	.word	0x0800856b
 800903c:	0800854b 	.word	0x0800854b
 8009040:	080084df 	.word	0x080084df

08009044 <HAL_UART_Receive_DMA>:
		uint8_t *pData, uint16_t Size) {
 8009044:	b538      	push	{r3, r4, r5, lr}
	if (huart->RxState == HAL_UART_STATE_READY) {
 8009046:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 800904a:	2b20      	cmp	r3, #32
 800904c:	d116      	bne.n	800907c <HAL_UART_Receive_DMA+0x38>
		if ((pData == NULL) || (Size == 0U)) {
 800904e:	2a00      	cmp	r2, #0
 8009050:	bf18      	it	ne
 8009052:	2900      	cmpne	r1, #0
 8009054:	d014      	beq.n	8009080 <HAL_UART_Receive_DMA+0x3c>
		huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009056:	2300      	movs	r3, #0
 8009058:	6603      	str	r3, [r0, #96]	; 0x60
		if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U) {
 800905a:	6803      	ldr	r3, [r0, #0]
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8009062:	d008      	beq.n	8009076 <HAL_UART_Receive_DMA+0x32>
			ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009064:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009066:	e854 3f00 	ldrex	r3, [r4]
 800906a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800906e:	e844 3500 	strex	r5, r3, [r4]
 8009072:	2d00      	cmp	r5, #0
 8009074:	d1f6      	bne.n	8009064 <HAL_UART_Receive_DMA+0x20>
		return (UART_Start_Receive_DMA(huart, pData, Size));
 8009076:	f7ff ff91 	bl	8008f9c <UART_Start_Receive_DMA>
 800907a:	e000      	b.n	800907e <HAL_UART_Receive_DMA+0x3a>
		return HAL_BUSY;
 800907c:	2002      	movs	r0, #2
}
 800907e:	bd38      	pop	{r3, r4, r5, pc}
			return HAL_ERROR;
 8009080:	2001      	movs	r0, #1
 8009082:	e7fc      	b.n	800907e <HAL_UART_Receive_DMA+0x3a>

08009084 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009084:	b410      	push	{r4}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8009086:	680b      	ldr	r3, [r1, #0]
 8009088:	b9cb      	cbnz	r3, 80090be <FMC_SDRAM_Init+0x3a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800908a:	6803      	ldr	r3, [r0, #0]
 800908c:	4a19      	ldr	r2, [pc, #100]	; (80090f4 <FMC_SDRAM_Init+0x70>)
 800908e:	401a      	ands	r2, r3
 8009090:	684b      	ldr	r3, [r1, #4]
 8009092:	688c      	ldr	r4, [r1, #8]
 8009094:	4323      	orrs	r3, r4
 8009096:	68cc      	ldr	r4, [r1, #12]
 8009098:	4323      	orrs	r3, r4
 800909a:	690c      	ldr	r4, [r1, #16]
 800909c:	4323      	orrs	r3, r4
 800909e:	694c      	ldr	r4, [r1, #20]
 80090a0:	4323      	orrs	r3, r4
 80090a2:	698c      	ldr	r4, [r1, #24]
 80090a4:	4323      	orrs	r3, r4
 80090a6:	69cc      	ldr	r4, [r1, #28]
 80090a8:	4323      	orrs	r3, r4
 80090aa:	6a0c      	ldr	r4, [r1, #32]
 80090ac:	4323      	orrs	r3, r4
 80090ae:	6a49      	ldr	r1, [r1, #36]	; 0x24
 80090b0:	430b      	orrs	r3, r1
 80090b2:	431a      	orrs	r2, r3
 80090b4:	6002      	str	r2, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 80090b6:	2000      	movs	r0, #0
 80090b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090bc:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80090be:	6803      	ldr	r3, [r0, #0]
 80090c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80090c4:	69ca      	ldr	r2, [r1, #28]
 80090c6:	6a0c      	ldr	r4, [r1, #32]
 80090c8:	4322      	orrs	r2, r4
 80090ca:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 80090cc:	4322      	orrs	r2, r4
 80090ce:	4313      	orrs	r3, r2
 80090d0:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80090d2:	6843      	ldr	r3, [r0, #4]
 80090d4:	4a07      	ldr	r2, [pc, #28]	; (80090f4 <FMC_SDRAM_Init+0x70>)
 80090d6:	401a      	ands	r2, r3
 80090d8:	684b      	ldr	r3, [r1, #4]
 80090da:	688c      	ldr	r4, [r1, #8]
 80090dc:	4323      	orrs	r3, r4
 80090de:	68cc      	ldr	r4, [r1, #12]
 80090e0:	4323      	orrs	r3, r4
 80090e2:	690c      	ldr	r4, [r1, #16]
 80090e4:	4323      	orrs	r3, r4
 80090e6:	694c      	ldr	r4, [r1, #20]
 80090e8:	4323      	orrs	r3, r4
 80090ea:	6989      	ldr	r1, [r1, #24]
 80090ec:	430b      	orrs	r3, r1
 80090ee:	431a      	orrs	r2, r3
 80090f0:	6042      	str	r2, [r0, #4]
 80090f2:	e7e0      	b.n	80090b6 <FMC_SDRAM_Init+0x32>
 80090f4:	ffff8000 	.word	0xffff8000

080090f8 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80090f8:	b410      	push	{r4}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80090fa:	bb3a      	cbnz	r2, 800914c <FMC_SDRAM_Timing_Init+0x54>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80090fc:	6882      	ldr	r2, [r0, #8]
 80090fe:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8009102:	680b      	ldr	r3, [r1, #0]
 8009104:	3b01      	subs	r3, #1
 8009106:	684c      	ldr	r4, [r1, #4]
 8009108:	f104 3cff 	add.w	ip, r4, #4294967295
 800910c:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 8009110:	688c      	ldr	r4, [r1, #8]
 8009112:	f104 3cff 	add.w	ip, r4, #4294967295
 8009116:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800911a:	68cc      	ldr	r4, [r1, #12]
 800911c:	f104 3cff 	add.w	ip, r4, #4294967295
 8009120:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
 8009124:	690c      	ldr	r4, [r1, #16]
 8009126:	f104 3cff 	add.w	ip, r4, #4294967295
 800912a:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 800912e:	694c      	ldr	r4, [r1, #20]
 8009130:	f104 3cff 	add.w	ip, r4, #4294967295
 8009134:	ea43 530c 	orr.w	r3, r3, ip, lsl #20
 8009138:	6989      	ldr	r1, [r1, #24]
 800913a:	3901      	subs	r1, #1
 800913c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8009140:	4313      	orrs	r3, r2
 8009142:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 8009144:	2000      	movs	r0, #0
 8009146:	f85d 4b04 	ldr.w	r4, [sp], #4
 800914a:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800914c:	6883      	ldr	r3, [r0, #8]
 800914e:	4a13      	ldr	r2, [pc, #76]	; (800919c <FMC_SDRAM_Timing_Init+0xa4>)
 8009150:	401a      	ands	r2, r3
 8009152:	68cb      	ldr	r3, [r1, #12]
 8009154:	f103 3cff 	add.w	ip, r3, #4294967295
 8009158:	694b      	ldr	r3, [r1, #20]
 800915a:	3b01      	subs	r3, #1
 800915c:	051b      	lsls	r3, r3, #20
 800915e:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
 8009162:	431a      	orrs	r2, r3
 8009164:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009166:	68c2      	ldr	r2, [r0, #12]
 8009168:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800916c:	680b      	ldr	r3, [r1, #0]
 800916e:	3b01      	subs	r3, #1
 8009170:	684c      	ldr	r4, [r1, #4]
 8009172:	f104 3cff 	add.w	ip, r4, #4294967295
 8009176:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 800917a:	688c      	ldr	r4, [r1, #8]
 800917c:	f104 3cff 	add.w	ip, r4, #4294967295
 8009180:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8009184:	690c      	ldr	r4, [r1, #16]
 8009186:	f104 3cff 	add.w	ip, r4, #4294967295
 800918a:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 800918e:	6989      	ldr	r1, [r1, #24]
 8009190:	3901      	subs	r1, #1
 8009192:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8009196:	4313      	orrs	r3, r2
 8009198:	60c3      	str	r3, [r0, #12]
 800919a:	e7d3      	b.n	8009144 <FMC_SDRAM_Timing_Init+0x4c>
 800919c:	ff0f0fff 	.word	0xff0f0fff

080091a0 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80091a0:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80091a2:	6903      	ldr	r3, [r0, #16]
 80091a4:	4a09      	ldr	r2, [pc, #36]	; (80091cc <FMC_SDRAM_SendCommand+0x2c>)
 80091a6:	401a      	ands	r2, r3
 80091a8:	680b      	ldr	r3, [r1, #0]
 80091aa:	684c      	ldr	r4, [r1, #4]
 80091ac:	4323      	orrs	r3, r4
 80091ae:	688c      	ldr	r4, [r1, #8]
 80091b0:	f104 3cff 	add.w	ip, r4, #4294967295
 80091b4:	ea43 134c 	orr.w	r3, r3, ip, lsl #5
 80091b8:	68c9      	ldr	r1, [r1, #12]
 80091ba:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 80091be:	431a      	orrs	r2, r3
 80091c0:	6102      	str	r2, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 80091c2:	2000      	movs	r0, #0
 80091c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091c8:	4770      	bx	lr
 80091ca:	bf00      	nop
 80091cc:	ffc00000 	.word	0xffc00000

080091d0 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80091d0:	6942      	ldr	r2, [r0, #20]
 80091d2:	4b03      	ldr	r3, [pc, #12]	; (80091e0 <FMC_SDRAM_ProgramRefreshRate+0x10>)
 80091d4:	4013      	ands	r3, r2
 80091d6:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80091da:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 80091dc:	2000      	movs	r0, #0
 80091de:	4770      	bx	lr
 80091e0:	ffffc001 	.word	0xffffc001

080091e4 <__cvt>:
 80091e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091e6:	ed2d 8b02 	vpush	{d8}
 80091ea:	eeb0 8b40 	vmov.f64	d8, d0
 80091ee:	b085      	sub	sp, #20
 80091f0:	4617      	mov	r7, r2
 80091f2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80091f4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80091f6:	ee18 2a90 	vmov	r2, s17
 80091fa:	f025 0520 	bic.w	r5, r5, #32
 80091fe:	2a00      	cmp	r2, #0
 8009200:	bfb6      	itet	lt
 8009202:	222d      	movlt	r2, #45	; 0x2d
 8009204:	2200      	movge	r2, #0
 8009206:	eeb1 8b40 	vneglt.f64	d8, d0
 800920a:	2d46      	cmp	r5, #70	; 0x46
 800920c:	460c      	mov	r4, r1
 800920e:	701a      	strb	r2, [r3, #0]
 8009210:	d004      	beq.n	800921c <__cvt+0x38>
 8009212:	2d45      	cmp	r5, #69	; 0x45
 8009214:	d100      	bne.n	8009218 <__cvt+0x34>
 8009216:	3401      	adds	r4, #1
 8009218:	2102      	movs	r1, #2
 800921a:	e000      	b.n	800921e <__cvt+0x3a>
 800921c:	2103      	movs	r1, #3
 800921e:	ab03      	add	r3, sp, #12
 8009220:	9301      	str	r3, [sp, #4]
 8009222:	ab02      	add	r3, sp, #8
 8009224:	9300      	str	r3, [sp, #0]
 8009226:	4622      	mov	r2, r4
 8009228:	4633      	mov	r3, r6
 800922a:	eeb0 0b48 	vmov.f64	d0, d8
 800922e:	f000 ff13 	bl	800a058 <_dtoa_r>
 8009232:	2d47      	cmp	r5, #71	; 0x47
 8009234:	d101      	bne.n	800923a <__cvt+0x56>
 8009236:	07fb      	lsls	r3, r7, #31
 8009238:	d51a      	bpl.n	8009270 <__cvt+0x8c>
 800923a:	2d46      	cmp	r5, #70	; 0x46
 800923c:	eb00 0204 	add.w	r2, r0, r4
 8009240:	d10c      	bne.n	800925c <__cvt+0x78>
 8009242:	7803      	ldrb	r3, [r0, #0]
 8009244:	2b30      	cmp	r3, #48	; 0x30
 8009246:	d107      	bne.n	8009258 <__cvt+0x74>
 8009248:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800924c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009250:	bf1c      	itt	ne
 8009252:	f1c4 0401 	rsbne	r4, r4, #1
 8009256:	6034      	strne	r4, [r6, #0]
 8009258:	6833      	ldr	r3, [r6, #0]
 800925a:	441a      	add	r2, r3
 800925c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009264:	bf08      	it	eq
 8009266:	9203      	streq	r2, [sp, #12]
 8009268:	2130      	movs	r1, #48	; 0x30
 800926a:	9b03      	ldr	r3, [sp, #12]
 800926c:	4293      	cmp	r3, r2
 800926e:	d307      	bcc.n	8009280 <__cvt+0x9c>
 8009270:	9b03      	ldr	r3, [sp, #12]
 8009272:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009274:	1a1b      	subs	r3, r3, r0
 8009276:	6013      	str	r3, [r2, #0]
 8009278:	b005      	add	sp, #20
 800927a:	ecbd 8b02 	vpop	{d8}
 800927e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009280:	1c5c      	adds	r4, r3, #1
 8009282:	9403      	str	r4, [sp, #12]
 8009284:	7019      	strb	r1, [r3, #0]
 8009286:	e7f0      	b.n	800926a <__cvt+0x86>

08009288 <__exponent>:
 8009288:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800928a:	4603      	mov	r3, r0
 800928c:	2900      	cmp	r1, #0
 800928e:	bfb8      	it	lt
 8009290:	4249      	neglt	r1, r1
 8009292:	f803 2b02 	strb.w	r2, [r3], #2
 8009296:	bfb4      	ite	lt
 8009298:	222d      	movlt	r2, #45	; 0x2d
 800929a:	222b      	movge	r2, #43	; 0x2b
 800929c:	2909      	cmp	r1, #9
 800929e:	7042      	strb	r2, [r0, #1]
 80092a0:	dd2a      	ble.n	80092f8 <__exponent+0x70>
 80092a2:	f10d 0207 	add.w	r2, sp, #7
 80092a6:	4617      	mov	r7, r2
 80092a8:	260a      	movs	r6, #10
 80092aa:	4694      	mov	ip, r2
 80092ac:	fb91 f5f6 	sdiv	r5, r1, r6
 80092b0:	fb06 1415 	mls	r4, r6, r5, r1
 80092b4:	3430      	adds	r4, #48	; 0x30
 80092b6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80092ba:	460c      	mov	r4, r1
 80092bc:	2c63      	cmp	r4, #99	; 0x63
 80092be:	f102 32ff 	add.w	r2, r2, #4294967295
 80092c2:	4629      	mov	r1, r5
 80092c4:	dcf1      	bgt.n	80092aa <__exponent+0x22>
 80092c6:	3130      	adds	r1, #48	; 0x30
 80092c8:	f1ac 0402 	sub.w	r4, ip, #2
 80092cc:	f802 1c01 	strb.w	r1, [r2, #-1]
 80092d0:	1c41      	adds	r1, r0, #1
 80092d2:	4622      	mov	r2, r4
 80092d4:	42ba      	cmp	r2, r7
 80092d6:	d30a      	bcc.n	80092ee <__exponent+0x66>
 80092d8:	f10d 0209 	add.w	r2, sp, #9
 80092dc:	eba2 020c 	sub.w	r2, r2, ip
 80092e0:	42bc      	cmp	r4, r7
 80092e2:	bf88      	it	hi
 80092e4:	2200      	movhi	r2, #0
 80092e6:	4413      	add	r3, r2
 80092e8:	1a18      	subs	r0, r3, r0
 80092ea:	b003      	add	sp, #12
 80092ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092ee:	f812 5b01 	ldrb.w	r5, [r2], #1
 80092f2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80092f6:	e7ed      	b.n	80092d4 <__exponent+0x4c>
 80092f8:	2330      	movs	r3, #48	; 0x30
 80092fa:	3130      	adds	r1, #48	; 0x30
 80092fc:	7083      	strb	r3, [r0, #2]
 80092fe:	70c1      	strb	r1, [r0, #3]
 8009300:	1d03      	adds	r3, r0, #4
 8009302:	e7f1      	b.n	80092e8 <__exponent+0x60>
 8009304:	0000      	movs	r0, r0
	...

08009308 <_printf_float>:
 8009308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800930c:	b08b      	sub	sp, #44	; 0x2c
 800930e:	460c      	mov	r4, r1
 8009310:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8009314:	4616      	mov	r6, r2
 8009316:	461f      	mov	r7, r3
 8009318:	4605      	mov	r5, r0
 800931a:	f000 fd95 	bl	8009e48 <_localeconv_r>
 800931e:	f8d0 b000 	ldr.w	fp, [r0]
 8009322:	4658      	mov	r0, fp
 8009324:	f7f6 ffdc 	bl	80002e0 <strlen>
 8009328:	2300      	movs	r3, #0
 800932a:	9308      	str	r3, [sp, #32]
 800932c:	f8d8 3000 	ldr.w	r3, [r8]
 8009330:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009334:	6822      	ldr	r2, [r4, #0]
 8009336:	3307      	adds	r3, #7
 8009338:	f023 0307 	bic.w	r3, r3, #7
 800933c:	f103 0108 	add.w	r1, r3, #8
 8009340:	f8c8 1000 	str.w	r1, [r8]
 8009344:	ed93 0b00 	vldr	d0, [r3]
 8009348:	ed9f 6b97 	vldr	d6, [pc, #604]	; 80095a8 <_printf_float+0x2a0>
 800934c:	eeb0 7bc0 	vabs.f64	d7, d0
 8009350:	eeb4 7b46 	vcmp.f64	d7, d6
 8009354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009358:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800935c:	4682      	mov	sl, r0
 800935e:	dd24      	ble.n	80093aa <_printf_float+0xa2>
 8009360:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009368:	d502      	bpl.n	8009370 <_printf_float+0x68>
 800936a:	232d      	movs	r3, #45	; 0x2d
 800936c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009370:	498f      	ldr	r1, [pc, #572]	; (80095b0 <_printf_float+0x2a8>)
 8009372:	4b90      	ldr	r3, [pc, #576]	; (80095b4 <_printf_float+0x2ac>)
 8009374:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009378:	bf94      	ite	ls
 800937a:	4688      	movls	r8, r1
 800937c:	4698      	movhi	r8, r3
 800937e:	2303      	movs	r3, #3
 8009380:	6123      	str	r3, [r4, #16]
 8009382:	f022 0204 	bic.w	r2, r2, #4
 8009386:	2300      	movs	r3, #0
 8009388:	6022      	str	r2, [r4, #0]
 800938a:	9304      	str	r3, [sp, #16]
 800938c:	9700      	str	r7, [sp, #0]
 800938e:	4633      	mov	r3, r6
 8009390:	aa09      	add	r2, sp, #36	; 0x24
 8009392:	4621      	mov	r1, r4
 8009394:	4628      	mov	r0, r5
 8009396:	f000 f9d1 	bl	800973c <_printf_common>
 800939a:	3001      	adds	r0, #1
 800939c:	f040 808a 	bne.w	80094b4 <_printf_float+0x1ac>
 80093a0:	f04f 30ff 	mov.w	r0, #4294967295
 80093a4:	b00b      	add	sp, #44	; 0x2c
 80093a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093aa:	eeb4 0b40 	vcmp.f64	d0, d0
 80093ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093b2:	d709      	bvc.n	80093c8 <_printf_float+0xc0>
 80093b4:	ee10 3a90 	vmov	r3, s1
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	bfbc      	itt	lt
 80093bc:	232d      	movlt	r3, #45	; 0x2d
 80093be:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80093c2:	497d      	ldr	r1, [pc, #500]	; (80095b8 <_printf_float+0x2b0>)
 80093c4:	4b7d      	ldr	r3, [pc, #500]	; (80095bc <_printf_float+0x2b4>)
 80093c6:	e7d5      	b.n	8009374 <_printf_float+0x6c>
 80093c8:	6863      	ldr	r3, [r4, #4]
 80093ca:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80093ce:	9104      	str	r1, [sp, #16]
 80093d0:	1c59      	adds	r1, r3, #1
 80093d2:	d13c      	bne.n	800944e <_printf_float+0x146>
 80093d4:	2306      	movs	r3, #6
 80093d6:	6063      	str	r3, [r4, #4]
 80093d8:	2300      	movs	r3, #0
 80093da:	9303      	str	r3, [sp, #12]
 80093dc:	ab08      	add	r3, sp, #32
 80093de:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80093e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80093e6:	ab07      	add	r3, sp, #28
 80093e8:	6861      	ldr	r1, [r4, #4]
 80093ea:	9300      	str	r3, [sp, #0]
 80093ec:	6022      	str	r2, [r4, #0]
 80093ee:	f10d 031b 	add.w	r3, sp, #27
 80093f2:	4628      	mov	r0, r5
 80093f4:	f7ff fef6 	bl	80091e4 <__cvt>
 80093f8:	9b04      	ldr	r3, [sp, #16]
 80093fa:	9907      	ldr	r1, [sp, #28]
 80093fc:	2b47      	cmp	r3, #71	; 0x47
 80093fe:	4680      	mov	r8, r0
 8009400:	d108      	bne.n	8009414 <_printf_float+0x10c>
 8009402:	1cc8      	adds	r0, r1, #3
 8009404:	db02      	blt.n	800940c <_printf_float+0x104>
 8009406:	6863      	ldr	r3, [r4, #4]
 8009408:	4299      	cmp	r1, r3
 800940a:	dd41      	ble.n	8009490 <_printf_float+0x188>
 800940c:	f1a9 0902 	sub.w	r9, r9, #2
 8009410:	fa5f f989 	uxtb.w	r9, r9
 8009414:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009418:	d820      	bhi.n	800945c <_printf_float+0x154>
 800941a:	3901      	subs	r1, #1
 800941c:	464a      	mov	r2, r9
 800941e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009422:	9107      	str	r1, [sp, #28]
 8009424:	f7ff ff30 	bl	8009288 <__exponent>
 8009428:	9a08      	ldr	r2, [sp, #32]
 800942a:	9004      	str	r0, [sp, #16]
 800942c:	1813      	adds	r3, r2, r0
 800942e:	2a01      	cmp	r2, #1
 8009430:	6123      	str	r3, [r4, #16]
 8009432:	dc02      	bgt.n	800943a <_printf_float+0x132>
 8009434:	6822      	ldr	r2, [r4, #0]
 8009436:	07d2      	lsls	r2, r2, #31
 8009438:	d501      	bpl.n	800943e <_printf_float+0x136>
 800943a:	3301      	adds	r3, #1
 800943c:	6123      	str	r3, [r4, #16]
 800943e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d0a2      	beq.n	800938c <_printf_float+0x84>
 8009446:	232d      	movs	r3, #45	; 0x2d
 8009448:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800944c:	e79e      	b.n	800938c <_printf_float+0x84>
 800944e:	9904      	ldr	r1, [sp, #16]
 8009450:	2947      	cmp	r1, #71	; 0x47
 8009452:	d1c1      	bne.n	80093d8 <_printf_float+0xd0>
 8009454:	2b00      	cmp	r3, #0
 8009456:	d1bf      	bne.n	80093d8 <_printf_float+0xd0>
 8009458:	2301      	movs	r3, #1
 800945a:	e7bc      	b.n	80093d6 <_printf_float+0xce>
 800945c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009460:	d118      	bne.n	8009494 <_printf_float+0x18c>
 8009462:	2900      	cmp	r1, #0
 8009464:	6863      	ldr	r3, [r4, #4]
 8009466:	dd0b      	ble.n	8009480 <_printf_float+0x178>
 8009468:	6121      	str	r1, [r4, #16]
 800946a:	b913      	cbnz	r3, 8009472 <_printf_float+0x16a>
 800946c:	6822      	ldr	r2, [r4, #0]
 800946e:	07d0      	lsls	r0, r2, #31
 8009470:	d502      	bpl.n	8009478 <_printf_float+0x170>
 8009472:	3301      	adds	r3, #1
 8009474:	440b      	add	r3, r1
 8009476:	6123      	str	r3, [r4, #16]
 8009478:	2300      	movs	r3, #0
 800947a:	65a1      	str	r1, [r4, #88]	; 0x58
 800947c:	9304      	str	r3, [sp, #16]
 800947e:	e7de      	b.n	800943e <_printf_float+0x136>
 8009480:	b913      	cbnz	r3, 8009488 <_printf_float+0x180>
 8009482:	6822      	ldr	r2, [r4, #0]
 8009484:	07d2      	lsls	r2, r2, #31
 8009486:	d501      	bpl.n	800948c <_printf_float+0x184>
 8009488:	3302      	adds	r3, #2
 800948a:	e7f4      	b.n	8009476 <_printf_float+0x16e>
 800948c:	2301      	movs	r3, #1
 800948e:	e7f2      	b.n	8009476 <_printf_float+0x16e>
 8009490:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009494:	9b08      	ldr	r3, [sp, #32]
 8009496:	4299      	cmp	r1, r3
 8009498:	db05      	blt.n	80094a6 <_printf_float+0x19e>
 800949a:	6823      	ldr	r3, [r4, #0]
 800949c:	6121      	str	r1, [r4, #16]
 800949e:	07d8      	lsls	r0, r3, #31
 80094a0:	d5ea      	bpl.n	8009478 <_printf_float+0x170>
 80094a2:	1c4b      	adds	r3, r1, #1
 80094a4:	e7e7      	b.n	8009476 <_printf_float+0x16e>
 80094a6:	2900      	cmp	r1, #0
 80094a8:	bfd4      	ite	le
 80094aa:	f1c1 0202 	rsble	r2, r1, #2
 80094ae:	2201      	movgt	r2, #1
 80094b0:	4413      	add	r3, r2
 80094b2:	e7e0      	b.n	8009476 <_printf_float+0x16e>
 80094b4:	6823      	ldr	r3, [r4, #0]
 80094b6:	055a      	lsls	r2, r3, #21
 80094b8:	d407      	bmi.n	80094ca <_printf_float+0x1c2>
 80094ba:	6923      	ldr	r3, [r4, #16]
 80094bc:	4642      	mov	r2, r8
 80094be:	4631      	mov	r1, r6
 80094c0:	4628      	mov	r0, r5
 80094c2:	47b8      	blx	r7
 80094c4:	3001      	adds	r0, #1
 80094c6:	d12a      	bne.n	800951e <_printf_float+0x216>
 80094c8:	e76a      	b.n	80093a0 <_printf_float+0x98>
 80094ca:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80094ce:	f240 80e0 	bls.w	8009692 <_printf_float+0x38a>
 80094d2:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80094d6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80094da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094de:	d133      	bne.n	8009548 <_printf_float+0x240>
 80094e0:	4a37      	ldr	r2, [pc, #220]	; (80095c0 <_printf_float+0x2b8>)
 80094e2:	2301      	movs	r3, #1
 80094e4:	4631      	mov	r1, r6
 80094e6:	4628      	mov	r0, r5
 80094e8:	47b8      	blx	r7
 80094ea:	3001      	adds	r0, #1
 80094ec:	f43f af58 	beq.w	80093a0 <_printf_float+0x98>
 80094f0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80094f4:	429a      	cmp	r2, r3
 80094f6:	db02      	blt.n	80094fe <_printf_float+0x1f6>
 80094f8:	6823      	ldr	r3, [r4, #0]
 80094fa:	07d8      	lsls	r0, r3, #31
 80094fc:	d50f      	bpl.n	800951e <_printf_float+0x216>
 80094fe:	4653      	mov	r3, sl
 8009500:	465a      	mov	r2, fp
 8009502:	4631      	mov	r1, r6
 8009504:	4628      	mov	r0, r5
 8009506:	47b8      	blx	r7
 8009508:	3001      	adds	r0, #1
 800950a:	f43f af49 	beq.w	80093a0 <_printf_float+0x98>
 800950e:	f04f 0800 	mov.w	r8, #0
 8009512:	f104 091a 	add.w	r9, r4, #26
 8009516:	9b08      	ldr	r3, [sp, #32]
 8009518:	3b01      	subs	r3, #1
 800951a:	4543      	cmp	r3, r8
 800951c:	dc09      	bgt.n	8009532 <_printf_float+0x22a>
 800951e:	6823      	ldr	r3, [r4, #0]
 8009520:	079b      	lsls	r3, r3, #30
 8009522:	f100 8106 	bmi.w	8009732 <_printf_float+0x42a>
 8009526:	68e0      	ldr	r0, [r4, #12]
 8009528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800952a:	4298      	cmp	r0, r3
 800952c:	bfb8      	it	lt
 800952e:	4618      	movlt	r0, r3
 8009530:	e738      	b.n	80093a4 <_printf_float+0x9c>
 8009532:	2301      	movs	r3, #1
 8009534:	464a      	mov	r2, r9
 8009536:	4631      	mov	r1, r6
 8009538:	4628      	mov	r0, r5
 800953a:	47b8      	blx	r7
 800953c:	3001      	adds	r0, #1
 800953e:	f43f af2f 	beq.w	80093a0 <_printf_float+0x98>
 8009542:	f108 0801 	add.w	r8, r8, #1
 8009546:	e7e6      	b.n	8009516 <_printf_float+0x20e>
 8009548:	9b07      	ldr	r3, [sp, #28]
 800954a:	2b00      	cmp	r3, #0
 800954c:	dc3a      	bgt.n	80095c4 <_printf_float+0x2bc>
 800954e:	4a1c      	ldr	r2, [pc, #112]	; (80095c0 <_printf_float+0x2b8>)
 8009550:	2301      	movs	r3, #1
 8009552:	4631      	mov	r1, r6
 8009554:	4628      	mov	r0, r5
 8009556:	47b8      	blx	r7
 8009558:	3001      	adds	r0, #1
 800955a:	f43f af21 	beq.w	80093a0 <_printf_float+0x98>
 800955e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8009562:	4313      	orrs	r3, r2
 8009564:	d102      	bne.n	800956c <_printf_float+0x264>
 8009566:	6823      	ldr	r3, [r4, #0]
 8009568:	07d9      	lsls	r1, r3, #31
 800956a:	d5d8      	bpl.n	800951e <_printf_float+0x216>
 800956c:	4653      	mov	r3, sl
 800956e:	465a      	mov	r2, fp
 8009570:	4631      	mov	r1, r6
 8009572:	4628      	mov	r0, r5
 8009574:	47b8      	blx	r7
 8009576:	3001      	adds	r0, #1
 8009578:	f43f af12 	beq.w	80093a0 <_printf_float+0x98>
 800957c:	f04f 0900 	mov.w	r9, #0
 8009580:	f104 0a1a 	add.w	sl, r4, #26
 8009584:	9b07      	ldr	r3, [sp, #28]
 8009586:	425b      	negs	r3, r3
 8009588:	454b      	cmp	r3, r9
 800958a:	dc01      	bgt.n	8009590 <_printf_float+0x288>
 800958c:	9b08      	ldr	r3, [sp, #32]
 800958e:	e795      	b.n	80094bc <_printf_float+0x1b4>
 8009590:	2301      	movs	r3, #1
 8009592:	4652      	mov	r2, sl
 8009594:	4631      	mov	r1, r6
 8009596:	4628      	mov	r0, r5
 8009598:	47b8      	blx	r7
 800959a:	3001      	adds	r0, #1
 800959c:	f43f af00 	beq.w	80093a0 <_printf_float+0x98>
 80095a0:	f109 0901 	add.w	r9, r9, #1
 80095a4:	e7ee      	b.n	8009584 <_printf_float+0x27c>
 80095a6:	bf00      	nop
 80095a8:	ffffffff 	.word	0xffffffff
 80095ac:	7fefffff 	.word	0x7fefffff
 80095b0:	0800ed8d 	.word	0x0800ed8d
 80095b4:	0800ed91 	.word	0x0800ed91
 80095b8:	0800ed95 	.word	0x0800ed95
 80095bc:	0800ed99 	.word	0x0800ed99
 80095c0:	0800ed9d 	.word	0x0800ed9d
 80095c4:	9a08      	ldr	r2, [sp, #32]
 80095c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80095c8:	429a      	cmp	r2, r3
 80095ca:	bfa8      	it	ge
 80095cc:	461a      	movge	r2, r3
 80095ce:	2a00      	cmp	r2, #0
 80095d0:	4691      	mov	r9, r2
 80095d2:	dc38      	bgt.n	8009646 <_printf_float+0x33e>
 80095d4:	2300      	movs	r3, #0
 80095d6:	9305      	str	r3, [sp, #20]
 80095d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80095dc:	f104 021a 	add.w	r2, r4, #26
 80095e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80095e2:	9905      	ldr	r1, [sp, #20]
 80095e4:	9304      	str	r3, [sp, #16]
 80095e6:	eba3 0309 	sub.w	r3, r3, r9
 80095ea:	428b      	cmp	r3, r1
 80095ec:	dc33      	bgt.n	8009656 <_printf_float+0x34e>
 80095ee:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80095f2:	429a      	cmp	r2, r3
 80095f4:	db3c      	blt.n	8009670 <_printf_float+0x368>
 80095f6:	6823      	ldr	r3, [r4, #0]
 80095f8:	07da      	lsls	r2, r3, #31
 80095fa:	d439      	bmi.n	8009670 <_printf_float+0x368>
 80095fc:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8009600:	eba2 0903 	sub.w	r9, r2, r3
 8009604:	9b04      	ldr	r3, [sp, #16]
 8009606:	1ad2      	subs	r2, r2, r3
 8009608:	4591      	cmp	r9, r2
 800960a:	bfa8      	it	ge
 800960c:	4691      	movge	r9, r2
 800960e:	f1b9 0f00 	cmp.w	r9, #0
 8009612:	dc35      	bgt.n	8009680 <_printf_float+0x378>
 8009614:	f04f 0800 	mov.w	r8, #0
 8009618:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800961c:	f104 0a1a 	add.w	sl, r4, #26
 8009620:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009624:	1a9b      	subs	r3, r3, r2
 8009626:	eba3 0309 	sub.w	r3, r3, r9
 800962a:	4543      	cmp	r3, r8
 800962c:	f77f af77 	ble.w	800951e <_printf_float+0x216>
 8009630:	2301      	movs	r3, #1
 8009632:	4652      	mov	r2, sl
 8009634:	4631      	mov	r1, r6
 8009636:	4628      	mov	r0, r5
 8009638:	47b8      	blx	r7
 800963a:	3001      	adds	r0, #1
 800963c:	f43f aeb0 	beq.w	80093a0 <_printf_float+0x98>
 8009640:	f108 0801 	add.w	r8, r8, #1
 8009644:	e7ec      	b.n	8009620 <_printf_float+0x318>
 8009646:	4613      	mov	r3, r2
 8009648:	4631      	mov	r1, r6
 800964a:	4642      	mov	r2, r8
 800964c:	4628      	mov	r0, r5
 800964e:	47b8      	blx	r7
 8009650:	3001      	adds	r0, #1
 8009652:	d1bf      	bne.n	80095d4 <_printf_float+0x2cc>
 8009654:	e6a4      	b.n	80093a0 <_printf_float+0x98>
 8009656:	2301      	movs	r3, #1
 8009658:	4631      	mov	r1, r6
 800965a:	4628      	mov	r0, r5
 800965c:	9204      	str	r2, [sp, #16]
 800965e:	47b8      	blx	r7
 8009660:	3001      	adds	r0, #1
 8009662:	f43f ae9d 	beq.w	80093a0 <_printf_float+0x98>
 8009666:	9b05      	ldr	r3, [sp, #20]
 8009668:	9a04      	ldr	r2, [sp, #16]
 800966a:	3301      	adds	r3, #1
 800966c:	9305      	str	r3, [sp, #20]
 800966e:	e7b7      	b.n	80095e0 <_printf_float+0x2d8>
 8009670:	4653      	mov	r3, sl
 8009672:	465a      	mov	r2, fp
 8009674:	4631      	mov	r1, r6
 8009676:	4628      	mov	r0, r5
 8009678:	47b8      	blx	r7
 800967a:	3001      	adds	r0, #1
 800967c:	d1be      	bne.n	80095fc <_printf_float+0x2f4>
 800967e:	e68f      	b.n	80093a0 <_printf_float+0x98>
 8009680:	9a04      	ldr	r2, [sp, #16]
 8009682:	464b      	mov	r3, r9
 8009684:	4442      	add	r2, r8
 8009686:	4631      	mov	r1, r6
 8009688:	4628      	mov	r0, r5
 800968a:	47b8      	blx	r7
 800968c:	3001      	adds	r0, #1
 800968e:	d1c1      	bne.n	8009614 <_printf_float+0x30c>
 8009690:	e686      	b.n	80093a0 <_printf_float+0x98>
 8009692:	9a08      	ldr	r2, [sp, #32]
 8009694:	2a01      	cmp	r2, #1
 8009696:	dc01      	bgt.n	800969c <_printf_float+0x394>
 8009698:	07db      	lsls	r3, r3, #31
 800969a:	d537      	bpl.n	800970c <_printf_float+0x404>
 800969c:	2301      	movs	r3, #1
 800969e:	4642      	mov	r2, r8
 80096a0:	4631      	mov	r1, r6
 80096a2:	4628      	mov	r0, r5
 80096a4:	47b8      	blx	r7
 80096a6:	3001      	adds	r0, #1
 80096a8:	f43f ae7a 	beq.w	80093a0 <_printf_float+0x98>
 80096ac:	4653      	mov	r3, sl
 80096ae:	465a      	mov	r2, fp
 80096b0:	4631      	mov	r1, r6
 80096b2:	4628      	mov	r0, r5
 80096b4:	47b8      	blx	r7
 80096b6:	3001      	adds	r0, #1
 80096b8:	f43f ae72 	beq.w	80093a0 <_printf_float+0x98>
 80096bc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80096c0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80096c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096c8:	9b08      	ldr	r3, [sp, #32]
 80096ca:	d01a      	beq.n	8009702 <_printf_float+0x3fa>
 80096cc:	3b01      	subs	r3, #1
 80096ce:	f108 0201 	add.w	r2, r8, #1
 80096d2:	4631      	mov	r1, r6
 80096d4:	4628      	mov	r0, r5
 80096d6:	47b8      	blx	r7
 80096d8:	3001      	adds	r0, #1
 80096da:	d10e      	bne.n	80096fa <_printf_float+0x3f2>
 80096dc:	e660      	b.n	80093a0 <_printf_float+0x98>
 80096de:	2301      	movs	r3, #1
 80096e0:	464a      	mov	r2, r9
 80096e2:	4631      	mov	r1, r6
 80096e4:	4628      	mov	r0, r5
 80096e6:	47b8      	blx	r7
 80096e8:	3001      	adds	r0, #1
 80096ea:	f43f ae59 	beq.w	80093a0 <_printf_float+0x98>
 80096ee:	f108 0801 	add.w	r8, r8, #1
 80096f2:	9b08      	ldr	r3, [sp, #32]
 80096f4:	3b01      	subs	r3, #1
 80096f6:	4543      	cmp	r3, r8
 80096f8:	dcf1      	bgt.n	80096de <_printf_float+0x3d6>
 80096fa:	9b04      	ldr	r3, [sp, #16]
 80096fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009700:	e6dd      	b.n	80094be <_printf_float+0x1b6>
 8009702:	f04f 0800 	mov.w	r8, #0
 8009706:	f104 091a 	add.w	r9, r4, #26
 800970a:	e7f2      	b.n	80096f2 <_printf_float+0x3ea>
 800970c:	2301      	movs	r3, #1
 800970e:	4642      	mov	r2, r8
 8009710:	e7df      	b.n	80096d2 <_printf_float+0x3ca>
 8009712:	2301      	movs	r3, #1
 8009714:	464a      	mov	r2, r9
 8009716:	4631      	mov	r1, r6
 8009718:	4628      	mov	r0, r5
 800971a:	47b8      	blx	r7
 800971c:	3001      	adds	r0, #1
 800971e:	f43f ae3f 	beq.w	80093a0 <_printf_float+0x98>
 8009722:	f108 0801 	add.w	r8, r8, #1
 8009726:	68e3      	ldr	r3, [r4, #12]
 8009728:	9909      	ldr	r1, [sp, #36]	; 0x24
 800972a:	1a5b      	subs	r3, r3, r1
 800972c:	4543      	cmp	r3, r8
 800972e:	dcf0      	bgt.n	8009712 <_printf_float+0x40a>
 8009730:	e6f9      	b.n	8009526 <_printf_float+0x21e>
 8009732:	f04f 0800 	mov.w	r8, #0
 8009736:	f104 0919 	add.w	r9, r4, #25
 800973a:	e7f4      	b.n	8009726 <_printf_float+0x41e>

0800973c <_printf_common>:
 800973c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009740:	4616      	mov	r6, r2
 8009742:	4699      	mov	r9, r3
 8009744:	688a      	ldr	r2, [r1, #8]
 8009746:	690b      	ldr	r3, [r1, #16]
 8009748:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800974c:	4293      	cmp	r3, r2
 800974e:	bfb8      	it	lt
 8009750:	4613      	movlt	r3, r2
 8009752:	6033      	str	r3, [r6, #0]
 8009754:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009758:	4607      	mov	r7, r0
 800975a:	460c      	mov	r4, r1
 800975c:	b10a      	cbz	r2, 8009762 <_printf_common+0x26>
 800975e:	3301      	adds	r3, #1
 8009760:	6033      	str	r3, [r6, #0]
 8009762:	6823      	ldr	r3, [r4, #0]
 8009764:	0699      	lsls	r1, r3, #26
 8009766:	bf42      	ittt	mi
 8009768:	6833      	ldrmi	r3, [r6, #0]
 800976a:	3302      	addmi	r3, #2
 800976c:	6033      	strmi	r3, [r6, #0]
 800976e:	6825      	ldr	r5, [r4, #0]
 8009770:	f015 0506 	ands.w	r5, r5, #6
 8009774:	d106      	bne.n	8009784 <_printf_common+0x48>
 8009776:	f104 0a19 	add.w	sl, r4, #25
 800977a:	68e3      	ldr	r3, [r4, #12]
 800977c:	6832      	ldr	r2, [r6, #0]
 800977e:	1a9b      	subs	r3, r3, r2
 8009780:	42ab      	cmp	r3, r5
 8009782:	dc26      	bgt.n	80097d2 <_printf_common+0x96>
 8009784:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009788:	1e13      	subs	r3, r2, #0
 800978a:	6822      	ldr	r2, [r4, #0]
 800978c:	bf18      	it	ne
 800978e:	2301      	movne	r3, #1
 8009790:	0692      	lsls	r2, r2, #26
 8009792:	d42b      	bmi.n	80097ec <_printf_common+0xb0>
 8009794:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009798:	4649      	mov	r1, r9
 800979a:	4638      	mov	r0, r7
 800979c:	47c0      	blx	r8
 800979e:	3001      	adds	r0, #1
 80097a0:	d01e      	beq.n	80097e0 <_printf_common+0xa4>
 80097a2:	6823      	ldr	r3, [r4, #0]
 80097a4:	6922      	ldr	r2, [r4, #16]
 80097a6:	f003 0306 	and.w	r3, r3, #6
 80097aa:	2b04      	cmp	r3, #4
 80097ac:	bf02      	ittt	eq
 80097ae:	68e5      	ldreq	r5, [r4, #12]
 80097b0:	6833      	ldreq	r3, [r6, #0]
 80097b2:	1aed      	subeq	r5, r5, r3
 80097b4:	68a3      	ldr	r3, [r4, #8]
 80097b6:	bf0c      	ite	eq
 80097b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80097bc:	2500      	movne	r5, #0
 80097be:	4293      	cmp	r3, r2
 80097c0:	bfc4      	itt	gt
 80097c2:	1a9b      	subgt	r3, r3, r2
 80097c4:	18ed      	addgt	r5, r5, r3
 80097c6:	2600      	movs	r6, #0
 80097c8:	341a      	adds	r4, #26
 80097ca:	42b5      	cmp	r5, r6
 80097cc:	d11a      	bne.n	8009804 <_printf_common+0xc8>
 80097ce:	2000      	movs	r0, #0
 80097d0:	e008      	b.n	80097e4 <_printf_common+0xa8>
 80097d2:	2301      	movs	r3, #1
 80097d4:	4652      	mov	r2, sl
 80097d6:	4649      	mov	r1, r9
 80097d8:	4638      	mov	r0, r7
 80097da:	47c0      	blx	r8
 80097dc:	3001      	adds	r0, #1
 80097de:	d103      	bne.n	80097e8 <_printf_common+0xac>
 80097e0:	f04f 30ff 	mov.w	r0, #4294967295
 80097e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097e8:	3501      	adds	r5, #1
 80097ea:	e7c6      	b.n	800977a <_printf_common+0x3e>
 80097ec:	18e1      	adds	r1, r4, r3
 80097ee:	1c5a      	adds	r2, r3, #1
 80097f0:	2030      	movs	r0, #48	; 0x30
 80097f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80097f6:	4422      	add	r2, r4
 80097f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80097fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009800:	3302      	adds	r3, #2
 8009802:	e7c7      	b.n	8009794 <_printf_common+0x58>
 8009804:	2301      	movs	r3, #1
 8009806:	4622      	mov	r2, r4
 8009808:	4649      	mov	r1, r9
 800980a:	4638      	mov	r0, r7
 800980c:	47c0      	blx	r8
 800980e:	3001      	adds	r0, #1
 8009810:	d0e6      	beq.n	80097e0 <_printf_common+0xa4>
 8009812:	3601      	adds	r6, #1
 8009814:	e7d9      	b.n	80097ca <_printf_common+0x8e>
	...

08009818 <_printf_i>:
 8009818:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800981c:	7e0f      	ldrb	r7, [r1, #24]
 800981e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009820:	2f78      	cmp	r7, #120	; 0x78
 8009822:	4691      	mov	r9, r2
 8009824:	4680      	mov	r8, r0
 8009826:	460c      	mov	r4, r1
 8009828:	469a      	mov	sl, r3
 800982a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800982e:	d807      	bhi.n	8009840 <_printf_i+0x28>
 8009830:	2f62      	cmp	r7, #98	; 0x62
 8009832:	d80a      	bhi.n	800984a <_printf_i+0x32>
 8009834:	2f00      	cmp	r7, #0
 8009836:	f000 80d4 	beq.w	80099e2 <_printf_i+0x1ca>
 800983a:	2f58      	cmp	r7, #88	; 0x58
 800983c:	f000 80c0 	beq.w	80099c0 <_printf_i+0x1a8>
 8009840:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009844:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009848:	e03a      	b.n	80098c0 <_printf_i+0xa8>
 800984a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800984e:	2b15      	cmp	r3, #21
 8009850:	d8f6      	bhi.n	8009840 <_printf_i+0x28>
 8009852:	a101      	add	r1, pc, #4	; (adr r1, 8009858 <_printf_i+0x40>)
 8009854:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009858:	080098b1 	.word	0x080098b1
 800985c:	080098c5 	.word	0x080098c5
 8009860:	08009841 	.word	0x08009841
 8009864:	08009841 	.word	0x08009841
 8009868:	08009841 	.word	0x08009841
 800986c:	08009841 	.word	0x08009841
 8009870:	080098c5 	.word	0x080098c5
 8009874:	08009841 	.word	0x08009841
 8009878:	08009841 	.word	0x08009841
 800987c:	08009841 	.word	0x08009841
 8009880:	08009841 	.word	0x08009841
 8009884:	080099c9 	.word	0x080099c9
 8009888:	080098f1 	.word	0x080098f1
 800988c:	08009983 	.word	0x08009983
 8009890:	08009841 	.word	0x08009841
 8009894:	08009841 	.word	0x08009841
 8009898:	080099eb 	.word	0x080099eb
 800989c:	08009841 	.word	0x08009841
 80098a0:	080098f1 	.word	0x080098f1
 80098a4:	08009841 	.word	0x08009841
 80098a8:	08009841 	.word	0x08009841
 80098ac:	0800998b 	.word	0x0800998b
 80098b0:	682b      	ldr	r3, [r5, #0]
 80098b2:	1d1a      	adds	r2, r3, #4
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	602a      	str	r2, [r5, #0]
 80098b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80098c0:	2301      	movs	r3, #1
 80098c2:	e09f      	b.n	8009a04 <_printf_i+0x1ec>
 80098c4:	6820      	ldr	r0, [r4, #0]
 80098c6:	682b      	ldr	r3, [r5, #0]
 80098c8:	0607      	lsls	r7, r0, #24
 80098ca:	f103 0104 	add.w	r1, r3, #4
 80098ce:	6029      	str	r1, [r5, #0]
 80098d0:	d501      	bpl.n	80098d6 <_printf_i+0xbe>
 80098d2:	681e      	ldr	r6, [r3, #0]
 80098d4:	e003      	b.n	80098de <_printf_i+0xc6>
 80098d6:	0646      	lsls	r6, r0, #25
 80098d8:	d5fb      	bpl.n	80098d2 <_printf_i+0xba>
 80098da:	f9b3 6000 	ldrsh.w	r6, [r3]
 80098de:	2e00      	cmp	r6, #0
 80098e0:	da03      	bge.n	80098ea <_printf_i+0xd2>
 80098e2:	232d      	movs	r3, #45	; 0x2d
 80098e4:	4276      	negs	r6, r6
 80098e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098ea:	485a      	ldr	r0, [pc, #360]	; (8009a54 <_printf_i+0x23c>)
 80098ec:	230a      	movs	r3, #10
 80098ee:	e012      	b.n	8009916 <_printf_i+0xfe>
 80098f0:	682b      	ldr	r3, [r5, #0]
 80098f2:	6820      	ldr	r0, [r4, #0]
 80098f4:	1d19      	adds	r1, r3, #4
 80098f6:	6029      	str	r1, [r5, #0]
 80098f8:	0605      	lsls	r5, r0, #24
 80098fa:	d501      	bpl.n	8009900 <_printf_i+0xe8>
 80098fc:	681e      	ldr	r6, [r3, #0]
 80098fe:	e002      	b.n	8009906 <_printf_i+0xee>
 8009900:	0641      	lsls	r1, r0, #25
 8009902:	d5fb      	bpl.n	80098fc <_printf_i+0xe4>
 8009904:	881e      	ldrh	r6, [r3, #0]
 8009906:	4853      	ldr	r0, [pc, #332]	; (8009a54 <_printf_i+0x23c>)
 8009908:	2f6f      	cmp	r7, #111	; 0x6f
 800990a:	bf0c      	ite	eq
 800990c:	2308      	moveq	r3, #8
 800990e:	230a      	movne	r3, #10
 8009910:	2100      	movs	r1, #0
 8009912:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009916:	6865      	ldr	r5, [r4, #4]
 8009918:	60a5      	str	r5, [r4, #8]
 800991a:	2d00      	cmp	r5, #0
 800991c:	bfa2      	ittt	ge
 800991e:	6821      	ldrge	r1, [r4, #0]
 8009920:	f021 0104 	bicge.w	r1, r1, #4
 8009924:	6021      	strge	r1, [r4, #0]
 8009926:	b90e      	cbnz	r6, 800992c <_printf_i+0x114>
 8009928:	2d00      	cmp	r5, #0
 800992a:	d04b      	beq.n	80099c4 <_printf_i+0x1ac>
 800992c:	4615      	mov	r5, r2
 800992e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009932:	fb03 6711 	mls	r7, r3, r1, r6
 8009936:	5dc7      	ldrb	r7, [r0, r7]
 8009938:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800993c:	4637      	mov	r7, r6
 800993e:	42bb      	cmp	r3, r7
 8009940:	460e      	mov	r6, r1
 8009942:	d9f4      	bls.n	800992e <_printf_i+0x116>
 8009944:	2b08      	cmp	r3, #8
 8009946:	d10b      	bne.n	8009960 <_printf_i+0x148>
 8009948:	6823      	ldr	r3, [r4, #0]
 800994a:	07de      	lsls	r6, r3, #31
 800994c:	d508      	bpl.n	8009960 <_printf_i+0x148>
 800994e:	6923      	ldr	r3, [r4, #16]
 8009950:	6861      	ldr	r1, [r4, #4]
 8009952:	4299      	cmp	r1, r3
 8009954:	bfde      	ittt	le
 8009956:	2330      	movle	r3, #48	; 0x30
 8009958:	f805 3c01 	strble.w	r3, [r5, #-1]
 800995c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009960:	1b52      	subs	r2, r2, r5
 8009962:	6122      	str	r2, [r4, #16]
 8009964:	f8cd a000 	str.w	sl, [sp]
 8009968:	464b      	mov	r3, r9
 800996a:	aa03      	add	r2, sp, #12
 800996c:	4621      	mov	r1, r4
 800996e:	4640      	mov	r0, r8
 8009970:	f7ff fee4 	bl	800973c <_printf_common>
 8009974:	3001      	adds	r0, #1
 8009976:	d14a      	bne.n	8009a0e <_printf_i+0x1f6>
 8009978:	f04f 30ff 	mov.w	r0, #4294967295
 800997c:	b004      	add	sp, #16
 800997e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009982:	6823      	ldr	r3, [r4, #0]
 8009984:	f043 0320 	orr.w	r3, r3, #32
 8009988:	6023      	str	r3, [r4, #0]
 800998a:	4833      	ldr	r0, [pc, #204]	; (8009a58 <_printf_i+0x240>)
 800998c:	2778      	movs	r7, #120	; 0x78
 800998e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009992:	6823      	ldr	r3, [r4, #0]
 8009994:	6829      	ldr	r1, [r5, #0]
 8009996:	061f      	lsls	r7, r3, #24
 8009998:	f851 6b04 	ldr.w	r6, [r1], #4
 800999c:	d402      	bmi.n	80099a4 <_printf_i+0x18c>
 800999e:	065f      	lsls	r7, r3, #25
 80099a0:	bf48      	it	mi
 80099a2:	b2b6      	uxthmi	r6, r6
 80099a4:	07df      	lsls	r7, r3, #31
 80099a6:	bf48      	it	mi
 80099a8:	f043 0320 	orrmi.w	r3, r3, #32
 80099ac:	6029      	str	r1, [r5, #0]
 80099ae:	bf48      	it	mi
 80099b0:	6023      	strmi	r3, [r4, #0]
 80099b2:	b91e      	cbnz	r6, 80099bc <_printf_i+0x1a4>
 80099b4:	6823      	ldr	r3, [r4, #0]
 80099b6:	f023 0320 	bic.w	r3, r3, #32
 80099ba:	6023      	str	r3, [r4, #0]
 80099bc:	2310      	movs	r3, #16
 80099be:	e7a7      	b.n	8009910 <_printf_i+0xf8>
 80099c0:	4824      	ldr	r0, [pc, #144]	; (8009a54 <_printf_i+0x23c>)
 80099c2:	e7e4      	b.n	800998e <_printf_i+0x176>
 80099c4:	4615      	mov	r5, r2
 80099c6:	e7bd      	b.n	8009944 <_printf_i+0x12c>
 80099c8:	682b      	ldr	r3, [r5, #0]
 80099ca:	6826      	ldr	r6, [r4, #0]
 80099cc:	6961      	ldr	r1, [r4, #20]
 80099ce:	1d18      	adds	r0, r3, #4
 80099d0:	6028      	str	r0, [r5, #0]
 80099d2:	0635      	lsls	r5, r6, #24
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	d501      	bpl.n	80099dc <_printf_i+0x1c4>
 80099d8:	6019      	str	r1, [r3, #0]
 80099da:	e002      	b.n	80099e2 <_printf_i+0x1ca>
 80099dc:	0670      	lsls	r0, r6, #25
 80099de:	d5fb      	bpl.n	80099d8 <_printf_i+0x1c0>
 80099e0:	8019      	strh	r1, [r3, #0]
 80099e2:	2300      	movs	r3, #0
 80099e4:	6123      	str	r3, [r4, #16]
 80099e6:	4615      	mov	r5, r2
 80099e8:	e7bc      	b.n	8009964 <_printf_i+0x14c>
 80099ea:	682b      	ldr	r3, [r5, #0]
 80099ec:	1d1a      	adds	r2, r3, #4
 80099ee:	602a      	str	r2, [r5, #0]
 80099f0:	681d      	ldr	r5, [r3, #0]
 80099f2:	6862      	ldr	r2, [r4, #4]
 80099f4:	2100      	movs	r1, #0
 80099f6:	4628      	mov	r0, r5
 80099f8:	f7f6 fc22 	bl	8000240 <memchr>
 80099fc:	b108      	cbz	r0, 8009a02 <_printf_i+0x1ea>
 80099fe:	1b40      	subs	r0, r0, r5
 8009a00:	6060      	str	r0, [r4, #4]
 8009a02:	6863      	ldr	r3, [r4, #4]
 8009a04:	6123      	str	r3, [r4, #16]
 8009a06:	2300      	movs	r3, #0
 8009a08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a0c:	e7aa      	b.n	8009964 <_printf_i+0x14c>
 8009a0e:	6923      	ldr	r3, [r4, #16]
 8009a10:	462a      	mov	r2, r5
 8009a12:	4649      	mov	r1, r9
 8009a14:	4640      	mov	r0, r8
 8009a16:	47d0      	blx	sl
 8009a18:	3001      	adds	r0, #1
 8009a1a:	d0ad      	beq.n	8009978 <_printf_i+0x160>
 8009a1c:	6823      	ldr	r3, [r4, #0]
 8009a1e:	079b      	lsls	r3, r3, #30
 8009a20:	d413      	bmi.n	8009a4a <_printf_i+0x232>
 8009a22:	68e0      	ldr	r0, [r4, #12]
 8009a24:	9b03      	ldr	r3, [sp, #12]
 8009a26:	4298      	cmp	r0, r3
 8009a28:	bfb8      	it	lt
 8009a2a:	4618      	movlt	r0, r3
 8009a2c:	e7a6      	b.n	800997c <_printf_i+0x164>
 8009a2e:	2301      	movs	r3, #1
 8009a30:	4632      	mov	r2, r6
 8009a32:	4649      	mov	r1, r9
 8009a34:	4640      	mov	r0, r8
 8009a36:	47d0      	blx	sl
 8009a38:	3001      	adds	r0, #1
 8009a3a:	d09d      	beq.n	8009978 <_printf_i+0x160>
 8009a3c:	3501      	adds	r5, #1
 8009a3e:	68e3      	ldr	r3, [r4, #12]
 8009a40:	9903      	ldr	r1, [sp, #12]
 8009a42:	1a5b      	subs	r3, r3, r1
 8009a44:	42ab      	cmp	r3, r5
 8009a46:	dcf2      	bgt.n	8009a2e <_printf_i+0x216>
 8009a48:	e7eb      	b.n	8009a22 <_printf_i+0x20a>
 8009a4a:	2500      	movs	r5, #0
 8009a4c:	f104 0619 	add.w	r6, r4, #25
 8009a50:	e7f5      	b.n	8009a3e <_printf_i+0x226>
 8009a52:	bf00      	nop
 8009a54:	0800ed9f 	.word	0x0800ed9f
 8009a58:	0800edb0 	.word	0x0800edb0

08009a5c <std>:
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	b510      	push	{r4, lr}
 8009a60:	4604      	mov	r4, r0
 8009a62:	e9c0 3300 	strd	r3, r3, [r0]
 8009a66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a6a:	6083      	str	r3, [r0, #8]
 8009a6c:	8181      	strh	r1, [r0, #12]
 8009a6e:	6643      	str	r3, [r0, #100]	; 0x64
 8009a70:	81c2      	strh	r2, [r0, #14]
 8009a72:	6183      	str	r3, [r0, #24]
 8009a74:	4619      	mov	r1, r3
 8009a76:	2208      	movs	r2, #8
 8009a78:	305c      	adds	r0, #92	; 0x5c
 8009a7a:	f000 f9dc 	bl	8009e36 <memset>
 8009a7e:	4b0d      	ldr	r3, [pc, #52]	; (8009ab4 <std+0x58>)
 8009a80:	6263      	str	r3, [r4, #36]	; 0x24
 8009a82:	4b0d      	ldr	r3, [pc, #52]	; (8009ab8 <std+0x5c>)
 8009a84:	62a3      	str	r3, [r4, #40]	; 0x28
 8009a86:	4b0d      	ldr	r3, [pc, #52]	; (8009abc <std+0x60>)
 8009a88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009a8a:	4b0d      	ldr	r3, [pc, #52]	; (8009ac0 <std+0x64>)
 8009a8c:	6323      	str	r3, [r4, #48]	; 0x30
 8009a8e:	4b0d      	ldr	r3, [pc, #52]	; (8009ac4 <std+0x68>)
 8009a90:	6224      	str	r4, [r4, #32]
 8009a92:	429c      	cmp	r4, r3
 8009a94:	d006      	beq.n	8009aa4 <std+0x48>
 8009a96:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009a9a:	4294      	cmp	r4, r2
 8009a9c:	d002      	beq.n	8009aa4 <std+0x48>
 8009a9e:	33d0      	adds	r3, #208	; 0xd0
 8009aa0:	429c      	cmp	r4, r3
 8009aa2:	d105      	bne.n	8009ab0 <std+0x54>
 8009aa4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009aac:	f000 ba3a 	b.w	8009f24 <__retarget_lock_init_recursive>
 8009ab0:	bd10      	pop	{r4, pc}
 8009ab2:	bf00      	nop
 8009ab4:	08009db1 	.word	0x08009db1
 8009ab8:	08009dd3 	.word	0x08009dd3
 8009abc:	08009e0b 	.word	0x08009e0b
 8009ac0:	08009e2f 	.word	0x08009e2f
 8009ac4:	20005438 	.word	0x20005438

08009ac8 <stdio_exit_handler>:
 8009ac8:	4a02      	ldr	r2, [pc, #8]	; (8009ad4 <stdio_exit_handler+0xc>)
 8009aca:	4903      	ldr	r1, [pc, #12]	; (8009ad8 <stdio_exit_handler+0x10>)
 8009acc:	4803      	ldr	r0, [pc, #12]	; (8009adc <stdio_exit_handler+0x14>)
 8009ace:	f000 b869 	b.w	8009ba4 <_fwalk_sglue>
 8009ad2:	bf00      	nop
 8009ad4:	200000b4 	.word	0x200000b4
 8009ad8:	0800ba6d 	.word	0x0800ba6d
 8009adc:	200000c0 	.word	0x200000c0

08009ae0 <cleanup_stdio>:
 8009ae0:	6841      	ldr	r1, [r0, #4]
 8009ae2:	4b0c      	ldr	r3, [pc, #48]	; (8009b14 <cleanup_stdio+0x34>)
 8009ae4:	4299      	cmp	r1, r3
 8009ae6:	b510      	push	{r4, lr}
 8009ae8:	4604      	mov	r4, r0
 8009aea:	d001      	beq.n	8009af0 <cleanup_stdio+0x10>
 8009aec:	f001 ffbe 	bl	800ba6c <_fflush_r>
 8009af0:	68a1      	ldr	r1, [r4, #8]
 8009af2:	4b09      	ldr	r3, [pc, #36]	; (8009b18 <cleanup_stdio+0x38>)
 8009af4:	4299      	cmp	r1, r3
 8009af6:	d002      	beq.n	8009afe <cleanup_stdio+0x1e>
 8009af8:	4620      	mov	r0, r4
 8009afa:	f001 ffb7 	bl	800ba6c <_fflush_r>
 8009afe:	68e1      	ldr	r1, [r4, #12]
 8009b00:	4b06      	ldr	r3, [pc, #24]	; (8009b1c <cleanup_stdio+0x3c>)
 8009b02:	4299      	cmp	r1, r3
 8009b04:	d004      	beq.n	8009b10 <cleanup_stdio+0x30>
 8009b06:	4620      	mov	r0, r4
 8009b08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b0c:	f001 bfae 	b.w	800ba6c <_fflush_r>
 8009b10:	bd10      	pop	{r4, pc}
 8009b12:	bf00      	nop
 8009b14:	20005438 	.word	0x20005438
 8009b18:	200054a0 	.word	0x200054a0
 8009b1c:	20005508 	.word	0x20005508

08009b20 <global_stdio_init.part.0>:
 8009b20:	b510      	push	{r4, lr}
 8009b22:	4b0b      	ldr	r3, [pc, #44]	; (8009b50 <global_stdio_init.part.0+0x30>)
 8009b24:	4c0b      	ldr	r4, [pc, #44]	; (8009b54 <global_stdio_init.part.0+0x34>)
 8009b26:	4a0c      	ldr	r2, [pc, #48]	; (8009b58 <global_stdio_init.part.0+0x38>)
 8009b28:	601a      	str	r2, [r3, #0]
 8009b2a:	4620      	mov	r0, r4
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	2104      	movs	r1, #4
 8009b30:	f7ff ff94 	bl	8009a5c <std>
 8009b34:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009b38:	2201      	movs	r2, #1
 8009b3a:	2109      	movs	r1, #9
 8009b3c:	f7ff ff8e 	bl	8009a5c <std>
 8009b40:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009b44:	2202      	movs	r2, #2
 8009b46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b4a:	2112      	movs	r1, #18
 8009b4c:	f7ff bf86 	b.w	8009a5c <std>
 8009b50:	20005570 	.word	0x20005570
 8009b54:	20005438 	.word	0x20005438
 8009b58:	08009ac9 	.word	0x08009ac9

08009b5c <__sfp_lock_acquire>:
 8009b5c:	4801      	ldr	r0, [pc, #4]	; (8009b64 <__sfp_lock_acquire+0x8>)
 8009b5e:	f000 b9e2 	b.w	8009f26 <__retarget_lock_acquire_recursive>
 8009b62:	bf00      	nop
 8009b64:	20005579 	.word	0x20005579

08009b68 <__sfp_lock_release>:
 8009b68:	4801      	ldr	r0, [pc, #4]	; (8009b70 <__sfp_lock_release+0x8>)
 8009b6a:	f000 b9dd 	b.w	8009f28 <__retarget_lock_release_recursive>
 8009b6e:	bf00      	nop
 8009b70:	20005579 	.word	0x20005579

08009b74 <__sinit>:
 8009b74:	b510      	push	{r4, lr}
 8009b76:	4604      	mov	r4, r0
 8009b78:	f7ff fff0 	bl	8009b5c <__sfp_lock_acquire>
 8009b7c:	6a23      	ldr	r3, [r4, #32]
 8009b7e:	b11b      	cbz	r3, 8009b88 <__sinit+0x14>
 8009b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b84:	f7ff bff0 	b.w	8009b68 <__sfp_lock_release>
 8009b88:	4b04      	ldr	r3, [pc, #16]	; (8009b9c <__sinit+0x28>)
 8009b8a:	6223      	str	r3, [r4, #32]
 8009b8c:	4b04      	ldr	r3, [pc, #16]	; (8009ba0 <__sinit+0x2c>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d1f5      	bne.n	8009b80 <__sinit+0xc>
 8009b94:	f7ff ffc4 	bl	8009b20 <global_stdio_init.part.0>
 8009b98:	e7f2      	b.n	8009b80 <__sinit+0xc>
 8009b9a:	bf00      	nop
 8009b9c:	08009ae1 	.word	0x08009ae1
 8009ba0:	20005570 	.word	0x20005570

08009ba4 <_fwalk_sglue>:
 8009ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ba8:	4607      	mov	r7, r0
 8009baa:	4688      	mov	r8, r1
 8009bac:	4614      	mov	r4, r2
 8009bae:	2600      	movs	r6, #0
 8009bb0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009bb4:	f1b9 0901 	subs.w	r9, r9, #1
 8009bb8:	d505      	bpl.n	8009bc6 <_fwalk_sglue+0x22>
 8009bba:	6824      	ldr	r4, [r4, #0]
 8009bbc:	2c00      	cmp	r4, #0
 8009bbe:	d1f7      	bne.n	8009bb0 <_fwalk_sglue+0xc>
 8009bc0:	4630      	mov	r0, r6
 8009bc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bc6:	89ab      	ldrh	r3, [r5, #12]
 8009bc8:	2b01      	cmp	r3, #1
 8009bca:	d907      	bls.n	8009bdc <_fwalk_sglue+0x38>
 8009bcc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009bd0:	3301      	adds	r3, #1
 8009bd2:	d003      	beq.n	8009bdc <_fwalk_sglue+0x38>
 8009bd4:	4629      	mov	r1, r5
 8009bd6:	4638      	mov	r0, r7
 8009bd8:	47c0      	blx	r8
 8009bda:	4306      	orrs	r6, r0
 8009bdc:	3568      	adds	r5, #104	; 0x68
 8009bde:	e7e9      	b.n	8009bb4 <_fwalk_sglue+0x10>

08009be0 <iprintf>:
 8009be0:	b40f      	push	{r0, r1, r2, r3}
 8009be2:	b507      	push	{r0, r1, r2, lr}
 8009be4:	4906      	ldr	r1, [pc, #24]	; (8009c00 <iprintf+0x20>)
 8009be6:	ab04      	add	r3, sp, #16
 8009be8:	6808      	ldr	r0, [r1, #0]
 8009bea:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bee:	6881      	ldr	r1, [r0, #8]
 8009bf0:	9301      	str	r3, [sp, #4]
 8009bf2:	f001 fd9b 	bl	800b72c <_vfiprintf_r>
 8009bf6:	b003      	add	sp, #12
 8009bf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009bfc:	b004      	add	sp, #16
 8009bfe:	4770      	bx	lr
 8009c00:	2000010c 	.word	0x2000010c

08009c04 <setbuf>:
 8009c04:	fab1 f281 	clz	r2, r1
 8009c08:	0952      	lsrs	r2, r2, #5
 8009c0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c0e:	0052      	lsls	r2, r2, #1
 8009c10:	f000 b800 	b.w	8009c14 <setvbuf>

08009c14 <setvbuf>:
 8009c14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009c18:	461d      	mov	r5, r3
 8009c1a:	4b54      	ldr	r3, [pc, #336]	; (8009d6c <setvbuf+0x158>)
 8009c1c:	681f      	ldr	r7, [r3, #0]
 8009c1e:	4604      	mov	r4, r0
 8009c20:	460e      	mov	r6, r1
 8009c22:	4690      	mov	r8, r2
 8009c24:	b127      	cbz	r7, 8009c30 <setvbuf+0x1c>
 8009c26:	6a3b      	ldr	r3, [r7, #32]
 8009c28:	b913      	cbnz	r3, 8009c30 <setvbuf+0x1c>
 8009c2a:	4638      	mov	r0, r7
 8009c2c:	f7ff ffa2 	bl	8009b74 <__sinit>
 8009c30:	f1b8 0f02 	cmp.w	r8, #2
 8009c34:	d006      	beq.n	8009c44 <setvbuf+0x30>
 8009c36:	f1b8 0f01 	cmp.w	r8, #1
 8009c3a:	f200 8094 	bhi.w	8009d66 <setvbuf+0x152>
 8009c3e:	2d00      	cmp	r5, #0
 8009c40:	f2c0 8091 	blt.w	8009d66 <setvbuf+0x152>
 8009c44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c46:	07da      	lsls	r2, r3, #31
 8009c48:	d405      	bmi.n	8009c56 <setvbuf+0x42>
 8009c4a:	89a3      	ldrh	r3, [r4, #12]
 8009c4c:	059b      	lsls	r3, r3, #22
 8009c4e:	d402      	bmi.n	8009c56 <setvbuf+0x42>
 8009c50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c52:	f000 f968 	bl	8009f26 <__retarget_lock_acquire_recursive>
 8009c56:	4621      	mov	r1, r4
 8009c58:	4638      	mov	r0, r7
 8009c5a:	f001 ff07 	bl	800ba6c <_fflush_r>
 8009c5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c60:	b141      	cbz	r1, 8009c74 <setvbuf+0x60>
 8009c62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c66:	4299      	cmp	r1, r3
 8009c68:	d002      	beq.n	8009c70 <setvbuf+0x5c>
 8009c6a:	4638      	mov	r0, r7
 8009c6c:	f000 ff60 	bl	800ab30 <_free_r>
 8009c70:	2300      	movs	r3, #0
 8009c72:	6363      	str	r3, [r4, #52]	; 0x34
 8009c74:	2300      	movs	r3, #0
 8009c76:	61a3      	str	r3, [r4, #24]
 8009c78:	6063      	str	r3, [r4, #4]
 8009c7a:	89a3      	ldrh	r3, [r4, #12]
 8009c7c:	0618      	lsls	r0, r3, #24
 8009c7e:	d503      	bpl.n	8009c88 <setvbuf+0x74>
 8009c80:	6921      	ldr	r1, [r4, #16]
 8009c82:	4638      	mov	r0, r7
 8009c84:	f000 ff54 	bl	800ab30 <_free_r>
 8009c88:	89a3      	ldrh	r3, [r4, #12]
 8009c8a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8009c8e:	f023 0303 	bic.w	r3, r3, #3
 8009c92:	f1b8 0f02 	cmp.w	r8, #2
 8009c96:	81a3      	strh	r3, [r4, #12]
 8009c98:	d05f      	beq.n	8009d5a <setvbuf+0x146>
 8009c9a:	ab01      	add	r3, sp, #4
 8009c9c:	466a      	mov	r2, sp
 8009c9e:	4621      	mov	r1, r4
 8009ca0:	4638      	mov	r0, r7
 8009ca2:	f001 ff0b 	bl	800babc <__swhatbuf_r>
 8009ca6:	89a3      	ldrh	r3, [r4, #12]
 8009ca8:	4318      	orrs	r0, r3
 8009caa:	81a0      	strh	r0, [r4, #12]
 8009cac:	bb2d      	cbnz	r5, 8009cfa <setvbuf+0xe6>
 8009cae:	9d00      	ldr	r5, [sp, #0]
 8009cb0:	4628      	mov	r0, r5
 8009cb2:	f000 ff89 	bl	800abc8 <malloc>
 8009cb6:	4606      	mov	r6, r0
 8009cb8:	2800      	cmp	r0, #0
 8009cba:	d150      	bne.n	8009d5e <setvbuf+0x14a>
 8009cbc:	f8dd 9000 	ldr.w	r9, [sp]
 8009cc0:	45a9      	cmp	r9, r5
 8009cc2:	d13e      	bne.n	8009d42 <setvbuf+0x12e>
 8009cc4:	f04f 35ff 	mov.w	r5, #4294967295
 8009cc8:	2200      	movs	r2, #0
 8009cca:	60a2      	str	r2, [r4, #8]
 8009ccc:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8009cd0:	6022      	str	r2, [r4, #0]
 8009cd2:	6122      	str	r2, [r4, #16]
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cda:	6162      	str	r2, [r4, #20]
 8009cdc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009cde:	f043 0302 	orr.w	r3, r3, #2
 8009ce2:	07d1      	lsls	r1, r2, #31
 8009ce4:	81a3      	strh	r3, [r4, #12]
 8009ce6:	d404      	bmi.n	8009cf2 <setvbuf+0xde>
 8009ce8:	059b      	lsls	r3, r3, #22
 8009cea:	d402      	bmi.n	8009cf2 <setvbuf+0xde>
 8009cec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009cee:	f000 f91b 	bl	8009f28 <__retarget_lock_release_recursive>
 8009cf2:	4628      	mov	r0, r5
 8009cf4:	b003      	add	sp, #12
 8009cf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009cfa:	2e00      	cmp	r6, #0
 8009cfc:	d0d8      	beq.n	8009cb0 <setvbuf+0x9c>
 8009cfe:	6a3b      	ldr	r3, [r7, #32]
 8009d00:	b913      	cbnz	r3, 8009d08 <setvbuf+0xf4>
 8009d02:	4638      	mov	r0, r7
 8009d04:	f7ff ff36 	bl	8009b74 <__sinit>
 8009d08:	f1b8 0f01 	cmp.w	r8, #1
 8009d0c:	bf08      	it	eq
 8009d0e:	89a3      	ldrheq	r3, [r4, #12]
 8009d10:	6026      	str	r6, [r4, #0]
 8009d12:	bf04      	itt	eq
 8009d14:	f043 0301 	orreq.w	r3, r3, #1
 8009d18:	81a3      	strheq	r3, [r4, #12]
 8009d1a:	89a3      	ldrh	r3, [r4, #12]
 8009d1c:	f013 0208 	ands.w	r2, r3, #8
 8009d20:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8009d24:	d01d      	beq.n	8009d62 <setvbuf+0x14e>
 8009d26:	07da      	lsls	r2, r3, #31
 8009d28:	bf41      	itttt	mi
 8009d2a:	2200      	movmi	r2, #0
 8009d2c:	426d      	negmi	r5, r5
 8009d2e:	60a2      	strmi	r2, [r4, #8]
 8009d30:	61a5      	strmi	r5, [r4, #24]
 8009d32:	bf58      	it	pl
 8009d34:	60a5      	strpl	r5, [r4, #8]
 8009d36:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8009d38:	f015 0501 	ands.w	r5, r5, #1
 8009d3c:	d0d4      	beq.n	8009ce8 <setvbuf+0xd4>
 8009d3e:	2500      	movs	r5, #0
 8009d40:	e7d7      	b.n	8009cf2 <setvbuf+0xde>
 8009d42:	4648      	mov	r0, r9
 8009d44:	f000 ff40 	bl	800abc8 <malloc>
 8009d48:	4606      	mov	r6, r0
 8009d4a:	2800      	cmp	r0, #0
 8009d4c:	d0ba      	beq.n	8009cc4 <setvbuf+0xb0>
 8009d4e:	89a3      	ldrh	r3, [r4, #12]
 8009d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d54:	81a3      	strh	r3, [r4, #12]
 8009d56:	464d      	mov	r5, r9
 8009d58:	e7d1      	b.n	8009cfe <setvbuf+0xea>
 8009d5a:	2500      	movs	r5, #0
 8009d5c:	e7b4      	b.n	8009cc8 <setvbuf+0xb4>
 8009d5e:	46a9      	mov	r9, r5
 8009d60:	e7f5      	b.n	8009d4e <setvbuf+0x13a>
 8009d62:	60a2      	str	r2, [r4, #8]
 8009d64:	e7e7      	b.n	8009d36 <setvbuf+0x122>
 8009d66:	f04f 35ff 	mov.w	r5, #4294967295
 8009d6a:	e7c2      	b.n	8009cf2 <setvbuf+0xde>
 8009d6c:	2000010c 	.word	0x2000010c

08009d70 <siprintf>:
 8009d70:	b40e      	push	{r1, r2, r3}
 8009d72:	b500      	push	{lr}
 8009d74:	b09c      	sub	sp, #112	; 0x70
 8009d76:	ab1d      	add	r3, sp, #116	; 0x74
 8009d78:	9002      	str	r0, [sp, #8]
 8009d7a:	9006      	str	r0, [sp, #24]
 8009d7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009d80:	4809      	ldr	r0, [pc, #36]	; (8009da8 <siprintf+0x38>)
 8009d82:	9107      	str	r1, [sp, #28]
 8009d84:	9104      	str	r1, [sp, #16]
 8009d86:	4909      	ldr	r1, [pc, #36]	; (8009dac <siprintf+0x3c>)
 8009d88:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d8c:	9105      	str	r1, [sp, #20]
 8009d8e:	6800      	ldr	r0, [r0, #0]
 8009d90:	9301      	str	r3, [sp, #4]
 8009d92:	a902      	add	r1, sp, #8
 8009d94:	f001 fba2 	bl	800b4dc <_svfiprintf_r>
 8009d98:	9b02      	ldr	r3, [sp, #8]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	701a      	strb	r2, [r3, #0]
 8009d9e:	b01c      	add	sp, #112	; 0x70
 8009da0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009da4:	b003      	add	sp, #12
 8009da6:	4770      	bx	lr
 8009da8:	2000010c 	.word	0x2000010c
 8009dac:	ffff0208 	.word	0xffff0208

08009db0 <__sread>:
 8009db0:	b510      	push	{r4, lr}
 8009db2:	460c      	mov	r4, r1
 8009db4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009db8:	f000 f86c 	bl	8009e94 <_read_r>
 8009dbc:	2800      	cmp	r0, #0
 8009dbe:	bfab      	itete	ge
 8009dc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009dc2:	89a3      	ldrhlt	r3, [r4, #12]
 8009dc4:	181b      	addge	r3, r3, r0
 8009dc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009dca:	bfac      	ite	ge
 8009dcc:	6563      	strge	r3, [r4, #84]	; 0x54
 8009dce:	81a3      	strhlt	r3, [r4, #12]
 8009dd0:	bd10      	pop	{r4, pc}

08009dd2 <__swrite>:
 8009dd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dd6:	461f      	mov	r7, r3
 8009dd8:	898b      	ldrh	r3, [r1, #12]
 8009dda:	05db      	lsls	r3, r3, #23
 8009ddc:	4605      	mov	r5, r0
 8009dde:	460c      	mov	r4, r1
 8009de0:	4616      	mov	r6, r2
 8009de2:	d505      	bpl.n	8009df0 <__swrite+0x1e>
 8009de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009de8:	2302      	movs	r3, #2
 8009dea:	2200      	movs	r2, #0
 8009dec:	f000 f840 	bl	8009e70 <_lseek_r>
 8009df0:	89a3      	ldrh	r3, [r4, #12]
 8009df2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009df6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009dfa:	81a3      	strh	r3, [r4, #12]
 8009dfc:	4632      	mov	r2, r6
 8009dfe:	463b      	mov	r3, r7
 8009e00:	4628      	mov	r0, r5
 8009e02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e06:	f000 b857 	b.w	8009eb8 <_write_r>

08009e0a <__sseek>:
 8009e0a:	b510      	push	{r4, lr}
 8009e0c:	460c      	mov	r4, r1
 8009e0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e12:	f000 f82d 	bl	8009e70 <_lseek_r>
 8009e16:	1c43      	adds	r3, r0, #1
 8009e18:	89a3      	ldrh	r3, [r4, #12]
 8009e1a:	bf15      	itete	ne
 8009e1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e26:	81a3      	strheq	r3, [r4, #12]
 8009e28:	bf18      	it	ne
 8009e2a:	81a3      	strhne	r3, [r4, #12]
 8009e2c:	bd10      	pop	{r4, pc}

08009e2e <__sclose>:
 8009e2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e32:	f000 b80d 	b.w	8009e50 <_close_r>

08009e36 <memset>:
 8009e36:	4402      	add	r2, r0
 8009e38:	4603      	mov	r3, r0
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	d100      	bne.n	8009e40 <memset+0xa>
 8009e3e:	4770      	bx	lr
 8009e40:	f803 1b01 	strb.w	r1, [r3], #1
 8009e44:	e7f9      	b.n	8009e3a <memset+0x4>
	...

08009e48 <_localeconv_r>:
 8009e48:	4800      	ldr	r0, [pc, #0]	; (8009e4c <_localeconv_r+0x4>)
 8009e4a:	4770      	bx	lr
 8009e4c:	20000200 	.word	0x20000200

08009e50 <_close_r>:
 8009e50:	b538      	push	{r3, r4, r5, lr}
 8009e52:	4d06      	ldr	r5, [pc, #24]	; (8009e6c <_close_r+0x1c>)
 8009e54:	2300      	movs	r3, #0
 8009e56:	4604      	mov	r4, r0
 8009e58:	4608      	mov	r0, r1
 8009e5a:	602b      	str	r3, [r5, #0]
 8009e5c:	f003 f87e 	bl	800cf5c <_close>
 8009e60:	1c43      	adds	r3, r0, #1
 8009e62:	d102      	bne.n	8009e6a <_close_r+0x1a>
 8009e64:	682b      	ldr	r3, [r5, #0]
 8009e66:	b103      	cbz	r3, 8009e6a <_close_r+0x1a>
 8009e68:	6023      	str	r3, [r4, #0]
 8009e6a:	bd38      	pop	{r3, r4, r5, pc}
 8009e6c:	20005574 	.word	0x20005574

08009e70 <_lseek_r>:
 8009e70:	b538      	push	{r3, r4, r5, lr}
 8009e72:	4d07      	ldr	r5, [pc, #28]	; (8009e90 <_lseek_r+0x20>)
 8009e74:	4604      	mov	r4, r0
 8009e76:	4608      	mov	r0, r1
 8009e78:	4611      	mov	r1, r2
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	602a      	str	r2, [r5, #0]
 8009e7e:	461a      	mov	r2, r3
 8009e80:	f7fb f99a 	bl	80051b8 <_lseek>
 8009e84:	1c43      	adds	r3, r0, #1
 8009e86:	d102      	bne.n	8009e8e <_lseek_r+0x1e>
 8009e88:	682b      	ldr	r3, [r5, #0]
 8009e8a:	b103      	cbz	r3, 8009e8e <_lseek_r+0x1e>
 8009e8c:	6023      	str	r3, [r4, #0]
 8009e8e:	bd38      	pop	{r3, r4, r5, pc}
 8009e90:	20005574 	.word	0x20005574

08009e94 <_read_r>:
 8009e94:	b538      	push	{r3, r4, r5, lr}
 8009e96:	4d07      	ldr	r5, [pc, #28]	; (8009eb4 <_read_r+0x20>)
 8009e98:	4604      	mov	r4, r0
 8009e9a:	4608      	mov	r0, r1
 8009e9c:	4611      	mov	r1, r2
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	602a      	str	r2, [r5, #0]
 8009ea2:	461a      	mov	r2, r3
 8009ea4:	f7fb f97a 	bl	800519c <_read>
 8009ea8:	1c43      	adds	r3, r0, #1
 8009eaa:	d102      	bne.n	8009eb2 <_read_r+0x1e>
 8009eac:	682b      	ldr	r3, [r5, #0]
 8009eae:	b103      	cbz	r3, 8009eb2 <_read_r+0x1e>
 8009eb0:	6023      	str	r3, [r4, #0]
 8009eb2:	bd38      	pop	{r3, r4, r5, pc}
 8009eb4:	20005574 	.word	0x20005574

08009eb8 <_write_r>:
 8009eb8:	b538      	push	{r3, r4, r5, lr}
 8009eba:	4d07      	ldr	r5, [pc, #28]	; (8009ed8 <_write_r+0x20>)
 8009ebc:	4604      	mov	r4, r0
 8009ebe:	4608      	mov	r0, r1
 8009ec0:	4611      	mov	r1, r2
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	602a      	str	r2, [r5, #0]
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	f7fb f95e 	bl	8005188 <_write>
 8009ecc:	1c43      	adds	r3, r0, #1
 8009ece:	d102      	bne.n	8009ed6 <_write_r+0x1e>
 8009ed0:	682b      	ldr	r3, [r5, #0]
 8009ed2:	b103      	cbz	r3, 8009ed6 <_write_r+0x1e>
 8009ed4:	6023      	str	r3, [r4, #0]
 8009ed6:	bd38      	pop	{r3, r4, r5, pc}
 8009ed8:	20005574 	.word	0x20005574

08009edc <__libc_init_array>:
 8009edc:	b570      	push	{r4, r5, r6, lr}
 8009ede:	4d0d      	ldr	r5, [pc, #52]	; (8009f14 <__libc_init_array+0x38>)
 8009ee0:	4c0d      	ldr	r4, [pc, #52]	; (8009f18 <__libc_init_array+0x3c>)
 8009ee2:	1b64      	subs	r4, r4, r5
 8009ee4:	10a4      	asrs	r4, r4, #2
 8009ee6:	2600      	movs	r6, #0
 8009ee8:	42a6      	cmp	r6, r4
 8009eea:	d109      	bne.n	8009f00 <__libc_init_array+0x24>
 8009eec:	4d0b      	ldr	r5, [pc, #44]	; (8009f1c <__libc_init_array+0x40>)
 8009eee:	4c0c      	ldr	r4, [pc, #48]	; (8009f20 <__libc_init_array+0x44>)
 8009ef0:	f003 f84c 	bl	800cf8c <_init>
 8009ef4:	1b64      	subs	r4, r4, r5
 8009ef6:	10a4      	asrs	r4, r4, #2
 8009ef8:	2600      	movs	r6, #0
 8009efa:	42a6      	cmp	r6, r4
 8009efc:	d105      	bne.n	8009f0a <__libc_init_array+0x2e>
 8009efe:	bd70      	pop	{r4, r5, r6, pc}
 8009f00:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f04:	4798      	blx	r3
 8009f06:	3601      	adds	r6, #1
 8009f08:	e7ee      	b.n	8009ee8 <__libc_init_array+0xc>
 8009f0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f0e:	4798      	blx	r3
 8009f10:	3601      	adds	r6, #1
 8009f12:	e7f2      	b.n	8009efa <__libc_init_array+0x1e>
 8009f14:	0800f350 	.word	0x0800f350
 8009f18:	0800f350 	.word	0x0800f350
 8009f1c:	0800f350 	.word	0x0800f350
 8009f20:	0800f354 	.word	0x0800f354

08009f24 <__retarget_lock_init_recursive>:
 8009f24:	4770      	bx	lr

08009f26 <__retarget_lock_acquire_recursive>:
 8009f26:	4770      	bx	lr

08009f28 <__retarget_lock_release_recursive>:
 8009f28:	4770      	bx	lr

08009f2a <memcpy>:
 8009f2a:	440a      	add	r2, r1
 8009f2c:	4291      	cmp	r1, r2
 8009f2e:	f100 33ff 	add.w	r3, r0, #4294967295
 8009f32:	d100      	bne.n	8009f36 <memcpy+0xc>
 8009f34:	4770      	bx	lr
 8009f36:	b510      	push	{r4, lr}
 8009f38:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f40:	4291      	cmp	r1, r2
 8009f42:	d1f9      	bne.n	8009f38 <memcpy+0xe>
 8009f44:	bd10      	pop	{r4, pc}

08009f46 <quorem>:
 8009f46:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f4a:	6903      	ldr	r3, [r0, #16]
 8009f4c:	690c      	ldr	r4, [r1, #16]
 8009f4e:	42a3      	cmp	r3, r4
 8009f50:	4607      	mov	r7, r0
 8009f52:	db7e      	blt.n	800a052 <quorem+0x10c>
 8009f54:	3c01      	subs	r4, #1
 8009f56:	f101 0814 	add.w	r8, r1, #20
 8009f5a:	f100 0514 	add.w	r5, r0, #20
 8009f5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f62:	9301      	str	r3, [sp, #4]
 8009f64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009f68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f6c:	3301      	adds	r3, #1
 8009f6e:	429a      	cmp	r2, r3
 8009f70:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009f74:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009f78:	fbb2 f6f3 	udiv	r6, r2, r3
 8009f7c:	d331      	bcc.n	8009fe2 <quorem+0x9c>
 8009f7e:	f04f 0e00 	mov.w	lr, #0
 8009f82:	4640      	mov	r0, r8
 8009f84:	46ac      	mov	ip, r5
 8009f86:	46f2      	mov	sl, lr
 8009f88:	f850 2b04 	ldr.w	r2, [r0], #4
 8009f8c:	b293      	uxth	r3, r2
 8009f8e:	fb06 e303 	mla	r3, r6, r3, lr
 8009f92:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009f96:	0c1a      	lsrs	r2, r3, #16
 8009f98:	b29b      	uxth	r3, r3
 8009f9a:	ebaa 0303 	sub.w	r3, sl, r3
 8009f9e:	f8dc a000 	ldr.w	sl, [ip]
 8009fa2:	fa13 f38a 	uxtah	r3, r3, sl
 8009fa6:	fb06 220e 	mla	r2, r6, lr, r2
 8009faa:	9300      	str	r3, [sp, #0]
 8009fac:	9b00      	ldr	r3, [sp, #0]
 8009fae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009fb2:	b292      	uxth	r2, r2
 8009fb4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009fb8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009fbc:	f8bd 3000 	ldrh.w	r3, [sp]
 8009fc0:	4581      	cmp	r9, r0
 8009fc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009fc6:	f84c 3b04 	str.w	r3, [ip], #4
 8009fca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009fce:	d2db      	bcs.n	8009f88 <quorem+0x42>
 8009fd0:	f855 300b 	ldr.w	r3, [r5, fp]
 8009fd4:	b92b      	cbnz	r3, 8009fe2 <quorem+0x9c>
 8009fd6:	9b01      	ldr	r3, [sp, #4]
 8009fd8:	3b04      	subs	r3, #4
 8009fda:	429d      	cmp	r5, r3
 8009fdc:	461a      	mov	r2, r3
 8009fde:	d32c      	bcc.n	800a03a <quorem+0xf4>
 8009fe0:	613c      	str	r4, [r7, #16]
 8009fe2:	4638      	mov	r0, r7
 8009fe4:	f001 f920 	bl	800b228 <__mcmp>
 8009fe8:	2800      	cmp	r0, #0
 8009fea:	db22      	blt.n	800a032 <quorem+0xec>
 8009fec:	3601      	adds	r6, #1
 8009fee:	4629      	mov	r1, r5
 8009ff0:	2000      	movs	r0, #0
 8009ff2:	f858 2b04 	ldr.w	r2, [r8], #4
 8009ff6:	f8d1 c000 	ldr.w	ip, [r1]
 8009ffa:	b293      	uxth	r3, r2
 8009ffc:	1ac3      	subs	r3, r0, r3
 8009ffe:	0c12      	lsrs	r2, r2, #16
 800a000:	fa13 f38c 	uxtah	r3, r3, ip
 800a004:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a008:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a00c:	b29b      	uxth	r3, r3
 800a00e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a012:	45c1      	cmp	r9, r8
 800a014:	f841 3b04 	str.w	r3, [r1], #4
 800a018:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a01c:	d2e9      	bcs.n	8009ff2 <quorem+0xac>
 800a01e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a022:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a026:	b922      	cbnz	r2, 800a032 <quorem+0xec>
 800a028:	3b04      	subs	r3, #4
 800a02a:	429d      	cmp	r5, r3
 800a02c:	461a      	mov	r2, r3
 800a02e:	d30a      	bcc.n	800a046 <quorem+0x100>
 800a030:	613c      	str	r4, [r7, #16]
 800a032:	4630      	mov	r0, r6
 800a034:	b003      	add	sp, #12
 800a036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a03a:	6812      	ldr	r2, [r2, #0]
 800a03c:	3b04      	subs	r3, #4
 800a03e:	2a00      	cmp	r2, #0
 800a040:	d1ce      	bne.n	8009fe0 <quorem+0x9a>
 800a042:	3c01      	subs	r4, #1
 800a044:	e7c9      	b.n	8009fda <quorem+0x94>
 800a046:	6812      	ldr	r2, [r2, #0]
 800a048:	3b04      	subs	r3, #4
 800a04a:	2a00      	cmp	r2, #0
 800a04c:	d1f0      	bne.n	800a030 <quorem+0xea>
 800a04e:	3c01      	subs	r4, #1
 800a050:	e7eb      	b.n	800a02a <quorem+0xe4>
 800a052:	2000      	movs	r0, #0
 800a054:	e7ee      	b.n	800a034 <quorem+0xee>
	...

0800a058 <_dtoa_r>:
 800a058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a05c:	ed2d 8b02 	vpush	{d8}
 800a060:	69c5      	ldr	r5, [r0, #28]
 800a062:	b091      	sub	sp, #68	; 0x44
 800a064:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a068:	ec59 8b10 	vmov	r8, r9, d0
 800a06c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800a06e:	9106      	str	r1, [sp, #24]
 800a070:	4606      	mov	r6, r0
 800a072:	9208      	str	r2, [sp, #32]
 800a074:	930c      	str	r3, [sp, #48]	; 0x30
 800a076:	b975      	cbnz	r5, 800a096 <_dtoa_r+0x3e>
 800a078:	2010      	movs	r0, #16
 800a07a:	f000 fda5 	bl	800abc8 <malloc>
 800a07e:	4602      	mov	r2, r0
 800a080:	61f0      	str	r0, [r6, #28]
 800a082:	b920      	cbnz	r0, 800a08e <_dtoa_r+0x36>
 800a084:	4ba6      	ldr	r3, [pc, #664]	; (800a320 <_dtoa_r+0x2c8>)
 800a086:	21ef      	movs	r1, #239	; 0xef
 800a088:	48a6      	ldr	r0, [pc, #664]	; (800a324 <_dtoa_r+0x2cc>)
 800a08a:	f001 fe5b 	bl	800bd44 <__assert_func>
 800a08e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a092:	6005      	str	r5, [r0, #0]
 800a094:	60c5      	str	r5, [r0, #12]
 800a096:	69f3      	ldr	r3, [r6, #28]
 800a098:	6819      	ldr	r1, [r3, #0]
 800a09a:	b151      	cbz	r1, 800a0b2 <_dtoa_r+0x5a>
 800a09c:	685a      	ldr	r2, [r3, #4]
 800a09e:	604a      	str	r2, [r1, #4]
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	4093      	lsls	r3, r2
 800a0a4:	608b      	str	r3, [r1, #8]
 800a0a6:	4630      	mov	r0, r6
 800a0a8:	f000 fe82 	bl	800adb0 <_Bfree>
 800a0ac:	69f3      	ldr	r3, [r6, #28]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	601a      	str	r2, [r3, #0]
 800a0b2:	f1b9 0300 	subs.w	r3, r9, #0
 800a0b6:	bfbb      	ittet	lt
 800a0b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a0bc:	9303      	strlt	r3, [sp, #12]
 800a0be:	2300      	movge	r3, #0
 800a0c0:	2201      	movlt	r2, #1
 800a0c2:	bfac      	ite	ge
 800a0c4:	6023      	strge	r3, [r4, #0]
 800a0c6:	6022      	strlt	r2, [r4, #0]
 800a0c8:	4b97      	ldr	r3, [pc, #604]	; (800a328 <_dtoa_r+0x2d0>)
 800a0ca:	9c03      	ldr	r4, [sp, #12]
 800a0cc:	43a3      	bics	r3, r4
 800a0ce:	d11c      	bne.n	800a10a <_dtoa_r+0xb2>
 800a0d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a0d2:	f242 730f 	movw	r3, #9999	; 0x270f
 800a0d6:	6013      	str	r3, [r2, #0]
 800a0d8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a0dc:	ea53 0308 	orrs.w	r3, r3, r8
 800a0e0:	f000 84fb 	beq.w	800aada <_dtoa_r+0xa82>
 800a0e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a0e6:	b963      	cbnz	r3, 800a102 <_dtoa_r+0xaa>
 800a0e8:	4b90      	ldr	r3, [pc, #576]	; (800a32c <_dtoa_r+0x2d4>)
 800a0ea:	e020      	b.n	800a12e <_dtoa_r+0xd6>
 800a0ec:	4b90      	ldr	r3, [pc, #576]	; (800a330 <_dtoa_r+0x2d8>)
 800a0ee:	9301      	str	r3, [sp, #4]
 800a0f0:	3308      	adds	r3, #8
 800a0f2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a0f4:	6013      	str	r3, [r2, #0]
 800a0f6:	9801      	ldr	r0, [sp, #4]
 800a0f8:	b011      	add	sp, #68	; 0x44
 800a0fa:	ecbd 8b02 	vpop	{d8}
 800a0fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a102:	4b8a      	ldr	r3, [pc, #552]	; (800a32c <_dtoa_r+0x2d4>)
 800a104:	9301      	str	r3, [sp, #4]
 800a106:	3303      	adds	r3, #3
 800a108:	e7f3      	b.n	800a0f2 <_dtoa_r+0x9a>
 800a10a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800a10e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a116:	d10c      	bne.n	800a132 <_dtoa_r+0xda>
 800a118:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a11a:	2301      	movs	r3, #1
 800a11c:	6013      	str	r3, [r2, #0]
 800a11e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a120:	2b00      	cmp	r3, #0
 800a122:	f000 84d7 	beq.w	800aad4 <_dtoa_r+0xa7c>
 800a126:	4b83      	ldr	r3, [pc, #524]	; (800a334 <_dtoa_r+0x2dc>)
 800a128:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a12a:	6013      	str	r3, [r2, #0]
 800a12c:	3b01      	subs	r3, #1
 800a12e:	9301      	str	r3, [sp, #4]
 800a130:	e7e1      	b.n	800a0f6 <_dtoa_r+0x9e>
 800a132:	aa0e      	add	r2, sp, #56	; 0x38
 800a134:	a90f      	add	r1, sp, #60	; 0x3c
 800a136:	4630      	mov	r0, r6
 800a138:	eeb0 0b48 	vmov.f64	d0, d8
 800a13c:	f001 f91a 	bl	800b374 <__d2b>
 800a140:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800a144:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a146:	4605      	mov	r5, r0
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d046      	beq.n	800a1da <_dtoa_r+0x182>
 800a14c:	eeb0 7b48 	vmov.f64	d7, d8
 800a150:	ee18 1a90 	vmov	r1, s17
 800a154:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a158:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800a15c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a160:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a164:	2000      	movs	r0, #0
 800a166:	ee07 1a90 	vmov	s15, r1
 800a16a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800a16e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800a308 <_dtoa_r+0x2b0>
 800a172:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a176:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800a310 <_dtoa_r+0x2b8>
 800a17a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a17e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800a318 <_dtoa_r+0x2c0>
 800a182:	ee07 3a90 	vmov	s15, r3
 800a186:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800a18a:	eeb0 7b46 	vmov.f64	d7, d6
 800a18e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800a192:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a196:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a19a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a19e:	ee16 ba90 	vmov	fp, s13
 800a1a2:	9009      	str	r0, [sp, #36]	; 0x24
 800a1a4:	d508      	bpl.n	800a1b8 <_dtoa_r+0x160>
 800a1a6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a1aa:	eeb4 6b47 	vcmp.f64	d6, d7
 800a1ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1b2:	bf18      	it	ne
 800a1b4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800a1b8:	f1bb 0f16 	cmp.w	fp, #22
 800a1bc:	d82b      	bhi.n	800a216 <_dtoa_r+0x1be>
 800a1be:	495e      	ldr	r1, [pc, #376]	; (800a338 <_dtoa_r+0x2e0>)
 800a1c0:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800a1c4:	ed91 7b00 	vldr	d7, [r1]
 800a1c8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a1cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1d0:	d501      	bpl.n	800a1d6 <_dtoa_r+0x17e>
 800a1d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a1d6:	2100      	movs	r1, #0
 800a1d8:	e01e      	b.n	800a218 <_dtoa_r+0x1c0>
 800a1da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a1dc:	4413      	add	r3, r2
 800a1de:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800a1e2:	2920      	cmp	r1, #32
 800a1e4:	bfc1      	itttt	gt
 800a1e6:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800a1ea:	408c      	lslgt	r4, r1
 800a1ec:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800a1f0:	fa28 f101 	lsrgt.w	r1, r8, r1
 800a1f4:	bfd6      	itet	le
 800a1f6:	f1c1 0120 	rsble	r1, r1, #32
 800a1fa:	4321      	orrgt	r1, r4
 800a1fc:	fa08 f101 	lslle.w	r1, r8, r1
 800a200:	ee07 1a90 	vmov	s15, r1
 800a204:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a208:	3b01      	subs	r3, #1
 800a20a:	ee17 1a90 	vmov	r1, s15
 800a20e:	2001      	movs	r0, #1
 800a210:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a214:	e7a7      	b.n	800a166 <_dtoa_r+0x10e>
 800a216:	2101      	movs	r1, #1
 800a218:	1ad2      	subs	r2, r2, r3
 800a21a:	1e53      	subs	r3, r2, #1
 800a21c:	9305      	str	r3, [sp, #20]
 800a21e:	bf45      	ittet	mi
 800a220:	f1c2 0301 	rsbmi	r3, r2, #1
 800a224:	9304      	strmi	r3, [sp, #16]
 800a226:	2300      	movpl	r3, #0
 800a228:	2300      	movmi	r3, #0
 800a22a:	bf4c      	ite	mi
 800a22c:	9305      	strmi	r3, [sp, #20]
 800a22e:	9304      	strpl	r3, [sp, #16]
 800a230:	f1bb 0f00 	cmp.w	fp, #0
 800a234:	910b      	str	r1, [sp, #44]	; 0x2c
 800a236:	db18      	blt.n	800a26a <_dtoa_r+0x212>
 800a238:	9b05      	ldr	r3, [sp, #20]
 800a23a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800a23e:	445b      	add	r3, fp
 800a240:	9305      	str	r3, [sp, #20]
 800a242:	2300      	movs	r3, #0
 800a244:	9a06      	ldr	r2, [sp, #24]
 800a246:	2a09      	cmp	r2, #9
 800a248:	d848      	bhi.n	800a2dc <_dtoa_r+0x284>
 800a24a:	2a05      	cmp	r2, #5
 800a24c:	bfc4      	itt	gt
 800a24e:	3a04      	subgt	r2, #4
 800a250:	9206      	strgt	r2, [sp, #24]
 800a252:	9a06      	ldr	r2, [sp, #24]
 800a254:	f1a2 0202 	sub.w	r2, r2, #2
 800a258:	bfcc      	ite	gt
 800a25a:	2400      	movgt	r4, #0
 800a25c:	2401      	movle	r4, #1
 800a25e:	2a03      	cmp	r2, #3
 800a260:	d847      	bhi.n	800a2f2 <_dtoa_r+0x29a>
 800a262:	e8df f002 	tbb	[pc, r2]
 800a266:	2d0b      	.short	0x2d0b
 800a268:	392b      	.short	0x392b
 800a26a:	9b04      	ldr	r3, [sp, #16]
 800a26c:	2200      	movs	r2, #0
 800a26e:	eba3 030b 	sub.w	r3, r3, fp
 800a272:	9304      	str	r3, [sp, #16]
 800a274:	920a      	str	r2, [sp, #40]	; 0x28
 800a276:	f1cb 0300 	rsb	r3, fp, #0
 800a27a:	e7e3      	b.n	800a244 <_dtoa_r+0x1ec>
 800a27c:	2200      	movs	r2, #0
 800a27e:	9207      	str	r2, [sp, #28]
 800a280:	9a08      	ldr	r2, [sp, #32]
 800a282:	2a00      	cmp	r2, #0
 800a284:	dc38      	bgt.n	800a2f8 <_dtoa_r+0x2a0>
 800a286:	f04f 0a01 	mov.w	sl, #1
 800a28a:	46d1      	mov	r9, sl
 800a28c:	4652      	mov	r2, sl
 800a28e:	f8cd a020 	str.w	sl, [sp, #32]
 800a292:	69f7      	ldr	r7, [r6, #28]
 800a294:	2100      	movs	r1, #0
 800a296:	2004      	movs	r0, #4
 800a298:	f100 0c14 	add.w	ip, r0, #20
 800a29c:	4594      	cmp	ip, r2
 800a29e:	d930      	bls.n	800a302 <_dtoa_r+0x2aa>
 800a2a0:	6079      	str	r1, [r7, #4]
 800a2a2:	4630      	mov	r0, r6
 800a2a4:	930d      	str	r3, [sp, #52]	; 0x34
 800a2a6:	f000 fd43 	bl	800ad30 <_Balloc>
 800a2aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a2ac:	9001      	str	r0, [sp, #4]
 800a2ae:	4602      	mov	r2, r0
 800a2b0:	2800      	cmp	r0, #0
 800a2b2:	d145      	bne.n	800a340 <_dtoa_r+0x2e8>
 800a2b4:	4b21      	ldr	r3, [pc, #132]	; (800a33c <_dtoa_r+0x2e4>)
 800a2b6:	f240 11af 	movw	r1, #431	; 0x1af
 800a2ba:	e6e5      	b.n	800a088 <_dtoa_r+0x30>
 800a2bc:	2201      	movs	r2, #1
 800a2be:	e7de      	b.n	800a27e <_dtoa_r+0x226>
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	9207      	str	r2, [sp, #28]
 800a2c4:	9a08      	ldr	r2, [sp, #32]
 800a2c6:	eb0b 0a02 	add.w	sl, fp, r2
 800a2ca:	f10a 0901 	add.w	r9, sl, #1
 800a2ce:	464a      	mov	r2, r9
 800a2d0:	2a01      	cmp	r2, #1
 800a2d2:	bfb8      	it	lt
 800a2d4:	2201      	movlt	r2, #1
 800a2d6:	e7dc      	b.n	800a292 <_dtoa_r+0x23a>
 800a2d8:	2201      	movs	r2, #1
 800a2da:	e7f2      	b.n	800a2c2 <_dtoa_r+0x26a>
 800a2dc:	2401      	movs	r4, #1
 800a2de:	2200      	movs	r2, #0
 800a2e0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800a2e4:	f04f 3aff 	mov.w	sl, #4294967295
 800a2e8:	2100      	movs	r1, #0
 800a2ea:	46d1      	mov	r9, sl
 800a2ec:	2212      	movs	r2, #18
 800a2ee:	9108      	str	r1, [sp, #32]
 800a2f0:	e7cf      	b.n	800a292 <_dtoa_r+0x23a>
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	9207      	str	r2, [sp, #28]
 800a2f6:	e7f5      	b.n	800a2e4 <_dtoa_r+0x28c>
 800a2f8:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a2fc:	46d1      	mov	r9, sl
 800a2fe:	4652      	mov	r2, sl
 800a300:	e7c7      	b.n	800a292 <_dtoa_r+0x23a>
 800a302:	3101      	adds	r1, #1
 800a304:	0040      	lsls	r0, r0, #1
 800a306:	e7c7      	b.n	800a298 <_dtoa_r+0x240>
 800a308:	636f4361 	.word	0x636f4361
 800a30c:	3fd287a7 	.word	0x3fd287a7
 800a310:	8b60c8b3 	.word	0x8b60c8b3
 800a314:	3fc68a28 	.word	0x3fc68a28
 800a318:	509f79fb 	.word	0x509f79fb
 800a31c:	3fd34413 	.word	0x3fd34413
 800a320:	0800edce 	.word	0x0800edce
 800a324:	0800ede5 	.word	0x0800ede5
 800a328:	7ff00000 	.word	0x7ff00000
 800a32c:	0800edca 	.word	0x0800edca
 800a330:	0800edc1 	.word	0x0800edc1
 800a334:	0800ed9e 	.word	0x0800ed9e
 800a338:	0800eed0 	.word	0x0800eed0
 800a33c:	0800ee3d 	.word	0x0800ee3d
 800a340:	69f2      	ldr	r2, [r6, #28]
 800a342:	9901      	ldr	r1, [sp, #4]
 800a344:	6011      	str	r1, [r2, #0]
 800a346:	f1b9 0f0e 	cmp.w	r9, #14
 800a34a:	d86c      	bhi.n	800a426 <_dtoa_r+0x3ce>
 800a34c:	2c00      	cmp	r4, #0
 800a34e:	d06a      	beq.n	800a426 <_dtoa_r+0x3ce>
 800a350:	f1bb 0f00 	cmp.w	fp, #0
 800a354:	f340 80a0 	ble.w	800a498 <_dtoa_r+0x440>
 800a358:	4ac1      	ldr	r2, [pc, #772]	; (800a660 <_dtoa_r+0x608>)
 800a35a:	f00b 010f 	and.w	r1, fp, #15
 800a35e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800a362:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a366:	ed92 7b00 	vldr	d7, [r2]
 800a36a:	ea4f 122b 	mov.w	r2, fp, asr #4
 800a36e:	f000 8087 	beq.w	800a480 <_dtoa_r+0x428>
 800a372:	49bc      	ldr	r1, [pc, #752]	; (800a664 <_dtoa_r+0x60c>)
 800a374:	ed91 6b08 	vldr	d6, [r1, #32]
 800a378:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800a37c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a380:	f002 020f 	and.w	r2, r2, #15
 800a384:	2103      	movs	r1, #3
 800a386:	48b7      	ldr	r0, [pc, #732]	; (800a664 <_dtoa_r+0x60c>)
 800a388:	2a00      	cmp	r2, #0
 800a38a:	d17b      	bne.n	800a484 <_dtoa_r+0x42c>
 800a38c:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a390:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a394:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a398:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a39a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a39e:	2a00      	cmp	r2, #0
 800a3a0:	f000 80a0 	beq.w	800a4e4 <_dtoa_r+0x48c>
 800a3a4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a3a8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a3ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3b0:	f140 8098 	bpl.w	800a4e4 <_dtoa_r+0x48c>
 800a3b4:	f1b9 0f00 	cmp.w	r9, #0
 800a3b8:	f000 8094 	beq.w	800a4e4 <_dtoa_r+0x48c>
 800a3bc:	f1ba 0f00 	cmp.w	sl, #0
 800a3c0:	dd2f      	ble.n	800a422 <_dtoa_r+0x3ca>
 800a3c2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800a3c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a3ca:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a3ce:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a3d2:	3101      	adds	r1, #1
 800a3d4:	4654      	mov	r4, sl
 800a3d6:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a3da:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800a3de:	ee07 1a90 	vmov	s15, r1
 800a3e2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a3e6:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a3ea:	ee15 7a90 	vmov	r7, s11
 800a3ee:	ec51 0b15 	vmov	r0, r1, d5
 800a3f2:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800a3f6:	2c00      	cmp	r4, #0
 800a3f8:	d177      	bne.n	800a4ea <_dtoa_r+0x492>
 800a3fa:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a3fe:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a402:	ec41 0b17 	vmov	d7, r0, r1
 800a406:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a40a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a40e:	f300 826a 	bgt.w	800a8e6 <_dtoa_r+0x88e>
 800a412:	eeb1 7b47 	vneg.f64	d7, d7
 800a416:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a41a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a41e:	f100 8260 	bmi.w	800a8e2 <_dtoa_r+0x88a>
 800a422:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a426:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a428:	2a00      	cmp	r2, #0
 800a42a:	f2c0 811d 	blt.w	800a668 <_dtoa_r+0x610>
 800a42e:	f1bb 0f0e 	cmp.w	fp, #14
 800a432:	f300 8119 	bgt.w	800a668 <_dtoa_r+0x610>
 800a436:	4b8a      	ldr	r3, [pc, #552]	; (800a660 <_dtoa_r+0x608>)
 800a438:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a43c:	ed93 6b00 	vldr	d6, [r3]
 800a440:	9b08      	ldr	r3, [sp, #32]
 800a442:	2b00      	cmp	r3, #0
 800a444:	f280 80b7 	bge.w	800a5b6 <_dtoa_r+0x55e>
 800a448:	f1b9 0f00 	cmp.w	r9, #0
 800a44c:	f300 80b3 	bgt.w	800a5b6 <_dtoa_r+0x55e>
 800a450:	f040 8246 	bne.w	800a8e0 <_dtoa_r+0x888>
 800a454:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a458:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a45c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a460:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a468:	464c      	mov	r4, r9
 800a46a:	464f      	mov	r7, r9
 800a46c:	f280 821c 	bge.w	800a8a8 <_dtoa_r+0x850>
 800a470:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a474:	2331      	movs	r3, #49	; 0x31
 800a476:	f808 3b01 	strb.w	r3, [r8], #1
 800a47a:	f10b 0b01 	add.w	fp, fp, #1
 800a47e:	e218      	b.n	800a8b2 <_dtoa_r+0x85a>
 800a480:	2102      	movs	r1, #2
 800a482:	e780      	b.n	800a386 <_dtoa_r+0x32e>
 800a484:	07d4      	lsls	r4, r2, #31
 800a486:	d504      	bpl.n	800a492 <_dtoa_r+0x43a>
 800a488:	ed90 6b00 	vldr	d6, [r0]
 800a48c:	3101      	adds	r1, #1
 800a48e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a492:	1052      	asrs	r2, r2, #1
 800a494:	3008      	adds	r0, #8
 800a496:	e777      	b.n	800a388 <_dtoa_r+0x330>
 800a498:	d022      	beq.n	800a4e0 <_dtoa_r+0x488>
 800a49a:	f1cb 0200 	rsb	r2, fp, #0
 800a49e:	4970      	ldr	r1, [pc, #448]	; (800a660 <_dtoa_r+0x608>)
 800a4a0:	f002 000f 	and.w	r0, r2, #15
 800a4a4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800a4a8:	ed91 7b00 	vldr	d7, [r1]
 800a4ac:	ee28 7b07 	vmul.f64	d7, d8, d7
 800a4b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a4b4:	486b      	ldr	r0, [pc, #428]	; (800a664 <_dtoa_r+0x60c>)
 800a4b6:	1112      	asrs	r2, r2, #4
 800a4b8:	2400      	movs	r4, #0
 800a4ba:	2102      	movs	r1, #2
 800a4bc:	b92a      	cbnz	r2, 800a4ca <_dtoa_r+0x472>
 800a4be:	2c00      	cmp	r4, #0
 800a4c0:	f43f af6a 	beq.w	800a398 <_dtoa_r+0x340>
 800a4c4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a4c8:	e766      	b.n	800a398 <_dtoa_r+0x340>
 800a4ca:	07d7      	lsls	r7, r2, #31
 800a4cc:	d505      	bpl.n	800a4da <_dtoa_r+0x482>
 800a4ce:	ed90 6b00 	vldr	d6, [r0]
 800a4d2:	3101      	adds	r1, #1
 800a4d4:	2401      	movs	r4, #1
 800a4d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a4da:	1052      	asrs	r2, r2, #1
 800a4dc:	3008      	adds	r0, #8
 800a4de:	e7ed      	b.n	800a4bc <_dtoa_r+0x464>
 800a4e0:	2102      	movs	r1, #2
 800a4e2:	e759      	b.n	800a398 <_dtoa_r+0x340>
 800a4e4:	465a      	mov	r2, fp
 800a4e6:	464c      	mov	r4, r9
 800a4e8:	e775      	b.n	800a3d6 <_dtoa_r+0x37e>
 800a4ea:	ec41 0b17 	vmov	d7, r0, r1
 800a4ee:	495c      	ldr	r1, [pc, #368]	; (800a660 <_dtoa_r+0x608>)
 800a4f0:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800a4f4:	ed11 4b02 	vldr	d4, [r1, #-8]
 800a4f8:	9901      	ldr	r1, [sp, #4]
 800a4fa:	440c      	add	r4, r1
 800a4fc:	9907      	ldr	r1, [sp, #28]
 800a4fe:	b351      	cbz	r1, 800a556 <_dtoa_r+0x4fe>
 800a500:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800a504:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800a508:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a50c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800a510:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a514:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a518:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a51c:	ee14 1a90 	vmov	r1, s9
 800a520:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a524:	3130      	adds	r1, #48	; 0x30
 800a526:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a52a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a52e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a532:	f808 1b01 	strb.w	r1, [r8], #1
 800a536:	d439      	bmi.n	800a5ac <_dtoa_r+0x554>
 800a538:	ee32 5b46 	vsub.f64	d5, d2, d6
 800a53c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a544:	d472      	bmi.n	800a62c <_dtoa_r+0x5d4>
 800a546:	45a0      	cmp	r8, r4
 800a548:	f43f af6b 	beq.w	800a422 <_dtoa_r+0x3ca>
 800a54c:	ee27 7b03 	vmul.f64	d7, d7, d3
 800a550:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a554:	e7e0      	b.n	800a518 <_dtoa_r+0x4c0>
 800a556:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a55a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a55e:	4620      	mov	r0, r4
 800a560:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a564:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a568:	ee14 1a90 	vmov	r1, s9
 800a56c:	3130      	adds	r1, #48	; 0x30
 800a56e:	f808 1b01 	strb.w	r1, [r8], #1
 800a572:	45a0      	cmp	r8, r4
 800a574:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a578:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a57c:	d118      	bne.n	800a5b0 <_dtoa_r+0x558>
 800a57e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a582:	ee37 4b05 	vadd.f64	d4, d7, d5
 800a586:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800a58a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a58e:	dc4d      	bgt.n	800a62c <_dtoa_r+0x5d4>
 800a590:	ee35 5b47 	vsub.f64	d5, d5, d7
 800a594:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800a598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a59c:	f57f af41 	bpl.w	800a422 <_dtoa_r+0x3ca>
 800a5a0:	4680      	mov	r8, r0
 800a5a2:	3801      	subs	r0, #1
 800a5a4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800a5a8:	2b30      	cmp	r3, #48	; 0x30
 800a5aa:	d0f9      	beq.n	800a5a0 <_dtoa_r+0x548>
 800a5ac:	4693      	mov	fp, r2
 800a5ae:	e02a      	b.n	800a606 <_dtoa_r+0x5ae>
 800a5b0:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a5b4:	e7d6      	b.n	800a564 <_dtoa_r+0x50c>
 800a5b6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a5ba:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800a5be:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a5c2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800a5c6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800a5ca:	ee15 3a10 	vmov	r3, s10
 800a5ce:	3330      	adds	r3, #48	; 0x30
 800a5d0:	f808 3b01 	strb.w	r3, [r8], #1
 800a5d4:	9b01      	ldr	r3, [sp, #4]
 800a5d6:	eba8 0303 	sub.w	r3, r8, r3
 800a5da:	4599      	cmp	r9, r3
 800a5dc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800a5e0:	eea3 7b46 	vfms.f64	d7, d3, d6
 800a5e4:	d133      	bne.n	800a64e <_dtoa_r+0x5f6>
 800a5e6:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a5ea:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a5ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5f2:	dc1a      	bgt.n	800a62a <_dtoa_r+0x5d2>
 800a5f4:	eeb4 7b46 	vcmp.f64	d7, d6
 800a5f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5fc:	d103      	bne.n	800a606 <_dtoa_r+0x5ae>
 800a5fe:	ee15 3a10 	vmov	r3, s10
 800a602:	07d9      	lsls	r1, r3, #31
 800a604:	d411      	bmi.n	800a62a <_dtoa_r+0x5d2>
 800a606:	4629      	mov	r1, r5
 800a608:	4630      	mov	r0, r6
 800a60a:	f000 fbd1 	bl	800adb0 <_Bfree>
 800a60e:	2300      	movs	r3, #0
 800a610:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a612:	f888 3000 	strb.w	r3, [r8]
 800a616:	f10b 0301 	add.w	r3, fp, #1
 800a61a:	6013      	str	r3, [r2, #0]
 800a61c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a61e:	2b00      	cmp	r3, #0
 800a620:	f43f ad69 	beq.w	800a0f6 <_dtoa_r+0x9e>
 800a624:	f8c3 8000 	str.w	r8, [r3]
 800a628:	e565      	b.n	800a0f6 <_dtoa_r+0x9e>
 800a62a:	465a      	mov	r2, fp
 800a62c:	4643      	mov	r3, r8
 800a62e:	4698      	mov	r8, r3
 800a630:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800a634:	2939      	cmp	r1, #57	; 0x39
 800a636:	d106      	bne.n	800a646 <_dtoa_r+0x5ee>
 800a638:	9901      	ldr	r1, [sp, #4]
 800a63a:	4299      	cmp	r1, r3
 800a63c:	d1f7      	bne.n	800a62e <_dtoa_r+0x5d6>
 800a63e:	9801      	ldr	r0, [sp, #4]
 800a640:	2130      	movs	r1, #48	; 0x30
 800a642:	3201      	adds	r2, #1
 800a644:	7001      	strb	r1, [r0, #0]
 800a646:	7819      	ldrb	r1, [r3, #0]
 800a648:	3101      	adds	r1, #1
 800a64a:	7019      	strb	r1, [r3, #0]
 800a64c:	e7ae      	b.n	800a5ac <_dtoa_r+0x554>
 800a64e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a652:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a65a:	d1b2      	bne.n	800a5c2 <_dtoa_r+0x56a>
 800a65c:	e7d3      	b.n	800a606 <_dtoa_r+0x5ae>
 800a65e:	bf00      	nop
 800a660:	0800eed0 	.word	0x0800eed0
 800a664:	0800eea8 	.word	0x0800eea8
 800a668:	9907      	ldr	r1, [sp, #28]
 800a66a:	2900      	cmp	r1, #0
 800a66c:	f000 80d0 	beq.w	800a810 <_dtoa_r+0x7b8>
 800a670:	9906      	ldr	r1, [sp, #24]
 800a672:	2901      	cmp	r1, #1
 800a674:	f300 80b4 	bgt.w	800a7e0 <_dtoa_r+0x788>
 800a678:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a67a:	2900      	cmp	r1, #0
 800a67c:	f000 80ac 	beq.w	800a7d8 <_dtoa_r+0x780>
 800a680:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a684:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a688:	461c      	mov	r4, r3
 800a68a:	9309      	str	r3, [sp, #36]	; 0x24
 800a68c:	9b04      	ldr	r3, [sp, #16]
 800a68e:	4413      	add	r3, r2
 800a690:	9304      	str	r3, [sp, #16]
 800a692:	9b05      	ldr	r3, [sp, #20]
 800a694:	2101      	movs	r1, #1
 800a696:	4413      	add	r3, r2
 800a698:	4630      	mov	r0, r6
 800a69a:	9305      	str	r3, [sp, #20]
 800a69c:	f000 fc3e 	bl	800af1c <__i2b>
 800a6a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6a2:	4607      	mov	r7, r0
 800a6a4:	f1b8 0f00 	cmp.w	r8, #0
 800a6a8:	d00d      	beq.n	800a6c6 <_dtoa_r+0x66e>
 800a6aa:	9a05      	ldr	r2, [sp, #20]
 800a6ac:	2a00      	cmp	r2, #0
 800a6ae:	dd0a      	ble.n	800a6c6 <_dtoa_r+0x66e>
 800a6b0:	4542      	cmp	r2, r8
 800a6b2:	9904      	ldr	r1, [sp, #16]
 800a6b4:	bfa8      	it	ge
 800a6b6:	4642      	movge	r2, r8
 800a6b8:	1a89      	subs	r1, r1, r2
 800a6ba:	9104      	str	r1, [sp, #16]
 800a6bc:	9905      	ldr	r1, [sp, #20]
 800a6be:	eba8 0802 	sub.w	r8, r8, r2
 800a6c2:	1a8a      	subs	r2, r1, r2
 800a6c4:	9205      	str	r2, [sp, #20]
 800a6c6:	b303      	cbz	r3, 800a70a <_dtoa_r+0x6b2>
 800a6c8:	9a07      	ldr	r2, [sp, #28]
 800a6ca:	2a00      	cmp	r2, #0
 800a6cc:	f000 80a5 	beq.w	800a81a <_dtoa_r+0x7c2>
 800a6d0:	2c00      	cmp	r4, #0
 800a6d2:	dd13      	ble.n	800a6fc <_dtoa_r+0x6a4>
 800a6d4:	4639      	mov	r1, r7
 800a6d6:	4622      	mov	r2, r4
 800a6d8:	4630      	mov	r0, r6
 800a6da:	930d      	str	r3, [sp, #52]	; 0x34
 800a6dc:	f000 fcde 	bl	800b09c <__pow5mult>
 800a6e0:	462a      	mov	r2, r5
 800a6e2:	4601      	mov	r1, r0
 800a6e4:	4607      	mov	r7, r0
 800a6e6:	4630      	mov	r0, r6
 800a6e8:	f000 fc2e 	bl	800af48 <__multiply>
 800a6ec:	4629      	mov	r1, r5
 800a6ee:	9009      	str	r0, [sp, #36]	; 0x24
 800a6f0:	4630      	mov	r0, r6
 800a6f2:	f000 fb5d 	bl	800adb0 <_Bfree>
 800a6f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6fa:	4615      	mov	r5, r2
 800a6fc:	1b1a      	subs	r2, r3, r4
 800a6fe:	d004      	beq.n	800a70a <_dtoa_r+0x6b2>
 800a700:	4629      	mov	r1, r5
 800a702:	4630      	mov	r0, r6
 800a704:	f000 fcca 	bl	800b09c <__pow5mult>
 800a708:	4605      	mov	r5, r0
 800a70a:	2101      	movs	r1, #1
 800a70c:	4630      	mov	r0, r6
 800a70e:	f000 fc05 	bl	800af1c <__i2b>
 800a712:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a714:	2b00      	cmp	r3, #0
 800a716:	4604      	mov	r4, r0
 800a718:	f340 8081 	ble.w	800a81e <_dtoa_r+0x7c6>
 800a71c:	461a      	mov	r2, r3
 800a71e:	4601      	mov	r1, r0
 800a720:	4630      	mov	r0, r6
 800a722:	f000 fcbb 	bl	800b09c <__pow5mult>
 800a726:	9b06      	ldr	r3, [sp, #24]
 800a728:	2b01      	cmp	r3, #1
 800a72a:	4604      	mov	r4, r0
 800a72c:	dd7a      	ble.n	800a824 <_dtoa_r+0x7cc>
 800a72e:	2300      	movs	r3, #0
 800a730:	9309      	str	r3, [sp, #36]	; 0x24
 800a732:	6922      	ldr	r2, [r4, #16]
 800a734:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a738:	6910      	ldr	r0, [r2, #16]
 800a73a:	f000 fba1 	bl	800ae80 <__hi0bits>
 800a73e:	f1c0 0020 	rsb	r0, r0, #32
 800a742:	9b05      	ldr	r3, [sp, #20]
 800a744:	4418      	add	r0, r3
 800a746:	f010 001f 	ands.w	r0, r0, #31
 800a74a:	f000 8093 	beq.w	800a874 <_dtoa_r+0x81c>
 800a74e:	f1c0 0220 	rsb	r2, r0, #32
 800a752:	2a04      	cmp	r2, #4
 800a754:	f340 8085 	ble.w	800a862 <_dtoa_r+0x80a>
 800a758:	9b04      	ldr	r3, [sp, #16]
 800a75a:	f1c0 001c 	rsb	r0, r0, #28
 800a75e:	4403      	add	r3, r0
 800a760:	9304      	str	r3, [sp, #16]
 800a762:	9b05      	ldr	r3, [sp, #20]
 800a764:	4480      	add	r8, r0
 800a766:	4403      	add	r3, r0
 800a768:	9305      	str	r3, [sp, #20]
 800a76a:	9b04      	ldr	r3, [sp, #16]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	dd05      	ble.n	800a77c <_dtoa_r+0x724>
 800a770:	4629      	mov	r1, r5
 800a772:	461a      	mov	r2, r3
 800a774:	4630      	mov	r0, r6
 800a776:	f000 fceb 	bl	800b150 <__lshift>
 800a77a:	4605      	mov	r5, r0
 800a77c:	9b05      	ldr	r3, [sp, #20]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	dd05      	ble.n	800a78e <_dtoa_r+0x736>
 800a782:	4621      	mov	r1, r4
 800a784:	461a      	mov	r2, r3
 800a786:	4630      	mov	r0, r6
 800a788:	f000 fce2 	bl	800b150 <__lshift>
 800a78c:	4604      	mov	r4, r0
 800a78e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a790:	2b00      	cmp	r3, #0
 800a792:	d071      	beq.n	800a878 <_dtoa_r+0x820>
 800a794:	4621      	mov	r1, r4
 800a796:	4628      	mov	r0, r5
 800a798:	f000 fd46 	bl	800b228 <__mcmp>
 800a79c:	2800      	cmp	r0, #0
 800a79e:	da6b      	bge.n	800a878 <_dtoa_r+0x820>
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	4629      	mov	r1, r5
 800a7a4:	220a      	movs	r2, #10
 800a7a6:	4630      	mov	r0, r6
 800a7a8:	f000 fb24 	bl	800adf4 <__multadd>
 800a7ac:	9b07      	ldr	r3, [sp, #28]
 800a7ae:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a7b2:	4605      	mov	r5, r0
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	f000 8197 	beq.w	800aae8 <_dtoa_r+0xa90>
 800a7ba:	4639      	mov	r1, r7
 800a7bc:	2300      	movs	r3, #0
 800a7be:	220a      	movs	r2, #10
 800a7c0:	4630      	mov	r0, r6
 800a7c2:	f000 fb17 	bl	800adf4 <__multadd>
 800a7c6:	f1ba 0f00 	cmp.w	sl, #0
 800a7ca:	4607      	mov	r7, r0
 800a7cc:	f300 8093 	bgt.w	800a8f6 <_dtoa_r+0x89e>
 800a7d0:	9b06      	ldr	r3, [sp, #24]
 800a7d2:	2b02      	cmp	r3, #2
 800a7d4:	dc57      	bgt.n	800a886 <_dtoa_r+0x82e>
 800a7d6:	e08e      	b.n	800a8f6 <_dtoa_r+0x89e>
 800a7d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a7da:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a7de:	e751      	b.n	800a684 <_dtoa_r+0x62c>
 800a7e0:	f109 34ff 	add.w	r4, r9, #4294967295
 800a7e4:	42a3      	cmp	r3, r4
 800a7e6:	bfbf      	itttt	lt
 800a7e8:	1ae2      	sublt	r2, r4, r3
 800a7ea:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a7ec:	189b      	addlt	r3, r3, r2
 800a7ee:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a7f0:	bfae      	itee	ge
 800a7f2:	1b1c      	subge	r4, r3, r4
 800a7f4:	4623      	movlt	r3, r4
 800a7f6:	2400      	movlt	r4, #0
 800a7f8:	f1b9 0f00 	cmp.w	r9, #0
 800a7fc:	bfb5      	itete	lt
 800a7fe:	9a04      	ldrlt	r2, [sp, #16]
 800a800:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800a804:	eba2 0809 	sublt.w	r8, r2, r9
 800a808:	464a      	movge	r2, r9
 800a80a:	bfb8      	it	lt
 800a80c:	2200      	movlt	r2, #0
 800a80e:	e73c      	b.n	800a68a <_dtoa_r+0x632>
 800a810:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a814:	9f07      	ldr	r7, [sp, #28]
 800a816:	461c      	mov	r4, r3
 800a818:	e744      	b.n	800a6a4 <_dtoa_r+0x64c>
 800a81a:	461a      	mov	r2, r3
 800a81c:	e770      	b.n	800a700 <_dtoa_r+0x6a8>
 800a81e:	9b06      	ldr	r3, [sp, #24]
 800a820:	2b01      	cmp	r3, #1
 800a822:	dc18      	bgt.n	800a856 <_dtoa_r+0x7fe>
 800a824:	9b02      	ldr	r3, [sp, #8]
 800a826:	b9b3      	cbnz	r3, 800a856 <_dtoa_r+0x7fe>
 800a828:	9b03      	ldr	r3, [sp, #12]
 800a82a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800a82e:	b9a2      	cbnz	r2, 800a85a <_dtoa_r+0x802>
 800a830:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a834:	0d12      	lsrs	r2, r2, #20
 800a836:	0512      	lsls	r2, r2, #20
 800a838:	b18a      	cbz	r2, 800a85e <_dtoa_r+0x806>
 800a83a:	9b04      	ldr	r3, [sp, #16]
 800a83c:	3301      	adds	r3, #1
 800a83e:	9304      	str	r3, [sp, #16]
 800a840:	9b05      	ldr	r3, [sp, #20]
 800a842:	3301      	adds	r3, #1
 800a844:	9305      	str	r3, [sp, #20]
 800a846:	2301      	movs	r3, #1
 800a848:	9309      	str	r3, [sp, #36]	; 0x24
 800a84a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	f47f af70 	bne.w	800a732 <_dtoa_r+0x6da>
 800a852:	2001      	movs	r0, #1
 800a854:	e775      	b.n	800a742 <_dtoa_r+0x6ea>
 800a856:	2300      	movs	r3, #0
 800a858:	e7f6      	b.n	800a848 <_dtoa_r+0x7f0>
 800a85a:	9b02      	ldr	r3, [sp, #8]
 800a85c:	e7f4      	b.n	800a848 <_dtoa_r+0x7f0>
 800a85e:	9209      	str	r2, [sp, #36]	; 0x24
 800a860:	e7f3      	b.n	800a84a <_dtoa_r+0x7f2>
 800a862:	d082      	beq.n	800a76a <_dtoa_r+0x712>
 800a864:	9b04      	ldr	r3, [sp, #16]
 800a866:	321c      	adds	r2, #28
 800a868:	4413      	add	r3, r2
 800a86a:	9304      	str	r3, [sp, #16]
 800a86c:	9b05      	ldr	r3, [sp, #20]
 800a86e:	4490      	add	r8, r2
 800a870:	4413      	add	r3, r2
 800a872:	e779      	b.n	800a768 <_dtoa_r+0x710>
 800a874:	4602      	mov	r2, r0
 800a876:	e7f5      	b.n	800a864 <_dtoa_r+0x80c>
 800a878:	f1b9 0f00 	cmp.w	r9, #0
 800a87c:	dc36      	bgt.n	800a8ec <_dtoa_r+0x894>
 800a87e:	9b06      	ldr	r3, [sp, #24]
 800a880:	2b02      	cmp	r3, #2
 800a882:	dd33      	ble.n	800a8ec <_dtoa_r+0x894>
 800a884:	46ca      	mov	sl, r9
 800a886:	f1ba 0f00 	cmp.w	sl, #0
 800a88a:	d10d      	bne.n	800a8a8 <_dtoa_r+0x850>
 800a88c:	4621      	mov	r1, r4
 800a88e:	4653      	mov	r3, sl
 800a890:	2205      	movs	r2, #5
 800a892:	4630      	mov	r0, r6
 800a894:	f000 faae 	bl	800adf4 <__multadd>
 800a898:	4601      	mov	r1, r0
 800a89a:	4604      	mov	r4, r0
 800a89c:	4628      	mov	r0, r5
 800a89e:	f000 fcc3 	bl	800b228 <__mcmp>
 800a8a2:	2800      	cmp	r0, #0
 800a8a4:	f73f ade4 	bgt.w	800a470 <_dtoa_r+0x418>
 800a8a8:	9b08      	ldr	r3, [sp, #32]
 800a8aa:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a8ae:	ea6f 0b03 	mvn.w	fp, r3
 800a8b2:	f04f 0900 	mov.w	r9, #0
 800a8b6:	4621      	mov	r1, r4
 800a8b8:	4630      	mov	r0, r6
 800a8ba:	f000 fa79 	bl	800adb0 <_Bfree>
 800a8be:	2f00      	cmp	r7, #0
 800a8c0:	f43f aea1 	beq.w	800a606 <_dtoa_r+0x5ae>
 800a8c4:	f1b9 0f00 	cmp.w	r9, #0
 800a8c8:	d005      	beq.n	800a8d6 <_dtoa_r+0x87e>
 800a8ca:	45b9      	cmp	r9, r7
 800a8cc:	d003      	beq.n	800a8d6 <_dtoa_r+0x87e>
 800a8ce:	4649      	mov	r1, r9
 800a8d0:	4630      	mov	r0, r6
 800a8d2:	f000 fa6d 	bl	800adb0 <_Bfree>
 800a8d6:	4639      	mov	r1, r7
 800a8d8:	4630      	mov	r0, r6
 800a8da:	f000 fa69 	bl	800adb0 <_Bfree>
 800a8de:	e692      	b.n	800a606 <_dtoa_r+0x5ae>
 800a8e0:	2400      	movs	r4, #0
 800a8e2:	4627      	mov	r7, r4
 800a8e4:	e7e0      	b.n	800a8a8 <_dtoa_r+0x850>
 800a8e6:	4693      	mov	fp, r2
 800a8e8:	4627      	mov	r7, r4
 800a8ea:	e5c1      	b.n	800a470 <_dtoa_r+0x418>
 800a8ec:	9b07      	ldr	r3, [sp, #28]
 800a8ee:	46ca      	mov	sl, r9
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	f000 8100 	beq.w	800aaf6 <_dtoa_r+0xa9e>
 800a8f6:	f1b8 0f00 	cmp.w	r8, #0
 800a8fa:	dd05      	ble.n	800a908 <_dtoa_r+0x8b0>
 800a8fc:	4639      	mov	r1, r7
 800a8fe:	4642      	mov	r2, r8
 800a900:	4630      	mov	r0, r6
 800a902:	f000 fc25 	bl	800b150 <__lshift>
 800a906:	4607      	mov	r7, r0
 800a908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d05d      	beq.n	800a9ca <_dtoa_r+0x972>
 800a90e:	6879      	ldr	r1, [r7, #4]
 800a910:	4630      	mov	r0, r6
 800a912:	f000 fa0d 	bl	800ad30 <_Balloc>
 800a916:	4680      	mov	r8, r0
 800a918:	b928      	cbnz	r0, 800a926 <_dtoa_r+0x8ce>
 800a91a:	4b82      	ldr	r3, [pc, #520]	; (800ab24 <_dtoa_r+0xacc>)
 800a91c:	4602      	mov	r2, r0
 800a91e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a922:	f7ff bbb1 	b.w	800a088 <_dtoa_r+0x30>
 800a926:	693a      	ldr	r2, [r7, #16]
 800a928:	3202      	adds	r2, #2
 800a92a:	0092      	lsls	r2, r2, #2
 800a92c:	f107 010c 	add.w	r1, r7, #12
 800a930:	300c      	adds	r0, #12
 800a932:	f7ff fafa 	bl	8009f2a <memcpy>
 800a936:	2201      	movs	r2, #1
 800a938:	4641      	mov	r1, r8
 800a93a:	4630      	mov	r0, r6
 800a93c:	f000 fc08 	bl	800b150 <__lshift>
 800a940:	9b01      	ldr	r3, [sp, #4]
 800a942:	3301      	adds	r3, #1
 800a944:	9304      	str	r3, [sp, #16]
 800a946:	9b01      	ldr	r3, [sp, #4]
 800a948:	4453      	add	r3, sl
 800a94a:	9308      	str	r3, [sp, #32]
 800a94c:	9b02      	ldr	r3, [sp, #8]
 800a94e:	f003 0301 	and.w	r3, r3, #1
 800a952:	46b9      	mov	r9, r7
 800a954:	9307      	str	r3, [sp, #28]
 800a956:	4607      	mov	r7, r0
 800a958:	9b04      	ldr	r3, [sp, #16]
 800a95a:	4621      	mov	r1, r4
 800a95c:	3b01      	subs	r3, #1
 800a95e:	4628      	mov	r0, r5
 800a960:	9302      	str	r3, [sp, #8]
 800a962:	f7ff faf0 	bl	8009f46 <quorem>
 800a966:	4603      	mov	r3, r0
 800a968:	3330      	adds	r3, #48	; 0x30
 800a96a:	9005      	str	r0, [sp, #20]
 800a96c:	4649      	mov	r1, r9
 800a96e:	4628      	mov	r0, r5
 800a970:	9309      	str	r3, [sp, #36]	; 0x24
 800a972:	f000 fc59 	bl	800b228 <__mcmp>
 800a976:	463a      	mov	r2, r7
 800a978:	4682      	mov	sl, r0
 800a97a:	4621      	mov	r1, r4
 800a97c:	4630      	mov	r0, r6
 800a97e:	f000 fc6f 	bl	800b260 <__mdiff>
 800a982:	68c2      	ldr	r2, [r0, #12]
 800a984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a986:	4680      	mov	r8, r0
 800a988:	bb0a      	cbnz	r2, 800a9ce <_dtoa_r+0x976>
 800a98a:	4601      	mov	r1, r0
 800a98c:	4628      	mov	r0, r5
 800a98e:	f000 fc4b 	bl	800b228 <__mcmp>
 800a992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a994:	4602      	mov	r2, r0
 800a996:	4641      	mov	r1, r8
 800a998:	4630      	mov	r0, r6
 800a99a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800a99e:	f000 fa07 	bl	800adb0 <_Bfree>
 800a9a2:	9b06      	ldr	r3, [sp, #24]
 800a9a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a9a6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a9aa:	ea43 0102 	orr.w	r1, r3, r2
 800a9ae:	9b07      	ldr	r3, [sp, #28]
 800a9b0:	4319      	orrs	r1, r3
 800a9b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9b4:	d10d      	bne.n	800a9d2 <_dtoa_r+0x97a>
 800a9b6:	2b39      	cmp	r3, #57	; 0x39
 800a9b8:	d029      	beq.n	800aa0e <_dtoa_r+0x9b6>
 800a9ba:	f1ba 0f00 	cmp.w	sl, #0
 800a9be:	dd01      	ble.n	800a9c4 <_dtoa_r+0x96c>
 800a9c0:	9b05      	ldr	r3, [sp, #20]
 800a9c2:	3331      	adds	r3, #49	; 0x31
 800a9c4:	9a02      	ldr	r2, [sp, #8]
 800a9c6:	7013      	strb	r3, [r2, #0]
 800a9c8:	e775      	b.n	800a8b6 <_dtoa_r+0x85e>
 800a9ca:	4638      	mov	r0, r7
 800a9cc:	e7b8      	b.n	800a940 <_dtoa_r+0x8e8>
 800a9ce:	2201      	movs	r2, #1
 800a9d0:	e7e1      	b.n	800a996 <_dtoa_r+0x93e>
 800a9d2:	f1ba 0f00 	cmp.w	sl, #0
 800a9d6:	db06      	blt.n	800a9e6 <_dtoa_r+0x98e>
 800a9d8:	9906      	ldr	r1, [sp, #24]
 800a9da:	ea41 0a0a 	orr.w	sl, r1, sl
 800a9de:	9907      	ldr	r1, [sp, #28]
 800a9e0:	ea5a 0a01 	orrs.w	sl, sl, r1
 800a9e4:	d120      	bne.n	800aa28 <_dtoa_r+0x9d0>
 800a9e6:	2a00      	cmp	r2, #0
 800a9e8:	ddec      	ble.n	800a9c4 <_dtoa_r+0x96c>
 800a9ea:	4629      	mov	r1, r5
 800a9ec:	2201      	movs	r2, #1
 800a9ee:	4630      	mov	r0, r6
 800a9f0:	9304      	str	r3, [sp, #16]
 800a9f2:	f000 fbad 	bl	800b150 <__lshift>
 800a9f6:	4621      	mov	r1, r4
 800a9f8:	4605      	mov	r5, r0
 800a9fa:	f000 fc15 	bl	800b228 <__mcmp>
 800a9fe:	2800      	cmp	r0, #0
 800aa00:	9b04      	ldr	r3, [sp, #16]
 800aa02:	dc02      	bgt.n	800aa0a <_dtoa_r+0x9b2>
 800aa04:	d1de      	bne.n	800a9c4 <_dtoa_r+0x96c>
 800aa06:	07da      	lsls	r2, r3, #31
 800aa08:	d5dc      	bpl.n	800a9c4 <_dtoa_r+0x96c>
 800aa0a:	2b39      	cmp	r3, #57	; 0x39
 800aa0c:	d1d8      	bne.n	800a9c0 <_dtoa_r+0x968>
 800aa0e:	9a02      	ldr	r2, [sp, #8]
 800aa10:	2339      	movs	r3, #57	; 0x39
 800aa12:	7013      	strb	r3, [r2, #0]
 800aa14:	4643      	mov	r3, r8
 800aa16:	4698      	mov	r8, r3
 800aa18:	3b01      	subs	r3, #1
 800aa1a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800aa1e:	2a39      	cmp	r2, #57	; 0x39
 800aa20:	d051      	beq.n	800aac6 <_dtoa_r+0xa6e>
 800aa22:	3201      	adds	r2, #1
 800aa24:	701a      	strb	r2, [r3, #0]
 800aa26:	e746      	b.n	800a8b6 <_dtoa_r+0x85e>
 800aa28:	2a00      	cmp	r2, #0
 800aa2a:	dd03      	ble.n	800aa34 <_dtoa_r+0x9dc>
 800aa2c:	2b39      	cmp	r3, #57	; 0x39
 800aa2e:	d0ee      	beq.n	800aa0e <_dtoa_r+0x9b6>
 800aa30:	3301      	adds	r3, #1
 800aa32:	e7c7      	b.n	800a9c4 <_dtoa_r+0x96c>
 800aa34:	9a04      	ldr	r2, [sp, #16]
 800aa36:	9908      	ldr	r1, [sp, #32]
 800aa38:	f802 3c01 	strb.w	r3, [r2, #-1]
 800aa3c:	428a      	cmp	r2, r1
 800aa3e:	d02b      	beq.n	800aa98 <_dtoa_r+0xa40>
 800aa40:	4629      	mov	r1, r5
 800aa42:	2300      	movs	r3, #0
 800aa44:	220a      	movs	r2, #10
 800aa46:	4630      	mov	r0, r6
 800aa48:	f000 f9d4 	bl	800adf4 <__multadd>
 800aa4c:	45b9      	cmp	r9, r7
 800aa4e:	4605      	mov	r5, r0
 800aa50:	f04f 0300 	mov.w	r3, #0
 800aa54:	f04f 020a 	mov.w	r2, #10
 800aa58:	4649      	mov	r1, r9
 800aa5a:	4630      	mov	r0, r6
 800aa5c:	d107      	bne.n	800aa6e <_dtoa_r+0xa16>
 800aa5e:	f000 f9c9 	bl	800adf4 <__multadd>
 800aa62:	4681      	mov	r9, r0
 800aa64:	4607      	mov	r7, r0
 800aa66:	9b04      	ldr	r3, [sp, #16]
 800aa68:	3301      	adds	r3, #1
 800aa6a:	9304      	str	r3, [sp, #16]
 800aa6c:	e774      	b.n	800a958 <_dtoa_r+0x900>
 800aa6e:	f000 f9c1 	bl	800adf4 <__multadd>
 800aa72:	4639      	mov	r1, r7
 800aa74:	4681      	mov	r9, r0
 800aa76:	2300      	movs	r3, #0
 800aa78:	220a      	movs	r2, #10
 800aa7a:	4630      	mov	r0, r6
 800aa7c:	f000 f9ba 	bl	800adf4 <__multadd>
 800aa80:	4607      	mov	r7, r0
 800aa82:	e7f0      	b.n	800aa66 <_dtoa_r+0xa0e>
 800aa84:	f1ba 0f00 	cmp.w	sl, #0
 800aa88:	9a01      	ldr	r2, [sp, #4]
 800aa8a:	bfcc      	ite	gt
 800aa8c:	46d0      	movgt	r8, sl
 800aa8e:	f04f 0801 	movle.w	r8, #1
 800aa92:	4490      	add	r8, r2
 800aa94:	f04f 0900 	mov.w	r9, #0
 800aa98:	4629      	mov	r1, r5
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	4630      	mov	r0, r6
 800aa9e:	9302      	str	r3, [sp, #8]
 800aaa0:	f000 fb56 	bl	800b150 <__lshift>
 800aaa4:	4621      	mov	r1, r4
 800aaa6:	4605      	mov	r5, r0
 800aaa8:	f000 fbbe 	bl	800b228 <__mcmp>
 800aaac:	2800      	cmp	r0, #0
 800aaae:	dcb1      	bgt.n	800aa14 <_dtoa_r+0x9bc>
 800aab0:	d102      	bne.n	800aab8 <_dtoa_r+0xa60>
 800aab2:	9b02      	ldr	r3, [sp, #8]
 800aab4:	07db      	lsls	r3, r3, #31
 800aab6:	d4ad      	bmi.n	800aa14 <_dtoa_r+0x9bc>
 800aab8:	4643      	mov	r3, r8
 800aaba:	4698      	mov	r8, r3
 800aabc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aac0:	2a30      	cmp	r2, #48	; 0x30
 800aac2:	d0fa      	beq.n	800aaba <_dtoa_r+0xa62>
 800aac4:	e6f7      	b.n	800a8b6 <_dtoa_r+0x85e>
 800aac6:	9a01      	ldr	r2, [sp, #4]
 800aac8:	429a      	cmp	r2, r3
 800aaca:	d1a4      	bne.n	800aa16 <_dtoa_r+0x9be>
 800aacc:	f10b 0b01 	add.w	fp, fp, #1
 800aad0:	2331      	movs	r3, #49	; 0x31
 800aad2:	e778      	b.n	800a9c6 <_dtoa_r+0x96e>
 800aad4:	4b14      	ldr	r3, [pc, #80]	; (800ab28 <_dtoa_r+0xad0>)
 800aad6:	f7ff bb2a 	b.w	800a12e <_dtoa_r+0xd6>
 800aada:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aadc:	2b00      	cmp	r3, #0
 800aade:	f47f ab05 	bne.w	800a0ec <_dtoa_r+0x94>
 800aae2:	4b12      	ldr	r3, [pc, #72]	; (800ab2c <_dtoa_r+0xad4>)
 800aae4:	f7ff bb23 	b.w	800a12e <_dtoa_r+0xd6>
 800aae8:	f1ba 0f00 	cmp.w	sl, #0
 800aaec:	dc03      	bgt.n	800aaf6 <_dtoa_r+0xa9e>
 800aaee:	9b06      	ldr	r3, [sp, #24]
 800aaf0:	2b02      	cmp	r3, #2
 800aaf2:	f73f aec8 	bgt.w	800a886 <_dtoa_r+0x82e>
 800aaf6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800aafa:	4621      	mov	r1, r4
 800aafc:	4628      	mov	r0, r5
 800aafe:	f7ff fa22 	bl	8009f46 <quorem>
 800ab02:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ab06:	f808 3b01 	strb.w	r3, [r8], #1
 800ab0a:	9a01      	ldr	r2, [sp, #4]
 800ab0c:	eba8 0202 	sub.w	r2, r8, r2
 800ab10:	4592      	cmp	sl, r2
 800ab12:	ddb7      	ble.n	800aa84 <_dtoa_r+0xa2c>
 800ab14:	4629      	mov	r1, r5
 800ab16:	2300      	movs	r3, #0
 800ab18:	220a      	movs	r2, #10
 800ab1a:	4630      	mov	r0, r6
 800ab1c:	f000 f96a 	bl	800adf4 <__multadd>
 800ab20:	4605      	mov	r5, r0
 800ab22:	e7ea      	b.n	800aafa <_dtoa_r+0xaa2>
 800ab24:	0800ee3d 	.word	0x0800ee3d
 800ab28:	0800ed9d 	.word	0x0800ed9d
 800ab2c:	0800edc1 	.word	0x0800edc1

0800ab30 <_free_r>:
 800ab30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab32:	2900      	cmp	r1, #0
 800ab34:	d044      	beq.n	800abc0 <_free_r+0x90>
 800ab36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab3a:	9001      	str	r0, [sp, #4]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	f1a1 0404 	sub.w	r4, r1, #4
 800ab42:	bfb8      	it	lt
 800ab44:	18e4      	addlt	r4, r4, r3
 800ab46:	f000 f8e7 	bl	800ad18 <__malloc_lock>
 800ab4a:	4a1e      	ldr	r2, [pc, #120]	; (800abc4 <_free_r+0x94>)
 800ab4c:	9801      	ldr	r0, [sp, #4]
 800ab4e:	6813      	ldr	r3, [r2, #0]
 800ab50:	b933      	cbnz	r3, 800ab60 <_free_r+0x30>
 800ab52:	6063      	str	r3, [r4, #4]
 800ab54:	6014      	str	r4, [r2, #0]
 800ab56:	b003      	add	sp, #12
 800ab58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab5c:	f000 b8e2 	b.w	800ad24 <__malloc_unlock>
 800ab60:	42a3      	cmp	r3, r4
 800ab62:	d908      	bls.n	800ab76 <_free_r+0x46>
 800ab64:	6825      	ldr	r5, [r4, #0]
 800ab66:	1961      	adds	r1, r4, r5
 800ab68:	428b      	cmp	r3, r1
 800ab6a:	bf01      	itttt	eq
 800ab6c:	6819      	ldreq	r1, [r3, #0]
 800ab6e:	685b      	ldreq	r3, [r3, #4]
 800ab70:	1949      	addeq	r1, r1, r5
 800ab72:	6021      	streq	r1, [r4, #0]
 800ab74:	e7ed      	b.n	800ab52 <_free_r+0x22>
 800ab76:	461a      	mov	r2, r3
 800ab78:	685b      	ldr	r3, [r3, #4]
 800ab7a:	b10b      	cbz	r3, 800ab80 <_free_r+0x50>
 800ab7c:	42a3      	cmp	r3, r4
 800ab7e:	d9fa      	bls.n	800ab76 <_free_r+0x46>
 800ab80:	6811      	ldr	r1, [r2, #0]
 800ab82:	1855      	adds	r5, r2, r1
 800ab84:	42a5      	cmp	r5, r4
 800ab86:	d10b      	bne.n	800aba0 <_free_r+0x70>
 800ab88:	6824      	ldr	r4, [r4, #0]
 800ab8a:	4421      	add	r1, r4
 800ab8c:	1854      	adds	r4, r2, r1
 800ab8e:	42a3      	cmp	r3, r4
 800ab90:	6011      	str	r1, [r2, #0]
 800ab92:	d1e0      	bne.n	800ab56 <_free_r+0x26>
 800ab94:	681c      	ldr	r4, [r3, #0]
 800ab96:	685b      	ldr	r3, [r3, #4]
 800ab98:	6053      	str	r3, [r2, #4]
 800ab9a:	440c      	add	r4, r1
 800ab9c:	6014      	str	r4, [r2, #0]
 800ab9e:	e7da      	b.n	800ab56 <_free_r+0x26>
 800aba0:	d902      	bls.n	800aba8 <_free_r+0x78>
 800aba2:	230c      	movs	r3, #12
 800aba4:	6003      	str	r3, [r0, #0]
 800aba6:	e7d6      	b.n	800ab56 <_free_r+0x26>
 800aba8:	6825      	ldr	r5, [r4, #0]
 800abaa:	1961      	adds	r1, r4, r5
 800abac:	428b      	cmp	r3, r1
 800abae:	bf04      	itt	eq
 800abb0:	6819      	ldreq	r1, [r3, #0]
 800abb2:	685b      	ldreq	r3, [r3, #4]
 800abb4:	6063      	str	r3, [r4, #4]
 800abb6:	bf04      	itt	eq
 800abb8:	1949      	addeq	r1, r1, r5
 800abba:	6021      	streq	r1, [r4, #0]
 800abbc:	6054      	str	r4, [r2, #4]
 800abbe:	e7ca      	b.n	800ab56 <_free_r+0x26>
 800abc0:	b003      	add	sp, #12
 800abc2:	bd30      	pop	{r4, r5, pc}
 800abc4:	2000557c 	.word	0x2000557c

0800abc8 <malloc>:
 800abc8:	4b02      	ldr	r3, [pc, #8]	; (800abd4 <malloc+0xc>)
 800abca:	4601      	mov	r1, r0
 800abcc:	6818      	ldr	r0, [r3, #0]
 800abce:	f000 b823 	b.w	800ac18 <_malloc_r>
 800abd2:	bf00      	nop
 800abd4:	2000010c 	.word	0x2000010c

0800abd8 <sbrk_aligned>:
 800abd8:	b570      	push	{r4, r5, r6, lr}
 800abda:	4e0e      	ldr	r6, [pc, #56]	; (800ac14 <sbrk_aligned+0x3c>)
 800abdc:	460c      	mov	r4, r1
 800abde:	6831      	ldr	r1, [r6, #0]
 800abe0:	4605      	mov	r5, r0
 800abe2:	b911      	cbnz	r1, 800abea <sbrk_aligned+0x12>
 800abe4:	f001 f89e 	bl	800bd24 <_sbrk_r>
 800abe8:	6030      	str	r0, [r6, #0]
 800abea:	4621      	mov	r1, r4
 800abec:	4628      	mov	r0, r5
 800abee:	f001 f899 	bl	800bd24 <_sbrk_r>
 800abf2:	1c43      	adds	r3, r0, #1
 800abf4:	d00a      	beq.n	800ac0c <sbrk_aligned+0x34>
 800abf6:	1cc4      	adds	r4, r0, #3
 800abf8:	f024 0403 	bic.w	r4, r4, #3
 800abfc:	42a0      	cmp	r0, r4
 800abfe:	d007      	beq.n	800ac10 <sbrk_aligned+0x38>
 800ac00:	1a21      	subs	r1, r4, r0
 800ac02:	4628      	mov	r0, r5
 800ac04:	f001 f88e 	bl	800bd24 <_sbrk_r>
 800ac08:	3001      	adds	r0, #1
 800ac0a:	d101      	bne.n	800ac10 <sbrk_aligned+0x38>
 800ac0c:	f04f 34ff 	mov.w	r4, #4294967295
 800ac10:	4620      	mov	r0, r4
 800ac12:	bd70      	pop	{r4, r5, r6, pc}
 800ac14:	20005580 	.word	0x20005580

0800ac18 <_malloc_r>:
 800ac18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac1c:	1ccd      	adds	r5, r1, #3
 800ac1e:	f025 0503 	bic.w	r5, r5, #3
 800ac22:	3508      	adds	r5, #8
 800ac24:	2d0c      	cmp	r5, #12
 800ac26:	bf38      	it	cc
 800ac28:	250c      	movcc	r5, #12
 800ac2a:	2d00      	cmp	r5, #0
 800ac2c:	4607      	mov	r7, r0
 800ac2e:	db01      	blt.n	800ac34 <_malloc_r+0x1c>
 800ac30:	42a9      	cmp	r1, r5
 800ac32:	d905      	bls.n	800ac40 <_malloc_r+0x28>
 800ac34:	230c      	movs	r3, #12
 800ac36:	603b      	str	r3, [r7, #0]
 800ac38:	2600      	movs	r6, #0
 800ac3a:	4630      	mov	r0, r6
 800ac3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac40:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ad14 <_malloc_r+0xfc>
 800ac44:	f000 f868 	bl	800ad18 <__malloc_lock>
 800ac48:	f8d8 3000 	ldr.w	r3, [r8]
 800ac4c:	461c      	mov	r4, r3
 800ac4e:	bb5c      	cbnz	r4, 800aca8 <_malloc_r+0x90>
 800ac50:	4629      	mov	r1, r5
 800ac52:	4638      	mov	r0, r7
 800ac54:	f7ff ffc0 	bl	800abd8 <sbrk_aligned>
 800ac58:	1c43      	adds	r3, r0, #1
 800ac5a:	4604      	mov	r4, r0
 800ac5c:	d155      	bne.n	800ad0a <_malloc_r+0xf2>
 800ac5e:	f8d8 4000 	ldr.w	r4, [r8]
 800ac62:	4626      	mov	r6, r4
 800ac64:	2e00      	cmp	r6, #0
 800ac66:	d145      	bne.n	800acf4 <_malloc_r+0xdc>
 800ac68:	2c00      	cmp	r4, #0
 800ac6a:	d048      	beq.n	800acfe <_malloc_r+0xe6>
 800ac6c:	6823      	ldr	r3, [r4, #0]
 800ac6e:	4631      	mov	r1, r6
 800ac70:	4638      	mov	r0, r7
 800ac72:	eb04 0903 	add.w	r9, r4, r3
 800ac76:	f001 f855 	bl	800bd24 <_sbrk_r>
 800ac7a:	4581      	cmp	r9, r0
 800ac7c:	d13f      	bne.n	800acfe <_malloc_r+0xe6>
 800ac7e:	6821      	ldr	r1, [r4, #0]
 800ac80:	1a6d      	subs	r5, r5, r1
 800ac82:	4629      	mov	r1, r5
 800ac84:	4638      	mov	r0, r7
 800ac86:	f7ff ffa7 	bl	800abd8 <sbrk_aligned>
 800ac8a:	3001      	adds	r0, #1
 800ac8c:	d037      	beq.n	800acfe <_malloc_r+0xe6>
 800ac8e:	6823      	ldr	r3, [r4, #0]
 800ac90:	442b      	add	r3, r5
 800ac92:	6023      	str	r3, [r4, #0]
 800ac94:	f8d8 3000 	ldr.w	r3, [r8]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d038      	beq.n	800ad0e <_malloc_r+0xf6>
 800ac9c:	685a      	ldr	r2, [r3, #4]
 800ac9e:	42a2      	cmp	r2, r4
 800aca0:	d12b      	bne.n	800acfa <_malloc_r+0xe2>
 800aca2:	2200      	movs	r2, #0
 800aca4:	605a      	str	r2, [r3, #4]
 800aca6:	e00f      	b.n	800acc8 <_malloc_r+0xb0>
 800aca8:	6822      	ldr	r2, [r4, #0]
 800acaa:	1b52      	subs	r2, r2, r5
 800acac:	d41f      	bmi.n	800acee <_malloc_r+0xd6>
 800acae:	2a0b      	cmp	r2, #11
 800acb0:	d917      	bls.n	800ace2 <_malloc_r+0xca>
 800acb2:	1961      	adds	r1, r4, r5
 800acb4:	42a3      	cmp	r3, r4
 800acb6:	6025      	str	r5, [r4, #0]
 800acb8:	bf18      	it	ne
 800acba:	6059      	strne	r1, [r3, #4]
 800acbc:	6863      	ldr	r3, [r4, #4]
 800acbe:	bf08      	it	eq
 800acc0:	f8c8 1000 	streq.w	r1, [r8]
 800acc4:	5162      	str	r2, [r4, r5]
 800acc6:	604b      	str	r3, [r1, #4]
 800acc8:	4638      	mov	r0, r7
 800acca:	f104 060b 	add.w	r6, r4, #11
 800acce:	f000 f829 	bl	800ad24 <__malloc_unlock>
 800acd2:	f026 0607 	bic.w	r6, r6, #7
 800acd6:	1d23      	adds	r3, r4, #4
 800acd8:	1af2      	subs	r2, r6, r3
 800acda:	d0ae      	beq.n	800ac3a <_malloc_r+0x22>
 800acdc:	1b9b      	subs	r3, r3, r6
 800acde:	50a3      	str	r3, [r4, r2]
 800ace0:	e7ab      	b.n	800ac3a <_malloc_r+0x22>
 800ace2:	42a3      	cmp	r3, r4
 800ace4:	6862      	ldr	r2, [r4, #4]
 800ace6:	d1dd      	bne.n	800aca4 <_malloc_r+0x8c>
 800ace8:	f8c8 2000 	str.w	r2, [r8]
 800acec:	e7ec      	b.n	800acc8 <_malloc_r+0xb0>
 800acee:	4623      	mov	r3, r4
 800acf0:	6864      	ldr	r4, [r4, #4]
 800acf2:	e7ac      	b.n	800ac4e <_malloc_r+0x36>
 800acf4:	4634      	mov	r4, r6
 800acf6:	6876      	ldr	r6, [r6, #4]
 800acf8:	e7b4      	b.n	800ac64 <_malloc_r+0x4c>
 800acfa:	4613      	mov	r3, r2
 800acfc:	e7cc      	b.n	800ac98 <_malloc_r+0x80>
 800acfe:	230c      	movs	r3, #12
 800ad00:	603b      	str	r3, [r7, #0]
 800ad02:	4638      	mov	r0, r7
 800ad04:	f000 f80e 	bl	800ad24 <__malloc_unlock>
 800ad08:	e797      	b.n	800ac3a <_malloc_r+0x22>
 800ad0a:	6025      	str	r5, [r4, #0]
 800ad0c:	e7dc      	b.n	800acc8 <_malloc_r+0xb0>
 800ad0e:	605b      	str	r3, [r3, #4]
 800ad10:	deff      	udf	#255	; 0xff
 800ad12:	bf00      	nop
 800ad14:	2000557c 	.word	0x2000557c

0800ad18 <__malloc_lock>:
 800ad18:	4801      	ldr	r0, [pc, #4]	; (800ad20 <__malloc_lock+0x8>)
 800ad1a:	f7ff b904 	b.w	8009f26 <__retarget_lock_acquire_recursive>
 800ad1e:	bf00      	nop
 800ad20:	20005578 	.word	0x20005578

0800ad24 <__malloc_unlock>:
 800ad24:	4801      	ldr	r0, [pc, #4]	; (800ad2c <__malloc_unlock+0x8>)
 800ad26:	f7ff b8ff 	b.w	8009f28 <__retarget_lock_release_recursive>
 800ad2a:	bf00      	nop
 800ad2c:	20005578 	.word	0x20005578

0800ad30 <_Balloc>:
 800ad30:	b570      	push	{r4, r5, r6, lr}
 800ad32:	69c6      	ldr	r6, [r0, #28]
 800ad34:	4604      	mov	r4, r0
 800ad36:	460d      	mov	r5, r1
 800ad38:	b976      	cbnz	r6, 800ad58 <_Balloc+0x28>
 800ad3a:	2010      	movs	r0, #16
 800ad3c:	f7ff ff44 	bl	800abc8 <malloc>
 800ad40:	4602      	mov	r2, r0
 800ad42:	61e0      	str	r0, [r4, #28]
 800ad44:	b920      	cbnz	r0, 800ad50 <_Balloc+0x20>
 800ad46:	4b18      	ldr	r3, [pc, #96]	; (800ada8 <_Balloc+0x78>)
 800ad48:	4818      	ldr	r0, [pc, #96]	; (800adac <_Balloc+0x7c>)
 800ad4a:	216b      	movs	r1, #107	; 0x6b
 800ad4c:	f000 fffa 	bl	800bd44 <__assert_func>
 800ad50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad54:	6006      	str	r6, [r0, #0]
 800ad56:	60c6      	str	r6, [r0, #12]
 800ad58:	69e6      	ldr	r6, [r4, #28]
 800ad5a:	68f3      	ldr	r3, [r6, #12]
 800ad5c:	b183      	cbz	r3, 800ad80 <_Balloc+0x50>
 800ad5e:	69e3      	ldr	r3, [r4, #28]
 800ad60:	68db      	ldr	r3, [r3, #12]
 800ad62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ad66:	b9b8      	cbnz	r0, 800ad98 <_Balloc+0x68>
 800ad68:	2101      	movs	r1, #1
 800ad6a:	fa01 f605 	lsl.w	r6, r1, r5
 800ad6e:	1d72      	adds	r2, r6, #5
 800ad70:	0092      	lsls	r2, r2, #2
 800ad72:	4620      	mov	r0, r4
 800ad74:	f001 f804 	bl	800bd80 <_calloc_r>
 800ad78:	b160      	cbz	r0, 800ad94 <_Balloc+0x64>
 800ad7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ad7e:	e00e      	b.n	800ad9e <_Balloc+0x6e>
 800ad80:	2221      	movs	r2, #33	; 0x21
 800ad82:	2104      	movs	r1, #4
 800ad84:	4620      	mov	r0, r4
 800ad86:	f000 fffb 	bl	800bd80 <_calloc_r>
 800ad8a:	69e3      	ldr	r3, [r4, #28]
 800ad8c:	60f0      	str	r0, [r6, #12]
 800ad8e:	68db      	ldr	r3, [r3, #12]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d1e4      	bne.n	800ad5e <_Balloc+0x2e>
 800ad94:	2000      	movs	r0, #0
 800ad96:	bd70      	pop	{r4, r5, r6, pc}
 800ad98:	6802      	ldr	r2, [r0, #0]
 800ad9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ad9e:	2300      	movs	r3, #0
 800ada0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ada4:	e7f7      	b.n	800ad96 <_Balloc+0x66>
 800ada6:	bf00      	nop
 800ada8:	0800edce 	.word	0x0800edce
 800adac:	0800ee4e 	.word	0x0800ee4e

0800adb0 <_Bfree>:
 800adb0:	b570      	push	{r4, r5, r6, lr}
 800adb2:	69c6      	ldr	r6, [r0, #28]
 800adb4:	4605      	mov	r5, r0
 800adb6:	460c      	mov	r4, r1
 800adb8:	b976      	cbnz	r6, 800add8 <_Bfree+0x28>
 800adba:	2010      	movs	r0, #16
 800adbc:	f7ff ff04 	bl	800abc8 <malloc>
 800adc0:	4602      	mov	r2, r0
 800adc2:	61e8      	str	r0, [r5, #28]
 800adc4:	b920      	cbnz	r0, 800add0 <_Bfree+0x20>
 800adc6:	4b09      	ldr	r3, [pc, #36]	; (800adec <_Bfree+0x3c>)
 800adc8:	4809      	ldr	r0, [pc, #36]	; (800adf0 <_Bfree+0x40>)
 800adca:	218f      	movs	r1, #143	; 0x8f
 800adcc:	f000 ffba 	bl	800bd44 <__assert_func>
 800add0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800add4:	6006      	str	r6, [r0, #0]
 800add6:	60c6      	str	r6, [r0, #12]
 800add8:	b13c      	cbz	r4, 800adea <_Bfree+0x3a>
 800adda:	69eb      	ldr	r3, [r5, #28]
 800addc:	6862      	ldr	r2, [r4, #4]
 800adde:	68db      	ldr	r3, [r3, #12]
 800ade0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ade4:	6021      	str	r1, [r4, #0]
 800ade6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800adea:	bd70      	pop	{r4, r5, r6, pc}
 800adec:	0800edce 	.word	0x0800edce
 800adf0:	0800ee4e 	.word	0x0800ee4e

0800adf4 <__multadd>:
 800adf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adf8:	690d      	ldr	r5, [r1, #16]
 800adfa:	4607      	mov	r7, r0
 800adfc:	460c      	mov	r4, r1
 800adfe:	461e      	mov	r6, r3
 800ae00:	f101 0c14 	add.w	ip, r1, #20
 800ae04:	2000      	movs	r0, #0
 800ae06:	f8dc 3000 	ldr.w	r3, [ip]
 800ae0a:	b299      	uxth	r1, r3
 800ae0c:	fb02 6101 	mla	r1, r2, r1, r6
 800ae10:	0c1e      	lsrs	r6, r3, #16
 800ae12:	0c0b      	lsrs	r3, r1, #16
 800ae14:	fb02 3306 	mla	r3, r2, r6, r3
 800ae18:	b289      	uxth	r1, r1
 800ae1a:	3001      	adds	r0, #1
 800ae1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ae20:	4285      	cmp	r5, r0
 800ae22:	f84c 1b04 	str.w	r1, [ip], #4
 800ae26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ae2a:	dcec      	bgt.n	800ae06 <__multadd+0x12>
 800ae2c:	b30e      	cbz	r6, 800ae72 <__multadd+0x7e>
 800ae2e:	68a3      	ldr	r3, [r4, #8]
 800ae30:	42ab      	cmp	r3, r5
 800ae32:	dc19      	bgt.n	800ae68 <__multadd+0x74>
 800ae34:	6861      	ldr	r1, [r4, #4]
 800ae36:	4638      	mov	r0, r7
 800ae38:	3101      	adds	r1, #1
 800ae3a:	f7ff ff79 	bl	800ad30 <_Balloc>
 800ae3e:	4680      	mov	r8, r0
 800ae40:	b928      	cbnz	r0, 800ae4e <__multadd+0x5a>
 800ae42:	4602      	mov	r2, r0
 800ae44:	4b0c      	ldr	r3, [pc, #48]	; (800ae78 <__multadd+0x84>)
 800ae46:	480d      	ldr	r0, [pc, #52]	; (800ae7c <__multadd+0x88>)
 800ae48:	21ba      	movs	r1, #186	; 0xba
 800ae4a:	f000 ff7b 	bl	800bd44 <__assert_func>
 800ae4e:	6922      	ldr	r2, [r4, #16]
 800ae50:	3202      	adds	r2, #2
 800ae52:	f104 010c 	add.w	r1, r4, #12
 800ae56:	0092      	lsls	r2, r2, #2
 800ae58:	300c      	adds	r0, #12
 800ae5a:	f7ff f866 	bl	8009f2a <memcpy>
 800ae5e:	4621      	mov	r1, r4
 800ae60:	4638      	mov	r0, r7
 800ae62:	f7ff ffa5 	bl	800adb0 <_Bfree>
 800ae66:	4644      	mov	r4, r8
 800ae68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ae6c:	3501      	adds	r5, #1
 800ae6e:	615e      	str	r6, [r3, #20]
 800ae70:	6125      	str	r5, [r4, #16]
 800ae72:	4620      	mov	r0, r4
 800ae74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae78:	0800ee3d 	.word	0x0800ee3d
 800ae7c:	0800ee4e 	.word	0x0800ee4e

0800ae80 <__hi0bits>:
 800ae80:	0c03      	lsrs	r3, r0, #16
 800ae82:	041b      	lsls	r3, r3, #16
 800ae84:	b9d3      	cbnz	r3, 800aebc <__hi0bits+0x3c>
 800ae86:	0400      	lsls	r0, r0, #16
 800ae88:	2310      	movs	r3, #16
 800ae8a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ae8e:	bf04      	itt	eq
 800ae90:	0200      	lsleq	r0, r0, #8
 800ae92:	3308      	addeq	r3, #8
 800ae94:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ae98:	bf04      	itt	eq
 800ae9a:	0100      	lsleq	r0, r0, #4
 800ae9c:	3304      	addeq	r3, #4
 800ae9e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800aea2:	bf04      	itt	eq
 800aea4:	0080      	lsleq	r0, r0, #2
 800aea6:	3302      	addeq	r3, #2
 800aea8:	2800      	cmp	r0, #0
 800aeaa:	db05      	blt.n	800aeb8 <__hi0bits+0x38>
 800aeac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800aeb0:	f103 0301 	add.w	r3, r3, #1
 800aeb4:	bf08      	it	eq
 800aeb6:	2320      	moveq	r3, #32
 800aeb8:	4618      	mov	r0, r3
 800aeba:	4770      	bx	lr
 800aebc:	2300      	movs	r3, #0
 800aebe:	e7e4      	b.n	800ae8a <__hi0bits+0xa>

0800aec0 <__lo0bits>:
 800aec0:	6803      	ldr	r3, [r0, #0]
 800aec2:	f013 0207 	ands.w	r2, r3, #7
 800aec6:	d00c      	beq.n	800aee2 <__lo0bits+0x22>
 800aec8:	07d9      	lsls	r1, r3, #31
 800aeca:	d422      	bmi.n	800af12 <__lo0bits+0x52>
 800aecc:	079a      	lsls	r2, r3, #30
 800aece:	bf49      	itett	mi
 800aed0:	085b      	lsrmi	r3, r3, #1
 800aed2:	089b      	lsrpl	r3, r3, #2
 800aed4:	6003      	strmi	r3, [r0, #0]
 800aed6:	2201      	movmi	r2, #1
 800aed8:	bf5c      	itt	pl
 800aeda:	6003      	strpl	r3, [r0, #0]
 800aedc:	2202      	movpl	r2, #2
 800aede:	4610      	mov	r0, r2
 800aee0:	4770      	bx	lr
 800aee2:	b299      	uxth	r1, r3
 800aee4:	b909      	cbnz	r1, 800aeea <__lo0bits+0x2a>
 800aee6:	0c1b      	lsrs	r3, r3, #16
 800aee8:	2210      	movs	r2, #16
 800aeea:	b2d9      	uxtb	r1, r3
 800aeec:	b909      	cbnz	r1, 800aef2 <__lo0bits+0x32>
 800aeee:	3208      	adds	r2, #8
 800aef0:	0a1b      	lsrs	r3, r3, #8
 800aef2:	0719      	lsls	r1, r3, #28
 800aef4:	bf04      	itt	eq
 800aef6:	091b      	lsreq	r3, r3, #4
 800aef8:	3204      	addeq	r2, #4
 800aefa:	0799      	lsls	r1, r3, #30
 800aefc:	bf04      	itt	eq
 800aefe:	089b      	lsreq	r3, r3, #2
 800af00:	3202      	addeq	r2, #2
 800af02:	07d9      	lsls	r1, r3, #31
 800af04:	d403      	bmi.n	800af0e <__lo0bits+0x4e>
 800af06:	085b      	lsrs	r3, r3, #1
 800af08:	f102 0201 	add.w	r2, r2, #1
 800af0c:	d003      	beq.n	800af16 <__lo0bits+0x56>
 800af0e:	6003      	str	r3, [r0, #0]
 800af10:	e7e5      	b.n	800aede <__lo0bits+0x1e>
 800af12:	2200      	movs	r2, #0
 800af14:	e7e3      	b.n	800aede <__lo0bits+0x1e>
 800af16:	2220      	movs	r2, #32
 800af18:	e7e1      	b.n	800aede <__lo0bits+0x1e>
	...

0800af1c <__i2b>:
 800af1c:	b510      	push	{r4, lr}
 800af1e:	460c      	mov	r4, r1
 800af20:	2101      	movs	r1, #1
 800af22:	f7ff ff05 	bl	800ad30 <_Balloc>
 800af26:	4602      	mov	r2, r0
 800af28:	b928      	cbnz	r0, 800af36 <__i2b+0x1a>
 800af2a:	4b05      	ldr	r3, [pc, #20]	; (800af40 <__i2b+0x24>)
 800af2c:	4805      	ldr	r0, [pc, #20]	; (800af44 <__i2b+0x28>)
 800af2e:	f240 1145 	movw	r1, #325	; 0x145
 800af32:	f000 ff07 	bl	800bd44 <__assert_func>
 800af36:	2301      	movs	r3, #1
 800af38:	6144      	str	r4, [r0, #20]
 800af3a:	6103      	str	r3, [r0, #16]
 800af3c:	bd10      	pop	{r4, pc}
 800af3e:	bf00      	nop
 800af40:	0800ee3d 	.word	0x0800ee3d
 800af44:	0800ee4e 	.word	0x0800ee4e

0800af48 <__multiply>:
 800af48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af4c:	4691      	mov	r9, r2
 800af4e:	690a      	ldr	r2, [r1, #16]
 800af50:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800af54:	429a      	cmp	r2, r3
 800af56:	bfb8      	it	lt
 800af58:	460b      	movlt	r3, r1
 800af5a:	460c      	mov	r4, r1
 800af5c:	bfbc      	itt	lt
 800af5e:	464c      	movlt	r4, r9
 800af60:	4699      	movlt	r9, r3
 800af62:	6927      	ldr	r7, [r4, #16]
 800af64:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800af68:	68a3      	ldr	r3, [r4, #8]
 800af6a:	6861      	ldr	r1, [r4, #4]
 800af6c:	eb07 060a 	add.w	r6, r7, sl
 800af70:	42b3      	cmp	r3, r6
 800af72:	b085      	sub	sp, #20
 800af74:	bfb8      	it	lt
 800af76:	3101      	addlt	r1, #1
 800af78:	f7ff feda 	bl	800ad30 <_Balloc>
 800af7c:	b930      	cbnz	r0, 800af8c <__multiply+0x44>
 800af7e:	4602      	mov	r2, r0
 800af80:	4b44      	ldr	r3, [pc, #272]	; (800b094 <__multiply+0x14c>)
 800af82:	4845      	ldr	r0, [pc, #276]	; (800b098 <__multiply+0x150>)
 800af84:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800af88:	f000 fedc 	bl	800bd44 <__assert_func>
 800af8c:	f100 0514 	add.w	r5, r0, #20
 800af90:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800af94:	462b      	mov	r3, r5
 800af96:	2200      	movs	r2, #0
 800af98:	4543      	cmp	r3, r8
 800af9a:	d321      	bcc.n	800afe0 <__multiply+0x98>
 800af9c:	f104 0314 	add.w	r3, r4, #20
 800afa0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800afa4:	f109 0314 	add.w	r3, r9, #20
 800afa8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800afac:	9202      	str	r2, [sp, #8]
 800afae:	1b3a      	subs	r2, r7, r4
 800afb0:	3a15      	subs	r2, #21
 800afb2:	f022 0203 	bic.w	r2, r2, #3
 800afb6:	3204      	adds	r2, #4
 800afb8:	f104 0115 	add.w	r1, r4, #21
 800afbc:	428f      	cmp	r7, r1
 800afbe:	bf38      	it	cc
 800afc0:	2204      	movcc	r2, #4
 800afc2:	9201      	str	r2, [sp, #4]
 800afc4:	9a02      	ldr	r2, [sp, #8]
 800afc6:	9303      	str	r3, [sp, #12]
 800afc8:	429a      	cmp	r2, r3
 800afca:	d80c      	bhi.n	800afe6 <__multiply+0x9e>
 800afcc:	2e00      	cmp	r6, #0
 800afce:	dd03      	ble.n	800afd8 <__multiply+0x90>
 800afd0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d05b      	beq.n	800b090 <__multiply+0x148>
 800afd8:	6106      	str	r6, [r0, #16]
 800afda:	b005      	add	sp, #20
 800afdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afe0:	f843 2b04 	str.w	r2, [r3], #4
 800afe4:	e7d8      	b.n	800af98 <__multiply+0x50>
 800afe6:	f8b3 a000 	ldrh.w	sl, [r3]
 800afea:	f1ba 0f00 	cmp.w	sl, #0
 800afee:	d024      	beq.n	800b03a <__multiply+0xf2>
 800aff0:	f104 0e14 	add.w	lr, r4, #20
 800aff4:	46a9      	mov	r9, r5
 800aff6:	f04f 0c00 	mov.w	ip, #0
 800affa:	f85e 2b04 	ldr.w	r2, [lr], #4
 800affe:	f8d9 1000 	ldr.w	r1, [r9]
 800b002:	fa1f fb82 	uxth.w	fp, r2
 800b006:	b289      	uxth	r1, r1
 800b008:	fb0a 110b 	mla	r1, sl, fp, r1
 800b00c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b010:	f8d9 2000 	ldr.w	r2, [r9]
 800b014:	4461      	add	r1, ip
 800b016:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b01a:	fb0a c20b 	mla	r2, sl, fp, ip
 800b01e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b022:	b289      	uxth	r1, r1
 800b024:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b028:	4577      	cmp	r7, lr
 800b02a:	f849 1b04 	str.w	r1, [r9], #4
 800b02e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b032:	d8e2      	bhi.n	800affa <__multiply+0xb2>
 800b034:	9a01      	ldr	r2, [sp, #4]
 800b036:	f845 c002 	str.w	ip, [r5, r2]
 800b03a:	9a03      	ldr	r2, [sp, #12]
 800b03c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b040:	3304      	adds	r3, #4
 800b042:	f1b9 0f00 	cmp.w	r9, #0
 800b046:	d021      	beq.n	800b08c <__multiply+0x144>
 800b048:	6829      	ldr	r1, [r5, #0]
 800b04a:	f104 0c14 	add.w	ip, r4, #20
 800b04e:	46ae      	mov	lr, r5
 800b050:	f04f 0a00 	mov.w	sl, #0
 800b054:	f8bc b000 	ldrh.w	fp, [ip]
 800b058:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b05c:	fb09 220b 	mla	r2, r9, fp, r2
 800b060:	4452      	add	r2, sl
 800b062:	b289      	uxth	r1, r1
 800b064:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b068:	f84e 1b04 	str.w	r1, [lr], #4
 800b06c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b070:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b074:	f8be 1000 	ldrh.w	r1, [lr]
 800b078:	fb09 110a 	mla	r1, r9, sl, r1
 800b07c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b080:	4567      	cmp	r7, ip
 800b082:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b086:	d8e5      	bhi.n	800b054 <__multiply+0x10c>
 800b088:	9a01      	ldr	r2, [sp, #4]
 800b08a:	50a9      	str	r1, [r5, r2]
 800b08c:	3504      	adds	r5, #4
 800b08e:	e799      	b.n	800afc4 <__multiply+0x7c>
 800b090:	3e01      	subs	r6, #1
 800b092:	e79b      	b.n	800afcc <__multiply+0x84>
 800b094:	0800ee3d 	.word	0x0800ee3d
 800b098:	0800ee4e 	.word	0x0800ee4e

0800b09c <__pow5mult>:
 800b09c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0a0:	4615      	mov	r5, r2
 800b0a2:	f012 0203 	ands.w	r2, r2, #3
 800b0a6:	4606      	mov	r6, r0
 800b0a8:	460f      	mov	r7, r1
 800b0aa:	d007      	beq.n	800b0bc <__pow5mult+0x20>
 800b0ac:	4c25      	ldr	r4, [pc, #148]	; (800b144 <__pow5mult+0xa8>)
 800b0ae:	3a01      	subs	r2, #1
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b0b6:	f7ff fe9d 	bl	800adf4 <__multadd>
 800b0ba:	4607      	mov	r7, r0
 800b0bc:	10ad      	asrs	r5, r5, #2
 800b0be:	d03d      	beq.n	800b13c <__pow5mult+0xa0>
 800b0c0:	69f4      	ldr	r4, [r6, #28]
 800b0c2:	b97c      	cbnz	r4, 800b0e4 <__pow5mult+0x48>
 800b0c4:	2010      	movs	r0, #16
 800b0c6:	f7ff fd7f 	bl	800abc8 <malloc>
 800b0ca:	4602      	mov	r2, r0
 800b0cc:	61f0      	str	r0, [r6, #28]
 800b0ce:	b928      	cbnz	r0, 800b0dc <__pow5mult+0x40>
 800b0d0:	4b1d      	ldr	r3, [pc, #116]	; (800b148 <__pow5mult+0xac>)
 800b0d2:	481e      	ldr	r0, [pc, #120]	; (800b14c <__pow5mult+0xb0>)
 800b0d4:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b0d8:	f000 fe34 	bl	800bd44 <__assert_func>
 800b0dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b0e0:	6004      	str	r4, [r0, #0]
 800b0e2:	60c4      	str	r4, [r0, #12]
 800b0e4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b0e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b0ec:	b94c      	cbnz	r4, 800b102 <__pow5mult+0x66>
 800b0ee:	f240 2171 	movw	r1, #625	; 0x271
 800b0f2:	4630      	mov	r0, r6
 800b0f4:	f7ff ff12 	bl	800af1c <__i2b>
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	f8c8 0008 	str.w	r0, [r8, #8]
 800b0fe:	4604      	mov	r4, r0
 800b100:	6003      	str	r3, [r0, #0]
 800b102:	f04f 0900 	mov.w	r9, #0
 800b106:	07eb      	lsls	r3, r5, #31
 800b108:	d50a      	bpl.n	800b120 <__pow5mult+0x84>
 800b10a:	4639      	mov	r1, r7
 800b10c:	4622      	mov	r2, r4
 800b10e:	4630      	mov	r0, r6
 800b110:	f7ff ff1a 	bl	800af48 <__multiply>
 800b114:	4639      	mov	r1, r7
 800b116:	4680      	mov	r8, r0
 800b118:	4630      	mov	r0, r6
 800b11a:	f7ff fe49 	bl	800adb0 <_Bfree>
 800b11e:	4647      	mov	r7, r8
 800b120:	106d      	asrs	r5, r5, #1
 800b122:	d00b      	beq.n	800b13c <__pow5mult+0xa0>
 800b124:	6820      	ldr	r0, [r4, #0]
 800b126:	b938      	cbnz	r0, 800b138 <__pow5mult+0x9c>
 800b128:	4622      	mov	r2, r4
 800b12a:	4621      	mov	r1, r4
 800b12c:	4630      	mov	r0, r6
 800b12e:	f7ff ff0b 	bl	800af48 <__multiply>
 800b132:	6020      	str	r0, [r4, #0]
 800b134:	f8c0 9000 	str.w	r9, [r0]
 800b138:	4604      	mov	r4, r0
 800b13a:	e7e4      	b.n	800b106 <__pow5mult+0x6a>
 800b13c:	4638      	mov	r0, r7
 800b13e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b142:	bf00      	nop
 800b144:	0800ef98 	.word	0x0800ef98
 800b148:	0800edce 	.word	0x0800edce
 800b14c:	0800ee4e 	.word	0x0800ee4e

0800b150 <__lshift>:
 800b150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b154:	460c      	mov	r4, r1
 800b156:	6849      	ldr	r1, [r1, #4]
 800b158:	6923      	ldr	r3, [r4, #16]
 800b15a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b15e:	68a3      	ldr	r3, [r4, #8]
 800b160:	4607      	mov	r7, r0
 800b162:	4691      	mov	r9, r2
 800b164:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b168:	f108 0601 	add.w	r6, r8, #1
 800b16c:	42b3      	cmp	r3, r6
 800b16e:	db0b      	blt.n	800b188 <__lshift+0x38>
 800b170:	4638      	mov	r0, r7
 800b172:	f7ff fddd 	bl	800ad30 <_Balloc>
 800b176:	4605      	mov	r5, r0
 800b178:	b948      	cbnz	r0, 800b18e <__lshift+0x3e>
 800b17a:	4602      	mov	r2, r0
 800b17c:	4b28      	ldr	r3, [pc, #160]	; (800b220 <__lshift+0xd0>)
 800b17e:	4829      	ldr	r0, [pc, #164]	; (800b224 <__lshift+0xd4>)
 800b180:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b184:	f000 fdde 	bl	800bd44 <__assert_func>
 800b188:	3101      	adds	r1, #1
 800b18a:	005b      	lsls	r3, r3, #1
 800b18c:	e7ee      	b.n	800b16c <__lshift+0x1c>
 800b18e:	2300      	movs	r3, #0
 800b190:	f100 0114 	add.w	r1, r0, #20
 800b194:	f100 0210 	add.w	r2, r0, #16
 800b198:	4618      	mov	r0, r3
 800b19a:	4553      	cmp	r3, sl
 800b19c:	db33      	blt.n	800b206 <__lshift+0xb6>
 800b19e:	6920      	ldr	r0, [r4, #16]
 800b1a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b1a4:	f104 0314 	add.w	r3, r4, #20
 800b1a8:	f019 091f 	ands.w	r9, r9, #31
 800b1ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b1b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b1b4:	d02b      	beq.n	800b20e <__lshift+0xbe>
 800b1b6:	f1c9 0e20 	rsb	lr, r9, #32
 800b1ba:	468a      	mov	sl, r1
 800b1bc:	2200      	movs	r2, #0
 800b1be:	6818      	ldr	r0, [r3, #0]
 800b1c0:	fa00 f009 	lsl.w	r0, r0, r9
 800b1c4:	4310      	orrs	r0, r2
 800b1c6:	f84a 0b04 	str.w	r0, [sl], #4
 800b1ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1ce:	459c      	cmp	ip, r3
 800b1d0:	fa22 f20e 	lsr.w	r2, r2, lr
 800b1d4:	d8f3      	bhi.n	800b1be <__lshift+0x6e>
 800b1d6:	ebac 0304 	sub.w	r3, ip, r4
 800b1da:	3b15      	subs	r3, #21
 800b1dc:	f023 0303 	bic.w	r3, r3, #3
 800b1e0:	3304      	adds	r3, #4
 800b1e2:	f104 0015 	add.w	r0, r4, #21
 800b1e6:	4584      	cmp	ip, r0
 800b1e8:	bf38      	it	cc
 800b1ea:	2304      	movcc	r3, #4
 800b1ec:	50ca      	str	r2, [r1, r3]
 800b1ee:	b10a      	cbz	r2, 800b1f4 <__lshift+0xa4>
 800b1f0:	f108 0602 	add.w	r6, r8, #2
 800b1f4:	3e01      	subs	r6, #1
 800b1f6:	4638      	mov	r0, r7
 800b1f8:	612e      	str	r6, [r5, #16]
 800b1fa:	4621      	mov	r1, r4
 800b1fc:	f7ff fdd8 	bl	800adb0 <_Bfree>
 800b200:	4628      	mov	r0, r5
 800b202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b206:	f842 0f04 	str.w	r0, [r2, #4]!
 800b20a:	3301      	adds	r3, #1
 800b20c:	e7c5      	b.n	800b19a <__lshift+0x4a>
 800b20e:	3904      	subs	r1, #4
 800b210:	f853 2b04 	ldr.w	r2, [r3], #4
 800b214:	f841 2f04 	str.w	r2, [r1, #4]!
 800b218:	459c      	cmp	ip, r3
 800b21a:	d8f9      	bhi.n	800b210 <__lshift+0xc0>
 800b21c:	e7ea      	b.n	800b1f4 <__lshift+0xa4>
 800b21e:	bf00      	nop
 800b220:	0800ee3d 	.word	0x0800ee3d
 800b224:	0800ee4e 	.word	0x0800ee4e

0800b228 <__mcmp>:
 800b228:	b530      	push	{r4, r5, lr}
 800b22a:	6902      	ldr	r2, [r0, #16]
 800b22c:	690c      	ldr	r4, [r1, #16]
 800b22e:	1b12      	subs	r2, r2, r4
 800b230:	d10e      	bne.n	800b250 <__mcmp+0x28>
 800b232:	f100 0314 	add.w	r3, r0, #20
 800b236:	3114      	adds	r1, #20
 800b238:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b23c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b240:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b244:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b248:	42a5      	cmp	r5, r4
 800b24a:	d003      	beq.n	800b254 <__mcmp+0x2c>
 800b24c:	d305      	bcc.n	800b25a <__mcmp+0x32>
 800b24e:	2201      	movs	r2, #1
 800b250:	4610      	mov	r0, r2
 800b252:	bd30      	pop	{r4, r5, pc}
 800b254:	4283      	cmp	r3, r0
 800b256:	d3f3      	bcc.n	800b240 <__mcmp+0x18>
 800b258:	e7fa      	b.n	800b250 <__mcmp+0x28>
 800b25a:	f04f 32ff 	mov.w	r2, #4294967295
 800b25e:	e7f7      	b.n	800b250 <__mcmp+0x28>

0800b260 <__mdiff>:
 800b260:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b264:	460c      	mov	r4, r1
 800b266:	4606      	mov	r6, r0
 800b268:	4611      	mov	r1, r2
 800b26a:	4620      	mov	r0, r4
 800b26c:	4690      	mov	r8, r2
 800b26e:	f7ff ffdb 	bl	800b228 <__mcmp>
 800b272:	1e05      	subs	r5, r0, #0
 800b274:	d110      	bne.n	800b298 <__mdiff+0x38>
 800b276:	4629      	mov	r1, r5
 800b278:	4630      	mov	r0, r6
 800b27a:	f7ff fd59 	bl	800ad30 <_Balloc>
 800b27e:	b930      	cbnz	r0, 800b28e <__mdiff+0x2e>
 800b280:	4b3a      	ldr	r3, [pc, #232]	; (800b36c <__mdiff+0x10c>)
 800b282:	4602      	mov	r2, r0
 800b284:	f240 2137 	movw	r1, #567	; 0x237
 800b288:	4839      	ldr	r0, [pc, #228]	; (800b370 <__mdiff+0x110>)
 800b28a:	f000 fd5b 	bl	800bd44 <__assert_func>
 800b28e:	2301      	movs	r3, #1
 800b290:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b294:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b298:	bfa4      	itt	ge
 800b29a:	4643      	movge	r3, r8
 800b29c:	46a0      	movge	r8, r4
 800b29e:	4630      	mov	r0, r6
 800b2a0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b2a4:	bfa6      	itte	ge
 800b2a6:	461c      	movge	r4, r3
 800b2a8:	2500      	movge	r5, #0
 800b2aa:	2501      	movlt	r5, #1
 800b2ac:	f7ff fd40 	bl	800ad30 <_Balloc>
 800b2b0:	b920      	cbnz	r0, 800b2bc <__mdiff+0x5c>
 800b2b2:	4b2e      	ldr	r3, [pc, #184]	; (800b36c <__mdiff+0x10c>)
 800b2b4:	4602      	mov	r2, r0
 800b2b6:	f240 2145 	movw	r1, #581	; 0x245
 800b2ba:	e7e5      	b.n	800b288 <__mdiff+0x28>
 800b2bc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b2c0:	6926      	ldr	r6, [r4, #16]
 800b2c2:	60c5      	str	r5, [r0, #12]
 800b2c4:	f104 0914 	add.w	r9, r4, #20
 800b2c8:	f108 0514 	add.w	r5, r8, #20
 800b2cc:	f100 0e14 	add.w	lr, r0, #20
 800b2d0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b2d4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b2d8:	f108 0210 	add.w	r2, r8, #16
 800b2dc:	46f2      	mov	sl, lr
 800b2de:	2100      	movs	r1, #0
 800b2e0:	f859 3b04 	ldr.w	r3, [r9], #4
 800b2e4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b2e8:	fa11 f88b 	uxtah	r8, r1, fp
 800b2ec:	b299      	uxth	r1, r3
 800b2ee:	0c1b      	lsrs	r3, r3, #16
 800b2f0:	eba8 0801 	sub.w	r8, r8, r1
 800b2f4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b2f8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b2fc:	fa1f f888 	uxth.w	r8, r8
 800b300:	1419      	asrs	r1, r3, #16
 800b302:	454e      	cmp	r6, r9
 800b304:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b308:	f84a 3b04 	str.w	r3, [sl], #4
 800b30c:	d8e8      	bhi.n	800b2e0 <__mdiff+0x80>
 800b30e:	1b33      	subs	r3, r6, r4
 800b310:	3b15      	subs	r3, #21
 800b312:	f023 0303 	bic.w	r3, r3, #3
 800b316:	3304      	adds	r3, #4
 800b318:	3415      	adds	r4, #21
 800b31a:	42a6      	cmp	r6, r4
 800b31c:	bf38      	it	cc
 800b31e:	2304      	movcc	r3, #4
 800b320:	441d      	add	r5, r3
 800b322:	4473      	add	r3, lr
 800b324:	469e      	mov	lr, r3
 800b326:	462e      	mov	r6, r5
 800b328:	4566      	cmp	r6, ip
 800b32a:	d30e      	bcc.n	800b34a <__mdiff+0xea>
 800b32c:	f10c 0203 	add.w	r2, ip, #3
 800b330:	1b52      	subs	r2, r2, r5
 800b332:	f022 0203 	bic.w	r2, r2, #3
 800b336:	3d03      	subs	r5, #3
 800b338:	45ac      	cmp	ip, r5
 800b33a:	bf38      	it	cc
 800b33c:	2200      	movcc	r2, #0
 800b33e:	4413      	add	r3, r2
 800b340:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b344:	b17a      	cbz	r2, 800b366 <__mdiff+0x106>
 800b346:	6107      	str	r7, [r0, #16]
 800b348:	e7a4      	b.n	800b294 <__mdiff+0x34>
 800b34a:	f856 8b04 	ldr.w	r8, [r6], #4
 800b34e:	fa11 f288 	uxtah	r2, r1, r8
 800b352:	1414      	asrs	r4, r2, #16
 800b354:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b358:	b292      	uxth	r2, r2
 800b35a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b35e:	f84e 2b04 	str.w	r2, [lr], #4
 800b362:	1421      	asrs	r1, r4, #16
 800b364:	e7e0      	b.n	800b328 <__mdiff+0xc8>
 800b366:	3f01      	subs	r7, #1
 800b368:	e7ea      	b.n	800b340 <__mdiff+0xe0>
 800b36a:	bf00      	nop
 800b36c:	0800ee3d 	.word	0x0800ee3d
 800b370:	0800ee4e 	.word	0x0800ee4e

0800b374 <__d2b>:
 800b374:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b378:	460f      	mov	r7, r1
 800b37a:	2101      	movs	r1, #1
 800b37c:	ec59 8b10 	vmov	r8, r9, d0
 800b380:	4616      	mov	r6, r2
 800b382:	f7ff fcd5 	bl	800ad30 <_Balloc>
 800b386:	4604      	mov	r4, r0
 800b388:	b930      	cbnz	r0, 800b398 <__d2b+0x24>
 800b38a:	4602      	mov	r2, r0
 800b38c:	4b24      	ldr	r3, [pc, #144]	; (800b420 <__d2b+0xac>)
 800b38e:	4825      	ldr	r0, [pc, #148]	; (800b424 <__d2b+0xb0>)
 800b390:	f240 310f 	movw	r1, #783	; 0x30f
 800b394:	f000 fcd6 	bl	800bd44 <__assert_func>
 800b398:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b39c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b3a0:	bb2d      	cbnz	r5, 800b3ee <__d2b+0x7a>
 800b3a2:	9301      	str	r3, [sp, #4]
 800b3a4:	f1b8 0300 	subs.w	r3, r8, #0
 800b3a8:	d026      	beq.n	800b3f8 <__d2b+0x84>
 800b3aa:	4668      	mov	r0, sp
 800b3ac:	9300      	str	r3, [sp, #0]
 800b3ae:	f7ff fd87 	bl	800aec0 <__lo0bits>
 800b3b2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b3b6:	b1e8      	cbz	r0, 800b3f4 <__d2b+0x80>
 800b3b8:	f1c0 0320 	rsb	r3, r0, #32
 800b3bc:	fa02 f303 	lsl.w	r3, r2, r3
 800b3c0:	430b      	orrs	r3, r1
 800b3c2:	40c2      	lsrs	r2, r0
 800b3c4:	6163      	str	r3, [r4, #20]
 800b3c6:	9201      	str	r2, [sp, #4]
 800b3c8:	9b01      	ldr	r3, [sp, #4]
 800b3ca:	61a3      	str	r3, [r4, #24]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	bf14      	ite	ne
 800b3d0:	2202      	movne	r2, #2
 800b3d2:	2201      	moveq	r2, #1
 800b3d4:	6122      	str	r2, [r4, #16]
 800b3d6:	b1bd      	cbz	r5, 800b408 <__d2b+0x94>
 800b3d8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b3dc:	4405      	add	r5, r0
 800b3de:	603d      	str	r5, [r7, #0]
 800b3e0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b3e4:	6030      	str	r0, [r6, #0]
 800b3e6:	4620      	mov	r0, r4
 800b3e8:	b003      	add	sp, #12
 800b3ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b3ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b3f2:	e7d6      	b.n	800b3a2 <__d2b+0x2e>
 800b3f4:	6161      	str	r1, [r4, #20]
 800b3f6:	e7e7      	b.n	800b3c8 <__d2b+0x54>
 800b3f8:	a801      	add	r0, sp, #4
 800b3fa:	f7ff fd61 	bl	800aec0 <__lo0bits>
 800b3fe:	9b01      	ldr	r3, [sp, #4]
 800b400:	6163      	str	r3, [r4, #20]
 800b402:	3020      	adds	r0, #32
 800b404:	2201      	movs	r2, #1
 800b406:	e7e5      	b.n	800b3d4 <__d2b+0x60>
 800b408:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b40c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b410:	6038      	str	r0, [r7, #0]
 800b412:	6918      	ldr	r0, [r3, #16]
 800b414:	f7ff fd34 	bl	800ae80 <__hi0bits>
 800b418:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b41c:	e7e2      	b.n	800b3e4 <__d2b+0x70>
 800b41e:	bf00      	nop
 800b420:	0800ee3d 	.word	0x0800ee3d
 800b424:	0800ee4e 	.word	0x0800ee4e

0800b428 <__ssputs_r>:
 800b428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b42c:	688e      	ldr	r6, [r1, #8]
 800b42e:	461f      	mov	r7, r3
 800b430:	42be      	cmp	r6, r7
 800b432:	680b      	ldr	r3, [r1, #0]
 800b434:	4682      	mov	sl, r0
 800b436:	460c      	mov	r4, r1
 800b438:	4690      	mov	r8, r2
 800b43a:	d82c      	bhi.n	800b496 <__ssputs_r+0x6e>
 800b43c:	898a      	ldrh	r2, [r1, #12]
 800b43e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b442:	d026      	beq.n	800b492 <__ssputs_r+0x6a>
 800b444:	6965      	ldr	r5, [r4, #20]
 800b446:	6909      	ldr	r1, [r1, #16]
 800b448:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b44c:	eba3 0901 	sub.w	r9, r3, r1
 800b450:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b454:	1c7b      	adds	r3, r7, #1
 800b456:	444b      	add	r3, r9
 800b458:	106d      	asrs	r5, r5, #1
 800b45a:	429d      	cmp	r5, r3
 800b45c:	bf38      	it	cc
 800b45e:	461d      	movcc	r5, r3
 800b460:	0553      	lsls	r3, r2, #21
 800b462:	d527      	bpl.n	800b4b4 <__ssputs_r+0x8c>
 800b464:	4629      	mov	r1, r5
 800b466:	f7ff fbd7 	bl	800ac18 <_malloc_r>
 800b46a:	4606      	mov	r6, r0
 800b46c:	b360      	cbz	r0, 800b4c8 <__ssputs_r+0xa0>
 800b46e:	6921      	ldr	r1, [r4, #16]
 800b470:	464a      	mov	r2, r9
 800b472:	f7fe fd5a 	bl	8009f2a <memcpy>
 800b476:	89a3      	ldrh	r3, [r4, #12]
 800b478:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b47c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b480:	81a3      	strh	r3, [r4, #12]
 800b482:	6126      	str	r6, [r4, #16]
 800b484:	6165      	str	r5, [r4, #20]
 800b486:	444e      	add	r6, r9
 800b488:	eba5 0509 	sub.w	r5, r5, r9
 800b48c:	6026      	str	r6, [r4, #0]
 800b48e:	60a5      	str	r5, [r4, #8]
 800b490:	463e      	mov	r6, r7
 800b492:	42be      	cmp	r6, r7
 800b494:	d900      	bls.n	800b498 <__ssputs_r+0x70>
 800b496:	463e      	mov	r6, r7
 800b498:	6820      	ldr	r0, [r4, #0]
 800b49a:	4632      	mov	r2, r6
 800b49c:	4641      	mov	r1, r8
 800b49e:	f000 fc05 	bl	800bcac <memmove>
 800b4a2:	68a3      	ldr	r3, [r4, #8]
 800b4a4:	1b9b      	subs	r3, r3, r6
 800b4a6:	60a3      	str	r3, [r4, #8]
 800b4a8:	6823      	ldr	r3, [r4, #0]
 800b4aa:	4433      	add	r3, r6
 800b4ac:	6023      	str	r3, [r4, #0]
 800b4ae:	2000      	movs	r0, #0
 800b4b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4b4:	462a      	mov	r2, r5
 800b4b6:	f000 fc8b 	bl	800bdd0 <_realloc_r>
 800b4ba:	4606      	mov	r6, r0
 800b4bc:	2800      	cmp	r0, #0
 800b4be:	d1e0      	bne.n	800b482 <__ssputs_r+0x5a>
 800b4c0:	6921      	ldr	r1, [r4, #16]
 800b4c2:	4650      	mov	r0, sl
 800b4c4:	f7ff fb34 	bl	800ab30 <_free_r>
 800b4c8:	230c      	movs	r3, #12
 800b4ca:	f8ca 3000 	str.w	r3, [sl]
 800b4ce:	89a3      	ldrh	r3, [r4, #12]
 800b4d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4d4:	81a3      	strh	r3, [r4, #12]
 800b4d6:	f04f 30ff 	mov.w	r0, #4294967295
 800b4da:	e7e9      	b.n	800b4b0 <__ssputs_r+0x88>

0800b4dc <_svfiprintf_r>:
 800b4dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4e0:	4698      	mov	r8, r3
 800b4e2:	898b      	ldrh	r3, [r1, #12]
 800b4e4:	061b      	lsls	r3, r3, #24
 800b4e6:	b09d      	sub	sp, #116	; 0x74
 800b4e8:	4607      	mov	r7, r0
 800b4ea:	460d      	mov	r5, r1
 800b4ec:	4614      	mov	r4, r2
 800b4ee:	d50e      	bpl.n	800b50e <_svfiprintf_r+0x32>
 800b4f0:	690b      	ldr	r3, [r1, #16]
 800b4f2:	b963      	cbnz	r3, 800b50e <_svfiprintf_r+0x32>
 800b4f4:	2140      	movs	r1, #64	; 0x40
 800b4f6:	f7ff fb8f 	bl	800ac18 <_malloc_r>
 800b4fa:	6028      	str	r0, [r5, #0]
 800b4fc:	6128      	str	r0, [r5, #16]
 800b4fe:	b920      	cbnz	r0, 800b50a <_svfiprintf_r+0x2e>
 800b500:	230c      	movs	r3, #12
 800b502:	603b      	str	r3, [r7, #0]
 800b504:	f04f 30ff 	mov.w	r0, #4294967295
 800b508:	e0d0      	b.n	800b6ac <_svfiprintf_r+0x1d0>
 800b50a:	2340      	movs	r3, #64	; 0x40
 800b50c:	616b      	str	r3, [r5, #20]
 800b50e:	2300      	movs	r3, #0
 800b510:	9309      	str	r3, [sp, #36]	; 0x24
 800b512:	2320      	movs	r3, #32
 800b514:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b518:	f8cd 800c 	str.w	r8, [sp, #12]
 800b51c:	2330      	movs	r3, #48	; 0x30
 800b51e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b6c4 <_svfiprintf_r+0x1e8>
 800b522:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b526:	f04f 0901 	mov.w	r9, #1
 800b52a:	4623      	mov	r3, r4
 800b52c:	469a      	mov	sl, r3
 800b52e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b532:	b10a      	cbz	r2, 800b538 <_svfiprintf_r+0x5c>
 800b534:	2a25      	cmp	r2, #37	; 0x25
 800b536:	d1f9      	bne.n	800b52c <_svfiprintf_r+0x50>
 800b538:	ebba 0b04 	subs.w	fp, sl, r4
 800b53c:	d00b      	beq.n	800b556 <_svfiprintf_r+0x7a>
 800b53e:	465b      	mov	r3, fp
 800b540:	4622      	mov	r2, r4
 800b542:	4629      	mov	r1, r5
 800b544:	4638      	mov	r0, r7
 800b546:	f7ff ff6f 	bl	800b428 <__ssputs_r>
 800b54a:	3001      	adds	r0, #1
 800b54c:	f000 80a9 	beq.w	800b6a2 <_svfiprintf_r+0x1c6>
 800b550:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b552:	445a      	add	r2, fp
 800b554:	9209      	str	r2, [sp, #36]	; 0x24
 800b556:	f89a 3000 	ldrb.w	r3, [sl]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	f000 80a1 	beq.w	800b6a2 <_svfiprintf_r+0x1c6>
 800b560:	2300      	movs	r3, #0
 800b562:	f04f 32ff 	mov.w	r2, #4294967295
 800b566:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b56a:	f10a 0a01 	add.w	sl, sl, #1
 800b56e:	9304      	str	r3, [sp, #16]
 800b570:	9307      	str	r3, [sp, #28]
 800b572:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b576:	931a      	str	r3, [sp, #104]	; 0x68
 800b578:	4654      	mov	r4, sl
 800b57a:	2205      	movs	r2, #5
 800b57c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b580:	4850      	ldr	r0, [pc, #320]	; (800b6c4 <_svfiprintf_r+0x1e8>)
 800b582:	f7f4 fe5d 	bl	8000240 <memchr>
 800b586:	9a04      	ldr	r2, [sp, #16]
 800b588:	b9d8      	cbnz	r0, 800b5c2 <_svfiprintf_r+0xe6>
 800b58a:	06d0      	lsls	r0, r2, #27
 800b58c:	bf44      	itt	mi
 800b58e:	2320      	movmi	r3, #32
 800b590:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b594:	0711      	lsls	r1, r2, #28
 800b596:	bf44      	itt	mi
 800b598:	232b      	movmi	r3, #43	; 0x2b
 800b59a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b59e:	f89a 3000 	ldrb.w	r3, [sl]
 800b5a2:	2b2a      	cmp	r3, #42	; 0x2a
 800b5a4:	d015      	beq.n	800b5d2 <_svfiprintf_r+0xf6>
 800b5a6:	9a07      	ldr	r2, [sp, #28]
 800b5a8:	4654      	mov	r4, sl
 800b5aa:	2000      	movs	r0, #0
 800b5ac:	f04f 0c0a 	mov.w	ip, #10
 800b5b0:	4621      	mov	r1, r4
 800b5b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5b6:	3b30      	subs	r3, #48	; 0x30
 800b5b8:	2b09      	cmp	r3, #9
 800b5ba:	d94d      	bls.n	800b658 <_svfiprintf_r+0x17c>
 800b5bc:	b1b0      	cbz	r0, 800b5ec <_svfiprintf_r+0x110>
 800b5be:	9207      	str	r2, [sp, #28]
 800b5c0:	e014      	b.n	800b5ec <_svfiprintf_r+0x110>
 800b5c2:	eba0 0308 	sub.w	r3, r0, r8
 800b5c6:	fa09 f303 	lsl.w	r3, r9, r3
 800b5ca:	4313      	orrs	r3, r2
 800b5cc:	9304      	str	r3, [sp, #16]
 800b5ce:	46a2      	mov	sl, r4
 800b5d0:	e7d2      	b.n	800b578 <_svfiprintf_r+0x9c>
 800b5d2:	9b03      	ldr	r3, [sp, #12]
 800b5d4:	1d19      	adds	r1, r3, #4
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	9103      	str	r1, [sp, #12]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	bfbb      	ittet	lt
 800b5de:	425b      	neglt	r3, r3
 800b5e0:	f042 0202 	orrlt.w	r2, r2, #2
 800b5e4:	9307      	strge	r3, [sp, #28]
 800b5e6:	9307      	strlt	r3, [sp, #28]
 800b5e8:	bfb8      	it	lt
 800b5ea:	9204      	strlt	r2, [sp, #16]
 800b5ec:	7823      	ldrb	r3, [r4, #0]
 800b5ee:	2b2e      	cmp	r3, #46	; 0x2e
 800b5f0:	d10c      	bne.n	800b60c <_svfiprintf_r+0x130>
 800b5f2:	7863      	ldrb	r3, [r4, #1]
 800b5f4:	2b2a      	cmp	r3, #42	; 0x2a
 800b5f6:	d134      	bne.n	800b662 <_svfiprintf_r+0x186>
 800b5f8:	9b03      	ldr	r3, [sp, #12]
 800b5fa:	1d1a      	adds	r2, r3, #4
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	9203      	str	r2, [sp, #12]
 800b600:	2b00      	cmp	r3, #0
 800b602:	bfb8      	it	lt
 800b604:	f04f 33ff 	movlt.w	r3, #4294967295
 800b608:	3402      	adds	r4, #2
 800b60a:	9305      	str	r3, [sp, #20]
 800b60c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b6d4 <_svfiprintf_r+0x1f8>
 800b610:	7821      	ldrb	r1, [r4, #0]
 800b612:	2203      	movs	r2, #3
 800b614:	4650      	mov	r0, sl
 800b616:	f7f4 fe13 	bl	8000240 <memchr>
 800b61a:	b138      	cbz	r0, 800b62c <_svfiprintf_r+0x150>
 800b61c:	9b04      	ldr	r3, [sp, #16]
 800b61e:	eba0 000a 	sub.w	r0, r0, sl
 800b622:	2240      	movs	r2, #64	; 0x40
 800b624:	4082      	lsls	r2, r0
 800b626:	4313      	orrs	r3, r2
 800b628:	3401      	adds	r4, #1
 800b62a:	9304      	str	r3, [sp, #16]
 800b62c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b630:	4825      	ldr	r0, [pc, #148]	; (800b6c8 <_svfiprintf_r+0x1ec>)
 800b632:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b636:	2206      	movs	r2, #6
 800b638:	f7f4 fe02 	bl	8000240 <memchr>
 800b63c:	2800      	cmp	r0, #0
 800b63e:	d038      	beq.n	800b6b2 <_svfiprintf_r+0x1d6>
 800b640:	4b22      	ldr	r3, [pc, #136]	; (800b6cc <_svfiprintf_r+0x1f0>)
 800b642:	bb1b      	cbnz	r3, 800b68c <_svfiprintf_r+0x1b0>
 800b644:	9b03      	ldr	r3, [sp, #12]
 800b646:	3307      	adds	r3, #7
 800b648:	f023 0307 	bic.w	r3, r3, #7
 800b64c:	3308      	adds	r3, #8
 800b64e:	9303      	str	r3, [sp, #12]
 800b650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b652:	4433      	add	r3, r6
 800b654:	9309      	str	r3, [sp, #36]	; 0x24
 800b656:	e768      	b.n	800b52a <_svfiprintf_r+0x4e>
 800b658:	fb0c 3202 	mla	r2, ip, r2, r3
 800b65c:	460c      	mov	r4, r1
 800b65e:	2001      	movs	r0, #1
 800b660:	e7a6      	b.n	800b5b0 <_svfiprintf_r+0xd4>
 800b662:	2300      	movs	r3, #0
 800b664:	3401      	adds	r4, #1
 800b666:	9305      	str	r3, [sp, #20]
 800b668:	4619      	mov	r1, r3
 800b66a:	f04f 0c0a 	mov.w	ip, #10
 800b66e:	4620      	mov	r0, r4
 800b670:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b674:	3a30      	subs	r2, #48	; 0x30
 800b676:	2a09      	cmp	r2, #9
 800b678:	d903      	bls.n	800b682 <_svfiprintf_r+0x1a6>
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d0c6      	beq.n	800b60c <_svfiprintf_r+0x130>
 800b67e:	9105      	str	r1, [sp, #20]
 800b680:	e7c4      	b.n	800b60c <_svfiprintf_r+0x130>
 800b682:	fb0c 2101 	mla	r1, ip, r1, r2
 800b686:	4604      	mov	r4, r0
 800b688:	2301      	movs	r3, #1
 800b68a:	e7f0      	b.n	800b66e <_svfiprintf_r+0x192>
 800b68c:	ab03      	add	r3, sp, #12
 800b68e:	9300      	str	r3, [sp, #0]
 800b690:	462a      	mov	r2, r5
 800b692:	4b0f      	ldr	r3, [pc, #60]	; (800b6d0 <_svfiprintf_r+0x1f4>)
 800b694:	a904      	add	r1, sp, #16
 800b696:	4638      	mov	r0, r7
 800b698:	f7fd fe36 	bl	8009308 <_printf_float>
 800b69c:	1c42      	adds	r2, r0, #1
 800b69e:	4606      	mov	r6, r0
 800b6a0:	d1d6      	bne.n	800b650 <_svfiprintf_r+0x174>
 800b6a2:	89ab      	ldrh	r3, [r5, #12]
 800b6a4:	065b      	lsls	r3, r3, #25
 800b6a6:	f53f af2d 	bmi.w	800b504 <_svfiprintf_r+0x28>
 800b6aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b6ac:	b01d      	add	sp, #116	; 0x74
 800b6ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6b2:	ab03      	add	r3, sp, #12
 800b6b4:	9300      	str	r3, [sp, #0]
 800b6b6:	462a      	mov	r2, r5
 800b6b8:	4b05      	ldr	r3, [pc, #20]	; (800b6d0 <_svfiprintf_r+0x1f4>)
 800b6ba:	a904      	add	r1, sp, #16
 800b6bc:	4638      	mov	r0, r7
 800b6be:	f7fe f8ab 	bl	8009818 <_printf_i>
 800b6c2:	e7eb      	b.n	800b69c <_svfiprintf_r+0x1c0>
 800b6c4:	0800efa4 	.word	0x0800efa4
 800b6c8:	0800efae 	.word	0x0800efae
 800b6cc:	08009309 	.word	0x08009309
 800b6d0:	0800b429 	.word	0x0800b429
 800b6d4:	0800efaa 	.word	0x0800efaa

0800b6d8 <__sfputc_r>:
 800b6d8:	6893      	ldr	r3, [r2, #8]
 800b6da:	3b01      	subs	r3, #1
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	b410      	push	{r4}
 800b6e0:	6093      	str	r3, [r2, #8]
 800b6e2:	da08      	bge.n	800b6f6 <__sfputc_r+0x1e>
 800b6e4:	6994      	ldr	r4, [r2, #24]
 800b6e6:	42a3      	cmp	r3, r4
 800b6e8:	db01      	blt.n	800b6ee <__sfputc_r+0x16>
 800b6ea:	290a      	cmp	r1, #10
 800b6ec:	d103      	bne.n	800b6f6 <__sfputc_r+0x1e>
 800b6ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6f2:	f000 ba45 	b.w	800bb80 <__swbuf_r>
 800b6f6:	6813      	ldr	r3, [r2, #0]
 800b6f8:	1c58      	adds	r0, r3, #1
 800b6fa:	6010      	str	r0, [r2, #0]
 800b6fc:	7019      	strb	r1, [r3, #0]
 800b6fe:	4608      	mov	r0, r1
 800b700:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b704:	4770      	bx	lr

0800b706 <__sfputs_r>:
 800b706:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b708:	4606      	mov	r6, r0
 800b70a:	460f      	mov	r7, r1
 800b70c:	4614      	mov	r4, r2
 800b70e:	18d5      	adds	r5, r2, r3
 800b710:	42ac      	cmp	r4, r5
 800b712:	d101      	bne.n	800b718 <__sfputs_r+0x12>
 800b714:	2000      	movs	r0, #0
 800b716:	e007      	b.n	800b728 <__sfputs_r+0x22>
 800b718:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b71c:	463a      	mov	r2, r7
 800b71e:	4630      	mov	r0, r6
 800b720:	f7ff ffda 	bl	800b6d8 <__sfputc_r>
 800b724:	1c43      	adds	r3, r0, #1
 800b726:	d1f3      	bne.n	800b710 <__sfputs_r+0xa>
 800b728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b72c <_vfiprintf_r>:
 800b72c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b730:	460d      	mov	r5, r1
 800b732:	b09d      	sub	sp, #116	; 0x74
 800b734:	4614      	mov	r4, r2
 800b736:	4698      	mov	r8, r3
 800b738:	4606      	mov	r6, r0
 800b73a:	b118      	cbz	r0, 800b744 <_vfiprintf_r+0x18>
 800b73c:	6a03      	ldr	r3, [r0, #32]
 800b73e:	b90b      	cbnz	r3, 800b744 <_vfiprintf_r+0x18>
 800b740:	f7fe fa18 	bl	8009b74 <__sinit>
 800b744:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b746:	07d9      	lsls	r1, r3, #31
 800b748:	d405      	bmi.n	800b756 <_vfiprintf_r+0x2a>
 800b74a:	89ab      	ldrh	r3, [r5, #12]
 800b74c:	059a      	lsls	r2, r3, #22
 800b74e:	d402      	bmi.n	800b756 <_vfiprintf_r+0x2a>
 800b750:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b752:	f7fe fbe8 	bl	8009f26 <__retarget_lock_acquire_recursive>
 800b756:	89ab      	ldrh	r3, [r5, #12]
 800b758:	071b      	lsls	r3, r3, #28
 800b75a:	d501      	bpl.n	800b760 <_vfiprintf_r+0x34>
 800b75c:	692b      	ldr	r3, [r5, #16]
 800b75e:	b99b      	cbnz	r3, 800b788 <_vfiprintf_r+0x5c>
 800b760:	4629      	mov	r1, r5
 800b762:	4630      	mov	r0, r6
 800b764:	f000 fa4a 	bl	800bbfc <__swsetup_r>
 800b768:	b170      	cbz	r0, 800b788 <_vfiprintf_r+0x5c>
 800b76a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b76c:	07dc      	lsls	r4, r3, #31
 800b76e:	d504      	bpl.n	800b77a <_vfiprintf_r+0x4e>
 800b770:	f04f 30ff 	mov.w	r0, #4294967295
 800b774:	b01d      	add	sp, #116	; 0x74
 800b776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b77a:	89ab      	ldrh	r3, [r5, #12]
 800b77c:	0598      	lsls	r0, r3, #22
 800b77e:	d4f7      	bmi.n	800b770 <_vfiprintf_r+0x44>
 800b780:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b782:	f7fe fbd1 	bl	8009f28 <__retarget_lock_release_recursive>
 800b786:	e7f3      	b.n	800b770 <_vfiprintf_r+0x44>
 800b788:	2300      	movs	r3, #0
 800b78a:	9309      	str	r3, [sp, #36]	; 0x24
 800b78c:	2320      	movs	r3, #32
 800b78e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b792:	f8cd 800c 	str.w	r8, [sp, #12]
 800b796:	2330      	movs	r3, #48	; 0x30
 800b798:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b94c <_vfiprintf_r+0x220>
 800b79c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b7a0:	f04f 0901 	mov.w	r9, #1
 800b7a4:	4623      	mov	r3, r4
 800b7a6:	469a      	mov	sl, r3
 800b7a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7ac:	b10a      	cbz	r2, 800b7b2 <_vfiprintf_r+0x86>
 800b7ae:	2a25      	cmp	r2, #37	; 0x25
 800b7b0:	d1f9      	bne.n	800b7a6 <_vfiprintf_r+0x7a>
 800b7b2:	ebba 0b04 	subs.w	fp, sl, r4
 800b7b6:	d00b      	beq.n	800b7d0 <_vfiprintf_r+0xa4>
 800b7b8:	465b      	mov	r3, fp
 800b7ba:	4622      	mov	r2, r4
 800b7bc:	4629      	mov	r1, r5
 800b7be:	4630      	mov	r0, r6
 800b7c0:	f7ff ffa1 	bl	800b706 <__sfputs_r>
 800b7c4:	3001      	adds	r0, #1
 800b7c6:	f000 80a9 	beq.w	800b91c <_vfiprintf_r+0x1f0>
 800b7ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7cc:	445a      	add	r2, fp
 800b7ce:	9209      	str	r2, [sp, #36]	; 0x24
 800b7d0:	f89a 3000 	ldrb.w	r3, [sl]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	f000 80a1 	beq.w	800b91c <_vfiprintf_r+0x1f0>
 800b7da:	2300      	movs	r3, #0
 800b7dc:	f04f 32ff 	mov.w	r2, #4294967295
 800b7e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7e4:	f10a 0a01 	add.w	sl, sl, #1
 800b7e8:	9304      	str	r3, [sp, #16]
 800b7ea:	9307      	str	r3, [sp, #28]
 800b7ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b7f0:	931a      	str	r3, [sp, #104]	; 0x68
 800b7f2:	4654      	mov	r4, sl
 800b7f4:	2205      	movs	r2, #5
 800b7f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7fa:	4854      	ldr	r0, [pc, #336]	; (800b94c <_vfiprintf_r+0x220>)
 800b7fc:	f7f4 fd20 	bl	8000240 <memchr>
 800b800:	9a04      	ldr	r2, [sp, #16]
 800b802:	b9d8      	cbnz	r0, 800b83c <_vfiprintf_r+0x110>
 800b804:	06d1      	lsls	r1, r2, #27
 800b806:	bf44      	itt	mi
 800b808:	2320      	movmi	r3, #32
 800b80a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b80e:	0713      	lsls	r3, r2, #28
 800b810:	bf44      	itt	mi
 800b812:	232b      	movmi	r3, #43	; 0x2b
 800b814:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b818:	f89a 3000 	ldrb.w	r3, [sl]
 800b81c:	2b2a      	cmp	r3, #42	; 0x2a
 800b81e:	d015      	beq.n	800b84c <_vfiprintf_r+0x120>
 800b820:	9a07      	ldr	r2, [sp, #28]
 800b822:	4654      	mov	r4, sl
 800b824:	2000      	movs	r0, #0
 800b826:	f04f 0c0a 	mov.w	ip, #10
 800b82a:	4621      	mov	r1, r4
 800b82c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b830:	3b30      	subs	r3, #48	; 0x30
 800b832:	2b09      	cmp	r3, #9
 800b834:	d94d      	bls.n	800b8d2 <_vfiprintf_r+0x1a6>
 800b836:	b1b0      	cbz	r0, 800b866 <_vfiprintf_r+0x13a>
 800b838:	9207      	str	r2, [sp, #28]
 800b83a:	e014      	b.n	800b866 <_vfiprintf_r+0x13a>
 800b83c:	eba0 0308 	sub.w	r3, r0, r8
 800b840:	fa09 f303 	lsl.w	r3, r9, r3
 800b844:	4313      	orrs	r3, r2
 800b846:	9304      	str	r3, [sp, #16]
 800b848:	46a2      	mov	sl, r4
 800b84a:	e7d2      	b.n	800b7f2 <_vfiprintf_r+0xc6>
 800b84c:	9b03      	ldr	r3, [sp, #12]
 800b84e:	1d19      	adds	r1, r3, #4
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	9103      	str	r1, [sp, #12]
 800b854:	2b00      	cmp	r3, #0
 800b856:	bfbb      	ittet	lt
 800b858:	425b      	neglt	r3, r3
 800b85a:	f042 0202 	orrlt.w	r2, r2, #2
 800b85e:	9307      	strge	r3, [sp, #28]
 800b860:	9307      	strlt	r3, [sp, #28]
 800b862:	bfb8      	it	lt
 800b864:	9204      	strlt	r2, [sp, #16]
 800b866:	7823      	ldrb	r3, [r4, #0]
 800b868:	2b2e      	cmp	r3, #46	; 0x2e
 800b86a:	d10c      	bne.n	800b886 <_vfiprintf_r+0x15a>
 800b86c:	7863      	ldrb	r3, [r4, #1]
 800b86e:	2b2a      	cmp	r3, #42	; 0x2a
 800b870:	d134      	bne.n	800b8dc <_vfiprintf_r+0x1b0>
 800b872:	9b03      	ldr	r3, [sp, #12]
 800b874:	1d1a      	adds	r2, r3, #4
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	9203      	str	r2, [sp, #12]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	bfb8      	it	lt
 800b87e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b882:	3402      	adds	r4, #2
 800b884:	9305      	str	r3, [sp, #20]
 800b886:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b95c <_vfiprintf_r+0x230>
 800b88a:	7821      	ldrb	r1, [r4, #0]
 800b88c:	2203      	movs	r2, #3
 800b88e:	4650      	mov	r0, sl
 800b890:	f7f4 fcd6 	bl	8000240 <memchr>
 800b894:	b138      	cbz	r0, 800b8a6 <_vfiprintf_r+0x17a>
 800b896:	9b04      	ldr	r3, [sp, #16]
 800b898:	eba0 000a 	sub.w	r0, r0, sl
 800b89c:	2240      	movs	r2, #64	; 0x40
 800b89e:	4082      	lsls	r2, r0
 800b8a0:	4313      	orrs	r3, r2
 800b8a2:	3401      	adds	r4, #1
 800b8a4:	9304      	str	r3, [sp, #16]
 800b8a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8aa:	4829      	ldr	r0, [pc, #164]	; (800b950 <_vfiprintf_r+0x224>)
 800b8ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b8b0:	2206      	movs	r2, #6
 800b8b2:	f7f4 fcc5 	bl	8000240 <memchr>
 800b8b6:	2800      	cmp	r0, #0
 800b8b8:	d03f      	beq.n	800b93a <_vfiprintf_r+0x20e>
 800b8ba:	4b26      	ldr	r3, [pc, #152]	; (800b954 <_vfiprintf_r+0x228>)
 800b8bc:	bb1b      	cbnz	r3, 800b906 <_vfiprintf_r+0x1da>
 800b8be:	9b03      	ldr	r3, [sp, #12]
 800b8c0:	3307      	adds	r3, #7
 800b8c2:	f023 0307 	bic.w	r3, r3, #7
 800b8c6:	3308      	adds	r3, #8
 800b8c8:	9303      	str	r3, [sp, #12]
 800b8ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8cc:	443b      	add	r3, r7
 800b8ce:	9309      	str	r3, [sp, #36]	; 0x24
 800b8d0:	e768      	b.n	800b7a4 <_vfiprintf_r+0x78>
 800b8d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8d6:	460c      	mov	r4, r1
 800b8d8:	2001      	movs	r0, #1
 800b8da:	e7a6      	b.n	800b82a <_vfiprintf_r+0xfe>
 800b8dc:	2300      	movs	r3, #0
 800b8de:	3401      	adds	r4, #1
 800b8e0:	9305      	str	r3, [sp, #20]
 800b8e2:	4619      	mov	r1, r3
 800b8e4:	f04f 0c0a 	mov.w	ip, #10
 800b8e8:	4620      	mov	r0, r4
 800b8ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8ee:	3a30      	subs	r2, #48	; 0x30
 800b8f0:	2a09      	cmp	r2, #9
 800b8f2:	d903      	bls.n	800b8fc <_vfiprintf_r+0x1d0>
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d0c6      	beq.n	800b886 <_vfiprintf_r+0x15a>
 800b8f8:	9105      	str	r1, [sp, #20]
 800b8fa:	e7c4      	b.n	800b886 <_vfiprintf_r+0x15a>
 800b8fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800b900:	4604      	mov	r4, r0
 800b902:	2301      	movs	r3, #1
 800b904:	e7f0      	b.n	800b8e8 <_vfiprintf_r+0x1bc>
 800b906:	ab03      	add	r3, sp, #12
 800b908:	9300      	str	r3, [sp, #0]
 800b90a:	462a      	mov	r2, r5
 800b90c:	4b12      	ldr	r3, [pc, #72]	; (800b958 <_vfiprintf_r+0x22c>)
 800b90e:	a904      	add	r1, sp, #16
 800b910:	4630      	mov	r0, r6
 800b912:	f7fd fcf9 	bl	8009308 <_printf_float>
 800b916:	4607      	mov	r7, r0
 800b918:	1c78      	adds	r0, r7, #1
 800b91a:	d1d6      	bne.n	800b8ca <_vfiprintf_r+0x19e>
 800b91c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b91e:	07d9      	lsls	r1, r3, #31
 800b920:	d405      	bmi.n	800b92e <_vfiprintf_r+0x202>
 800b922:	89ab      	ldrh	r3, [r5, #12]
 800b924:	059a      	lsls	r2, r3, #22
 800b926:	d402      	bmi.n	800b92e <_vfiprintf_r+0x202>
 800b928:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b92a:	f7fe fafd 	bl	8009f28 <__retarget_lock_release_recursive>
 800b92e:	89ab      	ldrh	r3, [r5, #12]
 800b930:	065b      	lsls	r3, r3, #25
 800b932:	f53f af1d 	bmi.w	800b770 <_vfiprintf_r+0x44>
 800b936:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b938:	e71c      	b.n	800b774 <_vfiprintf_r+0x48>
 800b93a:	ab03      	add	r3, sp, #12
 800b93c:	9300      	str	r3, [sp, #0]
 800b93e:	462a      	mov	r2, r5
 800b940:	4b05      	ldr	r3, [pc, #20]	; (800b958 <_vfiprintf_r+0x22c>)
 800b942:	a904      	add	r1, sp, #16
 800b944:	4630      	mov	r0, r6
 800b946:	f7fd ff67 	bl	8009818 <_printf_i>
 800b94a:	e7e4      	b.n	800b916 <_vfiprintf_r+0x1ea>
 800b94c:	0800efa4 	.word	0x0800efa4
 800b950:	0800efae 	.word	0x0800efae
 800b954:	08009309 	.word	0x08009309
 800b958:	0800b707 	.word	0x0800b707
 800b95c:	0800efaa 	.word	0x0800efaa

0800b960 <__sflush_r>:
 800b960:	898a      	ldrh	r2, [r1, #12]
 800b962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b966:	4605      	mov	r5, r0
 800b968:	0710      	lsls	r0, r2, #28
 800b96a:	460c      	mov	r4, r1
 800b96c:	d458      	bmi.n	800ba20 <__sflush_r+0xc0>
 800b96e:	684b      	ldr	r3, [r1, #4]
 800b970:	2b00      	cmp	r3, #0
 800b972:	dc05      	bgt.n	800b980 <__sflush_r+0x20>
 800b974:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b976:	2b00      	cmp	r3, #0
 800b978:	dc02      	bgt.n	800b980 <__sflush_r+0x20>
 800b97a:	2000      	movs	r0, #0
 800b97c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b980:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b982:	2e00      	cmp	r6, #0
 800b984:	d0f9      	beq.n	800b97a <__sflush_r+0x1a>
 800b986:	2300      	movs	r3, #0
 800b988:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b98c:	682f      	ldr	r7, [r5, #0]
 800b98e:	6a21      	ldr	r1, [r4, #32]
 800b990:	602b      	str	r3, [r5, #0]
 800b992:	d032      	beq.n	800b9fa <__sflush_r+0x9a>
 800b994:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b996:	89a3      	ldrh	r3, [r4, #12]
 800b998:	075a      	lsls	r2, r3, #29
 800b99a:	d505      	bpl.n	800b9a8 <__sflush_r+0x48>
 800b99c:	6863      	ldr	r3, [r4, #4]
 800b99e:	1ac0      	subs	r0, r0, r3
 800b9a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b9a2:	b10b      	cbz	r3, 800b9a8 <__sflush_r+0x48>
 800b9a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b9a6:	1ac0      	subs	r0, r0, r3
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	4602      	mov	r2, r0
 800b9ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b9ae:	6a21      	ldr	r1, [r4, #32]
 800b9b0:	4628      	mov	r0, r5
 800b9b2:	47b0      	blx	r6
 800b9b4:	1c43      	adds	r3, r0, #1
 800b9b6:	89a3      	ldrh	r3, [r4, #12]
 800b9b8:	d106      	bne.n	800b9c8 <__sflush_r+0x68>
 800b9ba:	6829      	ldr	r1, [r5, #0]
 800b9bc:	291d      	cmp	r1, #29
 800b9be:	d82b      	bhi.n	800ba18 <__sflush_r+0xb8>
 800b9c0:	4a29      	ldr	r2, [pc, #164]	; (800ba68 <__sflush_r+0x108>)
 800b9c2:	410a      	asrs	r2, r1
 800b9c4:	07d6      	lsls	r6, r2, #31
 800b9c6:	d427      	bmi.n	800ba18 <__sflush_r+0xb8>
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	6062      	str	r2, [r4, #4]
 800b9cc:	04d9      	lsls	r1, r3, #19
 800b9ce:	6922      	ldr	r2, [r4, #16]
 800b9d0:	6022      	str	r2, [r4, #0]
 800b9d2:	d504      	bpl.n	800b9de <__sflush_r+0x7e>
 800b9d4:	1c42      	adds	r2, r0, #1
 800b9d6:	d101      	bne.n	800b9dc <__sflush_r+0x7c>
 800b9d8:	682b      	ldr	r3, [r5, #0]
 800b9da:	b903      	cbnz	r3, 800b9de <__sflush_r+0x7e>
 800b9dc:	6560      	str	r0, [r4, #84]	; 0x54
 800b9de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b9e0:	602f      	str	r7, [r5, #0]
 800b9e2:	2900      	cmp	r1, #0
 800b9e4:	d0c9      	beq.n	800b97a <__sflush_r+0x1a>
 800b9e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b9ea:	4299      	cmp	r1, r3
 800b9ec:	d002      	beq.n	800b9f4 <__sflush_r+0x94>
 800b9ee:	4628      	mov	r0, r5
 800b9f0:	f7ff f89e 	bl	800ab30 <_free_r>
 800b9f4:	2000      	movs	r0, #0
 800b9f6:	6360      	str	r0, [r4, #52]	; 0x34
 800b9f8:	e7c0      	b.n	800b97c <__sflush_r+0x1c>
 800b9fa:	2301      	movs	r3, #1
 800b9fc:	4628      	mov	r0, r5
 800b9fe:	47b0      	blx	r6
 800ba00:	1c41      	adds	r1, r0, #1
 800ba02:	d1c8      	bne.n	800b996 <__sflush_r+0x36>
 800ba04:	682b      	ldr	r3, [r5, #0]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d0c5      	beq.n	800b996 <__sflush_r+0x36>
 800ba0a:	2b1d      	cmp	r3, #29
 800ba0c:	d001      	beq.n	800ba12 <__sflush_r+0xb2>
 800ba0e:	2b16      	cmp	r3, #22
 800ba10:	d101      	bne.n	800ba16 <__sflush_r+0xb6>
 800ba12:	602f      	str	r7, [r5, #0]
 800ba14:	e7b1      	b.n	800b97a <__sflush_r+0x1a>
 800ba16:	89a3      	ldrh	r3, [r4, #12]
 800ba18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba1c:	81a3      	strh	r3, [r4, #12]
 800ba1e:	e7ad      	b.n	800b97c <__sflush_r+0x1c>
 800ba20:	690f      	ldr	r7, [r1, #16]
 800ba22:	2f00      	cmp	r7, #0
 800ba24:	d0a9      	beq.n	800b97a <__sflush_r+0x1a>
 800ba26:	0793      	lsls	r3, r2, #30
 800ba28:	680e      	ldr	r6, [r1, #0]
 800ba2a:	bf08      	it	eq
 800ba2c:	694b      	ldreq	r3, [r1, #20]
 800ba2e:	600f      	str	r7, [r1, #0]
 800ba30:	bf18      	it	ne
 800ba32:	2300      	movne	r3, #0
 800ba34:	eba6 0807 	sub.w	r8, r6, r7
 800ba38:	608b      	str	r3, [r1, #8]
 800ba3a:	f1b8 0f00 	cmp.w	r8, #0
 800ba3e:	dd9c      	ble.n	800b97a <__sflush_r+0x1a>
 800ba40:	6a21      	ldr	r1, [r4, #32]
 800ba42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ba44:	4643      	mov	r3, r8
 800ba46:	463a      	mov	r2, r7
 800ba48:	4628      	mov	r0, r5
 800ba4a:	47b0      	blx	r6
 800ba4c:	2800      	cmp	r0, #0
 800ba4e:	dc06      	bgt.n	800ba5e <__sflush_r+0xfe>
 800ba50:	89a3      	ldrh	r3, [r4, #12]
 800ba52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba56:	81a3      	strh	r3, [r4, #12]
 800ba58:	f04f 30ff 	mov.w	r0, #4294967295
 800ba5c:	e78e      	b.n	800b97c <__sflush_r+0x1c>
 800ba5e:	4407      	add	r7, r0
 800ba60:	eba8 0800 	sub.w	r8, r8, r0
 800ba64:	e7e9      	b.n	800ba3a <__sflush_r+0xda>
 800ba66:	bf00      	nop
 800ba68:	dfbffffe 	.word	0xdfbffffe

0800ba6c <_fflush_r>:
 800ba6c:	b538      	push	{r3, r4, r5, lr}
 800ba6e:	690b      	ldr	r3, [r1, #16]
 800ba70:	4605      	mov	r5, r0
 800ba72:	460c      	mov	r4, r1
 800ba74:	b913      	cbnz	r3, 800ba7c <_fflush_r+0x10>
 800ba76:	2500      	movs	r5, #0
 800ba78:	4628      	mov	r0, r5
 800ba7a:	bd38      	pop	{r3, r4, r5, pc}
 800ba7c:	b118      	cbz	r0, 800ba86 <_fflush_r+0x1a>
 800ba7e:	6a03      	ldr	r3, [r0, #32]
 800ba80:	b90b      	cbnz	r3, 800ba86 <_fflush_r+0x1a>
 800ba82:	f7fe f877 	bl	8009b74 <__sinit>
 800ba86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d0f3      	beq.n	800ba76 <_fflush_r+0xa>
 800ba8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ba90:	07d0      	lsls	r0, r2, #31
 800ba92:	d404      	bmi.n	800ba9e <_fflush_r+0x32>
 800ba94:	0599      	lsls	r1, r3, #22
 800ba96:	d402      	bmi.n	800ba9e <_fflush_r+0x32>
 800ba98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba9a:	f7fe fa44 	bl	8009f26 <__retarget_lock_acquire_recursive>
 800ba9e:	4628      	mov	r0, r5
 800baa0:	4621      	mov	r1, r4
 800baa2:	f7ff ff5d 	bl	800b960 <__sflush_r>
 800baa6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800baa8:	07da      	lsls	r2, r3, #31
 800baaa:	4605      	mov	r5, r0
 800baac:	d4e4      	bmi.n	800ba78 <_fflush_r+0xc>
 800baae:	89a3      	ldrh	r3, [r4, #12]
 800bab0:	059b      	lsls	r3, r3, #22
 800bab2:	d4e1      	bmi.n	800ba78 <_fflush_r+0xc>
 800bab4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bab6:	f7fe fa37 	bl	8009f28 <__retarget_lock_release_recursive>
 800baba:	e7dd      	b.n	800ba78 <_fflush_r+0xc>

0800babc <__swhatbuf_r>:
 800babc:	b570      	push	{r4, r5, r6, lr}
 800babe:	460c      	mov	r4, r1
 800bac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bac4:	2900      	cmp	r1, #0
 800bac6:	b096      	sub	sp, #88	; 0x58
 800bac8:	4615      	mov	r5, r2
 800baca:	461e      	mov	r6, r3
 800bacc:	da0d      	bge.n	800baea <__swhatbuf_r+0x2e>
 800bace:	89a3      	ldrh	r3, [r4, #12]
 800bad0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bad4:	f04f 0100 	mov.w	r1, #0
 800bad8:	bf0c      	ite	eq
 800bada:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bade:	2340      	movne	r3, #64	; 0x40
 800bae0:	2000      	movs	r0, #0
 800bae2:	6031      	str	r1, [r6, #0]
 800bae4:	602b      	str	r3, [r5, #0]
 800bae6:	b016      	add	sp, #88	; 0x58
 800bae8:	bd70      	pop	{r4, r5, r6, pc}
 800baea:	466a      	mov	r2, sp
 800baec:	f000 f8f8 	bl	800bce0 <_fstat_r>
 800baf0:	2800      	cmp	r0, #0
 800baf2:	dbec      	blt.n	800bace <__swhatbuf_r+0x12>
 800baf4:	9901      	ldr	r1, [sp, #4]
 800baf6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bafa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bafe:	4259      	negs	r1, r3
 800bb00:	4159      	adcs	r1, r3
 800bb02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb06:	e7eb      	b.n	800bae0 <__swhatbuf_r+0x24>

0800bb08 <__smakebuf_r>:
 800bb08:	898b      	ldrh	r3, [r1, #12]
 800bb0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bb0c:	079d      	lsls	r5, r3, #30
 800bb0e:	4606      	mov	r6, r0
 800bb10:	460c      	mov	r4, r1
 800bb12:	d507      	bpl.n	800bb24 <__smakebuf_r+0x1c>
 800bb14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bb18:	6023      	str	r3, [r4, #0]
 800bb1a:	6123      	str	r3, [r4, #16]
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	6163      	str	r3, [r4, #20]
 800bb20:	b002      	add	sp, #8
 800bb22:	bd70      	pop	{r4, r5, r6, pc}
 800bb24:	ab01      	add	r3, sp, #4
 800bb26:	466a      	mov	r2, sp
 800bb28:	f7ff ffc8 	bl	800babc <__swhatbuf_r>
 800bb2c:	9900      	ldr	r1, [sp, #0]
 800bb2e:	4605      	mov	r5, r0
 800bb30:	4630      	mov	r0, r6
 800bb32:	f7ff f871 	bl	800ac18 <_malloc_r>
 800bb36:	b948      	cbnz	r0, 800bb4c <__smakebuf_r+0x44>
 800bb38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb3c:	059a      	lsls	r2, r3, #22
 800bb3e:	d4ef      	bmi.n	800bb20 <__smakebuf_r+0x18>
 800bb40:	f023 0303 	bic.w	r3, r3, #3
 800bb44:	f043 0302 	orr.w	r3, r3, #2
 800bb48:	81a3      	strh	r3, [r4, #12]
 800bb4a:	e7e3      	b.n	800bb14 <__smakebuf_r+0xc>
 800bb4c:	89a3      	ldrh	r3, [r4, #12]
 800bb4e:	6020      	str	r0, [r4, #0]
 800bb50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb54:	81a3      	strh	r3, [r4, #12]
 800bb56:	9b00      	ldr	r3, [sp, #0]
 800bb58:	6163      	str	r3, [r4, #20]
 800bb5a:	9b01      	ldr	r3, [sp, #4]
 800bb5c:	6120      	str	r0, [r4, #16]
 800bb5e:	b15b      	cbz	r3, 800bb78 <__smakebuf_r+0x70>
 800bb60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb64:	4630      	mov	r0, r6
 800bb66:	f000 f8cd 	bl	800bd04 <_isatty_r>
 800bb6a:	b128      	cbz	r0, 800bb78 <__smakebuf_r+0x70>
 800bb6c:	89a3      	ldrh	r3, [r4, #12]
 800bb6e:	f023 0303 	bic.w	r3, r3, #3
 800bb72:	f043 0301 	orr.w	r3, r3, #1
 800bb76:	81a3      	strh	r3, [r4, #12]
 800bb78:	89a3      	ldrh	r3, [r4, #12]
 800bb7a:	431d      	orrs	r5, r3
 800bb7c:	81a5      	strh	r5, [r4, #12]
 800bb7e:	e7cf      	b.n	800bb20 <__smakebuf_r+0x18>

0800bb80 <__swbuf_r>:
 800bb80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb82:	460e      	mov	r6, r1
 800bb84:	4614      	mov	r4, r2
 800bb86:	4605      	mov	r5, r0
 800bb88:	b118      	cbz	r0, 800bb92 <__swbuf_r+0x12>
 800bb8a:	6a03      	ldr	r3, [r0, #32]
 800bb8c:	b90b      	cbnz	r3, 800bb92 <__swbuf_r+0x12>
 800bb8e:	f7fd fff1 	bl	8009b74 <__sinit>
 800bb92:	69a3      	ldr	r3, [r4, #24]
 800bb94:	60a3      	str	r3, [r4, #8]
 800bb96:	89a3      	ldrh	r3, [r4, #12]
 800bb98:	071a      	lsls	r2, r3, #28
 800bb9a:	d525      	bpl.n	800bbe8 <__swbuf_r+0x68>
 800bb9c:	6923      	ldr	r3, [r4, #16]
 800bb9e:	b31b      	cbz	r3, 800bbe8 <__swbuf_r+0x68>
 800bba0:	6823      	ldr	r3, [r4, #0]
 800bba2:	6922      	ldr	r2, [r4, #16]
 800bba4:	1a98      	subs	r0, r3, r2
 800bba6:	6963      	ldr	r3, [r4, #20]
 800bba8:	b2f6      	uxtb	r6, r6
 800bbaa:	4283      	cmp	r3, r0
 800bbac:	4637      	mov	r7, r6
 800bbae:	dc04      	bgt.n	800bbba <__swbuf_r+0x3a>
 800bbb0:	4621      	mov	r1, r4
 800bbb2:	4628      	mov	r0, r5
 800bbb4:	f7ff ff5a 	bl	800ba6c <_fflush_r>
 800bbb8:	b9e0      	cbnz	r0, 800bbf4 <__swbuf_r+0x74>
 800bbba:	68a3      	ldr	r3, [r4, #8]
 800bbbc:	3b01      	subs	r3, #1
 800bbbe:	60a3      	str	r3, [r4, #8]
 800bbc0:	6823      	ldr	r3, [r4, #0]
 800bbc2:	1c5a      	adds	r2, r3, #1
 800bbc4:	6022      	str	r2, [r4, #0]
 800bbc6:	701e      	strb	r6, [r3, #0]
 800bbc8:	6962      	ldr	r2, [r4, #20]
 800bbca:	1c43      	adds	r3, r0, #1
 800bbcc:	429a      	cmp	r2, r3
 800bbce:	d004      	beq.n	800bbda <__swbuf_r+0x5a>
 800bbd0:	89a3      	ldrh	r3, [r4, #12]
 800bbd2:	07db      	lsls	r3, r3, #31
 800bbd4:	d506      	bpl.n	800bbe4 <__swbuf_r+0x64>
 800bbd6:	2e0a      	cmp	r6, #10
 800bbd8:	d104      	bne.n	800bbe4 <__swbuf_r+0x64>
 800bbda:	4621      	mov	r1, r4
 800bbdc:	4628      	mov	r0, r5
 800bbde:	f7ff ff45 	bl	800ba6c <_fflush_r>
 800bbe2:	b938      	cbnz	r0, 800bbf4 <__swbuf_r+0x74>
 800bbe4:	4638      	mov	r0, r7
 800bbe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbe8:	4621      	mov	r1, r4
 800bbea:	4628      	mov	r0, r5
 800bbec:	f000 f806 	bl	800bbfc <__swsetup_r>
 800bbf0:	2800      	cmp	r0, #0
 800bbf2:	d0d5      	beq.n	800bba0 <__swbuf_r+0x20>
 800bbf4:	f04f 37ff 	mov.w	r7, #4294967295
 800bbf8:	e7f4      	b.n	800bbe4 <__swbuf_r+0x64>
	...

0800bbfc <__swsetup_r>:
 800bbfc:	b538      	push	{r3, r4, r5, lr}
 800bbfe:	4b2a      	ldr	r3, [pc, #168]	; (800bca8 <__swsetup_r+0xac>)
 800bc00:	4605      	mov	r5, r0
 800bc02:	6818      	ldr	r0, [r3, #0]
 800bc04:	460c      	mov	r4, r1
 800bc06:	b118      	cbz	r0, 800bc10 <__swsetup_r+0x14>
 800bc08:	6a03      	ldr	r3, [r0, #32]
 800bc0a:	b90b      	cbnz	r3, 800bc10 <__swsetup_r+0x14>
 800bc0c:	f7fd ffb2 	bl	8009b74 <__sinit>
 800bc10:	89a3      	ldrh	r3, [r4, #12]
 800bc12:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc16:	0718      	lsls	r0, r3, #28
 800bc18:	d422      	bmi.n	800bc60 <__swsetup_r+0x64>
 800bc1a:	06d9      	lsls	r1, r3, #27
 800bc1c:	d407      	bmi.n	800bc2e <__swsetup_r+0x32>
 800bc1e:	2309      	movs	r3, #9
 800bc20:	602b      	str	r3, [r5, #0]
 800bc22:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bc26:	81a3      	strh	r3, [r4, #12]
 800bc28:	f04f 30ff 	mov.w	r0, #4294967295
 800bc2c:	e034      	b.n	800bc98 <__swsetup_r+0x9c>
 800bc2e:	0758      	lsls	r0, r3, #29
 800bc30:	d512      	bpl.n	800bc58 <__swsetup_r+0x5c>
 800bc32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc34:	b141      	cbz	r1, 800bc48 <__swsetup_r+0x4c>
 800bc36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc3a:	4299      	cmp	r1, r3
 800bc3c:	d002      	beq.n	800bc44 <__swsetup_r+0x48>
 800bc3e:	4628      	mov	r0, r5
 800bc40:	f7fe ff76 	bl	800ab30 <_free_r>
 800bc44:	2300      	movs	r3, #0
 800bc46:	6363      	str	r3, [r4, #52]	; 0x34
 800bc48:	89a3      	ldrh	r3, [r4, #12]
 800bc4a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bc4e:	81a3      	strh	r3, [r4, #12]
 800bc50:	2300      	movs	r3, #0
 800bc52:	6063      	str	r3, [r4, #4]
 800bc54:	6923      	ldr	r3, [r4, #16]
 800bc56:	6023      	str	r3, [r4, #0]
 800bc58:	89a3      	ldrh	r3, [r4, #12]
 800bc5a:	f043 0308 	orr.w	r3, r3, #8
 800bc5e:	81a3      	strh	r3, [r4, #12]
 800bc60:	6923      	ldr	r3, [r4, #16]
 800bc62:	b94b      	cbnz	r3, 800bc78 <__swsetup_r+0x7c>
 800bc64:	89a3      	ldrh	r3, [r4, #12]
 800bc66:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bc6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc6e:	d003      	beq.n	800bc78 <__swsetup_r+0x7c>
 800bc70:	4621      	mov	r1, r4
 800bc72:	4628      	mov	r0, r5
 800bc74:	f7ff ff48 	bl	800bb08 <__smakebuf_r>
 800bc78:	89a0      	ldrh	r0, [r4, #12]
 800bc7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc7e:	f010 0301 	ands.w	r3, r0, #1
 800bc82:	d00a      	beq.n	800bc9a <__swsetup_r+0x9e>
 800bc84:	2300      	movs	r3, #0
 800bc86:	60a3      	str	r3, [r4, #8]
 800bc88:	6963      	ldr	r3, [r4, #20]
 800bc8a:	425b      	negs	r3, r3
 800bc8c:	61a3      	str	r3, [r4, #24]
 800bc8e:	6923      	ldr	r3, [r4, #16]
 800bc90:	b943      	cbnz	r3, 800bca4 <__swsetup_r+0xa8>
 800bc92:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bc96:	d1c4      	bne.n	800bc22 <__swsetup_r+0x26>
 800bc98:	bd38      	pop	{r3, r4, r5, pc}
 800bc9a:	0781      	lsls	r1, r0, #30
 800bc9c:	bf58      	it	pl
 800bc9e:	6963      	ldrpl	r3, [r4, #20]
 800bca0:	60a3      	str	r3, [r4, #8]
 800bca2:	e7f4      	b.n	800bc8e <__swsetup_r+0x92>
 800bca4:	2000      	movs	r0, #0
 800bca6:	e7f7      	b.n	800bc98 <__swsetup_r+0x9c>
 800bca8:	2000010c 	.word	0x2000010c

0800bcac <memmove>:
 800bcac:	4288      	cmp	r0, r1
 800bcae:	b510      	push	{r4, lr}
 800bcb0:	eb01 0402 	add.w	r4, r1, r2
 800bcb4:	d902      	bls.n	800bcbc <memmove+0x10>
 800bcb6:	4284      	cmp	r4, r0
 800bcb8:	4623      	mov	r3, r4
 800bcba:	d807      	bhi.n	800bccc <memmove+0x20>
 800bcbc:	1e43      	subs	r3, r0, #1
 800bcbe:	42a1      	cmp	r1, r4
 800bcc0:	d008      	beq.n	800bcd4 <memmove+0x28>
 800bcc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bcc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bcca:	e7f8      	b.n	800bcbe <memmove+0x12>
 800bccc:	4402      	add	r2, r0
 800bcce:	4601      	mov	r1, r0
 800bcd0:	428a      	cmp	r2, r1
 800bcd2:	d100      	bne.n	800bcd6 <memmove+0x2a>
 800bcd4:	bd10      	pop	{r4, pc}
 800bcd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bcda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bcde:	e7f7      	b.n	800bcd0 <memmove+0x24>

0800bce0 <_fstat_r>:
 800bce0:	b538      	push	{r3, r4, r5, lr}
 800bce2:	4d07      	ldr	r5, [pc, #28]	; (800bd00 <_fstat_r+0x20>)
 800bce4:	2300      	movs	r3, #0
 800bce6:	4604      	mov	r4, r0
 800bce8:	4608      	mov	r0, r1
 800bcea:	4611      	mov	r1, r2
 800bcec:	602b      	str	r3, [r5, #0]
 800bcee:	f7f9 fa64 	bl	80051ba <_fstat>
 800bcf2:	1c43      	adds	r3, r0, #1
 800bcf4:	d102      	bne.n	800bcfc <_fstat_r+0x1c>
 800bcf6:	682b      	ldr	r3, [r5, #0]
 800bcf8:	b103      	cbz	r3, 800bcfc <_fstat_r+0x1c>
 800bcfa:	6023      	str	r3, [r4, #0]
 800bcfc:	bd38      	pop	{r3, r4, r5, pc}
 800bcfe:	bf00      	nop
 800bd00:	20005574 	.word	0x20005574

0800bd04 <_isatty_r>:
 800bd04:	b538      	push	{r3, r4, r5, lr}
 800bd06:	4d06      	ldr	r5, [pc, #24]	; (800bd20 <_isatty_r+0x1c>)
 800bd08:	2300      	movs	r3, #0
 800bd0a:	4604      	mov	r4, r0
 800bd0c:	4608      	mov	r0, r1
 800bd0e:	602b      	str	r3, [r5, #0]
 800bd10:	f7f9 fa56 	bl	80051c0 <_isatty>
 800bd14:	1c43      	adds	r3, r0, #1
 800bd16:	d102      	bne.n	800bd1e <_isatty_r+0x1a>
 800bd18:	682b      	ldr	r3, [r5, #0]
 800bd1a:	b103      	cbz	r3, 800bd1e <_isatty_r+0x1a>
 800bd1c:	6023      	str	r3, [r4, #0]
 800bd1e:	bd38      	pop	{r3, r4, r5, pc}
 800bd20:	20005574 	.word	0x20005574

0800bd24 <_sbrk_r>:
 800bd24:	b538      	push	{r3, r4, r5, lr}
 800bd26:	4d06      	ldr	r5, [pc, #24]	; (800bd40 <_sbrk_r+0x1c>)
 800bd28:	2300      	movs	r3, #0
 800bd2a:	4604      	mov	r4, r0
 800bd2c:	4608      	mov	r0, r1
 800bd2e:	602b      	str	r3, [r5, #0]
 800bd30:	f001 f91c 	bl	800cf6c <_sbrk>
 800bd34:	1c43      	adds	r3, r0, #1
 800bd36:	d102      	bne.n	800bd3e <_sbrk_r+0x1a>
 800bd38:	682b      	ldr	r3, [r5, #0]
 800bd3a:	b103      	cbz	r3, 800bd3e <_sbrk_r+0x1a>
 800bd3c:	6023      	str	r3, [r4, #0]
 800bd3e:	bd38      	pop	{r3, r4, r5, pc}
 800bd40:	20005574 	.word	0x20005574

0800bd44 <__assert_func>:
 800bd44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bd46:	4614      	mov	r4, r2
 800bd48:	461a      	mov	r2, r3
 800bd4a:	4b09      	ldr	r3, [pc, #36]	; (800bd70 <__assert_func+0x2c>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	4605      	mov	r5, r0
 800bd50:	68d8      	ldr	r0, [r3, #12]
 800bd52:	b14c      	cbz	r4, 800bd68 <__assert_func+0x24>
 800bd54:	4b07      	ldr	r3, [pc, #28]	; (800bd74 <__assert_func+0x30>)
 800bd56:	9100      	str	r1, [sp, #0]
 800bd58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bd5c:	4906      	ldr	r1, [pc, #24]	; (800bd78 <__assert_func+0x34>)
 800bd5e:	462b      	mov	r3, r5
 800bd60:	f000 f872 	bl	800be48 <fiprintf>
 800bd64:	f000 f882 	bl	800be6c <abort>
 800bd68:	4b04      	ldr	r3, [pc, #16]	; (800bd7c <__assert_func+0x38>)
 800bd6a:	461c      	mov	r4, r3
 800bd6c:	e7f3      	b.n	800bd56 <__assert_func+0x12>
 800bd6e:	bf00      	nop
 800bd70:	2000010c 	.word	0x2000010c
 800bd74:	0800efbf 	.word	0x0800efbf
 800bd78:	0800efcc 	.word	0x0800efcc
 800bd7c:	0800effa 	.word	0x0800effa

0800bd80 <_calloc_r>:
 800bd80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bd82:	fba1 2402 	umull	r2, r4, r1, r2
 800bd86:	b94c      	cbnz	r4, 800bd9c <_calloc_r+0x1c>
 800bd88:	4611      	mov	r1, r2
 800bd8a:	9201      	str	r2, [sp, #4]
 800bd8c:	f7fe ff44 	bl	800ac18 <_malloc_r>
 800bd90:	9a01      	ldr	r2, [sp, #4]
 800bd92:	4605      	mov	r5, r0
 800bd94:	b930      	cbnz	r0, 800bda4 <_calloc_r+0x24>
 800bd96:	4628      	mov	r0, r5
 800bd98:	b003      	add	sp, #12
 800bd9a:	bd30      	pop	{r4, r5, pc}
 800bd9c:	220c      	movs	r2, #12
 800bd9e:	6002      	str	r2, [r0, #0]
 800bda0:	2500      	movs	r5, #0
 800bda2:	e7f8      	b.n	800bd96 <_calloc_r+0x16>
 800bda4:	4621      	mov	r1, r4
 800bda6:	f7fe f846 	bl	8009e36 <memset>
 800bdaa:	e7f4      	b.n	800bd96 <_calloc_r+0x16>

0800bdac <__ascii_mbtowc>:
 800bdac:	b082      	sub	sp, #8
 800bdae:	b901      	cbnz	r1, 800bdb2 <__ascii_mbtowc+0x6>
 800bdb0:	a901      	add	r1, sp, #4
 800bdb2:	b142      	cbz	r2, 800bdc6 <__ascii_mbtowc+0x1a>
 800bdb4:	b14b      	cbz	r3, 800bdca <__ascii_mbtowc+0x1e>
 800bdb6:	7813      	ldrb	r3, [r2, #0]
 800bdb8:	600b      	str	r3, [r1, #0]
 800bdba:	7812      	ldrb	r2, [r2, #0]
 800bdbc:	1e10      	subs	r0, r2, #0
 800bdbe:	bf18      	it	ne
 800bdc0:	2001      	movne	r0, #1
 800bdc2:	b002      	add	sp, #8
 800bdc4:	4770      	bx	lr
 800bdc6:	4610      	mov	r0, r2
 800bdc8:	e7fb      	b.n	800bdc2 <__ascii_mbtowc+0x16>
 800bdca:	f06f 0001 	mvn.w	r0, #1
 800bdce:	e7f8      	b.n	800bdc2 <__ascii_mbtowc+0x16>

0800bdd0 <_realloc_r>:
 800bdd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdd4:	4680      	mov	r8, r0
 800bdd6:	4614      	mov	r4, r2
 800bdd8:	460e      	mov	r6, r1
 800bdda:	b921      	cbnz	r1, 800bde6 <_realloc_r+0x16>
 800bddc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bde0:	4611      	mov	r1, r2
 800bde2:	f7fe bf19 	b.w	800ac18 <_malloc_r>
 800bde6:	b92a      	cbnz	r2, 800bdf4 <_realloc_r+0x24>
 800bde8:	f7fe fea2 	bl	800ab30 <_free_r>
 800bdec:	4625      	mov	r5, r4
 800bdee:	4628      	mov	r0, r5
 800bdf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdf4:	f000 f841 	bl	800be7a <_malloc_usable_size_r>
 800bdf8:	4284      	cmp	r4, r0
 800bdfa:	4607      	mov	r7, r0
 800bdfc:	d802      	bhi.n	800be04 <_realloc_r+0x34>
 800bdfe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800be02:	d812      	bhi.n	800be2a <_realloc_r+0x5a>
 800be04:	4621      	mov	r1, r4
 800be06:	4640      	mov	r0, r8
 800be08:	f7fe ff06 	bl	800ac18 <_malloc_r>
 800be0c:	4605      	mov	r5, r0
 800be0e:	2800      	cmp	r0, #0
 800be10:	d0ed      	beq.n	800bdee <_realloc_r+0x1e>
 800be12:	42bc      	cmp	r4, r7
 800be14:	4622      	mov	r2, r4
 800be16:	4631      	mov	r1, r6
 800be18:	bf28      	it	cs
 800be1a:	463a      	movcs	r2, r7
 800be1c:	f7fe f885 	bl	8009f2a <memcpy>
 800be20:	4631      	mov	r1, r6
 800be22:	4640      	mov	r0, r8
 800be24:	f7fe fe84 	bl	800ab30 <_free_r>
 800be28:	e7e1      	b.n	800bdee <_realloc_r+0x1e>
 800be2a:	4635      	mov	r5, r6
 800be2c:	e7df      	b.n	800bdee <_realloc_r+0x1e>

0800be2e <__ascii_wctomb>:
 800be2e:	b149      	cbz	r1, 800be44 <__ascii_wctomb+0x16>
 800be30:	2aff      	cmp	r2, #255	; 0xff
 800be32:	bf85      	ittet	hi
 800be34:	238a      	movhi	r3, #138	; 0x8a
 800be36:	6003      	strhi	r3, [r0, #0]
 800be38:	700a      	strbls	r2, [r1, #0]
 800be3a:	f04f 30ff 	movhi.w	r0, #4294967295
 800be3e:	bf98      	it	ls
 800be40:	2001      	movls	r0, #1
 800be42:	4770      	bx	lr
 800be44:	4608      	mov	r0, r1
 800be46:	4770      	bx	lr

0800be48 <fiprintf>:
 800be48:	b40e      	push	{r1, r2, r3}
 800be4a:	b503      	push	{r0, r1, lr}
 800be4c:	4601      	mov	r1, r0
 800be4e:	ab03      	add	r3, sp, #12
 800be50:	4805      	ldr	r0, [pc, #20]	; (800be68 <fiprintf+0x20>)
 800be52:	f853 2b04 	ldr.w	r2, [r3], #4
 800be56:	6800      	ldr	r0, [r0, #0]
 800be58:	9301      	str	r3, [sp, #4]
 800be5a:	f7ff fc67 	bl	800b72c <_vfiprintf_r>
 800be5e:	b002      	add	sp, #8
 800be60:	f85d eb04 	ldr.w	lr, [sp], #4
 800be64:	b003      	add	sp, #12
 800be66:	4770      	bx	lr
 800be68:	2000010c 	.word	0x2000010c

0800be6c <abort>:
 800be6c:	b508      	push	{r3, lr}
 800be6e:	2006      	movs	r0, #6
 800be70:	f000 f834 	bl	800bedc <raise>
 800be74:	2001      	movs	r0, #1
 800be76:	f001 f887 	bl	800cf88 <_exit>

0800be7a <_malloc_usable_size_r>:
 800be7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be7e:	1f18      	subs	r0, r3, #4
 800be80:	2b00      	cmp	r3, #0
 800be82:	bfbc      	itt	lt
 800be84:	580b      	ldrlt	r3, [r1, r0]
 800be86:	18c0      	addlt	r0, r0, r3
 800be88:	4770      	bx	lr

0800be8a <_raise_r>:
 800be8a:	291f      	cmp	r1, #31
 800be8c:	b538      	push	{r3, r4, r5, lr}
 800be8e:	4604      	mov	r4, r0
 800be90:	460d      	mov	r5, r1
 800be92:	d904      	bls.n	800be9e <_raise_r+0x14>
 800be94:	2316      	movs	r3, #22
 800be96:	6003      	str	r3, [r0, #0]
 800be98:	f04f 30ff 	mov.w	r0, #4294967295
 800be9c:	bd38      	pop	{r3, r4, r5, pc}
 800be9e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800bea0:	b112      	cbz	r2, 800bea8 <_raise_r+0x1e>
 800bea2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bea6:	b94b      	cbnz	r3, 800bebc <_raise_r+0x32>
 800bea8:	4620      	mov	r0, r4
 800beaa:	f000 f831 	bl	800bf10 <_getpid_r>
 800beae:	462a      	mov	r2, r5
 800beb0:	4601      	mov	r1, r0
 800beb2:	4620      	mov	r0, r4
 800beb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800beb8:	f000 b818 	b.w	800beec <_kill_r>
 800bebc:	2b01      	cmp	r3, #1
 800bebe:	d00a      	beq.n	800bed6 <_raise_r+0x4c>
 800bec0:	1c59      	adds	r1, r3, #1
 800bec2:	d103      	bne.n	800becc <_raise_r+0x42>
 800bec4:	2316      	movs	r3, #22
 800bec6:	6003      	str	r3, [r0, #0]
 800bec8:	2001      	movs	r0, #1
 800beca:	e7e7      	b.n	800be9c <_raise_r+0x12>
 800becc:	2400      	movs	r4, #0
 800bece:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bed2:	4628      	mov	r0, r5
 800bed4:	4798      	blx	r3
 800bed6:	2000      	movs	r0, #0
 800bed8:	e7e0      	b.n	800be9c <_raise_r+0x12>
	...

0800bedc <raise>:
 800bedc:	4b02      	ldr	r3, [pc, #8]	; (800bee8 <raise+0xc>)
 800bede:	4601      	mov	r1, r0
 800bee0:	6818      	ldr	r0, [r3, #0]
 800bee2:	f7ff bfd2 	b.w	800be8a <_raise_r>
 800bee6:	bf00      	nop
 800bee8:	2000010c 	.word	0x2000010c

0800beec <_kill_r>:
 800beec:	b538      	push	{r3, r4, r5, lr}
 800beee:	4d07      	ldr	r5, [pc, #28]	; (800bf0c <_kill_r+0x20>)
 800bef0:	2300      	movs	r3, #0
 800bef2:	4604      	mov	r4, r0
 800bef4:	4608      	mov	r0, r1
 800bef6:	4611      	mov	r1, r2
 800bef8:	602b      	str	r3, [r5, #0]
 800befa:	f7f9 f960 	bl	80051be <_kill>
 800befe:	1c43      	adds	r3, r0, #1
 800bf00:	d102      	bne.n	800bf08 <_kill_r+0x1c>
 800bf02:	682b      	ldr	r3, [r5, #0]
 800bf04:	b103      	cbz	r3, 800bf08 <_kill_r+0x1c>
 800bf06:	6023      	str	r3, [r4, #0]
 800bf08:	bd38      	pop	{r3, r4, r5, pc}
 800bf0a:	bf00      	nop
 800bf0c:	20005574 	.word	0x20005574

0800bf10 <_getpid_r>:
 800bf10:	f7f9 b954 	b.w	80051bc <_getpid>

0800bf14 <atan2>:
 800bf14:	f000 ba88 	b.w	800c428 <__ieee754_atan2>

0800bf18 <sqrt>:
 800bf18:	b508      	push	{r3, lr}
 800bf1a:	ed2d 8b04 	vpush	{d8-d9}
 800bf1e:	eeb0 8b40 	vmov.f64	d8, d0
 800bf22:	f000 f9b9 	bl	800c298 <__ieee754_sqrt>
 800bf26:	eeb4 8b48 	vcmp.f64	d8, d8
 800bf2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf2e:	d60c      	bvs.n	800bf4a <sqrt+0x32>
 800bf30:	ed9f 9b07 	vldr	d9, [pc, #28]	; 800bf50 <sqrt+0x38>
 800bf34:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800bf38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf3c:	d505      	bpl.n	800bf4a <sqrt+0x32>
 800bf3e:	f001 f807 	bl	800cf50 <__errno>
 800bf42:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800bf46:	2321      	movs	r3, #33	; 0x21
 800bf48:	6003      	str	r3, [r0, #0]
 800bf4a:	ecbd 8b04 	vpop	{d8-d9}
 800bf4e:	bd08      	pop	{r3, pc}
	...

0800bf58 <atan>:
 800bf58:	b538      	push	{r3, r4, r5, lr}
 800bf5a:	eeb0 7b40 	vmov.f64	d7, d0
 800bf5e:	ee17 5a90 	vmov	r5, s15
 800bf62:	4b73      	ldr	r3, [pc, #460]	; (800c130 <atan+0x1d8>)
 800bf64:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800bf68:	429c      	cmp	r4, r3
 800bf6a:	dd13      	ble.n	800bf94 <atan+0x3c>
 800bf6c:	4b71      	ldr	r3, [pc, #452]	; (800c134 <atan+0x1dc>)
 800bf6e:	429c      	cmp	r4, r3
 800bf70:	dc03      	bgt.n	800bf7a <atan+0x22>
 800bf72:	d107      	bne.n	800bf84 <atan+0x2c>
 800bf74:	ee10 3a10 	vmov	r3, s0
 800bf78:	b123      	cbz	r3, 800bf84 <atan+0x2c>
 800bf7a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800bf7e:	eeb0 0b47 	vmov.f64	d0, d7
 800bf82:	bd38      	pop	{r3, r4, r5, pc}
 800bf84:	ed9f 7b4e 	vldr	d7, [pc, #312]	; 800c0c0 <atan+0x168>
 800bf88:	ed9f 6b4f 	vldr	d6, [pc, #316]	; 800c0c8 <atan+0x170>
 800bf8c:	2d00      	cmp	r5, #0
 800bf8e:	fe37 7b06 	vselgt.f64	d7, d7, d6
 800bf92:	e7f4      	b.n	800bf7e <atan+0x26>
 800bf94:	4b68      	ldr	r3, [pc, #416]	; (800c138 <atan+0x1e0>)
 800bf96:	429c      	cmp	r4, r3
 800bf98:	dc11      	bgt.n	800bfbe <atan+0x66>
 800bf9a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800bf9e:	429c      	cmp	r4, r3
 800bfa0:	dc0a      	bgt.n	800bfb8 <atan+0x60>
 800bfa2:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800bfa6:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 800c0d0 <atan+0x178>
 800bfaa:	ee30 6b06 	vadd.f64	d6, d0, d6
 800bfae:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800bfb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfb6:	dce2      	bgt.n	800bf7e <atan+0x26>
 800bfb8:	f04f 33ff 	mov.w	r3, #4294967295
 800bfbc:	e013      	b.n	800bfe6 <atan+0x8e>
 800bfbe:	f000 f913 	bl	800c1e8 <fabs>
 800bfc2:	4b5e      	ldr	r3, [pc, #376]	; (800c13c <atan+0x1e4>)
 800bfc4:	429c      	cmp	r4, r3
 800bfc6:	dc4f      	bgt.n	800c068 <atan+0x110>
 800bfc8:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800bfcc:	429c      	cmp	r4, r3
 800bfce:	dc41      	bgt.n	800c054 <atan+0xfc>
 800bfd0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800bfd4:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 800bfd8:	2300      	movs	r3, #0
 800bfda:	eea0 5b07 	vfma.f64	d5, d0, d7
 800bfde:	ee30 0b07 	vadd.f64	d0, d0, d7
 800bfe2:	ee85 7b00 	vdiv.f64	d7, d5, d0
 800bfe6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800c0d8 <atan+0x180>
 800bfea:	ee27 4b07 	vmul.f64	d4, d7, d7
 800bfee:	ee24 5b04 	vmul.f64	d5, d4, d4
 800bff2:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800c0e0 <atan+0x188>
 800bff6:	eea5 3b06 	vfma.f64	d3, d5, d6
 800bffa:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800c0e8 <atan+0x190>
 800bffe:	eea3 6b05 	vfma.f64	d6, d3, d5
 800c002:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800c0f0 <atan+0x198>
 800c006:	eea6 3b05 	vfma.f64	d3, d6, d5
 800c00a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800c0f8 <atan+0x1a0>
 800c00e:	eea3 6b05 	vfma.f64	d6, d3, d5
 800c012:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800c100 <atan+0x1a8>
 800c016:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 800c108 <atan+0x1b0>
 800c01a:	eea6 3b05 	vfma.f64	d3, d6, d5
 800c01e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800c110 <atan+0x1b8>
 800c022:	eea5 2b06 	vfma.f64	d2, d5, d6
 800c026:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800c118 <atan+0x1c0>
 800c02a:	eea2 6b05 	vfma.f64	d6, d2, d5
 800c02e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 800c120 <atan+0x1c8>
 800c032:	eea6 2b05 	vfma.f64	d2, d6, d5
 800c036:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800c128 <atan+0x1d0>
 800c03a:	1c5a      	adds	r2, r3, #1
 800c03c:	eea2 6b05 	vfma.f64	d6, d2, d5
 800c040:	ee26 6b05 	vmul.f64	d6, d6, d5
 800c044:	eea3 6b04 	vfma.f64	d6, d3, d4
 800c048:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c04c:	d121      	bne.n	800c092 <atan+0x13a>
 800c04e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c052:	e794      	b.n	800bf7e <atan+0x26>
 800c054:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800c058:	2301      	movs	r3, #1
 800c05a:	ee30 5b47 	vsub.f64	d5, d0, d7
 800c05e:	ee30 0b07 	vadd.f64	d0, d0, d7
 800c062:	ee85 7b00 	vdiv.f64	d7, d5, d0
 800c066:	e7be      	b.n	800bfe6 <atan+0x8e>
 800c068:	4b35      	ldr	r3, [pc, #212]	; (800c140 <atan+0x1e8>)
 800c06a:	429c      	cmp	r4, r3
 800c06c:	da0b      	bge.n	800c086 <atan+0x12e>
 800c06e:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800c072:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800c076:	ee30 5b47 	vsub.f64	d5, d0, d7
 800c07a:	eea0 6b07 	vfma.f64	d6, d0, d7
 800c07e:	2302      	movs	r3, #2
 800c080:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800c084:	e7af      	b.n	800bfe6 <atan+0x8e>
 800c086:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800c08a:	2303      	movs	r3, #3
 800c08c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800c090:	e7a9      	b.n	800bfe6 <atan+0x8e>
 800c092:	4a2c      	ldr	r2, [pc, #176]	; (800c144 <atan+0x1ec>)
 800c094:	492c      	ldr	r1, [pc, #176]	; (800c148 <atan+0x1f0>)
 800c096:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c09a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800c09e:	ed93 5b00 	vldr	d5, [r3]
 800c0a2:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c0a6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c0aa:	ed92 7b00 	vldr	d7, [r2]
 800c0ae:	2d00      	cmp	r5, #0
 800c0b0:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c0b4:	bfb8      	it	lt
 800c0b6:	eeb1 7b47 	vneglt.f64	d7, d7
 800c0ba:	e760      	b.n	800bf7e <atan+0x26>
 800c0bc:	f3af 8000 	nop.w
 800c0c0:	54442d18 	.word	0x54442d18
 800c0c4:	3ff921fb 	.word	0x3ff921fb
 800c0c8:	54442d18 	.word	0x54442d18
 800c0cc:	bff921fb 	.word	0xbff921fb
 800c0d0:	8800759c 	.word	0x8800759c
 800c0d4:	7e37e43c 	.word	0x7e37e43c
 800c0d8:	e322da11 	.word	0xe322da11
 800c0dc:	3f90ad3a 	.word	0x3f90ad3a
 800c0e0:	24760deb 	.word	0x24760deb
 800c0e4:	3fa97b4b 	.word	0x3fa97b4b
 800c0e8:	a0d03d51 	.word	0xa0d03d51
 800c0ec:	3fb10d66 	.word	0x3fb10d66
 800c0f0:	c54c206e 	.word	0xc54c206e
 800c0f4:	3fb745cd 	.word	0x3fb745cd
 800c0f8:	920083ff 	.word	0x920083ff
 800c0fc:	3fc24924 	.word	0x3fc24924
 800c100:	5555550d 	.word	0x5555550d
 800c104:	3fd55555 	.word	0x3fd55555
 800c108:	52defd9a 	.word	0x52defd9a
 800c10c:	bfadde2d 	.word	0xbfadde2d
 800c110:	2c6a6c2f 	.word	0x2c6a6c2f
 800c114:	bfa2b444 	.word	0xbfa2b444
 800c118:	af749a6d 	.word	0xaf749a6d
 800c11c:	bfb3b0f2 	.word	0xbfb3b0f2
 800c120:	fe231671 	.word	0xfe231671
 800c124:	bfbc71c6 	.word	0xbfbc71c6
 800c128:	9998ebc4 	.word	0x9998ebc4
 800c12c:	bfc99999 	.word	0xbfc99999
 800c130:	440fffff 	.word	0x440fffff
 800c134:	7ff00000 	.word	0x7ff00000
 800c138:	3fdbffff 	.word	0x3fdbffff
 800c13c:	3ff2ffff 	.word	0x3ff2ffff
 800c140:	40038000 	.word	0x40038000
 800c144:	0800f100 	.word	0x0800f100
 800c148:	0800f120 	.word	0x0800f120
 800c14c:	00000000 	.word	0x00000000

0800c150 <cos>:
 800c150:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c152:	eeb0 7b40 	vmov.f64	d7, d0
 800c156:	ee17 3a90 	vmov	r3, s15
 800c15a:	4a21      	ldr	r2, [pc, #132]	; (800c1e0 <cos+0x90>)
 800c15c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c160:	4293      	cmp	r3, r2
 800c162:	dc06      	bgt.n	800c172 <cos+0x22>
 800c164:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 800c1d8 <cos+0x88>
 800c168:	b005      	add	sp, #20
 800c16a:	f85d eb04 	ldr.w	lr, [sp], #4
 800c16e:	f000 b897 	b.w	800c2a0 <__kernel_cos>
 800c172:	4a1c      	ldr	r2, [pc, #112]	; (800c1e4 <cos+0x94>)
 800c174:	4293      	cmp	r3, r2
 800c176:	dd04      	ble.n	800c182 <cos+0x32>
 800c178:	ee30 0b40 	vsub.f64	d0, d0, d0
 800c17c:	b005      	add	sp, #20
 800c17e:	f85d fb04 	ldr.w	pc, [sp], #4
 800c182:	4668      	mov	r0, sp
 800c184:	f000 fa14 	bl	800c5b0 <__ieee754_rem_pio2>
 800c188:	f000 0003 	and.w	r0, r0, #3
 800c18c:	2801      	cmp	r0, #1
 800c18e:	d009      	beq.n	800c1a4 <cos+0x54>
 800c190:	2802      	cmp	r0, #2
 800c192:	d010      	beq.n	800c1b6 <cos+0x66>
 800c194:	b9b0      	cbnz	r0, 800c1c4 <cos+0x74>
 800c196:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c19a:	ed9d 0b00 	vldr	d0, [sp]
 800c19e:	f000 f87f 	bl	800c2a0 <__kernel_cos>
 800c1a2:	e7eb      	b.n	800c17c <cos+0x2c>
 800c1a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c1a8:	ed9d 0b00 	vldr	d0, [sp]
 800c1ac:	f000 f8e4 	bl	800c378 <__kernel_sin>
 800c1b0:	eeb1 0b40 	vneg.f64	d0, d0
 800c1b4:	e7e2      	b.n	800c17c <cos+0x2c>
 800c1b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c1ba:	ed9d 0b00 	vldr	d0, [sp]
 800c1be:	f000 f86f 	bl	800c2a0 <__kernel_cos>
 800c1c2:	e7f5      	b.n	800c1b0 <cos+0x60>
 800c1c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c1c8:	ed9d 0b00 	vldr	d0, [sp]
 800c1cc:	2001      	movs	r0, #1
 800c1ce:	f000 f8d3 	bl	800c378 <__kernel_sin>
 800c1d2:	e7d3      	b.n	800c17c <cos+0x2c>
 800c1d4:	f3af 8000 	nop.w
	...
 800c1e0:	3fe921fb 	.word	0x3fe921fb
 800c1e4:	7fefffff 	.word	0x7fefffff

0800c1e8 <fabs>:
 800c1e8:	ec51 0b10 	vmov	r0, r1, d0
 800c1ec:	ee10 2a10 	vmov	r2, s0
 800c1f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c1f4:	ec43 2b10 	vmov	d0, r2, r3
 800c1f8:	4770      	bx	lr
 800c1fa:	0000      	movs	r0, r0
 800c1fc:	0000      	movs	r0, r0
	...

0800c200 <sin>:
 800c200:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c202:	eeb0 7b40 	vmov.f64	d7, d0
 800c206:	ee17 3a90 	vmov	r3, s15
 800c20a:	4a21      	ldr	r2, [pc, #132]	; (800c290 <sin+0x90>)
 800c20c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c210:	4293      	cmp	r3, r2
 800c212:	dc07      	bgt.n	800c224 <sin+0x24>
 800c214:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 800c288 <sin+0x88>
 800c218:	2000      	movs	r0, #0
 800c21a:	b005      	add	sp, #20
 800c21c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c220:	f000 b8aa 	b.w	800c378 <__kernel_sin>
 800c224:	4a1b      	ldr	r2, [pc, #108]	; (800c294 <sin+0x94>)
 800c226:	4293      	cmp	r3, r2
 800c228:	dd04      	ble.n	800c234 <sin+0x34>
 800c22a:	ee30 0b40 	vsub.f64	d0, d0, d0
 800c22e:	b005      	add	sp, #20
 800c230:	f85d fb04 	ldr.w	pc, [sp], #4
 800c234:	4668      	mov	r0, sp
 800c236:	f000 f9bb 	bl	800c5b0 <__ieee754_rem_pio2>
 800c23a:	f000 0003 	and.w	r0, r0, #3
 800c23e:	2801      	cmp	r0, #1
 800c240:	d00a      	beq.n	800c258 <sin+0x58>
 800c242:	2802      	cmp	r0, #2
 800c244:	d00f      	beq.n	800c266 <sin+0x66>
 800c246:	b9c0      	cbnz	r0, 800c27a <sin+0x7a>
 800c248:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c24c:	ed9d 0b00 	vldr	d0, [sp]
 800c250:	2001      	movs	r0, #1
 800c252:	f000 f891 	bl	800c378 <__kernel_sin>
 800c256:	e7ea      	b.n	800c22e <sin+0x2e>
 800c258:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c25c:	ed9d 0b00 	vldr	d0, [sp]
 800c260:	f000 f81e 	bl	800c2a0 <__kernel_cos>
 800c264:	e7e3      	b.n	800c22e <sin+0x2e>
 800c266:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c26a:	ed9d 0b00 	vldr	d0, [sp]
 800c26e:	2001      	movs	r0, #1
 800c270:	f000 f882 	bl	800c378 <__kernel_sin>
 800c274:	eeb1 0b40 	vneg.f64	d0, d0
 800c278:	e7d9      	b.n	800c22e <sin+0x2e>
 800c27a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c27e:	ed9d 0b00 	vldr	d0, [sp]
 800c282:	f000 f80d 	bl	800c2a0 <__kernel_cos>
 800c286:	e7f5      	b.n	800c274 <sin+0x74>
	...
 800c290:	3fe921fb 	.word	0x3fe921fb
 800c294:	7fefffff 	.word	0x7fefffff

0800c298 <__ieee754_sqrt>:
 800c298:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800c29c:	4770      	bx	lr
	...

0800c2a0 <__kernel_cos>:
 800c2a0:	ee10 1a90 	vmov	r1, s1
 800c2a4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800c2a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c2ac:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800c2b0:	da05      	bge.n	800c2be <__kernel_cos+0x1e>
 800c2b2:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800c2b6:	ee17 3a90 	vmov	r3, s15
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d03d      	beq.n	800c33a <__kernel_cos+0x9a>
 800c2be:	ee20 5b00 	vmul.f64	d5, d0, d0
 800c2c2:	ee21 1b40 	vnmul.f64	d1, d1, d0
 800c2c6:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 800c340 <__kernel_cos+0xa0>
 800c2ca:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 800c348 <__kernel_cos+0xa8>
 800c2ce:	eea5 4b07 	vfma.f64	d4, d5, d7
 800c2d2:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800c350 <__kernel_cos+0xb0>
 800c2d6:	eea4 7b05 	vfma.f64	d7, d4, d5
 800c2da:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 800c358 <__kernel_cos+0xb8>
 800c2de:	eea7 4b05 	vfma.f64	d4, d7, d5
 800c2e2:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800c360 <__kernel_cos+0xc0>
 800c2e6:	4b22      	ldr	r3, [pc, #136]	; (800c370 <__kernel_cos+0xd0>)
 800c2e8:	eea4 7b05 	vfma.f64	d7, d4, d5
 800c2ec:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 800c368 <__kernel_cos+0xc8>
 800c2f0:	4299      	cmp	r1, r3
 800c2f2:	eea7 4b05 	vfma.f64	d4, d7, d5
 800c2f6:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800c2fa:	ee24 4b05 	vmul.f64	d4, d4, d5
 800c2fe:	ee25 7b07 	vmul.f64	d7, d5, d7
 800c302:	eea5 1b04 	vfma.f64	d1, d5, d4
 800c306:	dc04      	bgt.n	800c312 <__kernel_cos+0x72>
 800c308:	ee37 7b41 	vsub.f64	d7, d7, d1
 800c30c:	ee36 0b47 	vsub.f64	d0, d6, d7
 800c310:	4770      	bx	lr
 800c312:	4b18      	ldr	r3, [pc, #96]	; (800c374 <__kernel_cos+0xd4>)
 800c314:	4299      	cmp	r1, r3
 800c316:	dc0d      	bgt.n	800c334 <__kernel_cos+0x94>
 800c318:	2200      	movs	r2, #0
 800c31a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800c31e:	ec43 2b15 	vmov	d5, r2, r3
 800c322:	ee36 0b45 	vsub.f64	d0, d6, d5
 800c326:	ee37 7b45 	vsub.f64	d7, d7, d5
 800c32a:	ee37 7b41 	vsub.f64	d7, d7, d1
 800c32e:	ee30 0b47 	vsub.f64	d0, d0, d7
 800c332:	4770      	bx	lr
 800c334:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800c338:	e7f3      	b.n	800c322 <__kernel_cos+0x82>
 800c33a:	eeb0 0b46 	vmov.f64	d0, d6
 800c33e:	4770      	bx	lr
 800c340:	be8838d4 	.word	0xbe8838d4
 800c344:	bda8fae9 	.word	0xbda8fae9
 800c348:	bdb4b1c4 	.word	0xbdb4b1c4
 800c34c:	3e21ee9e 	.word	0x3e21ee9e
 800c350:	809c52ad 	.word	0x809c52ad
 800c354:	be927e4f 	.word	0xbe927e4f
 800c358:	19cb1590 	.word	0x19cb1590
 800c35c:	3efa01a0 	.word	0x3efa01a0
 800c360:	16c15177 	.word	0x16c15177
 800c364:	bf56c16c 	.word	0xbf56c16c
 800c368:	5555554c 	.word	0x5555554c
 800c36c:	3fa55555 	.word	0x3fa55555
 800c370:	3fd33332 	.word	0x3fd33332
 800c374:	3fe90000 	.word	0x3fe90000

0800c378 <__kernel_sin>:
 800c378:	ee10 3a90 	vmov	r3, s1
 800c37c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c380:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c384:	da04      	bge.n	800c390 <__kernel_sin+0x18>
 800c386:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800c38a:	ee17 3a90 	vmov	r3, s15
 800c38e:	b35b      	cbz	r3, 800c3e8 <__kernel_sin+0x70>
 800c390:	ee20 6b00 	vmul.f64	d6, d0, d0
 800c394:	ee20 5b06 	vmul.f64	d5, d0, d6
 800c398:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800c3f0 <__kernel_sin+0x78>
 800c39c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800c3f8 <__kernel_sin+0x80>
 800c3a0:	eea6 4b07 	vfma.f64	d4, d6, d7
 800c3a4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800c400 <__kernel_sin+0x88>
 800c3a8:	eea4 7b06 	vfma.f64	d7, d4, d6
 800c3ac:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800c408 <__kernel_sin+0x90>
 800c3b0:	eea7 4b06 	vfma.f64	d4, d7, d6
 800c3b4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800c410 <__kernel_sin+0x98>
 800c3b8:	eea4 7b06 	vfma.f64	d7, d4, d6
 800c3bc:	b930      	cbnz	r0, 800c3cc <__kernel_sin+0x54>
 800c3be:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800c418 <__kernel_sin+0xa0>
 800c3c2:	eea6 4b07 	vfma.f64	d4, d6, d7
 800c3c6:	eea4 0b05 	vfma.f64	d0, d4, d5
 800c3ca:	4770      	bx	lr
 800c3cc:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800c3d0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800c3d4:	eea1 7b04 	vfma.f64	d7, d1, d4
 800c3d8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800c3dc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800c420 <__kernel_sin+0xa8>
 800c3e0:	eea5 1b07 	vfma.f64	d1, d5, d7
 800c3e4:	ee30 0b41 	vsub.f64	d0, d0, d1
 800c3e8:	4770      	bx	lr
 800c3ea:	bf00      	nop
 800c3ec:	f3af 8000 	nop.w
 800c3f0:	5acfd57c 	.word	0x5acfd57c
 800c3f4:	3de5d93a 	.word	0x3de5d93a
 800c3f8:	8a2b9ceb 	.word	0x8a2b9ceb
 800c3fc:	be5ae5e6 	.word	0xbe5ae5e6
 800c400:	57b1fe7d 	.word	0x57b1fe7d
 800c404:	3ec71de3 	.word	0x3ec71de3
 800c408:	19c161d5 	.word	0x19c161d5
 800c40c:	bf2a01a0 	.word	0xbf2a01a0
 800c410:	1110f8a6 	.word	0x1110f8a6
 800c414:	3f811111 	.word	0x3f811111
 800c418:	55555549 	.word	0x55555549
 800c41c:	bfc55555 	.word	0xbfc55555
 800c420:	55555549 	.word	0x55555549
 800c424:	3fc55555 	.word	0x3fc55555

0800c428 <__ieee754_atan2>:
 800c428:	ee11 1a10 	vmov	r1, s2
 800c42c:	eeb0 7b40 	vmov.f64	d7, d0
 800c430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c432:	ee11 5a90 	vmov	r5, s3
 800c436:	424b      	negs	r3, r1
 800c438:	4f59      	ldr	r7, [pc, #356]	; (800c5a0 <__ieee754_atan2+0x178>)
 800c43a:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800c43e:	430b      	orrs	r3, r1
 800c440:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800c444:	42bb      	cmp	r3, r7
 800c446:	d80d      	bhi.n	800c464 <__ieee754_atan2+0x3c>
 800c448:	ee10 ca10 	vmov	ip, s0
 800c44c:	ee17 6a90 	vmov	r6, s15
 800c450:	f1cc 0000 	rsb	r0, ip, #0
 800c454:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800c458:	ea40 000c 	orr.w	r0, r0, ip
 800c45c:	ea43 70d0 	orr.w	r0, r3, r0, lsr #31
 800c460:	42b8      	cmp	r0, r7
 800c462:	d904      	bls.n	800c46e <__ieee754_atan2+0x46>
 800c464:	ee37 7b01 	vadd.f64	d7, d7, d1
 800c468:	eeb0 0b47 	vmov.f64	d0, d7
 800c46c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c46e:	f105 4040 	add.w	r0, r5, #3221225472	; 0xc0000000
 800c472:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c476:	4308      	orrs	r0, r1
 800c478:	d103      	bne.n	800c482 <__ieee754_atan2+0x5a>
 800c47a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c47e:	f7ff bd6b 	b.w	800bf58 <atan>
 800c482:	17ac      	asrs	r4, r5, #30
 800c484:	f004 0402 	and.w	r4, r4, #2
 800c488:	ea53 0c0c 	orrs.w	ip, r3, ip
 800c48c:	ea44 74d6 	orr.w	r4, r4, r6, lsr #31
 800c490:	d107      	bne.n	800c4a2 <__ieee754_atan2+0x7a>
 800c492:	2c02      	cmp	r4, #2
 800c494:	d05c      	beq.n	800c550 <__ieee754_atan2+0x128>
 800c496:	ed9f 6b34 	vldr	d6, [pc, #208]	; 800c568 <__ieee754_atan2+0x140>
 800c49a:	2c03      	cmp	r4, #3
 800c49c:	fe06 7b00 	vseleq.f64	d7, d6, d0
 800c4a0:	e7e2      	b.n	800c468 <__ieee754_atan2+0x40>
 800c4a2:	4311      	orrs	r1, r2
 800c4a4:	d107      	bne.n	800c4b6 <__ieee754_atan2+0x8e>
 800c4a6:	ed9f 7b32 	vldr	d7, [pc, #200]	; 800c570 <__ieee754_atan2+0x148>
 800c4aa:	ed9f 6b33 	vldr	d6, [pc, #204]	; 800c578 <__ieee754_atan2+0x150>
 800c4ae:	2e00      	cmp	r6, #0
 800c4b0:	fe27 7b06 	vselge.f64	d7, d7, d6
 800c4b4:	e7d8      	b.n	800c468 <__ieee754_atan2+0x40>
 800c4b6:	42ba      	cmp	r2, r7
 800c4b8:	d10f      	bne.n	800c4da <__ieee754_atan2+0xb2>
 800c4ba:	4293      	cmp	r3, r2
 800c4bc:	f104 34ff 	add.w	r4, r4, #4294967295
 800c4c0:	d107      	bne.n	800c4d2 <__ieee754_atan2+0xaa>
 800c4c2:	2c02      	cmp	r4, #2
 800c4c4:	d847      	bhi.n	800c556 <__ieee754_atan2+0x12e>
 800c4c6:	4b37      	ldr	r3, [pc, #220]	; (800c5a4 <__ieee754_atan2+0x17c>)
 800c4c8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c4cc:	ed93 7b00 	vldr	d7, [r3]
 800c4d0:	e7ca      	b.n	800c468 <__ieee754_atan2+0x40>
 800c4d2:	2c02      	cmp	r4, #2
 800c4d4:	d842      	bhi.n	800c55c <__ieee754_atan2+0x134>
 800c4d6:	4b34      	ldr	r3, [pc, #208]	; (800c5a8 <__ieee754_atan2+0x180>)
 800c4d8:	e7f6      	b.n	800c4c8 <__ieee754_atan2+0xa0>
 800c4da:	42bb      	cmp	r3, r7
 800c4dc:	d0e3      	beq.n	800c4a6 <__ieee754_atan2+0x7e>
 800c4de:	1a9b      	subs	r3, r3, r2
 800c4e0:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800c4e4:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c4e8:	da1a      	bge.n	800c520 <__ieee754_atan2+0xf8>
 800c4ea:	2d00      	cmp	r5, #0
 800c4ec:	da01      	bge.n	800c4f2 <__ieee754_atan2+0xca>
 800c4ee:	323c      	adds	r2, #60	; 0x3c
 800c4f0:	db19      	blt.n	800c526 <__ieee754_atan2+0xfe>
 800c4f2:	ee87 0b01 	vdiv.f64	d0, d7, d1
 800c4f6:	f7ff fe77 	bl	800c1e8 <fabs>
 800c4fa:	f7ff fd2d 	bl	800bf58 <atan>
 800c4fe:	eeb0 7b40 	vmov.f64	d7, d0
 800c502:	2c01      	cmp	r4, #1
 800c504:	d012      	beq.n	800c52c <__ieee754_atan2+0x104>
 800c506:	2c02      	cmp	r4, #2
 800c508:	d019      	beq.n	800c53e <__ieee754_atan2+0x116>
 800c50a:	2c00      	cmp	r4, #0
 800c50c:	d0ac      	beq.n	800c468 <__ieee754_atan2+0x40>
 800c50e:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 800c580 <__ieee754_atan2+0x158>
 800c512:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c516:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 800c588 <__ieee754_atan2+0x160>
 800c51a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c51e:	e7a3      	b.n	800c468 <__ieee754_atan2+0x40>
 800c520:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800c570 <__ieee754_atan2+0x148>
 800c524:	e7ed      	b.n	800c502 <__ieee754_atan2+0xda>
 800c526:	ed9f 7b1a 	vldr	d7, [pc, #104]	; 800c590 <__ieee754_atan2+0x168>
 800c52a:	e7ea      	b.n	800c502 <__ieee754_atan2+0xda>
 800c52c:	ee17 1a90 	vmov	r1, s15
 800c530:	ec53 2b17 	vmov	r2, r3, d7
 800c534:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c538:	ec43 2b17 	vmov	d7, r2, r3
 800c53c:	e794      	b.n	800c468 <__ieee754_atan2+0x40>
 800c53e:	ed9f 6b10 	vldr	d6, [pc, #64]	; 800c580 <__ieee754_atan2+0x158>
 800c542:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c546:	ed9f 6b10 	vldr	d6, [pc, #64]	; 800c588 <__ieee754_atan2+0x160>
 800c54a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c54e:	e78b      	b.n	800c468 <__ieee754_atan2+0x40>
 800c550:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800c588 <__ieee754_atan2+0x160>
 800c554:	e788      	b.n	800c468 <__ieee754_atan2+0x40>
 800c556:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800c598 <__ieee754_atan2+0x170>
 800c55a:	e785      	b.n	800c468 <__ieee754_atan2+0x40>
 800c55c:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800c590 <__ieee754_atan2+0x168>
 800c560:	e782      	b.n	800c468 <__ieee754_atan2+0x40>
 800c562:	bf00      	nop
 800c564:	f3af 8000 	nop.w
 800c568:	54442d18 	.word	0x54442d18
 800c56c:	c00921fb 	.word	0xc00921fb
 800c570:	54442d18 	.word	0x54442d18
 800c574:	3ff921fb 	.word	0x3ff921fb
 800c578:	54442d18 	.word	0x54442d18
 800c57c:	bff921fb 	.word	0xbff921fb
 800c580:	33145c07 	.word	0x33145c07
 800c584:	3ca1a626 	.word	0x3ca1a626
 800c588:	54442d18 	.word	0x54442d18
 800c58c:	400921fb 	.word	0x400921fb
	...
 800c598:	54442d18 	.word	0x54442d18
 800c59c:	3fe921fb 	.word	0x3fe921fb
 800c5a0:	7ff00000 	.word	0x7ff00000
 800c5a4:	0800f140 	.word	0x0800f140
 800c5a8:	0800f158 	.word	0x0800f158
 800c5ac:	00000000 	.word	0x00000000

0800c5b0 <__ieee754_rem_pio2>:
 800c5b0:	b570      	push	{r4, r5, r6, lr}
 800c5b2:	eeb0 7b40 	vmov.f64	d7, d0
 800c5b6:	ee17 5a90 	vmov	r5, s15
 800c5ba:	4b99      	ldr	r3, [pc, #612]	; (800c820 <__ieee754_rem_pio2+0x270>)
 800c5bc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c5c0:	429e      	cmp	r6, r3
 800c5c2:	b088      	sub	sp, #32
 800c5c4:	4604      	mov	r4, r0
 800c5c6:	dc07      	bgt.n	800c5d8 <__ieee754_rem_pio2+0x28>
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	ed84 0b00 	vstr	d0, [r4]
 800c5d0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c5d4:	2000      	movs	r0, #0
 800c5d6:	e01b      	b.n	800c610 <__ieee754_rem_pio2+0x60>
 800c5d8:	4b92      	ldr	r3, [pc, #584]	; (800c824 <__ieee754_rem_pio2+0x274>)
 800c5da:	429e      	cmp	r6, r3
 800c5dc:	dc3b      	bgt.n	800c656 <__ieee754_rem_pio2+0xa6>
 800c5de:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800c5e2:	2d00      	cmp	r5, #0
 800c5e4:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 800c7e0 <__ieee754_rem_pio2+0x230>
 800c5e8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800c5ec:	dd19      	ble.n	800c622 <__ieee754_rem_pio2+0x72>
 800c5ee:	ee30 7b46 	vsub.f64	d7, d0, d6
 800c5f2:	429e      	cmp	r6, r3
 800c5f4:	d00e      	beq.n	800c614 <__ieee754_rem_pio2+0x64>
 800c5f6:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800c7e8 <__ieee754_rem_pio2+0x238>
 800c5fa:	ee37 5b46 	vsub.f64	d5, d7, d6
 800c5fe:	ee37 7b45 	vsub.f64	d7, d7, d5
 800c602:	ed84 5b00 	vstr	d5, [r4]
 800c606:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c60a:	ed84 7b02 	vstr	d7, [r4, #8]
 800c60e:	2001      	movs	r0, #1
 800c610:	b008      	add	sp, #32
 800c612:	bd70      	pop	{r4, r5, r6, pc}
 800c614:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800c7f0 <__ieee754_rem_pio2+0x240>
 800c618:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c61c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800c7f8 <__ieee754_rem_pio2+0x248>
 800c620:	e7eb      	b.n	800c5fa <__ieee754_rem_pio2+0x4a>
 800c622:	429e      	cmp	r6, r3
 800c624:	ee30 7b06 	vadd.f64	d7, d0, d6
 800c628:	d00e      	beq.n	800c648 <__ieee754_rem_pio2+0x98>
 800c62a:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 800c7e8 <__ieee754_rem_pio2+0x238>
 800c62e:	ee37 5b06 	vadd.f64	d5, d7, d6
 800c632:	ee37 7b45 	vsub.f64	d7, d7, d5
 800c636:	ed84 5b00 	vstr	d5, [r4]
 800c63a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c63e:	f04f 30ff 	mov.w	r0, #4294967295
 800c642:	ed84 7b02 	vstr	d7, [r4, #8]
 800c646:	e7e3      	b.n	800c610 <__ieee754_rem_pio2+0x60>
 800c648:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800c7f0 <__ieee754_rem_pio2+0x240>
 800c64c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c650:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800c7f8 <__ieee754_rem_pio2+0x248>
 800c654:	e7eb      	b.n	800c62e <__ieee754_rem_pio2+0x7e>
 800c656:	4b74      	ldr	r3, [pc, #464]	; (800c828 <__ieee754_rem_pio2+0x278>)
 800c658:	429e      	cmp	r6, r3
 800c65a:	dc70      	bgt.n	800c73e <__ieee754_rem_pio2+0x18e>
 800c65c:	f7ff fdc4 	bl	800c1e8 <fabs>
 800c660:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800c664:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800c800 <__ieee754_rem_pio2+0x250>
 800c668:	eea0 7b06 	vfma.f64	d7, d0, d6
 800c66c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800c670:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800c674:	ee17 0a90 	vmov	r0, s15
 800c678:	eeb1 4b45 	vneg.f64	d4, d5
 800c67c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800c7e0 <__ieee754_rem_pio2+0x230>
 800c680:	eea5 0b47 	vfms.f64	d0, d5, d7
 800c684:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800c7e8 <__ieee754_rem_pio2+0x238>
 800c688:	281f      	cmp	r0, #31
 800c68a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800c68e:	ee30 6b47 	vsub.f64	d6, d0, d7
 800c692:	dc08      	bgt.n	800c6a6 <__ieee754_rem_pio2+0xf6>
 800c694:	4b65      	ldr	r3, [pc, #404]	; (800c82c <__ieee754_rem_pio2+0x27c>)
 800c696:	1e42      	subs	r2, r0, #1
 800c698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c69c:	42b3      	cmp	r3, r6
 800c69e:	d002      	beq.n	800c6a6 <__ieee754_rem_pio2+0xf6>
 800c6a0:	ed84 6b00 	vstr	d6, [r4]
 800c6a4:	e024      	b.n	800c6f0 <__ieee754_rem_pio2+0x140>
 800c6a6:	ee16 3a90 	vmov	r3, s13
 800c6aa:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800c6ae:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800c6b2:	2b10      	cmp	r3, #16
 800c6b4:	ea4f 5226 	mov.w	r2, r6, asr #20
 800c6b8:	ddf2      	ble.n	800c6a0 <__ieee754_rem_pio2+0xf0>
 800c6ba:	eeb0 6b40 	vmov.f64	d6, d0
 800c6be:	ed9f 3b4c 	vldr	d3, [pc, #304]	; 800c7f0 <__ieee754_rem_pio2+0x240>
 800c6c2:	eea4 6b03 	vfma.f64	d6, d4, d3
 800c6c6:	ee30 7b46 	vsub.f64	d7, d0, d6
 800c6ca:	eea4 7b03 	vfma.f64	d7, d4, d3
 800c6ce:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 800c7f8 <__ieee754_rem_pio2+0x248>
 800c6d2:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800c6d6:	ee36 3b47 	vsub.f64	d3, d6, d7
 800c6da:	ee13 3a90 	vmov	r3, s7
 800c6de:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800c6e2:	1ad3      	subs	r3, r2, r3
 800c6e4:	2b31      	cmp	r3, #49	; 0x31
 800c6e6:	dc17      	bgt.n	800c718 <__ieee754_rem_pio2+0x168>
 800c6e8:	eeb0 0b46 	vmov.f64	d0, d6
 800c6ec:	ed84 3b00 	vstr	d3, [r4]
 800c6f0:	ed94 6b00 	vldr	d6, [r4]
 800c6f4:	2d00      	cmp	r5, #0
 800c6f6:	ee30 0b46 	vsub.f64	d0, d0, d6
 800c6fa:	ee30 0b47 	vsub.f64	d0, d0, d7
 800c6fe:	ed84 0b02 	vstr	d0, [r4, #8]
 800c702:	da85      	bge.n	800c610 <__ieee754_rem_pio2+0x60>
 800c704:	eeb1 6b46 	vneg.f64	d6, d6
 800c708:	eeb1 0b40 	vneg.f64	d0, d0
 800c70c:	ed84 6b00 	vstr	d6, [r4]
 800c710:	ed84 0b02 	vstr	d0, [r4, #8]
 800c714:	4240      	negs	r0, r0
 800c716:	e77b      	b.n	800c610 <__ieee754_rem_pio2+0x60>
 800c718:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 800c808 <__ieee754_rem_pio2+0x258>
 800c71c:	eeb0 0b46 	vmov.f64	d0, d6
 800c720:	eea4 0b07 	vfma.f64	d0, d4, d7
 800c724:	ee36 6b40 	vsub.f64	d6, d6, d0
 800c728:	eea4 6b07 	vfma.f64	d6, d4, d7
 800c72c:	ed9f 4b38 	vldr	d4, [pc, #224]	; 800c810 <__ieee754_rem_pio2+0x260>
 800c730:	eeb0 7b46 	vmov.f64	d7, d6
 800c734:	ee95 7b04 	vfnms.f64	d7, d5, d4
 800c738:	ee30 6b47 	vsub.f64	d6, d0, d7
 800c73c:	e7b0      	b.n	800c6a0 <__ieee754_rem_pio2+0xf0>
 800c73e:	4b3c      	ldr	r3, [pc, #240]	; (800c830 <__ieee754_rem_pio2+0x280>)
 800c740:	429e      	cmp	r6, r3
 800c742:	dd06      	ble.n	800c752 <__ieee754_rem_pio2+0x1a2>
 800c744:	ee30 7b40 	vsub.f64	d7, d0, d0
 800c748:	ed80 7b02 	vstr	d7, [r0, #8]
 800c74c:	ed80 7b00 	vstr	d7, [r0]
 800c750:	e740      	b.n	800c5d4 <__ieee754_rem_pio2+0x24>
 800c752:	1532      	asrs	r2, r6, #20
 800c754:	ee10 0a10 	vmov	r0, s0
 800c758:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800c75c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800c760:	ec41 0b17 	vmov	d7, r0, r1
 800c764:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800c768:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 800c818 <__ieee754_rem_pio2+0x268>
 800c76c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800c770:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c774:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c778:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c77c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800c780:	a808      	add	r0, sp, #32
 800c782:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800c786:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c78a:	ed8d 6b04 	vstr	d6, [sp, #16]
 800c78e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c792:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c796:	2103      	movs	r1, #3
 800c798:	ed30 7b02 	vldmdb	r0!, {d7}
 800c79c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c7a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7a4:	460b      	mov	r3, r1
 800c7a6:	f101 31ff 	add.w	r1, r1, #4294967295
 800c7aa:	d0f5      	beq.n	800c798 <__ieee754_rem_pio2+0x1e8>
 800c7ac:	4921      	ldr	r1, [pc, #132]	; (800c834 <__ieee754_rem_pio2+0x284>)
 800c7ae:	9101      	str	r1, [sp, #4]
 800c7b0:	2102      	movs	r1, #2
 800c7b2:	9100      	str	r1, [sp, #0]
 800c7b4:	a802      	add	r0, sp, #8
 800c7b6:	4621      	mov	r1, r4
 800c7b8:	f000 f83e 	bl	800c838 <__kernel_rem_pio2>
 800c7bc:	2d00      	cmp	r5, #0
 800c7be:	f6bf af27 	bge.w	800c610 <__ieee754_rem_pio2+0x60>
 800c7c2:	ed94 7b00 	vldr	d7, [r4]
 800c7c6:	eeb1 7b47 	vneg.f64	d7, d7
 800c7ca:	ed84 7b00 	vstr	d7, [r4]
 800c7ce:	ed94 7b02 	vldr	d7, [r4, #8]
 800c7d2:	eeb1 7b47 	vneg.f64	d7, d7
 800c7d6:	ed84 7b02 	vstr	d7, [r4, #8]
 800c7da:	e79b      	b.n	800c714 <__ieee754_rem_pio2+0x164>
 800c7dc:	f3af 8000 	nop.w
 800c7e0:	54400000 	.word	0x54400000
 800c7e4:	3ff921fb 	.word	0x3ff921fb
 800c7e8:	1a626331 	.word	0x1a626331
 800c7ec:	3dd0b461 	.word	0x3dd0b461
 800c7f0:	1a600000 	.word	0x1a600000
 800c7f4:	3dd0b461 	.word	0x3dd0b461
 800c7f8:	2e037073 	.word	0x2e037073
 800c7fc:	3ba3198a 	.word	0x3ba3198a
 800c800:	6dc9c883 	.word	0x6dc9c883
 800c804:	3fe45f30 	.word	0x3fe45f30
 800c808:	2e000000 	.word	0x2e000000
 800c80c:	3ba3198a 	.word	0x3ba3198a
 800c810:	252049c1 	.word	0x252049c1
 800c814:	397b839a 	.word	0x397b839a
 800c818:	00000000 	.word	0x00000000
 800c81c:	41700000 	.word	0x41700000
 800c820:	3fe921fb 	.word	0x3fe921fb
 800c824:	4002d97b 	.word	0x4002d97b
 800c828:	413921fb 	.word	0x413921fb
 800c82c:	0800f170 	.word	0x0800f170
 800c830:	7fefffff 	.word	0x7fefffff
 800c834:	0800f1f0 	.word	0x0800f1f0

0800c838 <__kernel_rem_pio2>:
 800c838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c83c:	ed2d 8b06 	vpush	{d8-d10}
 800c840:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800c844:	460f      	mov	r7, r1
 800c846:	9002      	str	r0, [sp, #8]
 800c848:	49c3      	ldr	r1, [pc, #780]	; (800cb58 <__kernel_rem_pio2+0x320>)
 800c84a:	98a2      	ldr	r0, [sp, #648]	; 0x288
 800c84c:	9301      	str	r3, [sp, #4]
 800c84e:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 800c852:	9901      	ldr	r1, [sp, #4]
 800c854:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800c856:	f112 0f14 	cmn.w	r2, #20
 800c85a:	bfa8      	it	ge
 800c85c:	1ed0      	subge	r0, r2, #3
 800c85e:	f101 3aff 	add.w	sl, r1, #4294967295
 800c862:	bfaa      	itet	ge
 800c864:	2418      	movge	r4, #24
 800c866:	2000      	movlt	r0, #0
 800c868:	fb90 f0f4 	sdivge	r0, r0, r4
 800c86c:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 800cb40 <__kernel_rem_pio2+0x308>
 800c870:	f06f 0417 	mvn.w	r4, #23
 800c874:	fb00 4404 	mla	r4, r0, r4, r4
 800c878:	eba0 060a 	sub.w	r6, r0, sl
 800c87c:	4414      	add	r4, r2
 800c87e:	eb09 0c0a 	add.w	ip, r9, sl
 800c882:	ad1a      	add	r5, sp, #104	; 0x68
 800c884:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 800c888:	2200      	movs	r2, #0
 800c88a:	4562      	cmp	r2, ip
 800c88c:	dd10      	ble.n	800c8b0 <__kernel_rem_pio2+0x78>
 800c88e:	9a01      	ldr	r2, [sp, #4]
 800c890:	a91a      	add	r1, sp, #104	; 0x68
 800c892:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800c896:	f50d 78d4 	add.w	r8, sp, #424	; 0x1a8
 800c89a:	f04f 0c00 	mov.w	ip, #0
 800c89e:	45cc      	cmp	ip, r9
 800c8a0:	dc26      	bgt.n	800c8f0 <__kernel_rem_pio2+0xb8>
 800c8a2:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 800cb40 <__kernel_rem_pio2+0x308>
 800c8a6:	f8dd e008 	ldr.w	lr, [sp, #8]
 800c8aa:	4616      	mov	r6, r2
 800c8ac:	2500      	movs	r5, #0
 800c8ae:	e015      	b.n	800c8dc <__kernel_rem_pio2+0xa4>
 800c8b0:	42d6      	cmn	r6, r2
 800c8b2:	d409      	bmi.n	800c8c8 <__kernel_rem_pio2+0x90>
 800c8b4:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 800c8b8:	ee07 1a90 	vmov	s15, r1
 800c8bc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c8c0:	eca5 7b02 	vstmia	r5!, {d7}
 800c8c4:	3201      	adds	r2, #1
 800c8c6:	e7e0      	b.n	800c88a <__kernel_rem_pio2+0x52>
 800c8c8:	eeb0 7b46 	vmov.f64	d7, d6
 800c8cc:	e7f8      	b.n	800c8c0 <__kernel_rem_pio2+0x88>
 800c8ce:	ecbe 5b02 	vldmia	lr!, {d5}
 800c8d2:	ed96 6b00 	vldr	d6, [r6]
 800c8d6:	3501      	adds	r5, #1
 800c8d8:	eea5 7b06 	vfma.f64	d7, d5, d6
 800c8dc:	4555      	cmp	r5, sl
 800c8de:	f1a6 0608 	sub.w	r6, r6, #8
 800c8e2:	ddf4      	ble.n	800c8ce <__kernel_rem_pio2+0x96>
 800c8e4:	eca8 7b02 	vstmia	r8!, {d7}
 800c8e8:	f10c 0c01 	add.w	ip, ip, #1
 800c8ec:	3208      	adds	r2, #8
 800c8ee:	e7d6      	b.n	800c89e <__kernel_rem_pio2+0x66>
 800c8f0:	aa06      	add	r2, sp, #24
 800c8f2:	ed9f 9b95 	vldr	d9, [pc, #596]	; 800cb48 <__kernel_rem_pio2+0x310>
 800c8f6:	ed9f ab96 	vldr	d10, [pc, #600]	; 800cb50 <__kernel_rem_pio2+0x318>
 800c8fa:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800c8fe:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800c902:	9204      	str	r2, [sp, #16]
 800c904:	9303      	str	r3, [sp, #12]
 800c906:	464d      	mov	r5, r9
 800c908:	00eb      	lsls	r3, r5, #3
 800c90a:	9305      	str	r3, [sp, #20]
 800c90c:	ab92      	add	r3, sp, #584	; 0x248
 800c90e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800c912:	f10d 0b18 	add.w	fp, sp, #24
 800c916:	ab6a      	add	r3, sp, #424	; 0x1a8
 800c918:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 800c91c:	465e      	mov	r6, fp
 800c91e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800c922:	4628      	mov	r0, r5
 800c924:	2800      	cmp	r0, #0
 800c926:	f1a2 0208 	sub.w	r2, r2, #8
 800c92a:	dc48      	bgt.n	800c9be <__kernel_rem_pio2+0x186>
 800c92c:	4620      	mov	r0, r4
 800c92e:	f000 fa17 	bl	800cd60 <scalbn>
 800c932:	eeb0 8b40 	vmov.f64	d8, d0
 800c936:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800c93a:	ee28 0b00 	vmul.f64	d0, d8, d0
 800c93e:	f000 fa8f 	bl	800ce60 <floor>
 800c942:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800c946:	eea0 8b47 	vfms.f64	d8, d0, d7
 800c94a:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800c94e:	2c00      	cmp	r4, #0
 800c950:	ee17 8a90 	vmov	r8, s15
 800c954:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c958:	ee38 8b47 	vsub.f64	d8, d8, d7
 800c95c:	dd41      	ble.n	800c9e2 <__kernel_rem_pio2+0x1aa>
 800c95e:	1e68      	subs	r0, r5, #1
 800c960:	ab06      	add	r3, sp, #24
 800c962:	f1c4 0c18 	rsb	ip, r4, #24
 800c966:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800c96a:	fa46 f20c 	asr.w	r2, r6, ip
 800c96e:	4490      	add	r8, r2
 800c970:	fa02 f20c 	lsl.w	r2, r2, ip
 800c974:	1ab6      	subs	r6, r6, r2
 800c976:	f1c4 0217 	rsb	r2, r4, #23
 800c97a:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 800c97e:	4116      	asrs	r6, r2
 800c980:	2e00      	cmp	r6, #0
 800c982:	dd3d      	ble.n	800ca00 <__kernel_rem_pio2+0x1c8>
 800c984:	f04f 0c00 	mov.w	ip, #0
 800c988:	f108 0801 	add.w	r8, r8, #1
 800c98c:	4660      	mov	r0, ip
 800c98e:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800c992:	4565      	cmp	r5, ip
 800c994:	dc6a      	bgt.n	800ca6c <__kernel_rem_pio2+0x234>
 800c996:	2c00      	cmp	r4, #0
 800c998:	dd04      	ble.n	800c9a4 <__kernel_rem_pio2+0x16c>
 800c99a:	2c01      	cmp	r4, #1
 800c99c:	d07b      	beq.n	800ca96 <__kernel_rem_pio2+0x25e>
 800c99e:	2c02      	cmp	r4, #2
 800c9a0:	f000 8083 	beq.w	800caaa <__kernel_rem_pio2+0x272>
 800c9a4:	2e02      	cmp	r6, #2
 800c9a6:	d12b      	bne.n	800ca00 <__kernel_rem_pio2+0x1c8>
 800c9a8:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800c9ac:	ee30 8b48 	vsub.f64	d8, d0, d8
 800c9b0:	b330      	cbz	r0, 800ca00 <__kernel_rem_pio2+0x1c8>
 800c9b2:	4620      	mov	r0, r4
 800c9b4:	f000 f9d4 	bl	800cd60 <scalbn>
 800c9b8:	ee38 8b40 	vsub.f64	d8, d8, d0
 800c9bc:	e020      	b.n	800ca00 <__kernel_rem_pio2+0x1c8>
 800c9be:	ee20 7b09 	vmul.f64	d7, d0, d9
 800c9c2:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800c9c6:	3801      	subs	r0, #1
 800c9c8:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800c9cc:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800c9d0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800c9d4:	eca6 0a01 	vstmia	r6!, {s0}
 800c9d8:	ed92 0b00 	vldr	d0, [r2]
 800c9dc:	ee37 0b00 	vadd.f64	d0, d7, d0
 800c9e0:	e7a0      	b.n	800c924 <__kernel_rem_pio2+0xec>
 800c9e2:	d105      	bne.n	800c9f0 <__kernel_rem_pio2+0x1b8>
 800c9e4:	1e6a      	subs	r2, r5, #1
 800c9e6:	ab06      	add	r3, sp, #24
 800c9e8:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800c9ec:	15f6      	asrs	r6, r6, #23
 800c9ee:	e7c7      	b.n	800c980 <__kernel_rem_pio2+0x148>
 800c9f0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800c9f4:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c9f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9fc:	da34      	bge.n	800ca68 <__kernel_rem_pio2+0x230>
 800c9fe:	2600      	movs	r6, #0
 800ca00:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ca04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca08:	f040 80aa 	bne.w	800cb60 <__kernel_rem_pio2+0x328>
 800ca0c:	f105 3bff 	add.w	fp, r5, #4294967295
 800ca10:	4658      	mov	r0, fp
 800ca12:	2200      	movs	r2, #0
 800ca14:	4548      	cmp	r0, r9
 800ca16:	da50      	bge.n	800caba <__kernel_rem_pio2+0x282>
 800ca18:	2a00      	cmp	r2, #0
 800ca1a:	d06b      	beq.n	800caf4 <__kernel_rem_pio2+0x2bc>
 800ca1c:	ab06      	add	r3, sp, #24
 800ca1e:	3c18      	subs	r4, #24
 800ca20:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	f000 8087 	beq.w	800cb38 <__kernel_rem_pio2+0x300>
 800ca2a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800ca2e:	4620      	mov	r0, r4
 800ca30:	f000 f996 	bl	800cd60 <scalbn>
 800ca34:	ed9f 6b44 	vldr	d6, [pc, #272]	; 800cb48 <__kernel_rem_pio2+0x310>
 800ca38:	f10b 0201 	add.w	r2, fp, #1
 800ca3c:	a96a      	add	r1, sp, #424	; 0x1a8
 800ca3e:	00d3      	lsls	r3, r2, #3
 800ca40:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800ca44:	465a      	mov	r2, fp
 800ca46:	2a00      	cmp	r2, #0
 800ca48:	f280 80b8 	bge.w	800cbbc <__kernel_rem_pio2+0x384>
 800ca4c:	465a      	mov	r2, fp
 800ca4e:	2a00      	cmp	r2, #0
 800ca50:	f2c0 80d6 	blt.w	800cc00 <__kernel_rem_pio2+0x3c8>
 800ca54:	a96a      	add	r1, sp, #424	; 0x1a8
 800ca56:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 800ca5a:	ed9f 7b39 	vldr	d7, [pc, #228]	; 800cb40 <__kernel_rem_pio2+0x308>
 800ca5e:	4d3f      	ldr	r5, [pc, #252]	; (800cb5c <__kernel_rem_pio2+0x324>)
 800ca60:	2000      	movs	r0, #0
 800ca62:	ebab 0102 	sub.w	r1, fp, r2
 800ca66:	e0c0      	b.n	800cbea <__kernel_rem_pio2+0x3b2>
 800ca68:	2602      	movs	r6, #2
 800ca6a:	e78b      	b.n	800c984 <__kernel_rem_pio2+0x14c>
 800ca6c:	f8db 2000 	ldr.w	r2, [fp]
 800ca70:	b958      	cbnz	r0, 800ca8a <__kernel_rem_pio2+0x252>
 800ca72:	b122      	cbz	r2, 800ca7e <__kernel_rem_pio2+0x246>
 800ca74:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800ca78:	f8cb 2000 	str.w	r2, [fp]
 800ca7c:	2201      	movs	r2, #1
 800ca7e:	f10c 0c01 	add.w	ip, ip, #1
 800ca82:	f10b 0b04 	add.w	fp, fp, #4
 800ca86:	4610      	mov	r0, r2
 800ca88:	e783      	b.n	800c992 <__kernel_rem_pio2+0x15a>
 800ca8a:	ebae 0202 	sub.w	r2, lr, r2
 800ca8e:	f8cb 2000 	str.w	r2, [fp]
 800ca92:	4602      	mov	r2, r0
 800ca94:	e7f3      	b.n	800ca7e <__kernel_rem_pio2+0x246>
 800ca96:	f105 3cff 	add.w	ip, r5, #4294967295
 800ca9a:	ab06      	add	r3, sp, #24
 800ca9c:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800caa0:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800caa4:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 800caa8:	e77c      	b.n	800c9a4 <__kernel_rem_pio2+0x16c>
 800caaa:	f105 3cff 	add.w	ip, r5, #4294967295
 800caae:	ab06      	add	r3, sp, #24
 800cab0:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800cab4:	f3c2 0215 	ubfx	r2, r2, #0, #22
 800cab8:	e7f4      	b.n	800caa4 <__kernel_rem_pio2+0x26c>
 800caba:	ab06      	add	r3, sp, #24
 800cabc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800cac0:	3801      	subs	r0, #1
 800cac2:	431a      	orrs	r2, r3
 800cac4:	e7a6      	b.n	800ca14 <__kernel_rem_pio2+0x1dc>
 800cac6:	3201      	adds	r2, #1
 800cac8:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800cacc:	2e00      	cmp	r6, #0
 800cace:	d0fa      	beq.n	800cac6 <__kernel_rem_pio2+0x28e>
 800cad0:	9b05      	ldr	r3, [sp, #20]
 800cad2:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800cad6:	eb0d 0003 	add.w	r0, sp, r3
 800cada:	9b01      	ldr	r3, [sp, #4]
 800cadc:	18ee      	adds	r6, r5, r3
 800cade:	ab1a      	add	r3, sp, #104	; 0x68
 800cae0:	f105 0c01 	add.w	ip, r5, #1
 800cae4:	3898      	subs	r0, #152	; 0x98
 800cae6:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800caea:	442a      	add	r2, r5
 800caec:	4562      	cmp	r2, ip
 800caee:	da04      	bge.n	800cafa <__kernel_rem_pio2+0x2c2>
 800caf0:	4615      	mov	r5, r2
 800caf2:	e709      	b.n	800c908 <__kernel_rem_pio2+0xd0>
 800caf4:	9804      	ldr	r0, [sp, #16]
 800caf6:	2201      	movs	r2, #1
 800caf8:	e7e6      	b.n	800cac8 <__kernel_rem_pio2+0x290>
 800cafa:	9b03      	ldr	r3, [sp, #12]
 800cafc:	f8dd e008 	ldr.w	lr, [sp, #8]
 800cb00:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800cb04:	9305      	str	r3, [sp, #20]
 800cb06:	ee07 3a90 	vmov	s15, r3
 800cb0a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800cb0e:	2500      	movs	r5, #0
 800cb10:	eca6 7b02 	vstmia	r6!, {d7}
 800cb14:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 800cb40 <__kernel_rem_pio2+0x308>
 800cb18:	46b0      	mov	r8, r6
 800cb1a:	4555      	cmp	r5, sl
 800cb1c:	dd04      	ble.n	800cb28 <__kernel_rem_pio2+0x2f0>
 800cb1e:	eca0 7b02 	vstmia	r0!, {d7}
 800cb22:	f10c 0c01 	add.w	ip, ip, #1
 800cb26:	e7e1      	b.n	800caec <__kernel_rem_pio2+0x2b4>
 800cb28:	ecbe 5b02 	vldmia	lr!, {d5}
 800cb2c:	ed38 6b02 	vldmdb	r8!, {d6}
 800cb30:	3501      	adds	r5, #1
 800cb32:	eea5 7b06 	vfma.f64	d7, d5, d6
 800cb36:	e7f0      	b.n	800cb1a <__kernel_rem_pio2+0x2e2>
 800cb38:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cb3c:	e76e      	b.n	800ca1c <__kernel_rem_pio2+0x1e4>
 800cb3e:	bf00      	nop
	...
 800cb4c:	3e700000 	.word	0x3e700000
 800cb50:	00000000 	.word	0x00000000
 800cb54:	41700000 	.word	0x41700000
 800cb58:	0800f338 	.word	0x0800f338
 800cb5c:	0800f2f8 	.word	0x0800f2f8
 800cb60:	4260      	negs	r0, r4
 800cb62:	eeb0 0b48 	vmov.f64	d0, d8
 800cb66:	f000 f8fb 	bl	800cd60 <scalbn>
 800cb6a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800cd48 <__kernel_rem_pio2+0x510>
 800cb6e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800cb72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb76:	db18      	blt.n	800cbaa <__kernel_rem_pio2+0x372>
 800cb78:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800cd50 <__kernel_rem_pio2+0x518>
 800cb7c:	ee20 7b07 	vmul.f64	d7, d0, d7
 800cb80:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800cb84:	aa06      	add	r2, sp, #24
 800cb86:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800cb8a:	eea5 0b46 	vfms.f64	d0, d5, d6
 800cb8e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800cb92:	f105 0b01 	add.w	fp, r5, #1
 800cb96:	ee10 3a10 	vmov	r3, s0
 800cb9a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800cb9e:	ee17 3a10 	vmov	r3, s14
 800cba2:	3418      	adds	r4, #24
 800cba4:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 800cba8:	e73f      	b.n	800ca2a <__kernel_rem_pio2+0x1f2>
 800cbaa:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800cbae:	aa06      	add	r2, sp, #24
 800cbb0:	ee10 3a10 	vmov	r3, s0
 800cbb4:	46ab      	mov	fp, r5
 800cbb6:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800cbba:	e736      	b.n	800ca2a <__kernel_rem_pio2+0x1f2>
 800cbbc:	a806      	add	r0, sp, #24
 800cbbe:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800cbc2:	9001      	str	r0, [sp, #4]
 800cbc4:	ee07 0a90 	vmov	s15, r0
 800cbc8:	3a01      	subs	r2, #1
 800cbca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800cbce:	ee27 7b00 	vmul.f64	d7, d7, d0
 800cbd2:	ee20 0b06 	vmul.f64	d0, d0, d6
 800cbd6:	ed21 7b02 	vstmdb	r1!, {d7}
 800cbda:	e734      	b.n	800ca46 <__kernel_rem_pio2+0x20e>
 800cbdc:	ecb5 5b02 	vldmia	r5!, {d5}
 800cbe0:	ecb4 6b02 	vldmia	r4!, {d6}
 800cbe4:	3001      	adds	r0, #1
 800cbe6:	eea5 7b06 	vfma.f64	d7, d5, d6
 800cbea:	4548      	cmp	r0, r9
 800cbec:	dc01      	bgt.n	800cbf2 <__kernel_rem_pio2+0x3ba>
 800cbee:	4288      	cmp	r0, r1
 800cbf0:	ddf4      	ble.n	800cbdc <__kernel_rem_pio2+0x3a4>
 800cbf2:	a842      	add	r0, sp, #264	; 0x108
 800cbf4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800cbf8:	ed81 7b00 	vstr	d7, [r1]
 800cbfc:	3a01      	subs	r2, #1
 800cbfe:	e726      	b.n	800ca4e <__kernel_rem_pio2+0x216>
 800cc00:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800cc02:	2a02      	cmp	r2, #2
 800cc04:	dc0a      	bgt.n	800cc1c <__kernel_rem_pio2+0x3e4>
 800cc06:	2a00      	cmp	r2, #0
 800cc08:	dc2e      	bgt.n	800cc68 <__kernel_rem_pio2+0x430>
 800cc0a:	d047      	beq.n	800cc9c <__kernel_rem_pio2+0x464>
 800cc0c:	f008 0007 	and.w	r0, r8, #7
 800cc10:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800cc14:	ecbd 8b06 	vpop	{d8-d10}
 800cc18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc1c:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800cc1e:	2a03      	cmp	r2, #3
 800cc20:	d1f4      	bne.n	800cc0c <__kernel_rem_pio2+0x3d4>
 800cc22:	a942      	add	r1, sp, #264	; 0x108
 800cc24:	f1a3 0208 	sub.w	r2, r3, #8
 800cc28:	440a      	add	r2, r1
 800cc2a:	4611      	mov	r1, r2
 800cc2c:	4658      	mov	r0, fp
 800cc2e:	2800      	cmp	r0, #0
 800cc30:	f1a1 0108 	sub.w	r1, r1, #8
 800cc34:	dc55      	bgt.n	800cce2 <__kernel_rem_pio2+0x4aa>
 800cc36:	4659      	mov	r1, fp
 800cc38:	2901      	cmp	r1, #1
 800cc3a:	f1a2 0208 	sub.w	r2, r2, #8
 800cc3e:	dc60      	bgt.n	800cd02 <__kernel_rem_pio2+0x4ca>
 800cc40:	ed9f 7b45 	vldr	d7, [pc, #276]	; 800cd58 <__kernel_rem_pio2+0x520>
 800cc44:	aa42      	add	r2, sp, #264	; 0x108
 800cc46:	4413      	add	r3, r2
 800cc48:	f1bb 0f01 	cmp.w	fp, #1
 800cc4c:	dc69      	bgt.n	800cd22 <__kernel_rem_pio2+0x4ea>
 800cc4e:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800cc52:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800cc56:	2e00      	cmp	r6, #0
 800cc58:	d16a      	bne.n	800cd30 <__kernel_rem_pio2+0x4f8>
 800cc5a:	ed87 5b00 	vstr	d5, [r7]
 800cc5e:	ed87 6b02 	vstr	d6, [r7, #8]
 800cc62:	ed87 7b04 	vstr	d7, [r7, #16]
 800cc66:	e7d1      	b.n	800cc0c <__kernel_rem_pio2+0x3d4>
 800cc68:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800cd58 <__kernel_rem_pio2+0x520>
 800cc6c:	aa42      	add	r2, sp, #264	; 0x108
 800cc6e:	4413      	add	r3, r2
 800cc70:	465a      	mov	r2, fp
 800cc72:	2a00      	cmp	r2, #0
 800cc74:	da26      	bge.n	800ccc4 <__kernel_rem_pio2+0x48c>
 800cc76:	b35e      	cbz	r6, 800ccd0 <__kernel_rem_pio2+0x498>
 800cc78:	eeb1 7b46 	vneg.f64	d7, d6
 800cc7c:	ed87 7b00 	vstr	d7, [r7]
 800cc80:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800cc84:	aa44      	add	r2, sp, #272	; 0x110
 800cc86:	2301      	movs	r3, #1
 800cc88:	ee37 7b46 	vsub.f64	d7, d7, d6
 800cc8c:	459b      	cmp	fp, r3
 800cc8e:	da22      	bge.n	800ccd6 <__kernel_rem_pio2+0x49e>
 800cc90:	b10e      	cbz	r6, 800cc96 <__kernel_rem_pio2+0x45e>
 800cc92:	eeb1 7b47 	vneg.f64	d7, d7
 800cc96:	ed87 7b02 	vstr	d7, [r7, #8]
 800cc9a:	e7b7      	b.n	800cc0c <__kernel_rem_pio2+0x3d4>
 800cc9c:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800cd58 <__kernel_rem_pio2+0x520>
 800cca0:	aa42      	add	r2, sp, #264	; 0x108
 800cca2:	4413      	add	r3, r2
 800cca4:	f1bb 0f00 	cmp.w	fp, #0
 800cca8:	da05      	bge.n	800ccb6 <__kernel_rem_pio2+0x47e>
 800ccaa:	b10e      	cbz	r6, 800ccb0 <__kernel_rem_pio2+0x478>
 800ccac:	eeb1 7b47 	vneg.f64	d7, d7
 800ccb0:	ed87 7b00 	vstr	d7, [r7]
 800ccb4:	e7aa      	b.n	800cc0c <__kernel_rem_pio2+0x3d4>
 800ccb6:	ed33 6b02 	vldmdb	r3!, {d6}
 800ccba:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ccbe:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ccc2:	e7ef      	b.n	800cca4 <__kernel_rem_pio2+0x46c>
 800ccc4:	ed33 7b02 	vldmdb	r3!, {d7}
 800ccc8:	3a01      	subs	r2, #1
 800ccca:	ee36 6b07 	vadd.f64	d6, d6, d7
 800ccce:	e7d0      	b.n	800cc72 <__kernel_rem_pio2+0x43a>
 800ccd0:	eeb0 7b46 	vmov.f64	d7, d6
 800ccd4:	e7d2      	b.n	800cc7c <__kernel_rem_pio2+0x444>
 800ccd6:	ecb2 6b02 	vldmia	r2!, {d6}
 800ccda:	3301      	adds	r3, #1
 800ccdc:	ee37 7b06 	vadd.f64	d7, d7, d6
 800cce0:	e7d4      	b.n	800cc8c <__kernel_rem_pio2+0x454>
 800cce2:	ed91 7b00 	vldr	d7, [r1]
 800cce6:	ed91 5b02 	vldr	d5, [r1, #8]
 800ccea:	3801      	subs	r0, #1
 800ccec:	ee37 6b05 	vadd.f64	d6, d7, d5
 800ccf0:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ccf4:	ed81 6b00 	vstr	d6, [r1]
 800ccf8:	ee37 7b05 	vadd.f64	d7, d7, d5
 800ccfc:	ed81 7b02 	vstr	d7, [r1, #8]
 800cd00:	e795      	b.n	800cc2e <__kernel_rem_pio2+0x3f6>
 800cd02:	ed92 7b00 	vldr	d7, [r2]
 800cd06:	ed92 5b02 	vldr	d5, [r2, #8]
 800cd0a:	3901      	subs	r1, #1
 800cd0c:	ee37 6b05 	vadd.f64	d6, d7, d5
 800cd10:	ee37 7b46 	vsub.f64	d7, d7, d6
 800cd14:	ed82 6b00 	vstr	d6, [r2]
 800cd18:	ee37 7b05 	vadd.f64	d7, d7, d5
 800cd1c:	ed82 7b02 	vstr	d7, [r2, #8]
 800cd20:	e78a      	b.n	800cc38 <__kernel_rem_pio2+0x400>
 800cd22:	ed33 6b02 	vldmdb	r3!, {d6}
 800cd26:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cd2a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800cd2e:	e78b      	b.n	800cc48 <__kernel_rem_pio2+0x410>
 800cd30:	eeb1 5b45 	vneg.f64	d5, d5
 800cd34:	eeb1 6b46 	vneg.f64	d6, d6
 800cd38:	ed87 5b00 	vstr	d5, [r7]
 800cd3c:	eeb1 7b47 	vneg.f64	d7, d7
 800cd40:	ed87 6b02 	vstr	d6, [r7, #8]
 800cd44:	e78d      	b.n	800cc62 <__kernel_rem_pio2+0x42a>
 800cd46:	bf00      	nop
 800cd48:	00000000 	.word	0x00000000
 800cd4c:	41700000 	.word	0x41700000
 800cd50:	00000000 	.word	0x00000000
 800cd54:	3e700000 	.word	0x3e700000
	...

0800cd60 <scalbn>:
 800cd60:	ee10 1a90 	vmov	r1, s1
 800cd64:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cd68:	b98b      	cbnz	r3, 800cd8e <scalbn+0x2e>
 800cd6a:	ee10 3a10 	vmov	r3, s0
 800cd6e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800cd72:	4319      	orrs	r1, r3
 800cd74:	d00a      	beq.n	800cd8c <scalbn+0x2c>
 800cd76:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 800ce28 <scalbn+0xc8>
 800cd7a:	4b37      	ldr	r3, [pc, #220]	; (800ce58 <scalbn+0xf8>)
 800cd7c:	ee20 0b07 	vmul.f64	d0, d0, d7
 800cd80:	4298      	cmp	r0, r3
 800cd82:	da0b      	bge.n	800cd9c <scalbn+0x3c>
 800cd84:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 800ce30 <scalbn+0xd0>
 800cd88:	ee20 0b07 	vmul.f64	d0, d0, d7
 800cd8c:	4770      	bx	lr
 800cd8e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800cd92:	4293      	cmp	r3, r2
 800cd94:	d107      	bne.n	800cda6 <scalbn+0x46>
 800cd96:	ee30 0b00 	vadd.f64	d0, d0, d0
 800cd9a:	4770      	bx	lr
 800cd9c:	ee10 1a90 	vmov	r1, s1
 800cda0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cda4:	3b36      	subs	r3, #54	; 0x36
 800cda6:	f24c 3250 	movw	r2, #50000	; 0xc350
 800cdaa:	4290      	cmp	r0, r2
 800cdac:	dd0d      	ble.n	800cdca <scalbn+0x6a>
 800cdae:	ed9f 7b22 	vldr	d7, [pc, #136]	; 800ce38 <scalbn+0xd8>
 800cdb2:	ee10 3a90 	vmov	r3, s1
 800cdb6:	eeb0 6b47 	vmov.f64	d6, d7
 800cdba:	ed9f 5b21 	vldr	d5, [pc, #132]	; 800ce40 <scalbn+0xe0>
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	fe27 7b05 	vselge.f64	d7, d7, d5
 800cdc4:	ee27 0b06 	vmul.f64	d0, d7, d6
 800cdc8:	4770      	bx	lr
 800cdca:	4418      	add	r0, r3
 800cdcc:	f240 73fe 	movw	r3, #2046	; 0x7fe
 800cdd0:	4298      	cmp	r0, r3
 800cdd2:	dcec      	bgt.n	800cdae <scalbn+0x4e>
 800cdd4:	2800      	cmp	r0, #0
 800cdd6:	dd0a      	ble.n	800cdee <scalbn+0x8e>
 800cdd8:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800cddc:	ec53 2b10 	vmov	r2, r3, d0
 800cde0:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800cde4:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800cde8:	ec43 2b10 	vmov	d0, r2, r3
 800cdec:	4770      	bx	lr
 800cdee:	f110 0f35 	cmn.w	r0, #53	; 0x35
 800cdf2:	da09      	bge.n	800ce08 <scalbn+0xa8>
 800cdf4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800ce30 <scalbn+0xd0>
 800cdf8:	ee10 3a90 	vmov	r3, s1
 800cdfc:	eeb0 6b47 	vmov.f64	d6, d7
 800ce00:	ed9f 5b11 	vldr	d5, [pc, #68]	; 800ce48 <scalbn+0xe8>
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	e7db      	b.n	800cdc0 <scalbn+0x60>
 800ce08:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800ce0c:	ec53 2b10 	vmov	r2, r3, d0
 800ce10:	3036      	adds	r0, #54	; 0x36
 800ce12:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800ce16:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800ce1a:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800ce50 <scalbn+0xf0>
 800ce1e:	ec43 2b10 	vmov	d0, r2, r3
 800ce22:	e7b1      	b.n	800cd88 <scalbn+0x28>
 800ce24:	f3af 8000 	nop.w
 800ce28:	00000000 	.word	0x00000000
 800ce2c:	43500000 	.word	0x43500000
 800ce30:	c2f8f359 	.word	0xc2f8f359
 800ce34:	01a56e1f 	.word	0x01a56e1f
 800ce38:	8800759c 	.word	0x8800759c
 800ce3c:	7e37e43c 	.word	0x7e37e43c
 800ce40:	8800759c 	.word	0x8800759c
 800ce44:	fe37e43c 	.word	0xfe37e43c
 800ce48:	c2f8f359 	.word	0xc2f8f359
 800ce4c:	81a56e1f 	.word	0x81a56e1f
 800ce50:	00000000 	.word	0x00000000
 800ce54:	3c900000 	.word	0x3c900000
 800ce58:	ffff3cb0 	.word	0xffff3cb0
 800ce5c:	00000000 	.word	0x00000000

0800ce60 <floor>:
 800ce60:	ee10 1a90 	vmov	r1, s1
 800ce64:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ce68:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800ce6c:	2b13      	cmp	r3, #19
 800ce6e:	b530      	push	{r4, r5, lr}
 800ce70:	ee10 0a10 	vmov	r0, s0
 800ce74:	ee10 5a10 	vmov	r5, s0
 800ce78:	dc31      	bgt.n	800cede <floor+0x7e>
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	da15      	bge.n	800ceaa <floor+0x4a>
 800ce7e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800cf40 <floor+0xe0>
 800ce82:	ee30 0b07 	vadd.f64	d0, d0, d7
 800ce86:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ce8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce8e:	dd07      	ble.n	800cea0 <floor+0x40>
 800ce90:	2900      	cmp	r1, #0
 800ce92:	da4e      	bge.n	800cf32 <floor+0xd2>
 800ce94:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ce98:	4308      	orrs	r0, r1
 800ce9a:	d04d      	beq.n	800cf38 <floor+0xd8>
 800ce9c:	492a      	ldr	r1, [pc, #168]	; (800cf48 <floor+0xe8>)
 800ce9e:	2000      	movs	r0, #0
 800cea0:	460b      	mov	r3, r1
 800cea2:	4602      	mov	r2, r0
 800cea4:	ec43 2b10 	vmov	d0, r2, r3
 800cea8:	e020      	b.n	800ceec <floor+0x8c>
 800ceaa:	4a28      	ldr	r2, [pc, #160]	; (800cf4c <floor+0xec>)
 800ceac:	411a      	asrs	r2, r3
 800ceae:	ea01 0402 	and.w	r4, r1, r2
 800ceb2:	4304      	orrs	r4, r0
 800ceb4:	d01a      	beq.n	800ceec <floor+0x8c>
 800ceb6:	ed9f 7b22 	vldr	d7, [pc, #136]	; 800cf40 <floor+0xe0>
 800ceba:	ee30 0b07 	vadd.f64	d0, d0, d7
 800cebe:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800cec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cec6:	ddeb      	ble.n	800cea0 <floor+0x40>
 800cec8:	2900      	cmp	r1, #0
 800ceca:	bfbe      	ittt	lt
 800cecc:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800ced0:	fa40 f303 	asrlt.w	r3, r0, r3
 800ced4:	18c9      	addlt	r1, r1, r3
 800ced6:	ea21 0102 	bic.w	r1, r1, r2
 800ceda:	2000      	movs	r0, #0
 800cedc:	e7e0      	b.n	800cea0 <floor+0x40>
 800cede:	2b33      	cmp	r3, #51	; 0x33
 800cee0:	dd05      	ble.n	800ceee <floor+0x8e>
 800cee2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cee6:	d101      	bne.n	800ceec <floor+0x8c>
 800cee8:	ee30 0b00 	vadd.f64	d0, d0, d0
 800ceec:	bd30      	pop	{r4, r5, pc}
 800ceee:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800cef2:	f04f 32ff 	mov.w	r2, #4294967295
 800cef6:	40e2      	lsrs	r2, r4
 800cef8:	4210      	tst	r0, r2
 800cefa:	d0f7      	beq.n	800ceec <floor+0x8c>
 800cefc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800cf40 <floor+0xe0>
 800cf00:	ee30 0b07 	vadd.f64	d0, d0, d7
 800cf04:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800cf08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf0c:	ddc8      	ble.n	800cea0 <floor+0x40>
 800cf0e:	2900      	cmp	r1, #0
 800cf10:	da02      	bge.n	800cf18 <floor+0xb8>
 800cf12:	2b14      	cmp	r3, #20
 800cf14:	d103      	bne.n	800cf1e <floor+0xbe>
 800cf16:	3101      	adds	r1, #1
 800cf18:	ea20 0002 	bic.w	r0, r0, r2
 800cf1c:	e7c0      	b.n	800cea0 <floor+0x40>
 800cf1e:	2401      	movs	r4, #1
 800cf20:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800cf24:	fa04 f303 	lsl.w	r3, r4, r3
 800cf28:	4418      	add	r0, r3
 800cf2a:	4285      	cmp	r5, r0
 800cf2c:	bf88      	it	hi
 800cf2e:	1909      	addhi	r1, r1, r4
 800cf30:	e7f2      	b.n	800cf18 <floor+0xb8>
 800cf32:	2000      	movs	r0, #0
 800cf34:	4601      	mov	r1, r0
 800cf36:	e7b3      	b.n	800cea0 <floor+0x40>
 800cf38:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800cf3c:	e7b0      	b.n	800cea0 <floor+0x40>
 800cf3e:	bf00      	nop
 800cf40:	8800759c 	.word	0x8800759c
 800cf44:	7e37e43c 	.word	0x7e37e43c
 800cf48:	bff00000 	.word	0xbff00000
 800cf4c:	000fffff 	.word	0x000fffff

0800cf50 <__errno>:
 800cf50:	4b01      	ldr	r3, [pc, #4]	; (800cf58 <__errno+0x8>)
 800cf52:	6818      	ldr	r0, [r3, #0]
 800cf54:	4770      	bx	lr
 800cf56:	bf00      	nop
 800cf58:	2000010c 	.word	0x2000010c

0800cf5c <_close>:
 800cf5c:	4b02      	ldr	r3, [pc, #8]	; (800cf68 <_close+0xc>)
 800cf5e:	2258      	movs	r2, #88	; 0x58
 800cf60:	601a      	str	r2, [r3, #0]
 800cf62:	f04f 30ff 	mov.w	r0, #4294967295
 800cf66:	4770      	bx	lr
 800cf68:	20005574 	.word	0x20005574

0800cf6c <_sbrk>:
 800cf6c:	4a04      	ldr	r2, [pc, #16]	; (800cf80 <_sbrk+0x14>)
 800cf6e:	6811      	ldr	r1, [r2, #0]
 800cf70:	4603      	mov	r3, r0
 800cf72:	b909      	cbnz	r1, 800cf78 <_sbrk+0xc>
 800cf74:	4903      	ldr	r1, [pc, #12]	; (800cf84 <_sbrk+0x18>)
 800cf76:	6011      	str	r1, [r2, #0]
 800cf78:	6810      	ldr	r0, [r2, #0]
 800cf7a:	4403      	add	r3, r0
 800cf7c:	6013      	str	r3, [r2, #0]
 800cf7e:	4770      	bx	lr
 800cf80:	20005584 	.word	0x20005584
 800cf84:	20005588 	.word	0x20005588

0800cf88 <_exit>:
 800cf88:	e7fe      	b.n	800cf88 <_exit>
	...

0800cf8c <_init>:
 800cf8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf8e:	bf00      	nop
 800cf90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf92:	bc08      	pop	{r3}
 800cf94:	469e      	mov	lr, r3
 800cf96:	4770      	bx	lr

0800cf98 <_fini>:
 800cf98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf9a:	bf00      	nop
 800cf9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf9e:	bc08      	pop	{r3}
 800cfa0:	469e      	mov	lr, r3
 800cfa2:	4770      	bx	lr
