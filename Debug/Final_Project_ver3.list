
Final_Project_ver3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008dfc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ce8  08009000  08009000  00019000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ace8  0800ace8  00020110  2**0
                  CONTENTS
  4 .ARM          00000008  0800ace8  0800ace8  0001ace8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800acf0  0800acf0  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800acf0  0800acf0  0001acf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800acf4  0800acf4  0001acf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  0800acf8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005204  20000110  0800ae08  00020110  2**3
                  ALLOC
 10 ._user_heap_stack 00000404  20005314  0800ae08  00025314  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002013e  2**0
                  CONTENTS, READONLY
 13 .debug_info   00035a51  00000000  00000000  00020181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005a25  00000000  00000000  00055bd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00018a41  00000000  00000000  0005b5f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002138  00000000  00000000  00074038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001a57  00000000  00000000  00076170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00033b2c  00000000  00000000  00077bc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00037d92  00000000  00000000  000ab6f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00139318  00000000  00000000  000e3485  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006ad4  00000000  00000000  0021c7a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  00223274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000110 	.word	0x20000110
 800021c:	00000000 	.word	0x00000000
 8000220:	08008fe4 	.word	0x08008fe4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000114 	.word	0x20000114
 800023c:	08008fe4 	.word	0x08008fe4

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <NT35510_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t NT35510_Init(uint32_t ColorCoding, uint32_t orientation)
{
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	b0b1      	sub	sp, #196	; 0xc4
 80005e0:	4604      	mov	r4, r0
 80005e2:	460d      	mov	r5, r1
  NT35510_IO_Delay(120);
 80005e4:	2078      	movs	r0, #120	; 0x78
 80005e6:	f000 f971 	bl	80008cc <NT35510_IO_Delay>

/* ************************************************************************** */
/* Proprietary Initialization                                                 */
/* ************************************************************************** */
  const uint8_t nt35510_reg[]   = {0x55, 0xAA, 0x52, 0x08, 0x01, 0xF0};
 80005ea:	4ba9      	ldr	r3, [pc, #676]	; (8000890 <NT35510_Init+0x2b4>)
 80005ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 80005f0:	902e      	str	r0, [sp, #184]	; 0xb8
 80005f2:	f8ad 10bc 	strh.w	r1, [sp, #188]	; 0xbc
  const uint8_t nt35510_reg1[]  = {0x03, 0x03, 0x03, 0xB0};
 80005f6:	4ba7      	ldr	r3, [pc, #668]	; (8000894 <NT35510_Init+0x2b8>)
 80005f8:	932d      	str	r3, [sp, #180]	; 0xb4
  const uint8_t nt35510_reg2[]  = {0x46, 0x46, 0x46, 0xB6};
 80005fa:	4ba7      	ldr	r3, [pc, #668]	; (8000898 <NT35510_Init+0x2bc>)
 80005fc:	932c      	str	r3, [sp, #176]	; 0xb0
  const uint8_t nt35510_reg3[]  = {0x03, 0x03, 0x03, 0xB1};
 80005fe:	4ba7      	ldr	r3, [pc, #668]	; (800089c <NT35510_Init+0x2c0>)
 8000600:	932b      	str	r3, [sp, #172]	; 0xac
  const uint8_t nt35510_reg4[]  = {0x36, 0x36, 0x36, 0xB7};
 8000602:	4ba7      	ldr	r3, [pc, #668]	; (80008a0 <NT35510_Init+0x2c4>)
 8000604:	932a      	str	r3, [sp, #168]	; 0xa8
  const uint8_t nt35510_reg5[]  = {0x00, 0x00, 0x02, 0xB2};
 8000606:	4ba7      	ldr	r3, [pc, #668]	; (80008a4 <NT35510_Init+0x2c8>)
 8000608:	9329      	str	r3, [sp, #164]	; 0xa4
  const uint8_t nt35510_reg6[]  = {0x26, 0x26, 0x26, 0xB8};
 800060a:	4ba7      	ldr	r3, [pc, #668]	; (80008a8 <NT35510_Init+0x2cc>)
 800060c:	9328      	str	r3, [sp, #160]	; 0xa0
  const uint8_t nt35510_reg7[]  = {0xBF, 0x01};
 800060e:	f240 13bf 	movw	r3, #447	; 0x1bf
 8000612:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
  const uint8_t nt35510_reg8[]  = {0x09, 0x09, 0x09, 0xB3};
 8000616:	4ba5      	ldr	r3, [pc, #660]	; (80008ac <NT35510_Init+0x2d0>)
 8000618:	9326      	str	r3, [sp, #152]	; 0x98
  const uint8_t nt35510_reg9[]  = {0x36, 0x36, 0x36, 0xB9};
 800061a:	4ba5      	ldr	r3, [pc, #660]	; (80008b0 <NT35510_Init+0x2d4>)
 800061c:	9325      	str	r3, [sp, #148]	; 0x94
  const uint8_t nt35510_reg10[] = {0x08, 0x08, 0x08, 0xB5};
 800061e:	4ba5      	ldr	r3, [pc, #660]	; (80008b4 <NT35510_Init+0x2d8>)
 8000620:	9324      	str	r3, [sp, #144]	; 0x90
  const uint8_t nt35510_reg12[] = {0x26, 0x26, 0x26, 0xBA};
 8000622:	4ba5      	ldr	r3, [pc, #660]	; (80008b8 <NT35510_Init+0x2dc>)
 8000624:	9323      	str	r3, [sp, #140]	; 0x8c
  const uint8_t nt35510_reg13[] = {0x00, 0x80, 0x00, 0xBC};
 8000626:	4ba5      	ldr	r3, [pc, #660]	; (80008bc <NT35510_Init+0x2e0>)
 8000628:	9322      	str	r3, [sp, #136]	; 0x88
  const uint8_t nt35510_reg14[] = {0x00, 0x80, 0x00, 0xBD};
 800062a:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 800062e:	9321      	str	r3, [sp, #132]	; 0x84
  const uint8_t nt35510_reg15[] = {0x00, 0x50, 0xBE};
 8000630:	4ba3      	ldr	r3, [pc, #652]	; (80008c0 <NT35510_Init+0x2e4>)
 8000632:	461a      	mov	r2, r3
 8000634:	f852 1b04 	ldr.w	r1, [r2], #4
 8000638:	f8ad 1080 	strh.w	r1, [sp, #128]	; 0x80
 800063c:	0c09      	lsrs	r1, r1, #16
 800063e:	f88d 1082 	strb.w	r1, [sp, #130]	; 0x82
  const uint8_t nt35510_reg16[] = {0x55, 0xAA, 0x52, 0x08, 0x00, 0xF0};
 8000642:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000646:	901e      	str	r0, [sp, #120]	; 0x78
 8000648:	f8ad 107c 	strh.w	r1, [sp, #124]	; 0x7c
  const uint8_t nt35510_reg17[] = {0xFC, 0x00, 0xB1};
 800064c:	68da      	ldr	r2, [r3, #12]
 800064e:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
 8000652:	0c12      	lsrs	r2, r2, #16
 8000654:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
  const uint8_t nt35510_reg18[] = {0xB6, 0x03};
 8000658:	f240 32b6 	movw	r2, #950	; 0x3b6
 800065c:	f8ad 2070 	strh.w	r2, [sp, #112]	; 0x70
  const uint8_t nt35510_reg19[] = {0xB5, 0x51};
 8000660:	f245 12b5 	movw	r2, #20917	; 0x51b5
 8000664:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
  const uint8_t nt35510_reg20[] = {0x00, 0x00, 0xB7};
 8000668:	691a      	ldr	r2, [r3, #16]
 800066a:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
 800066e:	0c12      	lsrs	r2, r2, #16
 8000670:	f88d 206a 	strb.w	r2, [sp, #106]	; 0x6a
  const uint8_t nt35510_reg21[] = {0x01, 0x02, 0x02, 0x02, 0xB8};
 8000674:	4a93      	ldr	r2, [pc, #588]	; (80008c4 <NT35510_Init+0x2e8>)
 8000676:	e892 0003 	ldmia.w	r2, {r0, r1}
 800067a:	9018      	str	r0, [sp, #96]	; 0x60
 800067c:	f88d 1064 	strb.w	r1, [sp, #100]	; 0x64
  const uint8_t nt35510_reg22[] = {0x00, 0x00, 0x00, 0xBC};
 8000680:	f04f 423c 	mov.w	r2, #3154116608	; 0xbc000000
 8000684:	9217      	str	r2, [sp, #92]	; 0x5c
  const uint8_t nt35510_reg23[] = {0x03, 0x00, 0x00, 0xCC};
 8000686:	4a90      	ldr	r2, [pc, #576]	; (80008c8 <NT35510_Init+0x2ec>)
 8000688:	9216      	str	r2, [sp, #88]	; 0x58
  const uint8_t nt35510_reg24[] = {0xBA, 0x01};
 800068a:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
 800068e:	f8ad 2054 	strh.w	r2, [sp, #84]	; 0x54
  const uint8_t nt35510_madctl_portrait[] = {NT35510_CMD_MADCTL ,0x00};
 8000692:	2236      	movs	r2, #54	; 0x36
 8000694:	f8ad 2050 	strh.w	r2, [sp, #80]	; 0x50
  const uint8_t nt35510_caset_portrait[] = {0x00, 0x00, 0x01, 0xDF ,NT35510_CMD_CASET};
 8000698:	f103 0214 	add.w	r2, r3, #20
 800069c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006a0:	9012      	str	r0, [sp, #72]	; 0x48
 80006a2:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
  const uint8_t nt35510_raset_portrait[] = {0x00, 0x00, 0x03, 0x1F ,NT35510_CMD_RASET};
 80006a6:	f103 021c 	add.w	r2, r3, #28
 80006aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006ae:	9010      	str	r0, [sp, #64]	; 0x40
 80006b0:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
  const uint8_t nt35510_madctl_landscape[] = {NT35510_CMD_MADCTL, 0x60};
 80006b4:	f246 0236 	movw	r2, #24630	; 0x6036
 80006b8:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
  const uint8_t nt35510_caset_landscape[] = {0x00, 0x00, 0x03, 0x1F ,NT35510_CMD_CASET};
 80006bc:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80006c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006c4:	900d      	str	r0, [sp, #52]	; 0x34
 80006c6:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  const uint8_t nt35510_raset_landscape[] = {0x00, 0x00, 0x01, 0xDF ,NT35510_CMD_RASET};
 80006ca:	332c      	adds	r3, #44	; 0x2c
 80006cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006d0:	900b      	str	r0, [sp, #44]	; 0x2c
 80006d2:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
  const uint8_t nt35510_reg26[] = {NT35510_CMD_TEEON, 0x00};  /* Tear on */
 80006d6:	2335      	movs	r3, #53	; 0x35
 80006d8:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
  const uint8_t nt35510_reg27[] = {NT35510_CMD_SLPOUT, 0x00}; /* Sleep out */
 80006dc:	2311      	movs	r3, #17
 80006de:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  const uint8_t nt35510_reg30[] = {NT35510_CMD_DISPON, 0x00};
 80006e2:	2329      	movs	r3, #41	; 0x29
 80006e4:	f8ad 3020 	strh.w	r3, [sp, #32]

  const uint8_t nt35510_reg31[] = {NT35510_CMD_WRDISBV, 0x7F};
 80006e8:	f647 7351 	movw	r3, #32593	; 0x7f51
 80006ec:	f8ad 301c 	strh.w	r3, [sp, #28]
  const uint8_t nt35510_reg32[] = {NT35510_CMD_WRCTRLD, 0x2C};
 80006f0:	f642 4353 	movw	r3, #11347	; 0x2c53
 80006f4:	f8ad 3018 	strh.w	r3, [sp, #24]
  const uint8_t nt35510_reg33[] = {NT35510_CMD_WRCABC, 0x02};
 80006f8:	f240 2355 	movw	r3, #597	; 0x255
 80006fc:	f8ad 3014 	strh.w	r3, [sp, #20]
  const uint8_t nt35510_reg34[] = {NT35510_CMD_WRCABCMB, 0xFF};
 8000700:	f64f 735e 	movw	r3, #65374	; 0xff5e
 8000704:	f8ad 3010 	strh.w	r3, [sp, #16]
  const uint8_t nt35510_reg35[] = {NT35510_CMD_RAMWR, 0x00};
 8000708:	232c      	movs	r3, #44	; 0x2c
 800070a:	f8ad 300c 	strh.w	r3, [sp, #12]
  const uint8_t nt35510_reg36[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB565};
 800070e:	f245 533a 	movw	r3, #21818	; 0x553a
 8000712:	f8ad 3008 	strh.w	r3, [sp, #8]
  const uint8_t nt35510_reg37[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB888};
 8000716:	f247 733a 	movw	r3, #30522	; 0x773a
 800071a:	f8ad 3004 	strh.w	r3, [sp, #4]

  DSI_IO_WriteCmd(5, (uint8_t *)nt35510_reg); /* LV2:  Page 1 enable */
 800071e:	a92e      	add	r1, sp, #184	; 0xb8
 8000720:	2005      	movs	r0, #5
 8000722:	f000 f9db 	bl	8000adc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg1);/* AVDD: 5.2V */
 8000726:	a92d      	add	r1, sp, #180	; 0xb4
 8000728:	2003      	movs	r0, #3
 800072a:	f000 f9d7 	bl	8000adc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg2);/* AVDD: Ratio */
 800072e:	a92c      	add	r1, sp, #176	; 0xb0
 8000730:	2003      	movs	r0, #3
 8000732:	f000 f9d3 	bl	8000adc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg3);/* AVEE: -5.2V */
 8000736:	a92b      	add	r1, sp, #172	; 0xac
 8000738:	2003      	movs	r0, #3
 800073a:	f000 f9cf 	bl	8000adc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg4);/* AVEE: Ratio */
 800073e:	a92a      	add	r1, sp, #168	; 0xa8
 8000740:	2003      	movs	r0, #3
 8000742:	f000 f9cb 	bl	8000adc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg5);/* VCL: -2.5V */
 8000746:	a929      	add	r1, sp, #164	; 0xa4
 8000748:	2003      	movs	r0, #3
 800074a:	f000 f9c7 	bl	8000adc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg6);/* VCL: Ratio */
 800074e:	a928      	add	r1, sp, #160	; 0xa0
 8000750:	2003      	movs	r0, #3
 8000752:	f000 f9c3 	bl	8000adc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg7);/* VGH: 15V (Free Pump) */
 8000756:	a927      	add	r1, sp, #156	; 0x9c
 8000758:	2001      	movs	r0, #1
 800075a:	f000 f9bf 	bl	8000adc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg8);
 800075e:	a926      	add	r1, sp, #152	; 0x98
 8000760:	2003      	movs	r0, #3
 8000762:	f000 f9bb 	bl	8000adc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg9);/* VGH: Ratio */
 8000766:	a925      	add	r1, sp, #148	; 0x94
 8000768:	2003      	movs	r0, #3
 800076a:	f000 f9b7 	bl	8000adc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg10);/* VGL_REG: -10V */
 800076e:	a924      	add	r1, sp, #144	; 0x90
 8000770:	2003      	movs	r0, #3
 8000772:	f000 f9b3 	bl	8000adc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg12);/* VGLX: Ratio */
 8000776:	a923      	add	r1, sp, #140	; 0x8c
 8000778:	2003      	movs	r0, #3
 800077a:	f000 f9af 	bl	8000adc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg13);/* VGMP/VGSP: 4.5V/0V */
 800077e:	a922      	add	r1, sp, #136	; 0x88
 8000780:	2003      	movs	r0, #3
 8000782:	f000 f9ab 	bl	8000adc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg14);/* VGMN/VGSN:-4.5V/0V */
 8000786:	a921      	add	r1, sp, #132	; 0x84
 8000788:	2003      	movs	r0, #3
 800078a:	f000 f9a7 	bl	8000adc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg15);/* VCOM: -1.325V */
 800078e:	a920      	add	r1, sp, #128	; 0x80
 8000790:	2002      	movs	r0, #2
 8000792:	f000 f9a3 	bl	8000adc <DSI_IO_WriteCmd>

/* ************************************************************************** */
/* Proprietary DCS Initialization                                             */
/* ************************************************************************** */
  DSI_IO_WriteCmd(5, (uint8_t *)nt35510_reg16);/* LV2: Page 0 enable */
 8000796:	a91e      	add	r1, sp, #120	; 0x78
 8000798:	2005      	movs	r0, #5
 800079a:	f000 f99f 	bl	8000adc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg17);/* Display control */
 800079e:	a91d      	add	r1, sp, #116	; 0x74
 80007a0:	2002      	movs	r0, #2
 80007a2:	f000 f99b 	bl	8000adc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg18);/* Src hold time */
 80007a6:	a91c      	add	r1, sp, #112	; 0x70
 80007a8:	2001      	movs	r0, #1
 80007aa:	f000 f997 	bl	8000adc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg19);
 80007ae:	a91b      	add	r1, sp, #108	; 0x6c
 80007b0:	2001      	movs	r0, #1
 80007b2:	f000 f993 	bl	8000adc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg20);/* Gate EQ control */
 80007b6:	a91a      	add	r1, sp, #104	; 0x68
 80007b8:	2002      	movs	r0, #2
 80007ba:	f000 f98f 	bl	8000adc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(4, (uint8_t *)nt35510_reg21);/* Src EQ control(Mode2) */
 80007be:	a918      	add	r1, sp, #96	; 0x60
 80007c0:	2004      	movs	r0, #4
 80007c2:	f000 f98b 	bl	8000adc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg22);/* Inv. mode(2-dot) */
 80007c6:	a917      	add	r1, sp, #92	; 0x5c
 80007c8:	2003      	movs	r0, #3
 80007ca:	f000 f987 	bl	8000adc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg23);
 80007ce:	a916      	add	r1, sp, #88	; 0x58
 80007d0:	2003      	movs	r0, #3
 80007d2:	f000 f983 	bl	8000adc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg24);
 80007d6:	a915      	add	r1, sp, #84	; 0x54
 80007d8:	2001      	movs	r0, #1
 80007da:	f000 f97f 	bl	8000adc <DSI_IO_WriteCmd>
  /* Tear on */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg26);
 80007de:	a90a      	add	r1, sp, #40	; 0x28
 80007e0:	2000      	movs	r0, #0
 80007e2:	f000 f97b 	bl	8000adc <DSI_IO_WriteCmd>
  /* Set Pixel color format to RGB888 */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg37);
 80007e6:	a901      	add	r1, sp, #4
 80007e8:	2000      	movs	r0, #0
 80007ea:	f000 f977 	bl	8000adc <DSI_IO_WriteCmd>
/* ************************************************************************** */
/* Standard DCS Initialization                                                */
/* ************************************************************************** */

  /* Add a delay, otherwise MADCTL not taken */
  NT35510_IO_Delay(200);
 80007ee:	20c8      	movs	r0, #200	; 0xc8
 80007f0:	f000 f86c 	bl	80008cc <NT35510_IO_Delay>

  /* Configure orientation */
  if(orientation == NT35510_ORIENTATION_PORTRAIT)
 80007f4:	2d00      	cmp	r5, #0
 80007f6:	d134      	bne.n	8000862 <NT35510_Init+0x286>
  {
    DSI_IO_WriteCmd(1, (uint8_t *)nt35510_madctl_portrait);
 80007f8:	a914      	add	r1, sp, #80	; 0x50
 80007fa:	2001      	movs	r0, #1
 80007fc:	f000 f96e 	bl	8000adc <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_caset_portrait);
 8000800:	a912      	add	r1, sp, #72	; 0x48
 8000802:	2004      	movs	r0, #4
 8000804:	f000 f96a 	bl	8000adc <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_raset_portrait);
 8000808:	a910      	add	r1, sp, #64	; 0x40
 800080a:	2004      	movs	r0, #4
 800080c:	f000 f966 	bl	8000adc <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(1, (uint8_t *)nt35510_madctl_landscape);
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_caset_landscape);
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_raset_landscape);
  }

  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg27);
 8000810:	a909      	add	r1, sp, #36	; 0x24
 8000812:	2000      	movs	r0, #0
 8000814:	f000 f962 	bl	8000adc <DSI_IO_WriteCmd>
  /* Wait for sleep out exit */
  NT35510_IO_Delay(120);
 8000818:	2078      	movs	r0, #120	; 0x78
 800081a:	f000 f857 	bl	80008cc <NT35510_IO_Delay>

  switch(ColorCoding)
 800081e:	b36c      	cbz	r4, 800087c <NT35510_Init+0x2a0>
 8000820:	2c02      	cmp	r4, #2
 8000822:	d130      	bne.n	8000886 <NT35510_Init+0x2aa>
  {
    case NT35510_FORMAT_RBG565 :
      /* Set Pixel color format to RGB565 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg36);
 8000824:	a902      	add	r1, sp, #8
 8000826:	2001      	movs	r0, #1
 8000828:	f000 f958 	bl	8000adc <DSI_IO_WriteCmd>
      break;
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg31);
 800082c:	a907      	add	r1, sp, #28
 800082e:	2001      	movs	r0, #1
 8000830:	f000 f954 	bl	8000adc <DSI_IO_WriteCmd>
  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg32);
 8000834:	a906      	add	r1, sp, #24
 8000836:	2001      	movs	r0, #1
 8000838:	f000 f950 	bl	8000adc <DSI_IO_WriteCmd>
  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg33);
 800083c:	a905      	add	r1, sp, #20
 800083e:	2001      	movs	r0, #1
 8000840:	f000 f94c 	bl	8000adc <DSI_IO_WriteCmd>
  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg34);
 8000844:	a904      	add	r1, sp, #16
 8000846:	2001      	movs	r0, #1
 8000848:	f000 f948 	bl	8000adc <DSI_IO_WriteCmd>
  /** CABC : Content Adaptive Backlight Control section end << */

  /* Display on */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg30);
 800084c:	a908      	add	r1, sp, #32
 800084e:	2000      	movs	r0, #0
 8000850:	f000 f944 	bl	8000adc <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg35);
 8000854:	a903      	add	r1, sp, #12
 8000856:	2000      	movs	r0, #0
 8000858:	f000 f940 	bl	8000adc <DSI_IO_WriteCmd>

  return 0;
}
 800085c:	2000      	movs	r0, #0
 800085e:	b031      	add	sp, #196	; 0xc4
 8000860:	bd30      	pop	{r4, r5, pc}
    DSI_IO_WriteCmd(1, (uint8_t *)nt35510_madctl_landscape);
 8000862:	a90f      	add	r1, sp, #60	; 0x3c
 8000864:	2001      	movs	r0, #1
 8000866:	f000 f939 	bl	8000adc <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_caset_landscape);
 800086a:	a90d      	add	r1, sp, #52	; 0x34
 800086c:	2004      	movs	r0, #4
 800086e:	f000 f935 	bl	8000adc <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_raset_landscape);
 8000872:	a90b      	add	r1, sp, #44	; 0x2c
 8000874:	2004      	movs	r0, #4
 8000876:	f000 f931 	bl	8000adc <DSI_IO_WriteCmd>
 800087a:	e7c9      	b.n	8000810 <NT35510_Init+0x234>
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg37);
 800087c:	a901      	add	r1, sp, #4
 800087e:	2001      	movs	r0, #1
 8000880:	f000 f92c 	bl	8000adc <DSI_IO_WriteCmd>
      break;
 8000884:	e7d2      	b.n	800082c <NT35510_Init+0x250>
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg37);
 8000886:	a901      	add	r1, sp, #4
 8000888:	2001      	movs	r0, #1
 800088a:	f000 f927 	bl	8000adc <DSI_IO_WriteCmd>
      break;
 800088e:	e7cd      	b.n	800082c <NT35510_Init+0x250>
 8000890:	0800ab90 	.word	0x0800ab90
 8000894:	b0030303 	.word	0xb0030303
 8000898:	b6464646 	.word	0xb6464646
 800089c:	b1030303 	.word	0xb1030303
 80008a0:	b7363636 	.word	0xb7363636
 80008a4:	b2020000 	.word	0xb2020000
 80008a8:	b8262626 	.word	0xb8262626
 80008ac:	b3090909 	.word	0xb3090909
 80008b0:	b9363636 	.word	0xb9363636
 80008b4:	b5080808 	.word	0xb5080808
 80008b8:	ba262626 	.word	0xba262626
 80008bc:	bc008000 	.word	0xbc008000
 80008c0:	08009000 	.word	0x08009000
 80008c4:	0800ab98 	.word	0x0800ab98
 80008c8:	cc000003 	.word	0xcc000003

080008cc <NT35510_IO_Delay>:
/**
  * @brief  NT35510 delay
  * @param  Delay: Delay in ms
  */
void NT35510_IO_Delay(uint32_t Delay)
{
 80008cc:	b508      	push	{r3, lr}
  HAL_Delay(Delay);
 80008ce:	f002 fe1d 	bl	800350c <HAL_Delay>
}
 80008d2:	bd08      	pop	{r3, pc}

080008d4 <LCD_IO_GetID>:
    return 0;
  }
#else 
  return LCD_DSI_ID; 
#endif /* USE_LCD_HDMI */
}
 80008d4:	2011      	movs	r0, #17
 80008d6:	4770      	bx	lr

080008d8 <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 80008d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008da:	b083      	sub	sp, #12
 80008dc:	4604      	mov	r4, r0
 80008de:	460d      	mov	r5, r1
 80008e0:	4616      	mov	r6, r2
 80008e2:	461f      	mov	r7, r3
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 80008e4:	4811      	ldr	r0, [pc, #68]	; (800092c <LL_FillBuffer+0x54>)
 80008e6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80008ea:	6043      	str	r3, [r0, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 80008ec:	2300      	movs	r3, #0
 80008ee:	6083      	str	r3, [r0, #8]
  hdma2d_discovery.Init.OutputOffset = OffLine;
 80008f0:	9b08      	ldr	r3, [sp, #32]
 80008f2:	60c3      	str	r3, [r0, #12]

  hdma2d_discovery.Instance = DMA2D;
 80008f4:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <LL_FillBuffer+0x58>)
 80008f6:	6003      	str	r3, [r0, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 80008f8:	f003 fe44 	bl	8004584 <HAL_DMA2D_Init>
 80008fc:	b108      	cbz	r0, 8000902 <LL_FillBuffer+0x2a>
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
      }
    }
  }
}
 80008fe:	b003      	add	sp, #12
 8000900:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, LayerIndex) == HAL_OK)
 8000902:	4621      	mov	r1, r4
 8000904:	4809      	ldr	r0, [pc, #36]	; (800092c <LL_FillBuffer+0x54>)
 8000906:	f003 ff33 	bl	8004770 <HAL_DMA2D_ConfigLayer>
 800090a:	2800      	cmp	r0, #0
 800090c:	d1f7      	bne.n	80008fe <LL_FillBuffer+0x26>
      if (HAL_DMA2D_Start(&hdma2d_discovery, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800090e:	9700      	str	r7, [sp, #0]
 8000910:	4633      	mov	r3, r6
 8000912:	462a      	mov	r2, r5
 8000914:	9909      	ldr	r1, [sp, #36]	; 0x24
 8000916:	4805      	ldr	r0, [pc, #20]	; (800092c <LL_FillBuffer+0x54>)
 8000918:	f003 fe6e 	bl	80045f8 <HAL_DMA2D_Start>
 800091c:	2800      	cmp	r0, #0
 800091e:	d1ee      	bne.n	80008fe <LL_FillBuffer+0x26>
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 8000920:	210a      	movs	r1, #10
 8000922:	4802      	ldr	r0, [pc, #8]	; (800092c <LL_FillBuffer+0x54>)
 8000924:	f003 fe84 	bl	8004630 <HAL_DMA2D_PollForTransfer>
}
 8000928:	e7e9      	b.n	80008fe <LL_FillBuffer+0x26>
 800092a:	bf00      	nop
 800092c:	2000012c 	.word	0x2000012c
 8000930:	4002b000 	.word	0x4002b000

08000934 <BSP_LCD_Reset>:
{
 8000934:	b570      	push	{r4, r5, r6, lr}
 8000936:	b086      	sub	sp, #24
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000938:	4b14      	ldr	r3, [pc, #80]	; (800098c <BSP_LCD_Reset+0x58>)
 800093a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800093c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000940:	631a      	str	r2, [r3, #48]	; 0x30
 8000942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000944:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000948:	9300      	str	r3, [sp, #0]
 800094a:	9b00      	ldr	r3, [sp, #0]
    gpio_init_structure.Pin   = GPIO_PIN_15;
 800094c:	f44f 4500 	mov.w	r5, #32768	; 0x8000
 8000950:	9501      	str	r5, [sp, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000952:	2601      	movs	r6, #1
 8000954:	9602      	str	r6, [sp, #8]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 8000956:	9603      	str	r6, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8000958:	2303      	movs	r3, #3
 800095a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 800095c:	4c0c      	ldr	r4, [pc, #48]	; (8000990 <BSP_LCD_Reset+0x5c>)
 800095e:	a901      	add	r1, sp, #4
 8000960:	4620      	mov	r0, r4
 8000962:	f004 fa85 	bl	8004e70 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	4629      	mov	r1, r5
 800096a:	4620      	mov	r0, r4
 800096c:	f004 fb82 	bl	8005074 <HAL_GPIO_WritePin>
    HAL_Delay(20); /* wait 20 ms */
 8000970:	2014      	movs	r0, #20
 8000972:	f002 fdcb 	bl	800350c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 8000976:	4632      	mov	r2, r6
 8000978:	4629      	mov	r1, r5
 800097a:	4620      	mov	r0, r4
 800097c:	f004 fb7a 	bl	8005074 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000980:	200a      	movs	r0, #10
 8000982:	f002 fdc3 	bl	800350c <HAL_Delay>
}
 8000986:	b006      	add	sp, #24
 8000988:	bd70      	pop	{r4, r5, r6, pc}
 800098a:	bf00      	nop
 800098c:	40023800 	.word	0x40023800
 8000990:	40022400 	.word	0x40022400

08000994 <BSP_LCD_GetXSize>:
}
 8000994:	4b01      	ldr	r3, [pc, #4]	; (800099c <BSP_LCD_GetXSize+0x8>)
 8000996:	6818      	ldr	r0, [r3, #0]
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	20000000 	.word	0x20000000

080009a0 <BSP_LCD_GetYSize>:
}
 80009a0:	4b01      	ldr	r3, [pc, #4]	; (80009a8 <BSP_LCD_GetYSize+0x8>)
 80009a2:	6858      	ldr	r0, [r3, #4]
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	20000000 	.word	0x20000000

080009ac <BSP_LCD_LayerDefaultInit>:
{
 80009ac:	b570      	push	{r4, r5, r6, lr}
 80009ae:	b08e      	sub	sp, #56	; 0x38
 80009b0:	4604      	mov	r4, r0
 80009b2:	460e      	mov	r6, r1
  Layercfg.WindowX0 = 0;
 80009b4:	2500      	movs	r5, #0
 80009b6:	9501      	str	r5, [sp, #4]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80009b8:	f7ff ffec 	bl	8000994 <BSP_LCD_GetXSize>
 80009bc:	9002      	str	r0, [sp, #8]
  Layercfg.WindowY0 = 0;
 80009be:	9503      	str	r5, [sp, #12]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80009c0:	f7ff ffee 	bl	80009a0 <BSP_LCD_GetYSize>
 80009c4:	9004      	str	r0, [sp, #16]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80009c6:	9505      	str	r5, [sp, #20]
  Layercfg.FBStartAdress = FB_Address;
 80009c8:	960a      	str	r6, [sp, #40]	; 0x28
  Layercfg.Alpha = 255;
 80009ca:	23ff      	movs	r3, #255	; 0xff
 80009cc:	9306      	str	r3, [sp, #24]
  Layercfg.Alpha0 = 0;
 80009ce:	9507      	str	r5, [sp, #28]
  Layercfg.Backcolor.Blue = 0;
 80009d0:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
  Layercfg.Backcolor.Green = 0;
 80009d4:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  Layercfg.Backcolor.Red = 0;
 80009d8:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80009dc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009e0:	9308      	str	r3, [sp, #32]
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80009e2:	2307      	movs	r3, #7
 80009e4:	9309      	str	r3, [sp, #36]	; 0x24
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80009e6:	f7ff ffd5 	bl	8000994 <BSP_LCD_GetXSize>
 80009ea:	900b      	str	r0, [sp, #44]	; 0x2c
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80009ec:	f7ff ffd8 	bl	80009a0 <BSP_LCD_GetYSize>
 80009f0:	900c      	str	r0, [sp, #48]	; 0x30
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex); 
 80009f2:	4d0c      	ldr	r5, [pc, #48]	; (8000a24 <BSP_LCD_LayerDefaultInit+0x78>)
 80009f4:	4622      	mov	r2, r4
 80009f6:	a901      	add	r1, sp, #4
 80009f8:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 80009fc:	f005 f8b0 	bl	8005b60 <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8000a00:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8000a04:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8000a08:	f04f 32ff 	mov.w	r2, #4294967295
 8000a0c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  DrawProp[LayerIndex].pFont     = &Font24;
 8000a10:	4a05      	ldr	r2, [pc, #20]	; (8000a28 <BSP_LCD_LayerDefaultInit+0x7c>)
 8000a12:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8000a16:	461d      	mov	r5, r3
 8000a18:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8000a1c:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
}
 8000a20:	b00e      	add	sp, #56	; 0x38
 8000a22:	bd70      	pop	{r4, r5, r6, pc}
 8000a24:	2000012c 	.word	0x2000012c
 8000a28:	2000000c 	.word	0x2000000c

08000a2c <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
 8000a2c:	4b01      	ldr	r3, [pc, #4]	; (8000a34 <BSP_LCD_SelectLayer+0x8>)
 8000a2e:	6598      	str	r0, [r3, #88]	; 0x58
}
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	2000012c 	.word	0x2000012c

08000a38 <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
 8000a38:	4b04      	ldr	r3, [pc, #16]	; (8000a4c <BSP_LCD_SetTextColor+0x14>)
 8000a3a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a3c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000a40:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000a44:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
}
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	2000012c 	.word	0x2000012c

08000a50 <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = fonts;
 8000a50:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <BSP_LCD_SetFont+0x14>)
 8000a52:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a54:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000a58:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000a5c:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
}
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	2000012c 	.word	0x2000012c

08000a68 <BSP_LCD_GetFont>:
  return DrawProp[ActiveLayer].pFont;
 8000a68:	4a04      	ldr	r2, [pc, #16]	; (8000a7c <BSP_LCD_GetFont+0x14>)
 8000a6a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8000a6c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000a70:	0099      	lsls	r1, r3, #2
 8000a72:	440a      	add	r2, r1
}
 8000a74:	f8d2 010c 	ldr.w	r0, [r2, #268]	; 0x10c
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	2000012c 	.word	0x2000012c

08000a80 <BSP_LCD_Clear>:
{
 8000a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a82:	b083      	sub	sp, #12
 8000a84:	4605      	mov	r5, r0
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8000a86:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <BSP_LCD_Clear+0x34>)
 8000a88:	6d9e      	ldr	r6, [r3, #88]	; 0x58
 8000a8a:	2234      	movs	r2, #52	; 0x34
 8000a8c:	fb02 3306 	mla	r3, r2, r6, r3
 8000a90:	f8d3 70b8 	ldr.w	r7, [r3, #184]	; 0xb8
 8000a94:	f7ff ff7e 	bl	8000994 <BSP_LCD_GetXSize>
 8000a98:	4604      	mov	r4, r0
 8000a9a:	f7ff ff81 	bl	80009a0 <BSP_LCD_GetYSize>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	9501      	str	r5, [sp, #4]
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	9200      	str	r2, [sp, #0]
 8000aa6:	4622      	mov	r2, r4
 8000aa8:	4639      	mov	r1, r7
 8000aaa:	4630      	mov	r0, r6
 8000aac:	f7ff ff14 	bl	80008d8 <LL_FillBuffer>
}
 8000ab0:	b003      	add	sp, #12
 8000ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ab4:	2000012c 	.word	0x2000012c

08000ab8 <BSP_LCD_DisplayOn>:
{
 8000ab8:	b500      	push	{lr}
 8000aba:	b083      	sub	sp, #12
    HAL_DSI_ShortWrite(&(hdsi_discovery),
 8000abc:	4806      	ldr	r0, [pc, #24]	; (8000ad8 <BSP_LCD_DisplayOn+0x20>)
 8000abe:	2300      	movs	r3, #0
 8000ac0:	9300      	str	r3, [sp, #0]
 8000ac2:	2329      	movs	r3, #41	; 0x29
 8000ac4:	2215      	movs	r2, #21
 8000ac6:	f8d0 111c 	ldr.w	r1, [r0, #284]	; 0x11c
 8000aca:	f500 70c4 	add.w	r0, r0, #392	; 0x188
 8000ace:	f004 f95c 	bl	8004d8a <HAL_DSI_ShortWrite>
}
 8000ad2:	b003      	add	sp, #12
 8000ad4:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ad8:	2000012c 	.word	0x2000012c

08000adc <DSI_IO_WriteCmd>:
{
 8000adc:	b500      	push	{lr}
 8000ade:	b083      	sub	sp, #12
  if(NbrParams <= 1)
 8000ae0:	2801      	cmp	r0, #1
 8000ae2:	d90b      	bls.n	8000afc <DSI_IO_WriteCmd+0x20>
 8000ae4:	4603      	mov	r3, r0
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8000ae6:	5c0a      	ldrb	r2, [r1, r0]
 8000ae8:	9101      	str	r1, [sp, #4]
 8000aea:	9200      	str	r2, [sp, #0]
 8000aec:	2239      	movs	r2, #57	; 0x39
 8000aee:	2100      	movs	r1, #0
 8000af0:	4807      	ldr	r0, [pc, #28]	; (8000b10 <DSI_IO_WriteCmd+0x34>)
 8000af2:	f004 f95d 	bl	8004db0 <HAL_DSI_LongWrite>
}
 8000af6:	b003      	add	sp, #12
 8000af8:	f85d fb04 	ldr.w	pc, [sp], #4
   HAL_DSI_ShortWrite(&hdsi_discovery, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8000afc:	784b      	ldrb	r3, [r1, #1]
 8000afe:	9300      	str	r3, [sp, #0]
 8000b00:	780b      	ldrb	r3, [r1, #0]
 8000b02:	2215      	movs	r2, #21
 8000b04:	2100      	movs	r1, #0
 8000b06:	4802      	ldr	r0, [pc, #8]	; (8000b10 <DSI_IO_WriteCmd+0x34>)
 8000b08:	f004 f93f 	bl	8004d8a <HAL_DSI_ShortWrite>
 8000b0c:	e7f3      	b.n	8000af6 <DSI_IO_WriteCmd+0x1a>
 8000b0e:	bf00      	nop
 8000b10:	200002b4 	.word	0x200002b4

08000b14 <BSP_LCD_MspInit>:
{
 8000b14:	b500      	push	{lr}
 8000b16:	b085      	sub	sp, #20
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000b18:	4b27      	ldr	r3, [pc, #156]	; (8000bb8 <BSP_LCD_MspInit+0xa4>)
 8000b1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b1c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000b20:	645a      	str	r2, [r3, #68]	; 0x44
 8000b22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b24:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8000b28:	9201      	str	r2, [sp, #4]
 8000b2a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_LTDC_FORCE_RESET();
 8000b2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b2e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 8000b34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b36:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8000b3a:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8000b3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b3e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000b42:	631a      	str	r2, [r3, #48]	; 0x30
 8000b44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b46:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8000b4a:	9202      	str	r2, [sp, #8]
 8000b4c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_DMA2D_FORCE_RESET();
 8000b4e:	691a      	ldr	r2, [r3, #16]
 8000b50:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000b54:	611a      	str	r2, [r3, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 8000b56:	691a      	ldr	r2, [r3, #16]
 8000b58:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000b5c:	611a      	str	r2, [r3, #16]
  __HAL_RCC_DSI_CLK_ENABLE();
 8000b5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b60:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8000b64:	645a      	str	r2, [r3, #68]	; 0x44
 8000b66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b68:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8000b6c:	9203      	str	r2, [sp, #12]
 8000b6e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_DSI_FORCE_RESET();
 8000b70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b72:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8000b76:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 8000b78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b7a:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 8000b7e:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2103      	movs	r1, #3
 8000b84:	2058      	movs	r0, #88	; 0x58
 8000b86:	f003 f9d3 	bl	8003f30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000b8a:	2058      	movs	r0, #88	; 0x58
 8000b8c:	f003 fa06 	bl	8003f9c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8000b90:	2200      	movs	r2, #0
 8000b92:	2103      	movs	r1, #3
 8000b94:	205a      	movs	r0, #90	; 0x5a
 8000b96:	f003 f9cb 	bl	8003f30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000b9a:	205a      	movs	r0, #90	; 0x5a
 8000b9c:	f003 f9fe 	bl	8003f9c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2103      	movs	r1, #3
 8000ba4:	2062      	movs	r0, #98	; 0x62
 8000ba6:	f003 f9c3 	bl	8003f30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8000baa:	2062      	movs	r0, #98	; 0x62
 8000bac:	f003 f9f6 	bl	8003f9c <HAL_NVIC_EnableIRQ>
}
 8000bb0:	b005      	add	sp, #20
 8000bb2:	f85d fb04 	ldr.w	pc, [sp], #4
 8000bb6:	bf00      	nop
 8000bb8:	40023800 	.word	0x40023800

08000bbc <BSP_LCD_InitEx>:
{
 8000bbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000bc0:	b085      	sub	sp, #20
 8000bc2:	4606      	mov	r6, r0
  BSP_LCD_Reset();
 8000bc4:	f7ff feb6 	bl	8000934 <BSP_LCD_Reset>
  read_id = LCD_IO_GetID();
 8000bc8:	f7ff fe84 	bl	80008d4 <LCD_IO_GetID>
  if(read_id != LCD_DSI_ID)
 8000bcc:	2811      	cmp	r0, #17
 8000bce:	d003      	beq.n	8000bd8 <BSP_LCD_InitEx+0x1c>
    return LCD_ERROR;  
 8000bd0:	2001      	movs	r0, #1
}
 8000bd2:	b005      	add	sp, #20
 8000bd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  BSP_LCD_MspInit();
 8000bd8:	f7ff ff9c 	bl	8000b14 <BSP_LCD_MspInit>
  hdsi_discovery.Instance = DSI;
 8000bdc:	4c65      	ldr	r4, [pc, #404]	; (8000d74 <BSP_LCD_InitEx+0x1b8>)
 8000bde:	4b66      	ldr	r3, [pc, #408]	; (8000d78 <BSP_LCD_InitEx+0x1bc>)
 8000be0:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
  HAL_DSI_DeInit(&(hdsi_discovery));
 8000be4:	f504 75c4 	add.w	r5, r4, #392	; 0x188
 8000be8:	4628      	mov	r0, r5
 8000bea:	f003 ff24 	bl	8004a36 <HAL_DSI_DeInit>
  dsiPllInit.PLLNDIV  = 100;
 8000bee:	2364      	movs	r3, #100	; 0x64
 8000bf0:	9301      	str	r3, [sp, #4]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 8000bf2:	2305      	movs	r3, #5
 8000bf4:	9302      	str	r3, [sp, #8]
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	9303      	str	r3, [sp, #12]
  hdsi_discovery.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 8000c00:	2304      	movs	r3, #4
 8000c02:	f8c4 3190 	str.w	r3, [r4, #400]	; 0x190
  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 8000c06:	eb0d 0103 	add.w	r1, sp, r3
 8000c0a:	4628      	mov	r0, r5
 8000c0c:	f003 fe4c 	bl	80048a8 <HAL_DSI_Init>
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 8000c10:	2e00      	cmp	r6, #0
 8000c12:	f040 80a7 	bne.w	8000d64 <BSP_LCD_InitEx+0x1a8>
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 8000c16:	4b59      	ldr	r3, [pc, #356]	; (8000d7c <BSP_LCD_InitEx+0x1c0>)
 8000c18:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000c1c:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 8000c1e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000c22:	605a      	str	r2, [r3, #4]
  HACT = lcd_x_size;
 8000c24:	4f55      	ldr	r7, [pc, #340]	; (8000d7c <BSP_LCD_InitEx+0x1c0>)
 8000c26:	683b      	ldr	r3, [r7, #0]
  VACT = lcd_y_size;
 8000c28:	687a      	ldr	r2, [r7, #4]
  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 8000c2a:	4c52      	ldr	r4, [pc, #328]	; (8000d74 <BSP_LCD_InitEx+0x1b8>)
 8000c2c:	2500      	movs	r5, #0
 8000c2e:	f8c4 511c 	str.w	r5, [r4, #284]	; 0x11c
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 8000c32:	2105      	movs	r1, #5
 8000c34:	f8c4 1120 	str.w	r1, [r4, #288]	; 0x120
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000c38:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8000c3c:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 8000c40:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 8000c44:	2102      	movs	r1, #2
 8000c46:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
  hdsivideo_handle.NullPacketSize = 0xFFF;
 8000c4a:	f640 71ff 	movw	r1, #4095	; 0xfff
 8000c4e:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
  hdsivideo_handle.NumberOfChunks = 0;
 8000c52:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 8000c56:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz)/LcdClock;
 8000c5a:	2104      	movs	r1, #4
 8000c5c:	f8c4 1144 	str.w	r1, [r4, #324]	; 0x144
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 8000c60:	214d      	movs	r1, #77	; 0x4d
 8000c62:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 8000c66:	3346      	adds	r3, #70	; 0x46
 8000c68:	f24f 4124 	movw	r1, #62500	; 0xf424
 8000c6c:	fb01 f303 	mul.w	r3, r1, r3
 8000c70:	4943      	ldr	r1, [pc, #268]	; (8000d80 <BSP_LCD_InitEx+0x1c4>)
 8000c72:	fba1 1303 	umull	r1, r3, r1, r3
 8000c76:	0b5b      	lsrs	r3, r3, #13
 8000c78:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
  hdsivideo_handle.VerticalSyncActive        = VSA;
 8000c7c:	2378      	movs	r3, #120	; 0x78
 8000c7e:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
  hdsivideo_handle.VerticalBackPorch         = VBP;
 8000c82:	2396      	movs	r3, #150	; 0x96
 8000c84:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 8000c88:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 8000c8c:	f8c4 215c 	str.w	r2, [r4, #348]	; 0x15c
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 8000c90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c94:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
  hdsivideo_handle.LPLargestPacketSize = 16;
 8000c98:	2310      	movs	r3, #16
 8000c9a:	f8c4 3164 	str.w	r3, [r4, #356]	; 0x164
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 8000c9e:	f8c4 5168 	str.w	r5, [r4, #360]	; 0x168
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 8000ca2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ca6:	f8c4 316c 	str.w	r3, [r4, #364]	; 0x16c
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 8000caa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cae:	f8c4 3170 	str.w	r3, [r4, #368]	; 0x170
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 8000cb2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cb6:	f8c4 3174 	str.w	r3, [r4, #372]	; 0x174
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 8000cba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cbe:	f8c4 3178 	str.w	r3, [r4, #376]	; 0x178
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 8000cc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cc6:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 8000cca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cce:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 8000cd2:	f504 798e 	add.w	r9, r4, #284	; 0x11c
 8000cd6:	f504 78c4 	add.w	r8, r4, #392	; 0x188
 8000cda:	4649      	mov	r1, r9
 8000cdc:	4640      	mov	r0, r8
 8000cde:	f003 fef9 	bl	8004ad4 <HAL_DSI_ConfigVideoMode>
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	6723      	str	r3, [r4, #112]	; 0x70
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 8000ce6:	2323      	movs	r3, #35	; 0x23
 8000ce8:	67a3      	str	r3, [r4, #120]	; 0x78
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	f103 0223 	add.w	r2, r3, #35	; 0x23
 8000cf0:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 8000cf4:	f103 0245 	add.w	r2, r3, #69	; 0x45
 8000cf8:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  hltdc_discovery.LayerCfg->ImageWidth  = lcd_x_size;
 8000cfc:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000d06:	2308      	movs	r3, #8
 8000d08:	f8c4 31a4 	str.w	r3, [r4, #420]	; 0x1a4
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000d0c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000d10:	f8c4 31b8 	str.w	r3, [r4, #440]	; 0x1b8
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 8000d14:	2307      	movs	r3, #7
 8000d16:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000d1a:	f8c4 51d0 	str.w	r5, [r4, #464]	; 0x1d0
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000d1e:	f504 70d2 	add.w	r0, r4, #420	; 0x1a4
 8000d22:	f005 fb2d 	bl	8006380 <HAL_RCCEx_PeriphCLKConfig>
  hltdc_discovery.Init.Backcolor.Blue = 0;
 8000d26:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
  hltdc_discovery.Init.Backcolor.Green = 0;
 8000d2a:	f884 5091 	strb.w	r5, [r4, #145]	; 0x91
  hltdc_discovery.Init.Backcolor.Red = 0;
 8000d2e:	f884 5092 	strb.w	r5, [r4, #146]	; 0x92
  hltdc_discovery.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000d32:	66e5      	str	r5, [r4, #108]	; 0x6c
  hltdc_discovery.Instance = LTDC;
 8000d34:	4b13      	ldr	r3, [pc, #76]	; (8000d84 <BSP_LCD_InitEx+0x1c8>)
 8000d36:	f844 3f5c 	str.w	r3, [r4, #92]!
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 8000d3a:	4649      	mov	r1, r9
 8000d3c:	4620      	mov	r0, r4
 8000d3e:	f004 ff43 	bl	8005bc8 <HAL_LTDCEx_StructInitFromVideoConfig>
  HAL_LTDC_Init(&hltdc_discovery);
 8000d42:	4620      	mov	r0, r4
 8000d44:	f004 fe92 	bl	8005a6c <HAL_LTDC_Init>
  HAL_DSI_Start(&hdsi_discovery);
 8000d48:	4640      	mov	r0, r8
 8000d4a:	f003 fff7 	bl	8004d3c <HAL_DSI_Start>
  BSP_SDRAM_Init();
 8000d4e:	f000 fa47 	bl	80011e0 <BSP_SDRAM_Init>
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8000d52:	480d      	ldr	r0, [pc, #52]	; (8000d88 <BSP_LCD_InitEx+0x1cc>)
 8000d54:	f7ff fe7c 	bl	8000a50 <BSP_LCD_SetFont>
  NT35510_Init(NT35510_FORMAT_RGB888, orientation);
 8000d58:	4631      	mov	r1, r6
 8000d5a:	4628      	mov	r0, r5
 8000d5c:	f7ff fc3e 	bl	80005dc <NT35510_Init>
  return LCD_OK; 
 8000d60:	4628      	mov	r0, r5
 8000d62:	e736      	b.n	8000bd2 <BSP_LCD_InitEx+0x16>
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 8000d64:	4b05      	ldr	r3, [pc, #20]	; (8000d7c <BSP_LCD_InitEx+0x1c0>)
 8000d66:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000d6a:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 8000d6c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	e757      	b.n	8000c24 <BSP_LCD_InitEx+0x68>
 8000d74:	2000012c 	.word	0x2000012c
 8000d78:	40016c00 	.word	0x40016c00
 8000d7c:	20000000 	.word	0x20000000
 8000d80:	4c751ce3 	.word	0x4c751ce3
 8000d84:	40016800 	.word	0x40016800
 8000d88:	2000000c 	.word	0x2000000c

08000d8c <BSP_LCD_Init>:
{
 8000d8c:	b508      	push	{r3, lr}
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8000d8e:	2001      	movs	r0, #1
 8000d90:	f7ff ff14 	bl	8000bbc <BSP_LCD_InitEx>
}
 8000d94:	bd08      	pop	{r3, pc}
	...

08000d98 <BSP_LCD_DrawPixel>:
{
 8000d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	460e      	mov	r6, r1
 8000d9e:	4615      	mov	r5, r2
  *(__IO uint32_t*) (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <BSP_LCD_DrawPixel+0x24>)
 8000da2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000da4:	2134      	movs	r1, #52	; 0x34
 8000da6:	fb01 3302 	mla	r3, r1, r2, r3
 8000daa:	f8d3 70b8 	ldr.w	r7, [r3, #184]	; 0xb8
 8000dae:	f7ff fdf1 	bl	8000994 <BSP_LCD_GetXSize>
 8000db2:	fb00 4406 	mla	r4, r0, r6, r4
 8000db6:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
}
 8000dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000dbc:	2000012c 	.word	0x2000012c

08000dc0 <DrawChar>:
{
 8000dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000dc4:	b083      	sub	sp, #12
 8000dc6:	4681      	mov	r9, r0
 8000dc8:	460e      	mov	r6, r1
 8000dca:	9200      	str	r2, [sp, #0]
  height = DrawProp[ActiveLayer].pFont->Height;
 8000dcc:	4b34      	ldr	r3, [pc, #208]	; (8000ea0 <DrawChar+0xe0>)
 8000dce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000dd0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000dd4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000dd8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8000ddc:	88da      	ldrh	r2, [r3, #6]
 8000dde:	9201      	str	r2, [sp, #4]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8000de0:	889d      	ldrh	r5, [r3, #4]
  offset =  8 *((width + 7)/8) -  width ;
 8000de2:	f105 0b07 	add.w	fp, r5, #7
 8000de6:	ea4f 0beb 	mov.w	fp, fp, asr #3
 8000dea:	ea4f 08cb 	mov.w	r8, fp, lsl #3
 8000dee:	fa5f f888 	uxtb.w	r8, r8
 8000df2:	b2eb      	uxtb	r3, r5
 8000df4:	eba8 0803 	sub.w	r8, r8, r3
 8000df8:	fa5f f888 	uxtb.w	r8, r8
  for(i = 0; i < height; i++)
 8000dfc:	f04f 0a00 	mov.w	sl, #0
 8000e00:	e035      	b.n	8000e6e <DrawChar+0xae>
      line =  pchar[0];
 8000e02:	9a00      	ldr	r2, [sp, #0]
 8000e04:	5cd7      	ldrb	r7, [r2, r3]
    for (j = 0; j < width; j++)
 8000e06:	2400      	movs	r4, #0
 8000e08:	e014      	b.n	8000e34 <DrawChar+0x74>
      line =  (pchar[0]<< 8) | pchar[1];
 8000e0a:	9900      	ldr	r1, [sp, #0]
 8000e0c:	5ccb      	ldrb	r3, [r1, r3]
 8000e0e:	7857      	ldrb	r7, [r2, #1]
 8000e10:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
      break;
 8000e14:	e7f7      	b.n	8000e06 <DrawChar+0x46>
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8000e16:	4b22      	ldr	r3, [pc, #136]	; (8000ea0 <DrawChar+0xe0>)
 8000e18:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000e1a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000e1e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000e22:	eb09 0004 	add.w	r0, r9, r4
 8000e26:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8000e2a:	4631      	mov	r1, r6
 8000e2c:	b280      	uxth	r0, r0
 8000e2e:	f7ff ffb3 	bl	8000d98 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8000e32:	3401      	adds	r4, #1
 8000e34:	42a5      	cmp	r5, r4
 8000e36:	d916      	bls.n	8000e66 <DrawChar+0xa6>
      if(line & (1 << (width- j + offset- 1)))
 8000e38:	1b2b      	subs	r3, r5, r4
 8000e3a:	4443      	add	r3, r8
 8000e3c:	3b01      	subs	r3, #1
 8000e3e:	2201      	movs	r2, #1
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	423b      	tst	r3, r7
 8000e46:	d0e6      	beq.n	8000e16 <DrawChar+0x56>
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8000e48:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <DrawChar+0xe0>)
 8000e4a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000e4c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000e50:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000e54:	eb09 0004 	add.w	r0, r9, r4
 8000e58:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	b280      	uxth	r0, r0
 8000e60:	f7ff ff9a 	bl	8000d98 <BSP_LCD_DrawPixel>
 8000e64:	e7e5      	b.n	8000e32 <DrawChar+0x72>
    Ypos++;
 8000e66:	3601      	adds	r6, #1
 8000e68:	b2b6      	uxth	r6, r6
  for(i = 0; i < height; i++)
 8000e6a:	f10a 0a01 	add.w	sl, sl, #1
 8000e6e:	9b01      	ldr	r3, [sp, #4]
 8000e70:	4553      	cmp	r3, sl
 8000e72:	d912      	bls.n	8000e9a <DrawChar+0xda>
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8000e74:	fb0a f30b 	mul.w	r3, sl, fp
 8000e78:	9a00      	ldr	r2, [sp, #0]
 8000e7a:	441a      	add	r2, r3
    switch(((width + 7)/8))
 8000e7c:	f1bb 0f01 	cmp.w	fp, #1
 8000e80:	d0bf      	beq.n	8000e02 <DrawChar+0x42>
 8000e82:	f1bb 0f02 	cmp.w	fp, #2
 8000e86:	d0c0      	beq.n	8000e0a <DrawChar+0x4a>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8000e88:	9900      	ldr	r1, [sp, #0]
 8000e8a:	5ccb      	ldrb	r3, [r1, r3]
 8000e8c:	7857      	ldrb	r7, [r2, #1]
 8000e8e:	023f      	lsls	r7, r7, #8
 8000e90:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
 8000e94:	7893      	ldrb	r3, [r2, #2]
 8000e96:	431f      	orrs	r7, r3
      break;
 8000e98:	e7b5      	b.n	8000e06 <DrawChar+0x46>
}
 8000e9a:	b003      	add	sp, #12
 8000e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ea0:	2000012c 	.word	0x2000012c

08000ea4 <BSP_LCD_DisplayChar>:
{
 8000ea4:	b538      	push	{r3, r4, r5, lr}
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <BSP_LCD_DisplayChar+0x30>)
 8000ea8:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 8000eaa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8000eae:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8000eb2:	f8d3 410c 	ldr.w	r4, [r3, #268]	; 0x10c
 8000eb6:	6825      	ldr	r5, [r4, #0]
 8000eb8:	f1a2 0320 	sub.w	r3, r2, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8000ebc:	88e2      	ldrh	r2, [r4, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000ebe:	fb02 f303 	mul.w	r3, r2, r3
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8000ec2:	88a2      	ldrh	r2, [r4, #4]
 8000ec4:	3207      	adds	r2, #7
 8000ec6:	10d2      	asrs	r2, r2, #3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000ec8:	fb02 5203 	mla	r2, r2, r3, r5
 8000ecc:	f7ff ff78 	bl	8000dc0 <DrawChar>
}
 8000ed0:	bd38      	pop	{r3, r4, r5, pc}
 8000ed2:	bf00      	nop
 8000ed4:	2000012c 	.word	0x2000012c

08000ed8 <BSP_LCD_DisplayStringAt>:
{
 8000ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000edc:	4604      	mov	r4, r0
 8000ede:	460e      	mov	r6, r1
 8000ee0:	4615      	mov	r5, r2
 8000ee2:	4698      	mov	r8, r3
  uint8_t  *ptr = Text;
 8000ee4:	4694      	mov	ip, r2
  uint32_t size = 0, xsize = 0;
 8000ee6:	2700      	movs	r7, #0
  while (*ptr++) size ++ ;
 8000ee8:	e000      	b.n	8000eec <BSP_LCD_DisplayStringAt+0x14>
 8000eea:	3701      	adds	r7, #1
 8000eec:	f81c 2b01 	ldrb.w	r2, [ip], #1
 8000ef0:	2a00      	cmp	r2, #0
 8000ef2:	d1fa      	bne.n	8000eea <BSP_LCD_DisplayStringAt+0x12>
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8000ef4:	f7ff fd4e 	bl	8000994 <BSP_LCD_GetXSize>
 8000ef8:	4b2a      	ldr	r3, [pc, #168]	; (8000fa4 <BSP_LCD_DisplayStringAt+0xcc>)
 8000efa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000efc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000f00:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000f04:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8000f08:	889a      	ldrh	r2, [r3, #4]
 8000f0a:	fbb0 f0f2 	udiv	r0, r0, r2
  switch (Mode)
 8000f0e:	f1b8 0f01 	cmp.w	r8, #1
 8000f12:	d007      	beq.n	8000f24 <BSP_LCD_DisplayStringAt+0x4c>
 8000f14:	f1b8 0f02 	cmp.w	r8, #2
 8000f18:	d00c      	beq.n	8000f34 <BSP_LCD_DisplayStringAt+0x5c>
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8000f1a:	b223      	sxth	r3, r4
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	dd3e      	ble.n	8000f9e <BSP_LCD_DisplayStringAt+0xc6>
    refcolumn = 1;
 8000f20:	2700      	movs	r7, #0
 8000f22:	e021      	b.n	8000f68 <BSP_LCD_DisplayStringAt+0x90>
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8000f24:	1bc0      	subs	r0, r0, r7
 8000f26:	fb00 f302 	mul.w	r3, r0, r2
 8000f2a:	f3c3 034f 	ubfx	r3, r3, #1, #16
 8000f2e:	4423      	add	r3, r4
 8000f30:	b29c      	uxth	r4, r3
      break;
 8000f32:	e7f2      	b.n	8000f1a <BSP_LCD_DisplayStringAt+0x42>
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8000f34:	1bc3      	subs	r3, r0, r7
 8000f36:	fb13 f302 	smulbb	r3, r3, r2
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	1b1b      	subs	r3, r3, r4
 8000f3e:	b29c      	uxth	r4, r3
      break;
 8000f40:	e7eb      	b.n	8000f1a <BSP_LCD_DisplayStringAt+0x42>
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8000f42:	4642      	mov	r2, r8
 8000f44:	4631      	mov	r1, r6
 8000f46:	4620      	mov	r0, r4
 8000f48:	f7ff ffac 	bl	8000ea4 <BSP_LCD_DisplayChar>
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8000f4c:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <BSP_LCD_DisplayStringAt+0xcc>)
 8000f4e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000f50:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000f54:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000f58:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8000f5c:	889b      	ldrh	r3, [r3, #4]
 8000f5e:	4423      	add	r3, r4
 8000f60:	b29c      	uxth	r4, r3
    Text++;
 8000f62:	3501      	adds	r5, #1
    i++;
 8000f64:	3701      	adds	r7, #1
 8000f66:	b2bf      	uxth	r7, r7
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8000f68:	f895 8000 	ldrb.w	r8, [r5]
 8000f6c:	f7ff fd12 	bl	8000994 <BSP_LCD_GetXSize>
 8000f70:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <BSP_LCD_DisplayStringAt+0xcc>)
 8000f72:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000f74:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000f78:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000f7c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8000f80:	889a      	ldrh	r2, [r3, #4]
 8000f82:	fb02 0317 	mls	r3, r2, r7, r0
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	f1b8 0100 	subs.w	r1, r8, #0
 8000f8c:	bf18      	it	ne
 8000f8e:	2101      	movne	r1, #1
 8000f90:	4293      	cmp	r3, r2
 8000f92:	bf38      	it	cc
 8000f94:	2100      	movcc	r1, #0
 8000f96:	2900      	cmp	r1, #0
 8000f98:	d1d3      	bne.n	8000f42 <BSP_LCD_DisplayStringAt+0x6a>
}
 8000f9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    refcolumn = 1;
 8000f9e:	2401      	movs	r4, #1
 8000fa0:	e7be      	b.n	8000f20 <BSP_LCD_DisplayStringAt+0x48>
 8000fa2:	bf00      	nop
 8000fa4:	2000012c 	.word	0x2000012c

08000fa8 <BSP_LCD_DisplayStringAtLine>:
{
 8000fa8:	b538      	push	{r3, r4, r5, lr}
 8000faa:	4605      	mov	r5, r0
 8000fac:	460c      	mov	r4, r1
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8000fae:	f7ff fd5b 	bl	8000a68 <BSP_LCD_GetFont>
 8000fb2:	88c3      	ldrh	r3, [r0, #6]
 8000fb4:	fb13 f105 	smulbb	r1, r3, r5
 8000fb8:	2303      	movs	r3, #3
 8000fba:	4622      	mov	r2, r4
 8000fbc:	b289      	uxth	r1, r1
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f7ff ff8a 	bl	8000ed8 <BSP_LCD_DisplayStringAt>
}
 8000fc4:	bd38      	pop	{r3, r4, r5, pc}
	...

08000fc8 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8000fc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000fcc:	b083      	sub	sp, #12
 8000fce:	4681      	mov	r9, r0
  __IO uint32_t tmpmrd = 0;
 8000fd0:	f04f 0800 	mov.w	r8, #0
 8000fd4:	f8cd 8004 	str.w	r8, [sp, #4]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8000fd8:	4c20      	ldr	r4, [pc, #128]	; (800105c <BSP_SDRAM_Initialization_sequence+0x94>)
 8000fda:	2601      	movs	r6, #1
 8000fdc:	6026      	str	r6, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000fde:	2710      	movs	r7, #16
 8000fe0:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 8000fe2:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8000fe4:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000fe8:	19e5      	adds	r5, r4, r7
 8000fea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fee:	4621      	mov	r1, r4
 8000ff0:	4628      	mov	r0, r5
 8000ff2:	f005 fce6 	bl	80069c2 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8000ff6:	4630      	mov	r0, r6
 8000ff8:	f002 fa88 	bl	800350c <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001000:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 8001002:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8001004:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8001008:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800100c:	4621      	mov	r1, r4
 800100e:	4628      	mov	r0, r5
 8001010:	f005 fcd7 	bl	80069c2 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001014:	2303      	movs	r3, #3
 8001016:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001018:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 8;
 800101a:	2308      	movs	r3, #8
 800101c:	60a3      	str	r3, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 800101e:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001022:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001026:	4621      	mov	r1, r4
 8001028:	4628      	mov	r0, r5
 800102a:	f005 fcca 	bl	80069c2 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800102e:	f44f 730c 	mov.w	r3, #560	; 0x230
 8001032:	9301      	str	r3, [sp, #4]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8001034:	2304      	movs	r3, #4
 8001036:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001038:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 800103a:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800103c:	9b01      	ldr	r3, [sp, #4]
 800103e:	60e3      	str	r3, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001040:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001044:	4621      	mov	r1, r4
 8001046:	4628      	mov	r0, r5
 8001048:	f005 fcbb 	bl	80069c2 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 800104c:	4649      	mov	r1, r9
 800104e:	4628      	mov	r0, r5
 8001050:	f005 fcd8 	bl	8006a04 <HAL_SDRAM_ProgramRefreshRate>
}
 8001054:	b003      	add	sp, #12
 8001056:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800105a:	bf00      	nop
 800105c:	20000360 	.word	0x20000360

08001060 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8001060:	b570      	push	{r4, r5, r6, lr}
 8001062:	b08e      	sub	sp, #56	; 0x38
 8001064:	4606      	mov	r6, r0
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001066:	4b55      	ldr	r3, [pc, #340]	; (80011bc <BSP_SDRAM_MspInit+0x15c>)
 8001068:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800106a:	f042 0201 	orr.w	r2, r2, #1
 800106e:	639a      	str	r2, [r3, #56]	; 0x38
 8001070:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001072:	f002 0201 	and.w	r2, r2, #1
 8001076:	9201      	str	r2, [sp, #4]
 8001078:	9a01      	ldr	r2, [sp, #4]
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800107a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800107c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001080:	631a      	str	r2, [r3, #48]	; 0x30
 8001082:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001084:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8001088:	9202      	str	r2, [sp, #8]
 800108a:	9a02      	ldr	r2, [sp, #8]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800108c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800108e:	f042 0208 	orr.w	r2, r2, #8
 8001092:	631a      	str	r2, [r3, #48]	; 0x30
 8001094:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001096:	f002 0208 	and.w	r2, r2, #8
 800109a:	9203      	str	r2, [sp, #12]
 800109c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800109e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010a0:	f042 0210 	orr.w	r2, r2, #16
 80010a4:	631a      	str	r2, [r3, #48]	; 0x30
 80010a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010a8:	f002 0210 	and.w	r2, r2, #16
 80010ac:	9204      	str	r2, [sp, #16]
 80010ae:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010b2:	f042 0220 	orr.w	r2, r2, #32
 80010b6:	631a      	str	r2, [r3, #48]	; 0x30
 80010b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010ba:	f002 0220 	and.w	r2, r2, #32
 80010be:	9205      	str	r2, [sp, #20]
 80010c0:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010c8:	631a      	str	r2, [r3, #48]	; 0x30
 80010ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010cc:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80010d0:	9206      	str	r2, [sp, #24]
 80010d2:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010da:	631a      	str	r2, [r3, #48]	; 0x30
 80010dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010de:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80010e2:	9207      	str	r2, [sp, #28]
 80010e4:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80010e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010ec:	631a      	str	r2, [r3, #48]	; 0x30
 80010ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010f4:	9308      	str	r3, [sp, #32]
 80010f6:	9b08      	ldr	r3, [sp, #32]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80010f8:	2302      	movs	r3, #2
 80010fa:	930a      	str	r3, [sp, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80010fc:	2301      	movs	r3, #1
 80010fe:	930b      	str	r3, [sp, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8001100:	2503      	movs	r5, #3
 8001102:	950c      	str	r5, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8001104:	230c      	movs	r3, #12
 8001106:	930d      	str	r3, [sp, #52]	; 0x34
  
  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8001108:	f24c 7303 	movw	r3, #50947	; 0xc703
 800110c:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;
 
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800110e:	a909      	add	r1, sp, #36	; 0x24
 8001110:	482b      	ldr	r0, [pc, #172]	; (80011c0 <BSP_SDRAM_MspInit+0x160>)
 8001112:	f003 fead 	bl	8004e70 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8001116:	f64f 7383 	movw	r3, #65411	; 0xff83
 800111a:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
      
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800111c:	a909      	add	r1, sp, #36	; 0x24
 800111e:	4829      	ldr	r0, [pc, #164]	; (80011c4 <BSP_SDRAM_MspInit+0x164>)
 8001120:	f003 fea6 	bl	8004e70 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8001124:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001128:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
    
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800112a:	a909      	add	r1, sp, #36	; 0x24
 800112c:	4826      	ldr	r0, [pc, #152]	; (80011c8 <BSP_SDRAM_MspInit+0x168>)
 800112e:	f003 fe9f 	bl	8004e70 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 8001132:	f248 1337 	movw	r3, #33079	; 0x8137
 8001136:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001138:	a909      	add	r1, sp, #36	; 0x24
 800113a:	4824      	ldr	r0, [pc, #144]	; (80011cc <BSP_SDRAM_MspInit+0x16c>)
 800113c:	f003 fe98 	bl	8004e70 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8001140:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8001144:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8001146:	a909      	add	r1, sp, #36	; 0x24
 8001148:	4821      	ldr	r0, [pc, #132]	; (80011d0 <BSP_SDRAM_MspInit+0x170>)
 800114a:	f003 fe91 	bl	8004e70 <HAL_GPIO_Init>
  
  /* GPIOI configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 800114e:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8001152:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 8001154:	a909      	add	r1, sp, #36	; 0x24
 8001156:	481f      	ldr	r0, [pc, #124]	; (80011d4 <BSP_SDRAM_MspInit+0x174>)
 8001158:	f003 fe8a 	bl	8004e70 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800115c:	4b1e      	ldr	r3, [pc, #120]	; (80011d8 <BSP_SDRAM_MspInit+0x178>)
 800115e:	2400      	movs	r4, #0
 8001160:	649c      	str	r4, [r3, #72]	; 0x48
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8001162:	2280      	movs	r2, #128	; 0x80
 8001164:	64da      	str	r2, [r3, #76]	; 0x4c
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8001166:	f44f 7200 	mov.w	r2, #512	; 0x200
 800116a:	651a      	str	r2, [r3, #80]	; 0x50
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800116c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001170:	655a      	str	r2, [r3, #84]	; 0x54
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001172:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001176:	659a      	str	r2, [r3, #88]	; 0x58
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001178:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800117c:	65da      	str	r2, [r3, #92]	; 0x5c
  dma_handle.Init.Mode                = DMA_NORMAL;
 800117e:	661c      	str	r4, [r3, #96]	; 0x60
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8001180:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001184:	665a      	str	r2, [r3, #100]	; 0x64
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8001186:	669c      	str	r4, [r3, #104]	; 0x68
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001188:	66dd      	str	r5, [r3, #108]	; 0x6c
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800118a:	671c      	str	r4, [r3, #112]	; 0x70
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800118c:	675c      	str	r4, [r3, #116]	; 0x74
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 800118e:	461d      	mov	r5, r3
 8001190:	4a12      	ldr	r2, [pc, #72]	; (80011dc <BSP_SDRAM_MspInit+0x17c>)
 8001192:	f845 2f44 	str.w	r2, [r5, #68]!
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8001196:	6335      	str	r5, [r6, #48]	; 0x30
 8001198:	67de      	str	r6, [r3, #124]	; 0x7c
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800119a:	4628      	mov	r0, r5
 800119c:	f002 fff0 	bl	8004180 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80011a0:	4628      	mov	r0, r5
 80011a2:	f002 ff87 	bl	80040b4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80011a6:	4622      	mov	r2, r4
 80011a8:	210f      	movs	r1, #15
 80011aa:	2038      	movs	r0, #56	; 0x38
 80011ac:	f002 fec0 	bl	8003f30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80011b0:	2038      	movs	r0, #56	; 0x38
 80011b2:	f002 fef3 	bl	8003f9c <HAL_NVIC_EnableIRQ>
}
 80011b6:	b00e      	add	sp, #56	; 0x38
 80011b8:	bd70      	pop	{r4, r5, r6, pc}
 80011ba:	bf00      	nop
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40020c00 	.word	0x40020c00
 80011c4:	40021000 	.word	0x40021000
 80011c8:	40021400 	.word	0x40021400
 80011cc:	40021800 	.word	0x40021800
 80011d0:	40021c00 	.word	0x40021c00
 80011d4:	40022000 	.word	0x40022000
 80011d8:	20000360 	.word	0x20000360
 80011dc:	40026410 	.word	0x40026410

080011e0 <BSP_SDRAM_Init>:
{ 
 80011e0:	b538      	push	{r3, r4, r5, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80011e2:	4c20      	ldr	r4, [pc, #128]	; (8001264 <BSP_SDRAM_Init+0x84>)
 80011e4:	4b20      	ldr	r3, [pc, #128]	; (8001268 <BSP_SDRAM_Init+0x88>)
 80011e6:	6123      	str	r3, [r4, #16]
  Timing.LoadToActiveDelay    = 2;
 80011e8:	2302      	movs	r3, #2
 80011ea:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
  Timing.ExitSelfRefreshDelay = 7;
 80011ee:	2107      	movs	r1, #7
 80011f0:	f8c4 10a8 	str.w	r1, [r4, #168]	; 0xa8
  Timing.SelfRefreshTime      = 4;
 80011f4:	2204      	movs	r2, #4
 80011f6:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
  Timing.RowCycleDelay        = 7;
 80011fa:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
  Timing.WriteRecoveryTime    = 2;
 80011fe:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
  Timing.RPDelay              = 2;
 8001202:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
  Timing.RCDDelay             = 2;
 8001206:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 800120a:	2100      	movs	r1, #0
 800120c:	6161      	str	r1, [r4, #20]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800120e:	61a1      	str	r1, [r4, #24]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8001210:	61e2      	str	r2, [r4, #28]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8001212:	2320      	movs	r3, #32
 8001214:	6223      	str	r3, [r4, #32]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001216:	2340      	movs	r3, #64	; 0x40
 8001218:	6263      	str	r3, [r4, #36]	; 0x24
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800121a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800121e:	62a3      	str	r3, [r4, #40]	; 0x28
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001220:	62e1      	str	r1, [r4, #44]	; 0x2c
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8001222:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001226:	6323      	str	r3, [r4, #48]	; 0x30
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8001228:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800122c:	6363      	str	r3, [r4, #52]	; 0x34
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800122e:	63a1      	str	r1, [r4, #56]	; 0x38
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8001230:	f104 0510 	add.w	r5, r4, #16
 8001234:	4628      	mov	r0, r5
 8001236:	f7ff ff13 	bl	8001060 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800123a:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
 800123e:	4628      	mov	r0, r5
 8001240:	f005 fb9f 	bl	8006982 <HAL_SDRAM_Init>
 8001244:	b148      	cbz	r0, 800125a <BSP_SDRAM_Init+0x7a>
    sdramstatus = SDRAM_ERROR;
 8001246:	4b09      	ldr	r3, [pc, #36]	; (800126c <BSP_SDRAM_Init+0x8c>)
 8001248:	2201      	movs	r2, #1
 800124a:	701a      	strb	r2, [r3, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800124c:	f240 6003 	movw	r0, #1539	; 0x603
 8001250:	f7ff feba 	bl	8000fc8 <BSP_SDRAM_Initialization_sequence>
}
 8001254:	4b05      	ldr	r3, [pc, #20]	; (800126c <BSP_SDRAM_Init+0x8c>)
 8001256:	7818      	ldrb	r0, [r3, #0]
 8001258:	bd38      	pop	{r3, r4, r5, pc}
    sdramstatus = SDRAM_OK;
 800125a:	4b04      	ldr	r3, [pc, #16]	; (800126c <BSP_SDRAM_Init+0x8c>)
 800125c:	2200      	movs	r2, #0
 800125e:	701a      	strb	r2, [r3, #0]
 8001260:	e7f4      	b.n	800124c <BSP_SDRAM_Init+0x6c>
 8001262:	bf00      	nop
 8001264:	20000360 	.word	0x20000360
 8001268:	a0000140 	.word	0xa0000140
 800126c:	20000008 	.word	0x20000008

08001270 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001270:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8001274:	b97b      	cbnz	r3, 8001296 <osKernelInitialize+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001276:	f3ef 8310 	mrs	r3, PRIMASK
 800127a:	b913      	cbnz	r3, 8001282 <osKernelInitialize+0x12>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800127c:	f3ef 8311 	mrs	r3, BASEPRI
 8001280:	b11b      	cbz	r3, 800128a <osKernelInitialize+0x1a>
 8001282:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <osKernelInitialize+0x38>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2b02      	cmp	r3, #2
 8001288:	d008      	beq.n	800129c <osKernelInitialize+0x2c>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800128a:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <osKernelInitialize+0x38>)
 800128c:	6818      	ldr	r0, [r3, #0]
 800128e:	b940      	cbnz	r0, 80012a2 <osKernelInitialize+0x32>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001290:	2201      	movs	r2, #1
 8001292:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001294:	4770      	bx	lr
    stat = osErrorISR;
 8001296:	f06f 0005 	mvn.w	r0, #5
 800129a:	4770      	bx	lr
 800129c:	f06f 0005 	mvn.w	r0, #5
 80012a0:	4770      	bx	lr
    } else {
      stat = osError;
 80012a2:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 80012a6:	4770      	bx	lr
 80012a8:	20000480 	.word	0x20000480

080012ac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80012ac:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80012ae:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80012b2:	b9a3      	cbnz	r3, 80012de <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80012b4:	f3ef 8310 	mrs	r3, PRIMASK
 80012b8:	b913      	cbnz	r3, 80012c0 <osKernelStart+0x14>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80012ba:	f3ef 8311 	mrs	r3, BASEPRI
 80012be:	b11b      	cbz	r3, 80012c8 <osKernelStart+0x1c>
 80012c0:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <osKernelStart+0x44>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d00d      	beq.n	80012e4 <osKernelStart+0x38>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 80012c8:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <osKernelStart+0x44>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d10c      	bne.n	80012ea <osKernelStart+0x3e>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80012d0:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <osKernelStart+0x44>)
 80012d2:	2202      	movs	r2, #2
 80012d4:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80012d6:	f000 fee9 	bl	80020ac <vTaskStartScheduler>
      stat = osOK;
 80012da:	2000      	movs	r0, #0
      stat = osError;
    }
  }

  return (stat);
}
 80012dc:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 80012de:	f06f 0005 	mvn.w	r0, #5
 80012e2:	e7fb      	b.n	80012dc <osKernelStart+0x30>
 80012e4:	f06f 0005 	mvn.w	r0, #5
 80012e8:	e7f8      	b.n	80012dc <osKernelStart+0x30>
      stat = osError;
 80012ea:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 80012ee:	e7f5      	b.n	80012dc <osKernelStart+0x30>
 80012f0:	20000480 	.word	0x20000480

080012f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80012f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012f6:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80012f8:	2400      	movs	r4, #0
 80012fa:	9405      	str	r4, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80012fc:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8001300:	2c00      	cmp	r4, #0
 8001302:	d138      	bne.n	8001376 <osThreadNew+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001304:	f3ef 8310 	mrs	r3, PRIMASK
 8001308:	b913      	cbnz	r3, 8001310 <osThreadNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800130a:	f3ef 8311 	mrs	r3, BASEPRI
 800130e:	b11b      	cbz	r3, 8001318 <osThreadNew+0x24>
 8001310:	4b2d      	ldr	r3, [pc, #180]	; (80013c8 <osThreadNew+0xd4>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b02      	cmp	r3, #2
 8001316:	d02e      	beq.n	8001376 <osThreadNew+0x82>
 8001318:	b368      	cbz	r0, 8001376 <osThreadNew+0x82>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800131a:	b322      	cbz	r2, 8001366 <osThreadNew+0x72>
      if (attr->name != NULL) {
 800131c:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800131e:	6993      	ldr	r3, [r2, #24]
 8001320:	b903      	cbnz	r3, 8001324 <osThreadNew+0x30>
    prio  = (UBaseType_t)osPriorityNormal;
 8001322:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001324:	1e5c      	subs	r4, r3, #1
 8001326:	2c37      	cmp	r4, #55	; 0x37
 8001328:	d849      	bhi.n	80013be <osThreadNew+0xca>
 800132a:	6854      	ldr	r4, [r2, #4]
 800132c:	f014 0f01 	tst.w	r4, #1
 8001330:	d147      	bne.n	80013c2 <osThreadNew+0xce>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8001332:	6956      	ldr	r6, [r2, #20]
 8001334:	b16e      	cbz	r6, 8001352 <osThreadNew+0x5e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001336:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800133a:	6894      	ldr	r4, [r2, #8]
 800133c:	b12c      	cbz	r4, 800134a <osThreadNew+0x56>
 800133e:	68d7      	ldr	r7, [r2, #12]
 8001340:	2f5b      	cmp	r7, #91	; 0x5b
 8001342:	d902      	bls.n	800134a <osThreadNew+0x56>
 8001344:	6917      	ldr	r7, [r2, #16]
 8001346:	b107      	cbz	r7, 800134a <osThreadNew+0x56>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001348:	b9c6      	cbnz	r6, 800137c <osThreadNew+0x88>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800134a:	b12c      	cbz	r4, 8001358 <osThreadNew+0x64>
    mem  = -1;
 800134c:	f04f 34ff 	mov.w	r4, #4294967295
 8001350:	e00e      	b.n	8001370 <osThreadNew+0x7c>
    stack = configMINIMAL_STACK_SIZE;
 8001352:	f04f 0c80 	mov.w	ip, #128	; 0x80
 8001356:	e7f0      	b.n	800133a <osThreadNew+0x46>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001358:	68d4      	ldr	r4, [r2, #12]
 800135a:	b98c      	cbnz	r4, 8001380 <osThreadNew+0x8c>
 800135c:	6914      	ldr	r4, [r2, #16]
 800135e:	b194      	cbz	r4, 8001386 <osThreadNew+0x92>
    mem  = -1;
 8001360:	f04f 34ff 	mov.w	r4, #4294967295
 8001364:	e004      	b.n	8001370 <osThreadNew+0x7c>
    name = NULL;
 8001366:	4615      	mov	r5, r2
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 8001368:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 800136a:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 800136c:	f04f 0c80 	mov.w	ip, #128	; 0x80
    }

    if (mem == 1) {
 8001370:	2c01      	cmp	r4, #1
 8001372:	d00a      	beq.n	800138a <osThreadNew+0x96>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                    (StaticTask_t *)attr->cb_mem);
    }
    else {
      if (mem == 0) {
 8001374:	b1ac      	cbz	r4, 80013a2 <osThreadNew+0xae>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001376:	9805      	ldr	r0, [sp, #20]
}
 8001378:	b007      	add	sp, #28
 800137a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 800137c:	2401      	movs	r4, #1
 800137e:	e7f7      	b.n	8001370 <osThreadNew+0x7c>
    mem  = -1;
 8001380:	f04f 34ff 	mov.w	r4, #4294967295
 8001384:	e7f4      	b.n	8001370 <osThreadNew+0x7c>
          mem = 0;
 8001386:	2400      	movs	r4, #0
 8001388:	e7f2      	b.n	8001370 <osThreadNew+0x7c>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800138a:	6914      	ldr	r4, [r2, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800138c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800138e:	9202      	str	r2, [sp, #8]
 8001390:	9401      	str	r4, [sp, #4]
 8001392:	9300      	str	r3, [sp, #0]
 8001394:	460b      	mov	r3, r1
 8001396:	4662      	mov	r2, ip
 8001398:	4629      	mov	r1, r5
 800139a:	f000 fe11 	bl	8001fc0 <xTaskCreateStatic>
 800139e:	9005      	str	r0, [sp, #20]
 80013a0:	e7e9      	b.n	8001376 <osThreadNew+0x82>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80013a2:	aa05      	add	r2, sp, #20
 80013a4:	9201      	str	r2, [sp, #4]
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	460b      	mov	r3, r1
 80013aa:	fa1f f28c 	uxth.w	r2, ip
 80013ae:	4629      	mov	r1, r5
 80013b0:	f000 fe47 	bl	8002042 <xTaskCreate>
 80013b4:	2801      	cmp	r0, #1
 80013b6:	d0de      	beq.n	8001376 <osThreadNew+0x82>
          hTask = NULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	9305      	str	r3, [sp, #20]
 80013bc:	e7db      	b.n	8001376 <osThreadNew+0x82>
        return (NULL);
 80013be:	2000      	movs	r0, #0
 80013c0:	e7da      	b.n	8001378 <osThreadNew+0x84>
 80013c2:	2000      	movs	r0, #0
 80013c4:	e7d8      	b.n	8001378 <osThreadNew+0x84>
 80013c6:	bf00      	nop
 80013c8:	20000480 	.word	0x20000480

080013cc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80013cc:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80013ce:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80013d2:	b983      	cbnz	r3, 80013f6 <osDelay+0x2a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013d4:	f3ef 8310 	mrs	r3, PRIMASK
 80013d8:	b913      	cbnz	r3, 80013e0 <osDelay+0x14>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80013da:	f3ef 8311 	mrs	r3, BASEPRI
 80013de:	b11b      	cbz	r3, 80013e8 <osDelay+0x1c>
 80013e0:	4b08      	ldr	r3, [pc, #32]	; (8001404 <osDelay+0x38>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d009      	beq.n	80013fc <osDelay+0x30>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 80013e8:	b908      	cbnz	r0, 80013ee <osDelay+0x22>
    stat = osOK;
 80013ea:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 80013ec:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 80013ee:	f000 ffc1 	bl	8002374 <vTaskDelay>
    stat = osOK;
 80013f2:	2000      	movs	r0, #0
 80013f4:	e7fa      	b.n	80013ec <osDelay+0x20>
    stat = osErrorISR;
 80013f6:	f06f 0005 	mvn.w	r0, #5
 80013fa:	e7f7      	b.n	80013ec <osDelay+0x20>
 80013fc:	f06f 0005 	mvn.w	r0, #5
 8001400:	e7f4      	b.n	80013ec <osDelay+0x20>
 8001402:	bf00      	nop
 8001404:	20000480 	.word	0x20000480

08001408 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8001408:	b570      	push	{r4, r5, r6, lr}
 800140a:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800140c:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8001410:	2b00      	cmp	r3, #0
 8001412:	d147      	bne.n	80014a4 <osMessageQueueNew+0x9c>
 8001414:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001416:	f3ef 8310 	mrs	r3, PRIMASK
 800141a:	b913      	cbnz	r3, 8001422 <osMessageQueueNew+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800141c:	f3ef 8311 	mrs	r3, BASEPRI
 8001420:	b11b      	cbz	r3, 800142a <osMessageQueueNew+0x22>
 8001422:	4b25      	ldr	r3, [pc, #148]	; (80014b8 <osMessageQueueNew+0xb0>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2b02      	cmp	r3, #2
 8001428:	d040      	beq.n	80014ac <osMessageQueueNew+0xa4>
 800142a:	1e0b      	subs	r3, r1, #0
 800142c:	bf18      	it	ne
 800142e:	2301      	movne	r3, #1
 8001430:	2800      	cmp	r0, #0
 8001432:	d03d      	beq.n	80014b0 <osMessageQueueNew+0xa8>
 8001434:	2b00      	cmp	r3, #0
 8001436:	d03b      	beq.n	80014b0 <osMessageQueueNew+0xa8>
    mem = -1;

    if (attr != NULL) {
 8001438:	b36c      	cbz	r4, 8001496 <osMessageQueueNew+0x8e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800143a:	68a3      	ldr	r3, [r4, #8]
 800143c:	b14b      	cbz	r3, 8001452 <osMessageQueueNew+0x4a>
 800143e:	68e2      	ldr	r2, [r4, #12]
 8001440:	2a4f      	cmp	r2, #79	; 0x4f
 8001442:	d906      	bls.n	8001452 <osMessageQueueNew+0x4a>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8001444:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8001446:	b122      	cbz	r2, 8001452 <osMessageQueueNew+0x4a>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8001448:	fb01 f500 	mul.w	r5, r1, r0
 800144c:	6966      	ldr	r6, [r4, #20]
 800144e:	42ae      	cmp	r6, r5
 8001450:	d21b      	bcs.n	800148a <osMessageQueueNew+0x82>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8001452:	b173      	cbz	r3, 8001472 <osMessageQueueNew+0x6a>
    mem = -1;
 8001454:	f04f 33ff 	mov.w	r3, #4294967295

    if (mem == 1) {
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
    }
    else {
      if (mem == 0) {
 8001458:	bb63      	cbnz	r3, 80014b4 <osMessageQueueNew+0xac>
        hQueue = xQueueCreate (msg_count, msg_size);
 800145a:	2200      	movs	r2, #0
 800145c:	f000 f9e3 	bl	8001826 <xQueueGenericCreate>
 8001460:	4605      	mov	r5, r0
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8001462:	b305      	cbz	r5, 80014a6 <osMessageQueueNew+0x9e>
      if (attr != NULL) {
 8001464:	b104      	cbz	r4, 8001468 <osMessageQueueNew+0x60>
        name = attr->name;
 8001466:	6824      	ldr	r4, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 8001468:	4621      	mov	r1, r4
 800146a:	4628      	mov	r0, r5
 800146c:	f000 fbf4 	bl	8001c58 <vQueueAddToRegistry>
 8001470:	e019      	b.n	80014a6 <osMessageQueueNew+0x9e>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8001472:	68e3      	ldr	r3, [r4, #12]
 8001474:	b98b      	cbnz	r3, 800149a <osMessageQueueNew+0x92>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8001476:	6923      	ldr	r3, [r4, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8001478:	b113      	cbz	r3, 8001480 <osMessageQueueNew+0x78>
    mem = -1;
 800147a:	f04f 33ff 	mov.w	r3, #4294967295
 800147e:	e7eb      	b.n	8001458 <osMessageQueueNew+0x50>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8001480:	6963      	ldr	r3, [r4, #20]
 8001482:	b16b      	cbz	r3, 80014a0 <osMessageQueueNew+0x98>
    mem = -1;
 8001484:	f04f 33ff 	mov.w	r3, #4294967295
 8001488:	e7e6      	b.n	8001458 <osMessageQueueNew+0x50>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800148a:	2500      	movs	r5, #0
 800148c:	9500      	str	r5, [sp, #0]
 800148e:	f000 f96d 	bl	800176c <xQueueGenericCreateStatic>
 8001492:	4605      	mov	r5, r0
 8001494:	e7e5      	b.n	8001462 <osMessageQueueNew+0x5a>
      mem = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	e7de      	b.n	8001458 <osMessageQueueNew+0x50>
    mem = -1;
 800149a:	f04f 33ff 	mov.w	r3, #4294967295
 800149e:	e7db      	b.n	8001458 <osMessageQueueNew+0x50>
          mem = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	e7d9      	b.n	8001458 <osMessageQueueNew+0x50>
  hQueue = NULL;
 80014a4:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 80014a6:	4628      	mov	r0, r5
 80014a8:	b002      	add	sp, #8
 80014aa:	bd70      	pop	{r4, r5, r6, pc}
  hQueue = NULL;
 80014ac:	2500      	movs	r5, #0
 80014ae:	e7fa      	b.n	80014a6 <osMessageQueueNew+0x9e>
 80014b0:	2500      	movs	r5, #0
 80014b2:	e7f8      	b.n	80014a6 <osMessageQueueNew+0x9e>
 80014b4:	2500      	movs	r5, #0
  return ((osMessageQueueId_t)hQueue);
 80014b6:	e7f6      	b.n	80014a6 <osMessageQueueNew+0x9e>
 80014b8:	20000480 	.word	0x20000480

080014bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80014bc:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80014be:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <vApplicationGetIdleTaskMemory+0x18>)
 80014c0:	1d1c      	adds	r4, r3, #4
 80014c2:	6004      	str	r4, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80014c4:	3360      	adds	r3, #96	; 0x60
 80014c6:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80014c8:	2380      	movs	r3, #128	; 0x80
 80014ca:	6013      	str	r3, [r2, #0]
}
 80014cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	20000480 	.word	0x20000480

080014d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80014d8:	b410      	push	{r4}
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80014da:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <vApplicationGetTimerTaskMemory+0x1c>)
 80014dc:	f503 7418 	add.w	r4, r3, #608	; 0x260
 80014e0:	6004      	str	r4, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80014e2:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80014e6:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80014e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014ec:	6013      	str	r3, [r2, #0]
}
 80014ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	20000480 	.word	0x20000480

080014f8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80014f8:	f100 0308 	add.w	r3, r0, #8
 80014fc:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80014fe:	f04f 32ff 	mov.w	r2, #4294967295
 8001502:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001504:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001506:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001508:	2300      	movs	r3, #0
 800150a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800150c:	4770      	bx	lr

0800150e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800150e:	2300      	movs	r3, #0
 8001510:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001512:	4770      	bx	lr

08001514 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001514:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001516:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001518:	689a      	ldr	r2, [r3, #8]
 800151a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800151c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800151e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001520:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8001522:	6803      	ldr	r3, [r0, #0]
 8001524:	3301      	adds	r3, #1
 8001526:	6003      	str	r3, [r0, #0]
}
 8001528:	4770      	bx	lr

0800152a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800152a:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800152c:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800152e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001532:	d011      	beq.n	8001558 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001534:	f100 0308 	add.w	r3, r0, #8
 8001538:	461c      	mov	r4, r3
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	42aa      	cmp	r2, r5
 8001540:	d9fa      	bls.n	8001538 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001542:	6863      	ldr	r3, [r4, #4]
 8001544:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001546:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001548:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800154a:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800154c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800154e:	6803      	ldr	r3, [r0, #0]
 8001550:	3301      	adds	r3, #1
 8001552:	6003      	str	r3, [r0, #0]
}
 8001554:	bc30      	pop	{r4, r5}
 8001556:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8001558:	6904      	ldr	r4, [r0, #16]
 800155a:	e7f2      	b.n	8001542 <vListInsert+0x18>

0800155c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800155c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800155e:	6841      	ldr	r1, [r0, #4]
 8001560:	6882      	ldr	r2, [r0, #8]
 8001562:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001564:	6841      	ldr	r1, [r0, #4]
 8001566:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001568:	685a      	ldr	r2, [r3, #4]
 800156a:	4282      	cmp	r2, r0
 800156c:	d006      	beq.n	800157c <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800156e:	2200      	movs	r2, #0
 8001570:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	3a01      	subs	r2, #1
 8001576:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001578:	6818      	ldr	r0, [r3, #0]
}
 800157a:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800157c:	6882      	ldr	r2, [r0, #8]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	e7f5      	b.n	800156e <uxListRemove+0x12>

08001582 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001582:	b510      	push	{r4, lr}
 8001584:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001586:	f001 fb45 	bl	8002c14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800158a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800158c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800158e:	429a      	cmp	r2, r3
 8001590:	d004      	beq.n	800159c <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8001592:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8001594:	f001 fb64 	bl	8002c60 <vPortExitCritical>

	return xReturn;
}
 8001598:	4620      	mov	r0, r4
 800159a:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 800159c:	2401      	movs	r4, #1
 800159e:	e7f9      	b.n	8001594 <prvIsQueueFull+0x12>

080015a0 <prvIsQueueEmpty>:
{
 80015a0:	b510      	push	{r4, lr}
 80015a2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80015a4:	f001 fb36 	bl	8002c14 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80015a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80015aa:	b923      	cbnz	r3, 80015b6 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 80015ac:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 80015ae:	f001 fb57 	bl	8002c60 <vPortExitCritical>
}
 80015b2:	4620      	mov	r0, r4
 80015b4:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 80015b6:	2400      	movs	r4, #0
 80015b8:	e7f9      	b.n	80015ae <prvIsQueueEmpty+0xe>

080015ba <prvCopyDataToQueue>:
{
 80015ba:	b570      	push	{r4, r5, r6, lr}
 80015bc:	4604      	mov	r4, r0
 80015be:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80015c0:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80015c2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80015c4:	b95a      	cbnz	r2, 80015de <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80015c6:	6803      	ldr	r3, [r0, #0]
 80015c8:	b11b      	cbz	r3, 80015d2 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 80015ca:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80015cc:	3601      	adds	r6, #1
 80015ce:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80015d0:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80015d2:	6880      	ldr	r0, [r0, #8]
 80015d4:	f001 f828 	bl	8002628 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	60a3      	str	r3, [r4, #8]
 80015dc:	e7f6      	b.n	80015cc <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 80015de:	b96d      	cbnz	r5, 80015fc <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80015e0:	6840      	ldr	r0, [r0, #4]
 80015e2:	f006 fd3a 	bl	800805a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80015e6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80015e8:	6863      	ldr	r3, [r4, #4]
 80015ea:	4413      	add	r3, r2
 80015ec:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80015ee:	68a2      	ldr	r2, [r4, #8]
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d319      	bcc.n	8001628 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80015f4:	6823      	ldr	r3, [r4, #0]
 80015f6:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 80015f8:	4628      	mov	r0, r5
 80015fa:	e7e7      	b.n	80015cc <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80015fc:	68c0      	ldr	r0, [r0, #12]
 80015fe:	f006 fd2c 	bl	800805a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001602:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001604:	4251      	negs	r1, r2
 8001606:	68e3      	ldr	r3, [r4, #12]
 8001608:	1a9b      	subs	r3, r3, r2
 800160a:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800160c:	6822      	ldr	r2, [r4, #0]
 800160e:	4293      	cmp	r3, r2
 8001610:	d202      	bcs.n	8001618 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001612:	68a3      	ldr	r3, [r4, #8]
 8001614:	440b      	add	r3, r1
 8001616:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8001618:	2d02      	cmp	r5, #2
 800161a:	d001      	beq.n	8001620 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 800161c:	2000      	movs	r0, #0
 800161e:	e7d5      	b.n	80015cc <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001620:	b126      	cbz	r6, 800162c <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8001622:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8001624:	2000      	movs	r0, #0
 8001626:	e7d1      	b.n	80015cc <prvCopyDataToQueue+0x12>
 8001628:	4628      	mov	r0, r5
 800162a:	e7cf      	b.n	80015cc <prvCopyDataToQueue+0x12>
 800162c:	2000      	movs	r0, #0
 800162e:	e7cd      	b.n	80015cc <prvCopyDataToQueue+0x12>

08001630 <prvCopyDataFromQueue>:
{
 8001630:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001632:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001634:	b16a      	cbz	r2, 8001652 <prvCopyDataFromQueue+0x22>
{
 8001636:	b510      	push	{r4, lr}
 8001638:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800163a:	68d9      	ldr	r1, [r3, #12]
 800163c:	4411      	add	r1, r2
 800163e:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001640:	689c      	ldr	r4, [r3, #8]
 8001642:	42a1      	cmp	r1, r4
 8001644:	d301      	bcc.n	800164a <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001646:	6819      	ldr	r1, [r3, #0]
 8001648:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800164a:	68d9      	ldr	r1, [r3, #12]
 800164c:	f006 fd05 	bl	800805a <memcpy>
}
 8001650:	bd10      	pop	{r4, pc}
 8001652:	4770      	bx	lr

08001654 <prvUnlockQueue>:
{
 8001654:	b538      	push	{r3, r4, r5, lr}
 8001656:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8001658:	f001 fadc 	bl	8002c14 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800165c:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8001660:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001662:	e001      	b.n	8001668 <prvUnlockQueue+0x14>
			--cTxLock;
 8001664:	3c01      	subs	r4, #1
 8001666:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001668:	2c00      	cmp	r4, #0
 800166a:	dd0a      	ble.n	8001682 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800166c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800166e:	b143      	cbz	r3, 8001682 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001670:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001674:	f000 ff2a 	bl	80024cc <xTaskRemoveFromEventList>
 8001678:	2800      	cmp	r0, #0
 800167a:	d0f3      	beq.n	8001664 <prvUnlockQueue+0x10>
						vTaskMissedYield();
 800167c:	f000 ffbc 	bl	80025f8 <vTaskMissedYield>
 8001680:	e7f0      	b.n	8001664 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8001682:	23ff      	movs	r3, #255	; 0xff
 8001684:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8001688:	f001 faea 	bl	8002c60 <vPortExitCritical>
	taskENTER_CRITICAL();
 800168c:	f001 fac2 	bl	8002c14 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8001690:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8001694:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001696:	e001      	b.n	800169c <prvUnlockQueue+0x48>
				--cRxLock;
 8001698:	3c01      	subs	r4, #1
 800169a:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800169c:	2c00      	cmp	r4, #0
 800169e:	dd0a      	ble.n	80016b6 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80016a0:	692b      	ldr	r3, [r5, #16]
 80016a2:	b143      	cbz	r3, 80016b6 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80016a4:	f105 0010 	add.w	r0, r5, #16
 80016a8:	f000 ff10 	bl	80024cc <xTaskRemoveFromEventList>
 80016ac:	2800      	cmp	r0, #0
 80016ae:	d0f3      	beq.n	8001698 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 80016b0:	f000 ffa2 	bl	80025f8 <vTaskMissedYield>
 80016b4:	e7f0      	b.n	8001698 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 80016b6:	23ff      	movs	r3, #255	; 0xff
 80016b8:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 80016bc:	f001 fad0 	bl	8002c60 <vPortExitCritical>
}
 80016c0:	bd38      	pop	{r3, r4, r5, pc}

080016c2 <xQueueGenericReset>:
{
 80016c2:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 80016c4:	b1e0      	cbz	r0, 8001700 <xQueueGenericReset+0x3e>
 80016c6:	460d      	mov	r5, r1
 80016c8:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80016ca:	f001 faa3 	bl	8002c14 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80016ce:	6823      	ldr	r3, [r4, #0]
 80016d0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80016d2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80016d4:	fb01 3002 	mla	r0, r1, r2, r3
 80016d8:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80016da:	2000      	movs	r0, #0
 80016dc:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80016de:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80016e0:	3a01      	subs	r2, #1
 80016e2:	fb02 3301 	mla	r3, r2, r1, r3
 80016e6:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80016e8:	23ff      	movs	r3, #255	; 0xff
 80016ea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80016ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80016f2:	bb0d      	cbnz	r5, 8001738 <xQueueGenericReset+0x76>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80016f4:	6923      	ldr	r3, [r4, #16]
 80016f6:	b973      	cbnz	r3, 8001716 <xQueueGenericReset+0x54>
	taskEXIT_CRITICAL();
 80016f8:	f001 fab2 	bl	8002c60 <vPortExitCritical>
}
 80016fc:	2001      	movs	r0, #1
 80016fe:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001704:	b672      	cpsid	i
 8001706:	f383 8811 	msr	BASEPRI, r3
 800170a:	f3bf 8f6f 	isb	sy
 800170e:	f3bf 8f4f 	dsb	sy
 8001712:	b662      	cpsie	i
	configASSERT( pxQueue );
 8001714:	e7fe      	b.n	8001714 <xQueueGenericReset+0x52>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001716:	f104 0010 	add.w	r0, r4, #16
 800171a:	f000 fed7 	bl	80024cc <xTaskRemoveFromEventList>
 800171e:	2800      	cmp	r0, #0
 8001720:	d0ea      	beq.n	80016f8 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8001722:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001726:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800172a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800172e:	f3bf 8f4f 	dsb	sy
 8001732:	f3bf 8f6f 	isb	sy
 8001736:	e7df      	b.n	80016f8 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001738:	f104 0010 	add.w	r0, r4, #16
 800173c:	f7ff fedc 	bl	80014f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001740:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001744:	f7ff fed8 	bl	80014f8 <vListInitialise>
 8001748:	e7d6      	b.n	80016f8 <xQueueGenericReset+0x36>

0800174a <prvInitialiseNewQueue>:
{
 800174a:	b538      	push	{r3, r4, r5, lr}
 800174c:	461d      	mov	r5, r3
 800174e:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8001750:	460b      	mov	r3, r1
 8001752:	b949      	cbnz	r1, 8001768 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001754:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8001756:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001758:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800175a:	2101      	movs	r1, #1
 800175c:	4620      	mov	r0, r4
 800175e:	f7ff ffb0 	bl	80016c2 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8001762:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 8001766:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001768:	6022      	str	r2, [r4, #0]
 800176a:	e7f4      	b.n	8001756 <prvInitialiseNewQueue+0xc>

0800176c <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800176c:	b950      	cbnz	r0, 8001784 <xQueueGenericCreateStatic+0x18>
 800176e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001772:	b672      	cpsid	i
 8001774:	f383 8811 	msr	BASEPRI, r3
 8001778:	f3bf 8f6f 	isb	sy
 800177c:	f3bf 8f4f 	dsb	sy
 8001780:	b662      	cpsie	i
 8001782:	e7fe      	b.n	8001782 <xQueueGenericCreateStatic+0x16>
	{
 8001784:	b510      	push	{r4, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	461c      	mov	r4, r3
		configASSERT( pxStaticQueue != NULL );
 800178a:	b193      	cbz	r3, 80017b2 <xQueueGenericCreateStatic+0x46>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800178c:	1e0b      	subs	r3, r1, #0
 800178e:	bf18      	it	ne
 8001790:	2301      	movne	r3, #1
 8001792:	2a00      	cmp	r2, #0
 8001794:	bf08      	it	eq
 8001796:	f043 0301 	orreq.w	r3, r3, #1
 800179a:	b9ab      	cbnz	r3, 80017c8 <xQueueGenericCreateStatic+0x5c>
 800179c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017a0:	b672      	cpsid	i
 80017a2:	f383 8811 	msr	BASEPRI, r3
 80017a6:	f3bf 8f6f 	isb	sy
 80017aa:	f3bf 8f4f 	dsb	sy
 80017ae:	b662      	cpsie	i
 80017b0:	e7fe      	b.n	80017b0 <xQueueGenericCreateStatic+0x44>
 80017b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017b6:	b672      	cpsid	i
 80017b8:	f383 8811 	msr	BASEPRI, r3
 80017bc:	f3bf 8f6f 	isb	sy
 80017c0:	f3bf 8f4f 	dsb	sy
 80017c4:	b662      	cpsie	i
		configASSERT( pxStaticQueue != NULL );
 80017c6:	e7fe      	b.n	80017c6 <xQueueGenericCreateStatic+0x5a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80017c8:	fab1 f381 	clz	r3, r1
 80017cc:	095b      	lsrs	r3, r3, #5
 80017ce:	2a00      	cmp	r2, #0
 80017d0:	bf18      	it	ne
 80017d2:	f043 0301 	orrne.w	r3, r3, #1
 80017d6:	b953      	cbnz	r3, 80017ee <xQueueGenericCreateStatic+0x82>
 80017d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017dc:	b672      	cpsid	i
 80017de:	f383 8811 	msr	BASEPRI, r3
 80017e2:	f3bf 8f6f 	isb	sy
 80017e6:	f3bf 8f4f 	dsb	sy
 80017ea:	b662      	cpsie	i
 80017ec:	e7fe      	b.n	80017ec <xQueueGenericCreateStatic+0x80>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80017ee:	2350      	movs	r3, #80	; 0x50
 80017f0:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 80017f2:	9b03      	ldr	r3, [sp, #12]
 80017f4:	2b50      	cmp	r3, #80	; 0x50
 80017f6:	d00a      	beq.n	800180e <xQueueGenericCreateStatic+0xa2>
 80017f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017fc:	b672      	cpsid	i
 80017fe:	f383 8811 	msr	BASEPRI, r3
 8001802:	f3bf 8f6f 	isb	sy
 8001806:	f3bf 8f4f 	dsb	sy
 800180a:	b662      	cpsie	i
 800180c:	e7fe      	b.n	800180c <xQueueGenericCreateStatic+0xa0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800180e:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001810:	2301      	movs	r3, #1
 8001812:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001816:	9400      	str	r4, [sp, #0]
 8001818:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800181c:	f7ff ff95 	bl	800174a <prvInitialiseNewQueue>
	}
 8001820:	4620      	mov	r0, r4
 8001822:	b004      	add	sp, #16
 8001824:	bd10      	pop	{r4, pc}

08001826 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001826:	b950      	cbnz	r0, 800183e <xQueueGenericCreate+0x18>
 8001828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800182c:	b672      	cpsid	i
 800182e:	f383 8811 	msr	BASEPRI, r3
 8001832:	f3bf 8f6f 	isb	sy
 8001836:	f3bf 8f4f 	dsb	sy
 800183a:	b662      	cpsie	i
 800183c:	e7fe      	b.n	800183c <xQueueGenericCreate+0x16>
	{
 800183e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001840:	b083      	sub	sp, #12
 8001842:	460c      	mov	r4, r1
 8001844:	4615      	mov	r5, r2
 8001846:	4607      	mov	r7, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 8001848:	b1a1      	cbz	r1, 8001874 <xQueueGenericCreate+0x4e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800184a:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800184e:	3050      	adds	r0, #80	; 0x50
 8001850:	f001 fb6a 	bl	8002f28 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8001854:	4606      	mov	r6, r0
 8001856:	b150      	cbz	r0, 800186e <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001858:	2300      	movs	r3, #0
 800185a:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800185e:	9000      	str	r0, [sp, #0]
 8001860:	462b      	mov	r3, r5
 8001862:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8001866:	4621      	mov	r1, r4
 8001868:	4638      	mov	r0, r7
 800186a:	f7ff ff6e 	bl	800174a <prvInitialiseNewQueue>
	}
 800186e:	4630      	mov	r0, r6
 8001870:	b003      	add	sp, #12
 8001872:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xQueueSizeInBytes = ( size_t ) 0;
 8001874:	4608      	mov	r0, r1
 8001876:	e7ea      	b.n	800184e <xQueueGenericCreate+0x28>

08001878 <xQueueGenericSend>:
{
 8001878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800187a:	b085      	sub	sp, #20
 800187c:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800187e:	b198      	cbz	r0, 80018a8 <xQueueGenericSend+0x30>
 8001880:	460f      	mov	r7, r1
 8001882:	461d      	mov	r5, r3
 8001884:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001886:	b1d1      	cbz	r1, 80018be <xQueueGenericSend+0x46>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001888:	2d02      	cmp	r5, #2
 800188a:	d126      	bne.n	80018da <xQueueGenericSend+0x62>
 800188c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800188e:	2b01      	cmp	r3, #1
 8001890:	d023      	beq.n	80018da <xQueueGenericSend+0x62>
 8001892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001896:	b672      	cpsid	i
 8001898:	f383 8811 	msr	BASEPRI, r3
 800189c:	f3bf 8f6f 	isb	sy
 80018a0:	f3bf 8f4f 	dsb	sy
 80018a4:	b662      	cpsie	i
 80018a6:	e7fe      	b.n	80018a6 <xQueueGenericSend+0x2e>
 80018a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018ac:	b672      	cpsid	i
 80018ae:	f383 8811 	msr	BASEPRI, r3
 80018b2:	f3bf 8f6f 	isb	sy
 80018b6:	f3bf 8f4f 	dsb	sy
 80018ba:	b662      	cpsie	i
	configASSERT( pxQueue );
 80018bc:	e7fe      	b.n	80018bc <xQueueGenericSend+0x44>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80018be:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d0e1      	beq.n	8001888 <xQueueGenericSend+0x10>
 80018c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018c8:	b672      	cpsid	i
 80018ca:	f383 8811 	msr	BASEPRI, r3
 80018ce:	f3bf 8f6f 	isb	sy
 80018d2:	f3bf 8f4f 	dsb	sy
 80018d6:	b662      	cpsie	i
 80018d8:	e7fe      	b.n	80018d8 <xQueueGenericSend+0x60>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80018da:	f000 fe95 	bl	8002608 <xTaskGetSchedulerState>
 80018de:	4606      	mov	r6, r0
 80018e0:	b968      	cbnz	r0, 80018fe <xQueueGenericSend+0x86>
 80018e2:	9b01      	ldr	r3, [sp, #4]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d04a      	beq.n	800197e <xQueueGenericSend+0x106>
 80018e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018ec:	b672      	cpsid	i
 80018ee:	f383 8811 	msr	BASEPRI, r3
 80018f2:	f3bf 8f6f 	isb	sy
 80018f6:	f3bf 8f4f 	dsb	sy
 80018fa:	b662      	cpsie	i
 80018fc:	e7fe      	b.n	80018fc <xQueueGenericSend+0x84>
 80018fe:	2600      	movs	r6, #0
 8001900:	e03d      	b.n	800197e <xQueueGenericSend+0x106>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001902:	462a      	mov	r2, r5
 8001904:	4639      	mov	r1, r7
 8001906:	4620      	mov	r0, r4
 8001908:	f7ff fe57 	bl	80015ba <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800190c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800190e:	b97b      	cbnz	r3, 8001930 <xQueueGenericSend+0xb8>
					else if( xYieldRequired != pdFALSE )
 8001910:	b148      	cbz	r0, 8001926 <xQueueGenericSend+0xae>
						queueYIELD_IF_USING_PREEMPTION();
 8001912:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800191a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800191e:	f3bf 8f4f 	dsb	sy
 8001922:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8001926:	f001 f99b 	bl	8002c60 <vPortExitCritical>
				return pdPASS;
 800192a:	2001      	movs	r0, #1
}
 800192c:	b005      	add	sp, #20
 800192e:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001930:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001934:	f000 fdca 	bl	80024cc <xTaskRemoveFromEventList>
 8001938:	2800      	cmp	r0, #0
 800193a:	d0f4      	beq.n	8001926 <xQueueGenericSend+0xae>
							queueYIELD_IF_USING_PREEMPTION();
 800193c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001940:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001944:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001948:	f3bf 8f4f 	dsb	sy
 800194c:	f3bf 8f6f 	isb	sy
 8001950:	e7e9      	b.n	8001926 <xQueueGenericSend+0xae>
					taskEXIT_CRITICAL();
 8001952:	f001 f985 	bl	8002c60 <vPortExitCritical>
					return errQUEUE_FULL;
 8001956:	2000      	movs	r0, #0
 8001958:	e7e8      	b.n	800192c <xQueueGenericSend+0xb4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800195a:	a802      	add	r0, sp, #8
 800195c:	f000 fdfc 	bl	8002558 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001960:	2601      	movs	r6, #1
 8001962:	e019      	b.n	8001998 <xQueueGenericSend+0x120>
		prvLockQueue( pxQueue );
 8001964:	2300      	movs	r3, #0
 8001966:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800196a:	e021      	b.n	80019b0 <xQueueGenericSend+0x138>
 800196c:	2300      	movs	r3, #0
 800196e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001972:	e023      	b.n	80019bc <xQueueGenericSend+0x144>
				prvUnlockQueue( pxQueue );
 8001974:	4620      	mov	r0, r4
 8001976:	f7ff fe6d 	bl	8001654 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800197a:	f000 fc81 	bl	8002280 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800197e:	f001 f949 	bl	8002c14 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001982:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001984:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001986:	429a      	cmp	r2, r3
 8001988:	d3bb      	bcc.n	8001902 <xQueueGenericSend+0x8a>
 800198a:	2d02      	cmp	r5, #2
 800198c:	d0b9      	beq.n	8001902 <xQueueGenericSend+0x8a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800198e:	9b01      	ldr	r3, [sp, #4]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d0de      	beq.n	8001952 <xQueueGenericSend+0xda>
				else if( xEntryTimeSet == pdFALSE )
 8001994:	2e00      	cmp	r6, #0
 8001996:	d0e0      	beq.n	800195a <xQueueGenericSend+0xe2>
		taskEXIT_CRITICAL();
 8001998:	f001 f962 	bl	8002c60 <vPortExitCritical>
		vTaskSuspendAll();
 800199c:	f000 fbd2 	bl	8002144 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80019a0:	f001 f938 	bl	8002c14 <vPortEnterCritical>
 80019a4:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 80019a8:	b252      	sxtb	r2, r2
 80019aa:	f1b2 3fff 	cmp.w	r2, #4294967295
 80019ae:	d0d9      	beq.n	8001964 <xQueueGenericSend+0xec>
 80019b0:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 80019b4:	b252      	sxtb	r2, r2
 80019b6:	f1b2 3fff 	cmp.w	r2, #4294967295
 80019ba:	d0d7      	beq.n	800196c <xQueueGenericSend+0xf4>
 80019bc:	f001 f950 	bl	8002c60 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80019c0:	a901      	add	r1, sp, #4
 80019c2:	a802      	add	r0, sp, #8
 80019c4:	f000 fdd2 	bl	800256c <xTaskCheckForTimeOut>
 80019c8:	b9d8      	cbnz	r0, 8001a02 <xQueueGenericSend+0x18a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80019ca:	4620      	mov	r0, r4
 80019cc:	f7ff fdd9 	bl	8001582 <prvIsQueueFull>
 80019d0:	2800      	cmp	r0, #0
 80019d2:	d0cf      	beq.n	8001974 <xQueueGenericSend+0xfc>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80019d4:	9901      	ldr	r1, [sp, #4]
 80019d6:	f104 0010 	add.w	r0, r4, #16
 80019da:	f000 fd3b 	bl	8002454 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80019de:	4620      	mov	r0, r4
 80019e0:	f7ff fe38 	bl	8001654 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80019e4:	f000 fc4c 	bl	8002280 <xTaskResumeAll>
 80019e8:	2800      	cmp	r0, #0
 80019ea:	d1c8      	bne.n	800197e <xQueueGenericSend+0x106>
					portYIELD_WITHIN_API();
 80019ec:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80019f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019f4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80019f8:	f3bf 8f4f 	dsb	sy
 80019fc:	f3bf 8f6f 	isb	sy
 8001a00:	e7bd      	b.n	800197e <xQueueGenericSend+0x106>
			prvUnlockQueue( pxQueue );
 8001a02:	4620      	mov	r0, r4
 8001a04:	f7ff fe26 	bl	8001654 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001a08:	f000 fc3a 	bl	8002280 <xTaskResumeAll>
			return errQUEUE_FULL;
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	e78d      	b.n	800192c <xQueueGenericSend+0xb4>

08001a10 <xQueueGenericSendFromISR>:
{
 8001a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8001a14:	b1a0      	cbz	r0, 8001a40 <xQueueGenericSendFromISR+0x30>
 8001a16:	460f      	mov	r7, r1
 8001a18:	4616      	mov	r6, r2
 8001a1a:	461c      	mov	r4, r3
 8001a1c:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001a1e:	b1d1      	cbz	r1, 8001a56 <xQueueGenericSendFromISR+0x46>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001a20:	2c02      	cmp	r4, #2
 8001a22:	d126      	bne.n	8001a72 <xQueueGenericSendFromISR+0x62>
 8001a24:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d023      	beq.n	8001a72 <xQueueGenericSendFromISR+0x62>
 8001a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a2e:	b672      	cpsid	i
 8001a30:	f383 8811 	msr	BASEPRI, r3
 8001a34:	f3bf 8f6f 	isb	sy
 8001a38:	f3bf 8f4f 	dsb	sy
 8001a3c:	b662      	cpsie	i
 8001a3e:	e7fe      	b.n	8001a3e <xQueueGenericSendFromISR+0x2e>
 8001a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a44:	b672      	cpsid	i
 8001a46:	f383 8811 	msr	BASEPRI, r3
 8001a4a:	f3bf 8f6f 	isb	sy
 8001a4e:	f3bf 8f4f 	dsb	sy
 8001a52:	b662      	cpsie	i
	configASSERT( pxQueue );
 8001a54:	e7fe      	b.n	8001a54 <xQueueGenericSendFromISR+0x44>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001a56:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0e1      	beq.n	8001a20 <xQueueGenericSendFromISR+0x10>
 8001a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a60:	b672      	cpsid	i
 8001a62:	f383 8811 	msr	BASEPRI, r3
 8001a66:	f3bf 8f6f 	isb	sy
 8001a6a:	f3bf 8f4f 	dsb	sy
 8001a6e:	b662      	cpsie	i
 8001a70:	e7fe      	b.n	8001a70 <xQueueGenericSendFromISR+0x60>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001a72:	f001 f9d3 	bl	8002e1c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001a76:	f3ef 8811 	mrs	r8, BASEPRI
 8001a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a7e:	b672      	cpsid	i
 8001a80:	f383 8811 	msr	BASEPRI, r3
 8001a84:	f3bf 8f6f 	isb	sy
 8001a88:	f3bf 8f4f 	dsb	sy
 8001a8c:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001a8e:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001a90:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d306      	bcc.n	8001aa4 <xQueueGenericSendFromISR+0x94>
 8001a96:	2c02      	cmp	r4, #2
 8001a98:	d004      	beq.n	8001aa4 <xQueueGenericSendFromISR+0x94>
			xReturn = errQUEUE_FULL;
 8001a9a:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001a9c:	f388 8811 	msr	BASEPRI, r8
}
 8001aa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8001aa4:	f895 9045 	ldrb.w	r9, [r5, #69]	; 0x45
 8001aa8:	fa4f f989 	sxtb.w	r9, r9
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001aac:	4622      	mov	r2, r4
 8001aae:	4639      	mov	r1, r7
 8001ab0:	4628      	mov	r0, r5
 8001ab2:	f7ff fd82 	bl	80015ba <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8001ab6:	f1b9 3fff 	cmp.w	r9, #4294967295
 8001aba:	d006      	beq.n	8001aca <xQueueGenericSendFromISR+0xba>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001abc:	f109 0301 	add.w	r3, r9, #1
 8001ac0:	b25b      	sxtb	r3, r3
 8001ac2:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 8001ac6:	2001      	movs	r0, #1
 8001ac8:	e7e8      	b.n	8001a9c <xQueueGenericSendFromISR+0x8c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001aca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001acc:	b90b      	cbnz	r3, 8001ad2 <xQueueGenericSendFromISR+0xc2>
			xReturn = pdPASS;
 8001ace:	2001      	movs	r0, #1
 8001ad0:	e7e4      	b.n	8001a9c <xQueueGenericSendFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001ad2:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001ad6:	f000 fcf9 	bl	80024cc <xTaskRemoveFromEventList>
 8001ada:	b118      	cbz	r0, 8001ae4 <xQueueGenericSendFromISR+0xd4>
							if( pxHigherPriorityTaskWoken != NULL )
 8001adc:	b126      	cbz	r6, 8001ae8 <xQueueGenericSendFromISR+0xd8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001ade:	2001      	movs	r0, #1
 8001ae0:	6030      	str	r0, [r6, #0]
 8001ae2:	e7db      	b.n	8001a9c <xQueueGenericSendFromISR+0x8c>
			xReturn = pdPASS;
 8001ae4:	2001      	movs	r0, #1
 8001ae6:	e7d9      	b.n	8001a9c <xQueueGenericSendFromISR+0x8c>
 8001ae8:	2001      	movs	r0, #1
 8001aea:	e7d7      	b.n	8001a9c <xQueueGenericSendFromISR+0x8c>

08001aec <xQueueReceive>:
{
 8001aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aee:	b085      	sub	sp, #20
 8001af0:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8001af2:	b1a0      	cbz	r0, 8001b1e <xQueueReceive+0x32>
 8001af4:	460f      	mov	r7, r1
 8001af6:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001af8:	b1e1      	cbz	r1, 8001b34 <xQueueReceive+0x48>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001afa:	f000 fd85 	bl	8002608 <xTaskGetSchedulerState>
 8001afe:	4606      	mov	r6, r0
 8001b00:	bb30      	cbnz	r0, 8001b50 <xQueueReceive+0x64>
 8001b02:	9b01      	ldr	r3, [sp, #4]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d064      	beq.n	8001bd2 <xQueueReceive+0xe6>
	__asm volatile
 8001b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b0c:	b672      	cpsid	i
 8001b0e:	f383 8811 	msr	BASEPRI, r3
 8001b12:	f3bf 8f6f 	isb	sy
 8001b16:	f3bf 8f4f 	dsb	sy
 8001b1a:	b662      	cpsie	i
 8001b1c:	e7fe      	b.n	8001b1c <xQueueReceive+0x30>
 8001b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b22:	b672      	cpsid	i
 8001b24:	f383 8811 	msr	BASEPRI, r3
 8001b28:	f3bf 8f6f 	isb	sy
 8001b2c:	f3bf 8f4f 	dsb	sy
 8001b30:	b662      	cpsie	i
	configASSERT( ( pxQueue ) );
 8001b32:	e7fe      	b.n	8001b32 <xQueueReceive+0x46>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001b34:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0df      	beq.n	8001afa <xQueueReceive+0xe>
 8001b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b3e:	b672      	cpsid	i
 8001b40:	f383 8811 	msr	BASEPRI, r3
 8001b44:	f3bf 8f6f 	isb	sy
 8001b48:	f3bf 8f4f 	dsb	sy
 8001b4c:	b662      	cpsie	i
 8001b4e:	e7fe      	b.n	8001b4e <xQueueReceive+0x62>
 8001b50:	2600      	movs	r6, #0
 8001b52:	e03e      	b.n	8001bd2 <xQueueReceive+0xe6>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001b54:	4639      	mov	r1, r7
 8001b56:	4620      	mov	r0, r4
 8001b58:	f7ff fd6a 	bl	8001630 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001b5c:	3d01      	subs	r5, #1
 8001b5e:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001b60:	6923      	ldr	r3, [r4, #16]
 8001b62:	b923      	cbnz	r3, 8001b6e <xQueueReceive+0x82>
				taskEXIT_CRITICAL();
 8001b64:	f001 f87c 	bl	8002c60 <vPortExitCritical>
				return pdPASS;
 8001b68:	2001      	movs	r0, #1
}
 8001b6a:	b005      	add	sp, #20
 8001b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001b6e:	f104 0010 	add.w	r0, r4, #16
 8001b72:	f000 fcab 	bl	80024cc <xTaskRemoveFromEventList>
 8001b76:	2800      	cmp	r0, #0
 8001b78:	d0f4      	beq.n	8001b64 <xQueueReceive+0x78>
						queueYIELD_IF_USING_PREEMPTION();
 8001b7a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001b7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b82:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001b86:	f3bf 8f4f 	dsb	sy
 8001b8a:	f3bf 8f6f 	isb	sy
 8001b8e:	e7e9      	b.n	8001b64 <xQueueReceive+0x78>
					taskEXIT_CRITICAL();
 8001b90:	f001 f866 	bl	8002c60 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8001b94:	2000      	movs	r0, #0
 8001b96:	e7e8      	b.n	8001b6a <xQueueReceive+0x7e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001b98:	a802      	add	r0, sp, #8
 8001b9a:	f000 fcdd 	bl	8002558 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001b9e:	2601      	movs	r6, #1
 8001ba0:	e021      	b.n	8001be6 <xQueueReceive+0xfa>
		prvLockQueue( pxQueue );
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001ba8:	e029      	b.n	8001bfe <xQueueReceive+0x112>
 8001baa:	2300      	movs	r3, #0
 8001bac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001bb0:	e02b      	b.n	8001c0a <xQueueReceive+0x11e>
				prvUnlockQueue( pxQueue );
 8001bb2:	4620      	mov	r0, r4
 8001bb4:	f7ff fd4e 	bl	8001654 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001bb8:	f000 fb62 	bl	8002280 <xTaskResumeAll>
 8001bbc:	e009      	b.n	8001bd2 <xQueueReceive+0xe6>
			prvUnlockQueue( pxQueue );
 8001bbe:	4620      	mov	r0, r4
 8001bc0:	f7ff fd48 	bl	8001654 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001bc4:	f000 fb5c 	bl	8002280 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001bc8:	4620      	mov	r0, r4
 8001bca:	f7ff fce9 	bl	80015a0 <prvIsQueueEmpty>
 8001bce:	2800      	cmp	r0, #0
 8001bd0:	d13f      	bne.n	8001c52 <xQueueReceive+0x166>
		taskENTER_CRITICAL();
 8001bd2:	f001 f81f 	bl	8002c14 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001bd6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001bd8:	2d00      	cmp	r5, #0
 8001bda:	d1bb      	bne.n	8001b54 <xQueueReceive+0x68>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001bdc:	9b01      	ldr	r3, [sp, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d0d6      	beq.n	8001b90 <xQueueReceive+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 8001be2:	2e00      	cmp	r6, #0
 8001be4:	d0d8      	beq.n	8001b98 <xQueueReceive+0xac>
		taskEXIT_CRITICAL();
 8001be6:	f001 f83b 	bl	8002c60 <vPortExitCritical>
		vTaskSuspendAll();
 8001bea:	f000 faab 	bl	8002144 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001bee:	f001 f811 	bl	8002c14 <vPortEnterCritical>
 8001bf2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001bf6:	b25b      	sxtb	r3, r3
 8001bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bfc:	d0d1      	beq.n	8001ba2 <xQueueReceive+0xb6>
 8001bfe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001c02:	b25b      	sxtb	r3, r3
 8001c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c08:	d0cf      	beq.n	8001baa <xQueueReceive+0xbe>
 8001c0a:	f001 f829 	bl	8002c60 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001c0e:	a901      	add	r1, sp, #4
 8001c10:	a802      	add	r0, sp, #8
 8001c12:	f000 fcab 	bl	800256c <xTaskCheckForTimeOut>
 8001c16:	2800      	cmp	r0, #0
 8001c18:	d1d1      	bne.n	8001bbe <xQueueReceive+0xd2>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001c1a:	4620      	mov	r0, r4
 8001c1c:	f7ff fcc0 	bl	80015a0 <prvIsQueueEmpty>
 8001c20:	2800      	cmp	r0, #0
 8001c22:	d0c6      	beq.n	8001bb2 <xQueueReceive+0xc6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001c24:	9901      	ldr	r1, [sp, #4]
 8001c26:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001c2a:	f000 fc13 	bl	8002454 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001c2e:	4620      	mov	r0, r4
 8001c30:	f7ff fd10 	bl	8001654 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001c34:	f000 fb24 	bl	8002280 <xTaskResumeAll>
 8001c38:	2800      	cmp	r0, #0
 8001c3a:	d1ca      	bne.n	8001bd2 <xQueueReceive+0xe6>
					portYIELD_WITHIN_API();
 8001c3c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001c40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c44:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001c48:	f3bf 8f4f 	dsb	sy
 8001c4c:	f3bf 8f6f 	isb	sy
 8001c50:	e7bf      	b.n	8001bd2 <xQueueReceive+0xe6>
				return errQUEUE_EMPTY;
 8001c52:	2000      	movs	r0, #0
 8001c54:	e789      	b.n	8001b6a <xQueueReceive+0x7e>
	...

08001c58 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001c58:	2300      	movs	r3, #0
 8001c5a:	2b07      	cmp	r3, #7
 8001c5c:	d80c      	bhi.n	8001c78 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001c5e:	4a07      	ldr	r2, [pc, #28]	; (8001c7c <vQueueAddToRegistry+0x24>)
 8001c60:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001c64:	b10a      	cbz	r2, 8001c6a <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001c66:	3301      	adds	r3, #1
 8001c68:	e7f7      	b.n	8001c5a <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001c6a:	4a04      	ldr	r2, [pc, #16]	; (8001c7c <vQueueAddToRegistry+0x24>)
 8001c6c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001c70:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8001c74:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8001c76:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	20000b3c 	.word	0x20000b3c

08001c80 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001c80:	b570      	push	{r4, r5, r6, lr}
 8001c82:	4604      	mov	r4, r0
 8001c84:	460d      	mov	r5, r1
 8001c86:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001c88:	f000 ffc4 	bl	8002c14 <vPortEnterCritical>
 8001c8c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001c90:	b25b      	sxtb	r3, r3
 8001c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c96:	d00d      	beq.n	8001cb4 <vQueueWaitForMessageRestricted+0x34>
 8001c98:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001c9c:	b25b      	sxtb	r3, r3
 8001c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca2:	d00b      	beq.n	8001cbc <vQueueWaitForMessageRestricted+0x3c>
 8001ca4:	f000 ffdc 	bl	8002c60 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001ca8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001caa:	b15b      	cbz	r3, 8001cc4 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8001cac:	4620      	mov	r0, r4
 8001cae:	f7ff fcd1 	bl	8001654 <prvUnlockQueue>
	}
 8001cb2:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001cba:	e7ed      	b.n	8001c98 <vQueueWaitForMessageRestricted+0x18>
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001cc2:	e7ef      	b.n	8001ca4 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001cc4:	4632      	mov	r2, r6
 8001cc6:	4629      	mov	r1, r5
 8001cc8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001ccc:	f000 fbde 	bl	800248c <vTaskPlaceOnEventListRestricted>
 8001cd0:	e7ec      	b.n	8001cac <vQueueWaitForMessageRestricted+0x2c>
	...

08001cd4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001cd4:	4b07      	ldr	r3, [pc, #28]	; (8001cf4 <prvResetNextTaskUnblockTime+0x20>)
 8001cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	b923      	cbnz	r3, 8001ce6 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001cdc:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <prvResetNextTaskUnblockTime+0x20>)
 8001cde:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce2:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ce4:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001ce6:	4b03      	ldr	r3, [pc, #12]	; (8001cf4 <prvResetNextTaskUnblockTime+0x20>)
 8001ce8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cea:	68d2      	ldr	r2, [r2, #12]
 8001cec:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001cee:	6852      	ldr	r2, [r2, #4]
 8001cf0:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 8001cf2:	4770      	bx	lr
 8001cf4:	20000b7c 	.word	0x20000b7c

08001cf8 <prvInitialiseNewTask>:
{
 8001cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001cfc:	4680      	mov	r8, r0
 8001cfe:	460d      	mov	r5, r1
 8001d00:	4617      	mov	r7, r2
 8001d02:	4699      	mov	r9, r3
 8001d04:	9e08      	ldr	r6, [sp, #32]
 8001d06:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8001d0a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001d0c:	0092      	lsls	r2, r2, #2
 8001d0e:	21a5      	movs	r1, #165	; 0xa5
 8001d10:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001d12:	f006 f92c 	bl	8007f6e <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001d16:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001d18:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8001d1c:	443a      	add	r2, r7
 8001d1e:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001d22:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8001d26:	b3a5      	cbz	r5, 8001d92 <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001d28:	f04f 0c00 	mov.w	ip, #0
 8001d2c:	f1bc 0f0f 	cmp.w	ip, #15
 8001d30:	d809      	bhi.n	8001d46 <prvInitialiseNewTask+0x4e>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001d32:	f815 300c 	ldrb.w	r3, [r5, ip]
 8001d36:	eb04 020c 	add.w	r2, r4, ip
 8001d3a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8001d3e:	b113      	cbz	r3, 8001d46 <prvInitialiseNewTask+0x4e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001d40:	f10c 0c01 	add.w	ip, ip, #1
 8001d44:	e7f2      	b.n	8001d2c <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001d46:	2300      	movs	r3, #0
 8001d48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001d4c:	2e37      	cmp	r6, #55	; 0x37
 8001d4e:	d900      	bls.n	8001d52 <prvInitialiseNewTask+0x5a>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001d50:	2637      	movs	r6, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8001d52:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8001d54:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8001d56:	2500      	movs	r5, #0
 8001d58:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001d5a:	1d20      	adds	r0, r4, #4
 8001d5c:	f7ff fbd7 	bl	800150e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001d60:	f104 0018 	add.w	r0, r4, #24
 8001d64:	f7ff fbd3 	bl	800150e <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001d68:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d6a:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
 8001d6e:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001d70:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8001d72:	6565      	str	r5, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001d74:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001d78:	464a      	mov	r2, r9
 8001d7a:	4641      	mov	r1, r8
 8001d7c:	4638      	mov	r0, r7
 8001d7e:	f000 ff1b 	bl	8002bb8 <pxPortInitialiseStack>
 8001d82:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8001d84:	f1ba 0f00 	cmp.w	sl, #0
 8001d88:	d001      	beq.n	8001d8e <prvInitialiseNewTask+0x96>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001d8a:	f8ca 4000 	str.w	r4, [sl]
}
 8001d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001d92:	2300      	movs	r3, #0
 8001d94:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8001d98:	e7d8      	b.n	8001d4c <prvInitialiseNewTask+0x54>
	...

08001d9c <prvInitialiseTaskLists>:
{
 8001d9c:	b570      	push	{r4, r5, r6, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001d9e:	2400      	movs	r4, #0
 8001da0:	e007      	b.n	8001db2 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001da2:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8001da6:	0093      	lsls	r3, r2, #2
 8001da8:	4810      	ldr	r0, [pc, #64]	; (8001dec <prvInitialiseTaskLists+0x50>)
 8001daa:	4418      	add	r0, r3
 8001dac:	f7ff fba4 	bl	80014f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001db0:	3401      	adds	r4, #1
 8001db2:	2c37      	cmp	r4, #55	; 0x37
 8001db4:	d9f5      	bls.n	8001da2 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8001db6:	4c0e      	ldr	r4, [pc, #56]	; (8001df0 <prvInitialiseTaskLists+0x54>)
 8001db8:	f504 6692 	add.w	r6, r4, #1168	; 0x490
 8001dbc:	4630      	mov	r0, r6
 8001dbe:	f7ff fb9b 	bl	80014f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001dc2:	f204 45a4 	addw	r5, r4, #1188	; 0x4a4
 8001dc6:	4628      	mov	r0, r5
 8001dc8:	f7ff fb96 	bl	80014f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001dcc:	f104 0014 	add.w	r0, r4, #20
 8001dd0:	f7ff fb92 	bl	80014f8 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8001dd4:	f504 6097 	add.w	r0, r4, #1208	; 0x4b8
 8001dd8:	f7ff fb8e 	bl	80014f8 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8001ddc:	4620      	mov	r0, r4
 8001dde:	f7ff fb8b 	bl	80014f8 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8001de2:	62a6      	str	r6, [r4, #40]	; 0x28
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001de4:	f8c4 54cc 	str.w	r5, [r4, #1228]	; 0x4cc
}
 8001de8:	bd70      	pop	{r4, r5, r6, pc}
 8001dea:	bf00      	nop
 8001dec:	20000bac 	.word	0x20000bac
 8001df0:	20000b7c 	.word	0x20000b7c

08001df4 <prvAddNewTaskToReadyList>:
{
 8001df4:	b538      	push	{r3, r4, r5, lr}
 8001df6:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8001df8:	f000 ff0c 	bl	8002c14 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8001dfc:	4b28      	ldr	r3, [pc, #160]	; (8001ea0 <prvAddNewTaskToReadyList+0xac>)
 8001dfe:	f8d3 24d0 	ldr.w	r2, [r3, #1232]	; 0x4d0
 8001e02:	3201      	adds	r2, #1
 8001e04:	f8c3 24d0 	str.w	r2, [r3, #1232]	; 0x4d0
		if( pxCurrentTCB == NULL )
 8001e08:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8001e0c:	b173      	cbz	r3, 8001e2c <prvAddNewTaskToReadyList+0x38>
			if( xSchedulerRunning == pdFALSE )
 8001e0e:	4b24      	ldr	r3, [pc, #144]	; (8001ea0 <prvAddNewTaskToReadyList+0xac>)
 8001e10:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 8001e14:	b98b      	cbnz	r3, 8001e3a <prvAddNewTaskToReadyList+0x46>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001e16:	4b22      	ldr	r3, [pc, #136]	; (8001ea0 <prvAddNewTaskToReadyList+0xac>)
 8001e18:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8001e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e1e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d80a      	bhi.n	8001e3a <prvAddNewTaskToReadyList+0x46>
					pxCurrentTCB = pxNewTCB;
 8001e24:	4b1e      	ldr	r3, [pc, #120]	; (8001ea0 <prvAddNewTaskToReadyList+0xac>)
 8001e26:	f8c3 44d4 	str.w	r4, [r3, #1236]	; 0x4d4
 8001e2a:	e006      	b.n	8001e3a <prvAddNewTaskToReadyList+0x46>
			pxCurrentTCB = pxNewTCB;
 8001e2c:	4b1c      	ldr	r3, [pc, #112]	; (8001ea0 <prvAddNewTaskToReadyList+0xac>)
 8001e2e:	f8c3 44d4 	str.w	r4, [r3, #1236]	; 0x4d4
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001e32:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d02e      	beq.n	8001e98 <prvAddNewTaskToReadyList+0xa4>
		uxTaskNumber++;
 8001e3a:	4a19      	ldr	r2, [pc, #100]	; (8001ea0 <prvAddNewTaskToReadyList+0xac>)
 8001e3c:	f8d2 34dc 	ldr.w	r3, [r2, #1244]	; 0x4dc
 8001e40:	3301      	adds	r3, #1
 8001e42:	f8c2 34dc 	str.w	r3, [r2, #1244]	; 0x4dc
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001e46:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8001e48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001e4a:	f8d2 24e0 	ldr.w	r2, [r2, #1248]	; 0x4e0
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d902      	bls.n	8001e58 <prvAddNewTaskToReadyList+0x64>
 8001e52:	4a13      	ldr	r2, [pc, #76]	; (8001ea0 <prvAddNewTaskToReadyList+0xac>)
 8001e54:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
 8001e58:	4d11      	ldr	r5, [pc, #68]	; (8001ea0 <prvAddNewTaskToReadyList+0xac>)
 8001e5a:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8001e5e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001e62:	1d21      	adds	r1, r4, #4
 8001e64:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001e68:	f7ff fb54 	bl	8001514 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8001e6c:	f000 fef8 	bl	8002c60 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8001e70:	f8d5 34d8 	ldr.w	r3, [r5, #1240]	; 0x4d8
 8001e74:	b17b      	cbz	r3, 8001e96 <prvAddNewTaskToReadyList+0xa2>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001e76:	f8d5 34d4 	ldr.w	r3, [r5, #1236]	; 0x4d4
 8001e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e7c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d209      	bcs.n	8001e96 <prvAddNewTaskToReadyList+0xa2>
			taskYIELD_IF_USING_PREEMPTION();
 8001e82:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001e86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e8a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001e8e:	f3bf 8f4f 	dsb	sy
 8001e92:	f3bf 8f6f 	isb	sy
}
 8001e96:	bd38      	pop	{r3, r4, r5, pc}
				prvInitialiseTaskLists();
 8001e98:	f7ff ff80 	bl	8001d9c <prvInitialiseTaskLists>
 8001e9c:	e7cd      	b.n	8001e3a <prvAddNewTaskToReadyList+0x46>
 8001e9e:	bf00      	nop
 8001ea0:	20000b7c 	.word	0x20000b7c

08001ea4 <prvDeleteTCB>:
	{
 8001ea4:	b510      	push	{r4, lr}
 8001ea6:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8001ea8:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
 8001eac:	b173      	cbz	r3, 8001ecc <prvDeleteTCB+0x28>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d013      	beq.n	8001eda <prvDeleteTCB+0x36>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d010      	beq.n	8001ed8 <prvDeleteTCB+0x34>
 8001eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eba:	b672      	cpsid	i
 8001ebc:	f383 8811 	msr	BASEPRI, r3
 8001ec0:	f3bf 8f6f 	isb	sy
 8001ec4:	f3bf 8f4f 	dsb	sy
 8001ec8:	b662      	cpsie	i
 8001eca:	e7fe      	b.n	8001eca <prvDeleteTCB+0x26>
				vPortFree( pxTCB->pxStack );
 8001ecc:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8001ece:	f001 f89d 	bl	800300c <vPortFree>
				vPortFree( pxTCB );
 8001ed2:	4620      	mov	r0, r4
 8001ed4:	f001 f89a 	bl	800300c <vPortFree>
	}
 8001ed8:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8001eda:	f001 f897 	bl	800300c <vPortFree>
 8001ede:	e7fb      	b.n	8001ed8 <prvDeleteTCB+0x34>

08001ee0 <prvCheckTasksWaitingTermination>:
{
 8001ee0:	b538      	push	{r3, r4, r5, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001ee2:	e017      	b.n	8001f14 <prvCheckTasksWaitingTermination+0x34>
			taskENTER_CRITICAL();
 8001ee4:	f000 fe96 	bl	8002c14 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001ee8:	4c0d      	ldr	r4, [pc, #52]	; (8001f20 <prvCheckTasksWaitingTermination+0x40>)
 8001eea:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
 8001eee:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001ef0:	1d28      	adds	r0, r5, #4
 8001ef2:	f7ff fb33 	bl	800155c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001ef6:	f8d4 34d0 	ldr.w	r3, [r4, #1232]	; 0x4d0
 8001efa:	3b01      	subs	r3, #1
 8001efc:	f8c4 34d0 	str.w	r3, [r4, #1232]	; 0x4d0
				--uxDeletedTasksWaitingCleanUp;
 8001f00:	f8d4 34e4 	ldr.w	r3, [r4, #1252]	; 0x4e4
 8001f04:	3b01      	subs	r3, #1
 8001f06:	f8c4 34e4 	str.w	r3, [r4, #1252]	; 0x4e4
			taskEXIT_CRITICAL();
 8001f0a:	f000 fea9 	bl	8002c60 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8001f0e:	4628      	mov	r0, r5
 8001f10:	f7ff ffc8 	bl	8001ea4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001f14:	4b02      	ldr	r3, [pc, #8]	; (8001f20 <prvCheckTasksWaitingTermination+0x40>)
 8001f16:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1e2      	bne.n	8001ee4 <prvCheckTasksWaitingTermination+0x4>
}
 8001f1e:	bd38      	pop	{r3, r4, r5, pc}
 8001f20:	20000b7c 	.word	0x20000b7c

08001f24 <prvIdleTask>:
{
 8001f24:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8001f26:	f7ff ffdb 	bl	8001ee0 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001f2a:	4b07      	ldr	r3, [pc, #28]	; (8001f48 <prvIdleTask+0x24>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d9f9      	bls.n	8001f26 <prvIdleTask+0x2>
				taskYIELD();
 8001f32:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001f36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f3a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001f3e:	f3bf 8f4f 	dsb	sy
 8001f42:	f3bf 8f6f 	isb	sy
 8001f46:	e7ee      	b.n	8001f26 <prvIdleTask+0x2>
 8001f48:	20000b7c 	.word	0x20000b7c

08001f4c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001f4c:	b570      	push	{r4, r5, r6, lr}
 8001f4e:	4604      	mov	r4, r0
 8001f50:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001f52:	4b1a      	ldr	r3, [pc, #104]	; (8001fbc <prvAddCurrentTaskToDelayedList+0x70>)
 8001f54:	f8d3 64e8 	ldr.w	r6, [r3, #1256]	; 0x4e8
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001f58:	f8d3 04d4 	ldr.w	r0, [r3, #1236]	; 0x4d4
 8001f5c:	3004      	adds	r0, #4
 8001f5e:	f7ff fafd 	bl	800155c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001f62:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001f66:	bf14      	ite	ne
 8001f68:	2300      	movne	r3, #0
 8001f6a:	2301      	moveq	r3, #1
 8001f6c:	2d00      	cmp	r5, #0
 8001f6e:	bf08      	it	eq
 8001f70:	2300      	moveq	r3, #0
 8001f72:	b97b      	cbnz	r3, 8001f94 <prvAddCurrentTaskToDelayedList+0x48>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001f74:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001f76:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <prvAddCurrentTaskToDelayedList+0x70>)
 8001f78:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8001f7c:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8001f7e:	42a6      	cmp	r6, r4
 8001f80:	d90f      	bls.n	8001fa2 <prvAddCurrentTaskToDelayedList+0x56>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f82:	4b0e      	ldr	r3, [pc, #56]	; (8001fbc <prvAddCurrentTaskToDelayedList+0x70>)
 8001f84:	f8d3 04cc 	ldr.w	r0, [r3, #1228]	; 0x4cc
 8001f88:	f8d3 14d4 	ldr.w	r1, [r3, #1236]	; 0x4d4
 8001f8c:	3104      	adds	r1, #4
 8001f8e:	f7ff facc 	bl	800152a <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001f92:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f94:	4809      	ldr	r0, [pc, #36]	; (8001fbc <prvAddCurrentTaskToDelayedList+0x70>)
 8001f96:	f8d0 14d4 	ldr.w	r1, [r0, #1236]	; 0x4d4
 8001f9a:	3104      	adds	r1, #4
 8001f9c:	f7ff faba 	bl	8001514 <vListInsertEnd>
 8001fa0:	e7f7      	b.n	8001f92 <prvAddCurrentTaskToDelayedList+0x46>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001fa2:	4d06      	ldr	r5, [pc, #24]	; (8001fbc <prvAddCurrentTaskToDelayedList+0x70>)
 8001fa4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8001fa6:	f8d5 14d4 	ldr.w	r1, [r5, #1236]	; 0x4d4
 8001faa:	3104      	adds	r1, #4
 8001fac:	f7ff fabd 	bl	800152a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001fb0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001fb2:	42a3      	cmp	r3, r4
 8001fb4:	d9ed      	bls.n	8001f92 <prvAddCurrentTaskToDelayedList+0x46>
					xNextTaskUnblockTime = xTimeToWake;
 8001fb6:	62ec      	str	r4, [r5, #44]	; 0x2c
}
 8001fb8:	e7eb      	b.n	8001f92 <prvAddCurrentTaskToDelayedList+0x46>
 8001fba:	bf00      	nop
 8001fbc:	20000b7c 	.word	0x20000b7c

08001fc0 <xTaskCreateStatic>:
	{
 8001fc0:	b530      	push	{r4, r5, lr}
 8001fc2:	b087      	sub	sp, #28
 8001fc4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8001fc6:	b18c      	cbz	r4, 8001fec <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8001fc8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001fca:	b1d5      	cbz	r5, 8002002 <xTaskCreateStatic+0x42>
			volatile size_t xSize = sizeof( StaticTask_t );
 8001fcc:	255c      	movs	r5, #92	; 0x5c
 8001fce:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001fd0:	9d04      	ldr	r5, [sp, #16]
 8001fd2:	2d5c      	cmp	r5, #92	; 0x5c
 8001fd4:	d020      	beq.n	8002018 <xTaskCreateStatic+0x58>
 8001fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fda:	b672      	cpsid	i
 8001fdc:	f383 8811 	msr	BASEPRI, r3
 8001fe0:	f3bf 8f6f 	isb	sy
 8001fe4:	f3bf 8f4f 	dsb	sy
 8001fe8:	b662      	cpsie	i
 8001fea:	e7fe      	b.n	8001fea <xTaskCreateStatic+0x2a>
 8001fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ff0:	b672      	cpsid	i
 8001ff2:	f383 8811 	msr	BASEPRI, r3
 8001ff6:	f3bf 8f6f 	isb	sy
 8001ffa:	f3bf 8f4f 	dsb	sy
 8001ffe:	b662      	cpsie	i
		configASSERT( puxStackBuffer != NULL );
 8002000:	e7fe      	b.n	8002000 <xTaskCreateStatic+0x40>
 8002002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002006:	b672      	cpsid	i
 8002008:	f383 8811 	msr	BASEPRI, r3
 800200c:	f3bf 8f6f 	isb	sy
 8002010:	f3bf 8f4f 	dsb	sy
 8002014:	b662      	cpsie	i
		configASSERT( pxTaskBuffer != NULL );
 8002016:	e7fe      	b.n	8002016 <xTaskCreateStatic+0x56>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002018:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800201a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800201c:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800201e:	2402      	movs	r4, #2
 8002020:	f885 4059 	strb.w	r4, [r5, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002024:	2400      	movs	r4, #0
 8002026:	9403      	str	r4, [sp, #12]
 8002028:	9502      	str	r5, [sp, #8]
 800202a:	ac05      	add	r4, sp, #20
 800202c:	9401      	str	r4, [sp, #4]
 800202e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002030:	9400      	str	r4, [sp, #0]
 8002032:	f7ff fe61 	bl	8001cf8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002036:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002038:	f7ff fedc 	bl	8001df4 <prvAddNewTaskToReadyList>
	}
 800203c:	9805      	ldr	r0, [sp, #20]
 800203e:	b007      	add	sp, #28
 8002040:	bd30      	pop	{r4, r5, pc}

08002042 <xTaskCreate>:
	{
 8002042:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002046:	b085      	sub	sp, #20
 8002048:	4607      	mov	r7, r0
 800204a:	4688      	mov	r8, r1
 800204c:	4614      	mov	r4, r2
 800204e:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002050:	0090      	lsls	r0, r2, #2
 8002052:	f000 ff69 	bl	8002f28 <pvPortMalloc>
			if( pxStack != NULL )
 8002056:	b300      	cbz	r0, 800209a <xTaskCreate+0x58>
 8002058:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800205a:	205c      	movs	r0, #92	; 0x5c
 800205c:	f000 ff64 	bl	8002f28 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8002060:	4605      	mov	r5, r0
 8002062:	b1b0      	cbz	r0, 8002092 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 8002064:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8002068:	b1e5      	cbz	r5, 80020a4 <xTaskCreate+0x62>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800206a:	2300      	movs	r3, #0
 800206c:	f885 3059 	strb.w	r3, [r5, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002070:	9303      	str	r3, [sp, #12]
 8002072:	9502      	str	r5, [sp, #8]
 8002074:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002076:	9301      	str	r3, [sp, #4]
 8002078:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800207a:	9300      	str	r3, [sp, #0]
 800207c:	4633      	mov	r3, r6
 800207e:	4622      	mov	r2, r4
 8002080:	4641      	mov	r1, r8
 8002082:	4638      	mov	r0, r7
 8002084:	f7ff fe38 	bl	8001cf8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002088:	4628      	mov	r0, r5
 800208a:	f7ff feb3 	bl	8001df4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800208e:	2001      	movs	r0, #1
 8002090:	e005      	b.n	800209e <xTaskCreate+0x5c>
					vPortFree( pxStack );
 8002092:	4648      	mov	r0, r9
 8002094:	f000 ffba 	bl	800300c <vPortFree>
 8002098:	e7e6      	b.n	8002068 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800209a:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800209e:	b005      	add	sp, #20
 80020a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80020a4:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 80020a8:	e7f9      	b.n	800209e <xTaskCreate+0x5c>
	...

080020ac <vTaskStartScheduler>:
{
 80020ac:	b510      	push	{r4, lr}
 80020ae:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80020b0:	2400      	movs	r4, #0
 80020b2:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80020b4:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80020b6:	aa07      	add	r2, sp, #28
 80020b8:	a906      	add	r1, sp, #24
 80020ba:	a805      	add	r0, sp, #20
 80020bc:	f7ff f9fe 	bl	80014bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80020c0:	9b05      	ldr	r3, [sp, #20]
 80020c2:	9302      	str	r3, [sp, #8]
 80020c4:	9b06      	ldr	r3, [sp, #24]
 80020c6:	9301      	str	r3, [sp, #4]
 80020c8:	9400      	str	r4, [sp, #0]
 80020ca:	4623      	mov	r3, r4
 80020cc:	9a07      	ldr	r2, [sp, #28]
 80020ce:	491a      	ldr	r1, [pc, #104]	; (8002138 <vTaskStartScheduler+0x8c>)
 80020d0:	481a      	ldr	r0, [pc, #104]	; (800213c <vTaskStartScheduler+0x90>)
 80020d2:	f7ff ff75 	bl	8001fc0 <xTaskCreateStatic>
 80020d6:	4b1a      	ldr	r3, [pc, #104]	; (8002140 <vTaskStartScheduler+0x94>)
 80020d8:	f8c3 04f0 	str.w	r0, [r3, #1264]	; 0x4f0
		if( xIdleTaskHandle != NULL )
 80020dc:	b140      	cbz	r0, 80020f0 <vTaskStartScheduler+0x44>
			xReturn = xTimerCreateTimerTask();
 80020de:	f000 fb55 	bl	800278c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80020e2:	2801      	cmp	r0, #1
 80020e4:	d006      	beq.n	80020f4 <vTaskStartScheduler+0x48>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80020e6:	f1b0 3fff 	cmp.w	r0, #4294967295
 80020ea:	d01a      	beq.n	8002122 <vTaskStartScheduler+0x76>
}
 80020ec:	b008      	add	sp, #32
 80020ee:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 80020f0:	2000      	movs	r0, #0
 80020f2:	e7f6      	b.n	80020e2 <vTaskStartScheduler+0x36>
 80020f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020f8:	b672      	cpsid	i
 80020fa:	f383 8811 	msr	BASEPRI, r3
 80020fe:	f3bf 8f6f 	isb	sy
 8002102:	f3bf 8f4f 	dsb	sy
 8002106:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8002108:	4b0d      	ldr	r3, [pc, #52]	; (8002140 <vTaskStartScheduler+0x94>)
 800210a:	f04f 32ff 	mov.w	r2, #4294967295
 800210e:	62da      	str	r2, [r3, #44]	; 0x2c
		xSchedulerRunning = pdTRUE;
 8002110:	2201      	movs	r2, #1
 8002112:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002116:	2200      	movs	r2, #0
 8002118:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
		if( xPortStartScheduler() != pdFALSE )
 800211c:	f000 fe16 	bl	8002d4c <xPortStartScheduler>
 8002120:	e7e4      	b.n	80020ec <vTaskStartScheduler+0x40>
 8002122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002126:	b672      	cpsid	i
 8002128:	f383 8811 	msr	BASEPRI, r3
 800212c:	f3bf 8f6f 	isb	sy
 8002130:	f3bf 8f4f 	dsb	sy
 8002134:	b662      	cpsie	i
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002136:	e7fe      	b.n	8002136 <vTaskStartScheduler+0x8a>
 8002138:	0800aba0 	.word	0x0800aba0
 800213c:	08001f25 	.word	0x08001f25
 8002140:	20000b7c 	.word	0x20000b7c

08002144 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8002144:	4a03      	ldr	r2, [pc, #12]	; (8002154 <vTaskSuspendAll+0x10>)
 8002146:	f8d2 34ec 	ldr.w	r3, [r2, #1260]	; 0x4ec
 800214a:	3301      	adds	r3, #1
 800214c:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
}
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	20000b7c 	.word	0x20000b7c

08002158 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8002158:	4b01      	ldr	r3, [pc, #4]	; (8002160 <xTaskGetTickCount+0x8>)
 800215a:	f8d3 04e8 	ldr.w	r0, [r3, #1256]	; 0x4e8
}
 800215e:	4770      	bx	lr
 8002160:	20000b7c 	.word	0x20000b7c

08002164 <xTaskIncrementTick>:
{
 8002164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002168:	4b44      	ldr	r3, [pc, #272]	; (800227c <xTaskIncrementTick+0x118>)
 800216a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800216e:	2b00      	cmp	r3, #0
 8002170:	d172      	bne.n	8002258 <xTaskIncrementTick+0xf4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002172:	4b42      	ldr	r3, [pc, #264]	; (800227c <xTaskIncrementTick+0x118>)
 8002174:	f8d3 54e8 	ldr.w	r5, [r3, #1256]	; 0x4e8
 8002178:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800217a:	f8c3 54e8 	str.w	r5, [r3, #1256]	; 0x4e8
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800217e:	b9dd      	cbnz	r5, 80021b8 <xTaskIncrementTick+0x54>
			taskSWITCH_DELAYED_LISTS();
 8002180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	b153      	cbz	r3, 800219c <xTaskIncrementTick+0x38>
 8002186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800218a:	b672      	cpsid	i
 800218c:	f383 8811 	msr	BASEPRI, r3
 8002190:	f3bf 8f6f 	isb	sy
 8002194:	f3bf 8f4f 	dsb	sy
 8002198:	b662      	cpsie	i
 800219a:	e7fe      	b.n	800219a <xTaskIncrementTick+0x36>
 800219c:	4b37      	ldr	r3, [pc, #220]	; (800227c <xTaskIncrementTick+0x118>)
 800219e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021a0:	f8d3 14cc 	ldr.w	r1, [r3, #1228]	; 0x4cc
 80021a4:	6299      	str	r1, [r3, #40]	; 0x28
 80021a6:	f8c3 24cc 	str.w	r2, [r3, #1228]	; 0x4cc
 80021aa:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	; 0x4f4
 80021ae:	3201      	adds	r2, #1
 80021b0:	f8c3 24f4 	str.w	r2, [r3, #1268]	; 0x4f4
 80021b4:	f7ff fd8e 	bl	8001cd4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80021b8:	4b30      	ldr	r3, [pc, #192]	; (800227c <xTaskIncrementTick+0x118>)
 80021ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021bc:	42ab      	cmp	r3, r5
 80021be:	d940      	bls.n	8002242 <xTaskIncrementTick+0xde>
BaseType_t xSwitchRequired = pdFALSE;
 80021c0:	f04f 0800 	mov.w	r8, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80021c4:	4a2d      	ldr	r2, [pc, #180]	; (800227c <xTaskIncrementTick+0x118>)
 80021c6:	f8d2 34d4 	ldr.w	r3, [r2, #1236]	; 0x4d4
 80021ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021cc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80021d0:	0099      	lsls	r1, r3, #2
 80021d2:	440a      	add	r2, r1
 80021d4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d946      	bls.n	8002268 <xTaskIncrementTick+0x104>
				xSwitchRequired = pdTRUE;
 80021da:	f04f 0801 	mov.w	r8, #1
 80021de:	e043      	b.n	8002268 <xTaskIncrementTick+0x104>
							xSwitchRequired = pdTRUE;
 80021e0:	f04f 0801 	mov.w	r8, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80021e4:	4b25      	ldr	r3, [pc, #148]	; (800227c <xTaskIncrementTick+0x118>)
 80021e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	b36b      	cbz	r3, 8002248 <xTaskIncrementTick+0xe4>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80021ec:	4b23      	ldr	r3, [pc, #140]	; (800227c <xTaskIncrementTick+0x118>)
 80021ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80021f4:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 80021f6:	429d      	cmp	r5, r3
 80021f8:	d32b      	bcc.n	8002252 <xTaskIncrementTick+0xee>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80021fa:	1d27      	adds	r7, r4, #4
 80021fc:	4638      	mov	r0, r7
 80021fe:	f7ff f9ad 	bl	800155c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002202:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002204:	b11b      	cbz	r3, 800220e <xTaskIncrementTick+0xaa>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002206:	f104 0018 	add.w	r0, r4, #24
 800220a:	f7ff f9a7 	bl	800155c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800220e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002210:	4a1a      	ldr	r2, [pc, #104]	; (800227c <xTaskIncrementTick+0x118>)
 8002212:	f8d2 24e0 	ldr.w	r2, [r2, #1248]	; 0x4e0
 8002216:	4293      	cmp	r3, r2
 8002218:	d902      	bls.n	8002220 <xTaskIncrementTick+0xbc>
 800221a:	4a18      	ldr	r2, [pc, #96]	; (800227c <xTaskIncrementTick+0x118>)
 800221c:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
 8002220:	4e16      	ldr	r6, [pc, #88]	; (800227c <xTaskIncrementTick+0x118>)
 8002222:	f106 0030 	add.w	r0, r6, #48	; 0x30
 8002226:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800222a:	009a      	lsls	r2, r3, #2
 800222c:	4639      	mov	r1, r7
 800222e:	4410      	add	r0, r2
 8002230:	f7ff f970 	bl	8001514 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002234:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002236:	f8d6 34d4 	ldr.w	r3, [r6, #1236]	; 0x4d4
 800223a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223c:	429a      	cmp	r2, r3
 800223e:	d2cf      	bcs.n	80021e0 <xTaskIncrementTick+0x7c>
 8002240:	e7d0      	b.n	80021e4 <xTaskIncrementTick+0x80>
BaseType_t xSwitchRequired = pdFALSE;
 8002242:	f04f 0800 	mov.w	r8, #0
 8002246:	e7cd      	b.n	80021e4 <xTaskIncrementTick+0x80>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002248:	4b0c      	ldr	r3, [pc, #48]	; (800227c <xTaskIncrementTick+0x118>)
 800224a:	f04f 32ff 	mov.w	r2, #4294967295
 800224e:	62da      	str	r2, [r3, #44]	; 0x2c
					break;
 8002250:	e7b8      	b.n	80021c4 <xTaskIncrementTick+0x60>
						xNextTaskUnblockTime = xItemValue;
 8002252:	4a0a      	ldr	r2, [pc, #40]	; (800227c <xTaskIncrementTick+0x118>)
 8002254:	62d3      	str	r3, [r2, #44]	; 0x2c
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002256:	e7b5      	b.n	80021c4 <xTaskIncrementTick+0x60>
		++uxPendedTicks;
 8002258:	4a08      	ldr	r2, [pc, #32]	; (800227c <xTaskIncrementTick+0x118>)
 800225a:	f8d2 34f8 	ldr.w	r3, [r2, #1272]	; 0x4f8
 800225e:	3301      	adds	r3, #1
 8002260:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
BaseType_t xSwitchRequired = pdFALSE;
 8002264:	f04f 0800 	mov.w	r8, #0
		if( xYieldPending != pdFALSE )
 8002268:	4b04      	ldr	r3, [pc, #16]	; (800227c <xTaskIncrementTick+0x118>)
 800226a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800226e:	b10b      	cbz	r3, 8002274 <xTaskIncrementTick+0x110>
			xSwitchRequired = pdTRUE;
 8002270:	f04f 0801 	mov.w	r8, #1
}
 8002274:	4640      	mov	r0, r8
 8002276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800227a:	bf00      	nop
 800227c:	20000b7c 	.word	0x20000b7c

08002280 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8002280:	4b3b      	ldr	r3, [pc, #236]	; (8002370 <xTaskResumeAll+0xf0>)
 8002282:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002286:	b953      	cbnz	r3, 800229e <xTaskResumeAll+0x1e>
 8002288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800228c:	b672      	cpsid	i
 800228e:	f383 8811 	msr	BASEPRI, r3
 8002292:	f3bf 8f6f 	isb	sy
 8002296:	f3bf 8f4f 	dsb	sy
 800229a:	b662      	cpsie	i
 800229c:	e7fe      	b.n	800229c <xTaskResumeAll+0x1c>
{
 800229e:	b570      	push	{r4, r5, r6, lr}
	taskENTER_CRITICAL();
 80022a0:	f000 fcb8 	bl	8002c14 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80022a4:	4b32      	ldr	r3, [pc, #200]	; (8002370 <xTaskResumeAll+0xf0>)
 80022a6:	f8d3 24ec 	ldr.w	r2, [r3, #1260]	; 0x4ec
 80022aa:	3a01      	subs	r2, #1
 80022ac:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80022b0:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d156      	bne.n	8002366 <xTaskResumeAll+0xe6>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80022b8:	4b2d      	ldr	r3, [pc, #180]	; (8002370 <xTaskResumeAll+0xf0>)
 80022ba:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
 80022be:	b90b      	cbnz	r3, 80022c4 <xTaskResumeAll+0x44>
BaseType_t xAlreadyYielded = pdFALSE;
 80022c0:	2400      	movs	r4, #0
 80022c2:	e051      	b.n	8002368 <xTaskResumeAll+0xe8>
TCB_t *pxTCB = NULL;
 80022c4:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80022c6:	4b2a      	ldr	r3, [pc, #168]	; (8002370 <xTaskResumeAll+0xf0>)
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	b32b      	cbz	r3, 8002318 <xTaskResumeAll+0x98>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80022cc:	4d28      	ldr	r5, [pc, #160]	; (8002370 <xTaskResumeAll+0xf0>)
 80022ce:	6a2b      	ldr	r3, [r5, #32]
 80022d0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80022d2:	f104 0018 	add.w	r0, r4, #24
 80022d6:	f7ff f941 	bl	800155c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80022da:	1d26      	adds	r6, r4, #4
 80022dc:	4630      	mov	r0, r6
 80022de:	f7ff f93d 	bl	800155c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80022e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80022e4:	f8d5 24e0 	ldr.w	r2, [r5, #1248]	; 0x4e0
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d901      	bls.n	80022f0 <xTaskResumeAll+0x70>
 80022ec:	f8c5 34e0 	str.w	r3, [r5, #1248]	; 0x4e0
 80022f0:	4d1f      	ldr	r5, [pc, #124]	; (8002370 <xTaskResumeAll+0xf0>)
 80022f2:	f105 0030 	add.w	r0, r5, #48	; 0x30
 80022f6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80022fa:	4631      	mov	r1, r6
 80022fc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8002300:	f7ff f908 	bl	8001514 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002304:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002306:	f8d5 34d4 	ldr.w	r3, [r5, #1236]	; 0x4d4
 800230a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230c:	429a      	cmp	r2, r3
 800230e:	d3da      	bcc.n	80022c6 <xTaskResumeAll+0x46>
						xYieldPending = pdTRUE;
 8002310:	2201      	movs	r2, #1
 8002312:	f8c5 24fc 	str.w	r2, [r5, #1276]	; 0x4fc
 8002316:	e7d6      	b.n	80022c6 <xTaskResumeAll+0x46>
				if( pxTCB != NULL )
 8002318:	b10c      	cbz	r4, 800231e <xTaskResumeAll+0x9e>
					prvResetNextTaskUnblockTime();
 800231a:	f7ff fcdb 	bl	8001cd4 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800231e:	4b14      	ldr	r3, [pc, #80]	; (8002370 <xTaskResumeAll+0xf0>)
 8002320:	f8d3 44f8 	ldr.w	r4, [r3, #1272]	; 0x4f8
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002324:	b98c      	cbnz	r4, 800234a <xTaskResumeAll+0xca>
				if( xYieldPending != pdFALSE )
 8002326:	4b12      	ldr	r3, [pc, #72]	; (8002370 <xTaskResumeAll+0xf0>)
 8002328:	f8d3 44fc 	ldr.w	r4, [r3, #1276]	; 0x4fc
 800232c:	b1e4      	cbz	r4, 8002368 <xTaskResumeAll+0xe8>
					taskYIELD_IF_USING_PREEMPTION();
 800232e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002336:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800233a:	f3bf 8f4f 	dsb	sy
 800233e:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8002342:	2401      	movs	r4, #1
 8002344:	e010      	b.n	8002368 <xTaskResumeAll+0xe8>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002346:	3c01      	subs	r4, #1
 8002348:	d008      	beq.n	800235c <xTaskResumeAll+0xdc>
							if( xTaskIncrementTick() != pdFALSE )
 800234a:	f7ff ff0b 	bl	8002164 <xTaskIncrementTick>
 800234e:	2800      	cmp	r0, #0
 8002350:	d0f9      	beq.n	8002346 <xTaskResumeAll+0xc6>
								xYieldPending = pdTRUE;
 8002352:	4b07      	ldr	r3, [pc, #28]	; (8002370 <xTaskResumeAll+0xf0>)
 8002354:	2201      	movs	r2, #1
 8002356:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
 800235a:	e7f4      	b.n	8002346 <xTaskResumeAll+0xc6>
						uxPendedTicks = 0;
 800235c:	4b04      	ldr	r3, [pc, #16]	; (8002370 <xTaskResumeAll+0xf0>)
 800235e:	2200      	movs	r2, #0
 8002360:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
 8002364:	e7df      	b.n	8002326 <xTaskResumeAll+0xa6>
BaseType_t xAlreadyYielded = pdFALSE;
 8002366:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002368:	f000 fc7a 	bl	8002c60 <vPortExitCritical>
}
 800236c:	4620      	mov	r0, r4
 800236e:	bd70      	pop	{r4, r5, r6, pc}
 8002370:	20000b7c 	.word	0x20000b7c

08002374 <vTaskDelay>:
	{
 8002374:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002376:	b1c0      	cbz	r0, 80023aa <vTaskDelay+0x36>
 8002378:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 800237a:	4b11      	ldr	r3, [pc, #68]	; (80023c0 <vTaskDelay+0x4c>)
 800237c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002380:	b153      	cbz	r3, 8002398 <vTaskDelay+0x24>
 8002382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002386:	b672      	cpsid	i
 8002388:	f383 8811 	msr	BASEPRI, r3
 800238c:	f3bf 8f6f 	isb	sy
 8002390:	f3bf 8f4f 	dsb	sy
 8002394:	b662      	cpsie	i
 8002396:	e7fe      	b.n	8002396 <vTaskDelay+0x22>
			vTaskSuspendAll();
 8002398:	f7ff fed4 	bl	8002144 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800239c:	2100      	movs	r1, #0
 800239e:	4620      	mov	r0, r4
 80023a0:	f7ff fdd4 	bl	8001f4c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80023a4:	f7ff ff6c 	bl	8002280 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80023a8:	b948      	cbnz	r0, 80023be <vTaskDelay+0x4a>
			portYIELD_WITHIN_API();
 80023aa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80023ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023b2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80023b6:	f3bf 8f4f 	dsb	sy
 80023ba:	f3bf 8f6f 	isb	sy
	}
 80023be:	bd10      	pop	{r4, pc}
 80023c0:	20000b7c 	.word	0x20000b7c

080023c4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80023c4:	4b22      	ldr	r3, [pc, #136]	; (8002450 <vTaskSwitchContext+0x8c>)
 80023c6:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80023ca:	b123      	cbz	r3, 80023d6 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 80023cc:	4b20      	ldr	r3, [pc, #128]	; (8002450 <vTaskSwitchContext+0x8c>)
 80023ce:	2201      	movs	r2, #1
 80023d0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
 80023d4:	4770      	bx	lr
		xYieldPending = pdFALSE;
 80023d6:	4b1e      	ldr	r3, [pc, #120]	; (8002450 <vTaskSwitchContext+0x8c>)
 80023d8:	2200      	movs	r2, #0
 80023da:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80023de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80023e2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80023e6:	0091      	lsls	r1, r2, #2
 80023e8:	4a19      	ldr	r2, [pc, #100]	; (8002450 <vTaskSwitchContext+0x8c>)
 80023ea:	440a      	add	r2, r1
 80023ec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80023ee:	b96a      	cbnz	r2, 800240c <vTaskSwitchContext+0x48>
 80023f0:	b10b      	cbz	r3, 80023f6 <vTaskSwitchContext+0x32>
 80023f2:	3b01      	subs	r3, #1
 80023f4:	e7f5      	b.n	80023e2 <vTaskSwitchContext+0x1e>
 80023f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023fa:	b672      	cpsid	i
 80023fc:	f383 8811 	msr	BASEPRI, r3
 8002400:	f3bf 8f6f 	isb	sy
 8002404:	f3bf 8f4f 	dsb	sy
 8002408:	b662      	cpsie	i
 800240a:	e7fe      	b.n	800240a <vTaskSwitchContext+0x46>
 800240c:	4a10      	ldr	r2, [pc, #64]	; (8002450 <vTaskSwitchContext+0x8c>)
 800240e:	4411      	add	r1, r2
 8002410:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8002412:	6840      	ldr	r0, [r0, #4]
 8002414:	6348      	str	r0, [r1, #52]	; 0x34
 8002416:	3230      	adds	r2, #48	; 0x30
 8002418:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 800241c:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8002420:	3108      	adds	r1, #8
 8002422:	440a      	add	r2, r1
 8002424:	4290      	cmp	r0, r2
 8002426:	d00b      	beq.n	8002440 <vTaskSwitchContext+0x7c>
 8002428:	4909      	ldr	r1, [pc, #36]	; (8002450 <vTaskSwitchContext+0x8c>)
 800242a:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 800242e:	0082      	lsls	r2, r0, #2
 8002430:	440a      	add	r2, r1
 8002432:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002434:	68d2      	ldr	r2, [r2, #12]
 8002436:	f8c1 24d4 	str.w	r2, [r1, #1236]	; 0x4d4
 800243a:	f8c1 34e0 	str.w	r3, [r1, #1248]	; 0x4e0
}
 800243e:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002440:	6840      	ldr	r0, [r0, #4]
 8002442:	4662      	mov	r2, ip
 8002444:	0091      	lsls	r1, r2, #2
 8002446:	4a02      	ldr	r2, [pc, #8]	; (8002450 <vTaskSwitchContext+0x8c>)
 8002448:	440a      	add	r2, r1
 800244a:	6350      	str	r0, [r2, #52]	; 0x34
 800244c:	e7ec      	b.n	8002428 <vTaskSwitchContext+0x64>
 800244e:	bf00      	nop
 8002450:	20000b7c 	.word	0x20000b7c

08002454 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8002454:	b160      	cbz	r0, 8002470 <vTaskPlaceOnEventList+0x1c>
{
 8002456:	b510      	push	{r4, lr}
 8002458:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800245a:	4a0b      	ldr	r2, [pc, #44]	; (8002488 <vTaskPlaceOnEventList+0x34>)
 800245c:	f8d2 14d4 	ldr.w	r1, [r2, #1236]	; 0x4d4
 8002460:	3118      	adds	r1, #24
 8002462:	f7ff f862 	bl	800152a <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002466:	2101      	movs	r1, #1
 8002468:	4620      	mov	r0, r4
 800246a:	f7ff fd6f 	bl	8001f4c <prvAddCurrentTaskToDelayedList>
}
 800246e:	bd10      	pop	{r4, pc}
 8002470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002474:	b672      	cpsid	i
 8002476:	f383 8811 	msr	BASEPRI, r3
 800247a:	f3bf 8f6f 	isb	sy
 800247e:	f3bf 8f4f 	dsb	sy
 8002482:	b662      	cpsie	i
	configASSERT( pxEventList );
 8002484:	e7fe      	b.n	8002484 <vTaskPlaceOnEventList+0x30>
 8002486:	bf00      	nop
 8002488:	20000b7c 	.word	0x20000b7c

0800248c <vTaskPlaceOnEventListRestricted>:
	{
 800248c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 800248e:	b178      	cbz	r0, 80024b0 <vTaskPlaceOnEventListRestricted+0x24>
 8002490:	460d      	mov	r5, r1
 8002492:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002494:	4a0c      	ldr	r2, [pc, #48]	; (80024c8 <vTaskPlaceOnEventListRestricted+0x3c>)
 8002496:	f8d2 14d4 	ldr.w	r1, [r2, #1236]	; 0x4d4
 800249a:	3118      	adds	r1, #24
 800249c:	f7ff f83a 	bl	8001514 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 80024a0:	b10c      	cbz	r4, 80024a6 <vTaskPlaceOnEventListRestricted+0x1a>
			xTicksToWait = portMAX_DELAY;
 80024a2:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80024a6:	4621      	mov	r1, r4
 80024a8:	4628      	mov	r0, r5
 80024aa:	f7ff fd4f 	bl	8001f4c <prvAddCurrentTaskToDelayedList>
	}
 80024ae:	bd38      	pop	{r3, r4, r5, pc}
 80024b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b4:	b672      	cpsid	i
 80024b6:	f383 8811 	msr	BASEPRI, r3
 80024ba:	f3bf 8f6f 	isb	sy
 80024be:	f3bf 8f4f 	dsb	sy
 80024c2:	b662      	cpsie	i
		configASSERT( pxEventList );
 80024c4:	e7fe      	b.n	80024c4 <vTaskPlaceOnEventListRestricted+0x38>
 80024c6:	bf00      	nop
 80024c8:	20000b7c 	.word	0x20000b7c

080024cc <xTaskRemoveFromEventList>:
{
 80024cc:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80024ce:	68c3      	ldr	r3, [r0, #12]
 80024d0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80024d2:	b34c      	cbz	r4, 8002528 <xTaskRemoveFromEventList+0x5c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80024d4:	f104 0518 	add.w	r5, r4, #24
 80024d8:	4628      	mov	r0, r5
 80024da:	f7ff f83f 	bl	800155c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80024de:	4b1b      	ldr	r3, [pc, #108]	; (800254c <xTaskRemoveFromEventList+0x80>)
 80024e0:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80024e4:	bb5b      	cbnz	r3, 800253e <xTaskRemoveFromEventList+0x72>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80024e6:	1d25      	adds	r5, r4, #4
 80024e8:	4628      	mov	r0, r5
 80024ea:	f7ff f837 	bl	800155c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80024ee:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80024f0:	4b16      	ldr	r3, [pc, #88]	; (800254c <xTaskRemoveFromEventList+0x80>)
 80024f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80024f6:	4298      	cmp	r0, r3
 80024f8:	d902      	bls.n	8002500 <xTaskRemoveFromEventList+0x34>
 80024fa:	4b14      	ldr	r3, [pc, #80]	; (800254c <xTaskRemoveFromEventList+0x80>)
 80024fc:	f8c3 04e0 	str.w	r0, [r3, #1248]	; 0x4e0
 8002500:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002504:	4629      	mov	r1, r5
 8002506:	4b12      	ldr	r3, [pc, #72]	; (8002550 <xTaskRemoveFromEventList+0x84>)
 8002508:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800250c:	f7ff f802 	bl	8001514 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002510:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002512:	4b0e      	ldr	r3, [pc, #56]	; (800254c <xTaskRemoveFromEventList+0x80>)
 8002514:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8002518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251a:	429a      	cmp	r2, r3
 800251c:	d914      	bls.n	8002548 <xTaskRemoveFromEventList+0x7c>
		xYieldPending = pdTRUE;
 800251e:	2001      	movs	r0, #1
 8002520:	4b0a      	ldr	r3, [pc, #40]	; (800254c <xTaskRemoveFromEventList+0x80>)
 8002522:	f8c3 04fc 	str.w	r0, [r3, #1276]	; 0x4fc
}
 8002526:	bd38      	pop	{r3, r4, r5, pc}
 8002528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800252c:	b672      	cpsid	i
 800252e:	f383 8811 	msr	BASEPRI, r3
 8002532:	f3bf 8f6f 	isb	sy
 8002536:	f3bf 8f4f 	dsb	sy
 800253a:	b662      	cpsie	i
	configASSERT( pxUnblockedTCB );
 800253c:	e7fe      	b.n	800253c <xTaskRemoveFromEventList+0x70>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800253e:	4629      	mov	r1, r5
 8002540:	4804      	ldr	r0, [pc, #16]	; (8002554 <xTaskRemoveFromEventList+0x88>)
 8002542:	f7fe ffe7 	bl	8001514 <vListInsertEnd>
 8002546:	e7e3      	b.n	8002510 <xTaskRemoveFromEventList+0x44>
		xReturn = pdFALSE;
 8002548:	2000      	movs	r0, #0
	return xReturn;
 800254a:	e7ec      	b.n	8002526 <xTaskRemoveFromEventList+0x5a>
 800254c:	20000b7c 	.word	0x20000b7c
 8002550:	20000bac 	.word	0x20000bac
 8002554:	20000b90 	.word	0x20000b90

08002558 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002558:	4b03      	ldr	r3, [pc, #12]	; (8002568 <vTaskInternalSetTimeOutState+0x10>)
 800255a:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	; 0x4f4
 800255e:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002560:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8002564:	6043      	str	r3, [r0, #4]
}
 8002566:	4770      	bx	lr
 8002568:	20000b7c 	.word	0x20000b7c

0800256c <xTaskCheckForTimeOut>:
{
 800256c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800256e:	b1d8      	cbz	r0, 80025a8 <xTaskCheckForTimeOut+0x3c>
 8002570:	460c      	mov	r4, r1
 8002572:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8002574:	b319      	cbz	r1, 80025be <xTaskCheckForTimeOut+0x52>
	taskENTER_CRITICAL();
 8002576:	f000 fb4d 	bl	8002c14 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800257a:	4b1e      	ldr	r3, [pc, #120]	; (80025f4 <xTaskCheckForTimeOut+0x88>)
 800257c:	f8d3 14e8 	ldr.w	r1, [r3, #1256]	; 0x4e8
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002580:	686b      	ldr	r3, [r5, #4]
 8002582:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 8002584:	6822      	ldr	r2, [r4, #0]
 8002586:	f1b2 3fff 	cmp.w	r2, #4294967295
 800258a:	d02b      	beq.n	80025e4 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800258c:	4e19      	ldr	r6, [pc, #100]	; (80025f4 <xTaskCheckForTimeOut+0x88>)
 800258e:	f8d6 64f4 	ldr.w	r6, [r6, #1268]	; 0x4f4
 8002592:	682f      	ldr	r7, [r5, #0]
 8002594:	42b7      	cmp	r7, r6
 8002596:	d001      	beq.n	800259c <xTaskCheckForTimeOut+0x30>
 8002598:	428b      	cmp	r3, r1
 800259a:	d928      	bls.n	80025ee <xTaskCheckForTimeOut+0x82>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800259c:	4282      	cmp	r2, r0
 800259e:	d819      	bhi.n	80025d4 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait = 0;
 80025a0:	2300      	movs	r3, #0
 80025a2:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80025a4:	2401      	movs	r4, #1
 80025a6:	e01e      	b.n	80025e6 <xTaskCheckForTimeOut+0x7a>
 80025a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ac:	b672      	cpsid	i
 80025ae:	f383 8811 	msr	BASEPRI, r3
 80025b2:	f3bf 8f6f 	isb	sy
 80025b6:	f3bf 8f4f 	dsb	sy
 80025ba:	b662      	cpsie	i
	configASSERT( pxTimeOut );
 80025bc:	e7fe      	b.n	80025bc <xTaskCheckForTimeOut+0x50>
 80025be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c2:	b672      	cpsid	i
 80025c4:	f383 8811 	msr	BASEPRI, r3
 80025c8:	f3bf 8f6f 	isb	sy
 80025cc:	f3bf 8f4f 	dsb	sy
 80025d0:	b662      	cpsie	i
	configASSERT( pxTicksToWait );
 80025d2:	e7fe      	b.n	80025d2 <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait -= xElapsedTime;
 80025d4:	1a5b      	subs	r3, r3, r1
 80025d6:	4413      	add	r3, r2
 80025d8:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80025da:	4628      	mov	r0, r5
 80025dc:	f7ff ffbc 	bl	8002558 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80025e0:	2400      	movs	r4, #0
 80025e2:	e000      	b.n	80025e6 <xTaskCheckForTimeOut+0x7a>
				xReturn = pdFALSE;
 80025e4:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80025e6:	f000 fb3b 	bl	8002c60 <vPortExitCritical>
}
 80025ea:	4620      	mov	r0, r4
 80025ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 80025ee:	2401      	movs	r4, #1
 80025f0:	e7f9      	b.n	80025e6 <xTaskCheckForTimeOut+0x7a>
 80025f2:	bf00      	nop
 80025f4:	20000b7c 	.word	0x20000b7c

080025f8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80025f8:	4b02      	ldr	r3, [pc, #8]	; (8002604 <vTaskMissedYield+0xc>)
 80025fa:	2201      	movs	r2, #1
 80025fc:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
}
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	20000b7c 	.word	0x20000b7c

08002608 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8002608:	4b06      	ldr	r3, [pc, #24]	; (8002624 <xTaskGetSchedulerState+0x1c>)
 800260a:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 800260e:	b13b      	cbz	r3, 8002620 <xTaskGetSchedulerState+0x18>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002610:	4b04      	ldr	r3, [pc, #16]	; (8002624 <xTaskGetSchedulerState+0x1c>)
 8002612:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002616:	b10b      	cbz	r3, 800261c <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_SUSPENDED;
 8002618:	2000      	movs	r0, #0
	}
 800261a:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 800261c:	2002      	movs	r0, #2
 800261e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002620:	2001      	movs	r0, #1
 8002622:	4770      	bx	lr
 8002624:	20000b7c 	.word	0x20000b7c

08002628 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8002628:	2800      	cmp	r0, #0
 800262a:	d042      	beq.n	80026b2 <xTaskPriorityDisinherit+0x8a>
	{
 800262c:	b538      	push	{r3, r4, r5, lr}
 800262e:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8002630:	4b22      	ldr	r3, [pc, #136]	; (80026bc <xTaskPriorityDisinherit+0x94>)
 8002632:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8002636:	4283      	cmp	r3, r0
 8002638:	d00a      	beq.n	8002650 <xTaskPriorityDisinherit+0x28>
 800263a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800263e:	b672      	cpsid	i
 8002640:	f383 8811 	msr	BASEPRI, r3
 8002644:	f3bf 8f6f 	isb	sy
 8002648:	f3bf 8f4f 	dsb	sy
 800264c:	b662      	cpsie	i
 800264e:	e7fe      	b.n	800264e <xTaskPriorityDisinherit+0x26>
			configASSERT( pxTCB->uxMutexesHeld );
 8002650:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002652:	b953      	cbnz	r3, 800266a <xTaskPriorityDisinherit+0x42>
 8002654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002658:	b672      	cpsid	i
 800265a:	f383 8811 	msr	BASEPRI, r3
 800265e:	f3bf 8f6f 	isb	sy
 8002662:	f3bf 8f4f 	dsb	sy
 8002666:	b662      	cpsie	i
 8002668:	e7fe      	b.n	8002668 <xTaskPriorityDisinherit+0x40>
			( pxTCB->uxMutexesHeld )--;
 800266a:	3b01      	subs	r3, #1
 800266c:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800266e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002670:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8002672:	4291      	cmp	r1, r2
 8002674:	d01f      	beq.n	80026b6 <xTaskPriorityDisinherit+0x8e>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002676:	b10b      	cbz	r3, 800267c <xTaskPriorityDisinherit+0x54>
	BaseType_t xReturn = pdFALSE;
 8002678:	2000      	movs	r0, #0
	}
 800267a:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800267c:	1d05      	adds	r5, r0, #4
 800267e:	4628      	mov	r0, r5
 8002680:	f7fe ff6c 	bl	800155c <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002684:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002686:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002688:	f1c0 0338 	rsb	r3, r0, #56	; 0x38
 800268c:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800268e:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <xTaskPriorityDisinherit+0x94>)
 8002690:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002694:	4298      	cmp	r0, r3
 8002696:	d902      	bls.n	800269e <xTaskPriorityDisinherit+0x76>
 8002698:	4b08      	ldr	r3, [pc, #32]	; (80026bc <xTaskPriorityDisinherit+0x94>)
 800269a:	f8c3 04e0 	str.w	r0, [r3, #1248]	; 0x4e0
 800269e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80026a2:	4629      	mov	r1, r5
 80026a4:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <xTaskPriorityDisinherit+0x98>)
 80026a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80026aa:	f7fe ff33 	bl	8001514 <vListInsertEnd>
					xReturn = pdTRUE;
 80026ae:	2001      	movs	r0, #1
 80026b0:	e7e3      	b.n	800267a <xTaskPriorityDisinherit+0x52>
	BaseType_t xReturn = pdFALSE;
 80026b2:	2000      	movs	r0, #0
	}
 80026b4:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 80026b6:	2000      	movs	r0, #0
 80026b8:	e7df      	b.n	800267a <xTaskPriorityDisinherit+0x52>
 80026ba:	bf00      	nop
 80026bc:	20000b7c 	.word	0x20000b7c
 80026c0:	20000bac 	.word	0x20000bac

080026c4 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80026c4:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <prvGetNextExpireTime+0x1c>)
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	6813      	ldr	r3, [r2, #0]
 80026ca:	b92b      	cbnz	r3, 80026d8 <prvGetNextExpireTime+0x14>
 80026cc:	2301      	movs	r3, #1
 80026ce:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 80026d0:	b923      	cbnz	r3, 80026dc <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80026d2:	68d3      	ldr	r3, [r2, #12]
 80026d4:	6818      	ldr	r0, [r3, #0]
 80026d6:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80026d8:	2300      	movs	r3, #0
 80026da:	e7f8      	b.n	80026ce <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80026dc:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 80026de:	4770      	bx	lr
 80026e0:	2000107c 	.word	0x2000107c

080026e4 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80026e4:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80026e6:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80026e8:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 80026ea:	4291      	cmp	r1, r2
 80026ec:	d80c      	bhi.n	8002708 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026ee:	1ad2      	subs	r2, r2, r3
 80026f0:	6983      	ldr	r3, [r0, #24]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d301      	bcc.n	80026fa <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80026f6:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 80026f8:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80026fa:	1d01      	adds	r1, r0, #4
 80026fc:	4b0b      	ldr	r3, [pc, #44]	; (800272c <prvInsertTimerInActiveList+0x48>)
 80026fe:	6858      	ldr	r0, [r3, #4]
 8002700:	f7fe ff13 	bl	800152a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8002704:	2000      	movs	r0, #0
 8002706:	e7f7      	b.n	80026f8 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002708:	429a      	cmp	r2, r3
 800270a:	bf2c      	ite	cs
 800270c:	2200      	movcs	r2, #0
 800270e:	2201      	movcc	r2, #1
 8002710:	4299      	cmp	r1, r3
 8002712:	bf38      	it	cc
 8002714:	2200      	movcc	r2, #0
 8002716:	b10a      	cbz	r2, 800271c <prvInsertTimerInActiveList+0x38>
			xProcessTimerNow = pdTRUE;
 8002718:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800271a:	e7ed      	b.n	80026f8 <prvInsertTimerInActiveList+0x14>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800271c:	1d01      	adds	r1, r0, #4
 800271e:	4b03      	ldr	r3, [pc, #12]	; (800272c <prvInsertTimerInActiveList+0x48>)
 8002720:	6818      	ldr	r0, [r3, #0]
 8002722:	f7fe ff02 	bl	800152a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8002726:	2000      	movs	r0, #0
 8002728:	e7e6      	b.n	80026f8 <prvInsertTimerInActiveList+0x14>
 800272a:	bf00      	nop
 800272c:	2000107c 	.word	0x2000107c

08002730 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002730:	b570      	push	{r4, r5, r6, lr}
 8002732:	b082      	sub	sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002734:	f000 fa6e 	bl	8002c14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002738:	4b12      	ldr	r3, [pc, #72]	; (8002784 <prvCheckForValidListAndQueue+0x54>)
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	b11b      	cbz	r3, 8002746 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800273e:	f000 fa8f 	bl	8002c60 <vPortExitCritical>
}
 8002742:	b002      	add	sp, #8
 8002744:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
 8002746:	4c0f      	ldr	r4, [pc, #60]	; (8002784 <prvCheckForValidListAndQueue+0x54>)
 8002748:	f104 060c 	add.w	r6, r4, #12
 800274c:	4630      	mov	r0, r6
 800274e:	f7fe fed3 	bl	80014f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002752:	f104 0520 	add.w	r5, r4, #32
 8002756:	4628      	mov	r0, r5
 8002758:	f7fe fece 	bl	80014f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800275c:	6026      	str	r6, [r4, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800275e:	6065      	str	r5, [r4, #4]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8002760:	2300      	movs	r3, #0
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8002768:	f104 0284 	add.w	r2, r4, #132	; 0x84
 800276c:	2110      	movs	r1, #16
 800276e:	200a      	movs	r0, #10
 8002770:	f7fe fffc 	bl	800176c <xQueueGenericCreateStatic>
 8002774:	60a0      	str	r0, [r4, #8]
				if( xTimerQueue != NULL )
 8002776:	2800      	cmp	r0, #0
 8002778:	d0e1      	beq.n	800273e <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800277a:	4903      	ldr	r1, [pc, #12]	; (8002788 <prvCheckForValidListAndQueue+0x58>)
 800277c:	f7ff fa6c 	bl	8001c58 <vQueueAddToRegistry>
 8002780:	e7dd      	b.n	800273e <prvCheckForValidListAndQueue+0xe>
 8002782:	bf00      	nop
 8002784:	2000107c 	.word	0x2000107c
 8002788:	0800aba8 	.word	0x0800aba8

0800278c <xTimerCreateTimerTask>:
{
 800278c:	b510      	push	{r4, lr}
 800278e:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8002790:	f7ff ffce 	bl	8002730 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8002794:	4b14      	ldr	r3, [pc, #80]	; (80027e8 <xTimerCreateTimerTask+0x5c>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	b1d3      	cbz	r3, 80027d0 <xTimerCreateTimerTask+0x44>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800279a:	2400      	movs	r4, #0
 800279c:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800279e:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80027a0:	aa07      	add	r2, sp, #28
 80027a2:	a906      	add	r1, sp, #24
 80027a4:	a805      	add	r0, sp, #20
 80027a6:	f7fe fe97 	bl	80014d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80027aa:	9b05      	ldr	r3, [sp, #20]
 80027ac:	9302      	str	r3, [sp, #8]
 80027ae:	9b06      	ldr	r3, [sp, #24]
 80027b0:	9301      	str	r3, [sp, #4]
 80027b2:	2302      	movs	r3, #2
 80027b4:	9300      	str	r3, [sp, #0]
 80027b6:	4623      	mov	r3, r4
 80027b8:	9a07      	ldr	r2, [sp, #28]
 80027ba:	490c      	ldr	r1, [pc, #48]	; (80027ec <xTimerCreateTimerTask+0x60>)
 80027bc:	480c      	ldr	r0, [pc, #48]	; (80027f0 <xTimerCreateTimerTask+0x64>)
 80027be:	f7ff fbff 	bl	8001fc0 <xTaskCreateStatic>
 80027c2:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <xTimerCreateTimerTask+0x5c>)
 80027c4:	f8c3 0124 	str.w	r0, [r3, #292]	; 0x124
			if( xTimerTaskHandle != NULL )
 80027c8:	b110      	cbz	r0, 80027d0 <xTimerCreateTimerTask+0x44>
}
 80027ca:	2001      	movs	r0, #1
 80027cc:	b008      	add	sp, #32
 80027ce:	bd10      	pop	{r4, pc}
 80027d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d4:	b672      	cpsid	i
 80027d6:	f383 8811 	msr	BASEPRI, r3
 80027da:	f3bf 8f6f 	isb	sy
 80027de:	f3bf 8f4f 	dsb	sy
 80027e2:	b662      	cpsie	i
	configASSERT( xReturn );
 80027e4:	e7fe      	b.n	80027e4 <xTimerCreateTimerTask+0x58>
 80027e6:	bf00      	nop
 80027e8:	2000107c 	.word	0x2000107c
 80027ec:	0800abb0 	.word	0x0800abb0
 80027f0:	08002b1d 	.word	0x08002b1d

080027f4 <xTimerGenericCommand>:
	configASSERT( xTimer );
 80027f4:	b1b8      	cbz	r0, 8002826 <xTimerGenericCommand+0x32>
 80027f6:	469c      	mov	ip, r3
 80027f8:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 80027fa:	4819      	ldr	r0, [pc, #100]	; (8002860 <xTimerGenericCommand+0x6c>)
 80027fc:	6880      	ldr	r0, [r0, #8]
 80027fe:	b368      	cbz	r0, 800285c <xTimerGenericCommand+0x68>
{
 8002800:	b500      	push	{lr}
 8002802:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8002804:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002806:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8002808:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800280a:	2905      	cmp	r1, #5
 800280c:	dc1e      	bgt.n	800284c <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800280e:	f7ff fefb 	bl	8002608 <xTaskGetSchedulerState>
 8002812:	2802      	cmp	r0, #2
 8002814:	d012      	beq.n	800283c <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002816:	2300      	movs	r3, #0
 8002818:	461a      	mov	r2, r3
 800281a:	4669      	mov	r1, sp
 800281c:	4810      	ldr	r0, [pc, #64]	; (8002860 <xTimerGenericCommand+0x6c>)
 800281e:	6880      	ldr	r0, [r0, #8]
 8002820:	f7ff f82a 	bl	8001878 <xQueueGenericSend>
 8002824:	e017      	b.n	8002856 <xTimerGenericCommand+0x62>
 8002826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800282a:	b672      	cpsid	i
 800282c:	f383 8811 	msr	BASEPRI, r3
 8002830:	f3bf 8f6f 	isb	sy
 8002834:	f3bf 8f4f 	dsb	sy
 8002838:	b662      	cpsie	i
	configASSERT( xTimer );
 800283a:	e7fe      	b.n	800283a <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800283c:	2300      	movs	r3, #0
 800283e:	9a06      	ldr	r2, [sp, #24]
 8002840:	4669      	mov	r1, sp
 8002842:	4807      	ldr	r0, [pc, #28]	; (8002860 <xTimerGenericCommand+0x6c>)
 8002844:	6880      	ldr	r0, [r0, #8]
 8002846:	f7ff f817 	bl	8001878 <xQueueGenericSend>
 800284a:	e004      	b.n	8002856 <xTimerGenericCommand+0x62>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800284c:	2300      	movs	r3, #0
 800284e:	4662      	mov	r2, ip
 8002850:	4669      	mov	r1, sp
 8002852:	f7ff f8dd 	bl	8001a10 <xQueueGenericSendFromISR>
}
 8002856:	b005      	add	sp, #20
 8002858:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 800285c:	2000      	movs	r0, #0
}
 800285e:	4770      	bx	lr
 8002860:	2000107c 	.word	0x2000107c

08002864 <prvSwitchTimerLists>:
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002864:	4b22      	ldr	r3, [pc, #136]	; (80028f0 <prvSwitchTimerLists+0x8c>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	2a00      	cmp	r2, #0
 800286c:	d03b      	beq.n	80028e6 <prvSwitchTimerLists+0x82>
{
 800286e:	b570      	push	{r4, r5, r6, lr}
 8002870:	b082      	sub	sp, #8
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002876:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002878:	1d25      	adds	r5, r4, #4
 800287a:	4628      	mov	r0, r5
 800287c:	f7fe fe6e 	bl	800155c <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002880:	6a23      	ldr	r3, [r4, #32]
 8002882:	4620      	mov	r0, r4
 8002884:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002886:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800288a:	f013 0f04 	tst.w	r3, #4
 800288e:	d10a      	bne.n	80028a6 <prvSwitchTimerLists+0x42>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002890:	4b17      	ldr	r3, [pc, #92]	; (80028f0 <prvSwitchTimerLists+0x8c>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	2a00      	cmp	r2, #0
 8002898:	d1eb      	bne.n	8002872 <prvSwitchTimerLists+0xe>
	pxCurrentTimerList = pxOverflowTimerList;
 800289a:	4a15      	ldr	r2, [pc, #84]	; (80028f0 <prvSwitchTimerLists+0x8c>)
 800289c:	6851      	ldr	r1, [r2, #4]
 800289e:	6011      	str	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80028a0:	6053      	str	r3, [r2, #4]
}
 80028a2:	b002      	add	sp, #8
 80028a4:	bd70      	pop	{r4, r5, r6, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80028a6:	69a3      	ldr	r3, [r4, #24]
 80028a8:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 80028aa:	429e      	cmp	r6, r3
 80028ac:	d207      	bcs.n	80028be <prvSwitchTimerLists+0x5a>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80028ae:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80028b0:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80028b2:	4629      	mov	r1, r5
 80028b4:	4b0e      	ldr	r3, [pc, #56]	; (80028f0 <prvSwitchTimerLists+0x8c>)
 80028b6:	6818      	ldr	r0, [r3, #0]
 80028b8:	f7fe fe37 	bl	800152a <vListInsert>
 80028bc:	e7e8      	b.n	8002890 <prvSwitchTimerLists+0x2c>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80028be:	2100      	movs	r1, #0
 80028c0:	9100      	str	r1, [sp, #0]
 80028c2:	460b      	mov	r3, r1
 80028c4:	4632      	mov	r2, r6
 80028c6:	4620      	mov	r0, r4
 80028c8:	f7ff ff94 	bl	80027f4 <xTimerGenericCommand>
				configASSERT( xResult );
 80028cc:	2800      	cmp	r0, #0
 80028ce:	d1df      	bne.n	8002890 <prvSwitchTimerLists+0x2c>
 80028d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d4:	b672      	cpsid	i
 80028d6:	f383 8811 	msr	BASEPRI, r3
 80028da:	f3bf 8f6f 	isb	sy
 80028de:	f3bf 8f4f 	dsb	sy
 80028e2:	b662      	cpsie	i
 80028e4:	e7fe      	b.n	80028e4 <prvSwitchTimerLists+0x80>
	pxCurrentTimerList = pxOverflowTimerList;
 80028e6:	4a02      	ldr	r2, [pc, #8]	; (80028f0 <prvSwitchTimerLists+0x8c>)
 80028e8:	6851      	ldr	r1, [r2, #4]
 80028ea:	6011      	str	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80028ec:	6053      	str	r3, [r2, #4]
 80028ee:	4770      	bx	lr
 80028f0:	2000107c 	.word	0x2000107c

080028f4 <prvSampleTimeNow>:
{
 80028f4:	b538      	push	{r3, r4, r5, lr}
 80028f6:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 80028f8:	f7ff fc2e 	bl	8002158 <xTaskGetTickCount>
 80028fc:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 80028fe:	4b08      	ldr	r3, [pc, #32]	; (8002920 <prvSampleTimeNow+0x2c>)
 8002900:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8002904:	4283      	cmp	r3, r0
 8002906:	d806      	bhi.n	8002916 <prvSampleTimeNow+0x22>
		*pxTimerListsWereSwitched = pdFALSE;
 8002908:	2300      	movs	r3, #0
 800290a:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 800290c:	4b04      	ldr	r3, [pc, #16]	; (8002920 <prvSampleTimeNow+0x2c>)
 800290e:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
}
 8002912:	4620      	mov	r0, r4
 8002914:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 8002916:	f7ff ffa5 	bl	8002864 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800291a:	2301      	movs	r3, #1
 800291c:	602b      	str	r3, [r5, #0]
 800291e:	e7f5      	b.n	800290c <prvSampleTimeNow+0x18>
 8002920:	2000107c 	.word	0x2000107c

08002924 <prvProcessExpiredTimer>:
{
 8002924:	b570      	push	{r4, r5, r6, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	4606      	mov	r6, r0
 800292a:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800292c:	4918      	ldr	r1, [pc, #96]	; (8002990 <prvProcessExpiredTimer+0x6c>)
 800292e:	6809      	ldr	r1, [r1, #0]
 8002930:	68c9      	ldr	r1, [r1, #12]
 8002932:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002934:	1d20      	adds	r0, r4, #4
 8002936:	f7fe fe11 	bl	800155c <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800293a:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
 800293e:	f01c 0f04 	tst.w	ip, #4
 8002942:	d108      	bne.n	8002956 <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002944:	f02c 0c01 	bic.w	ip, ip, #1
 8002948:	f884 c028 	strb.w	ip, [r4, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800294c:	6a23      	ldr	r3, [r4, #32]
 800294e:	4620      	mov	r0, r4
 8002950:	4798      	blx	r3
}
 8002952:	b002      	add	sp, #8
 8002954:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002956:	69a1      	ldr	r1, [r4, #24]
 8002958:	4633      	mov	r3, r6
 800295a:	462a      	mov	r2, r5
 800295c:	4431      	add	r1, r6
 800295e:	4620      	mov	r0, r4
 8002960:	f7ff fec0 	bl	80026e4 <prvInsertTimerInActiveList>
 8002964:	2800      	cmp	r0, #0
 8002966:	d0f1      	beq.n	800294c <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002968:	2100      	movs	r1, #0
 800296a:	9100      	str	r1, [sp, #0]
 800296c:	460b      	mov	r3, r1
 800296e:	4632      	mov	r2, r6
 8002970:	4620      	mov	r0, r4
 8002972:	f7ff ff3f 	bl	80027f4 <xTimerGenericCommand>
			configASSERT( xResult );
 8002976:	2800      	cmp	r0, #0
 8002978:	d1e8      	bne.n	800294c <prvProcessExpiredTimer+0x28>
 800297a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800297e:	b672      	cpsid	i
 8002980:	f383 8811 	msr	BASEPRI, r3
 8002984:	f3bf 8f6f 	isb	sy
 8002988:	f3bf 8f4f 	dsb	sy
 800298c:	b662      	cpsie	i
 800298e:	e7fe      	b.n	800298e <prvProcessExpiredTimer+0x6a>
 8002990:	2000107c 	.word	0x2000107c

08002994 <prvProcessTimerOrBlockTask>:
{
 8002994:	b570      	push	{r4, r5, r6, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	4606      	mov	r6, r0
 800299a:	460c      	mov	r4, r1
	vTaskSuspendAll();
 800299c:	f7ff fbd2 	bl	8002144 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80029a0:	a801      	add	r0, sp, #4
 80029a2:	f7ff ffa7 	bl	80028f4 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 80029a6:	9b01      	ldr	r3, [sp, #4]
 80029a8:	bb3b      	cbnz	r3, 80029fa <prvProcessTimerOrBlockTask+0x66>
 80029aa:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80029ac:	42b0      	cmp	r0, r6
 80029ae:	bf28      	it	cs
 80029b0:	2c00      	cmpcs	r4, #0
 80029b2:	d019      	beq.n	80029e8 <prvProcessTimerOrBlockTask+0x54>
				if( xListWasEmpty != pdFALSE )
 80029b4:	b124      	cbz	r4, 80029c0 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80029b6:	4a13      	ldr	r2, [pc, #76]	; (8002a04 <prvProcessTimerOrBlockTask+0x70>)
 80029b8:	6852      	ldr	r2, [r2, #4]
 80029ba:	6812      	ldr	r2, [r2, #0]
 80029bc:	b9da      	cbnz	r2, 80029f6 <prvProcessTimerOrBlockTask+0x62>
 80029be:	2401      	movs	r4, #1
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80029c0:	4622      	mov	r2, r4
 80029c2:	1b71      	subs	r1, r6, r5
 80029c4:	4b0f      	ldr	r3, [pc, #60]	; (8002a04 <prvProcessTimerOrBlockTask+0x70>)
 80029c6:	6898      	ldr	r0, [r3, #8]
 80029c8:	f7ff f95a 	bl	8001c80 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80029cc:	f7ff fc58 	bl	8002280 <xTaskResumeAll>
 80029d0:	b9a8      	cbnz	r0, 80029fe <prvProcessTimerOrBlockTask+0x6a>
					portYIELD_WITHIN_API();
 80029d2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80029d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029da:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80029de:	f3bf 8f4f 	dsb	sy
 80029e2:	f3bf 8f6f 	isb	sy
 80029e6:	e00a      	b.n	80029fe <prvProcessTimerOrBlockTask+0x6a>
				( void ) xTaskResumeAll();
 80029e8:	f7ff fc4a 	bl	8002280 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80029ec:	4629      	mov	r1, r5
 80029ee:	4630      	mov	r0, r6
 80029f0:	f7ff ff98 	bl	8002924 <prvProcessExpiredTimer>
 80029f4:	e003      	b.n	80029fe <prvProcessTimerOrBlockTask+0x6a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80029f6:	461c      	mov	r4, r3
 80029f8:	e7e2      	b.n	80029c0 <prvProcessTimerOrBlockTask+0x2c>
			( void ) xTaskResumeAll();
 80029fa:	f7ff fc41 	bl	8002280 <xTaskResumeAll>
}
 80029fe:	b002      	add	sp, #8
 8002a00:	bd70      	pop	{r4, r5, r6, pc}
 8002a02:	bf00      	nop
 8002a04:	2000107c 	.word	0x2000107c

08002a08 <prvProcessReceivedCommands>:
{
 8002a08:	b510      	push	{r4, lr}
 8002a0a:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002a0c:	e002      	b.n	8002a14 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002a0e:	9b04      	ldr	r3, [sp, #16]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	da0f      	bge.n	8002a34 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002a14:	2200      	movs	r2, #0
 8002a16:	a904      	add	r1, sp, #16
 8002a18:	4b3f      	ldr	r3, [pc, #252]	; (8002b18 <prvProcessReceivedCommands+0x110>)
 8002a1a:	6898      	ldr	r0, [r3, #8]
 8002a1c:	f7ff f866 	bl	8001aec <xQueueReceive>
 8002a20:	2800      	cmp	r0, #0
 8002a22:	d077      	beq.n	8002b14 <prvProcessReceivedCommands+0x10c>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8002a24:	9b04      	ldr	r3, [sp, #16]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	daf1      	bge.n	8002a0e <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8002a2a:	9907      	ldr	r1, [sp, #28]
 8002a2c:	9806      	ldr	r0, [sp, #24]
 8002a2e:	9b05      	ldr	r3, [sp, #20]
 8002a30:	4798      	blx	r3
 8002a32:	e7ec      	b.n	8002a0e <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002a34:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002a36:	6963      	ldr	r3, [r4, #20]
 8002a38:	b113      	cbz	r3, 8002a40 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002a3a:	1d20      	adds	r0, r4, #4
 8002a3c:	f7fe fd8e 	bl	800155c <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002a40:	a803      	add	r0, sp, #12
 8002a42:	f7ff ff57 	bl	80028f4 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8002a46:	9b04      	ldr	r3, [sp, #16]
 8002a48:	2b09      	cmp	r3, #9
 8002a4a:	d8e3      	bhi.n	8002a14 <prvProcessReceivedCommands+0xc>
 8002a4c:	e8df f003 	tbb	[pc, r3]
 8002a50:	32050505 	.word	0x32050505
 8002a54:	05055439 	.word	0x05055439
 8002a58:	3932      	.short	0x3932
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002a5a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8002a5e:	f043 0301 	orr.w	r3, r3, #1
 8002a62:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002a66:	9b05      	ldr	r3, [sp, #20]
 8002a68:	69a1      	ldr	r1, [r4, #24]
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	4419      	add	r1, r3
 8002a6e:	4620      	mov	r0, r4
 8002a70:	f7ff fe38 	bl	80026e4 <prvInsertTimerInActiveList>
 8002a74:	2800      	cmp	r0, #0
 8002a76:	d0cd      	beq.n	8002a14 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002a78:	6a23      	ldr	r3, [r4, #32]
 8002a7a:	4620      	mov	r0, r4
 8002a7c:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002a7e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8002a82:	f013 0f04 	tst.w	r3, #4
 8002a86:	d0c5      	beq.n	8002a14 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002a88:	69a2      	ldr	r2, [r4, #24]
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	9100      	str	r1, [sp, #0]
 8002a8e:	460b      	mov	r3, r1
 8002a90:	9805      	ldr	r0, [sp, #20]
 8002a92:	4402      	add	r2, r0
 8002a94:	4620      	mov	r0, r4
 8002a96:	f7ff fead 	bl	80027f4 <xTimerGenericCommand>
							configASSERT( xResult );
 8002a9a:	2800      	cmp	r0, #0
 8002a9c:	d1ba      	bne.n	8002a14 <prvProcessReceivedCommands+0xc>
 8002a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aa2:	b672      	cpsid	i
 8002aa4:	f383 8811 	msr	BASEPRI, r3
 8002aa8:	f3bf 8f6f 	isb	sy
 8002aac:	f3bf 8f4f 	dsb	sy
 8002ab0:	b662      	cpsie	i
 8002ab2:	e7fe      	b.n	8002ab2 <prvProcessReceivedCommands+0xaa>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002ab4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8002ab8:	f023 0301 	bic.w	r3, r3, #1
 8002abc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					break;
 8002ac0:	e7a8      	b.n	8002a14 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002ac2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8002ac6:	f043 0301 	orr.w	r3, r3, #1
 8002aca:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002ace:	9905      	ldr	r1, [sp, #20]
 8002ad0:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002ad2:	b131      	cbz	r1, 8002ae2 <prvProcessReceivedCommands+0xda>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	4401      	add	r1, r0
 8002ada:	4620      	mov	r0, r4
 8002adc:	f7ff fe02 	bl	80026e4 <prvInsertTimerInActiveList>
					break;
 8002ae0:	e798      	b.n	8002a14 <prvProcessReceivedCommands+0xc>
 8002ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae6:	b672      	cpsid	i
 8002ae8:	f383 8811 	msr	BASEPRI, r3
 8002aec:	f3bf 8f6f 	isb	sy
 8002af0:	f3bf 8f4f 	dsb	sy
 8002af4:	b662      	cpsie	i
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002af6:	e7fe      	b.n	8002af6 <prvProcessReceivedCommands+0xee>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002af8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8002afc:	f013 0f02 	tst.w	r3, #2
 8002b00:	d004      	beq.n	8002b0c <prvProcessReceivedCommands+0x104>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002b02:	f023 0301 	bic.w	r3, r3, #1
 8002b06:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8002b0a:	e783      	b.n	8002a14 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 8002b0c:	4620      	mov	r0, r4
 8002b0e:	f000 fa7d 	bl	800300c <vPortFree>
 8002b12:	e77f      	b.n	8002a14 <prvProcessReceivedCommands+0xc>
}
 8002b14:	b008      	add	sp, #32
 8002b16:	bd10      	pop	{r4, pc}
 8002b18:	2000107c 	.word	0x2000107c

08002b1c <prvTimerTask>:
{
 8002b1c:	b500      	push	{lr}
 8002b1e:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002b20:	a801      	add	r0, sp, #4
 8002b22:	f7ff fdcf 	bl	80026c4 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002b26:	9901      	ldr	r1, [sp, #4]
 8002b28:	f7ff ff34 	bl	8002994 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 8002b2c:	f7ff ff6c 	bl	8002a08 <prvProcessReceivedCommands>
	for( ;; )
 8002b30:	e7f6      	b.n	8002b20 <prvTimerTask+0x4>
	...

08002b34 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002b34:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8002b36:	2300      	movs	r3, #0
 8002b38:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002b3a:	4b0f      	ldr	r3, [pc, #60]	; (8002b78 <prvTaskExitError+0x44>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b42:	d00a      	beq.n	8002b5a <prvTaskExitError+0x26>
 8002b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b48:	b672      	cpsid	i
 8002b4a:	f383 8811 	msr	BASEPRI, r3
 8002b4e:	f3bf 8f6f 	isb	sy
 8002b52:	f3bf 8f4f 	dsb	sy
 8002b56:	b662      	cpsie	i
 8002b58:	e7fe      	b.n	8002b58 <prvTaskExitError+0x24>
 8002b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b5e:	b672      	cpsid	i
 8002b60:	f383 8811 	msr	BASEPRI, r3
 8002b64:	f3bf 8f6f 	isb	sy
 8002b68:	f3bf 8f4f 	dsb	sy
 8002b6c:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002b6e:	9b01      	ldr	r3, [sp, #4]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0fc      	beq.n	8002b6e <prvTaskExitError+0x3a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002b74:	b002      	add	sp, #8
 8002b76:	4770      	bx	lr
 8002b78:	20000014 	.word	0x20000014

08002b7c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002b7c:	4808      	ldr	r0, [pc, #32]	; (8002ba0 <prvPortStartFirstTask+0x24>)
 8002b7e:	6800      	ldr	r0, [r0, #0]
 8002b80:	6800      	ldr	r0, [r0, #0]
 8002b82:	f380 8808 	msr	MSP, r0
 8002b86:	f04f 0000 	mov.w	r0, #0
 8002b8a:	f380 8814 	msr	CONTROL, r0
 8002b8e:	b662      	cpsie	i
 8002b90:	b661      	cpsie	f
 8002b92:	f3bf 8f4f 	dsb	sy
 8002b96:	f3bf 8f6f 	isb	sy
 8002b9a:	df00      	svc	0
 8002b9c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002b9e:	0000      	.short	0x0000
 8002ba0:	e000ed08 	.word	0xe000ed08

08002ba4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002ba4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002bb4 <vPortEnableVFP+0x10>
 8002ba8:	6801      	ldr	r1, [r0, #0]
 8002baa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002bae:	6001      	str	r1, [r0, #0]
 8002bb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002bb2:	0000      	.short	0x0000
 8002bb4:	e000ed88 	.word	0xe000ed88

08002bb8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002bb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bbc:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002bc0:	f021 0101 	bic.w	r1, r1, #1
 8002bc4:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002bc8:	4b05      	ldr	r3, [pc, #20]	; (8002be0 <pxPortInitialiseStack+0x28>)
 8002bca:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002bce:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002bd2:	f06f 0302 	mvn.w	r3, #2
 8002bd6:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8002bda:	3844      	subs	r0, #68	; 0x44
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	08002b35 	.word	0x08002b35
	...

08002bf0 <SVC_Handler>:
	__asm volatile (
 8002bf0:	4b07      	ldr	r3, [pc, #28]	; (8002c10 <pxCurrentTCBConst2>)
 8002bf2:	6819      	ldr	r1, [r3, #0]
 8002bf4:	6808      	ldr	r0, [r1, #0]
 8002bf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bfa:	f380 8809 	msr	PSP, r0
 8002bfe:	f3bf 8f6f 	isb	sy
 8002c02:	f04f 0000 	mov.w	r0, #0
 8002c06:	f380 8811 	msr	BASEPRI, r0
 8002c0a:	4770      	bx	lr
 8002c0c:	f3af 8000 	nop.w

08002c10 <pxCurrentTCBConst2>:
 8002c10:	20001050 	.word	0x20001050

08002c14 <vPortEnterCritical>:
 8002c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c18:	b672      	cpsid	i
 8002c1a:	f383 8811 	msr	BASEPRI, r3
 8002c1e:	f3bf 8f6f 	isb	sy
 8002c22:	f3bf 8f4f 	dsb	sy
 8002c26:	b662      	cpsie	i
	uxCriticalNesting++;
 8002c28:	4a0c      	ldr	r2, [pc, #48]	; (8002c5c <vPortEnterCritical+0x48>)
 8002c2a:	6813      	ldr	r3, [r2, #0]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d000      	beq.n	8002c36 <vPortEnterCritical+0x22>
}
 8002c34:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002c36:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002c3a:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8002c3e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002c42:	d0f7      	beq.n	8002c34 <vPortEnterCritical+0x20>
 8002c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c48:	b672      	cpsid	i
 8002c4a:	f383 8811 	msr	BASEPRI, r3
 8002c4e:	f3bf 8f6f 	isb	sy
 8002c52:	f3bf 8f4f 	dsb	sy
 8002c56:	b662      	cpsie	i
 8002c58:	e7fe      	b.n	8002c58 <vPortEnterCritical+0x44>
 8002c5a:	bf00      	nop
 8002c5c:	20000014 	.word	0x20000014

08002c60 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8002c60:	4b0a      	ldr	r3, [pc, #40]	; (8002c8c <vPortExitCritical+0x2c>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	b953      	cbnz	r3, 8002c7c <vPortExitCritical+0x1c>
 8002c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c6a:	b672      	cpsid	i
 8002c6c:	f383 8811 	msr	BASEPRI, r3
 8002c70:	f3bf 8f6f 	isb	sy
 8002c74:	f3bf 8f4f 	dsb	sy
 8002c78:	b662      	cpsie	i
 8002c7a:	e7fe      	b.n	8002c7a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	4a03      	ldr	r2, [pc, #12]	; (8002c8c <vPortExitCritical+0x2c>)
 8002c80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002c82:	b90b      	cbnz	r3, 8002c88 <vPortExitCritical+0x28>
	__asm volatile
 8002c84:	f383 8811 	msr	BASEPRI, r3
}
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	20000014 	.word	0x20000014

08002c90 <PendSV_Handler>:
	__asm volatile
 8002c90:	f3ef 8009 	mrs	r0, PSP
 8002c94:	f3bf 8f6f 	isb	sy
 8002c98:	4b15      	ldr	r3, [pc, #84]	; (8002cf0 <pxCurrentTCBConst>)
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	f01e 0f10 	tst.w	lr, #16
 8002ca0:	bf08      	it	eq
 8002ca2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002ca6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002caa:	6010      	str	r0, [r2, #0]
 8002cac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002cb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002cb4:	b672      	cpsid	i
 8002cb6:	f380 8811 	msr	BASEPRI, r0
 8002cba:	f3bf 8f4f 	dsb	sy
 8002cbe:	f3bf 8f6f 	isb	sy
 8002cc2:	b662      	cpsie	i
 8002cc4:	f7ff fb7e 	bl	80023c4 <vTaskSwitchContext>
 8002cc8:	f04f 0000 	mov.w	r0, #0
 8002ccc:	f380 8811 	msr	BASEPRI, r0
 8002cd0:	bc09      	pop	{r0, r3}
 8002cd2:	6819      	ldr	r1, [r3, #0]
 8002cd4:	6808      	ldr	r0, [r1, #0]
 8002cd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cda:	f01e 0f10 	tst.w	lr, #16
 8002cde:	bf08      	it	eq
 8002ce0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002ce4:	f380 8809 	msr	PSP, r0
 8002ce8:	f3bf 8f6f 	isb	sy
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop

08002cf0 <pxCurrentTCBConst>:
 8002cf0:	20001050 	.word	0x20001050

08002cf4 <SysTick_Handler>:
{
 8002cf4:	b508      	push	{r3, lr}
	__asm volatile
 8002cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cfa:	b672      	cpsid	i
 8002cfc:	f383 8811 	msr	BASEPRI, r3
 8002d00:	f3bf 8f6f 	isb	sy
 8002d04:	f3bf 8f4f 	dsb	sy
 8002d08:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 8002d0a:	f7ff fa2b 	bl	8002164 <xTaskIncrementTick>
 8002d0e:	b128      	cbz	r0, 8002d1c <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002d10:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002d14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d18:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	f383 8811 	msr	BASEPRI, r3
}
 8002d22:	bd08      	pop	{r3, pc}

08002d24 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002d24:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8002d28:	2300      	movs	r3, #0
 8002d2a:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002d2c:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002d2e:	4b05      	ldr	r3, [pc, #20]	; (8002d44 <vPortSetupTimerInterrupt+0x20>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4905      	ldr	r1, [pc, #20]	; (8002d48 <vPortSetupTimerInterrupt+0x24>)
 8002d34:	fba1 1303 	umull	r1, r3, r1, r3
 8002d38:	099b      	lsrs	r3, r3, #6
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002d3e:	2307      	movs	r3, #7
 8002d40:	6113      	str	r3, [r2, #16]
}
 8002d42:	4770      	bx	lr
 8002d44:	200000a8 	.word	0x200000a8
 8002d48:	10624dd3 	.word	0x10624dd3

08002d4c <xPortStartScheduler>:
{
 8002d4c:	b530      	push	{r4, r5, lr}
 8002d4e:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002d50:	4b2f      	ldr	r3, [pc, #188]	; (8002e10 <xPortStartScheduler+0xc4>)
 8002d52:	781a      	ldrb	r2, [r3, #0]
 8002d54:	b2d2      	uxtb	r2, r2
 8002d56:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002d58:	22ff      	movs	r2, #255	; 0xff
 8002d5a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002d64:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002d68:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d6c:	4a29      	ldr	r2, [pc, #164]	; (8002e14 <xPortStartScheduler+0xc8>)
 8002d6e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002d70:	2307      	movs	r3, #7
 8002d72:	6053      	str	r3, [r2, #4]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002d74:	e009      	b.n	8002d8a <xPortStartScheduler+0x3e>
			ulMaxPRIGROUPValue--;
 8002d76:	4a27      	ldr	r2, [pc, #156]	; (8002e14 <xPortStartScheduler+0xc8>)
 8002d78:	6853      	ldr	r3, [r2, #4]
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	6053      	str	r3, [r2, #4]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002d7e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002d8a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002d8e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002d92:	d1f0      	bne.n	8002d76 <xPortStartScheduler+0x2a>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002d94:	4b1f      	ldr	r3, [pc, #124]	; (8002e14 <xPortStartScheduler+0xc8>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	2b03      	cmp	r3, #3
 8002d9a:	d00a      	beq.n	8002db2 <xPortStartScheduler+0x66>
	__asm volatile
 8002d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da0:	b672      	cpsid	i
 8002da2:	f383 8811 	msr	BASEPRI, r3
 8002da6:	f3bf 8f6f 	isb	sy
 8002daa:	f3bf 8f4f 	dsb	sy
 8002dae:	b662      	cpsie	i
 8002db0:	e7fe      	b.n	8002db0 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002db2:	021b      	lsls	r3, r3, #8
 8002db4:	4a17      	ldr	r2, [pc, #92]	; (8002e14 <xPortStartScheduler+0xc8>)
 8002db6:	6053      	str	r3, [r2, #4]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002db8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002dbc:	6053      	str	r3, [r2, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002dbe:	9b01      	ldr	r3, [sp, #4]
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	4a13      	ldr	r2, [pc, #76]	; (8002e10 <xPortStartScheduler+0xc4>)
 8002dc4:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002dc6:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 8002dca:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8002dce:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002dd2:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002dd6:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8002dda:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002dde:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8002de2:	f7ff ff9f 	bl	8002d24 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8002de6:	2500      	movs	r5, #0
 8002de8:	4b0b      	ldr	r3, [pc, #44]	; (8002e18 <xPortStartScheduler+0xcc>)
 8002dea:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8002dec:	f7ff feda 	bl	8002ba4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002df0:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8002df4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002df8:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8002dfc:	f7ff febe 	bl	8002b7c <prvPortStartFirstTask>
	vTaskSwitchContext();
 8002e00:	f7ff fae0 	bl	80023c4 <vTaskSwitchContext>
	prvTaskExitError();
 8002e04:	f7ff fe96 	bl	8002b34 <prvTaskExitError>
}
 8002e08:	4628      	mov	r0, r5
 8002e0a:	b003      	add	sp, #12
 8002e0c:	bd30      	pop	{r4, r5, pc}
 8002e0e:	bf00      	nop
 8002e10:	e000e400 	.word	0xe000e400
 8002e14:	200011a8 	.word	0x200011a8
 8002e18:	20000014 	.word	0x20000014

08002e1c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8002e1c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002e20:	2b0f      	cmp	r3, #15
 8002e22:	d911      	bls.n	8002e48 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002e24:	4a13      	ldr	r2, [pc, #76]	; (8002e74 <vPortValidateInterruptPriority+0x58>)
 8002e26:	5c9b      	ldrb	r3, [r3, r2]
 8002e28:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002e2a:	4a13      	ldr	r2, [pc, #76]	; (8002e78 <vPortValidateInterruptPriority+0x5c>)
 8002e2c:	7812      	ldrb	r2, [r2, #0]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d90a      	bls.n	8002e48 <vPortValidateInterruptPriority+0x2c>
 8002e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e36:	b672      	cpsid	i
 8002e38:	f383 8811 	msr	BASEPRI, r3
 8002e3c:	f3bf 8f6f 	isb	sy
 8002e40:	f3bf 8f4f 	dsb	sy
 8002e44:	b662      	cpsie	i
 8002e46:	e7fe      	b.n	8002e46 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002e48:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002e4c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8002e50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e54:	4a08      	ldr	r2, [pc, #32]	; (8002e78 <vPortValidateInterruptPriority+0x5c>)
 8002e56:	6852      	ldr	r2, [r2, #4]
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d90a      	bls.n	8002e72 <vPortValidateInterruptPriority+0x56>
 8002e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e60:	b672      	cpsid	i
 8002e62:	f383 8811 	msr	BASEPRI, r3
 8002e66:	f3bf 8f6f 	isb	sy
 8002e6a:	f3bf 8f4f 	dsb	sy
 8002e6e:	b662      	cpsie	i
 8002e70:	e7fe      	b.n	8002e70 <vPortValidateInterruptPriority+0x54>
	}
 8002e72:	4770      	bx	lr
 8002e74:	e000e3f0 	.word	0xe000e3f0
 8002e78:	200011a8 	.word	0x200011a8

08002e7c <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002e7c:	4a10      	ldr	r2, [pc, #64]	; (8002ec0 <prvHeapInit+0x44>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002e7e:	f012 0f07 	tst.w	r2, #7
 8002e82:	d01a      	beq.n	8002eba <prvHeapInit+0x3e>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002e84:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002e86:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002e8a:	f5c1 5370 	rsb	r3, r1, #15360	; 0x3c00
 8002e8e:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002e90:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002e92:	490c      	ldr	r1, [pc, #48]	; (8002ec4 <prvHeapInit+0x48>)
 8002e94:	600a      	str	r2, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002e96:	2000      	movs	r0, #0
 8002e98:	6048      	str	r0, [r1, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002e9a:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8002e9c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002e9e:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8002ea2:	608b      	str	r3, [r1, #8]
	pxEnd->xBlockSize = 0;
 8002ea4:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002ea6:	6018      	str	r0, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002ea8:	1a98      	subs	r0, r3, r2
 8002eaa:	6050      	str	r0, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002eac:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002eae:	60c8      	str	r0, [r1, #12]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002eb0:	6108      	str	r0, [r1, #16]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002eb2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002eb6:	614b      	str	r3, [r1, #20]
}
 8002eb8:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002eba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002ebe:	e7e8      	b.n	8002e92 <prvHeapInit+0x16>
 8002ec0:	200011c8 	.word	0x200011c8
 8002ec4:	200011b0 	.word	0x200011b0

08002ec8 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002ec8:	4b16      	ldr	r3, [pc, #88]	; (8002f24 <prvInsertBlockIntoFreeList+0x5c>)
 8002eca:	461a      	mov	r2, r3
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4283      	cmp	r3, r0
 8002ed0:	d3fb      	bcc.n	8002eca <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002ed2:	6851      	ldr	r1, [r2, #4]
 8002ed4:	eb02 0c01 	add.w	ip, r2, r1
 8002ed8:	4584      	cmp	ip, r0
 8002eda:	d009      	beq.n	8002ef0 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002edc:	6841      	ldr	r1, [r0, #4]
 8002ede:	eb00 0c01 	add.w	ip, r0, r1
 8002ee2:	4563      	cmp	r3, ip
 8002ee4:	d009      	beq.n	8002efa <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002ee6:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002ee8:	4290      	cmp	r0, r2
 8002eea:	d019      	beq.n	8002f20 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002eec:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 8002eee:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002ef0:	6840      	ldr	r0, [r0, #4]
 8002ef2:	4401      	add	r1, r0
 8002ef4:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8002ef6:	4610      	mov	r0, r2
 8002ef8:	e7f0      	b.n	8002edc <prvInsertBlockIntoFreeList+0x14>
{
 8002efa:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002efc:	4c09      	ldr	r4, [pc, #36]	; (8002f24 <prvInsertBlockIntoFreeList+0x5c>)
 8002efe:	68a4      	ldr	r4, [r4, #8]
 8002f00:	42a3      	cmp	r3, r4
 8002f02:	d00b      	beq.n	8002f1c <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	4419      	add	r1, r3
 8002f08:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002f0a:	6813      	ldr	r3, [r2, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8002f10:	4290      	cmp	r0, r2
 8002f12:	d000      	beq.n	8002f16 <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002f14:	6010      	str	r0, [r2, #0]
	}
}
 8002f16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f1a:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002f1c:	6004      	str	r4, [r0, #0]
 8002f1e:	e7f7      	b.n	8002f10 <prvInsertBlockIntoFreeList+0x48>
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	200011b0 	.word	0x200011b0

08002f28 <pvPortMalloc>:
{
 8002f28:	b570      	push	{r4, r5, r6, lr}
 8002f2a:	4605      	mov	r5, r0
	vTaskSuspendAll();
 8002f2c:	f7ff f90a 	bl	8002144 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8002f30:	4b35      	ldr	r3, [pc, #212]	; (8003008 <pvPortMalloc+0xe0>)
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	b1a3      	cbz	r3, 8002f60 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002f36:	4b34      	ldr	r3, [pc, #208]	; (8003008 <pvPortMalloc+0xe0>)
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	421d      	tst	r5, r3
 8002f3c:	d14b      	bne.n	8002fd6 <pvPortMalloc+0xae>
			if( xWantedSize > 0 )
 8002f3e:	b135      	cbz	r5, 8002f4e <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 8002f40:	3508      	adds	r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002f42:	f015 0f07 	tst.w	r5, #7
 8002f46:	d002      	beq.n	8002f4e <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002f48:	f025 0507 	bic.w	r5, r5, #7
 8002f4c:	3508      	adds	r5, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002f4e:	2d00      	cmp	r5, #0
 8002f50:	d043      	beq.n	8002fda <pvPortMalloc+0xb2>
 8002f52:	4b2d      	ldr	r3, [pc, #180]	; (8003008 <pvPortMalloc+0xe0>)
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	42ab      	cmp	r3, r5
 8002f58:	d350      	bcc.n	8002ffc <pvPortMalloc+0xd4>
				pxBlock = xStart.pxNextFreeBlock;
 8002f5a:	4a2b      	ldr	r2, [pc, #172]	; (8003008 <pvPortMalloc+0xe0>)
 8002f5c:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002f5e:	e004      	b.n	8002f6a <pvPortMalloc+0x42>
			prvHeapInit();
 8002f60:	f7ff ff8c 	bl	8002e7c <prvHeapInit>
 8002f64:	e7e7      	b.n	8002f36 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 8002f66:	4622      	mov	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8002f68:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002f6a:	6863      	ldr	r3, [r4, #4]
 8002f6c:	42ab      	cmp	r3, r5
 8002f6e:	d202      	bcs.n	8002f76 <pvPortMalloc+0x4e>
 8002f70:	6823      	ldr	r3, [r4, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1f7      	bne.n	8002f66 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 8002f76:	4b24      	ldr	r3, [pc, #144]	; (8003008 <pvPortMalloc+0xe0>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	42a3      	cmp	r3, r4
 8002f7c:	d040      	beq.n	8003000 <pvPortMalloc+0xd8>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002f7e:	6816      	ldr	r6, [r2, #0]
 8002f80:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002f82:	6823      	ldr	r3, [r4, #0]
 8002f84:	6013      	str	r3, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002f86:	6863      	ldr	r3, [r4, #4]
 8002f88:	1b5b      	subs	r3, r3, r5
 8002f8a:	2b10      	cmp	r3, #16
 8002f8c:	d912      	bls.n	8002fb4 <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002f8e:	1960      	adds	r0, r4, r5
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f90:	f010 0f07 	tst.w	r0, #7
 8002f94:	d00a      	beq.n	8002fac <pvPortMalloc+0x84>
 8002f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f9a:	b672      	cpsid	i
 8002f9c:	f383 8811 	msr	BASEPRI, r3
 8002fa0:	f3bf 8f6f 	isb	sy
 8002fa4:	f3bf 8f4f 	dsb	sy
 8002fa8:	b662      	cpsie	i
 8002faa:	e7fe      	b.n	8002faa <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002fac:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002fae:	6065      	str	r5, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002fb0:	f7ff ff8a 	bl	8002ec8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002fb4:	6861      	ldr	r1, [r4, #4]
 8002fb6:	4a14      	ldr	r2, [pc, #80]	; (8003008 <pvPortMalloc+0xe0>)
 8002fb8:	6913      	ldr	r3, [r2, #16]
 8002fba:	1a5b      	subs	r3, r3, r1
 8002fbc:	6113      	str	r3, [r2, #16]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002fbe:	68d2      	ldr	r2, [r2, #12]
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d201      	bcs.n	8002fc8 <pvPortMalloc+0xa0>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002fc4:	4a10      	ldr	r2, [pc, #64]	; (8003008 <pvPortMalloc+0xe0>)
 8002fc6:	60d3      	str	r3, [r2, #12]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002fc8:	4b0f      	ldr	r3, [pc, #60]	; (8003008 <pvPortMalloc+0xe0>)
 8002fca:	695b      	ldr	r3, [r3, #20]
 8002fcc:	430b      	orrs	r3, r1
 8002fce:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	6023      	str	r3, [r4, #0]
 8002fd4:	e002      	b.n	8002fdc <pvPortMalloc+0xb4>
void *pvReturn = NULL;
 8002fd6:	2600      	movs	r6, #0
 8002fd8:	e000      	b.n	8002fdc <pvPortMalloc+0xb4>
 8002fda:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 8002fdc:	f7ff f950 	bl	8002280 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002fe0:	f016 0f07 	tst.w	r6, #7
 8002fe4:	d00e      	beq.n	8003004 <pvPortMalloc+0xdc>
 8002fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fea:	b672      	cpsid	i
 8002fec:	f383 8811 	msr	BASEPRI, r3
 8002ff0:	f3bf 8f6f 	isb	sy
 8002ff4:	f3bf 8f4f 	dsb	sy
 8002ff8:	b662      	cpsie	i
 8002ffa:	e7fe      	b.n	8002ffa <pvPortMalloc+0xd2>
void *pvReturn = NULL;
 8002ffc:	2600      	movs	r6, #0
 8002ffe:	e7ed      	b.n	8002fdc <pvPortMalloc+0xb4>
 8003000:	2600      	movs	r6, #0
 8003002:	e7eb      	b.n	8002fdc <pvPortMalloc+0xb4>
}
 8003004:	4630      	mov	r0, r6
 8003006:	bd70      	pop	{r4, r5, r6, pc}
 8003008:	200011b0 	.word	0x200011b0

0800300c <vPortFree>:
	if( pv != NULL )
 800300c:	2800      	cmp	r0, #0
 800300e:	d034      	beq.n	800307a <vPortFree+0x6e>
{
 8003010:	b538      	push	{r3, r4, r5, lr}
 8003012:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8003014:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003018:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800301c:	4a17      	ldr	r2, [pc, #92]	; (800307c <vPortFree+0x70>)
 800301e:	6952      	ldr	r2, [r2, #20]
 8003020:	4213      	tst	r3, r2
 8003022:	d10a      	bne.n	800303a <vPortFree+0x2e>
 8003024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003028:	b672      	cpsid	i
 800302a:	f383 8811 	msr	BASEPRI, r3
 800302e:	f3bf 8f6f 	isb	sy
 8003032:	f3bf 8f4f 	dsb	sy
 8003036:	b662      	cpsie	i
 8003038:	e7fe      	b.n	8003038 <vPortFree+0x2c>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800303a:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800303e:	b151      	cbz	r1, 8003056 <vPortFree+0x4a>
 8003040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003044:	b672      	cpsid	i
 8003046:	f383 8811 	msr	BASEPRI, r3
 800304a:	f3bf 8f6f 	isb	sy
 800304e:	f3bf 8f4f 	dsb	sy
 8003052:	b662      	cpsie	i
 8003054:	e7fe      	b.n	8003054 <vPortFree+0x48>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003056:	ea23 0302 	bic.w	r3, r3, r2
 800305a:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800305e:	f7ff f871 	bl	8002144 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003062:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8003066:	4a05      	ldr	r2, [pc, #20]	; (800307c <vPortFree+0x70>)
 8003068:	6913      	ldr	r3, [r2, #16]
 800306a:	440b      	add	r3, r1
 800306c:	6113      	str	r3, [r2, #16]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800306e:	4628      	mov	r0, r5
 8003070:	f7ff ff2a 	bl	8002ec8 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8003074:	f7ff f904 	bl	8002280 <xTaskResumeAll>
}
 8003078:	bd38      	pop	{r3, r4, r5, pc}
 800307a:	4770      	bx	lr
 800307c:	200011b0 	.word	0x200011b0

08003080 <LCD_Thread>:

	while (1) {

	}
}
void LCD_Thread(void *argument){
 8003080:	b508      	push	{r3, lr}
	BSP_LCD_Init();
 8003082:	f7fd fe83 	bl	8000d8c <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0,LCD_FB_START_ADDRESS);
 8003086:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800308a:	2000      	movs	r0, #0
 800308c:	f7fd fc8e 	bl	80009ac <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(0);
 8003090:	2000      	movs	r0, #0
 8003092:	f7fd fccb 	bl	8000a2c <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 8003096:	f7fd fd0f 	bl	8000ab8 <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_RED);
 800309a:	4805      	ldr	r0, [pc, #20]	; (80030b0 <LCD_Thread+0x30>)
 800309c:	f7fd fcf0 	bl	8000a80 <BSP_LCD_Clear>

	BSP_LCD_SetTextColor(LCD_COLOR_DARKGRAY);
 80030a0:	4804      	ldr	r0, [pc, #16]	; (80030b4 <LCD_Thread+0x34>)
 80030a2:	f7fd fcc9 	bl	8000a38 <BSP_LCD_SetTextColor>
	char* text = "Hello World!";
	BSP_LCD_DisplayStringAtLine(0, (uint8_t *)text);
 80030a6:	4904      	ldr	r1, [pc, #16]	; (80030b8 <LCD_Thread+0x38>)
 80030a8:	2000      	movs	r0, #0
 80030aa:	f7fd ff7d 	bl	8000fa8 <BSP_LCD_DisplayStringAtLine>
	while(1){
 80030ae:	e7fe      	b.n	80030ae <LCD_Thread+0x2e>
 80030b0:	ffff0000 	.word	0xffff0000
 80030b4:	ff404040 	.word	0xff404040
 80030b8:	0800abb8 	.word	0x0800abb8

080030bc <main>:
int main(void) {
 80030bc:	b508      	push	{r3, lr}
	Sys_Init();
 80030be:	f000 fbd5 	bl	800386c <Sys_Init>
	osKernelInitialize();
 80030c2:	f7fe f8d5 	bl	8001270 <osKernelInitialize>
	GyroThreadHandle = osThreadNew(Gyro_Thread, NULL, &Gyro_Thread_attributes);
 80030c6:	4d10      	ldr	r5, [pc, #64]	; (8003108 <main+0x4c>)
 80030c8:	462a      	mov	r2, r5
 80030ca:	2100      	movs	r1, #0
 80030cc:	480f      	ldr	r0, [pc, #60]	; (800310c <main+0x50>)
 80030ce:	f7fe f911 	bl	80012f4 <osThreadNew>
 80030d2:	4c0f      	ldr	r4, [pc, #60]	; (8003110 <main+0x54>)
 80030d4:	6020      	str	r0, [r4, #0]
	UART_ThreadHandle = osThreadNew(UART_Thread, NULL, &UART_Thread_attributes);
 80030d6:	f105 0224 	add.w	r2, r5, #36	; 0x24
 80030da:	2100      	movs	r1, #0
 80030dc:	480d      	ldr	r0, [pc, #52]	; (8003114 <main+0x58>)
 80030de:	f7fe f909 	bl	80012f4 <osThreadNew>
 80030e2:	6060      	str	r0, [r4, #4]
	uartQueueHandle = osMessageQueueNew(1, sizeof(MPU6050_t),
 80030e4:	f105 0248 	add.w	r2, r5, #72	; 0x48
 80030e8:	2158      	movs	r1, #88	; 0x58
 80030ea:	2001      	movs	r0, #1
 80030ec:	f7fe f98c 	bl	8001408 <osMessageQueueNew>
 80030f0:	60a0      	str	r0, [r4, #8]
	LCD_ThreadHandle = osThreadNew(LCD_Thread, NULL, &LCD_Thread_attributes );
 80030f2:	f105 0260 	add.w	r2, r5, #96	; 0x60
 80030f6:	2100      	movs	r1, #0
 80030f8:	4807      	ldr	r0, [pc, #28]	; (8003118 <main+0x5c>)
 80030fa:	f7fe f8fb 	bl	80012f4 <osThreadNew>
 80030fe:	60e0      	str	r0, [r4, #12]
	osKernelStart();
 8003100:	f7fe f8d4 	bl	80012ac <osKernelStart>
	while (1) {
 8003104:	e7fe      	b.n	8003104 <main+0x48>
 8003106:	bf00      	nop
 8003108:	0800aaec 	.word	0x0800aaec
 800310c:	08003221 	.word	0x08003221
 8003110:	20004dc8 	.word	0x20004dc8
 8003114:	08003501 	.word	0x08003501
 8003118:	08003081 	.word	0x08003081

0800311c <USART1_IRQHandler>:
void USART1_IRQHandler(void) {
 800311c:	b508      	push	{r3, lr}
	HAL_UART_IRQHandler(&USB_UART);
 800311e:	4802      	ldr	r0, [pc, #8]	; (8003128 <USART1_IRQHandler+0xc>)
 8003120:	f003 ffd8 	bl	80070d4 <HAL_UART_IRQHandler>
}
 8003124:	bd08      	pop	{r3, pc}
 8003126:	bf00      	nop
 8003128:	20005138 	.word	0x20005138

0800312c <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void) {
 800312c:	b508      	push	{r3, lr}
	HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800312e:	4802      	ldr	r0, [pc, #8]	; (8003138 <DMA2_Stream1_IRQHandler+0xc>)
 8003130:	f001 f8f0 	bl	8004314 <HAL_DMA_IRQHandler>
}
 8003134:	bd08      	pop	{r3, pc}
 8003136:	bf00      	nop
 8003138:	20004dd8 	.word	0x20004dd8

0800313c <DMA2_Stream5_IRQHandler>:
void DMA2_Stream5_IRQHandler(void) {
 800313c:	b508      	push	{r3, lr}
	HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800313e:	4802      	ldr	r0, [pc, #8]	; (8003148 <DMA2_Stream5_IRQHandler+0xc>)
 8003140:	f001 f8e8 	bl	8004314 <HAL_DMA_IRQHandler>
}
 8003144:	bd08      	pop	{r3, pc}
 8003146:	bf00      	nop
 8003148:	20004e38 	.word	0x20004e38

0800314c <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void) {
 800314c:	b508      	push	{r3, lr}
    HAL_DMA_IRQHandler(&hdma_usart6_tx);
 800314e:	4802      	ldr	r0, [pc, #8]	; (8003158 <DMA2_Stream6_IRQHandler+0xc>)
 8003150:	f001 f8e0 	bl	8004314 <HAL_DMA_IRQHandler>
}
 8003154:	bd08      	pop	{r3, pc}
 8003156:	bf00      	nop
 8003158:	20004e98 	.word	0x20004e98

0800315c <DMA2_Stream7_IRQHandler>:
void DMA2_Stream7_IRQHandler(void) {
 800315c:	b508      	push	{r3, lr}
    HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800315e:	4802      	ldr	r0, [pc, #8]	; (8003168 <DMA2_Stream7_IRQHandler+0xc>)
 8003160:	f001 f8d8 	bl	8004314 <HAL_DMA_IRQHandler>
}
 8003164:	bd08      	pop	{r3, pc}
 8003166:	bf00      	nop
 8003168:	20004ef8 	.word	0x20004ef8

0800316c <HAL_UART_TxCpltCallback>:
}
 800316c:	4770      	bx	lr
	...

08003170 <I2C_init>:
void I2C_init() {
 8003170:	b500      	push	{lr}
 8003172:	b087      	sub	sp, #28
	hi2c1.Instance = I2C1;
 8003174:	4822      	ldr	r0, [pc, #136]	; (8003200 <I2C_init+0x90>)
 8003176:	4b23      	ldr	r3, [pc, #140]	; (8003204 <I2C_init+0x94>)
 8003178:	f8c0 3190 	str.w	r3, [r0, #400]	; 0x190
	hi2c1.Init.Timing = 0x00506682;
 800317c:	4b22      	ldr	r3, [pc, #136]	; (8003208 <I2C_init+0x98>)
 800317e:	f8c0 3194 	str.w	r3, [r0, #404]	; 0x194
	hi2c1.Init.OwnAddress1 = 0;
 8003182:	2300      	movs	r3, #0
 8003184:	f8c0 3198 	str.w	r3, [r0, #408]	; 0x198
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003188:	2201      	movs	r2, #1
 800318a:	f8c0 219c 	str.w	r2, [r0, #412]	; 0x19c
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800318e:	f8c0 31a0 	str.w	r3, [r0, #416]	; 0x1a0
	hi2c1.Init.OwnAddress2 = 0;
 8003192:	f8c0 31a4 	str.w	r3, [r0, #420]	; 0x1a4
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003196:	f8c0 31a8 	str.w	r3, [r0, #424]	; 0x1a8
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800319a:	f8c0 31ac 	str.w	r3, [r0, #428]	; 0x1ac
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800319e:	f8c0 31b0 	str.w	r3, [r0, #432]	; 0x1b0
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80031a2:	f500 70c8 	add.w	r0, r0, #400	; 0x190
 80031a6:	f002 f921 	bl	80053ec <HAL_I2C_Init>
 80031aa:	b9e0      	cbnz	r0, 80031e6 <I2C_init+0x76>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80031ac:	2100      	movs	r1, #0
 80031ae:	4817      	ldr	r0, [pc, #92]	; (800320c <I2C_init+0x9c>)
 80031b0:	f002 fb28 	bl	8005804 <HAL_I2CEx_ConfigAnalogFilter>
 80031b4:	b9d8      	cbnz	r0, 80031ee <I2C_init+0x7e>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80031b6:	2100      	movs	r1, #0
 80031b8:	4814      	ldr	r0, [pc, #80]	; (800320c <I2C_init+0x9c>)
 80031ba:	f002 fb51 	bl	8005860 <HAL_I2CEx_ConfigDigitalFilter>
 80031be:	b9d0      	cbnz	r0, 80031f6 <I2C_init+0x86>
	gpio_init.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 80031c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80031c4:	9301      	str	r3, [sp, #4]
	gpio_init.Mode = GPIO_MODE_AF_OD;
 80031c6:	2312      	movs	r3, #18
 80031c8:	9302      	str	r3, [sp, #8]
	gpio_init.Pull = GPIO_PULLUP;
 80031ca:	2301      	movs	r3, #1
 80031cc:	9303      	str	r3, [sp, #12]
	gpio_init.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031ce:	2303      	movs	r3, #3
 80031d0:	9304      	str	r3, [sp, #16]
	gpio_init.Alternate = GPIO_AF4_I2C1;
 80031d2:	2304      	movs	r3, #4
 80031d4:	9305      	str	r3, [sp, #20]
	HAL_GPIO_Init(GPIOB, &gpio_init);
 80031d6:	eb0d 0103 	add.w	r1, sp, r3
 80031da:	480d      	ldr	r0, [pc, #52]	; (8003210 <I2C_init+0xa0>)
 80031dc:	f001 fe48 	bl	8004e70 <HAL_GPIO_Init>
}
 80031e0:	b007      	add	sp, #28
 80031e2:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("I2C init failed\n\r");
 80031e6:	480b      	ldr	r0, [pc, #44]	; (8003214 <I2C_init+0xa4>)
 80031e8:	f004 fdb6 	bl	8007d58 <iprintf>
 80031ec:	e7de      	b.n	80031ac <I2C_init+0x3c>
		printf("I2C analog filter init failed\n\r");
 80031ee:	480a      	ldr	r0, [pc, #40]	; (8003218 <I2C_init+0xa8>)
 80031f0:	f004 fdb2 	bl	8007d58 <iprintf>
 80031f4:	e7df      	b.n	80031b6 <I2C_init+0x46>
		printf("I2C digital filter init failed\n\r");
 80031f6:	4809      	ldr	r0, [pc, #36]	; (800321c <I2C_init+0xac>)
 80031f8:	f004 fdae 	bl	8007d58 <iprintf>
 80031fc:	e7e0      	b.n	80031c0 <I2C_init+0x50>
 80031fe:	bf00      	nop
 8003200:	20004dc8 	.word	0x20004dc8
 8003204:	40005400 	.word	0x40005400
 8003208:	00506682 	.word	0x00506682
 800320c:	20004f58 	.word	0x20004f58
 8003210:	40020400 	.word	0x40020400
 8003214:	0800abc8 	.word	0x0800abc8
 8003218:	0800abdc 	.word	0x0800abdc
 800321c:	0800abfc 	.word	0x0800abfc

08003220 <Gyro_Thread>:
void Gyro_Thread(void *argument) {
 8003220:	b508      	push	{r3, lr}
	I2C_init();
 8003222:	f7ff ffa5 	bl	8003170 <I2C_init>
	MPU6050_Init(&hi2c1);
 8003226:	480c      	ldr	r0, [pc, #48]	; (8003258 <Gyro_Thread+0x38>)
 8003228:	f000 fb3c 	bl	80038a4 <MPU6050_Init>
	osDelay(1000);
 800322c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003230:	f7fe f8cc 	bl	80013cc <osDelay>
		MPU6050_Read_All(&hi2c1, &mpu6050);
 8003234:	4809      	ldr	r0, [pc, #36]	; (800325c <Gyro_Thread+0x3c>)
 8003236:	f500 74f4 	add.w	r4, r0, #488	; 0x1e8
 800323a:	4621      	mov	r1, r4
 800323c:	f500 70c8 	add.w	r0, r0, #400	; 0x190
 8003240:	f000 fbe2 	bl	8003a08 <MPU6050_Read_All>
		HAL_UART_Transmit_DMA(&USB_UART, &mpu6050, sizeof(MPU6050_t));
 8003244:	2258      	movs	r2, #88	; 0x58
 8003246:	4621      	mov	r1, r4
 8003248:	4805      	ldr	r0, [pc, #20]	; (8003260 <Gyro_Thread+0x40>)
 800324a:	f003 fe87 	bl	8006f5c <HAL_UART_Transmit_DMA>
		osDelay(10);
 800324e:	200a      	movs	r0, #10
 8003250:	f7fe f8bc 	bl	80013cc <osDelay>
	while(1) {
 8003254:	e7ee      	b.n	8003234 <Gyro_Thread+0x14>
 8003256:	bf00      	nop
 8003258:	20004f58 	.word	0x20004f58
 800325c:	20004dc8 	.word	0x20004dc8
 8003260:	20005138 	.word	0x20005138

08003264 <DMA_init>:
void DMA_init() {
 8003264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003268:	b082      	sub	sp, #8
	__HAL_RCC_DMA2_CLK_ENABLE();
 800326a:	4b53      	ldr	r3, [pc, #332]	; (80033b8 <DMA_init+0x154>)
 800326c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800326e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003272:	631a      	str	r2, [r3, #48]	; 0x30
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800327a:	9301      	str	r3, [sp, #4]
 800327c:	9b01      	ldr	r3, [sp, #4]
	hdma_usart1_tx.Instance = DMA2_Stream7;
 800327e:	4c4f      	ldr	r4, [pc, #316]	; (80033bc <DMA_init+0x158>)
 8003280:	4b4f      	ldr	r3, [pc, #316]	; (80033c0 <DMA_init+0x15c>)
 8003282:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
	hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8003286:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
 800328a:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
	hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800328e:	2740      	movs	r7, #64	; 0x40
 8003290:	f8c4 7138 	str.w	r7, [r4, #312]	; 0x138
	hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003294:	2300      	movs	r3, #0
 8003296:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
	hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800329a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800329e:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
	hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032a2:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
	hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032a6:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
	hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80032aa:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
	hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80032ae:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
	hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80032b2:	2104      	movs	r1, #4
 80032b4:	f8c4 1154 	str.w	r1, [r4, #340]	; 0x154
	hdma_usart1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80032b8:	2203      	movs	r2, #3
 80032ba:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
	hdma_usart1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80032be:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
	hdma_usart1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80032c2:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
	hdma_usart1_rx.Instance = DMA2_Stream5;
 80032c6:	4e3f      	ldr	r6, [pc, #252]	; (80033c4 <DMA_init+0x160>)
 80032c8:	6726      	str	r6, [r4, #112]	; 0x70
	hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80032ca:	6765      	str	r5, [r4, #116]	; 0x74
	hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032cc:	67a3      	str	r3, [r4, #120]	; 0x78
	hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032ce:	67e3      	str	r3, [r4, #124]	; 0x7c
	hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80032d0:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
	hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032d4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032d8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80032dc:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80032e0:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 80032e4:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
	hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80032e8:	f8c4 1094 	str.w	r1, [r4, #148]	; 0x94
	hdma_usart1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80032ec:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	hdma_usart1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80032f0:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	hdma_usart1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80032f4:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	hdma_usart6_tx.Instance = DMA2_Stream6;
 80032f8:	3618      	adds	r6, #24
 80032fa:	f8c4 60d0 	str.w	r6, [r4, #208]	; 0xd0
	hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 80032fe:	f04f 6620 	mov.w	r6, #167772160	; 0xa000000
 8003302:	f8c4 60d4 	str.w	r6, [r4, #212]	; 0xd4
	hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003306:	f8c4 70d8 	str.w	r7, [r4, #216]	; 0xd8
	hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800330a:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
	hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800330e:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
	hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003312:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
	hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003316:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
	hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 800331a:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
	hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 800331e:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
	hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003322:	f8c4 10f4 	str.w	r1, [r4, #244]	; 0xf4
	hdma_usart6_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003326:	f8c4 20f8 	str.w	r2, [r4, #248]	; 0xf8
	hdma_usart6_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800332a:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
	hdma_usart6_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800332e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
	hdma_usart6_rx.Instance = DMA2_Stream1;
 8003332:	4f25      	ldr	r7, [pc, #148]	; (80033c8 <DMA_init+0x164>)
 8003334:	6127      	str	r7, [r4, #16]
	hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003336:	6166      	str	r6, [r4, #20]
	hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003338:	61a3      	str	r3, [r4, #24]
	hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800333a:	61e3      	str	r3, [r4, #28]
	hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800333c:	6220      	str	r0, [r4, #32]
	hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800333e:	6263      	str	r3, [r4, #36]	; 0x24
	hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003340:	62a3      	str	r3, [r4, #40]	; 0x28
	hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8003342:	62e3      	str	r3, [r4, #44]	; 0x2c
	hdma_usart6_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003344:	6325      	str	r5, [r4, #48]	; 0x30
	hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003346:	6361      	str	r1, [r4, #52]	; 0x34
	hdma_usart6_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003348:	63a2      	str	r2, [r4, #56]	; 0x38
	hdma_usart6_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 800334a:	63e3      	str	r3, [r4, #60]	; 0x3c
	hdma_usart6_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800334c:	6423      	str	r3, [r4, #64]	; 0x40
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);    // UART RX
 800334e:	2039      	movs	r0, #57	; 0x39
 8003350:	f000 fe24 	bl	8003f9c <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);    // USB RX
 8003354:	2044      	movs	r0, #68	; 0x44
 8003356:	f000 fe21 	bl	8003f9c <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);    // UART TX
 800335a:	2045      	movs	r0, #69	; 0x45
 800335c:	f000 fe1e 	bl	8003f9c <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);    // USB TX
 8003360:	2046      	movs	r0, #70	; 0x46
 8003362:	f000 fe1b 	bl	8003f9c <HAL_NVIC_EnableIRQ>
	HAL_DMA_Init(&hdma_usart1_rx);
 8003366:	f104 0770 	add.w	r7, r4, #112	; 0x70
 800336a:	4638      	mov	r0, r7
 800336c:	f000 fea2 	bl	80040b4 <HAL_DMA_Init>
	HAL_DMA_Init(&hdma_usart1_tx);
 8003370:	f504 7898 	add.w	r8, r4, #304	; 0x130
 8003374:	4640      	mov	r0, r8
 8003376:	f000 fe9d 	bl	80040b4 <HAL_DMA_Init>
	HAL_DMA_Init(&hdma_usart6_rx);
 800337a:	f104 0510 	add.w	r5, r4, #16
 800337e:	4628      	mov	r0, r5
 8003380:	f000 fe98 	bl	80040b4 <HAL_DMA_Init>
	HAL_DMA_Init(&hdma_usart6_tx);
 8003384:	f104 06d0 	add.w	r6, r4, #208	; 0xd0
 8003388:	4630      	mov	r0, r6
 800338a:	f000 fe93 	bl	80040b4 <HAL_DMA_Init>
	__HAL_LINKDMA(&USB_UART, hdmatx, hdma_usart1_tx);
 800338e:	4b0f      	ldr	r3, [pc, #60]	; (80033cc <DMA_init+0x168>)
 8003390:	f8c3 8070 	str.w	r8, [r3, #112]	; 0x70
 8003394:	f8c4 3168 	str.w	r3, [r4, #360]	; 0x168
	__HAL_LINKDMA(&USB_UART, hdmarx, hdma_usart1_rx);
 8003398:	675f      	str	r7, [r3, #116]	; 0x74
 800339a:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	__HAL_LINKDMA(&DISCO_UART, hdmatx, hdma_usart6_tx);
 800339e:	f8c4 62b0 	str.w	r6, [r4, #688]	; 0x2b0
 80033a2:	f504 7310 	add.w	r3, r4, #576	; 0x240
 80033a6:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
	__HAL_LINKDMA(&DISCO_UART, hdmarx, hdma_usart6_rx);
 80033aa:	f8c4 52b4 	str.w	r5, [r4, #692]	; 0x2b4
 80033ae:	64a3      	str	r3, [r4, #72]	; 0x48
}
 80033b0:	b002      	add	sp, #8
 80033b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033b6:	bf00      	nop
 80033b8:	40023800 	.word	0x40023800
 80033bc:	20004dc8 	.word	0x20004dc8
 80033c0:	400264b8 	.word	0x400264b8
 80033c4:	40026488 	.word	0x40026488
 80033c8:	40026428 	.word	0x40026428
 80033cc:	20005138 	.word	0x20005138

080033d0 <UART_init>:
void UART_init() {
 80033d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033d4:	b08a      	sub	sp, #40	; 0x28
	USB_UART_ptr->Instance = USART1;
 80033d6:	4843      	ldr	r0, [pc, #268]	; (80034e4 <UART_init+0x114>)
 80033d8:	4b43      	ldr	r3, [pc, #268]	; (80034e8 <UART_init+0x118>)
 80033da:	6003      	str	r3, [r0, #0]
	USB_UART_ptr->Init.BaudRate = 115200;
 80033dc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80033e0:	6043      	str	r3, [r0, #4]
	USB_UART_ptr->Init.WordLength = UART_WORDLENGTH_8B;
 80033e2:	2400      	movs	r4, #0
 80033e4:	6084      	str	r4, [r0, #8]
	USB_UART_ptr->Init.StopBits = UART_STOPBITS_1;
 80033e6:	60c4      	str	r4, [r0, #12]
	USB_UART_ptr->Init.Parity = UART_PARITY_NONE;
 80033e8:	6104      	str	r4, [r0, #16]
	USB_UART_ptr->Init.Mode = UART_MODE_TX_RX;
 80033ea:	250c      	movs	r5, #12
 80033ec:	6145      	str	r5, [r0, #20]
	USB_UART_ptr->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033ee:	6184      	str	r4, [r0, #24]
	HAL_UART_Init(&USB_UART);
 80033f0:	f004 fb0e 	bl	8007a10 <HAL_UART_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80033f4:	4622      	mov	r2, r4
 80033f6:	2105      	movs	r1, #5
 80033f8:	2025      	movs	r0, #37	; 0x25
 80033fa:	f000 fd99 	bl	8003f30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80033fe:	2025      	movs	r0, #37	; 0x25
 8003400:	f000 fdcc 	bl	8003f9c <HAL_NVIC_EnableIRQ>
	DISCO_UART_ptr->Instance = USART6;
 8003404:	4839      	ldr	r0, [pc, #228]	; (80034ec <UART_init+0x11c>)
 8003406:	4b3a      	ldr	r3, [pc, #232]	; (80034f0 <UART_init+0x120>)
 8003408:	f8c0 3240 	str.w	r3, [r0, #576]	; 0x240
	DISCO_UART_ptr->Init.BaudRate = 38400;
 800340c:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8003410:	f8c0 3244 	str.w	r3, [r0, #580]	; 0x244
	DISCO_UART_ptr->Init.WordLength = UART_WORDLENGTH_8B;
 8003414:	f8c0 4248 	str.w	r4, [r0, #584]	; 0x248
	DISCO_UART_ptr->Init.StopBits = UART_STOPBITS_1;
 8003418:	f8c0 424c 	str.w	r4, [r0, #588]	; 0x24c
	DISCO_UART_ptr->Init.Parity = UART_PARITY_NONE;
 800341c:	f8c0 4250 	str.w	r4, [r0, #592]	; 0x250
	DISCO_UART_ptr->Init.Mode = UART_MODE_TX_RX;
 8003420:	f8c0 5254 	str.w	r5, [r0, #596]	; 0x254
	DISCO_UART_ptr->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003424:	f8c0 4258 	str.w	r4, [r0, #600]	; 0x258
	HAL_UART_Init(&DISCO_UART);
 8003428:	f500 7010 	add.w	r0, r0, #576	; 0x240
 800342c:	f004 faf0 	bl	8007a10 <HAL_UART_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 1);
 8003430:	2201      	movs	r2, #1
 8003432:	2105      	movs	r1, #5
 8003434:	2047      	movs	r0, #71	; 0x47
 8003436:	f000 fd7b 	bl	8003f30 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART6_IRQn);
 800343a:	2047      	movs	r0, #71	; 0x47
 800343c:	f000 fdae 	bl	8003f9c <HAL_NVIC_EnableIRQ>
	__GPIOA_CLK_ENABLE();
 8003440:	4c2c      	ldr	r4, [pc, #176]	; (80034f4 <UART_init+0x124>)
 8003442:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003444:	f043 0301 	orr.w	r3, r3, #1
 8003448:	6323      	str	r3, [r4, #48]	; 0x30
 800344a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	9301      	str	r3, [sp, #4]
 8003452:	9b01      	ldr	r3, [sp, #4]
	GPIO_InitStruct.Pin       = GPIO_PIN_9;
 8003454:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003458:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800345a:	2702      	movs	r7, #2
 800345c:	9706      	str	r7, [sp, #24]
	GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800345e:	2601      	movs	r6, #1
 8003460:	9607      	str	r6, [sp, #28]
	GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8003462:	2503      	movs	r5, #3
 8003464:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003466:	2307      	movs	r3, #7
 8003468:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //TX Config
 800346a:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80034fc <UART_init+0x12c>
 800346e:	a905      	add	r1, sp, #20
 8003470:	4640      	mov	r0, r8
 8003472:	f001 fcfd 	bl	8004e70 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003476:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800347a:	9305      	str	r3, [sp, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config
 800347c:	a905      	add	r1, sp, #20
 800347e:	4640      	mov	r0, r8
 8003480:	f001 fcf6 	bl	8004e70 <HAL_GPIO_Init>
	__USART1_CLK_ENABLE();
 8003484:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003486:	f043 0310 	orr.w	r3, r3, #16
 800348a:	6463      	str	r3, [r4, #68]	; 0x44
 800348c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800348e:	f003 0310 	and.w	r3, r3, #16
 8003492:	9302      	str	r3, [sp, #8]
 8003494:	9b02      	ldr	r3, [sp, #8]
	__GPIOC_CLK_ENABLE();
 8003496:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003498:	f043 0304 	orr.w	r3, r3, #4
 800349c:	6323      	str	r3, [r4, #48]	; 0x30
 800349e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80034a0:	f003 0304 	and.w	r3, r3, #4
 80034a4:	9303      	str	r3, [sp, #12]
 80034a6:	9b03      	ldr	r3, [sp, #12]
	GPIO_InitStruct.Pin       = GPIO_PIN_6;
 80034a8:	2340      	movs	r3, #64	; 0x40
 80034aa:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80034ac:	9706      	str	r7, [sp, #24]
	GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80034ae:	9607      	str	r6, [sp, #28]
	GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 80034b0:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80034b2:	2308      	movs	r3, #8
 80034b4:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //TX Config
 80034b6:	4d10      	ldr	r5, [pc, #64]	; (80034f8 <UART_init+0x128>)
 80034b8:	a905      	add	r1, sp, #20
 80034ba:	4628      	mov	r0, r5
 80034bc:	f001 fcd8 	bl	8004e70 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 80034c0:	2380      	movs	r3, #128	; 0x80
 80034c2:	9305      	str	r3, [sp, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //RX Config
 80034c4:	a905      	add	r1, sp, #20
 80034c6:	4628      	mov	r0, r5
 80034c8:	f001 fcd2 	bl	8004e70 <HAL_GPIO_Init>
	__USART6_CLK_ENABLE();
 80034cc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80034ce:	f043 0320 	orr.w	r3, r3, #32
 80034d2:	6463      	str	r3, [r4, #68]	; 0x44
 80034d4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80034d6:	f003 0320 	and.w	r3, r3, #32
 80034da:	9304      	str	r3, [sp, #16]
 80034dc:	9b04      	ldr	r3, [sp, #16]
}
 80034de:	b00a      	add	sp, #40	; 0x28
 80034e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034e4:	20005138 	.word	0x20005138
 80034e8:	40011000 	.word	0x40011000
 80034ec:	20004dc8 	.word	0x20004dc8
 80034f0:	40011400 	.word	0x40011400
 80034f4:	40023800 	.word	0x40023800
 80034f8:	40020800 	.word	0x40020800
 80034fc:	40020000 	.word	0x40020000

08003500 <UART_Thread>:
void UART_Thread(void *argument) {
 8003500:	b508      	push	{r3, lr}
	DMA_init();
 8003502:	f7ff feaf 	bl	8003264 <DMA_init>
	UART_init();
 8003506:	f7ff ff63 	bl	80033d0 <UART_init>
	while (1) {
 800350a:	e7fe      	b.n	800350a <UART_Thread+0xa>

0800350c <HAL_Delay>:
	}
}


void HAL_Delay( uint32_t ulDelayMs )
{
 800350c:	b508      	push	{r3, lr}
    vTaskDelay(ulDelayMs);
 800350e:	f7fe ff31 	bl	8002374 <vTaskDelay>
}
 8003512:	bd08      	pop	{r3, pc}

08003514 <SystemClock_Config>:
  *            Main regulator output voltage  = Scale1 mode
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
void SystemClock_Config(void) {
 8003514:	b500      	push	{lr}
 8003516:	b093      	sub	sp, #76	; 0x4c
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003518:	2301      	movs	r3, #1
 800351a:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800351c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003520:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003522:	2302      	movs	r3, #2
 8003524:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003526:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800352a:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.PLL.PLLM = 25;
 800352c:	2219      	movs	r2, #25
 800352e:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 432;
 8003530:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8003534:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003536:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8003538:	2309      	movs	r3, #9
 800353a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = 7;
 800353c:	2307      	movs	r3, #7
 800353e:	930c      	str	r3, [sp, #48]	; 0x30

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8003540:	4668      	mov	r0, sp
 8003542:	f002 fbad 	bl	8005ca0 <HAL_RCC_OscConfig>
  if(ret != HAL_OK) {
 8003546:	b100      	cbz	r0, 800354a <SystemClock_Config+0x36>
    while(1) { ; }
 8003548:	e7fe      	b.n	8003548 <SystemClock_Config+0x34>
  }

  /* Activate the OverDrive to reach the 216 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
 800354a:	f002 fb6b 	bl	8005c24 <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK) {
 800354e:	b100      	cbz	r0, 8003552 <SystemClock_Config+0x3e>
    while(1) { ; }
 8003550:	e7fe      	b.n	8003550 <SystemClock_Config+0x3c>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8003552:	230f      	movs	r3, #15
 8003554:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003556:	2302      	movs	r3, #2
 8003558:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800355a:	2300      	movs	r3, #0
 800355c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800355e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003562:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003564:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003568:	9311      	str	r3, [sp, #68]	; 0x44

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 800356a:	2107      	movs	r1, #7
 800356c:	a80d      	add	r0, sp, #52	; 0x34
 800356e:	f002 fe0d 	bl	800618c <HAL_RCC_ClockConfig>
  if(ret != HAL_OK) {
 8003572:	b100      	cbz	r0, 8003576 <SystemClock_Config+0x62>
    while(1) { ; }
 8003574:	e7fe      	b.n	8003574 <SystemClock_Config+0x60>
  }
}
 8003576:	b013      	add	sp, #76	; 0x4c
 8003578:	f85d fb04 	ldr.w	pc, [sp], #4

0800357c <CPU_CACHE_Enable>:

// Enables CPU Instruction and Data Caches
void CPU_CACHE_Enable(void) {
 800357c:	b410      	push	{r4}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800357e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003582:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8003586:	4b1c      	ldr	r3, [pc, #112]	; (80035f8 <CPU_CACHE_Enable+0x7c>)
 8003588:	2100      	movs	r1, #0
 800358a:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800358e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003592:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8003596:	695a      	ldr	r2, [r3, #20]
 8003598:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800359c:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800359e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80035a2:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80035a6:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80035aa:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80035ae:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80035b2:	f3c4 304e 	ubfx	r0, r4, #13, #15
 80035b6:	e000      	b.n	80035ba <CPU_CACHE_Enable+0x3e>
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
    } while(sets-- != 0U);
 80035b8:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80035ba:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80035be:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80035c2:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 80035c6:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 80035ca:	490b      	ldr	r1, [pc, #44]	; (80035f8 <CPU_CACHE_Enable+0x7c>)
 80035cc:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 80035d0:	4613      	mov	r3, r2
 80035d2:	3a01      	subs	r2, #1
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1f2      	bne.n	80035be <CPU_CACHE_Enable+0x42>
    } while(sets-- != 0U);
 80035d8:	1e43      	subs	r3, r0, #1
 80035da:	2800      	cmp	r0, #0
 80035dc:	d1ec      	bne.n	80035b8 <CPU_CACHE_Enable+0x3c>
 80035de:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80035e2:	694b      	ldr	r3, [r1, #20]
 80035e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e8:	614b      	str	r3, [r1, #20]
 80035ea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80035ee:	f3bf 8f6f 	isb	sy
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 80035f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035f6:	4770      	bx	lr
 80035f8:	e000ed00 	.word	0xe000ed00

080035fc <Clock_Inits>:
	initUart(&USB_UART, 115200, USART1);
	setbuf(stdout, NULL);
}

// Initializes clocks for various peripherals. Some might need to be added!
void Clock_Inits(void) {
 80035fc:	b0a2      	sub	sp, #136	; 0x88
	// Clock all GPIO ports and Timers.
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80035fe:	4b9a      	ldr	r3, [pc, #616]	; (8003868 <Clock_Inits+0x26c>)
 8003600:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003602:	f042 0201 	orr.w	r2, r2, #1
 8003606:	631a      	str	r2, [r3, #48]	; 0x30
 8003608:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800360a:	f002 0201 	and.w	r2, r2, #1
 800360e:	9200      	str	r2, [sp, #0]
 8003610:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003612:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003614:	f042 0202 	orr.w	r2, r2, #2
 8003618:	631a      	str	r2, [r3, #48]	; 0x30
 800361a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800361c:	f002 0202 	and.w	r2, r2, #2
 8003620:	9201      	str	r2, [sp, #4]
 8003622:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003624:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003626:	f042 0204 	orr.w	r2, r2, #4
 800362a:	631a      	str	r2, [r3, #48]	; 0x30
 800362c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800362e:	f002 0204 	and.w	r2, r2, #4
 8003632:	9202      	str	r2, [sp, #8]
 8003634:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8003636:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003638:	f042 0208 	orr.w	r2, r2, #8
 800363c:	631a      	str	r2, [r3, #48]	; 0x30
 800363e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003640:	f002 0208 	and.w	r2, r2, #8
 8003644:	9203      	str	r2, [sp, #12]
 8003646:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8003648:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800364a:	f042 0210 	orr.w	r2, r2, #16
 800364e:	631a      	str	r2, [r3, #48]	; 0x30
 8003650:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003652:	f002 0210 	and.w	r2, r2, #16
 8003656:	9204      	str	r2, [sp, #16]
 8003658:	9a04      	ldr	r2, [sp, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800365a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800365c:	f042 0220 	orr.w	r2, r2, #32
 8003660:	631a      	str	r2, [r3, #48]	; 0x30
 8003662:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003664:	f002 0220 	and.w	r2, r2, #32
 8003668:	9205      	str	r2, [sp, #20]
 800366a:	9a05      	ldr	r2, [sp, #20]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800366c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800366e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003672:	631a      	str	r2, [r3, #48]	; 0x30
 8003674:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003676:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800367a:	9206      	str	r2, [sp, #24]
 800367c:	9a06      	ldr	r2, [sp, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800367e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003680:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003684:	631a      	str	r2, [r3, #48]	; 0x30
 8003686:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003688:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800368c:	9207      	str	r2, [sp, #28]
 800368e:	9a07      	ldr	r2, [sp, #28]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 8003690:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003692:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003696:	631a      	str	r2, [r3, #48]	; 0x30
 8003698:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800369a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800369e:	9208      	str	r2, [sp, #32]
 80036a0:	9a08      	ldr	r2, [sp, #32]
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 80036a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036a8:	631a      	str	r2, [r3, #48]	; 0x30
 80036aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036ac:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80036b0:	9209      	str	r2, [sp, #36]	; 0x24
 80036b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
	__HAL_RCC_GPIOK_CLK_ENABLE();
 80036b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036ba:	631a      	str	r2, [r3, #48]	; 0x30
 80036bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036be:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80036c2:	920a      	str	r2, [sp, #40]	; 0x28
 80036c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 80036c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036cc:	645a      	str	r2, [r3, #68]	; 0x44
 80036ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036d0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80036d4:	920b      	str	r2, [sp, #44]	; 0x2c
 80036d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	__HAL_RCC_TIM1_CLK_ENABLE();
 80036d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036da:	f042 0201 	orr.w	r2, r2, #1
 80036de:	645a      	str	r2, [r3, #68]	; 0x44
 80036e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036e2:	f002 0201 	and.w	r2, r2, #1
 80036e6:	920c      	str	r2, [sp, #48]	; 0x30
 80036e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	__HAL_RCC_TIM2_CLK_ENABLE();
 80036ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036ec:	f042 0201 	orr.w	r2, r2, #1
 80036f0:	641a      	str	r2, [r3, #64]	; 0x40
 80036f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036f4:	f002 0201 	and.w	r2, r2, #1
 80036f8:	920d      	str	r2, [sp, #52]	; 0x34
 80036fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	__HAL_RCC_TIM3_CLK_ENABLE();
 80036fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036fe:	f042 0202 	orr.w	r2, r2, #2
 8003702:	641a      	str	r2, [r3, #64]	; 0x40
 8003704:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003706:	f002 0202 	and.w	r2, r2, #2
 800370a:	920e      	str	r2, [sp, #56]	; 0x38
 800370c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	__HAL_RCC_TIM4_CLK_ENABLE();
 800370e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003710:	f042 0204 	orr.w	r2, r2, #4
 8003714:	641a      	str	r2, [r3, #64]	; 0x40
 8003716:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003718:	f002 0204 	and.w	r2, r2, #4
 800371c:	920f      	str	r2, [sp, #60]	; 0x3c
 800371e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
	__HAL_RCC_TIM5_CLK_ENABLE();
 8003720:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003722:	f042 0208 	orr.w	r2, r2, #8
 8003726:	641a      	str	r2, [r3, #64]	; 0x40
 8003728:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800372a:	f002 0208 	and.w	r2, r2, #8
 800372e:	9210      	str	r2, [sp, #64]	; 0x40
 8003730:	9a10      	ldr	r2, [sp, #64]	; 0x40
	__HAL_RCC_TIM6_CLK_ENABLE();
 8003732:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003734:	f042 0210 	orr.w	r2, r2, #16
 8003738:	641a      	str	r2, [r3, #64]	; 0x40
 800373a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800373c:	f002 0210 	and.w	r2, r2, #16
 8003740:	9211      	str	r2, [sp, #68]	; 0x44
 8003742:	9a11      	ldr	r2, [sp, #68]	; 0x44
	__HAL_RCC_TIM7_CLK_ENABLE();
 8003744:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003746:	f042 0220 	orr.w	r2, r2, #32
 800374a:	641a      	str	r2, [r3, #64]	; 0x40
 800374c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800374e:	f002 0220 	and.w	r2, r2, #32
 8003752:	9212      	str	r2, [sp, #72]	; 0x48
 8003754:	9a12      	ldr	r2, [sp, #72]	; 0x48
	__HAL_RCC_TIM8_CLK_ENABLE();
 8003756:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003758:	f042 0202 	orr.w	r2, r2, #2
 800375c:	645a      	str	r2, [r3, #68]	; 0x44
 800375e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003760:	f002 0202 	and.w	r2, r2, #2
 8003764:	9213      	str	r2, [sp, #76]	; 0x4c
 8003766:	9a13      	ldr	r2, [sp, #76]	; 0x4c
	__HAL_RCC_TIM9_CLK_ENABLE();
 8003768:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800376a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800376e:	645a      	str	r2, [r3, #68]	; 0x44
 8003770:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003772:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8003776:	9214      	str	r2, [sp, #80]	; 0x50
 8003778:	9a14      	ldr	r2, [sp, #80]	; 0x50
	__HAL_RCC_TIM10_CLK_ENABLE();
 800377a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800377c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003780:	645a      	str	r2, [r3, #68]	; 0x44
 8003782:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003784:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003788:	9215      	str	r2, [sp, #84]	; 0x54
 800378a:	9a15      	ldr	r2, [sp, #84]	; 0x54
	__HAL_RCC_TIM11_CLK_ENABLE();
 800378c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800378e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003792:	645a      	str	r2, [r3, #68]	; 0x44
 8003794:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003796:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800379a:	9216      	str	r2, [sp, #88]	; 0x58
 800379c:	9a16      	ldr	r2, [sp, #88]	; 0x58
	__HAL_RCC_TIM12_CLK_ENABLE();
 800379e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037a4:	641a      	str	r2, [r3, #64]	; 0x40
 80037a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037a8:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80037ac:	9217      	str	r2, [sp, #92]	; 0x5c
 80037ae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
	__HAL_RCC_TIM13_CLK_ENABLE();
 80037b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037b6:	641a      	str	r2, [r3, #64]	; 0x40
 80037b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037ba:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80037be:	9218      	str	r2, [sp, #96]	; 0x60
 80037c0:	9a18      	ldr	r2, [sp, #96]	; 0x60
	__HAL_RCC_TIM14_CLK_ENABLE();
 80037c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037c8:	641a      	str	r2, [r3, #64]	; 0x40
 80037ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037cc:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80037d0:	9219      	str	r2, [sp, #100]	; 0x64
 80037d2:	9a19      	ldr	r2, [sp, #100]	; 0x64

	// Enable SPI2 clock
	__HAL_RCC_SPI2_CLK_ENABLE();
 80037d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037da:	641a      	str	r2, [r3, #64]	; 0x40
 80037dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037de:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80037e2:	921a      	str	r2, [sp, #104]	; 0x68
 80037e4:	9a1a      	ldr	r2, [sp, #104]	; 0x68

	// ADC and DAC
	__HAL_RCC_DAC_CLK_ENABLE();
 80037e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037e8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80037ec:	641a      	str	r2, [r3, #64]	; 0x40
 80037ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037f0:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 80037f4:	921b      	str	r2, [sp, #108]	; 0x6c
 80037f6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
	__HAL_RCC_ADC1_CLK_ENABLE();
 80037f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037fe:	645a      	str	r2, [r3, #68]	; 0x44
 8003800:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003802:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8003806:	921c      	str	r2, [sp, #112]	; 0x70
 8003808:	9a1c      	ldr	r2, [sp, #112]	; 0x70
	__HAL_RCC_ADC2_CLK_ENABLE();
 800380a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800380c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003810:	645a      	str	r2, [r3, #68]	; 0x44
 8003812:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003814:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003818:	921d      	str	r2, [sp, #116]	; 0x74
 800381a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
	__HAL_RCC_ADC3_CLK_ENABLE();
 800381c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800381e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003822:	645a      	str	r2, [r3, #68]	; 0x44
 8003824:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003826:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800382a:	921e      	str	r2, [sp, #120]	; 0x78
 800382c:	9a1e      	ldr	r2, [sp, #120]	; 0x78

	// DMA Clocks
	__HAL_RCC_DMA1_CLK_ENABLE();
 800382e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003830:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003834:	631a      	str	r2, [r3, #48]	; 0x30
 8003836:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003838:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800383c:	921f      	str	r2, [sp, #124]	; 0x7c
 800383e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
	__HAL_RCC_DMA2_CLK_ENABLE();
 8003840:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003842:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003846:	631a      	str	r2, [r3, #48]	; 0x30
 8003848:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800384a:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800384e:	9220      	str	r2, [sp, #128]	; 0x80
 8003850:	9a20      	ldr	r2, [sp, #128]	; 0x80

	// I2C Clock
	__HAL_RCC_I2C1_CLK_ENABLE();
 8003852:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003854:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003858:	641a      	str	r2, [r3, #64]	; 0x40
 800385a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003860:	9321      	str	r3, [sp, #132]	; 0x84
 8003862:	9b21      	ldr	r3, [sp, #132]	; 0x84

}
 8003864:	b022      	add	sp, #136	; 0x88
 8003866:	4770      	bx	lr
 8003868:	40023800 	.word	0x40023800

0800386c <Sys_Init>:
void Sys_Init(void) {
 800386c:	b508      	push	{r3, lr}
	CPU_CACHE_Enable();		// Enable CPU Caching
 800386e:	f7ff fe85 	bl	800357c <CPU_CACHE_Enable>
	HAL_Init();				// Initialize HAL
 8003872:	f000 fb2f 	bl	8003ed4 <HAL_Init>
	SystemClock_Config(); 	// Configure the system clock to 216 MHz
 8003876:	f7ff fe4d 	bl	8003514 <SystemClock_Config>
	Clock_Inits();
 800387a:	f7ff febf 	bl	80035fc <Clock_Inits>
	initUart(&USB_UART, 115200, USART1);
 800387e:	4a06      	ldr	r2, [pc, #24]	; (8003898 <Sys_Init+0x2c>)
 8003880:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8003884:	4805      	ldr	r0, [pc, #20]	; (800389c <Sys_Init+0x30>)
 8003886:	f000 fac5 	bl	8003e14 <initUart>
	setbuf(stdout, NULL);
 800388a:	4b05      	ldr	r3, [pc, #20]	; (80038a0 <Sys_Init+0x34>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2100      	movs	r1, #0
 8003890:	6898      	ldr	r0, [r3, #8]
 8003892:	f004 fa73 	bl	8007d7c <setbuf>
}
 8003896:	bd08      	pop	{r3, pc}
 8003898:	40011000 	.word	0x40011000
 800389c:	20005138 	.word	0x20005138
 80038a0:	2000010c 	.word	0x2000010c

080038a4 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 80038a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038a8:	b086      	sub	sp, #24
 80038aa:	4605      	mov	r5, r0
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80038ac:	2364      	movs	r3, #100	; 0x64
 80038ae:	9302      	str	r3, [sp, #8]
 80038b0:	2301      	movs	r3, #1
 80038b2:	9301      	str	r3, [sp, #4]
 80038b4:	f10d 0217 	add.w	r2, sp, #23
 80038b8:	9200      	str	r2, [sp, #0]
 80038ba:	2275      	movs	r2, #117	; 0x75
 80038bc:	21d0      	movs	r1, #208	; 0xd0
 80038be:	f001 fec9 	bl	8005654 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 80038c2:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80038c6:	2b68      	cmp	r3, #104	; 0x68
 80038c8:	d003      	beq.n	80038d2 <MPU6050_Init+0x2e>
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
        return 0;
    }
    return 1;
 80038ca:	2001      	movs	r0, #1
}
 80038cc:	b006      	add	sp, #24
 80038ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        Data = 0;
 80038d2:	2400      	movs	r4, #0
 80038d4:	f88d 4016 	strb.w	r4, [sp, #22]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80038d8:	f04f 0864 	mov.w	r8, #100	; 0x64
 80038dc:	f8cd 8008 	str.w	r8, [sp, #8]
 80038e0:	2601      	movs	r6, #1
 80038e2:	9601      	str	r6, [sp, #4]
 80038e4:	f10d 0716 	add.w	r7, sp, #22
 80038e8:	9700      	str	r7, [sp, #0]
 80038ea:	4633      	mov	r3, r6
 80038ec:	226b      	movs	r2, #107	; 0x6b
 80038ee:	21d0      	movs	r1, #208	; 0xd0
 80038f0:	4628      	mov	r0, r5
 80038f2:	f001 fdd9 	bl	80054a8 <HAL_I2C_Mem_Write>
        Data = 0x07;
 80038f6:	2307      	movs	r3, #7
 80038f8:	f88d 3016 	strb.w	r3, [sp, #22]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 80038fc:	f8cd 8008 	str.w	r8, [sp, #8]
 8003900:	9601      	str	r6, [sp, #4]
 8003902:	9700      	str	r7, [sp, #0]
 8003904:	4633      	mov	r3, r6
 8003906:	2219      	movs	r2, #25
 8003908:	21d0      	movs	r1, #208	; 0xd0
 800390a:	4628      	mov	r0, r5
 800390c:	f001 fdcc 	bl	80054a8 <HAL_I2C_Mem_Write>
        Data = 0x00;
 8003910:	f88d 4016 	strb.w	r4, [sp, #22]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8003914:	f8cd 8008 	str.w	r8, [sp, #8]
 8003918:	9601      	str	r6, [sp, #4]
 800391a:	9700      	str	r7, [sp, #0]
 800391c:	4633      	mov	r3, r6
 800391e:	221c      	movs	r2, #28
 8003920:	21d0      	movs	r1, #208	; 0xd0
 8003922:	4628      	mov	r0, r5
 8003924:	f001 fdc0 	bl	80054a8 <HAL_I2C_Mem_Write>
        Data = 0x00;
 8003928:	f88d 4016 	strb.w	r4, [sp, #22]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800392c:	f8cd 8008 	str.w	r8, [sp, #8]
 8003930:	9601      	str	r6, [sp, #4]
 8003932:	9700      	str	r7, [sp, #0]
 8003934:	4633      	mov	r3, r6
 8003936:	221b      	movs	r2, #27
 8003938:	21d0      	movs	r1, #208	; 0xd0
 800393a:	4628      	mov	r0, r5
 800393c:	f001 fdb4 	bl	80054a8 <HAL_I2C_Mem_Write>
        return 0;
 8003940:	4620      	mov	r0, r4
 8003942:	e7c3      	b.n	80038cc <MPU6050_Init+0x28>

08003944 <Kalman_getAngle>:
        DataStruct->Gx = -DataStruct->Gx;
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
}

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8003944:	ed2d 8b04 	vpush	{d8-d9}
 8003948:	b084      	sub	sp, #16
    double rate = newRate - Kalman->bias;
 800394a:	ed90 8b08 	vldr	d8, [r0, #32]
 800394e:	ee31 1b48 	vsub.f64	d1, d1, d8
    Kalman->angle += dt * rate;
 8003952:	ed90 6b06 	vldr	d6, [r0, #24]
 8003956:	ee01 6b02 	vmla.f64	d6, d1, d2
 800395a:	ed80 6b06 	vstr	d6, [r0, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800395e:	ed90 4b10 	vldr	d4, [r0, #64]	; 0x40
 8003962:	ee24 7b02 	vmul.f64	d7, d4, d2
 8003966:	ed90 3b0c 	vldr	d3, [r0, #48]	; 0x30
 800396a:	ee37 9b43 	vsub.f64	d9, d7, d3
 800396e:	ed90 1b0e 	vldr	d1, [r0, #56]	; 0x38
 8003972:	ee39 9b41 	vsub.f64	d9, d9, d1
 8003976:	ed90 5b00 	vldr	d5, [r0]
 800397a:	ee39 9b05 	vadd.f64	d9, d9, d5
 800397e:	ed90 5b0a 	vldr	d5, [r0, #40]	; 0x28
 8003982:	ee09 5b02 	vmla.f64	d5, d9, d2
 8003986:	ed80 5b0a 	vstr	d5, [r0, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 800398a:	ee33 3b47 	vsub.f64	d3, d3, d7
 800398e:	ed80 3b0c 	vstr	d3, [r0, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8003992:	ee31 7b47 	vsub.f64	d7, d1, d7
 8003996:	ed80 7b0e 	vstr	d7, [r0, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800399a:	ed90 1b02 	vldr	d1, [r0, #8]
 800399e:	ee01 4b02 	vmla.f64	d4, d1, d2
 80039a2:	ed80 4b10 	vstr	d4, [r0, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 80039a6:	ed90 2b04 	vldr	d2, [r0, #16]
 80039aa:	ee35 2b02 	vadd.f64	d2, d5, d2
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 80039ae:	ee85 9b02 	vdiv.f64	d9, d5, d2
 80039b2:	ed8d 9b00 	vstr	d9, [sp]
    K[1] = Kalman->P[1][0] / S;
 80039b6:	ee87 1b02 	vdiv.f64	d1, d7, d2
 80039ba:	ed8d 1b02 	vstr	d1, [sp, #8]

    double y = newAngle - Kalman->angle;
 80039be:	ee30 2b46 	vsub.f64	d2, d0, d6
    Kalman->angle += K[0] * y;
 80039c2:	ee09 6b02 	vmla.f64	d6, d9, d2
 80039c6:	eeb0 0b46 	vmov.f64	d0, d6
 80039ca:	ed80 6b06 	vstr	d6, [r0, #24]
    Kalman->bias += K[1] * y;
 80039ce:	ee01 8b02 	vmla.f64	d8, d1, d2
 80039d2:	ed80 8b08 	vstr	d8, [r0, #32]

    double P00_temp = Kalman->P[0][0];
    double P01_temp = Kalman->P[0][1];

    Kalman->P[0][0] -= K[0] * P00_temp;
 80039d6:	eeb0 6b45 	vmov.f64	d6, d5
 80039da:	ee05 6b49 	vmls.f64	d6, d5, d9
 80039de:	ed80 6b0a 	vstr	d6, [r0, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 80039e2:	eeb0 6b43 	vmov.f64	d6, d3
 80039e6:	ee03 6b49 	vmls.f64	d6, d3, d9
 80039ea:	ed80 6b0c 	vstr	d6, [r0, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 80039ee:	ee05 7b41 	vmls.f64	d7, d5, d1
 80039f2:	ed80 7b0e 	vstr	d7, [r0, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 80039f6:	ee03 4b41 	vmls.f64	d4, d3, d1
 80039fa:	ed80 4b10 	vstr	d4, [r0, #64]	; 0x40

    return Kalman->angle;
};
 80039fe:	b004      	add	sp, #16
 8003a00:	ecbd 8b04 	vpop	{d8-d9}
 8003a04:	4770      	bx	lr
	...

08003a08 <MPU6050_Read_All>:
{
 8003a08:	b570      	push	{r4, r5, r6, lr}
 8003a0a:	ed2d 8b04 	vpush	{d8-d9}
 8003a0e:	b088      	sub	sp, #32
 8003a10:	460c      	mov	r4, r1
    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8003a12:	2364      	movs	r3, #100	; 0x64
 8003a14:	9302      	str	r3, [sp, #8]
 8003a16:	230e      	movs	r3, #14
 8003a18:	9301      	str	r3, [sp, #4]
 8003a1a:	ab04      	add	r3, sp, #16
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	2301      	movs	r3, #1
 8003a20:	223b      	movs	r2, #59	; 0x3b
 8003a22:	21d0      	movs	r1, #208	; 0xd0
 8003a24:	f001 fe16 	bl	8005654 <HAL_I2C_Mem_Read>
    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8003a28:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8003a2c:	f89d 2011 	ldrb.w	r2, [sp, #17]
 8003a30:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003a34:	b212      	sxth	r2, r2
 8003a36:	8022      	strh	r2, [r4, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8003a38:	f89d 1012 	ldrb.w	r1, [sp, #18]
 8003a3c:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8003a40:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003a44:	b21b      	sxth	r3, r3
 8003a46:	8063      	strh	r3, [r4, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8003a48:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8003a4c:	f89d 5015 	ldrb.w	r5, [sp, #21]
 8003a50:	ea45 2501 	orr.w	r5, r5, r1, lsl #8
 8003a54:	b22d      	sxth	r5, r5
 8003a56:	80a5      	strh	r5, [r4, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8003a58:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8003a5c:	0209      	lsls	r1, r1, #8
 8003a5e:	b209      	sxth	r1, r1
 8003a60:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8003a64:	4301      	orrs	r1, r0
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8003a66:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8003a6a:	f89d e019 	ldrb.w	lr, [sp, #25]
 8003a6e:	ea4e 2e00 	orr.w	lr, lr, r0, lsl #8
 8003a72:	fa0f fe8e 	sxth.w	lr, lr
 8003a76:	f8a4 e020 	strh.w	lr, [r4, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8003a7a:	f89d 001a 	ldrb.w	r0, [sp, #26]
 8003a7e:	f89d c01b 	ldrb.w	ip, [sp, #27]
 8003a82:	ea4c 2c00 	orr.w	ip, ip, r0, lsl #8
 8003a86:	fa0f fc8c 	sxth.w	ip, ip
 8003a8a:	f8a4 c022 	strh.w	ip, [r4, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8003a8e:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8003a92:	f89d 001d 	ldrb.w	r0, [sp, #29]
 8003a96:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 8003a9a:	b200      	sxth	r0, r0
 8003a9c:	84a0      	strh	r0, [r4, #36]	; 0x24
    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8003a9e:	ee07 2a90 	vmov	s15, r2
 8003aa2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003aa6:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8003c50 <MPU6050_Read_All+0x248>
 8003aaa:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003aae:	ed84 7b02 	vstr	d7, [r4, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8003ab2:	ee07 3a90 	vmov	s15, r3
 8003ab6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003aba:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003abe:	ed84 7b04 	vstr	d7, [r4, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8003ac2:	ee07 5a90 	vmov	s15, r5
 8003ac6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003aca:	ed9f 5b63 	vldr	d5, [pc, #396]	; 8003c58 <MPU6050_Read_All+0x250>
 8003ace:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8003ad2:	ed84 6b06 	vstr	d6, [r4, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8003ad6:	ee07 1a90 	vmov	s15, r1
 8003ada:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ade:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8003c90 <MPU6050_Read_All+0x288>
 8003ae2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003ae6:	eddf 7a6b 	vldr	s15, [pc, #428]	; 8003c94 <MPU6050_Read_All+0x28c>
 8003aea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003aee:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8003af2:	ee07 ea90 	vmov	s15, lr
 8003af6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003afa:	ed9f 6b59 	vldr	d6, [pc, #356]	; 8003c60 <MPU6050_Read_All+0x258>
 8003afe:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8003b02:	ed84 5b0a 	vstr	d5, [r4, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8003b06:	ee07 ca90 	vmov	s15, ip
 8003b0a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003b0e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8003b12:	ed84 5b0c 	vstr	d5, [r4, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8003b16:	ee07 0a90 	vmov	s15, r0
 8003b1a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003b1e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8003b22:	ed84 5b0e 	vstr	d5, [r4, #56]	; 0x38
    double dt = (double)(xTaskGetTickCount() - timer) / 1000;
 8003b26:	f7fe fb17 	bl	8002158 <xTaskGetTickCount>
 8003b2a:	4d5b      	ldr	r5, [pc, #364]	; (8003c98 <MPU6050_Read_All+0x290>)
 8003b2c:	682b      	ldr	r3, [r5, #0]
 8003b2e:	1ac0      	subs	r0, r0, r3
 8003b30:	ee07 0a90 	vmov	s15, r0
 8003b34:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003b38:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 8003c68 <MPU6050_Read_All+0x260>
 8003b3c:	ee87 8b06 	vdiv.f64	d8, d7, d6
    timer = xTaskGetTickCount();
 8003b40:	f7fe fb0a 	bl	8002158 <xTaskGetTickCount>
 8003b44:	6028      	str	r0, [r5, #0]
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8003b46:	f9b4 5000 	ldrsh.w	r5, [r4]
 8003b4a:	f9b4 6004 	ldrsh.w	r6, [r4, #4]
 8003b4e:	fb06 f306 	mul.w	r3, r6, r6
 8003b52:	fb05 3305 	mla	r3, r5, r5, r3
 8003b56:	ee00 3a10 	vmov	s0, r3
    double roll_sqrt = sqrt(
 8003b5a:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 8003b5e:	f005 f83b 	bl	8008bd8 <sqrt>
    if (roll_sqrt != 0.0)
 8003b62:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8003b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b6a:	d061      	beq.n	8003c30 <MPU6050_Read_All+0x228>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8003b6c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8003b70:	ee07 3a10 	vmov	s14, r3
 8003b74:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8003b78:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8003b7c:	f005 f84c 	bl	8008c18 <atan>
 8003b80:	ed9f 9b3b 	vldr	d9, [pc, #236]	; 8003c70 <MPU6050_Read_All+0x268>
 8003b84:	ee20 9b09 	vmul.f64	d9, d0, d9
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8003b88:	426b      	negs	r3, r5
 8003b8a:	ee00 3a10 	vmov	s0, r3
 8003b8e:	ee07 6a90 	vmov	s15, r6
 8003b92:	eeb8 1be7 	vcvt.f64.s32	d1, s15
 8003b96:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 8003b9a:	f005 f819 	bl	8008bd0 <atan2>
 8003b9e:	ed9f 7b34 	vldr	d7, [pc, #208]	; 8003c70 <MPU6050_Read_All+0x268>
 8003ba2:	ee20 0b07 	vmul.f64	d0, d0, d7
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8003ba6:	ed9f 7b34 	vldr	d7, [pc, #208]	; 8003c78 <MPU6050_Read_All+0x270>
 8003baa:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8003bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bb2:	d508      	bpl.n	8003bc6 <MPU6050_Read_All+0x1be>
 8003bb4:	ed94 6b14 	vldr	d6, [r4, #80]	; 0x50
 8003bb8:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8003c80 <MPU6050_Read_All+0x278>
 8003bbc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bc4:	dc0f      	bgt.n	8003be6 <MPU6050_Read_All+0x1de>
 8003bc6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8003c80 <MPU6050_Read_All+0x278>
 8003bca:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8003bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bd2:	dd30      	ble.n	8003c36 <MPU6050_Read_All+0x22e>
 8003bd4:	ed94 6b14 	vldr	d6, [r4, #80]	; 0x50
 8003bd8:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8003c78 <MPU6050_Read_All+0x270>
 8003bdc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003be4:	d527      	bpl.n	8003c36 <MPU6050_Read_All+0x22e>
        KalmanY.angle = pitch;
 8003be6:	4b2d      	ldr	r3, [pc, #180]	; (8003c9c <MPU6050_Read_All+0x294>)
 8003be8:	ed83 0b06 	vstr	d0, [r3, #24]
        DataStruct->KalmanAngleY = pitch;
 8003bec:	ed84 0b14 	vstr	d0, [r4, #80]	; 0x50
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8003bf0:	ed94 7b14 	vldr	d7, [r4, #80]	; 0x50
 8003bf4:	eeb0 7bc7 	vabs.f64	d7, d7
 8003bf8:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8003c80 <MPU6050_Read_All+0x278>
 8003bfc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c04:	dd05      	ble.n	8003c12 <MPU6050_Read_All+0x20a>
        DataStruct->Gx = -DataStruct->Gx;
 8003c06:	ed94 7b0a 	vldr	d7, [r4, #40]	; 0x28
 8003c0a:	eeb1 7b47 	vneg.f64	d7, d7
 8003c0e:	ed84 7b0a 	vstr	d7, [r4, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8003c12:	eeb0 2b48 	vmov.f64	d2, d8
 8003c16:	ed94 1b0a 	vldr	d1, [r4, #40]	; 0x28
 8003c1a:	eeb0 0b49 	vmov.f64	d0, d9
 8003c1e:	4820      	ldr	r0, [pc, #128]	; (8003ca0 <MPU6050_Read_All+0x298>)
 8003c20:	f7ff fe90 	bl	8003944 <Kalman_getAngle>
 8003c24:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
}
 8003c28:	b008      	add	sp, #32
 8003c2a:	ecbd 8b04 	vpop	{d8-d9}
 8003c2e:	bd70      	pop	{r4, r5, r6, pc}
        roll = 0.0;
 8003c30:	ed9f 9b15 	vldr	d9, [pc, #84]	; 8003c88 <MPU6050_Read_All+0x280>
 8003c34:	e7a8      	b.n	8003b88 <MPU6050_Read_All+0x180>
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8003c36:	eeb0 2b48 	vmov.f64	d2, d8
 8003c3a:	ed94 1b0c 	vldr	d1, [r4, #48]	; 0x30
 8003c3e:	4817      	ldr	r0, [pc, #92]	; (8003c9c <MPU6050_Read_All+0x294>)
 8003c40:	f7ff fe80 	bl	8003944 <Kalman_getAngle>
 8003c44:	ed84 0b14 	vstr	d0, [r4, #80]	; 0x50
 8003c48:	e7d2      	b.n	8003bf0 <MPU6050_Read_All+0x1e8>
 8003c4a:	bf00      	nop
 8003c4c:	f3af 8000 	nop.w
 8003c50:	00000000 	.word	0x00000000
 8003c54:	3f100000 	.word	0x3f100000
 8003c58:	00000000 	.word	0x00000000
 8003c5c:	40cc2900 	.word	0x40cc2900
 8003c60:	00000000 	.word	0x00000000
 8003c64:	40606000 	.word	0x40606000
 8003c68:	00000000 	.word	0x00000000
 8003c6c:	408f4000 	.word	0x408f4000
 8003c70:	1a63c1f8 	.word	0x1a63c1f8
 8003c74:	404ca5dc 	.word	0x404ca5dc
 8003c78:	00000000 	.word	0x00000000
 8003c7c:	c0568000 	.word	0xc0568000
 8003c80:	00000000 	.word	0x00000000
 8003c84:	40568000 	.word	0x40568000
	...
 8003c90:	43aa0000 	.word	0x43aa0000
 8003c94:	42121eb8 	.word	0x42121eb8
 8003c98:	200050e8 	.word	0x200050e8
 8003c9c:	20000018 	.word	0x20000018
 8003ca0:	20000060 	.word	0x20000060

08003ca4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ca4:	b500      	push	{lr}
 8003ca6:	b089      	sub	sp, #36	; 0x24
 8003ca8:	4601      	mov	r1, r0
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8003caa:	2200      	movs	r2, #0
 8003cac:	2037      	movs	r0, #55	; 0x37
 8003cae:	f000 f93f 	bl	8003f30 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003cb2:	2037      	movs	r0, #55	; 0x37
 8003cb4:	f000 f972 	bl	8003f9c <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8003cb8:	4b15      	ldr	r3, [pc, #84]	; (8003d10 <HAL_InitTick+0x6c>)
 8003cba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cbc:	f042 0220 	orr.w	r2, r2, #32
 8003cc0:	641a      	str	r2, [r3, #64]	; 0x40
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc4:	f003 0320 	and.w	r3, r3, #32
 8003cc8:	9301      	str	r3, [sp, #4]
 8003cca:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003ccc:	a902      	add	r1, sp, #8
 8003cce:	a803      	add	r0, sp, #12
 8003cd0:	f002 fb38 	bl	8006344 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003cd4:	f002 fb16 	bl	8006304 <HAL_RCC_GetPCLK1Freq>
 8003cd8:	0043      	lsls	r3, r0, #1

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003cda:	4a0e      	ldr	r2, [pc, #56]	; (8003d14 <HAL_InitTick+0x70>)
 8003cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce0:	0c9b      	lsrs	r3, r3, #18
 8003ce2:	3b01      	subs	r3, #1

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8003ce4:	480c      	ldr	r0, [pc, #48]	; (8003d18 <HAL_InitTick+0x74>)
 8003ce6:	4a0d      	ldr	r2, [pc, #52]	; (8003d1c <HAL_InitTick+0x78>)
 8003ce8:	6002      	str	r2, [r0, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8003cea:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003cee:	60c2      	str	r2, [r0, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8003cf0:	6043      	str	r3, [r0, #4]
  htim7.Init.ClockDivision = 0;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	6103      	str	r3, [r0, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cf6:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8003cf8:	f003 f840 	bl	8006d7c <HAL_TIM_Base_Init>
 8003cfc:	b118      	cbz	r0, 8003d06 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
  }

  /* Return function status */
  return HAL_ERROR;
 8003cfe:	2001      	movs	r0, #1
}
 8003d00:	b009      	add	sp, #36	; 0x24
 8003d02:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim7);
 8003d06:	4804      	ldr	r0, [pc, #16]	; (8003d18 <HAL_InitTick+0x74>)
 8003d08:	f002 fe96 	bl	8006a38 <HAL_TIM_Base_Start_IT>
 8003d0c:	e7f8      	b.n	8003d00 <HAL_InitTick+0x5c>
 8003d0e:	bf00      	nop
 8003d10:	40023800 	.word	0x40023800
 8003d14:	431bde83 	.word	0x431bde83
 8003d18:	200050ec 	.word	0x200050ec
 8003d1c:	40001400 	.word	0x40001400

08003d20 <TIM7_IRQHandler>:
  /* Enable TIM7 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim7, TIM_IT_UPDATE);
}

void TIM7_IRQHandler(void)
{
 8003d20:	b508      	push	{r3, lr}
  HAL_TIM_IRQHandler(&htim7);
 8003d22:	4802      	ldr	r0, [pc, #8]	; (8003d2c <TIM7_IRQHandler+0xc>)
 8003d24:	f002 fed5 	bl	8006ad2 <HAL_TIM_IRQHandler>
}
 8003d28:	bd08      	pop	{r3, pc}
 8003d2a:	bf00      	nop
 8003d2c:	200050ec 	.word	0x200050ec

08003d30 <HAL_UART_MspInit>:

UART_HandleTypeDef USB_UART;
// Initialize Hardware Resources
// Peripheral's clock enable
// Peripheral's GPIO Configuration
void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 8003d30:	b530      	push	{r4, r5, lr}
 8003d32:	b08b      	sub	sp, #44	; 0x2c
	GPIO_InitTypeDef  GPIO_InitStruct;

	if (huart->Instance == USART1) {
 8003d34:	6803      	ldr	r3, [r0, #0]
 8003d36:	4a32      	ldr	r2, [pc, #200]	; (8003e00 <HAL_UART_MspInit+0xd0>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d004      	beq.n	8003d46 <HAL_UART_MspInit+0x16>
		
		// Enable Interrupt Mode
		HAL_NVIC_SetPriority(USART1_IRQn, 10, 0);
		HAL_NVIC_EnableIRQ(USART1_IRQn);

	} else if (huart->Instance == USART6) {
 8003d3c:	4a31      	ldr	r2, [pc, #196]	; (8003e04 <HAL_UART_MspInit+0xd4>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d034      	beq.n	8003dac <HAL_UART_MspInit+0x7c>

		// Enable UART Clocking
		__USART6_CLK_ENABLE();

	}
}
 8003d42:	b00b      	add	sp, #44	; 0x2c
 8003d44:	bd30      	pop	{r4, r5, pc}
		__GPIOA_CLK_ENABLE();
 8003d46:	4c30      	ldr	r4, [pc, #192]	; (8003e08 <HAL_UART_MspInit+0xd8>)
 8003d48:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003d4a:	f043 0301 	orr.w	r3, r3, #1
 8003d4e:	6323      	str	r3, [r4, #48]	; 0x30
 8003d50:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	9301      	str	r3, [sp, #4]
 8003d58:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin       = GPIO_PIN_9;
 8003d5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d5e:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8003d60:	2302      	movs	r3, #2
 8003d62:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8003d64:	2301      	movs	r3, #1
 8003d66:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003d6c:	2307      	movs	r3, #7
 8003d6e:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //TX Config
 8003d70:	4d26      	ldr	r5, [pc, #152]	; (8003e0c <HAL_UART_MspInit+0xdc>)
 8003d72:	a905      	add	r1, sp, #20
 8003d74:	4628      	mov	r0, r5
 8003d76:	f001 f87b 	bl	8004e70 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003d7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d7e:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config
 8003d80:	a905      	add	r1, sp, #20
 8003d82:	4628      	mov	r0, r5
 8003d84:	f001 f874 	bl	8004e70 <HAL_GPIO_Init>
		__USART1_CLK_ENABLE();
 8003d88:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003d8a:	f043 0310 	orr.w	r3, r3, #16
 8003d8e:	6463      	str	r3, [r4, #68]	; 0x44
 8003d90:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003d92:	f003 0310 	and.w	r3, r3, #16
 8003d96:	9302      	str	r3, [sp, #8]
 8003d98:	9b02      	ldr	r3, [sp, #8]
		HAL_NVIC_SetPriority(USART1_IRQn, 10, 0);
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	210a      	movs	r1, #10
 8003d9e:	2025      	movs	r0, #37	; 0x25
 8003da0:	f000 f8c6 	bl	8003f30 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003da4:	2025      	movs	r0, #37	; 0x25
 8003da6:	f000 f8f9 	bl	8003f9c <HAL_NVIC_EnableIRQ>
 8003daa:	e7ca      	b.n	8003d42 <HAL_UART_MspInit+0x12>
		__GPIOC_CLK_ENABLE();
 8003dac:	4c16      	ldr	r4, [pc, #88]	; (8003e08 <HAL_UART_MspInit+0xd8>)
 8003dae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003db0:	f043 0304 	orr.w	r3, r3, #4
 8003db4:	6323      	str	r3, [r4, #48]	; 0x30
 8003db6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003db8:	f003 0304 	and.w	r3, r3, #4
 8003dbc:	9303      	str	r3, [sp, #12]
 8003dbe:	9b03      	ldr	r3, [sp, #12]
		GPIO_InitStruct.Pin       = GPIO_PIN_6;
 8003dc0:	2340      	movs	r3, #64	; 0x40
 8003dc2:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003dd0:	2308      	movs	r3, #8
 8003dd2:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //TX Config
 8003dd4:	4d0e      	ldr	r5, [pc, #56]	; (8003e10 <HAL_UART_MspInit+0xe0>)
 8003dd6:	a905      	add	r1, sp, #20
 8003dd8:	4628      	mov	r0, r5
 8003dda:	f001 f849 	bl	8004e70 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003dde:	2380      	movs	r3, #128	; 0x80
 8003de0:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //RX Config
 8003de2:	a905      	add	r1, sp, #20
 8003de4:	4628      	mov	r0, r5
 8003de6:	f001 f843 	bl	8004e70 <HAL_GPIO_Init>
		__USART6_CLK_ENABLE();
 8003dea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003dec:	f043 0320 	orr.w	r3, r3, #32
 8003df0:	6463      	str	r3, [r4, #68]	; 0x44
 8003df2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003df4:	f003 0320 	and.w	r3, r3, #32
 8003df8:	9304      	str	r3, [sp, #16]
 8003dfa:	9b04      	ldr	r3, [sp, #16]
}
 8003dfc:	e7a1      	b.n	8003d42 <HAL_UART_MspInit+0x12>
 8003dfe:	bf00      	nop
 8003e00:	40011000 	.word	0x40011000
 8003e04:	40011400 	.word	0x40011400
 8003e08:	40023800 	.word	0x40023800
 8003e0c:	40020000 	.word	0x40020000
 8003e10:	40020800 	.word	0x40020800

08003e14 <initUart>:

//UART Initialization
void initUart(UART_HandleTypeDef* Uhand, uint32_t Baud, USART_TypeDef* Tgt) {
 8003e14:	b508      	push	{r3, lr}
	Uhand->Instance        = Tgt;
 8003e16:	6002      	str	r2, [r0, #0]

	Uhand->Init.BaudRate   = Baud;
 8003e18:	6041      	str	r1, [r0, #4]
	Uhand->Init.WordLength = UART_WORDLENGTH_8B;
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	6082      	str	r2, [r0, #8]
	Uhand->Init.StopBits   = UART_STOPBITS_1;
 8003e1e:	60c2      	str	r2, [r0, #12]
	Uhand->Init.Parity     = UART_PARITY_NONE;
 8003e20:	6102      	str	r2, [r0, #16]
	Uhand->Init.Mode       = UART_MODE_TX_RX;
 8003e22:	210c      	movs	r1, #12
 8003e24:	6141      	str	r1, [r0, #20]
	Uhand->Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8003e26:	6182      	str	r2, [r0, #24]

	HAL_UART_Init(Uhand);
 8003e28:	f003 fdf2 	bl	8007a10 <HAL_UART_Init>
}
 8003e2c:	bd08      	pop	{r3, pc}
	...

08003e30 <_write>:

============================================================================= */


// Make printf(), putchar(), etc. default to work over USB UART
int _write(int file, char *ptr, int len) {
 8003e30:	b510      	push	{r4, lr}
 8003e32:	4614      	mov	r4, r2
	// HAL_UART_Transmit(&USB_UART, (uint8_t*) ptr, len, 1000);
	HAL_UART_Transmit_IT(&USB_UART, (uint8_t*) ptr, len);
 8003e34:	b292      	uxth	r2, r2
 8003e36:	4802      	ldr	r0, [pc, #8]	; (8003e40 <_write+0x10>)
 8003e38:	f003 f85e 	bl	8006ef8 <HAL_UART_Transmit_IT>
	return len;
}
 8003e3c:	4620      	mov	r0, r4
 8003e3e:	bd10      	pop	{r4, pc}
 8003e40:	20005138 	.word	0x20005138

08003e44 <_read>:

// Make scanf(), getchar(), etc. default to work over USB UART
int _read(int file, char *ptr, int len) {
 8003e44:	b508      	push	{r3, lr}
	*ptr = 0x00; // Clear the character buffer because scanf() is finicky
 8003e46:	2200      	movs	r2, #0
 8003e48:	700a      	strb	r2, [r1, #0]
	len = 1; // Again because of scanf's finickiness, len must = 1
	HAL_UART_Receive(&USB_UART, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8003e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e4e:	2201      	movs	r2, #1
 8003e50:	4802      	ldr	r0, [pc, #8]	; (8003e5c <_read+0x18>)
 8003e52:	f003 fd1c 	bl	800788e <HAL_UART_Receive>
	return len;
}
 8003e56:	2001      	movs	r0, #1
 8003e58:	bd08      	pop	{r3, pc}
 8003e5a:	bf00      	nop
 8003e5c:	20005138 	.word	0x20005138

08003e60 <_lseek>:
	}
  return i; // The way this is set up, it will always report the wrong size
}

// These functions need to be defined for compiler version gcc-arm version 11.3__attribute__((weak)) void _close(void){}
__attribute__((weak)) void _lseek(void){}
 8003e60:	4770      	bx	lr

08003e62 <_fstat>:
__attribute__((weak)) void _fstat(void){}
 8003e62:	4770      	bx	lr

08003e64 <_isatty>:
__attribute__((weak)) void _getpid(void){}
__attribute__((weak)) void _ispid(void){}
__attribute__((weak)) void _kill(void){}
__attribute__((weak)) void _isatty(void){}
 8003e64:	4770      	bx	lr
	...

08003e68 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003e68:	480d      	ldr	r0, [pc, #52]	; (8003ea0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003e6a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 8003e6c:	480d      	ldr	r0, [pc, #52]	; (8003ea4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003e6e:	490e      	ldr	r1, [pc, #56]	; (8003ea8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003e70:	4a0e      	ldr	r2, [pc, #56]	; (8003eac <LoopForever+0xe>)
  movs r3, #0
 8003e72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e74:	e002      	b.n	8003e7c <LoopCopyDataInit>

08003e76 <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 8003e76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e7a:	3304      	adds	r3, #4

08003e7c <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 8003e7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e7e:	428c      	cmp	r4, r1



  bcc CopyDataInit
 8003e80:	d3f9      	bcc.n	8003e76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e82:	4a0b      	ldr	r2, [pc, #44]	; (8003eb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003e84:	4c0b      	ldr	r4, [pc, #44]	; (8003eb4 <LoopForever+0x16>)
  movs r3, #0
 8003e86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e88:	e001      	b.n	8003e8e <LoopFillZerobss>

08003e8a <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 8003e8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e8c:	3204      	adds	r2, #4

08003e8e <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 8003e8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e90:	d3fb      	bcc.n	8003e8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003e92:	f000 f813 	bl	8003ebc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003e96:	f004 f8b9 	bl	800800c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003e9a:	f7ff f90f 	bl	80030bc <main>

08003e9e <LoopForever>:

LoopForever:
    b LoopForever
 8003e9e:	e7fe      	b.n	8003e9e <LoopForever>
  ldr   r0, =_estack
 8003ea0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8003ea4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ea8:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8003eac:	0800acf8 	.word	0x0800acf8
  ldr r2, =_sbss
 8003eb0:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8003eb4:	20005314 	.word	0x20005314

08003eb8 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003eb8:	e7fe      	b.n	8003eb8 <ADC_IRQHandler>
	...

08003ebc <SystemInit>:
 * @retval None
 */
void SystemInit(void) {
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8003ebc:	4a03      	ldr	r2, [pc, #12]	; (8003ecc <SystemInit+0x10>)
 8003ebe:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003ec2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ec6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003eca:	4770      	bx	lr
 8003ecc:	e000ed00 	.word	0xe000ed00

08003ed0 <HAL_MspInit>:
 */
__weak void HAL_MspInit(void) {
	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_MspInit could be implemented in the user file
	 */
}
 8003ed0:	4770      	bx	lr
	...

08003ed4 <HAL_Init>:
HAL_StatusTypeDef HAL_Init(void) {
 8003ed4:	b508      	push	{r3, lr}
  __HAL_FLASH_ART_ENABLE();
 8003ed6:	4b09      	ldr	r3, [pc, #36]	; (8003efc <HAL_Init+0x28>)
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ede:	601a      	str	r2, [r3, #0]
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ee6:	601a      	str	r2, [r3, #0]
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ee8:	2003      	movs	r0, #3
 8003eea:	f000 f80f 	bl	8003f0c <HAL_NVIC_SetPriorityGrouping>
	HAL_InitTick(TICK_INT_PRIORITY);
 8003eee:	200f      	movs	r0, #15
 8003ef0:	f7ff fed8 	bl	8003ca4 <HAL_InitTick>
	HAL_MspInit();
 8003ef4:	f7ff ffec 	bl	8003ed0 <HAL_MspInit>
}
 8003ef8:	2000      	movs	r0, #0
 8003efa:	bd08      	pop	{r3, pc}
 8003efc:	40023c00 	.word	0x40023c00

08003f00 <HAL_GetTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
 *       implementations in user file.
 * @retval tick value
 */
__weak uint32_t HAL_GetTick(void) {
	return uwTick;
 8003f00:	4b01      	ldr	r3, [pc, #4]	; (8003f08 <HAL_GetTick+0x8>)
 8003f02:	6818      	ldr	r0, [r3, #0]
}
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	200051c0 	.word	0x200051c0

08003f0c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f0c:	4906      	ldr	r1, [pc, #24]	; (8003f28 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8003f0e:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f10:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003f14:	041b      	lsls	r3, r3, #16
 8003f16:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f18:	0200      	lsls	r0, r0, #8
 8003f1a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f1e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8003f20:	4a02      	ldr	r2, [pc, #8]	; (8003f2c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003f22:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8003f24:	60ca      	str	r2, [r1, #12]
	/* Check the parameters */
	assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

	/* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
	NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003f26:	4770      	bx	lr
 8003f28:	e000ed00 	.word	0xe000ed00
 8003f2c:	05fa0000 	.word	0x05fa0000

08003f30 <HAL_NVIC_SetPriority>:
 *         This parameter can be a value between 0 and 15
 *         A lower priority value indicates a higher priority.          
 * @retval None
 */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority,
		uint32_t SubPriority) {
 8003f30:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f32:	4b17      	ldr	r3, [pc, #92]	; (8003f90 <HAL_NVIC_SetPriority+0x60>)
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f3a:	f1c3 0c07 	rsb	ip, r3, #7
 8003f3e:	f1bc 0f04 	cmp.w	ip, #4
 8003f42:	bf28      	it	cs
 8003f44:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f48:	f103 0e04 	add.w	lr, r3, #4
 8003f4c:	f1be 0f06 	cmp.w	lr, #6
 8003f50:	d914      	bls.n	8003f7c <HAL_NVIC_SetPriority+0x4c>
 8003f52:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f54:	f04f 3eff 	mov.w	lr, #4294967295
 8003f58:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003f5c:	ea21 010c 	bic.w	r1, r1, ip
 8003f60:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f62:	fa0e fe03 	lsl.w	lr, lr, r3
 8003f66:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f6a:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 8003f6c:	2800      	cmp	r0, #0
 8003f6e:	db07      	blt.n	8003f80 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f70:	0112      	lsls	r2, r2, #4
 8003f72:	b2d2      	uxtb	r2, r2
 8003f74:	4b07      	ldr	r3, [pc, #28]	; (8003f94 <HAL_NVIC_SetPriority+0x64>)
 8003f76:	541a      	strb	r2, [r3, r0]

	prioritygroup = NVIC_GetPriorityGrouping();

	NVIC_SetPriority(IRQn,
			NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003f78:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	e7e9      	b.n	8003f54 <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f80:	f000 000f 	and.w	r0, r0, #15
 8003f84:	0112      	lsls	r2, r2, #4
 8003f86:	b2d2      	uxtb	r2, r2
 8003f88:	4b03      	ldr	r3, [pc, #12]	; (8003f98 <HAL_NVIC_SetPriority+0x68>)
 8003f8a:	541a      	strb	r2, [r3, r0]
 8003f8c:	e7f4      	b.n	8003f78 <HAL_NVIC_SetPriority+0x48>
 8003f8e:	bf00      	nop
 8003f90:	e000ed00 	.word	0xe000ed00
 8003f94:	e000e400 	.word	0xe000e400
 8003f98:	e000ed14 	.word	0xe000ed14

08003f9c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003f9c:	2800      	cmp	r0, #0
 8003f9e:	db07      	blt.n	8003fb0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fa0:	f000 021f 	and.w	r2, r0, #31
 8003fa4:	0940      	lsrs	r0, r0, #5
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	4093      	lsls	r3, r2
 8003faa:	4a02      	ldr	r2, [pc, #8]	; (8003fb4 <HAL_NVIC_EnableIRQ+0x18>)
 8003fac:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
	/* Check the parameters */
	assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

	/* Enable interrupt */
	NVIC_EnableIRQ(IRQn);
}
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	e000e100 	.word	0xe000e100

08003fb8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fb8:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003fba:	6805      	ldr	r5, [r0, #0]
 8003fbc:	682c      	ldr	r4, [r5, #0]
 8003fbe:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8003fc2:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003fc4:	6804      	ldr	r4, [r0, #0]
 8003fc6:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003fc8:	6883      	ldr	r3, [r0, #8]
 8003fca:	2b40      	cmp	r3, #64	; 0x40
 8003fcc:	d005      	beq.n	8003fda <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8003fce:	6803      	ldr	r3, [r0, #0]
 8003fd0:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8003fd2:	6803      	ldr	r3, [r0, #0]
 8003fd4:	60da      	str	r2, [r3, #12]
  }
}
 8003fd6:	bc30      	pop	{r4, r5}
 8003fd8:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8003fda:	6803      	ldr	r3, [r0, #0]
 8003fdc:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8003fde:	6803      	ldr	r3, [r0, #0]
 8003fe0:	60d9      	str	r1, [r3, #12]
 8003fe2:	e7f8      	b.n	8003fd6 <DMA_SetConfig+0x1e>

08003fe4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003fe4:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003fe6:	6801      	ldr	r1, [r0, #0]
 8003fe8:	b2ca      	uxtb	r2, r1
 8003fea:	3a10      	subs	r2, #16
 8003fec:	4b0a      	ldr	r3, [pc, #40]	; (8004018 <DMA_CalcBaseAndBitshift+0x34>)
 8003fee:	fba3 4302 	umull	r4, r3, r3, r2
 8003ff2:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003ff4:	4c09      	ldr	r4, [pc, #36]	; (800401c <DMA_CalcBaseAndBitshift+0x38>)
 8003ff6:	5ce3      	ldrb	r3, [r4, r3]
 8003ff8:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003ffa:	2a5f      	cmp	r2, #95	; 0x5f
 8003ffc:	d907      	bls.n	800400e <DMA_CalcBaseAndBitshift+0x2a>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003ffe:	4b08      	ldr	r3, [pc, #32]	; (8004020 <DMA_CalcBaseAndBitshift+0x3c>)
 8004000:	400b      	ands	r3, r1
 8004002:	3304      	adds	r3, #4
 8004004:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8004006:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8004008:	f85d 4b04 	ldr.w	r4, [sp], #4
 800400c:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800400e:	4b04      	ldr	r3, [pc, #16]	; (8004020 <DMA_CalcBaseAndBitshift+0x3c>)
 8004010:	400b      	ands	r3, r1
 8004012:	6583      	str	r3, [r0, #88]	; 0x58
 8004014:	e7f7      	b.n	8004006 <DMA_CalcBaseAndBitshift+0x22>
 8004016:	bf00      	nop
 8004018:	aaaaaaab 	.word	0xaaaaaaab
 800401c:	0800ab88 	.word	0x0800ab88
 8004020:	fffffc00 	.word	0xfffffc00

08004024 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004024:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004026:	6982      	ldr	r2, [r0, #24]
 8004028:	b992      	cbnz	r2, 8004050 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 800402a:	2b01      	cmp	r3, #1
 800402c:	d00a      	beq.n	8004044 <DMA_CheckFifoParam+0x20>
 800402e:	2b02      	cmp	r3, #2
 8004030:	d002      	beq.n	8004038 <DMA_CheckFifoParam+0x14>
 8004032:	b10b      	cbz	r3, 8004038 <DMA_CheckFifoParam+0x14>
 8004034:	2000      	movs	r0, #0
 8004036:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004038:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800403a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800403e:	d128      	bne.n	8004092 <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8004040:	2000      	movs	r0, #0
 8004042:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004044:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004046:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800404a:	d024      	beq.n	8004096 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 800404c:	2000      	movs	r0, #0
 800404e:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004050:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8004054:	d009      	beq.n	800406a <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004056:	2b02      	cmp	r3, #2
 8004058:	d925      	bls.n	80040a6 <DMA_CheckFifoParam+0x82>
 800405a:	2b03      	cmp	r3, #3
 800405c:	d125      	bne.n	80040aa <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800405e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004060:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004064:	d123      	bne.n	80040ae <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8004066:	2000      	movs	r0, #0
 8004068:	4770      	bx	lr
    switch (tmp)
 800406a:	2b03      	cmp	r3, #3
 800406c:	d803      	bhi.n	8004076 <DMA_CheckFifoParam+0x52>
 800406e:	e8df f003 	tbb	[pc, r3]
 8004072:	0414      	.short	0x0414
 8004074:	0a14      	.short	0x0a14
 8004076:	2000      	movs	r0, #0
 8004078:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800407a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800407c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004080:	d10d      	bne.n	800409e <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8004082:	2000      	movs	r0, #0
 8004084:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004086:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004088:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800408c:	d009      	beq.n	80040a2 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 800408e:	2000      	movs	r0, #0
 8004090:	4770      	bx	lr
        status = HAL_ERROR;
 8004092:	2001      	movs	r0, #1
 8004094:	4770      	bx	lr
        status = HAL_ERROR;
 8004096:	2001      	movs	r0, #1
 8004098:	4770      	bx	lr
      status = HAL_ERROR;
 800409a:	2001      	movs	r0, #1
 800409c:	4770      	bx	lr
        status = HAL_ERROR;
 800409e:	2001      	movs	r0, #1
 80040a0:	4770      	bx	lr
        status = HAL_ERROR;
 80040a2:	2001      	movs	r0, #1
 80040a4:	4770      	bx	lr
      status = HAL_ERROR;
 80040a6:	2001      	movs	r0, #1
 80040a8:	4770      	bx	lr
    switch (tmp)
 80040aa:	2000      	movs	r0, #0
 80040ac:	4770      	bx	lr
      {
        status = HAL_ERROR;
 80040ae:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 80040b0:	4770      	bx	lr
	...

080040b4 <HAL_DMA_Init>:
{
 80040b4:	b570      	push	{r4, r5, r6, lr}
 80040b6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80040b8:	f7ff ff22 	bl	8003f00 <HAL_GetTick>
  if(hdma == NULL)
 80040bc:	2c00      	cmp	r4, #0
 80040be:	d05b      	beq.n	8004178 <HAL_DMA_Init+0xc4>
 80040c0:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 80040c2:	2302      	movs	r3, #2
 80040c4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 80040c8:	2300      	movs	r3, #0
 80040ca:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80040ce:	6822      	ldr	r2, [r4, #0]
 80040d0:	6813      	ldr	r3, [r2, #0]
 80040d2:	f023 0301 	bic.w	r3, r3, #1
 80040d6:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040d8:	6823      	ldr	r3, [r4, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	f012 0f01 	tst.w	r2, #1
 80040e0:	d00a      	beq.n	80040f8 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040e2:	f7ff ff0d 	bl	8003f00 <HAL_GetTick>
 80040e6:	1b43      	subs	r3, r0, r5
 80040e8:	2b05      	cmp	r3, #5
 80040ea:	d9f5      	bls.n	80040d8 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040ec:	2320      	movs	r3, #32
 80040ee:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80040f0:	2003      	movs	r0, #3
 80040f2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80040f6:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 80040f8:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80040fa:	4920      	ldr	r1, [pc, #128]	; (800417c <HAL_DMA_Init+0xc8>)
 80040fc:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040fe:	6862      	ldr	r2, [r4, #4]
 8004100:	68a0      	ldr	r0, [r4, #8]
 8004102:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004104:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004106:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004108:	6920      	ldr	r0, [r4, #16]
 800410a:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800410c:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800410e:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004110:	69a0      	ldr	r0, [r4, #24]
 8004112:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8004114:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004116:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8004118:	6a20      	ldr	r0, [r4, #32]
 800411a:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800411c:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800411e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004120:	2904      	cmp	r1, #4
 8004122:	d01e      	beq.n	8004162 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8004124:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8004126:	6826      	ldr	r6, [r4, #0]
 8004128:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800412a:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 800412e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004130:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004132:	2b04      	cmp	r3, #4
 8004134:	d107      	bne.n	8004146 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8004136:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004138:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800413a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800413c:	b11b      	cbz	r3, 8004146 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800413e:	4620      	mov	r0, r4
 8004140:	f7ff ff70 	bl	8004024 <DMA_CheckFifoParam>
 8004144:	b990      	cbnz	r0, 800416c <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8004146:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004148:	4620      	mov	r0, r4
 800414a:	f7ff ff4b 	bl	8003fe4 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800414e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004150:	233f      	movs	r3, #63	; 0x3f
 8004152:	4093      	lsls	r3, r2
 8004154:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004156:	2000      	movs	r0, #0
 8004158:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800415a:	2301      	movs	r3, #1
 800415c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8004160:	e7c9      	b.n	80040f6 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004162:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004164:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004166:	4301      	orrs	r1, r0
 8004168:	430a      	orrs	r2, r1
 800416a:	e7db      	b.n	8004124 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800416c:	2340      	movs	r3, #64	; 0x40
 800416e:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8004170:	2001      	movs	r0, #1
 8004172:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8004176:	e7be      	b.n	80040f6 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8004178:	2001      	movs	r0, #1
 800417a:	e7bc      	b.n	80040f6 <HAL_DMA_Init+0x42>
 800417c:	e010803f 	.word	0xe010803f

08004180 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 8004180:	2800      	cmp	r0, #0
 8004182:	d02d      	beq.n	80041e0 <HAL_DMA_DeInit+0x60>
{
 8004184:	b538      	push	{r3, r4, r5, lr}
 8004186:	4605      	mov	r5, r0
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004188:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
 800418c:	b2c0      	uxtb	r0, r0
 800418e:	2802      	cmp	r0, #2
 8004190:	d025      	beq.n	80041de <HAL_DMA_DeInit+0x5e>
  __HAL_DMA_DISABLE(hdma);
 8004192:	682a      	ldr	r2, [r5, #0]
 8004194:	6813      	ldr	r3, [r2, #0]
 8004196:	f023 0301 	bic.w	r3, r3, #1
 800419a:	6013      	str	r3, [r2, #0]
  hdma->Instance->CR   = 0U;
 800419c:	682b      	ldr	r3, [r5, #0]
 800419e:	2400      	movs	r4, #0
 80041a0:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 80041a2:	682b      	ldr	r3, [r5, #0]
 80041a4:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 80041a6:	682b      	ldr	r3, [r5, #0]
 80041a8:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 80041aa:	682b      	ldr	r3, [r5, #0]
 80041ac:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 80041ae:	682b      	ldr	r3, [r5, #0]
 80041b0:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80041b2:	682b      	ldr	r3, [r5, #0]
 80041b4:	2221      	movs	r2, #33	; 0x21
 80041b6:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80041b8:	4628      	mov	r0, r5
 80041ba:	f7ff ff13 	bl	8003fe4 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041be:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80041c0:	233f      	movs	r3, #63	; 0x3f
 80041c2:	4093      	lsls	r3, r2
 80041c4:	6083      	str	r3, [r0, #8]
  hdma->XferCpltCallback = NULL;
 80041c6:	63ec      	str	r4, [r5, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80041c8:	642c      	str	r4, [r5, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80041ca:	646c      	str	r4, [r5, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80041cc:	64ac      	str	r4, [r5, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80041ce:	64ec      	str	r4, [r5, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80041d0:	652c      	str	r4, [r5, #80]	; 0x50
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041d2:	656c      	str	r4, [r5, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_RESET;
 80041d4:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 80041d8:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  return HAL_OK;
 80041dc:	4620      	mov	r0, r4
}
 80041de:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80041e0:	2001      	movs	r0, #1
}
 80041e2:	4770      	bx	lr

080041e4 <HAL_DMA_Start_IT>:
{
 80041e4:	b538      	push	{r3, r4, r5, lr}
 80041e6:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041e8:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 80041ea:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 80041ee:	2801      	cmp	r0, #1
 80041f0:	d030      	beq.n	8004254 <HAL_DMA_Start_IT+0x70>
 80041f2:	2001      	movs	r0, #1
 80041f4:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80041f8:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 80041fc:	b2c0      	uxtb	r0, r0
 80041fe:	2801      	cmp	r0, #1
 8004200:	d004      	beq.n	800420c <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8004202:	2300      	movs	r3, #0
 8004204:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_BUSY;
 8004208:	2002      	movs	r0, #2
}
 800420a:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800420c:	2002      	movs	r0, #2
 800420e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004212:	2000      	movs	r0, #0
 8004214:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004216:	4620      	mov	r0, r4
 8004218:	f7ff fece 	bl	8003fb8 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800421c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800421e:	233f      	movs	r3, #63	; 0x3f
 8004220:	4093      	lsls	r3, r2
 8004222:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004224:	6822      	ldr	r2, [r4, #0]
 8004226:	6813      	ldr	r3, [r2, #0]
 8004228:	f043 0316 	orr.w	r3, r3, #22
 800422c:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800422e:	6822      	ldr	r2, [r4, #0]
 8004230:	6953      	ldr	r3, [r2, #20]
 8004232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004236:	6153      	str	r3, [r2, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8004238:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800423a:	b123      	cbz	r3, 8004246 <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CR  |= DMA_IT_HT;
 800423c:	6822      	ldr	r2, [r4, #0]
 800423e:	6813      	ldr	r3, [r2, #0]
 8004240:	f043 0308 	orr.w	r3, r3, #8
 8004244:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8004246:	6822      	ldr	r2, [r4, #0]
 8004248:	6813      	ldr	r3, [r2, #0]
 800424a:	f043 0301 	orr.w	r3, r3, #1
 800424e:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004250:	2000      	movs	r0, #0
 8004252:	e7da      	b.n	800420a <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 8004254:	2002      	movs	r0, #2
 8004256:	e7d8      	b.n	800420a <HAL_DMA_Start_IT+0x26>

08004258 <HAL_DMA_Abort>:
{
 8004258:	b570      	push	{r4, r5, r6, lr}
 800425a:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800425c:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 800425e:	f7ff fe4f 	bl	8003f00 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004262:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8004266:	b2db      	uxtb	r3, r3
 8004268:	2b02      	cmp	r3, #2
 800426a:	d006      	beq.n	800427a <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800426c:	2380      	movs	r3, #128	; 0x80
 800426e:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8004270:	2300      	movs	r3, #0
 8004272:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8004276:	2001      	movs	r0, #1
}
 8004278:	bd70      	pop	{r4, r5, r6, pc}
 800427a:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800427c:	6822      	ldr	r2, [r4, #0]
 800427e:	6813      	ldr	r3, [r2, #0]
 8004280:	f023 0316 	bic.w	r3, r3, #22
 8004284:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004286:	6822      	ldr	r2, [r4, #0]
 8004288:	6953      	ldr	r3, [r2, #20]
 800428a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800428e:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004290:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004292:	b1e3      	cbz	r3, 80042ce <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004294:	6822      	ldr	r2, [r4, #0]
 8004296:	6813      	ldr	r3, [r2, #0]
 8004298:	f023 0308 	bic.w	r3, r3, #8
 800429c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800429e:	6822      	ldr	r2, [r4, #0]
 80042a0:	6813      	ldr	r3, [r2, #0]
 80042a2:	f023 0301 	bic.w	r3, r3, #1
 80042a6:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042a8:	6823      	ldr	r3, [r4, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f013 0f01 	tst.w	r3, #1
 80042b0:	d011      	beq.n	80042d6 <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80042b2:	f7ff fe25 	bl	8003f00 <HAL_GetTick>
 80042b6:	1b43      	subs	r3, r0, r5
 80042b8:	2b05      	cmp	r3, #5
 80042ba:	d9f5      	bls.n	80042a8 <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80042bc:	2320      	movs	r3, #32
 80042be:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80042c0:	2003      	movs	r0, #3
 80042c2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80042c6:	2300      	movs	r3, #0
 80042c8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 80042cc:	e7d4      	b.n	8004278 <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80042ce:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1df      	bne.n	8004294 <HAL_DMA_Abort+0x3c>
 80042d4:	e7e3      	b.n	800429e <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042d6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80042d8:	233f      	movs	r3, #63	; 0x3f
 80042da:	4093      	lsls	r3, r2
 80042dc:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 80042de:	2301      	movs	r3, #1
 80042e0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 80042e4:	2000      	movs	r0, #0
 80042e6:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return HAL_OK;
 80042ea:	e7c5      	b.n	8004278 <HAL_DMA_Abort+0x20>

080042ec <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042ec:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d003      	beq.n	80042fe <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042f6:	2380      	movs	r3, #128	; 0x80
 80042f8:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80042fa:	2001      	movs	r0, #1
 80042fc:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 80042fe:	2305      	movs	r3, #5
 8004300:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8004304:	6802      	ldr	r2, [r0, #0]
 8004306:	6813      	ldr	r3, [r2, #0]
 8004308:	f023 0301 	bic.w	r3, r3, #1
 800430c:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800430e:	2000      	movs	r0, #0
}
 8004310:	4770      	bx	lr
	...

08004314 <HAL_DMA_IRQHandler>:
{
 8004314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004316:	b083      	sub	sp, #12
 8004318:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
 800431a:	2300      	movs	r3, #0
 800431c:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;
 800431e:	4b72      	ldr	r3, [pc, #456]	; (80044e8 <HAL_DMA_IRQHandler+0x1d4>)
 8004320:	681d      	ldr	r5, [r3, #0]
 8004322:	4b72      	ldr	r3, [pc, #456]	; (80044ec <HAL_DMA_IRQHandler+0x1d8>)
 8004324:	fba3 3505 	umull	r3, r5, r3, r5
 8004328:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800432a:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 800432c:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800432e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8004330:	2308      	movs	r3, #8
 8004332:	4093      	lsls	r3, r2
 8004334:	4233      	tst	r3, r6
 8004336:	d010      	beq.n	800435a <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004338:	6803      	ldr	r3, [r0, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	f012 0f04 	tst.w	r2, #4
 8004340:	d00b      	beq.n	800435a <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	f022 0204 	bic.w	r2, r2, #4
 8004348:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800434a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800434c:	2308      	movs	r3, #8
 800434e:	4093      	lsls	r3, r2
 8004350:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004352:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004354:	f043 0301 	orr.w	r3, r3, #1
 8004358:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800435a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800435c:	2301      	movs	r3, #1
 800435e:	4093      	lsls	r3, r2
 8004360:	4233      	tst	r3, r6
 8004362:	d009      	beq.n	8004378 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004364:	6822      	ldr	r2, [r4, #0]
 8004366:	6952      	ldr	r2, [r2, #20]
 8004368:	f012 0f80 	tst.w	r2, #128	; 0x80
 800436c:	d004      	beq.n	8004378 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800436e:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004370:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004372:	f043 0302 	orr.w	r3, r3, #2
 8004376:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004378:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800437a:	2304      	movs	r3, #4
 800437c:	4093      	lsls	r3, r2
 800437e:	4233      	tst	r3, r6
 8004380:	d009      	beq.n	8004396 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004382:	6822      	ldr	r2, [r4, #0]
 8004384:	6812      	ldr	r2, [r2, #0]
 8004386:	f012 0f02 	tst.w	r2, #2
 800438a:	d004      	beq.n	8004396 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800438c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800438e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004390:	f043 0304 	orr.w	r3, r3, #4
 8004394:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004396:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004398:	2310      	movs	r3, #16
 800439a:	4093      	lsls	r3, r2
 800439c:	4233      	tst	r3, r6
 800439e:	d024      	beq.n	80043ea <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80043a0:	6822      	ldr	r2, [r4, #0]
 80043a2:	6812      	ldr	r2, [r2, #0]
 80043a4:	f012 0f08 	tst.w	r2, #8
 80043a8:	d01f      	beq.n	80043ea <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80043aa:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043ac:	6823      	ldr	r3, [r4, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80043b4:	d00d      	beq.n	80043d2 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80043bc:	d104      	bne.n	80043c8 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 80043be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80043c0:	b19b      	cbz	r3, 80043ea <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 80043c2:	4620      	mov	r0, r4
 80043c4:	4798      	blx	r3
 80043c6:	e010      	b.n	80043ea <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80043c8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80043ca:	b173      	cbz	r3, 80043ea <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 80043cc:	4620      	mov	r0, r4
 80043ce:	4798      	blx	r3
 80043d0:	e00b      	b.n	80043ea <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	f412 7f80 	tst.w	r2, #256	; 0x100
 80043d8:	d103      	bne.n	80043e2 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	f022 0208 	bic.w	r2, r2, #8
 80043e0:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80043e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80043e4:	b10b      	cbz	r3, 80043ea <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 80043e6:	4620      	mov	r0, r4
 80043e8:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80043ea:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80043ec:	2320      	movs	r3, #32
 80043ee:	4093      	lsls	r3, r2
 80043f0:	4233      	tst	r3, r6
 80043f2:	d055      	beq.n	80044a0 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80043f4:	6822      	ldr	r2, [r4, #0]
 80043f6:	6812      	ldr	r2, [r2, #0]
 80043f8:	f012 0f10 	tst.w	r2, #16
 80043fc:	d050      	beq.n	80044a0 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80043fe:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004400:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b05      	cmp	r3, #5
 8004408:	d00e      	beq.n	8004428 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800440a:	6823      	ldr	r3, [r4, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8004412:	d033      	beq.n	800447c <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800441a:	d12a      	bne.n	8004472 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 800441c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800441e:	2b00      	cmp	r3, #0
 8004420:	d03e      	beq.n	80044a0 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8004422:	4620      	mov	r0, r4
 8004424:	4798      	blx	r3
 8004426:	e03b      	b.n	80044a0 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004428:	6822      	ldr	r2, [r4, #0]
 800442a:	6813      	ldr	r3, [r2, #0]
 800442c:	f023 0316 	bic.w	r3, r3, #22
 8004430:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004432:	6822      	ldr	r2, [r4, #0]
 8004434:	6953      	ldr	r3, [r2, #20]
 8004436:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800443a:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800443c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800443e:	b1a3      	cbz	r3, 800446a <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004440:	6822      	ldr	r2, [r4, #0]
 8004442:	6813      	ldr	r3, [r2, #0]
 8004444:	f023 0308 	bic.w	r3, r3, #8
 8004448:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800444a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800444c:	233f      	movs	r3, #63	; 0x3f
 800444e:	4093      	lsls	r3, r2
 8004450:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8004452:	2301      	movs	r3, #1
 8004454:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8004458:	2300      	movs	r3, #0
 800445a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 800445e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004460:	2b00      	cmp	r3, #0
 8004462:	d03f      	beq.n	80044e4 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8004464:	4620      	mov	r0, r4
 8004466:	4798      	blx	r3
        return;
 8004468:	e03c      	b.n	80044e4 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800446a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1e7      	bne.n	8004440 <HAL_DMA_IRQHandler+0x12c>
 8004470:	e7eb      	b.n	800444a <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8004472:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004474:	b1a3      	cbz	r3, 80044a0 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8004476:	4620      	mov	r0, r4
 8004478:	4798      	blx	r3
 800447a:	e011      	b.n	80044a0 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004482:	d109      	bne.n	8004498 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	f022 0210 	bic.w	r2, r2, #16
 800448a:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800448c:	2301      	movs	r3, #1
 800448e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8004492:	2300      	movs	r3, #0
 8004494:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8004498:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800449a:	b10b      	cbz	r3, 80044a0 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 800449c:	4620      	mov	r0, r4
 800449e:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80044a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80044a2:	b1fb      	cbz	r3, 80044e4 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80044a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80044a6:	f013 0f01 	tst.w	r3, #1
 80044aa:	d017      	beq.n	80044dc <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 80044ac:	2305      	movs	r3, #5
 80044ae:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80044b2:	6822      	ldr	r2, [r4, #0]
 80044b4:	6813      	ldr	r3, [r2, #0]
 80044b6:	f023 0301 	bic.w	r3, r3, #1
 80044ba:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 80044bc:	9b01      	ldr	r3, [sp, #4]
 80044be:	3301      	adds	r3, #1
 80044c0:	9301      	str	r3, [sp, #4]
 80044c2:	42ab      	cmp	r3, r5
 80044c4:	d804      	bhi.n	80044d0 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80044c6:	6823      	ldr	r3, [r4, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f013 0f01 	tst.w	r3, #1
 80044ce:	d1f5      	bne.n	80044bc <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 80044d0:	2301      	movs	r3, #1
 80044d2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 80044d6:	2300      	movs	r3, #0
 80044d8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 80044dc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80044de:	b10b      	cbz	r3, 80044e4 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 80044e0:	4620      	mov	r0, r4
 80044e2:	4798      	blx	r3
}
 80044e4:	b003      	add	sp, #12
 80044e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044e8:	200000a8 	.word	0x200000a8
 80044ec:	1b4e81b5 	.word	0x1b4e81b5

080044f0 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80044f0:	b430      	push	{r4, r5}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80044f2:	6805      	ldr	r5, [r0, #0]
 80044f4:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 80044f6:	f004 4c40 	and.w	ip, r4, #3221225472	; 0xc0000000
 80044fa:	9c02      	ldr	r4, [sp, #8]
 80044fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8004500:	ea4c 0404 	orr.w	r4, ip, r4
 8004504:	646c      	str	r4, [r5, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004506:	6803      	ldr	r3, [r0, #0]
 8004508:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800450a:	6843      	ldr	r3, [r0, #4]
 800450c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004510:	d003      	beq.n	800451a <DMA2D_SetConfig+0x2a>
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004512:	6803      	ldr	r3, [r0, #0]
 8004514:	60d9      	str	r1, [r3, #12]
  }
}
 8004516:	bc30      	pop	{r4, r5}
 8004518:	4770      	bx	lr
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800451a:	f001 4c7f 	and.w	ip, r1, #4278190080	; 0xff000000
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800451e:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004522:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004526:	b2ca      	uxtb	r2, r1
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004528:	6884      	ldr	r4, [r0, #8]
 800452a:	b19c      	cbz	r4, 8004554 <DMA2D_SetConfig+0x64>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800452c:	2c01      	cmp	r4, #1
 800452e:	d00f      	beq.n	8004550 <DMA2D_SetConfig+0x60>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004530:	2c02      	cmp	r4, #2
 8004532:	d012      	beq.n	800455a <DMA2D_SetConfig+0x6a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004534:	2c03      	cmp	r4, #3
 8004536:	d018      	beq.n	800456a <DMA2D_SetConfig+0x7a>
      tmp1 = (tmp1 >> 28U);
 8004538:	ea4f 7c1c 	mov.w	ip, ip, lsr #28
      tmp2 = (tmp2 >> 20U);
 800453c:	0d1b      	lsrs	r3, r3, #20
      tmp3 = (tmp3 >> 12U);
 800453e:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004540:	021b      	lsls	r3, r3, #8
 8004542:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8004546:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
 800454a:	ea43 1112 	orr.w	r1, r3, r2, lsr #4
 800454e:	e001      	b.n	8004554 <DMA2D_SetConfig+0x64>
      tmp = (tmp3 | tmp2 | tmp4);
 8004550:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004554:	6803      	ldr	r3, [r0, #0]
 8004556:	6399      	str	r1, [r3, #56]	; 0x38
 8004558:	e7dd      	b.n	8004516 <DMA2D_SetConfig+0x26>
      tmp2 = (tmp2 >> 19U);
 800455a:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 10U);
 800455c:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800455e:	02db      	lsls	r3, r3, #11
 8004560:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8004564:	ea43 01d2 	orr.w	r1, r3, r2, lsr #3
 8004568:	e7f4      	b.n	8004554 <DMA2D_SetConfig+0x64>
      tmp1 = (tmp1 >> 31U);
 800456a:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
      tmp2 = (tmp2 >> 19U);
 800456e:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 8004570:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004572:	029b      	lsls	r3, r3, #10
 8004574:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8004578:	ea43 33cc 	orr.w	r3, r3, ip, lsl #15
 800457c:	ea43 01d2 	orr.w	r1, r3, r2, lsr #3
 8004580:	e7e8      	b.n	8004554 <DMA2D_SetConfig+0x64>

08004582 <HAL_DMA2D_MspInit>:
}
 8004582:	4770      	bx	lr

08004584 <HAL_DMA2D_Init>:
  if (hdma2d == NULL)
 8004584:	2800      	cmp	r0, #0
 8004586:	d032      	beq.n	80045ee <HAL_DMA2D_Init+0x6a>
{
 8004588:	b510      	push	{r4, lr}
 800458a:	4604      	mov	r4, r0
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800458c:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8004590:	b343      	cbz	r3, 80045e4 <HAL_DMA2D_Init+0x60>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004592:	2302      	movs	r3, #2
 8004594:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004598:	6822      	ldr	r2, [r4, #0]
 800459a:	6813      	ldr	r3, [r2, #0]
 800459c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80045a0:	6861      	ldr	r1, [r4, #4]
 80045a2:	430b      	orrs	r3, r1
 80045a4:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80045a6:	6822      	ldr	r2, [r4, #0]
 80045a8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80045aa:	f023 0307 	bic.w	r3, r3, #7
 80045ae:	68a1      	ldr	r1, [r4, #8]
 80045b0:	430b      	orrs	r3, r1
 80045b2:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80045b4:	6822      	ldr	r2, [r4, #0]
 80045b6:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80045b8:	4b0e      	ldr	r3, [pc, #56]	; (80045f4 <HAL_DMA2D_Init+0x70>)
 80045ba:	400b      	ands	r3, r1
 80045bc:	68e1      	ldr	r1, [r4, #12]
 80045be:	430b      	orrs	r3, r1
 80045c0:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80045c2:	6821      	ldr	r1, [r4, #0]
 80045c4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80045c6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80045ca:	6920      	ldr	r0, [r4, #16]
 80045cc:	6962      	ldr	r2, [r4, #20]
 80045ce:	0552      	lsls	r2, r2, #21
 80045d0:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
 80045d4:	4313      	orrs	r3, r2
 80045d6:	634b      	str	r3, [r1, #52]	; 0x34
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80045d8:	2000      	movs	r0, #0
 80045da:	6560      	str	r0, [r4, #84]	; 0x54
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80045dc:	2301      	movs	r3, #1
 80045de:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 80045e2:	bd10      	pop	{r4, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 80045e4:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_DMA2D_MspInit(hdma2d);
 80045e8:	f7ff ffcb 	bl	8004582 <HAL_DMA2D_MspInit>
 80045ec:	e7d1      	b.n	8004592 <HAL_DMA2D_Init+0xe>
    return HAL_ERROR;
 80045ee:	2001      	movs	r0, #1
}
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	ffffc000 	.word	0xffffc000

080045f8 <HAL_DMA2D_Start>:
{
 80045f8:	b510      	push	{r4, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	4604      	mov	r4, r0
  __HAL_LOCK(hdma2d);
 80045fe:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 8004602:	2801      	cmp	r0, #1
 8004604:	d012      	beq.n	800462c <HAL_DMA2D_Start+0x34>
 8004606:	2001      	movs	r0, #1
 8004608:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800460c:	2002      	movs	r0, #2
 800460e:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004612:	9804      	ldr	r0, [sp, #16]
 8004614:	9000      	str	r0, [sp, #0]
 8004616:	4620      	mov	r0, r4
 8004618:	f7ff ff6a 	bl	80044f0 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 800461c:	6822      	ldr	r2, [r4, #0]
 800461e:	6813      	ldr	r3, [r2, #0]
 8004620:	f043 0301 	orr.w	r3, r3, #1
 8004624:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8004626:	2000      	movs	r0, #0
}
 8004628:	b002      	add	sp, #8
 800462a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdma2d);
 800462c:	2002      	movs	r0, #2
 800462e:	e7fb      	b.n	8004628 <HAL_DMA2D_Start+0x30>

08004630 <HAL_DMA2D_PollForTransfer>:
{
 8004630:	b570      	push	{r4, r5, r6, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	4604      	mov	r4, r0
 8004636:	460d      	mov	r5, r1
  __IO uint32_t isrflags = 0x0U;
 8004638:	2300      	movs	r3, #0
 800463a:	9301      	str	r3, [sp, #4]
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800463c:	6803      	ldr	r3, [r0, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f013 0f01 	tst.w	r3, #1
 8004644:	d111      	bne.n	800466a <HAL_DMA2D_PollForTransfer+0x3a>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004646:	6822      	ldr	r2, [r4, #0]
 8004648:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800464a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800464c:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 800464e:	f013 0f20 	tst.w	r3, #32
 8004652:	d147      	bne.n	80046e4 <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8004654:	6823      	ldr	r3, [r4, #0]
 8004656:	2212      	movs	r2, #18
 8004658:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800465a:	2301      	movs	r3, #1
 800465c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hdma2d);
 8004660:	2000      	movs	r0, #0
 8004662:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
}
 8004666:	b002      	add	sp, #8
 8004668:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 800466a:	f7ff fc49 	bl	8003f00 <HAL_GetTick>
 800466e:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004670:	6823      	ldr	r3, [r4, #0]
 8004672:	685a      	ldr	r2, [r3, #4]
 8004674:	f012 0f02 	tst.w	r2, #2
 8004678:	d1e5      	bne.n	8004646 <HAL_DMA2D_PollForTransfer+0x16>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800467a:	685a      	ldr	r2, [r3, #4]
 800467c:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800467e:	9a01      	ldr	r2, [sp, #4]
 8004680:	f012 0f21 	tst.w	r2, #33	; 0x21
 8004684:	d114      	bne.n	80046b0 <HAL_DMA2D_PollForTransfer+0x80>
      if (Timeout != HAL_MAX_DELAY)
 8004686:	f1b5 3fff 	cmp.w	r5, #4294967295
 800468a:	d0f1      	beq.n	8004670 <HAL_DMA2D_PollForTransfer+0x40>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800468c:	f7ff fc38 	bl	8003f00 <HAL_GetTick>
 8004690:	1b80      	subs	r0, r0, r6
 8004692:	42a8      	cmp	r0, r5
 8004694:	d801      	bhi.n	800469a <HAL_DMA2D_PollForTransfer+0x6a>
 8004696:	2d00      	cmp	r5, #0
 8004698:	d1ea      	bne.n	8004670 <HAL_DMA2D_PollForTransfer+0x40>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800469a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800469c:	f043 0320 	orr.w	r3, r3, #32
 80046a0:	6563      	str	r3, [r4, #84]	; 0x54
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80046a2:	2003      	movs	r0, #3
 80046a4:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
          __HAL_UNLOCK(hdma2d);
 80046a8:	2300      	movs	r3, #0
 80046aa:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
          return HAL_TIMEOUT;
 80046ae:	e7da      	b.n	8004666 <HAL_DMA2D_PollForTransfer+0x36>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80046b0:	9a01      	ldr	r2, [sp, #4]
 80046b2:	f012 0f20 	tst.w	r2, #32
 80046b6:	d003      	beq.n	80046c0 <HAL_DMA2D_PollForTransfer+0x90>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80046b8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80046ba:	f042 0202 	orr.w	r2, r2, #2
 80046be:	6562      	str	r2, [r4, #84]	; 0x54
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80046c0:	9a01      	ldr	r2, [sp, #4]
 80046c2:	f012 0f01 	tst.w	r2, #1
 80046c6:	d003      	beq.n	80046d0 <HAL_DMA2D_PollForTransfer+0xa0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80046c8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80046ca:	f042 0201 	orr.w	r2, r2, #1
 80046ce:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80046d0:	2221      	movs	r2, #33	; 0x21
 80046d2:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80046d4:	2304      	movs	r3, #4
 80046d6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hdma2d);
 80046da:	2300      	movs	r3, #0
 80046dc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        return HAL_ERROR;
 80046e0:	2001      	movs	r0, #1
 80046e2:	e7c0      	b.n	8004666 <HAL_DMA2D_PollForTransfer+0x36>
    tickstart = HAL_GetTick();
 80046e4:	f7ff fc0c 	bl	8003f00 <HAL_GetTick>
 80046e8:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80046ea:	6823      	ldr	r3, [r4, #0]
 80046ec:	685a      	ldr	r2, [r3, #4]
 80046ee:	f012 0f10 	tst.w	r2, #16
 80046f2:	d1af      	bne.n	8004654 <HAL_DMA2D_PollForTransfer+0x24>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80046f4:	685a      	ldr	r2, [r3, #4]
 80046f6:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80046f8:	9a01      	ldr	r2, [sp, #4]
 80046fa:	f012 0f29 	tst.w	r2, #41	; 0x29
 80046fe:	d114      	bne.n	800472a <HAL_DMA2D_PollForTransfer+0xfa>
      if (Timeout != HAL_MAX_DELAY)
 8004700:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004704:	d0f1      	beq.n	80046ea <HAL_DMA2D_PollForTransfer+0xba>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004706:	f7ff fbfb 	bl	8003f00 <HAL_GetTick>
 800470a:	1b80      	subs	r0, r0, r6
 800470c:	42a8      	cmp	r0, r5
 800470e:	d801      	bhi.n	8004714 <HAL_DMA2D_PollForTransfer+0xe4>
 8004710:	2d00      	cmp	r5, #0
 8004712:	d1ea      	bne.n	80046ea <HAL_DMA2D_PollForTransfer+0xba>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004714:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004716:	f043 0320 	orr.w	r3, r3, #32
 800471a:	6563      	str	r3, [r4, #84]	; 0x54
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800471c:	2003      	movs	r0, #3
 800471e:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
          __HAL_UNLOCK(hdma2d);
 8004722:	2300      	movs	r3, #0
 8004724:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
          return HAL_TIMEOUT;
 8004728:	e79d      	b.n	8004666 <HAL_DMA2D_PollForTransfer+0x36>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800472a:	9a01      	ldr	r2, [sp, #4]
 800472c:	f012 0f08 	tst.w	r2, #8
 8004730:	d003      	beq.n	800473a <HAL_DMA2D_PollForTransfer+0x10a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004732:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004734:	f042 0204 	orr.w	r2, r2, #4
 8004738:	6562      	str	r2, [r4, #84]	; 0x54
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800473a:	9a01      	ldr	r2, [sp, #4]
 800473c:	f012 0f20 	tst.w	r2, #32
 8004740:	d003      	beq.n	800474a <HAL_DMA2D_PollForTransfer+0x11a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004742:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004744:	f042 0202 	orr.w	r2, r2, #2
 8004748:	6562      	str	r2, [r4, #84]	; 0x54
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800474a:	9a01      	ldr	r2, [sp, #4]
 800474c:	f012 0f01 	tst.w	r2, #1
 8004750:	d003      	beq.n	800475a <HAL_DMA2D_PollForTransfer+0x12a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004752:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004754:	f042 0201 	orr.w	r2, r2, #1
 8004758:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800475a:	2229      	movs	r2, #41	; 0x29
 800475c:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800475e:	2304      	movs	r3, #4
 8004760:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hdma2d);
 8004764:	2300      	movs	r3, #0
 8004766:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        return HAL_ERROR;
 800476a:	2001      	movs	r0, #1
 800476c:	e77b      	b.n	8004666 <HAL_DMA2D_PollForTransfer+0x36>
	...

08004770 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 8004770:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8004774:	2a01      	cmp	r2, #1
 8004776:	d067      	beq.n	8004848 <HAL_DMA2D_ConfigLayer+0xd8>
{
 8004778:	b430      	push	{r4, r5}
 800477a:	4603      	mov	r3, r0
  __HAL_LOCK(hdma2d);
 800477c:	2201      	movs	r2, #1
 800477e:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004782:	2202      	movs	r2, #2
 8004784:	f880 2051 	strb.w	r2, [r0, #81]	; 0x51
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004788:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 800478c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8004790:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004792:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8004794:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 8004798:	6b05      	ldr	r5, [r0, #48]	; 0x30
 800479a:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800479e:	6b40      	ldr	r0, [r0, #52]	; 0x34
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80047a0:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80047a4:	3c09      	subs	r4, #9
 80047a6:	2c01      	cmp	r4, #1
 80047a8:	d920      	bls.n	80047ec <HAL_DMA2D_ConfigLayer+0x7c>
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80047aa:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 80047ae:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80047b2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80047b4:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80047b8:	bb59      	cbnz	r1, 8004812 <HAL_DMA2D_ConfigLayer+0xa2>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80047ba:	681c      	ldr	r4, [r3, #0]
 80047bc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80047be:	4823      	ldr	r0, [pc, #140]	; (800484c <HAL_DMA2D_ConfigLayer+0xdc>)
 80047c0:	4028      	ands	r0, r5
 80047c2:	4310      	orrs	r0, r2
 80047c4:	6260      	str	r0, [r4, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80047c6:	6818      	ldr	r0, [r3, #0]
 80047c8:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80047cc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80047d0:	6a14      	ldr	r4, [r2, #32]
 80047d2:	6184      	str	r4, [r0, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80047d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047d6:	3a09      	subs	r2, #9
 80047d8:	2a01      	cmp	r2, #1
 80047da:	d910      	bls.n	80047fe <HAL_DMA2D_ConfigLayer+0x8e>
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hdma2d);
 80047e2:	2000      	movs	r0, #0
 80047e4:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
}
 80047e8:	bc30      	pop	{r4, r5}
 80047ea:	4770      	bx	lr
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80047ec:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 80047f0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80047f4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80047f6:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
 80047fa:	4302      	orrs	r2, r0
 80047fc:	e7dc      	b.n	80047b8 <HAL_DMA2D_ConfigLayer+0x48>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80047fe:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8004802:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8004806:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8004808:	6819      	ldr	r1, [r3, #0]
 800480a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800480e:	628a      	str	r2, [r1, #40]	; 0x28
 8004810:	e7e4      	b.n	80047dc <HAL_DMA2D_ConfigLayer+0x6c>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004812:	681c      	ldr	r4, [r3, #0]
 8004814:	69e5      	ldr	r5, [r4, #28]
 8004816:	480d      	ldr	r0, [pc, #52]	; (800484c <HAL_DMA2D_ConfigLayer+0xdc>)
 8004818:	4028      	ands	r0, r5
 800481a:	4310      	orrs	r0, r2
 800481c:	61e0      	str	r0, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800481e:	6818      	ldr	r0, [r3, #0]
 8004820:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8004824:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8004828:	6a14      	ldr	r4, [r2, #32]
 800482a:	6104      	str	r4, [r0, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800482c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800482e:	3a09      	subs	r2, #9
 8004830:	2a01      	cmp	r2, #1
 8004832:	d8d3      	bhi.n	80047dc <HAL_DMA2D_ConfigLayer+0x6c>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004834:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8004838:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800483c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800483e:	6819      	ldr	r1, [r3, #0]
 8004840:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004844:	620a      	str	r2, [r1, #32]
 8004846:	e7c9      	b.n	80047dc <HAL_DMA2D_ConfigLayer+0x6c>
  __HAL_LOCK(hdma2d);
 8004848:	2002      	movs	r0, #2
}
 800484a:	4770      	bx	lr
 800484c:	00ccfff0 	.word	0x00ccfff0

08004850 <DSI_ConfigPacketHeader>:
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8004850:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8004854:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8004858:	9b00      	ldr	r3, [sp, #0]
 800485a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800485e:	66c2      	str	r2, [r0, #108]	; 0x6c
}
 8004860:	4770      	bx	lr

08004862 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8004862:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004866:	4605      	mov	r5, r0
 8004868:	4689      	mov	r9, r1
 800486a:	4617      	mov	r7, r2
 800486c:	4698      	mov	r8, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800486e:	f7ff fb47 	bl	8003f00 <HAL_GetTick>
 8004872:	4606      	mov	r6, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004874:	682c      	ldr	r4, [r5, #0]
 8004876:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8004878:	f013 0f01 	tst.w	r3, #1
 800487c:	d107      	bne.n	800488e <DSI_ShortWrite+0x2c>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800487e:	f7ff fb3f 	bl	8003f00 <HAL_GetTick>
 8004882:	1b80      	subs	r0, r0, r6
 8004884:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004888:	d9f4      	bls.n	8004874 <DSI_ShortWrite+0x12>
    {
      return HAL_TIMEOUT;
 800488a:	2003      	movs	r0, #3
 800488c:	e008      	b.n	80048a0 <DSI_ShortWrite+0x3e>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800488e:	ea47 1389 	orr.w	r3, r7, r9, lsl #6
 8004892:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
 8004896:	9a08      	ldr	r2, [sp, #32]
 8004898:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800489c:	66e3      	str	r3, [r4, #108]	; 0x6c

  return HAL_OK;
 800489e:	2000      	movs	r0, #0
}
 80048a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080048a4 <HAL_DSI_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 80048a4:	4770      	bx	lr
	...

080048a8 <HAL_DSI_Init>:
  if (hdsi == NULL)
 80048a8:	2800      	cmp	r0, #0
 80048aa:	f000 80bd 	beq.w	8004a28 <HAL_DSI_Init+0x180>
{
 80048ae:	b570      	push	{r4, r5, r6, lr}
 80048b0:	b082      	sub	sp, #8
 80048b2:	460d      	mov	r5, r1
 80048b4:	4604      	mov	r4, r0
  if (hdsi->State == HAL_DSI_STATE_RESET)
 80048b6:	7c43      	ldrb	r3, [r0, #17]
 80048b8:	b31b      	cbz	r3, 8004902 <HAL_DSI_Init+0x5a>
  hdsi->State = HAL_DSI_STATE_BUSY;
 80048ba:	2303      	movs	r3, #3
 80048bc:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 80048be:	2300      	movs	r3, #0
 80048c0:	9300      	str	r3, [sp, #0]
 80048c2:	6822      	ldr	r2, [r4, #0]
 80048c4:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 80048c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048cc:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
 80048d0:	6823      	ldr	r3, [r4, #0]
 80048d2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80048d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048da:	9300      	str	r3, [sp, #0]
 80048dc:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 80048de:	f7ff fb0f 	bl	8003f00 <HAL_GetTick>
 80048e2:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80048e4:	6823      	ldr	r3, [r4, #0]
 80048e6:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80048ea:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 80048ee:	d10b      	bne.n	8004908 <HAL_DSI_Init+0x60>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80048f0:	f7ff fb06 	bl	8003f00 <HAL_GetTick>
 80048f4:	1b80      	subs	r0, r0, r6
 80048f6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80048fa:	d9f3      	bls.n	80048e4 <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 80048fc:	2003      	movs	r0, #3
}
 80048fe:	b002      	add	sp, #8
 8004900:	bd70      	pop	{r4, r5, r6, pc}
    HAL_DSI_MspInit(hdsi);
 8004902:	f7ff ffcf 	bl	80048a4 <HAL_DSI_MspInit>
 8004906:	e7d8      	b.n	80048ba <HAL_DSI_Init+0x12>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8004908:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 800490c:	4a47      	ldr	r2, [pc, #284]	; (8004a2c <HAL_DSI_Init+0x184>)
 800490e:	400a      	ands	r2, r1
 8004910:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8004914:	6821      	ldr	r1, [r4, #0]
 8004916:	f8d1 2430 	ldr.w	r2, [r1, #1072]	; 0x430
 800491a:	6828      	ldr	r0, [r5, #0]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800491c:	686b      	ldr	r3, [r5, #4]
 800491e:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8004920:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8004924:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8004926:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800492a:	4313      	orrs	r3, r2
 800492c:	f8c1 3430 	str.w	r3, [r1, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 8004930:	2300      	movs	r3, #0
 8004932:	9301      	str	r3, [sp, #4]
 8004934:	6822      	ldr	r2, [r4, #0]
 8004936:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 800493a:	f043 0301 	orr.w	r3, r3, #1
 800493e:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
 8004942:	6823      	ldr	r3, [r4, #0]
 8004944:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	9301      	str	r3, [sp, #4]
 800494e:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 8004950:	2001      	movs	r0, #1
 8004952:	f7fe fddb 	bl	800350c <HAL_Delay>
  tickstart = HAL_GetTick();
 8004956:	f7ff fad3 	bl	8003f00 <HAL_GetTick>
 800495a:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800495c:	6823      	ldr	r3, [r4, #0]
 800495e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8004962:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004966:	d107      	bne.n	8004978 <HAL_DSI_Init+0xd0>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004968:	f7ff faca 	bl	8003f00 <HAL_GetTick>
 800496c:	1b80      	subs	r0, r0, r6
 800496e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004972:	d9f3      	bls.n	800495c <HAL_DSI_Init+0xb4>
      return HAL_TIMEOUT;
 8004974:	2003      	movs	r0, #3
 8004976:	e7c2      	b.n	80048fe <HAL_DSI_Init+0x56>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8004978:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800497c:	f042 0206 	orr.w	r2, r2, #6
 8004980:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8004984:	6822      	ldr	r2, [r4, #0]
 8004986:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800498a:	f023 0303 	bic.w	r3, r3, #3
 800498e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8004992:	6822      	ldr	r2, [r4, #0]
 8004994:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004998:	6861      	ldr	r1, [r4, #4]
 800499a:	430b      	orrs	r3, r1
 800499c:	f043 0301 	orr.w	r3, r3, #1
 80049a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 80049a4:	6822      	ldr	r2, [r4, #0]
 80049a6:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 80049aa:	f023 0303 	bic.w	r3, r3, #3
 80049ae:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80049b2:	6822      	ldr	r2, [r4, #0]
 80049b4:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 80049b8:	68e1      	ldr	r1, [r4, #12]
 80049ba:	430b      	orrs	r3, r1
 80049bc:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 80049c0:	6822      	ldr	r2, [r4, #0]
 80049c2:	6893      	ldr	r3, [r2, #8]
 80049c4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80049c8:	6093      	str	r3, [r2, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80049ca:	6822      	ldr	r2, [r4, #0]
 80049cc:	6893      	ldr	r3, [r2, #8]
 80049ce:	68a1      	ldr	r1, [r4, #8]
 80049d0:	430b      	orrs	r3, r1
 80049d2:	6093      	str	r3, [r2, #8]
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 80049d4:	686b      	ldr	r3, [r5, #4]
 80049d6:	b903      	cbnz	r3, 80049da <HAL_DSI_Init+0x132>
 80049d8:	2301      	movs	r3, #1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80049da:	4a15      	ldr	r2, [pc, #84]	; (8004a30 <HAL_DSI_Init+0x188>)
 80049dc:	fb02 f303 	mul.w	r3, r2, r3
 80049e0:	68aa      	ldr	r2, [r5, #8]
 80049e2:	f002 0203 	and.w	r2, r2, #3
 80049e6:	4093      	lsls	r3, r2
 80049e8:	682a      	ldr	r2, [r5, #0]
 80049ea:	f246 11a8 	movw	r1, #25000	; 0x61a8
 80049ee:	fb01 f202 	mul.w	r2, r1, r2
 80049f2:	fbb3 f3f2 	udiv	r3, r3, r2
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80049f6:	6821      	ldr	r1, [r4, #0]
 80049f8:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
 80049fc:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8004a00:	f8c1 2418 	str.w	r2, [r1, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8004a04:	6821      	ldr	r1, [r4, #0]
 8004a06:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	f8c1 3418 	str.w	r3, [r1, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 8004a10:	6823      	ldr	r3, [r4, #0]
 8004a12:	2000      	movs	r0, #0
 8004a14:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8004a18:	6823      	ldr	r3, [r4, #0]
 8004a1a:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8004a1e:	61a0      	str	r0, [r4, #24]
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8004a20:	6160      	str	r0, [r4, #20]
  hdsi->State = HAL_DSI_STATE_READY;
 8004a22:	2301      	movs	r3, #1
 8004a24:	7463      	strb	r3, [r4, #17]
  return HAL_OK;
 8004a26:	e76a      	b.n	80048fe <HAL_DSI_Init+0x56>
    return HAL_ERROR;
 8004a28:	2001      	movs	r0, #1
}
 8004a2a:	4770      	bx	lr
 8004a2c:	fffc8603 	.word	0xfffc8603
 8004a30:	003d0900 	.word	0x003d0900

08004a34 <HAL_DSI_MspDeInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspDeInit could be implemented in the user file
   */
}
 8004a34:	4770      	bx	lr

08004a36 <HAL_DSI_DeInit>:
  if (hdsi == NULL)
 8004a36:	2800      	cmp	r0, #0
 8004a38:	d04a      	beq.n	8004ad0 <HAL_DSI_DeInit+0x9a>
{
 8004a3a:	b530      	push	{r4, r5, lr}
 8004a3c:	b085      	sub	sp, #20
 8004a3e:	4604      	mov	r4, r0
  hdsi->State = HAL_DSI_STATE_BUSY;
 8004a40:	2303      	movs	r3, #3
 8004a42:	7443      	strb	r3, [r0, #17]
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8004a44:	2500      	movs	r5, #0
 8004a46:	9500      	str	r5, [sp, #0]
 8004a48:	6802      	ldr	r2, [r0, #0]
 8004a4a:	f8d2 3404 	ldr.w	r3, [r2, #1028]	; 0x404
 8004a4e:	f023 0308 	bic.w	r3, r3, #8
 8004a52:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
 8004a56:	6803      	ldr	r3, [r0, #0]
 8004a58:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8004a5c:	f002 0208 	and.w	r2, r2, #8
 8004a60:	9200      	str	r2, [sp, #0]
 8004a62:	9a00      	ldr	r2, [sp, #0]
  __HAL_DSI_DISABLE(hdsi);
 8004a64:	9501      	str	r5, [sp, #4]
 8004a66:	685a      	ldr	r2, [r3, #4]
 8004a68:	f022 0201 	bic.w	r2, r2, #1
 8004a6c:	605a      	str	r2, [r3, #4]
 8004a6e:	6803      	ldr	r3, [r0, #0]
 8004a70:	685a      	ldr	r2, [r3, #4]
 8004a72:	f002 0201 	and.w	r2, r2, #1
 8004a76:	9201      	str	r2, [sp, #4]
 8004a78:	9a01      	ldr	r2, [sp, #4]
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8004a7a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004a7e:	f022 0206 	bic.w	r2, r2, #6
 8004a82:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  __HAL_DSI_PLL_DISABLE(hdsi);
 8004a86:	9502      	str	r5, [sp, #8]
 8004a88:	6802      	ldr	r2, [r0, #0]
 8004a8a:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8004a8e:	f023 0301 	bic.w	r3, r3, #1
 8004a92:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
 8004a96:	6803      	ldr	r3, [r0, #0]
 8004a98:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8004a9c:	f002 0201 	and.w	r2, r2, #1
 8004aa0:	9202      	str	r2, [sp, #8]
 8004aa2:	9a02      	ldr	r2, [sp, #8]
  __HAL_DSI_REG_DISABLE(hdsi);
 8004aa4:	9503      	str	r5, [sp, #12]
 8004aa6:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8004aaa:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004aae:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8004ab2:	6803      	ldr	r3, [r0, #0]
 8004ab4:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8004ab8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004abc:	9303      	str	r3, [sp, #12]
 8004abe:	9b03      	ldr	r3, [sp, #12]
  HAL_DSI_MspDeInit(hdsi);
 8004ac0:	f7ff ffb8 	bl	8004a34 <HAL_DSI_MspDeInit>
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8004ac4:	6165      	str	r5, [r4, #20]
  hdsi->State = HAL_DSI_STATE_RESET;
 8004ac6:	7465      	strb	r5, [r4, #17]
  __HAL_UNLOCK(hdsi);
 8004ac8:	7425      	strb	r5, [r4, #16]
  return HAL_OK;
 8004aca:	4628      	mov	r0, r5
}
 8004acc:	b005      	add	sp, #20
 8004ace:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8004ad0:	2001      	movs	r0, #1
}
 8004ad2:	4770      	bx	lr

08004ad4 <HAL_DSI_ConfigVideoMode>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004ad4:	7c02      	ldrb	r2, [r0, #16]
 8004ad6:	2a01      	cmp	r2, #1
 8004ad8:	f000 8123 	beq.w	8004d22 <HAL_DSI_ConfigVideoMode+0x24e>
{
 8004adc:	b430      	push	{r4, r5}
 8004ade:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	7402      	strb	r2, [r0, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8004ae4:	6800      	ldr	r0, [r0, #0]
 8004ae6:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8004ae8:	f022 0201 	bic.w	r2, r2, #1
 8004aec:	6342      	str	r2, [r0, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8004aee:	6818      	ldr	r0, [r3, #0]
 8004af0:	f8d0 2400 	ldr.w	r2, [r0, #1024]	; 0x400
 8004af4:	f022 0201 	bic.w	r2, r2, #1
 8004af8:	f8c0 2400 	str.w	r2, [r0, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8004afc:	6818      	ldr	r0, [r3, #0]
 8004afe:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004b00:	f022 0203 	bic.w	r2, r2, #3
 8004b04:	6382      	str	r2, [r0, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8004b06:	6818      	ldr	r0, [r3, #0]
 8004b08:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004b0a:	68cc      	ldr	r4, [r1, #12]
 8004b0c:	4322      	orrs	r2, r4
 8004b0e:	6382      	str	r2, [r0, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8004b10:	6818      	ldr	r0, [r3, #0]
 8004b12:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004b14:	4a84      	ldr	r2, [pc, #528]	; (8004d28 <HAL_DSI_ConfigVideoMode+0x254>)
 8004b16:	4022      	ands	r2, r4
 8004b18:	63c2      	str	r2, [r0, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8004b1a:	6818      	ldr	r0, [r3, #0]
 8004b1c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8004b1e:	690c      	ldr	r4, [r1, #16]
 8004b20:	4322      	orrs	r2, r4
 8004b22:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8004b24:	6818      	ldr	r0, [r3, #0]
 8004b26:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004b28:	4c80      	ldr	r4, [pc, #512]	; (8004d2c <HAL_DSI_ConfigVideoMode+0x258>)
 8004b2a:	4022      	ands	r2, r4
 8004b2c:	6402      	str	r2, [r0, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8004b2e:	6818      	ldr	r0, [r3, #0]
 8004b30:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004b32:	694d      	ldr	r5, [r1, #20]
 8004b34:	432a      	orrs	r2, r5
 8004b36:	6402      	str	r2, [r0, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8004b38:	6818      	ldr	r0, [r3, #0]
 8004b3a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004b3c:	4022      	ands	r2, r4
 8004b3e:	6442      	str	r2, [r0, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8004b40:	6818      	ldr	r0, [r3, #0]
 8004b42:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004b44:	698c      	ldr	r4, [r1, #24]
 8004b46:	4322      	orrs	r2, r4
 8004b48:	6442      	str	r2, [r0, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8004b4a:	6818      	ldr	r0, [r3, #0]
 8004b4c:	68c2      	ldr	r2, [r0, #12]
 8004b4e:	f022 0203 	bic.w	r2, r2, #3
 8004b52:	60c2      	str	r2, [r0, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8004b54:	6818      	ldr	r0, [r3, #0]
 8004b56:	68c2      	ldr	r2, [r0, #12]
 8004b58:	680c      	ldr	r4, [r1, #0]
 8004b5a:	4322      	orrs	r2, r4
 8004b5c:	60c2      	str	r2, [r0, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8004b5e:	6818      	ldr	r0, [r3, #0]
 8004b60:	6942      	ldr	r2, [r0, #20]
 8004b62:	f022 0207 	bic.w	r2, r2, #7
 8004b66:	6142      	str	r2, [r0, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8004b68:	681c      	ldr	r4, [r3, #0]
 8004b6a:	6960      	ldr	r0, [r4, #20]
 8004b6c:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8004b6e:	6a0d      	ldr	r5, [r1, #32]
 8004b70:	432a      	orrs	r2, r5
 8004b72:	69cd      	ldr	r5, [r1, #28]
 8004b74:	432a      	orrs	r2, r5
 8004b76:	4302      	orrs	r2, r0
 8004b78:	6162      	str	r2, [r4, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8004b7a:	6818      	ldr	r0, [r3, #0]
 8004b7c:	6902      	ldr	r2, [r0, #16]
 8004b7e:	f022 020f 	bic.w	r2, r2, #15
 8004b82:	6102      	str	r2, [r0, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8004b84:	6818      	ldr	r0, [r3, #0]
 8004b86:	6902      	ldr	r2, [r0, #16]
 8004b88:	684c      	ldr	r4, [r1, #4]
 8004b8a:	4322      	orrs	r2, r4
 8004b8c:	6102      	str	r2, [r0, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8004b8e:	6818      	ldr	r0, [r3, #0]
 8004b90:	f8d0 2400 	ldr.w	r2, [r0, #1024]	; 0x400
 8004b94:	f022 020e 	bic.w	r2, r2, #14
 8004b98:	f8c0 2400 	str.w	r2, [r0, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8004b9c:	6818      	ldr	r0, [r3, #0]
 8004b9e:	f8d0 2400 	ldr.w	r2, [r0, #1024]	; 0x400
 8004ba2:	684c      	ldr	r4, [r1, #4]
 8004ba4:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8004ba8:	f8c0 2400 	str.w	r2, [r0, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8004bac:	684a      	ldr	r2, [r1, #4]
 8004bae:	2a03      	cmp	r2, #3
 8004bb0:	f000 80ac 	beq.w	8004d0c <HAL_DSI_ConfigVideoMode+0x238>
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8004bb4:	6818      	ldr	r0, [r3, #0]
 8004bb6:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8004bb8:	4c5d      	ldr	r4, [pc, #372]	; (8004d30 <HAL_DSI_ConfigVideoMode+0x25c>)
 8004bba:	4022      	ands	r2, r4
 8004bbc:	6482      	str	r2, [r0, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8004bbe:	6818      	ldr	r0, [r3, #0]
 8004bc0:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8004bc2:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8004bc4:	432a      	orrs	r2, r5
 8004bc6:	6482      	str	r2, [r0, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8004bc8:	6818      	ldr	r0, [r3, #0]
 8004bca:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8004bcc:	4022      	ands	r2, r4
 8004bce:	64c2      	str	r2, [r0, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8004bd0:	6818      	ldr	r0, [r3, #0]
 8004bd2:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8004bd4:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8004bd6:	4322      	orrs	r2, r4
 8004bd8:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8004bda:	6818      	ldr	r0, [r3, #0]
 8004bdc:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8004bde:	4a55      	ldr	r2, [pc, #340]	; (8004d34 <HAL_DSI_ConfigVideoMode+0x260>)
 8004be0:	4022      	ands	r2, r4
 8004be2:	6502      	str	r2, [r0, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8004be4:	6818      	ldr	r0, [r3, #0]
 8004be6:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8004be8:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 8004bea:	4322      	orrs	r2, r4
 8004bec:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8004bee:	681c      	ldr	r4, [r3, #0]
 8004bf0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004bf2:	4851      	ldr	r0, [pc, #324]	; (8004d38 <HAL_DSI_ConfigVideoMode+0x264>)
 8004bf4:	4002      	ands	r2, r0
 8004bf6:	6562      	str	r2, [r4, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8004bf8:	681c      	ldr	r4, [r3, #0]
 8004bfa:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004bfc:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8004bfe:	432a      	orrs	r2, r5
 8004c00:	6562      	str	r2, [r4, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8004c02:	681c      	ldr	r4, [r3, #0]
 8004c04:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8004c06:	4002      	ands	r2, r0
 8004c08:	65a2      	str	r2, [r4, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8004c0a:	681c      	ldr	r4, [r3, #0]
 8004c0c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8004c0e:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 8004c10:	432a      	orrs	r2, r5
 8004c12:	65a2      	str	r2, [r4, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8004c14:	681c      	ldr	r4, [r3, #0]
 8004c16:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004c18:	4002      	ands	r2, r0
 8004c1a:	65e2      	str	r2, [r4, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8004c1c:	6818      	ldr	r0, [r3, #0]
 8004c1e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8004c20:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8004c22:	4322      	orrs	r2, r4
 8004c24:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8004c26:	6818      	ldr	r0, [r3, #0]
 8004c28:	6e04      	ldr	r4, [r0, #96]	; 0x60
 8004c2a:	4a3f      	ldr	r2, [pc, #252]	; (8004d28 <HAL_DSI_ConfigVideoMode+0x254>)
 8004c2c:	4022      	ands	r2, r4
 8004c2e:	6602      	str	r2, [r0, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8004c30:	6818      	ldr	r0, [r3, #0]
 8004c32:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8004c34:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 8004c36:	4322      	orrs	r2, r4
 8004c38:	6602      	str	r2, [r0, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8004c3a:	6818      	ldr	r0, [r3, #0]
 8004c3c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004c3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c42:	6382      	str	r2, [r0, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8004c44:	6818      	ldr	r0, [r3, #0]
 8004c46:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004c48:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 8004c4a:	4322      	orrs	r2, r4
 8004c4c:	6382      	str	r2, [r0, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8004c4e:	6818      	ldr	r0, [r3, #0]
 8004c50:	6982      	ldr	r2, [r0, #24]
 8004c52:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8004c56:	6182      	str	r2, [r0, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8004c58:	6818      	ldr	r0, [r3, #0]
 8004c5a:	6982      	ldr	r2, [r0, #24]
 8004c5c:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 8004c5e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8004c62:	6182      	str	r2, [r0, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8004c64:	6818      	ldr	r0, [r3, #0]
 8004c66:	6982      	ldr	r2, [r0, #24]
 8004c68:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004c6c:	6182      	str	r2, [r0, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8004c6e:	6818      	ldr	r0, [r3, #0]
 8004c70:	6982      	ldr	r2, [r0, #24]
 8004c72:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8004c74:	4322      	orrs	r2, r4
 8004c76:	6182      	str	r2, [r0, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8004c78:	6818      	ldr	r0, [r3, #0]
 8004c7a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004c7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c80:	6382      	str	r2, [r0, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8004c82:	6818      	ldr	r0, [r3, #0]
 8004c84:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004c86:	6d0c      	ldr	r4, [r1, #80]	; 0x50
 8004c88:	4322      	orrs	r2, r4
 8004c8a:	6382      	str	r2, [r0, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8004c8c:	6818      	ldr	r0, [r3, #0]
 8004c8e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004c90:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c94:	6382      	str	r2, [r0, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8004c96:	6818      	ldr	r0, [r3, #0]
 8004c98:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004c9a:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8004c9c:	4322      	orrs	r2, r4
 8004c9e:	6382      	str	r2, [r0, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8004ca0:	6818      	ldr	r0, [r3, #0]
 8004ca2:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004ca4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ca8:	6382      	str	r2, [r0, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8004caa:	6818      	ldr	r0, [r3, #0]
 8004cac:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004cae:	6d8c      	ldr	r4, [r1, #88]	; 0x58
 8004cb0:	4322      	orrs	r2, r4
 8004cb2:	6382      	str	r2, [r0, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8004cb4:	6818      	ldr	r0, [r3, #0]
 8004cb6:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004cb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cbc:	6382      	str	r2, [r0, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8004cbe:	6818      	ldr	r0, [r3, #0]
 8004cc0:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004cc2:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
 8004cc4:	4322      	orrs	r2, r4
 8004cc6:	6382      	str	r2, [r0, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8004cc8:	6818      	ldr	r0, [r3, #0]
 8004cca:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004ccc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004cd0:	6382      	str	r2, [r0, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8004cd2:	6818      	ldr	r0, [r3, #0]
 8004cd4:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004cd6:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 8004cd8:	4322      	orrs	r2, r4
 8004cda:	6382      	str	r2, [r0, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8004cdc:	6818      	ldr	r0, [r3, #0]
 8004cde:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004ce0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ce4:	6382      	str	r2, [r0, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8004ce6:	6818      	ldr	r0, [r3, #0]
 8004ce8:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004cea:	6e4c      	ldr	r4, [r1, #100]	; 0x64
 8004cec:	4322      	orrs	r2, r4
 8004cee:	6382      	str	r2, [r0, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8004cf0:	6818      	ldr	r0, [r3, #0]
 8004cf2:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004cf4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004cf8:	6382      	str	r2, [r0, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8004cfa:	6818      	ldr	r0, [r3, #0]
 8004cfc:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004cfe:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004d00:	430a      	orrs	r2, r1
 8004d02:	6382      	str	r2, [r0, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004d04:	2000      	movs	r0, #0
 8004d06:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
}
 8004d08:	bc30      	pop	{r4, r5}
 8004d0a:	4770      	bx	lr
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8004d0c:	6818      	ldr	r0, [r3, #0]
 8004d0e:	6902      	ldr	r2, [r0, #16]
 8004d10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d14:	6102      	str	r2, [r0, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8004d16:	6818      	ldr	r0, [r3, #0]
 8004d18:	6902      	ldr	r2, [r0, #16]
 8004d1a:	688c      	ldr	r4, [r1, #8]
 8004d1c:	4322      	orrs	r2, r4
 8004d1e:	6102      	str	r2, [r0, #16]
 8004d20:	e748      	b.n	8004bb4 <HAL_DSI_ConfigVideoMode+0xe0>
  __HAL_LOCK(hdsi);
 8004d22:	2002      	movs	r0, #2
}
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	ffffc000 	.word	0xffffc000
 8004d2c:	ffffe000 	.word	0xffffe000
 8004d30:	fffff000 	.word	0xfffff000
 8004d34:	ffff8000 	.word	0xffff8000
 8004d38:	fffffc00 	.word	0xfffffc00

08004d3c <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004d3c:	7c02      	ldrb	r2, [r0, #16]
 8004d3e:	2a01      	cmp	r2, #1
 8004d40:	d021      	beq.n	8004d86 <HAL_DSI_Start+0x4a>
{
 8004d42:	b082      	sub	sp, #8
 8004d44:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8004d46:	2201      	movs	r2, #1
 8004d48:	7402      	strb	r2, [r0, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8004d4a:	2000      	movs	r0, #0
 8004d4c:	9000      	str	r0, [sp, #0]
 8004d4e:	6819      	ldr	r1, [r3, #0]
 8004d50:	684a      	ldr	r2, [r1, #4]
 8004d52:	f042 0201 	orr.w	r2, r2, #1
 8004d56:	604a      	str	r2, [r1, #4]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	6851      	ldr	r1, [r2, #4]
 8004d5c:	f001 0101 	and.w	r1, r1, #1
 8004d60:	9100      	str	r1, [sp, #0]
 8004d62:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8004d64:	9001      	str	r0, [sp, #4]
 8004d66:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
 8004d6a:	f041 0108 	orr.w	r1, r1, #8
 8004d6e:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 8004d78:	f002 0208 	and.w	r2, r2, #8
 8004d7c:	9201      	str	r2, [sp, #4]
 8004d7e:	9a01      	ldr	r2, [sp, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004d80:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
}
 8004d82:	b002      	add	sp, #8
 8004d84:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8004d86:	2002      	movs	r0, #2
}
 8004d88:	4770      	bx	lr

08004d8a <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8004d8a:	b510      	push	{r4, lr}
 8004d8c:	b082      	sub	sp, #8
 8004d8e:	4604      	mov	r4, r0
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8004d90:	7c00      	ldrb	r0, [r0, #16]
 8004d92:	2801      	cmp	r0, #1
 8004d94:	d00a      	beq.n	8004dac <HAL_DSI_ShortWrite+0x22>
 8004d96:	2001      	movs	r0, #1
 8004d98:	7420      	strb	r0, [r4, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8004d9a:	9804      	ldr	r0, [sp, #16]
 8004d9c:	9000      	str	r0, [sp, #0]
 8004d9e:	4620      	mov	r0, r4
 8004da0:	f7ff fd5f 	bl	8004862 <DSI_ShortWrite>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004da4:	2300      	movs	r3, #0
 8004da6:	7423      	strb	r3, [r4, #16]

  return status;
}
 8004da8:	b002      	add	sp, #8
 8004daa:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdsi);
 8004dac:	2002      	movs	r0, #2
 8004dae:	e7fb      	b.n	8004da8 <HAL_DSI_ShortWrite+0x1e>

08004db0 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8004db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004db4:	b082      	sub	sp, #8
 8004db6:	461d      	mov	r5, r3
 8004db8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8004dba:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8004dbe:	7c03      	ldrb	r3, [r0, #16]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d053      	beq.n	8004e6c <HAL_DSI_LongWrite+0xbc>
 8004dc4:	4604      	mov	r4, r0
 8004dc6:	468a      	mov	sl, r1
 8004dc8:	4617      	mov	r7, r2
 8004dca:	2301      	movs	r3, #1
 8004dcc:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8004dce:	f7ff f897 	bl	8003f00 <HAL_GetTick>
 8004dd2:	4681      	mov	r9, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004dd4:	6822      	ldr	r2, [r4, #0]
 8004dd6:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8004dd8:	f013 0f01 	tst.w	r3, #1
 8004ddc:	d10a      	bne.n	8004df4 <HAL_DSI_LongWrite+0x44>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004dde:	f7ff f88f 	bl	8003f00 <HAL_GetTick>
 8004de2:	eba0 0009 	sub.w	r0, r0, r9
 8004de6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004dea:	d9f3      	bls.n	8004dd4 <HAL_DSI_LongWrite+0x24>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8004dec:	2300      	movs	r3, #0
 8004dee:	7423      	strb	r3, [r4, #16]

      return HAL_TIMEOUT;
 8004df0:	2003      	movs	r0, #3
 8004df2:	e038      	b.n	8004e66 <HAL_DSI_LongWrite+0xb6>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8004df4:	46ac      	mov	ip, r5
 8004df6:	2d03      	cmp	r5, #3
 8004df8:	bf28      	it	cs
 8004dfa:	f04f 0c03 	movcs.w	ip, #3

  for (count = 0U; count < nbBytes; count++)
 8004dfe:	2300      	movs	r3, #0
 8004e00:	e005      	b.n	8004e0e <HAL_DSI_LongWrite+0x5e>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8004e02:	f818 1003 	ldrb.w	r1, [r8, r3]
 8004e06:	3301      	adds	r3, #1
 8004e08:	00d8      	lsls	r0, r3, #3
 8004e0a:	4081      	lsls	r1, r0
 8004e0c:	430e      	orrs	r6, r1
  for (count = 0U; count < nbBytes; count++)
 8004e0e:	4563      	cmp	r3, ip
 8004e10:	d3f7      	bcc.n	8004e02 <HAL_DSI_LongWrite+0x52>
  }
  hdsi->Instance->GPDR = fifoword;
 8004e12:	6716      	str	r6, [r2, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8004e14:	eba5 060c 	sub.w	r6, r5, ip
  pparams += nbBytes;
 8004e18:	eb08 000c 	add.w	r0, r8, ip
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8004e1c:	e00f      	b.n	8004e3e <HAL_DSI_LongWrite+0x8e>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
    fifoword = 0U;
    for (count = 0U; count < nbBytes; count++)
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8004e1e:	f810 e00c 	ldrb.w	lr, [r0, ip]
 8004e22:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8004e26:	fa0e fe02 	lsl.w	lr, lr, r2
 8004e2a:	ea43 030e 	orr.w	r3, r3, lr
    for (count = 0U; count < nbBytes; count++)
 8004e2e:	f10c 0c01 	add.w	ip, ip, #1
 8004e32:	458c      	cmp	ip, r1
 8004e34:	d3f3      	bcc.n	8004e1e <HAL_DSI_LongWrite+0x6e>
    }
    hdsi->Instance->GPDR = fifoword;
 8004e36:	6822      	ldr	r2, [r4, #0]
 8004e38:	6713      	str	r3, [r2, #112]	; 0x70

    uicounter -= nbBytes;
 8004e3a:	1a76      	subs	r6, r6, r1
    pparams += nbBytes;
 8004e3c:	4408      	add	r0, r1
  while (uicounter != 0U)
 8004e3e:	b136      	cbz	r6, 8004e4e <HAL_DSI_LongWrite+0x9e>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8004e40:	4631      	mov	r1, r6
 8004e42:	2e04      	cmp	r6, #4
 8004e44:	bf28      	it	cs
 8004e46:	2104      	movcs	r1, #4
    fifoword = 0U;
 8004e48:	2300      	movs	r3, #0
    for (count = 0U; count < nbBytes; count++)
 8004e4a:	469c      	mov	ip, r3
 8004e4c:	e7f1      	b.n	8004e32 <HAL_DSI_LongWrite+0x82>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8004e4e:	1c6b      	adds	r3, r5, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004e50:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004e54:	9200      	str	r2, [sp, #0]
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	463a      	mov	r2, r7
 8004e5a:	4651      	mov	r1, sl
 8004e5c:	6820      	ldr	r0, [r4, #0]
 8004e5e:	f7ff fcf7 	bl	8004850 <DSI_ConfigPacketHeader>
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004e62:	2000      	movs	r0, #0
 8004e64:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 8004e66:	b002      	add	sp, #8
 8004e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hdsi);
 8004e6c:	2002      	movs	r0, #2
 8004e6e:	e7fa      	b.n	8004e66 <HAL_DSI_LongWrite+0xb6>

08004e70 <HAL_GPIO_Init>:
	assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
	assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
	assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

	/* Configure the port pins */
	for (position = 0; position < GPIO_NUMBER; position++) {
 8004e70:	2300      	movs	r3, #0
 8004e72:	2b0f      	cmp	r3, #15
 8004e74:	f200 80f4 	bhi.w	8005060 <HAL_GPIO_Init+0x1f0>
void HAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init) {
 8004e78:	b570      	push	{r4, r5, r6, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	e066      	b.n	8004f4c <HAL_GPIO_Init+0xdc>
			if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT)
					|| ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)) {
				/* Check the Speed parameter */
				assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
				/* Configure the IO Speed */
				temp = GPIOx->OSPEEDR;
 8004e7e:	6885      	ldr	r5, [r0, #8]
				temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004e80:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8004e84:	2403      	movs	r4, #3
 8004e86:	fa04 f40e 	lsl.w	r4, r4, lr
 8004e8a:	ea25 0504 	bic.w	r5, r5, r4
				temp |= (GPIO_Init->Speed << (position * 2));
 8004e8e:	68cc      	ldr	r4, [r1, #12]
 8004e90:	fa04 f40e 	lsl.w	r4, r4, lr
 8004e94:	432c      	orrs	r4, r5
				GPIOx->OSPEEDR = temp;
 8004e96:	6084      	str	r4, [r0, #8]

				/* Configure the IO Output Type */
				temp = GPIOx->OTYPER;
 8004e98:	6844      	ldr	r4, [r0, #4]
				temp &= ~(GPIO_OTYPER_OT_0 << position);
 8004e9a:	ea24 0402 	bic.w	r4, r4, r2
				temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos)
 8004e9e:	684a      	ldr	r2, [r1, #4]
 8004ea0:	f3c2 1200 	ubfx	r2, r2, #4, #1
						<< position);
 8004ea4:	409a      	lsls	r2, r3
				temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos)
 8004ea6:	4322      	orrs	r2, r4
				GPIOx->OTYPER = temp;
 8004ea8:	6042      	str	r2, [r0, #4]
 8004eaa:	e05d      	b.n	8004f68 <HAL_GPIO_Init+0xf8>
			if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
				/* Check the Alternate function parameter */
				assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

				/* Configure Alternate function mapped with the current IO */
				temp = GPIOx->AFR[position >> 3];
 8004eac:	08dc      	lsrs	r4, r3, #3
 8004eae:	3408      	adds	r4, #8
 8004eb0:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
				temp &= ~((uint32_t) 0xF
						<< ((uint32_t) (position & (uint32_t) 0x07) * 4));
 8004eb4:	f003 0507 	and.w	r5, r3, #7
 8004eb8:	00ad      	lsls	r5, r5, #2
 8004eba:	f04f 0e0f 	mov.w	lr, #15
 8004ebe:	fa0e fe05 	lsl.w	lr, lr, r5
				temp &= ~((uint32_t) 0xF
 8004ec2:	ea22 0e0e 	bic.w	lr, r2, lr
				temp |= ((uint32_t) (GPIO_Init->Alternate)
 8004ec6:	690a      	ldr	r2, [r1, #16]
						<< (((uint32_t) position & (uint32_t) 0x07) * 4));
 8004ec8:	40aa      	lsls	r2, r5
				temp |= ((uint32_t) (GPIO_Init->Alternate)
 8004eca:	ea42 020e 	orr.w	r2, r2, lr
				GPIOx->AFR[position >> 3] = temp;
 8004ece:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8004ed2:	e05d      	b.n	8004f90 <HAL_GPIO_Init+0x120>
				/* Enable SYSCFG Clock */
				__HAL_RCC_SYSCFG_CLK_ENABLE();

				temp = SYSCFG->EXTICR[position >> 2];
				temp &= ~(((uint32_t) 0x0F) << (4 * (position & 0x03)));
				temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 8004ed4:	2209      	movs	r2, #9
 8004ed6:	e000      	b.n	8004eda <HAL_GPIO_Init+0x6a>
 8004ed8:	2200      	movs	r2, #0
						<< (4 * (position & 0x03)));
 8004eda:	fa02 f20e 	lsl.w	r2, r2, lr
				temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 8004ede:	432a      	orrs	r2, r5
				SYSCFG->EXTICR[position >> 2] = temp;
 8004ee0:	3402      	adds	r4, #2
 8004ee2:	4d60      	ldr	r5, [pc, #384]	; (8005064 <HAL_GPIO_Init+0x1f4>)
 8004ee4:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

				/* Clear Rising Falling edge configuration */
				temp = EXTI->RTSR;
 8004ee8:	4a5f      	ldr	r2, [pc, #380]	; (8005068 <HAL_GPIO_Init+0x1f8>)
 8004eea:	6894      	ldr	r4, [r2, #8]
				temp &= ~((uint32_t) iocurrent);
 8004eec:	ea6f 020c 	mvn.w	r2, ip
 8004ef0:	ea24 050c 	bic.w	r5, r4, ip
				if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u) {
 8004ef4:	684e      	ldr	r6, [r1, #4]
 8004ef6:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 8004efa:	d001      	beq.n	8004f00 <HAL_GPIO_Init+0x90>
					temp |= iocurrent;
 8004efc:	ea4c 0504 	orr.w	r5, ip, r4
				}
				EXTI->RTSR = temp;
 8004f00:	4c59      	ldr	r4, [pc, #356]	; (8005068 <HAL_GPIO_Init+0x1f8>)
 8004f02:	60a5      	str	r5, [r4, #8]

				temp = EXTI->FTSR;
 8004f04:	68e4      	ldr	r4, [r4, #12]
				temp &= ~((uint32_t) iocurrent);
 8004f06:	ea02 0504 	and.w	r5, r2, r4
				if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u) {
 8004f0a:	684e      	ldr	r6, [r1, #4]
 8004f0c:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8004f10:	d001      	beq.n	8004f16 <HAL_GPIO_Init+0xa6>
					temp |= iocurrent;
 8004f12:	ea4c 0504 	orr.w	r5, ip, r4
				}
				EXTI->FTSR = temp;
 8004f16:	4c54      	ldr	r4, [pc, #336]	; (8005068 <HAL_GPIO_Init+0x1f8>)
 8004f18:	60e5      	str	r5, [r4, #12]

				temp = EXTI->EMR;
 8004f1a:	6864      	ldr	r4, [r4, #4]
				temp &= ~((uint32_t) iocurrent);
 8004f1c:	ea02 0504 	and.w	r5, r2, r4
				if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u) {
 8004f20:	684e      	ldr	r6, [r1, #4]
 8004f22:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8004f26:	d001      	beq.n	8004f2c <HAL_GPIO_Init+0xbc>
					temp |= iocurrent;
 8004f28:	ea4c 0504 	orr.w	r5, ip, r4
				}
				EXTI->EMR = temp;
 8004f2c:	4c4e      	ldr	r4, [pc, #312]	; (8005068 <HAL_GPIO_Init+0x1f8>)
 8004f2e:	6065      	str	r5, [r4, #4]

				/* Clear EXTI line configuration */
				temp = EXTI->IMR;
 8004f30:	6824      	ldr	r4, [r4, #0]
				temp &= ~((uint32_t) iocurrent);
 8004f32:	4022      	ands	r2, r4
				if ((GPIO_Init->Mode & EXTI_IT) != 0x00u) {
 8004f34:	684d      	ldr	r5, [r1, #4]
 8004f36:	f415 3f80 	tst.w	r5, #65536	; 0x10000
 8004f3a:	d001      	beq.n	8004f40 <HAL_GPIO_Init+0xd0>
					temp |= iocurrent;
 8004f3c:	ea4c 0204 	orr.w	r2, ip, r4
				}
				EXTI->IMR = temp;
 8004f40:	4c49      	ldr	r4, [pc, #292]	; (8005068 <HAL_GPIO_Init+0x1f8>)
 8004f42:	6022      	str	r2, [r4, #0]
	for (position = 0; position < GPIO_NUMBER; position++) {
 8004f44:	3301      	adds	r3, #1
 8004f46:	2b0f      	cmp	r3, #15
 8004f48:	f200 8088 	bhi.w	800505c <HAL_GPIO_Init+0x1ec>
		ioposition = ((uint32_t) 0x01) << position;
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	409a      	lsls	r2, r3
		iocurrent = (uint32_t) (GPIO_Init->Pin) & ioposition;
 8004f50:	680c      	ldr	r4, [r1, #0]
 8004f52:	ea04 0c02 	and.w	ip, r4, r2
		if (iocurrent == ioposition) {
 8004f56:	ea32 0404 	bics.w	r4, r2, r4
 8004f5a:	d1f3      	bne.n	8004f44 <HAL_GPIO_Init+0xd4>
			if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT)
 8004f5c:	684c      	ldr	r4, [r1, #4]
 8004f5e:	f004 0403 	and.w	r4, r4, #3
					|| ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)) {
 8004f62:	3c01      	subs	r4, #1
			if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT)
 8004f64:	2c01      	cmp	r4, #1
 8004f66:	d98a      	bls.n	8004e7e <HAL_GPIO_Init+0xe>
			if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) {
 8004f68:	684a      	ldr	r2, [r1, #4]
 8004f6a:	f002 0203 	and.w	r2, r2, #3
 8004f6e:	2a03      	cmp	r2, #3
 8004f70:	d009      	beq.n	8004f86 <HAL_GPIO_Init+0x116>
				temp = GPIOx->PUPDR;
 8004f72:	68c4      	ldr	r4, [r0, #12]
				temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004f74:	005d      	lsls	r5, r3, #1
 8004f76:	2203      	movs	r2, #3
 8004f78:	40aa      	lsls	r2, r5
 8004f7a:	ea24 0402 	bic.w	r4, r4, r2
				temp |= ((GPIO_Init->Pull) << (position * 2));
 8004f7e:	688a      	ldr	r2, [r1, #8]
 8004f80:	40aa      	lsls	r2, r5
 8004f82:	4322      	orrs	r2, r4
				GPIOx->PUPDR = temp;
 8004f84:	60c2      	str	r2, [r0, #12]
			if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
 8004f86:	684a      	ldr	r2, [r1, #4]
 8004f88:	f002 0203 	and.w	r2, r2, #3
 8004f8c:	2a02      	cmp	r2, #2
 8004f8e:	d08d      	beq.n	8004eac <HAL_GPIO_Init+0x3c>
			temp = GPIOx->MODER;
 8004f90:	6804      	ldr	r4, [r0, #0]
			temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004f92:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8004f96:	2203      	movs	r2, #3
 8004f98:	fa02 f20e 	lsl.w	r2, r2, lr
 8004f9c:	ea24 0402 	bic.w	r4, r4, r2
			temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004fa0:	684a      	ldr	r2, [r1, #4]
 8004fa2:	f002 0203 	and.w	r2, r2, #3
 8004fa6:	fa02 f20e 	lsl.w	r2, r2, lr
 8004faa:	4322      	orrs	r2, r4
			GPIOx->MODER = temp;
 8004fac:	6002      	str	r2, [r0, #0]
			if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u) {
 8004fae:	684a      	ldr	r2, [r1, #4]
 8004fb0:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 8004fb4:	d0c6      	beq.n	8004f44 <HAL_GPIO_Init+0xd4>
				__HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fb6:	4a2d      	ldr	r2, [pc, #180]	; (800506c <HAL_GPIO_Init+0x1fc>)
 8004fb8:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8004fba:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8004fbe:	6454      	str	r4, [r2, #68]	; 0x44
 8004fc0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004fc2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004fc6:	9201      	str	r2, [sp, #4]
 8004fc8:	9a01      	ldr	r2, [sp, #4]
				temp = SYSCFG->EXTICR[position >> 2];
 8004fca:	089c      	lsrs	r4, r3, #2
 8004fcc:	1ca5      	adds	r5, r4, #2
 8004fce:	4a25      	ldr	r2, [pc, #148]	; (8005064 <HAL_GPIO_Init+0x1f4>)
 8004fd0:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
				temp &= ~(((uint32_t) 0x0F) << (4 * (position & 0x03)));
 8004fd4:	f003 0e03 	and.w	lr, r3, #3
 8004fd8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8004fdc:	220f      	movs	r2, #15
 8004fde:	fa02 f20e 	lsl.w	r2, r2, lr
 8004fe2:	ea25 0502 	bic.w	r5, r5, r2
				temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 8004fe6:	4a22      	ldr	r2, [pc, #136]	; (8005070 <HAL_GPIO_Init+0x200>)
 8004fe8:	4290      	cmp	r0, r2
 8004fea:	f43f af75 	beq.w	8004ed8 <HAL_GPIO_Init+0x68>
 8004fee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ff2:	4290      	cmp	r0, r2
 8004ff4:	d022      	beq.n	800503c <HAL_GPIO_Init+0x1cc>
 8004ff6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ffa:	4290      	cmp	r0, r2
 8004ffc:	d020      	beq.n	8005040 <HAL_GPIO_Init+0x1d0>
 8004ffe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005002:	4290      	cmp	r0, r2
 8005004:	d01e      	beq.n	8005044 <HAL_GPIO_Init+0x1d4>
 8005006:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800500a:	4290      	cmp	r0, r2
 800500c:	d01c      	beq.n	8005048 <HAL_GPIO_Init+0x1d8>
 800500e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005012:	4290      	cmp	r0, r2
 8005014:	d01a      	beq.n	800504c <HAL_GPIO_Init+0x1dc>
 8005016:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800501a:	4290      	cmp	r0, r2
 800501c:	d018      	beq.n	8005050 <HAL_GPIO_Init+0x1e0>
 800501e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005022:	4290      	cmp	r0, r2
 8005024:	d016      	beq.n	8005054 <HAL_GPIO_Init+0x1e4>
 8005026:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800502a:	4290      	cmp	r0, r2
 800502c:	d014      	beq.n	8005058 <HAL_GPIO_Init+0x1e8>
 800502e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005032:	4290      	cmp	r0, r2
 8005034:	f43f af4e 	beq.w	8004ed4 <HAL_GPIO_Init+0x64>
 8005038:	220a      	movs	r2, #10
 800503a:	e74e      	b.n	8004eda <HAL_GPIO_Init+0x6a>
 800503c:	2201      	movs	r2, #1
 800503e:	e74c      	b.n	8004eda <HAL_GPIO_Init+0x6a>
 8005040:	2202      	movs	r2, #2
 8005042:	e74a      	b.n	8004eda <HAL_GPIO_Init+0x6a>
 8005044:	2203      	movs	r2, #3
 8005046:	e748      	b.n	8004eda <HAL_GPIO_Init+0x6a>
 8005048:	2204      	movs	r2, #4
 800504a:	e746      	b.n	8004eda <HAL_GPIO_Init+0x6a>
 800504c:	2205      	movs	r2, #5
 800504e:	e744      	b.n	8004eda <HAL_GPIO_Init+0x6a>
 8005050:	2206      	movs	r2, #6
 8005052:	e742      	b.n	8004eda <HAL_GPIO_Init+0x6a>
 8005054:	2207      	movs	r2, #7
 8005056:	e740      	b.n	8004eda <HAL_GPIO_Init+0x6a>
 8005058:	2208      	movs	r2, #8
 800505a:	e73e      	b.n	8004eda <HAL_GPIO_Init+0x6a>
			}
		}
	}
}
 800505c:	b002      	add	sp, #8
 800505e:	bd70      	pop	{r4, r5, r6, pc}
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	40013800 	.word	0x40013800
 8005068:	40013c00 	.word	0x40013c00
 800506c:	40023800 	.word	0x40023800
 8005070:	40020000 	.word	0x40020000

08005074 <HAL_GPIO_WritePin>:
		GPIO_PinState PinState) {
	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));
	assert_param(IS_GPIO_PIN_ACTION(PinState));

	if (PinState != GPIO_PIN_RESET) {
 8005074:	b10a      	cbz	r2, 800507a <HAL_GPIO_WritePin+0x6>
		GPIOx->BSRR = GPIO_Pin;
 8005076:	6181      	str	r1, [r0, #24]
 8005078:	4770      	bx	lr
	} else {
		GPIOx->BSRR = (uint32_t) GPIO_Pin << 16;
 800507a:	0409      	lsls	r1, r1, #16
 800507c:	6181      	str	r1, [r0, #24]
	}
}
 800507e:	4770      	bx	lr

08005080 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005080:	6803      	ldr	r3, [r0, #0]
 8005082:	699a      	ldr	r2, [r3, #24]
 8005084:	f012 0f02 	tst.w	r2, #2
 8005088:	d001      	beq.n	800508e <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 800508a:	2200      	movs	r2, #0
 800508c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800508e:	6803      	ldr	r3, [r0, #0]
 8005090:	699a      	ldr	r2, [r3, #24]
 8005092:	f012 0f01 	tst.w	r2, #1
 8005096:	d103      	bne.n	80050a0 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005098:	699a      	ldr	r2, [r3, #24]
 800509a:	f042 0201 	orr.w	r2, r2, #1
 800509e:	619a      	str	r2, [r3, #24]
  }
}
 80050a0:	4770      	bx	lr

080050a2 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80050a2:	b410      	push	{r4}
 80050a4:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80050a6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80050aa:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80050ae:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80050b0:	4321      	orrs	r1, r4
 80050b2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80050b6:	6802      	ldr	r2, [r0, #0]
 80050b8:	6853      	ldr	r3, [r2, #4]
 80050ba:	0d64      	lsrs	r4, r4, #21
 80050bc:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 80050c0:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 80050c4:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 80050c8:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 80050cc:	f044 0403 	orr.w	r4, r4, #3
 80050d0:	ea23 0304 	bic.w	r3, r3, r4
 80050d4:	430b      	orrs	r3, r1
 80050d6:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80050d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050dc:	4770      	bx	lr

080050de <I2C_IsErrorOccurred>:
{
 80050de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050e2:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 80050e4:	6803      	ldr	r3, [r0, #0]
 80050e6:	699e      	ldr	r6, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80050e8:	f016 0610 	ands.w	r6, r6, #16
 80050ec:	d07e      	beq.n	80051ec <I2C_IsErrorOccurred+0x10e>
 80050ee:	460d      	mov	r5, r1
 80050f0:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050f2:	2210      	movs	r2, #16
 80050f4:	61da      	str	r2, [r3, #28]
  uint32_t error_code = 0;
 80050f6:	2600      	movs	r6, #0
  HAL_StatusTypeDef status = HAL_OK;
 80050f8:	4637      	mov	r7, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80050fa:	6823      	ldr	r3, [r4, #0]
 80050fc:	6998      	ldr	r0, [r3, #24]
 80050fe:	f010 0f20 	tst.w	r0, #32
 8005102:	d132      	bne.n	800516a <I2C_IsErrorOccurred+0x8c>
 8005104:	bb8f      	cbnz	r7, 800516a <I2C_IsErrorOccurred+0x8c>
      if (Timeout != HAL_MAX_DELAY)
 8005106:	f1b5 3fff 	cmp.w	r5, #4294967295
 800510a:	d0f6      	beq.n	80050fa <I2C_IsErrorOccurred+0x1c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800510c:	f7fe fef8 	bl	8003f00 <HAL_GetTick>
 8005110:	eba0 0008 	sub.w	r0, r0, r8
 8005114:	42a8      	cmp	r0, r5
 8005116:	d801      	bhi.n	800511c <I2C_IsErrorOccurred+0x3e>
 8005118:	2d00      	cmp	r5, #0
 800511a:	d1ee      	bne.n	80050fa <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800511c:	6821      	ldr	r1, [r4, #0]
 800511e:	684a      	ldr	r2, [r1, #4]
 8005120:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
          tmp2 = hi2c->Mode;
 8005124:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8005128:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800512a:	6988      	ldr	r0, [r1, #24]
 800512c:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8005130:	d004      	beq.n	800513c <I2C_IsErrorOccurred+0x5e>
              (tmp2 != HAL_I2C_MODE_SLAVE))
 8005132:	3b20      	subs	r3, #32
 8005134:	bf18      	it	ne
 8005136:	2301      	movne	r3, #1
              (tmp1 != I2C_CR2_STOP) && \
 8005138:	b902      	cbnz	r2, 800513c <I2C_IsErrorOccurred+0x5e>
 800513a:	b973      	cbnz	r3, 800515a <I2C_IsErrorOccurred+0x7c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800513c:	6823      	ldr	r3, [r4, #0]
 800513e:	699b      	ldr	r3, [r3, #24]
 8005140:	f013 0f20 	tst.w	r3, #32
 8005144:	d1d9      	bne.n	80050fa <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005146:	f7fe fedb 	bl	8003f00 <HAL_GetTick>
 800514a:	eba0 0008 	sub.w	r0, r0, r8
 800514e:	2819      	cmp	r0, #25
 8005150:	d9f4      	bls.n	800513c <I2C_IsErrorOccurred+0x5e>
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8005152:	f046 0620 	orr.w	r6, r6, #32
              status = HAL_ERROR;
 8005156:	2701      	movs	r7, #1
              break;
 8005158:	e7cf      	b.n	80050fa <I2C_IsErrorOccurred+0x1c>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800515a:	684b      	ldr	r3, [r1, #4]
 800515c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005160:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 8005162:	f7fe fecd 	bl	8003f00 <HAL_GetTick>
 8005166:	4680      	mov	r8, r0
 8005168:	e7e8      	b.n	800513c <I2C_IsErrorOccurred+0x5e>
    if (status == HAL_OK)
 800516a:	b90f      	cbnz	r7, 8005170 <I2C_IsErrorOccurred+0x92>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800516c:	2220      	movs	r2, #32
 800516e:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8005170:	f046 0604 	orr.w	r6, r6, #4
    status = HAL_ERROR;
 8005174:	2501      	movs	r5, #1
  itflag = hi2c->Instance->ISR;
 8005176:	6822      	ldr	r2, [r4, #0]
 8005178:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800517a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800517e:	d005      	beq.n	800518c <I2C_IsErrorOccurred+0xae>
    error_code |= HAL_I2C_ERROR_BERR;
 8005180:	f046 0601 	orr.w	r6, r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005184:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005188:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 800518a:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800518c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005190:	d006      	beq.n	80051a0 <I2C_IsErrorOccurred+0xc2>
    error_code |= HAL_I2C_ERROR_OVR;
 8005192:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005196:	6822      	ldr	r2, [r4, #0]
 8005198:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800519c:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 800519e:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80051a0:	f413 7f00 	tst.w	r3, #512	; 0x200
 80051a4:	d024      	beq.n	80051f0 <I2C_IsErrorOccurred+0x112>
    error_code |= HAL_I2C_ERROR_ARLO;
 80051a6:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80051aa:	6823      	ldr	r3, [r4, #0]
 80051ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051b0:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 80051b2:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 80051b4:	4620      	mov	r0, r4
 80051b6:	f7ff ff63 	bl	8005080 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80051ba:	6822      	ldr	r2, [r4, #0]
 80051bc:	6853      	ldr	r3, [r2, #4]
 80051be:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80051c2:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80051c6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80051ca:	f023 0301 	bic.w	r3, r3, #1
 80051ce:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 80051d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80051d2:	4333      	orrs	r3, r6
 80051d4:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80051d6:	2320      	movs	r3, #32
 80051d8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051dc:	2300      	movs	r3, #0
 80051de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80051e2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80051e6:	4628      	mov	r0, r5
 80051e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_StatusTypeDef status = HAL_OK;
 80051ec:	2500      	movs	r5, #0
 80051ee:	e7c2      	b.n	8005176 <I2C_IsErrorOccurred+0x98>
  if (status != HAL_OK)
 80051f0:	2d00      	cmp	r5, #0
 80051f2:	d0f8      	beq.n	80051e6 <I2C_IsErrorOccurred+0x108>
 80051f4:	e7de      	b.n	80051b4 <I2C_IsErrorOccurred+0xd6>

080051f6 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80051f6:	b570      	push	{r4, r5, r6, lr}
 80051f8:	4604      	mov	r4, r0
 80051fa:	460d      	mov	r5, r1
 80051fc:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80051fe:	6823      	ldr	r3, [r4, #0]
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	f013 0f02 	tst.w	r3, #2
 8005206:	d11d      	bne.n	8005244 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005208:	4632      	mov	r2, r6
 800520a:	4629      	mov	r1, r5
 800520c:	4620      	mov	r0, r4
 800520e:	f7ff ff66 	bl	80050de <I2C_IsErrorOccurred>
 8005212:	b9c8      	cbnz	r0, 8005248 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8005214:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005218:	d0f1      	beq.n	80051fe <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800521a:	f7fe fe71 	bl	8003f00 <HAL_GetTick>
 800521e:	1b80      	subs	r0, r0, r6
 8005220:	42a8      	cmp	r0, r5
 8005222:	d801      	bhi.n	8005228 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8005224:	2d00      	cmp	r5, #0
 8005226:	d1ea      	bne.n	80051fe <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005228:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800522a:	f043 0320 	orr.w	r3, r3, #32
 800522e:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005230:	2320      	movs	r3, #32
 8005232:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005236:	2300      	movs	r3, #0
 8005238:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800523c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8005240:	2001      	movs	r0, #1
 8005242:	e000      	b.n	8005246 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8005244:	2000      	movs	r0, #0
}
 8005246:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8005248:	2001      	movs	r0, #1
 800524a:	e7fc      	b.n	8005246 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

0800524c <I2C_WaitOnFlagUntilTimeout>:
{
 800524c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005250:	4606      	mov	r6, r0
 8005252:	4688      	mov	r8, r1
 8005254:	4617      	mov	r7, r2
 8005256:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005258:	6834      	ldr	r4, [r6, #0]
 800525a:	69a4      	ldr	r4, [r4, #24]
 800525c:	ea38 0404 	bics.w	r4, r8, r4
 8005260:	bf0c      	ite	eq
 8005262:	2401      	moveq	r4, #1
 8005264:	2400      	movne	r4, #0
 8005266:	42bc      	cmp	r4, r7
 8005268:	d118      	bne.n	800529c <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800526a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800526e:	d0f3      	beq.n	8005258 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005270:	f7fe fe46 	bl	8003f00 <HAL_GetTick>
 8005274:	9b06      	ldr	r3, [sp, #24]
 8005276:	1ac0      	subs	r0, r0, r3
 8005278:	42a8      	cmp	r0, r5
 800527a:	d801      	bhi.n	8005280 <I2C_WaitOnFlagUntilTimeout+0x34>
 800527c:	2d00      	cmp	r5, #0
 800527e:	d1eb      	bne.n	8005258 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005280:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8005282:	f043 0320 	orr.w	r3, r3, #32
 8005286:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005288:	2320      	movs	r3, #32
 800528a:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800528e:	2300      	movs	r3, #0
 8005290:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8005294:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8005298:	2001      	movs	r0, #1
 800529a:	e000      	b.n	800529e <I2C_WaitOnFlagUntilTimeout+0x52>
  return HAL_OK;
 800529c:	2000      	movs	r0, #0
}
 800529e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080052a4 <I2C_RequestMemoryWrite>:
{
 80052a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052a8:	b082      	sub	sp, #8
 80052aa:	4604      	mov	r4, r0
 80052ac:	4690      	mov	r8, r2
 80052ae:	461d      	mov	r5, r3
 80052b0:	9e08      	ldr	r6, [sp, #32]
 80052b2:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80052b4:	4b19      	ldr	r3, [pc, #100]	; (800531c <I2C_RequestMemoryWrite+0x78>)
 80052b6:	9300      	str	r3, [sp, #0]
 80052b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80052bc:	b2ea      	uxtb	r2, r5
 80052be:	f7ff fef0 	bl	80050a2 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052c2:	463a      	mov	r2, r7
 80052c4:	4631      	mov	r1, r6
 80052c6:	4620      	mov	r0, r4
 80052c8:	f7ff ff95 	bl	80051f6 <I2C_WaitOnTXISFlagUntilTimeout>
 80052cc:	b9f8      	cbnz	r0, 800530e <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80052ce:	2d01      	cmp	r5, #1
 80052d0:	d10e      	bne.n	80052f0 <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80052d2:	6823      	ldr	r3, [r4, #0]
 80052d4:	fa5f f288 	uxtb.w	r2, r8
 80052d8:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80052da:	9700      	str	r7, [sp, #0]
 80052dc:	4633      	mov	r3, r6
 80052de:	2200      	movs	r2, #0
 80052e0:	2180      	movs	r1, #128	; 0x80
 80052e2:	4620      	mov	r0, r4
 80052e4:	f7ff ffb2 	bl	800524c <I2C_WaitOnFlagUntilTimeout>
 80052e8:	b9a8      	cbnz	r0, 8005316 <I2C_RequestMemoryWrite+0x72>
}
 80052ea:	b002      	add	sp, #8
 80052ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80052f0:	6823      	ldr	r3, [r4, #0]
 80052f2:	ea4f 2218 	mov.w	r2, r8, lsr #8
 80052f6:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052f8:	463a      	mov	r2, r7
 80052fa:	4631      	mov	r1, r6
 80052fc:	4620      	mov	r0, r4
 80052fe:	f7ff ff7a 	bl	80051f6 <I2C_WaitOnTXISFlagUntilTimeout>
 8005302:	b930      	cbnz	r0, 8005312 <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005304:	6823      	ldr	r3, [r4, #0]
 8005306:	fa5f f288 	uxtb.w	r2, r8
 800530a:	629a      	str	r2, [r3, #40]	; 0x28
 800530c:	e7e5      	b.n	80052da <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 800530e:	2001      	movs	r0, #1
 8005310:	e7eb      	b.n	80052ea <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 8005312:	2001      	movs	r0, #1
 8005314:	e7e9      	b.n	80052ea <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 8005316:	2001      	movs	r0, #1
 8005318:	e7e7      	b.n	80052ea <I2C_RequestMemoryWrite+0x46>
 800531a:	bf00      	nop
 800531c:	80002000 	.word	0x80002000

08005320 <I2C_RequestMemoryRead>:
{
 8005320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005324:	b082      	sub	sp, #8
 8005326:	4604      	mov	r4, r0
 8005328:	4690      	mov	r8, r2
 800532a:	461d      	mov	r5, r3
 800532c:	9e08      	ldr	r6, [sp, #32]
 800532e:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005330:	4b18      	ldr	r3, [pc, #96]	; (8005394 <I2C_RequestMemoryRead+0x74>)
 8005332:	9300      	str	r3, [sp, #0]
 8005334:	2300      	movs	r3, #0
 8005336:	b2ea      	uxtb	r2, r5
 8005338:	f7ff feb3 	bl	80050a2 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800533c:	463a      	mov	r2, r7
 800533e:	4631      	mov	r1, r6
 8005340:	4620      	mov	r0, r4
 8005342:	f7ff ff58 	bl	80051f6 <I2C_WaitOnTXISFlagUntilTimeout>
 8005346:	b9f8      	cbnz	r0, 8005388 <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005348:	2d01      	cmp	r5, #1
 800534a:	d10e      	bne.n	800536a <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800534c:	6823      	ldr	r3, [r4, #0]
 800534e:	fa5f f288 	uxtb.w	r2, r8
 8005352:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005354:	9700      	str	r7, [sp, #0]
 8005356:	4633      	mov	r3, r6
 8005358:	2200      	movs	r2, #0
 800535a:	2140      	movs	r1, #64	; 0x40
 800535c:	4620      	mov	r0, r4
 800535e:	f7ff ff75 	bl	800524c <I2C_WaitOnFlagUntilTimeout>
 8005362:	b9a8      	cbnz	r0, 8005390 <I2C_RequestMemoryRead+0x70>
}
 8005364:	b002      	add	sp, #8
 8005366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800536a:	6823      	ldr	r3, [r4, #0]
 800536c:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8005370:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005372:	463a      	mov	r2, r7
 8005374:	4631      	mov	r1, r6
 8005376:	4620      	mov	r0, r4
 8005378:	f7ff ff3d 	bl	80051f6 <I2C_WaitOnTXISFlagUntilTimeout>
 800537c:	b930      	cbnz	r0, 800538c <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800537e:	6823      	ldr	r3, [r4, #0]
 8005380:	fa5f f288 	uxtb.w	r2, r8
 8005384:	629a      	str	r2, [r3, #40]	; 0x28
 8005386:	e7e5      	b.n	8005354 <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 8005388:	2001      	movs	r0, #1
 800538a:	e7eb      	b.n	8005364 <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 800538c:	2001      	movs	r0, #1
 800538e:	e7e9      	b.n	8005364 <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 8005390:	2001      	movs	r0, #1
 8005392:	e7e7      	b.n	8005364 <I2C_RequestMemoryRead+0x44>
 8005394:	80002000 	.word	0x80002000

08005398 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8005398:	b570      	push	{r4, r5, r6, lr}
 800539a:	4605      	mov	r5, r0
 800539c:	460c      	mov	r4, r1
 800539e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053a0:	682b      	ldr	r3, [r5, #0]
 80053a2:	699b      	ldr	r3, [r3, #24]
 80053a4:	f013 0f20 	tst.w	r3, #32
 80053a8:	d11a      	bne.n	80053e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80053aa:	4632      	mov	r2, r6
 80053ac:	4621      	mov	r1, r4
 80053ae:	4628      	mov	r0, r5
 80053b0:	f7ff fe95 	bl	80050de <I2C_IsErrorOccurred>
 80053b4:	b9b0      	cbnz	r0, 80053e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053b6:	f7fe fda3 	bl	8003f00 <HAL_GetTick>
 80053ba:	1b80      	subs	r0, r0, r6
 80053bc:	42a0      	cmp	r0, r4
 80053be:	d801      	bhi.n	80053c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 80053c0:	2c00      	cmp	r4, #0
 80053c2:	d1ed      	bne.n	80053a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053c4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80053c6:	f043 0320 	orr.w	r3, r3, #32
 80053ca:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80053cc:	2320      	movs	r3, #32
 80053ce:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053d2:	2300      	movs	r3, #0
 80053d4:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80053d8:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 80053dc:	2001      	movs	r0, #1
}
 80053de:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80053e0:	2000      	movs	r0, #0
 80053e2:	e7fc      	b.n	80053de <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 80053e4:	2001      	movs	r0, #1
 80053e6:	e7fa      	b.n	80053de <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

080053e8 <HAL_I2C_MspInit>:
}
 80053e8:	4770      	bx	lr
	...

080053ec <HAL_I2C_Init>:
  if (hi2c == NULL)
 80053ec:	2800      	cmp	r0, #0
 80053ee:	d057      	beq.n	80054a0 <HAL_I2C_Init+0xb4>
{
 80053f0:	b510      	push	{r4, lr}
 80053f2:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80053f4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d041      	beq.n	8005480 <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80053fc:	2324      	movs	r3, #36	; 0x24
 80053fe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8005402:	6822      	ldr	r2, [r4, #0]
 8005404:	6813      	ldr	r3, [r2, #0]
 8005406:	f023 0301 	bic.w	r3, r3, #1
 800540a:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800540c:	6863      	ldr	r3, [r4, #4]
 800540e:	6822      	ldr	r2, [r4, #0]
 8005410:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8005414:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005416:	6822      	ldr	r2, [r4, #0]
 8005418:	6893      	ldr	r3, [r2, #8]
 800541a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800541e:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005420:	68e3      	ldr	r3, [r4, #12]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d031      	beq.n	800548a <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005426:	68a3      	ldr	r3, [r4, #8]
 8005428:	6822      	ldr	r2, [r4, #0]
 800542a:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 800542e:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005430:	68e3      	ldr	r3, [r4, #12]
 8005432:	2b02      	cmp	r3, #2
 8005434:	d02f      	beq.n	8005496 <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005436:	6822      	ldr	r2, [r4, #0]
 8005438:	6851      	ldr	r1, [r2, #4]
 800543a:	4b1a      	ldr	r3, [pc, #104]	; (80054a4 <HAL_I2C_Init+0xb8>)
 800543c:	430b      	orrs	r3, r1
 800543e:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005440:	6822      	ldr	r2, [r4, #0]
 8005442:	68d3      	ldr	r3, [r2, #12]
 8005444:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005448:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800544a:	6923      	ldr	r3, [r4, #16]
 800544c:	6962      	ldr	r2, [r4, #20]
 800544e:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005450:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005452:	6822      	ldr	r2, [r4, #0]
 8005454:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005458:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800545a:	69e3      	ldr	r3, [r4, #28]
 800545c:	6a21      	ldr	r1, [r4, #32]
 800545e:	6822      	ldr	r2, [r4, #0]
 8005460:	430b      	orrs	r3, r1
 8005462:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8005464:	6822      	ldr	r2, [r4, #0]
 8005466:	6813      	ldr	r3, [r2, #0]
 8005468:	f043 0301 	orr.w	r3, r3, #1
 800546c:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800546e:	2000      	movs	r0, #0
 8005470:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005472:	2320      	movs	r3, #32
 8005474:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005478:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800547a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800547e:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8005480:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8005484:	f7ff ffb0 	bl	80053e8 <HAL_I2C_MspInit>
 8005488:	e7b8      	b.n	80053fc <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800548a:	68a3      	ldr	r3, [r4, #8]
 800548c:	6822      	ldr	r2, [r4, #0]
 800548e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005492:	6093      	str	r3, [r2, #8]
 8005494:	e7cc      	b.n	8005430 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005496:	6823      	ldr	r3, [r4, #0]
 8005498:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800549c:	605a      	str	r2, [r3, #4]
 800549e:	e7ca      	b.n	8005436 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 80054a0:	2001      	movs	r0, #1
}
 80054a2:	4770      	bx	lr
 80054a4:	02008000 	.word	0x02008000

080054a8 <HAL_I2C_Mem_Write>:
{
 80054a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054ac:	b083      	sub	sp, #12
 80054ae:	460d      	mov	r5, r1
 80054b0:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 80054b4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80054b6:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 80054ba:	b2c9      	uxtb	r1, r1
 80054bc:	2920      	cmp	r1, #32
 80054be:	f040 80bc 	bne.w	800563a <HAL_I2C_Mem_Write+0x192>
 80054c2:	4604      	mov	r4, r0
 80054c4:	4690      	mov	r8, r2
 80054c6:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 80054c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80054ca:	f1ba 0f00 	cmp.w	sl, #0
 80054ce:	bf18      	it	ne
 80054d0:	2b00      	cmpne	r3, #0
 80054d2:	d016      	beq.n	8005502 <HAL_I2C_Mem_Write+0x5a>
    __HAL_LOCK(hi2c);
 80054d4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80054d8:	2b01      	cmp	r3, #1
 80054da:	f000 80b2 	beq.w	8005642 <HAL_I2C_Mem_Write+0x19a>
 80054de:	f04f 0b01 	mov.w	fp, #1
 80054e2:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80054e6:	f7fe fd0b 	bl	8003f00 <HAL_GetTick>
 80054ea:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80054ec:	9000      	str	r0, [sp, #0]
 80054ee:	2319      	movs	r3, #25
 80054f0:	465a      	mov	r2, fp
 80054f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80054f6:	4620      	mov	r0, r4
 80054f8:	f7ff fea8 	bl	800524c <I2C_WaitOnFlagUntilTimeout>
 80054fc:	b130      	cbz	r0, 800550c <HAL_I2C_Mem_Write+0x64>
      return HAL_ERROR;
 80054fe:	2001      	movs	r0, #1
 8005500:	e09c      	b.n	800563c <HAL_I2C_Mem_Write+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005502:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005506:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8005508:	2001      	movs	r0, #1
 800550a:	e097      	b.n	800563c <HAL_I2C_Mem_Write+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800550c:	2321      	movs	r3, #33	; 0x21
 800550e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005512:	2340      	movs	r3, #64	; 0x40
 8005514:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005518:	2300      	movs	r3, #0
 800551a:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800551c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800551e:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8005520:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005524:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005526:	9601      	str	r6, [sp, #4]
 8005528:	9700      	str	r7, [sp, #0]
 800552a:	464b      	mov	r3, r9
 800552c:	4642      	mov	r2, r8
 800552e:	4629      	mov	r1, r5
 8005530:	4620      	mov	r0, r4
 8005532:	f7ff feb7 	bl	80052a4 <I2C_RequestMemoryWrite>
 8005536:	b970      	cbnz	r0, 8005556 <HAL_I2C_Mem_Write+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005538:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800553a:	b29b      	uxth	r3, r3
 800553c:	2bff      	cmp	r3, #255	; 0xff
 800553e:	d90f      	bls.n	8005560 <HAL_I2C_Mem_Write+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005540:	22ff      	movs	r2, #255	; 0xff
 8005542:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005544:	2300      	movs	r3, #0
 8005546:	9300      	str	r3, [sp, #0]
 8005548:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800554c:	4629      	mov	r1, r5
 800554e:	4620      	mov	r0, r4
 8005550:	f7ff fda7 	bl	80050a2 <I2C_TransferConfig>
 8005554:	e021      	b.n	800559a <HAL_I2C_Mem_Write+0xf2>
      __HAL_UNLOCK(hi2c);
 8005556:	2300      	movs	r3, #0
 8005558:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800555c:	4658      	mov	r0, fp
 800555e:	e06d      	b.n	800563c <HAL_I2C_Mem_Write+0x194>
      hi2c->XferSize = hi2c->XferCount;
 8005560:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005562:	b292      	uxth	r2, r2
 8005564:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005566:	2300      	movs	r3, #0
 8005568:	9300      	str	r3, [sp, #0]
 800556a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800556e:	b2d2      	uxtb	r2, r2
 8005570:	4629      	mov	r1, r5
 8005572:	4620      	mov	r0, r4
 8005574:	f7ff fd95 	bl	80050a2 <I2C_TransferConfig>
 8005578:	e00f      	b.n	800559a <HAL_I2C_Mem_Write+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 800557a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800557c:	b292      	uxth	r2, r2
 800557e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005580:	2300      	movs	r3, #0
 8005582:	9300      	str	r3, [sp, #0]
 8005584:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005588:	b2d2      	uxtb	r2, r2
 800558a:	4629      	mov	r1, r5
 800558c:	4620      	mov	r0, r4
 800558e:	f7ff fd88 	bl	80050a2 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8005592:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005594:	b29b      	uxth	r3, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	d033      	beq.n	8005602 <HAL_I2C_Mem_Write+0x15a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800559a:	4632      	mov	r2, r6
 800559c:	4639      	mov	r1, r7
 800559e:	4620      	mov	r0, r4
 80055a0:	f7ff fe29 	bl	80051f6 <I2C_WaitOnTXISFlagUntilTimeout>
 80055a4:	2800      	cmp	r0, #0
 80055a6:	d14e      	bne.n	8005646 <HAL_I2C_Mem_Write+0x19e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80055a8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80055aa:	6823      	ldr	r3, [r4, #0]
 80055ac:	7812      	ldrb	r2, [r2, #0]
 80055ae:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80055b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055b2:	3301      	adds	r3, #1
 80055b4:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80055b6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	3b01      	subs	r3, #1
 80055bc:	b29b      	uxth	r3, r3
 80055be:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80055c0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80055c2:	3b01      	subs	r3, #1
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80055c8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80055ca:	b292      	uxth	r2, r2
 80055cc:	2a00      	cmp	r2, #0
 80055ce:	d0e0      	beq.n	8005592 <HAL_I2C_Mem_Write+0xea>
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d1de      	bne.n	8005592 <HAL_I2C_Mem_Write+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80055d4:	9600      	str	r6, [sp, #0]
 80055d6:	463b      	mov	r3, r7
 80055d8:	2200      	movs	r2, #0
 80055da:	2180      	movs	r1, #128	; 0x80
 80055dc:	4620      	mov	r0, r4
 80055de:	f7ff fe35 	bl	800524c <I2C_WaitOnFlagUntilTimeout>
 80055e2:	bb90      	cbnz	r0, 800564a <HAL_I2C_Mem_Write+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	2bff      	cmp	r3, #255	; 0xff
 80055ea:	d9c6      	bls.n	800557a <HAL_I2C_Mem_Write+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80055ec:	22ff      	movs	r2, #255	; 0xff
 80055ee:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80055f0:	2300      	movs	r3, #0
 80055f2:	9300      	str	r3, [sp, #0]
 80055f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80055f8:	4629      	mov	r1, r5
 80055fa:	4620      	mov	r0, r4
 80055fc:	f7ff fd51 	bl	80050a2 <I2C_TransferConfig>
 8005600:	e7c7      	b.n	8005592 <HAL_I2C_Mem_Write+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005602:	4632      	mov	r2, r6
 8005604:	4639      	mov	r1, r7
 8005606:	4620      	mov	r0, r4
 8005608:	f7ff fec6 	bl	8005398 <I2C_WaitOnSTOPFlagUntilTimeout>
 800560c:	b9f8      	cbnz	r0, 800564e <HAL_I2C_Mem_Write+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800560e:	6823      	ldr	r3, [r4, #0]
 8005610:	2220      	movs	r2, #32
 8005612:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005614:	6821      	ldr	r1, [r4, #0]
 8005616:	684b      	ldr	r3, [r1, #4]
 8005618:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800561c:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005620:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005624:	f023 0301 	bic.w	r3, r3, #1
 8005628:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800562a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800562e:	2300      	movs	r3, #0
 8005630:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8005634:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8005638:	e000      	b.n	800563c <HAL_I2C_Mem_Write+0x194>
    return HAL_BUSY;
 800563a:	2002      	movs	r0, #2
}
 800563c:	b003      	add	sp, #12
 800563e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8005642:	2002      	movs	r0, #2
 8005644:	e7fa      	b.n	800563c <HAL_I2C_Mem_Write+0x194>
        return HAL_ERROR;
 8005646:	2001      	movs	r0, #1
 8005648:	e7f8      	b.n	800563c <HAL_I2C_Mem_Write+0x194>
          return HAL_ERROR;
 800564a:	2001      	movs	r0, #1
 800564c:	e7f6      	b.n	800563c <HAL_I2C_Mem_Write+0x194>
      return HAL_ERROR;
 800564e:	2001      	movs	r0, #1
 8005650:	e7f4      	b.n	800563c <HAL_I2C_Mem_Write+0x194>
	...

08005654 <HAL_I2C_Mem_Read>:
{
 8005654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005658:	b083      	sub	sp, #12
 800565a:	460d      	mov	r5, r1
 800565c:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8005660:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005662:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8005666:	b2c9      	uxtb	r1, r1
 8005668:	2920      	cmp	r1, #32
 800566a:	f040 80bd 	bne.w	80057e8 <HAL_I2C_Mem_Read+0x194>
 800566e:	4604      	mov	r4, r0
 8005670:	4690      	mov	r8, r2
 8005672:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8005674:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005676:	f1ba 0f00 	cmp.w	sl, #0
 800567a:	bf18      	it	ne
 800567c:	2b00      	cmpne	r3, #0
 800567e:	d016      	beq.n	80056ae <HAL_I2C_Mem_Read+0x5a>
    __HAL_LOCK(hi2c);
 8005680:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005684:	2b01      	cmp	r3, #1
 8005686:	f000 80b3 	beq.w	80057f0 <HAL_I2C_Mem_Read+0x19c>
 800568a:	f04f 0b01 	mov.w	fp, #1
 800568e:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8005692:	f7fe fc35 	bl	8003f00 <HAL_GetTick>
 8005696:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005698:	9000      	str	r0, [sp, #0]
 800569a:	2319      	movs	r3, #25
 800569c:	465a      	mov	r2, fp
 800569e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80056a2:	4620      	mov	r0, r4
 80056a4:	f7ff fdd2 	bl	800524c <I2C_WaitOnFlagUntilTimeout>
 80056a8:	b130      	cbz	r0, 80056b8 <HAL_I2C_Mem_Read+0x64>
      return HAL_ERROR;
 80056aa:	2001      	movs	r0, #1
 80056ac:	e09d      	b.n	80057ea <HAL_I2C_Mem_Read+0x196>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80056ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056b2:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 80056b4:	2001      	movs	r0, #1
 80056b6:	e098      	b.n	80057ea <HAL_I2C_Mem_Read+0x196>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80056b8:	2322      	movs	r3, #34	; 0x22
 80056ba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80056be:	2340      	movs	r3, #64	; 0x40
 80056c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056c4:	2300      	movs	r3, #0
 80056c6:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80056c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80056ca:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80056cc:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80056d0:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80056d2:	9601      	str	r6, [sp, #4]
 80056d4:	9700      	str	r7, [sp, #0]
 80056d6:	464b      	mov	r3, r9
 80056d8:	4642      	mov	r2, r8
 80056da:	4629      	mov	r1, r5
 80056dc:	4620      	mov	r0, r4
 80056de:	f7ff fe1f 	bl	8005320 <I2C_RequestMemoryRead>
 80056e2:	b970      	cbnz	r0, 8005702 <HAL_I2C_Mem_Read+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	2bff      	cmp	r3, #255	; 0xff
 80056ea:	d90f      	bls.n	800570c <HAL_I2C_Mem_Read+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80056ec:	22ff      	movs	r2, #255	; 0xff
 80056ee:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80056f0:	4b43      	ldr	r3, [pc, #268]	; (8005800 <HAL_I2C_Mem_Read+0x1ac>)
 80056f2:	9300      	str	r3, [sp, #0]
 80056f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80056f8:	4629      	mov	r1, r5
 80056fa:	4620      	mov	r0, r4
 80056fc:	f7ff fcd1 	bl	80050a2 <I2C_TransferConfig>
 8005700:	e021      	b.n	8005746 <HAL_I2C_Mem_Read+0xf2>
      __HAL_UNLOCK(hi2c);
 8005702:	2300      	movs	r3, #0
 8005704:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005708:	4658      	mov	r0, fp
 800570a:	e06e      	b.n	80057ea <HAL_I2C_Mem_Read+0x196>
      hi2c->XferSize = hi2c->XferCount;
 800570c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800570e:	b292      	uxth	r2, r2
 8005710:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005712:	4b3b      	ldr	r3, [pc, #236]	; (8005800 <HAL_I2C_Mem_Read+0x1ac>)
 8005714:	9300      	str	r3, [sp, #0]
 8005716:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800571a:	b2d2      	uxtb	r2, r2
 800571c:	4629      	mov	r1, r5
 800571e:	4620      	mov	r0, r4
 8005720:	f7ff fcbf 	bl	80050a2 <I2C_TransferConfig>
 8005724:	e00f      	b.n	8005746 <HAL_I2C_Mem_Read+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 8005726:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005728:	b292      	uxth	r2, r2
 800572a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800572c:	2300      	movs	r3, #0
 800572e:	9300      	str	r3, [sp, #0]
 8005730:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005734:	b2d2      	uxtb	r2, r2
 8005736:	4629      	mov	r1, r5
 8005738:	4620      	mov	r0, r4
 800573a:	f7ff fcb2 	bl	80050a2 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800573e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005740:	b29b      	uxth	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	d034      	beq.n	80057b0 <HAL_I2C_Mem_Read+0x15c>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005746:	9600      	str	r6, [sp, #0]
 8005748:	463b      	mov	r3, r7
 800574a:	2200      	movs	r2, #0
 800574c:	2104      	movs	r1, #4
 800574e:	4620      	mov	r0, r4
 8005750:	f7ff fd7c 	bl	800524c <I2C_WaitOnFlagUntilTimeout>
 8005754:	2800      	cmp	r0, #0
 8005756:	d14d      	bne.n	80057f4 <HAL_I2C_Mem_Read+0x1a0>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005758:	6823      	ldr	r3, [r4, #0]
 800575a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800575c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800575e:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8005760:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005762:	3301      	adds	r3, #1
 8005764:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8005766:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8005768:	3a01      	subs	r2, #1
 800576a:	b292      	uxth	r2, r2
 800576c:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800576e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005770:	b29b      	uxth	r3, r3
 8005772:	3b01      	subs	r3, #1
 8005774:	b29b      	uxth	r3, r3
 8005776:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005778:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800577a:	b29b      	uxth	r3, r3
 800577c:	2b00      	cmp	r3, #0
 800577e:	d0de      	beq.n	800573e <HAL_I2C_Mem_Read+0xea>
 8005780:	2a00      	cmp	r2, #0
 8005782:	d1dc      	bne.n	800573e <HAL_I2C_Mem_Read+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005784:	9600      	str	r6, [sp, #0]
 8005786:	463b      	mov	r3, r7
 8005788:	2180      	movs	r1, #128	; 0x80
 800578a:	4620      	mov	r0, r4
 800578c:	f7ff fd5e 	bl	800524c <I2C_WaitOnFlagUntilTimeout>
 8005790:	bb90      	cbnz	r0, 80057f8 <HAL_I2C_Mem_Read+0x1a4>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005792:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005794:	b29b      	uxth	r3, r3
 8005796:	2bff      	cmp	r3, #255	; 0xff
 8005798:	d9c5      	bls.n	8005726 <HAL_I2C_Mem_Read+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800579a:	22ff      	movs	r2, #255	; 0xff
 800579c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800579e:	2300      	movs	r3, #0
 80057a0:	9300      	str	r3, [sp, #0]
 80057a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80057a6:	4629      	mov	r1, r5
 80057a8:	4620      	mov	r0, r4
 80057aa:	f7ff fc7a 	bl	80050a2 <I2C_TransferConfig>
 80057ae:	e7c6      	b.n	800573e <HAL_I2C_Mem_Read+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057b0:	4632      	mov	r2, r6
 80057b2:	4639      	mov	r1, r7
 80057b4:	4620      	mov	r0, r4
 80057b6:	f7ff fdef 	bl	8005398 <I2C_WaitOnSTOPFlagUntilTimeout>
 80057ba:	b9f8      	cbnz	r0, 80057fc <HAL_I2C_Mem_Read+0x1a8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057bc:	6823      	ldr	r3, [r4, #0]
 80057be:	2220      	movs	r2, #32
 80057c0:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80057c2:	6821      	ldr	r1, [r4, #0]
 80057c4:	684b      	ldr	r3, [r1, #4]
 80057c6:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80057ca:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80057ce:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80057d2:	f023 0301 	bic.w	r3, r3, #1
 80057d6:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80057d8:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80057dc:	2300      	movs	r3, #0
 80057de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80057e2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 80057e6:	e000      	b.n	80057ea <HAL_I2C_Mem_Read+0x196>
    return HAL_BUSY;
 80057e8:	2002      	movs	r0, #2
}
 80057ea:	b003      	add	sp, #12
 80057ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80057f0:	2002      	movs	r0, #2
 80057f2:	e7fa      	b.n	80057ea <HAL_I2C_Mem_Read+0x196>
        return HAL_ERROR;
 80057f4:	2001      	movs	r0, #1
 80057f6:	e7f8      	b.n	80057ea <HAL_I2C_Mem_Read+0x196>
          return HAL_ERROR;
 80057f8:	2001      	movs	r0, #1
 80057fa:	e7f6      	b.n	80057ea <HAL_I2C_Mem_Read+0x196>
      return HAL_ERROR;
 80057fc:	2001      	movs	r0, #1
 80057fe:	e7f4      	b.n	80057ea <HAL_I2C_Mem_Read+0x196>
 8005800:	80002400 	.word	0x80002400

08005804 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005804:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005806:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800580a:	b2d2      	uxtb	r2, r2
 800580c:	2a20      	cmp	r2, #32
 800580e:	d123      	bne.n	8005858 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005810:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8005814:	2a01      	cmp	r2, #1
 8005816:	d021      	beq.n	800585c <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8005818:	2201      	movs	r2, #1
 800581a:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800581e:	2224      	movs	r2, #36	; 0x24
 8005820:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005824:	6800      	ldr	r0, [r0, #0]
 8005826:	6802      	ldr	r2, [r0, #0]
 8005828:	f022 0201 	bic.w	r2, r2, #1
 800582c:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800582e:	6818      	ldr	r0, [r3, #0]
 8005830:	6802      	ldr	r2, [r0, #0]
 8005832:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005836:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005838:	6818      	ldr	r0, [r3, #0]
 800583a:	6802      	ldr	r2, [r0, #0]
 800583c:	4311      	orrs	r1, r2
 800583e:	6001      	str	r1, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005840:	6819      	ldr	r1, [r3, #0]
 8005842:	680a      	ldr	r2, [r1, #0]
 8005844:	f042 0201 	orr.w	r2, r2, #1
 8005848:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800584a:	2220      	movs	r2, #32
 800584c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005850:	2000      	movs	r0, #0
 8005852:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 8005856:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8005858:	2002      	movs	r0, #2
 800585a:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800585c:	2002      	movs	r0, #2
  }
}
 800585e:	4770      	bx	lr

08005860 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005860:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005862:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8005866:	b2d2      	uxtb	r2, r2
 8005868:	2a20      	cmp	r2, #32
 800586a:	d121      	bne.n	80058b0 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800586c:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8005870:	2a01      	cmp	r2, #1
 8005872:	d01f      	beq.n	80058b4 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8005874:	2201      	movs	r2, #1
 8005876:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800587a:	2224      	movs	r2, #36	; 0x24
 800587c:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005880:	6800      	ldr	r0, [r0, #0]
 8005882:	6802      	ldr	r2, [r0, #0]
 8005884:	f022 0201 	bic.w	r2, r2, #1
 8005888:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800588a:	6818      	ldr	r0, [r3, #0]
 800588c:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800588e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005892:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005896:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005898:	6819      	ldr	r1, [r3, #0]
 800589a:	680a      	ldr	r2, [r1, #0]
 800589c:	f042 0201 	orr.w	r2, r2, #1
 80058a0:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058a2:	2220      	movs	r2, #32
 80058a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058a8:	2000      	movs	r0, #0
 80058aa:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 80058ae:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80058b0:	2002      	movs	r0, #2
 80058b2:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80058b4:	2002      	movs	r0, #2
  }
}
 80058b6:	4770      	bx	lr

080058b8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80058b8:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80058ba:	684d      	ldr	r5, [r1, #4]
 80058bc:	6803      	ldr	r3, [r0, #0]
 80058be:	68dc      	ldr	r4, [r3, #12]
 80058c0:	f3c4 440b 	ubfx	r4, r4, #16, #12
 80058c4:	4425      	add	r5, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80058c6:	ea4f 1cc2 	mov.w	ip, r2, lsl #7
 80058ca:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80058ce:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 80058d2:	f404 4470 	and.w	r4, r4, #61440	; 0xf000
 80058d6:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80058da:	680b      	ldr	r3, [r1, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80058dc:	6804      	ldr	r4, [r0, #0]
 80058de:	68e6      	ldr	r6, [r4, #12]
 80058e0:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80058e4:	4433      	add	r3, r6
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80058e6:	3301      	adds	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80058e8:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80058ec:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80058f0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80058f4:	68cd      	ldr	r5, [r1, #12]
 80058f6:	6803      	ldr	r3, [r0, #0]
 80058f8:	68dc      	ldr	r4, [r3, #12]
 80058fa:	f3c4 040a 	ubfx	r4, r4, #0, #11
 80058fe:	4425      	add	r5, r4
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005900:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8005904:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8005908:	f404 4470 	and.w	r4, r4, #61440	; 0xf000
 800590c:	f8c3 408c 	str.w	r4, [r3, #140]	; 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005910:	688b      	ldr	r3, [r1, #8]
 8005912:	6804      	ldr	r4, [r0, #0]
 8005914:	68e6      	ldr	r6, [r4, #12]
 8005916:	f3c6 0e0a 	ubfx	lr, r6, #0, #11
 800591a:	4473      	add	r3, lr
 800591c:	3301      	adds	r3, #1
 800591e:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 8005922:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8005926:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800592a:	6803      	ldr	r3, [r0, #0]
 800592c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8005930:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 8005934:	f024 0407 	bic.w	r4, r4, #7
 8005938:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800593c:	6803      	ldr	r3, [r0, #0]
 800593e:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8005942:	690c      	ldr	r4, [r1, #16]
 8005944:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005948:	f891 e031 	ldrb.w	lr, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800594c:	f891 6032 	ldrb.w	r6, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005950:	698d      	ldr	r5, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005952:	6803      	ldr	r3, [r0, #0]
 8005954:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8005958:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
 800595c:	2400      	movs	r4, #0
 800595e:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005962:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 8005966:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 800596a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800596e:	6806      	ldr	r6, [r0, #0]
 8005970:	eb06 1ec2 	add.w	lr, r6, r2, lsl #7
 8005974:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8005978:	f8ce 309c 	str.w	r3, [lr, #156]	; 0x9c
 800597c:	f10e 0e84 	add.w	lr, lr, #132	; 0x84

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005980:	6803      	ldr	r3, [r0, #0]
 8005982:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8005986:	f8d3 5098 	ldr.w	r5, [r3, #152]	; 0x98
 800598a:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 800598e:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005992:	6803      	ldr	r3, [r0, #0]
 8005994:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8005998:	694d      	ldr	r5, [r1, #20]
 800599a:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800599e:	6803      	ldr	r3, [r0, #0]
 80059a0:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80059a4:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 80059a8:	4d2d      	ldr	r5, [pc, #180]	; (8005a60 <LTDC_SetConfig+0x1a8>)
 80059aa:	4035      	ands	r5, r6
 80059ac:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80059b0:	6a0d      	ldr	r5, [r1, #32]
 80059b2:	6803      	ldr	r3, [r0, #0]
 80059b4:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80059b8:	69ce      	ldr	r6, [r1, #28]
 80059ba:	4335      	orrs	r5, r6
 80059bc:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80059c0:	6803      	ldr	r3, [r0, #0]
 80059c2:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80059c6:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 80059ca:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80059ce:	6803      	ldr	r3, [r0, #0]
 80059d0:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80059d4:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80059d6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80059da:	690b      	ldr	r3, [r1, #16]
 80059dc:	b183      	cbz	r3, 8005a00 <LTDC_SetConfig+0x148>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80059de:	3b01      	subs	r3, #1
 80059e0:	2b06      	cmp	r3, #6
 80059e2:	d805      	bhi.n	80059f0 <LTDC_SetConfig+0x138>
 80059e4:	e8df f003 	tbb	[pc, r3]
 80059e8:	0608063a 	.word	0x0608063a
 80059ec:	0404      	.short	0x0404
 80059ee:	0a          	.byte	0x0a
 80059ef:	00          	.byte	0x00
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80059f0:	2501      	movs	r5, #1
 80059f2:	e006      	b.n	8005a02 <LTDC_SetConfig+0x14a>
 80059f4:	2502      	movs	r5, #2
 80059f6:	e004      	b.n	8005a02 <LTDC_SetConfig+0x14a>
 80059f8:	2502      	movs	r5, #2
 80059fa:	e002      	b.n	8005a02 <LTDC_SetConfig+0x14a>
 80059fc:	2502      	movs	r5, #2
 80059fe:	e000      	b.n	8005a02 <LTDC_SetConfig+0x14a>
    tmp = 4U;
 8005a00:	2504      	movs	r5, #4
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005a02:	6803      	ldr	r3, [r0, #0]
 8005a04:	4463      	add	r3, ip
 8005a06:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005a0a:	f002 22e0 	and.w	r2, r2, #3758153728	; 0xe000e000
 8005a0e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005a12:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8005a14:	fb05 f403 	mul.w	r4, r5, r3
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005a18:	684b      	ldr	r3, [r1, #4]
 8005a1a:	680a      	ldr	r2, [r1, #0]
 8005a1c:	1a9b      	subs	r3, r3, r2
 8005a1e:	fb05 f303 	mul.w	r3, r5, r3
 8005a22:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005a24:	6802      	ldr	r2, [r0, #0]
 8005a26:	4462      	add	r2, ip
 8005a28:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005a2c:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005a30:	6803      	ldr	r3, [r0, #0]
 8005a32:	4463      	add	r3, ip
 8005a34:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8005a38:	4a0a      	ldr	r2, [pc, #40]	; (8005a64 <LTDC_SetConfig+0x1ac>)
 8005a3a:	4022      	ands	r2, r4
 8005a3c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005a40:	6803      	ldr	r3, [r0, #0]
 8005a42:	4463      	add	r3, ip
 8005a44:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005a46:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005a4a:	6803      	ldr	r3, [r0, #0]
 8005a4c:	4463      	add	r3, ip
 8005a4e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005a52:	f042 0201 	orr.w	r2, r2, #1
 8005a56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8005a5a:	bd70      	pop	{r4, r5, r6, pc}
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005a5c:	2503      	movs	r5, #3
 8005a5e:	e7d0      	b.n	8005a02 <LTDC_SetConfig+0x14a>
 8005a60:	fffff8f8 	.word	0xfffff8f8
 8005a64:	fffff800 	.word	0xfffff800

08005a68 <HAL_LTDC_MspInit>:
}
 8005a68:	4770      	bx	lr
	...

08005a6c <HAL_LTDC_Init>:
  if (hltdc == NULL)
 8005a6c:	2800      	cmp	r0, #0
 8005a6e:	d072      	beq.n	8005b56 <HAL_LTDC_Init+0xea>
{
 8005a70:	b538      	push	{r3, r4, r5, lr}
 8005a72:	4604      	mov	r4, r0
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005a74:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d067      	beq.n	8005b4c <HAL_LTDC_Init+0xe0>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005a7c:	2302      	movs	r3, #2
 8005a7e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005a82:	6822      	ldr	r2, [r4, #0]
 8005a84:	6993      	ldr	r3, [r2, #24]
 8005a86:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005a8a:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005a8c:	6821      	ldr	r1, [r4, #0]
 8005a8e:	698a      	ldr	r2, [r1, #24]
 8005a90:	6863      	ldr	r3, [r4, #4]
 8005a92:	68a0      	ldr	r0, [r4, #8]
 8005a94:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005a96:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005a98:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005a9a:	6920      	ldr	r0, [r4, #16]
 8005a9c:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005aa2:	6821      	ldr	r1, [r4, #0]
 8005aa4:	688a      	ldr	r2, [r1, #8]
 8005aa6:	4b2d      	ldr	r3, [pc, #180]	; (8005b5c <HAL_LTDC_Init+0xf0>)
 8005aa8:	401a      	ands	r2, r3
 8005aaa:	608a      	str	r2, [r1, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005aac:	6820      	ldr	r0, [r4, #0]
 8005aae:	6882      	ldr	r2, [r0, #8]
 8005ab0:	69a1      	ldr	r1, [r4, #24]
 8005ab2:	6965      	ldr	r5, [r4, #20]
 8005ab4:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8005ab8:	430a      	orrs	r2, r1
 8005aba:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005abc:	6821      	ldr	r1, [r4, #0]
 8005abe:	68ca      	ldr	r2, [r1, #12]
 8005ac0:	401a      	ands	r2, r3
 8005ac2:	60ca      	str	r2, [r1, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005ac4:	6820      	ldr	r0, [r4, #0]
 8005ac6:	68c2      	ldr	r2, [r0, #12]
 8005ac8:	6a21      	ldr	r1, [r4, #32]
 8005aca:	69e5      	ldr	r5, [r4, #28]
 8005acc:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005ad4:	6821      	ldr	r1, [r4, #0]
 8005ad6:	690a      	ldr	r2, [r1, #16]
 8005ad8:	401a      	ands	r2, r3
 8005ada:	610a      	str	r2, [r1, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005adc:	6820      	ldr	r0, [r4, #0]
 8005ade:	6902      	ldr	r2, [r0, #16]
 8005ae0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005ae2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005ae4:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8005ae8:	430a      	orrs	r2, r1
 8005aea:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005aec:	6821      	ldr	r1, [r4, #0]
 8005aee:	694a      	ldr	r2, [r1, #20]
 8005af0:	4013      	ands	r3, r2
 8005af2:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005af4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005af6:	6821      	ldr	r1, [r4, #0]
 8005af8:	694b      	ldr	r3, [r1, #20]
 8005afa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005afc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005b00:	4313      	orrs	r3, r2
 8005b02:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005b04:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005b08:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8005b0c:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005b0e:	6821      	ldr	r1, [r4, #0]
 8005b10:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005b12:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005b16:	62ca      	str	r2, [r1, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005b18:	6821      	ldr	r1, [r4, #0]
 8005b1a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005b1c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8005b20:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8005b24:	4303      	orrs	r3, r0
 8005b26:	4313      	orrs	r3, r2
 8005b28:	62cb      	str	r3, [r1, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005b2a:	6822      	ldr	r2, [r4, #0]
 8005b2c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8005b2e:	f043 0306 	orr.w	r3, r3, #6
 8005b32:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8005b34:	6822      	ldr	r2, [r4, #0]
 8005b36:	6993      	ldr	r3, [r2, #24]
 8005b38:	f043 0301 	orr.w	r3, r3, #1
 8005b3c:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005b3e:	2000      	movs	r0, #0
 8005b40:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8005b44:	2301      	movs	r3, #1
 8005b46:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8005b4a:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 8005b4c:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8005b50:	f7ff ff8a 	bl	8005a68 <HAL_LTDC_MspInit>
 8005b54:	e792      	b.n	8005a7c <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 8005b56:	2001      	movs	r0, #1
}
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	f000f800 	.word	0xf000f800

08005b60 <HAL_LTDC_ConfigLayer>:
{
 8005b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 8005b62:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d02c      	beq.n	8005bc4 <HAL_LTDC_ConfigLayer+0x64>
 8005b6a:	4604      	mov	r4, r0
 8005b6c:	460d      	mov	r5, r1
 8005b6e:	4616      	mov	r6, r2
 8005b70:	2701      	movs	r7, #1
 8005b72:	f880 70a0 	strb.w	r7, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005b76:	2302      	movs	r3, #2
 8005b78:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005b7c:	f04f 0c34 	mov.w	ip, #52	; 0x34
 8005b80:	fb0c 0c02 	mla	ip, ip, r2, r0
 8005b84:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
 8005b88:	468e      	mov	lr, r1
 8005b8a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8005b8e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005b92:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8005b96:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005b9a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8005b9e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005ba2:	f8de 3000 	ldr.w	r3, [lr]
 8005ba6:	f8cc 3000 	str.w	r3, [ip]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005baa:	4632      	mov	r2, r6
 8005bac:	4629      	mov	r1, r5
 8005bae:	4620      	mov	r0, r4
 8005bb0:	f7ff fe82 	bl	80058b8 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005bb4:	6823      	ldr	r3, [r4, #0]
 8005bb6:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005bb8:	f884 70a1 	strb.w	r7, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8005bbc:	2000      	movs	r0, #0
 8005bbe:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8005bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hltdc);
 8005bc4:	2002      	movs	r0, #2
 8005bc6:	e7fc      	b.n	8005bc2 <HAL_LTDC_ConfigLayer+0x62>

08005bc8 <HAL_LTDCEx_StructInitFromVideoConfig>:

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == \
 8005bc8:	6a4b      	ldr	r3, [r1, #36]	; 0x24
                            DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 8005bca:	b10b      	cbz	r3, 8005bd0 <HAL_LTDCEx_StructInitFromVideoConfig+0x8>
 8005bcc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == \
 8005bd0:	60c3      	str	r3, [r0, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 8005bd2:	6a0b      	ldr	r3, [r1, #32]
 8005bd4:	bb0b      	cbnz	r3, 8005c1a <HAL_LTDCEx_StructInitFromVideoConfig+0x52>
 8005bd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005bda:	6083      	str	r3, [r0, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 8005bdc:	69cb      	ldr	r3, [r1, #28]
 8005bde:	b9f3      	cbnz	r3, 8005c1e <HAL_LTDCEx_StructInitFromVideoConfig+0x56>
 8005be0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005be4:	6043      	str	r3, [r0, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 8005be6:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8005be8:	3b01      	subs	r3, #1
 8005bea:	6183      	str	r3, [r0, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 8005bec:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8005bee:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 8005bf0:	4413      	add	r3, r2
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	6203      	str	r3, [r0, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8005bf6:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8005bf8:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 8005bfa:	4413      	add	r3, r2
                                   VidCfg->VerticalActive - 1U;
 8005bfc:	6c0a      	ldr	r2, [r1, #64]	; 0x40
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8005bfe:	4413      	add	r3, r2
                                   VidCfg->VerticalActive - 1U;
 8005c00:	3b01      	subs	r3, #1
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8005c02:	6283      	str	r3, [r0, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8005c04:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8005c06:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 8005c08:	4413      	add	r3, r2
                                   VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 8005c0a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8005c0c:	4413      	add	r3, r2
                                   VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 8005c0e:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8005c10:	4413      	add	r3, r2
 8005c12:	3b01      	subs	r3, #1
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8005c14:	6303      	str	r3, [r0, #48]	; 0x30

  return HAL_OK;
}
 8005c16:	2000      	movs	r0, #0
 8005c18:	4770      	bx	lr
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	e7dd      	b.n	8005bda <HAL_LTDCEx_StructInitFromVideoConfig+0x12>
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	e7e0      	b.n	8005be4 <HAL_LTDCEx_StructInitFromVideoConfig+0x1c>
	...

08005c24 <HAL_PWREx_EnableOverDrive>:
 *         critical tasks and when the system clock source is either HSI or HSE. 
 *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
 *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void) {
 8005c24:	b510      	push	{r4, lr}
 8005c26:	b082      	sub	sp, #8
	uint32_t tickstart = 0;

	__HAL_RCC_PWR_CLK_ENABLE();
 8005c28:	4b1b      	ldr	r3, [pc, #108]	; (8005c98 <HAL_PWREx_EnableOverDrive+0x74>)
 8005c2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c2c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005c30:	641a      	str	r2, [r3, #64]	; 0x40
 8005c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c38:	9301      	str	r3, [sp, #4]
 8005c3a:	9b01      	ldr	r3, [sp, #4]

	/* Enable the Over-drive to extend the clock frequency to 216 MHz */
	__HAL_PWR_OVERDRIVE_ENABLE();
 8005c3c:	4a17      	ldr	r2, [pc, #92]	; (8005c9c <HAL_PWREx_EnableOverDrive+0x78>)
 8005c3e:	6813      	ldr	r3, [r2, #0]
 8005c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c44:	6013      	str	r3, [r2, #0]

	/* Get tick */
	tickstart = HAL_GetTick();
 8005c46:	f7fe f95b 	bl	8003f00 <HAL_GetTick>
 8005c4a:	4604      	mov	r4, r0

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY)) {
 8005c4c:	4b13      	ldr	r3, [pc, #76]	; (8005c9c <HAL_PWREx_EnableOverDrive+0x78>)
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005c54:	d108      	bne.n	8005c68 <HAL_PWREx_EnableOverDrive+0x44>
		if ((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE) {
 8005c56:	f7fe f953 	bl	8003f00 <HAL_GetTick>
 8005c5a:	1b00      	subs	r0, r0, r4
 8005c5c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005c60:	d9f4      	bls.n	8005c4c <HAL_PWREx_EnableOverDrive+0x28>
			return HAL_TIMEOUT;
 8005c62:	2003      	movs	r0, #3
		if ((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE) {
			return HAL_TIMEOUT;
		}
	}
	return HAL_OK;
}
 8005c64:	b002      	add	sp, #8
 8005c66:	bd10      	pop	{r4, pc}
	__HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005c68:	4a0c      	ldr	r2, [pc, #48]	; (8005c9c <HAL_PWREx_EnableOverDrive+0x78>)
 8005c6a:	6813      	ldr	r3, [r2, #0]
 8005c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c70:	6013      	str	r3, [r2, #0]
	tickstart = HAL_GetTick();
 8005c72:	f7fe f945 	bl	8003f00 <HAL_GetTick>
 8005c76:	4604      	mov	r4, r0
	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY)) {
 8005c78:	4b08      	ldr	r3, [pc, #32]	; (8005c9c <HAL_PWREx_EnableOverDrive+0x78>)
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005c80:	d107      	bne.n	8005c92 <HAL_PWREx_EnableOverDrive+0x6e>
		if ((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE) {
 8005c82:	f7fe f93d 	bl	8003f00 <HAL_GetTick>
 8005c86:	1b00      	subs	r0, r0, r4
 8005c88:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005c8c:	d9f4      	bls.n	8005c78 <HAL_PWREx_EnableOverDrive+0x54>
			return HAL_TIMEOUT;
 8005c8e:	2003      	movs	r0, #3
 8005c90:	e7e8      	b.n	8005c64 <HAL_PWREx_EnableOverDrive+0x40>
	return HAL_OK;
 8005c92:	2000      	movs	r0, #0
 8005c94:	e7e6      	b.n	8005c64 <HAL_PWREx_EnableOverDrive+0x40>
 8005c96:	bf00      	nop
 8005c98:	40023800 	.word	0x40023800
 8005c9c:	40007000 	.word	0x40007000

08005ca0 <HAL_RCC_OscConfig>:
	uint32_t tickstart;
	uint32_t pll_config;
	FlagStatus pwrclkchanged = RESET;

	/* Check Null pointer */
	if (RCC_OscInitStruct == NULL) {
 8005ca0:	2800      	cmp	r0, #0
 8005ca2:	f000 8206 	beq.w	80060b2 <HAL_RCC_OscConfig+0x412>
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef *RCC_OscInitStruct) {
 8005ca6:	b570      	push	{r4, r5, r6, lr}
 8005ca8:	b082      	sub	sp, #8
 8005caa:	4604      	mov	r4, r0

	/* Check the parameters */
	assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

	/*------------------------------- HSE Configuration ------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE)
 8005cac:	6803      	ldr	r3, [r0, #0]
 8005cae:	f013 0f01 	tst.w	r3, #1
 8005cb2:	d029      	beq.n	8005d08 <HAL_RCC_OscConfig+0x68>
			== RCC_OSCILLATORTYPE_HSE) {
		/* Check the parameters */
		assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
		/* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005cb4:	4b95      	ldr	r3, [pc, #596]	; (8005f0c <HAL_RCC_OscConfig+0x26c>)
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	f003 030c 	and.w	r3, r3, #12
 8005cbc:	2b04      	cmp	r3, #4
 8005cbe:	d01a      	beq.n	8005cf6 <HAL_RCC_OscConfig+0x56>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE()
 8005cc0:	4b92      	ldr	r3, [pc, #584]	; (8005f0c <HAL_RCC_OscConfig+0x26c>)
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	f003 030c 	and.w	r3, r3, #12
 8005cc8:	2b08      	cmp	r3, #8
 8005cca:	d00f      	beq.n	8005cec <HAL_RCC_OscConfig+0x4c>
					&& (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
				return HAL_ERROR;
			}
		} else {
			/* Set the new HSE configuration ---------------------------------------*/
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ccc:	6863      	ldr	r3, [r4, #4]
 8005cce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cd2:	d040      	beq.n	8005d56 <HAL_RCC_OscConfig+0xb6>
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d154      	bne.n	8005d82 <HAL_RCC_OscConfig+0xe2>
 8005cd8:	4b8c      	ldr	r3, [pc, #560]	; (8005f0c <HAL_RCC_OscConfig+0x26c>)
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005ce0:	601a      	str	r2, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005ce8:	601a      	str	r2, [r3, #0]
 8005cea:	e039      	b.n	8005d60 <HAL_RCC_OscConfig+0xc0>
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 8005cec:	4b87      	ldr	r3, [pc, #540]	; (8005f0c <HAL_RCC_OscConfig+0x26c>)
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8005cf4:	d0ea      	beq.n	8005ccc <HAL_RCC_OscConfig+0x2c>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cf6:	4b85      	ldr	r3, [pc, #532]	; (8005f0c <HAL_RCC_OscConfig+0x26c>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005cfe:	d003      	beq.n	8005d08 <HAL_RCC_OscConfig+0x68>
					&& (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 8005d00:	6863      	ldr	r3, [r4, #4]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f000 81d7 	beq.w	80060b6 <HAL_RCC_OscConfig+0x416>
				}
			}
		}
	}
	/*----------------------------- HSI Configuration --------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI)
 8005d08:	6823      	ldr	r3, [r4, #0]
 8005d0a:	f013 0f02 	tst.w	r3, #2
 8005d0e:	d074      	beq.n	8005dfa <HAL_RCC_OscConfig+0x15a>
		assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
		assert_param(
				IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

		/* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d10:	4b7e      	ldr	r3, [pc, #504]	; (8005f0c <HAL_RCC_OscConfig+0x26c>)
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f013 0f0c 	tst.w	r3, #12
 8005d18:	d05e      	beq.n	8005dd8 <HAL_RCC_OscConfig+0x138>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE()
 8005d1a:	4b7c      	ldr	r3, [pc, #496]	; (8005f0c <HAL_RCC_OscConfig+0x26c>)
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	f003 030c 	and.w	r3, r3, #12
 8005d22:	2b08      	cmp	r3, #8
 8005d24:	d053      	beq.n	8005dce <HAL_RCC_OscConfig+0x12e>
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
						RCC_OscInitStruct->HSICalibrationValue);
			}
		} else {
			/* Check the HSI State */
			if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF) {
 8005d26:	68e3      	ldr	r3, [r4, #12]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	f000 8089 	beq.w	8005e40 <HAL_RCC_OscConfig+0x1a0>
				/* Enable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_ENABLE();
 8005d2e:	4a77      	ldr	r2, [pc, #476]	; (8005f0c <HAL_RCC_OscConfig+0x26c>)
 8005d30:	6813      	ldr	r3, [r2, #0]
 8005d32:	f043 0301 	orr.w	r3, r3, #1
 8005d36:	6013      	str	r3, [r2, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8005d38:	f7fe f8e2 	bl	8003f00 <HAL_GetTick>
 8005d3c:	4605      	mov	r5, r0

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8005d3e:	4b73      	ldr	r3, [pc, #460]	; (8005f0c <HAL_RCC_OscConfig+0x26c>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f013 0f02 	tst.w	r3, #2
 8005d46:	d172      	bne.n	8005e2e <HAL_RCC_OscConfig+0x18e>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8005d48:	f7fe f8da 	bl	8003f00 <HAL_GetTick>
 8005d4c:	1b40      	subs	r0, r0, r5
 8005d4e:	2802      	cmp	r0, #2
 8005d50:	d9f5      	bls.n	8005d3e <HAL_RCC_OscConfig+0x9e>
						return HAL_TIMEOUT;
 8005d52:	2003      	movs	r0, #3
 8005d54:	e1b4      	b.n	80060c0 <HAL_RCC_OscConfig+0x420>
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d56:	4a6d      	ldr	r2, [pc, #436]	; (8005f0c <HAL_RCC_OscConfig+0x26c>)
 8005d58:	6813      	ldr	r3, [r2, #0]
 8005d5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d5e:	6013      	str	r3, [r2, #0]
			if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF) {
 8005d60:	6863      	ldr	r3, [r4, #4]
 8005d62:	b32b      	cbz	r3, 8005db0 <HAL_RCC_OscConfig+0x110>
				tickstart = HAL_GetTick();
 8005d64:	f7fe f8cc 	bl	8003f00 <HAL_GetTick>
 8005d68:	4605      	mov	r5, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8005d6a:	4b68      	ldr	r3, [pc, #416]	; (8005f0c <HAL_RCC_OscConfig+0x26c>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005d72:	d1c9      	bne.n	8005d08 <HAL_RCC_OscConfig+0x68>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8005d74:	f7fe f8c4 	bl	8003f00 <HAL_GetTick>
 8005d78:	1b40      	subs	r0, r0, r5
 8005d7a:	2864      	cmp	r0, #100	; 0x64
 8005d7c:	d9f5      	bls.n	8005d6a <HAL_RCC_OscConfig+0xca>
						return HAL_TIMEOUT;
 8005d7e:	2003      	movs	r0, #3
 8005d80:	e19e      	b.n	80060c0 <HAL_RCC_OscConfig+0x420>
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d82:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d86:	d009      	beq.n	8005d9c <HAL_RCC_OscConfig+0xfc>
 8005d88:	4b60      	ldr	r3, [pc, #384]	; (8005f0c <HAL_RCC_OscConfig+0x26c>)
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005d90:	601a      	str	r2, [r3, #0]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005d98:	601a      	str	r2, [r3, #0]
 8005d9a:	e7e1      	b.n	8005d60 <HAL_RCC_OscConfig+0xc0>
 8005d9c:	4b5b      	ldr	r3, [pc, #364]	; (8005f0c <HAL_RCC_OscConfig+0x26c>)
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005da4:	601a      	str	r2, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005dac:	601a      	str	r2, [r3, #0]
 8005dae:	e7d7      	b.n	8005d60 <HAL_RCC_OscConfig+0xc0>
				tickstart = HAL_GetTick();
 8005db0:	f7fe f8a6 	bl	8003f00 <HAL_GetTick>
 8005db4:	4605      	mov	r5, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 8005db6:	4b55      	ldr	r3, [pc, #340]	; (8005f0c <HAL_RCC_OscConfig+0x26c>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005dbe:	d0a3      	beq.n	8005d08 <HAL_RCC_OscConfig+0x68>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8005dc0:	f7fe f89e 	bl	8003f00 <HAL_GetTick>
 8005dc4:	1b40      	subs	r0, r0, r5
 8005dc6:	2864      	cmp	r0, #100	; 0x64
 8005dc8:	d9f5      	bls.n	8005db6 <HAL_RCC_OscConfig+0x116>
						return HAL_TIMEOUT;
 8005dca:	2003      	movs	r0, #3
 8005dcc:	e178      	b.n	80060c0 <HAL_RCC_OscConfig+0x420>
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 8005dce:	4b4f      	ldr	r3, [pc, #316]	; (8005f0c <HAL_RCC_OscConfig+0x26c>)
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8005dd6:	d1a6      	bne.n	8005d26 <HAL_RCC_OscConfig+0x86>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dd8:	4b4c      	ldr	r3, [pc, #304]	; (8005f0c <HAL_RCC_OscConfig+0x26c>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f013 0f02 	tst.w	r3, #2
 8005de0:	d003      	beq.n	8005dea <HAL_RCC_OscConfig+0x14a>
					&& (RCC_OscInitStruct->HSIState != RCC_HSI_ON)) {
 8005de2:	68e3      	ldr	r3, [r4, #12]
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	f040 8168 	bne.w	80060ba <HAL_RCC_OscConfig+0x41a>
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 8005dea:	4a48      	ldr	r2, [pc, #288]	; (8005f0c <HAL_RCC_OscConfig+0x26c>)
 8005dec:	6813      	ldr	r3, [r2, #0]
 8005dee:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005df2:	6921      	ldr	r1, [r4, #16]
 8005df4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005df8:	6013      	str	r3, [r2, #0]
				}
			}
		}
	}
	/*------------------------------ LSI Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI)
 8005dfa:	6823      	ldr	r3, [r4, #0]
 8005dfc:	f013 0f08 	tst.w	r3, #8
 8005e00:	d046      	beq.n	8005e90 <HAL_RCC_OscConfig+0x1f0>
			== RCC_OSCILLATORTYPE_LSI) {
		/* Check the parameters */
		assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

		/* Check the LSI State */
		if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF) {
 8005e02:	6963      	ldr	r3, [r4, #20]
 8005e04:	b383      	cbz	r3, 8005e68 <HAL_RCC_OscConfig+0x1c8>
			/* Enable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_ENABLE();
 8005e06:	4a41      	ldr	r2, [pc, #260]	; (8005f0c <HAL_RCC_OscConfig+0x26c>)
 8005e08:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8005e0a:	f043 0301 	orr.w	r3, r3, #1
 8005e0e:	6753      	str	r3, [r2, #116]	; 0x74

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8005e10:	f7fe f876 	bl	8003f00 <HAL_GetTick>
 8005e14:	4605      	mov	r5, r0

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 8005e16:	4b3d      	ldr	r3, [pc, #244]	; (8005f0c <HAL_RCC_OscConfig+0x26c>)
 8005e18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e1a:	f013 0f02 	tst.w	r3, #2
 8005e1e:	d137      	bne.n	8005e90 <HAL_RCC_OscConfig+0x1f0>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 8005e20:	f7fe f86e 	bl	8003f00 <HAL_GetTick>
 8005e24:	1b40      	subs	r0, r0, r5
 8005e26:	2802      	cmp	r0, #2
 8005e28:	d9f5      	bls.n	8005e16 <HAL_RCC_OscConfig+0x176>
					return HAL_TIMEOUT;
 8005e2a:	2003      	movs	r0, #3
 8005e2c:	e148      	b.n	80060c0 <HAL_RCC_OscConfig+0x420>
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 8005e2e:	4a37      	ldr	r2, [pc, #220]	; (8005f0c <HAL_RCC_OscConfig+0x26c>)
 8005e30:	6813      	ldr	r3, [r2, #0]
 8005e32:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005e36:	6921      	ldr	r1, [r4, #16]
 8005e38:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005e3c:	6013      	str	r3, [r2, #0]
 8005e3e:	e7dc      	b.n	8005dfa <HAL_RCC_OscConfig+0x15a>
				__HAL_RCC_HSI_DISABLE();
 8005e40:	4a32      	ldr	r2, [pc, #200]	; (8005f0c <HAL_RCC_OscConfig+0x26c>)
 8005e42:	6813      	ldr	r3, [r2, #0]
 8005e44:	f023 0301 	bic.w	r3, r3, #1
 8005e48:	6013      	str	r3, [r2, #0]
				tickstart = HAL_GetTick();
 8005e4a:	f7fe f859 	bl	8003f00 <HAL_GetTick>
 8005e4e:	4605      	mov	r5, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 8005e50:	4b2e      	ldr	r3, [pc, #184]	; (8005f0c <HAL_RCC_OscConfig+0x26c>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f013 0f02 	tst.w	r3, #2
 8005e58:	d0cf      	beq.n	8005dfa <HAL_RCC_OscConfig+0x15a>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8005e5a:	f7fe f851 	bl	8003f00 <HAL_GetTick>
 8005e5e:	1b40      	subs	r0, r0, r5
 8005e60:	2802      	cmp	r0, #2
 8005e62:	d9f5      	bls.n	8005e50 <HAL_RCC_OscConfig+0x1b0>
						return HAL_TIMEOUT;
 8005e64:	2003      	movs	r0, #3
 8005e66:	e12b      	b.n	80060c0 <HAL_RCC_OscConfig+0x420>
				}
			}
		} else {
			/* Disable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_DISABLE();
 8005e68:	4a28      	ldr	r2, [pc, #160]	; (8005f0c <HAL_RCC_OscConfig+0x26c>)
 8005e6a:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8005e6c:	f023 0301 	bic.w	r3, r3, #1
 8005e70:	6753      	str	r3, [r2, #116]	; 0x74

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8005e72:	f7fe f845 	bl	8003f00 <HAL_GetTick>
 8005e76:	4605      	mov	r5, r0

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 8005e78:	4b24      	ldr	r3, [pc, #144]	; (8005f0c <HAL_RCC_OscConfig+0x26c>)
 8005e7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e7c:	f013 0f02 	tst.w	r3, #2
 8005e80:	d006      	beq.n	8005e90 <HAL_RCC_OscConfig+0x1f0>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 8005e82:	f7fe f83d 	bl	8003f00 <HAL_GetTick>
 8005e86:	1b40      	subs	r0, r0, r5
 8005e88:	2802      	cmp	r0, #2
 8005e8a:	d9f5      	bls.n	8005e78 <HAL_RCC_OscConfig+0x1d8>
					return HAL_TIMEOUT;
 8005e8c:	2003      	movs	r0, #3
 8005e8e:	e117      	b.n	80060c0 <HAL_RCC_OscConfig+0x420>
				}
			}
		}
	}
	/*------------------------------ LSE Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE)
 8005e90:	6823      	ldr	r3, [r4, #0]
 8005e92:	f013 0f04 	tst.w	r3, #4
 8005e96:	d07d      	beq.n	8005f94 <HAL_RCC_OscConfig+0x2f4>
		/* Check the parameters */
		assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

		/* Update LSE configuration in Backup Domain control register    */
		/* Requires to enable write access to Backup Domain of necessary */
		if (__HAL_RCC_PWR_IS_CLK_DISABLED()) {
 8005e98:	4b1c      	ldr	r3, [pc, #112]	; (8005f0c <HAL_RCC_OscConfig+0x26c>)
 8005e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8005ea0:	d11e      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x240>
			/* Enable Power Clock*/
			__HAL_RCC_PWR_CLK_ENABLE();
 8005ea2:	4b1a      	ldr	r3, [pc, #104]	; (8005f0c <HAL_RCC_OscConfig+0x26c>)
 8005ea4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ea6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005eaa:	641a      	str	r2, [r3, #64]	; 0x40
 8005eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eb2:	9301      	str	r3, [sp, #4]
 8005eb4:	9b01      	ldr	r3, [sp, #4]
			pwrclkchanged = SET;
 8005eb6:	2501      	movs	r5, #1
		}

		if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP)) {
 8005eb8:	4b15      	ldr	r3, [pc, #84]	; (8005f10 <HAL_RCC_OscConfig+0x270>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005ec0:	d010      	beq.n	8005ee4 <HAL_RCC_OscConfig+0x244>
				}
			}
		}

		/* Set the new LSE configuration -----------------------------------------*/
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ec2:	68a3      	ldr	r3, [r4, #8]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d025      	beq.n	8005f14 <HAL_RCC_OscConfig+0x274>
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d13b      	bne.n	8005f44 <HAL_RCC_OscConfig+0x2a4>
 8005ecc:	4b0f      	ldr	r3, [pc, #60]	; (8005f0c <HAL_RCC_OscConfig+0x26c>)
 8005ece:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005ed0:	f022 0201 	bic.w	r2, r2, #1
 8005ed4:	671a      	str	r2, [r3, #112]	; 0x70
 8005ed6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005ed8:	f022 0204 	bic.w	r2, r2, #4
 8005edc:	671a      	str	r2, [r3, #112]	; 0x70
 8005ede:	e01e      	b.n	8005f1e <HAL_RCC_OscConfig+0x27e>
	FlagStatus pwrclkchanged = RESET;
 8005ee0:	2500      	movs	r5, #0
 8005ee2:	e7e9      	b.n	8005eb8 <HAL_RCC_OscConfig+0x218>
			PWR->CR1 |= PWR_CR1_DBP;
 8005ee4:	4a0a      	ldr	r2, [pc, #40]	; (8005f10 <HAL_RCC_OscConfig+0x270>)
 8005ee6:	6813      	ldr	r3, [r2, #0]
 8005ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eec:	6013      	str	r3, [r2, #0]
			tickstart = HAL_GetTick();
 8005eee:	f7fe f807 	bl	8003f00 <HAL_GetTick>
 8005ef2:	4606      	mov	r6, r0
			while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP)) {
 8005ef4:	4b06      	ldr	r3, [pc, #24]	; (8005f10 <HAL_RCC_OscConfig+0x270>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005efc:	d1e1      	bne.n	8005ec2 <HAL_RCC_OscConfig+0x222>
				if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 8005efe:	f7fd ffff 	bl	8003f00 <HAL_GetTick>
 8005f02:	1b80      	subs	r0, r0, r6
 8005f04:	2864      	cmp	r0, #100	; 0x64
 8005f06:	d9f5      	bls.n	8005ef4 <HAL_RCC_OscConfig+0x254>
					return HAL_TIMEOUT;
 8005f08:	2003      	movs	r0, #3
 8005f0a:	e0d9      	b.n	80060c0 <HAL_RCC_OscConfig+0x420>
 8005f0c:	40023800 	.word	0x40023800
 8005f10:	40007000 	.word	0x40007000
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f14:	4a72      	ldr	r2, [pc, #456]	; (80060e0 <HAL_RCC_OscConfig+0x440>)
 8005f16:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8005f18:	f043 0301 	orr.w	r3, r3, #1
 8005f1c:	6713      	str	r3, [r2, #112]	; 0x70
		/* Check the LSE State */
		if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF) {
 8005f1e:	68a3      	ldr	r3, [r4, #8]
 8005f20:	b333      	cbz	r3, 8005f70 <HAL_RCC_OscConfig+0x2d0>
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8005f22:	f7fd ffed 	bl	8003f00 <HAL_GetTick>
 8005f26:	4606      	mov	r6, r0

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 8005f28:	4b6d      	ldr	r3, [pc, #436]	; (80060e0 <HAL_RCC_OscConfig+0x440>)
 8005f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f2c:	f013 0f02 	tst.w	r3, #2
 8005f30:	d12f      	bne.n	8005f92 <HAL_RCC_OscConfig+0x2f2>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8005f32:	f7fd ffe5 	bl	8003f00 <HAL_GetTick>
 8005f36:	1b80      	subs	r0, r0, r6
 8005f38:	f241 3388 	movw	r3, #5000	; 0x1388
 8005f3c:	4298      	cmp	r0, r3
 8005f3e:	d9f3      	bls.n	8005f28 <HAL_RCC_OscConfig+0x288>
					return HAL_TIMEOUT;
 8005f40:	2003      	movs	r0, #3
 8005f42:	e0bd      	b.n	80060c0 <HAL_RCC_OscConfig+0x420>
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f44:	2b05      	cmp	r3, #5
 8005f46:	d009      	beq.n	8005f5c <HAL_RCC_OscConfig+0x2bc>
 8005f48:	4b65      	ldr	r3, [pc, #404]	; (80060e0 <HAL_RCC_OscConfig+0x440>)
 8005f4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f4c:	f022 0201 	bic.w	r2, r2, #1
 8005f50:	671a      	str	r2, [r3, #112]	; 0x70
 8005f52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f54:	f022 0204 	bic.w	r2, r2, #4
 8005f58:	671a      	str	r2, [r3, #112]	; 0x70
 8005f5a:	e7e0      	b.n	8005f1e <HAL_RCC_OscConfig+0x27e>
 8005f5c:	4b60      	ldr	r3, [pc, #384]	; (80060e0 <HAL_RCC_OscConfig+0x440>)
 8005f5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f60:	f042 0204 	orr.w	r2, r2, #4
 8005f64:	671a      	str	r2, [r3, #112]	; 0x70
 8005f66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f68:	f042 0201 	orr.w	r2, r2, #1
 8005f6c:	671a      	str	r2, [r3, #112]	; 0x70
 8005f6e:	e7d6      	b.n	8005f1e <HAL_RCC_OscConfig+0x27e>
				}
			}
		} else {
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8005f70:	f7fd ffc6 	bl	8003f00 <HAL_GetTick>
 8005f74:	4606      	mov	r6, r0

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 8005f76:	4b5a      	ldr	r3, [pc, #360]	; (80060e0 <HAL_RCC_OscConfig+0x440>)
 8005f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f7a:	f013 0f02 	tst.w	r3, #2
 8005f7e:	d008      	beq.n	8005f92 <HAL_RCC_OscConfig+0x2f2>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8005f80:	f7fd ffbe 	bl	8003f00 <HAL_GetTick>
 8005f84:	1b80      	subs	r0, r0, r6
 8005f86:	f241 3388 	movw	r3, #5000	; 0x1388
 8005f8a:	4298      	cmp	r0, r3
 8005f8c:	d9f3      	bls.n	8005f76 <HAL_RCC_OscConfig+0x2d6>
					return HAL_TIMEOUT;
 8005f8e:	2003      	movs	r0, #3
 8005f90:	e096      	b.n	80060c0 <HAL_RCC_OscConfig+0x420>
				}
			}
		}

		/* Restore clock configuration if changed */
		if (pwrclkchanged == SET) {
 8005f92:	b9fd      	cbnz	r5, 8005fd4 <HAL_RCC_OscConfig+0x334>
		}
	}
	/*-------------------------------- PLL Configuration -----------------------*/
	/* Check the parameters */
	assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
	if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE) {
 8005f94:	69a3      	ldr	r3, [r4, #24]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f000 8091 	beq.w	80060be <HAL_RCC_OscConfig+0x41e>
		/* Check if the PLL is used as system clock or not */
		if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {
 8005f9c:	4a50      	ldr	r2, [pc, #320]	; (80060e0 <HAL_RCC_OscConfig+0x440>)
 8005f9e:	6892      	ldr	r2, [r2, #8]
 8005fa0:	f002 020c 	and.w	r2, r2, #12
 8005fa4:	2a08      	cmp	r2, #8
 8005fa6:	d059      	beq.n	800605c <HAL_RCC_OscConfig+0x3bc>
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON) {
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	d019      	beq.n	8005fe0 <HAL_RCC_OscConfig+0x340>
						return HAL_TIMEOUT;
					}
				}
			} else {
				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 8005fac:	4a4c      	ldr	r2, [pc, #304]	; (80060e0 <HAL_RCC_OscConfig+0x440>)
 8005fae:	6813      	ldr	r3, [r2, #0]
 8005fb0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fb4:	6013      	str	r3, [r2, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8005fb6:	f7fd ffa3 	bl	8003f00 <HAL_GetTick>
 8005fba:	4604      	mov	r4, r0

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8005fbc:	4b48      	ldr	r3, [pc, #288]	; (80060e0 <HAL_RCC_OscConfig+0x440>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005fc4:	d048      	beq.n	8006058 <HAL_RCC_OscConfig+0x3b8>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8005fc6:	f7fd ff9b 	bl	8003f00 <HAL_GetTick>
 8005fca:	1b00      	subs	r0, r0, r4
 8005fcc:	2802      	cmp	r0, #2
 8005fce:	d9f5      	bls.n	8005fbc <HAL_RCC_OscConfig+0x31c>
						return HAL_TIMEOUT;
 8005fd0:	2003      	movs	r0, #3
 8005fd2:	e075      	b.n	80060c0 <HAL_RCC_OscConfig+0x420>
			__HAL_RCC_PWR_CLK_DISABLE();
 8005fd4:	4a42      	ldr	r2, [pc, #264]	; (80060e0 <HAL_RCC_OscConfig+0x440>)
 8005fd6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005fd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8005fde:	e7d9      	b.n	8005f94 <HAL_RCC_OscConfig+0x2f4>
				__HAL_RCC_PLL_DISABLE();
 8005fe0:	4a3f      	ldr	r2, [pc, #252]	; (80060e0 <HAL_RCC_OscConfig+0x440>)
 8005fe2:	6813      	ldr	r3, [r2, #0]
 8005fe4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fe8:	6013      	str	r3, [r2, #0]
				tickstart = HAL_GetTick();
 8005fea:	f7fd ff89 	bl	8003f00 <HAL_GetTick>
 8005fee:	4605      	mov	r5, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8005ff0:	4b3b      	ldr	r3, [pc, #236]	; (80060e0 <HAL_RCC_OscConfig+0x440>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005ff8:	d006      	beq.n	8006008 <HAL_RCC_OscConfig+0x368>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8005ffa:	f7fd ff81 	bl	8003f00 <HAL_GetTick>
 8005ffe:	1b40      	subs	r0, r0, r5
 8006000:	2802      	cmp	r0, #2
 8006002:	d9f5      	bls.n	8005ff0 <HAL_RCC_OscConfig+0x350>
						return HAL_TIMEOUT;
 8006004:	2003      	movs	r0, #3
 8006006:	e05b      	b.n	80060c0 <HAL_RCC_OscConfig+0x420>
				__HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006008:	69e3      	ldr	r3, [r4, #28]
 800600a:	6a22      	ldr	r2, [r4, #32]
 800600c:	4313      	orrs	r3, r2
 800600e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006010:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8006014:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006016:	0852      	lsrs	r2, r2, #1
 8006018:	3a01      	subs	r2, #1
 800601a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800601e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006020:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006024:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006026:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800602a:	4a2d      	ldr	r2, [pc, #180]	; (80060e0 <HAL_RCC_OscConfig+0x440>)
 800602c:	6053      	str	r3, [r2, #4]
				__HAL_RCC_PLL_ENABLE();
 800602e:	6813      	ldr	r3, [r2, #0]
 8006030:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006034:	6013      	str	r3, [r2, #0]
				tickstart = HAL_GetTick();
 8006036:	f7fd ff63 	bl	8003f00 <HAL_GetTick>
 800603a:	4604      	mov	r4, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 800603c:	4b28      	ldr	r3, [pc, #160]	; (80060e0 <HAL_RCC_OscConfig+0x440>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006044:	d106      	bne.n	8006054 <HAL_RCC_OscConfig+0x3b4>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8006046:	f7fd ff5b 	bl	8003f00 <HAL_GetTick>
 800604a:	1b00      	subs	r0, r0, r4
 800604c:	2802      	cmp	r0, #2
 800604e:	d9f5      	bls.n	800603c <HAL_RCC_OscConfig+0x39c>
						return HAL_TIMEOUT;
 8006050:	2003      	movs	r0, #3
 8006052:	e035      	b.n	80060c0 <HAL_RCC_OscConfig+0x420>
					{
				return HAL_ERROR;
			}
		}
	}
	return HAL_OK;
 8006054:	2000      	movs	r0, #0
 8006056:	e033      	b.n	80060c0 <HAL_RCC_OscConfig+0x420>
 8006058:	2000      	movs	r0, #0
 800605a:	e031      	b.n	80060c0 <HAL_RCC_OscConfig+0x420>
			pll_config = RCC->PLLCFGR;
 800605c:	4a20      	ldr	r2, [pc, #128]	; (80060e0 <HAL_RCC_OscConfig+0x440>)
 800605e:	6852      	ldr	r2, [r2, #4]
			if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006060:	2b01      	cmp	r3, #1
 8006062:	d02f      	beq.n	80060c4 <HAL_RCC_OscConfig+0x424>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 8006064:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
							!= RCC_OscInitStruct->PLL.PLLSource)
 8006068:	69e1      	ldr	r1, [r4, #28]
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 800606a:	428b      	cmp	r3, r1
 800606c:	d12c      	bne.n	80060c8 <HAL_RCC_OscConfig+0x428>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 800606e:	f002 033f 	and.w	r3, r2, #63	; 0x3f
							!= RCC_OscInitStruct->PLL.PLLM)
 8006072:	6a21      	ldr	r1, [r4, #32]
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 8006074:	428b      	cmp	r3, r1
 8006076:	d129      	bne.n	80060cc <HAL_RCC_OscConfig+0x42c>
							!= (RCC_OscInitStruct->PLL.PLLN
 8006078:	6a61      	ldr	r1, [r4, #36]	; 0x24
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)
 800607a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800607e:	4013      	ands	r3, r2
 8006080:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 8006084:	d124      	bne.n	80060d0 <HAL_RCC_OscConfig+0x430>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)
 8006086:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
							!= ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U)
 800608a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800608c:	085b      	lsrs	r3, r3, #1
 800608e:	3b01      	subs	r3, #1
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)
 8006090:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 8006094:	d11e      	bne.n	80060d4 <HAL_RCC_OscConfig+0x434>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 8006096:	f002 6370 	and.w	r3, r2, #251658240	; 0xf000000
							!= (RCC_OscInitStruct->PLL.PLLQ
 800609a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 800609c:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 80060a0:	d11a      	bne.n	80060d8 <HAL_RCC_OscConfig+0x438>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)
 80060a2:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
							!= (RCC_OscInitStruct->PLL.PLLR
 80060a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)
 80060a8:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
 80060ac:	d116      	bne.n	80060dc <HAL_RCC_OscConfig+0x43c>
	return HAL_OK;
 80060ae:	2000      	movs	r0, #0
 80060b0:	e006      	b.n	80060c0 <HAL_RCC_OscConfig+0x420>
		return HAL_ERROR;
 80060b2:	2001      	movs	r0, #1
}
 80060b4:	4770      	bx	lr
				return HAL_ERROR;
 80060b6:	2001      	movs	r0, #1
 80060b8:	e002      	b.n	80060c0 <HAL_RCC_OscConfig+0x420>
				return HAL_ERROR;
 80060ba:	2001      	movs	r0, #1
 80060bc:	e000      	b.n	80060c0 <HAL_RCC_OscConfig+0x420>
	return HAL_OK;
 80060be:	2000      	movs	r0, #0
}
 80060c0:	b002      	add	sp, #8
 80060c2:	bd70      	pop	{r4, r5, r6, pc}
				return HAL_ERROR;
 80060c4:	2001      	movs	r0, #1
 80060c6:	e7fb      	b.n	80060c0 <HAL_RCC_OscConfig+0x420>
 80060c8:	2001      	movs	r0, #1
 80060ca:	e7f9      	b.n	80060c0 <HAL_RCC_OscConfig+0x420>
 80060cc:	2001      	movs	r0, #1
 80060ce:	e7f7      	b.n	80060c0 <HAL_RCC_OscConfig+0x420>
 80060d0:	2001      	movs	r0, #1
 80060d2:	e7f5      	b.n	80060c0 <HAL_RCC_OscConfig+0x420>
 80060d4:	2001      	movs	r0, #1
 80060d6:	e7f3      	b.n	80060c0 <HAL_RCC_OscConfig+0x420>
 80060d8:	2001      	movs	r0, #1
 80060da:	e7f1      	b.n	80060c0 <HAL_RCC_OscConfig+0x420>
 80060dc:	2001      	movs	r0, #1
 80060de:	e7ef      	b.n	80060c0 <HAL_RCC_OscConfig+0x420>
 80060e0:	40023800 	.word	0x40023800

080060e4 <HAL_RCC_GetSysClockFreq>:
 *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
 *
 *
 * @retval SYSCLK frequency
 */
uint32_t HAL_RCC_GetSysClockFreq(void) {
 80060e4:	b508      	push	{r3, lr}
	uint32_t pllm = 0, pllvco = 0, pllp = 0;
	uint32_t sysclockfreq = 0;

	/* Get SYSCLK source -------------------------------------------------------*/
	switch (RCC->CFGR & RCC_CFGR_SWS) {
 80060e6:	4b26      	ldr	r3, [pc, #152]	; (8006180 <HAL_RCC_GetSysClockFreq+0x9c>)
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	f003 030c 	and.w	r3, r3, #12
 80060ee:	2b04      	cmp	r3, #4
 80060f0:	d041      	beq.n	8006176 <HAL_RCC_GetSysClockFreq+0x92>
 80060f2:	2b08      	cmp	r3, #8
 80060f4:	d141      	bne.n	800617a <HAL_RCC_GetSysClockFreq+0x96>
	}
	case RCC_SYSCLKSOURCE_STATUS_PLLCLK: /* PLL used as system clock  source */
	{
		/* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
		 SYSCLK = PLL_VCO / PLLP */
		pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80060f6:	4b22      	ldr	r3, [pc, #136]	; (8006180 <HAL_RCC_GetSysClockFreq+0x9c>)
 80060f8:	685a      	ldr	r2, [r3, #4]
 80060fa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
		if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI) {
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8006104:	d012      	beq.n	800612c <HAL_RCC_GetSysClockFreq+0x48>
			/* HSE used as PLL clock source */
			pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8006106:	4b1e      	ldr	r3, [pc, #120]	; (8006180 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006108:	6859      	ldr	r1, [r3, #4]
 800610a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800610e:	481d      	ldr	r0, [pc, #116]	; (8006184 <HAL_RCC_GetSysClockFreq+0xa0>)
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8006110:	2300      	movs	r3, #0
 8006112:	fba1 0100 	umull	r0, r1, r1, r0
 8006116:	f7fa f8e3 	bl	80002e0 <__aeabi_uldivmod>
			pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
		}
		pllp =
				((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos)
 800611a:	4b19      	ldr	r3, [pc, #100]	; (8006180 <HAL_RCC_GetSysClockFreq+0x9c>)
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	f3c3 4301 	ubfx	r3, r3, #16, #2
						+ 1) * 2);
 8006122:	3301      	adds	r3, #1
		pllp =
 8006124:	005b      	lsls	r3, r3, #1

		sysclockfreq = pllvco / pllp;
 8006126:	fbb0 f0f3 	udiv	r0, r0, r3
		break;
 800612a:	e027      	b.n	800617c <HAL_RCC_GetSysClockFreq+0x98>
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 800612c:	4b14      	ldr	r3, [pc, #80]	; (8006180 <HAL_RCC_GetSysClockFreq+0x9c>)
 800612e:	6858      	ldr	r0, [r3, #4]
 8006130:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8006134:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8006138:	ebbc 0c00 	subs.w	ip, ip, r0
 800613c:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8006140:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8006144:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8006148:	ea4f 118c 	mov.w	r1, ip, lsl #6
 800614c:	ebb1 010c 	subs.w	r1, r1, ip
 8006150:	eb63 030e 	sbc.w	r3, r3, lr
 8006154:	00db      	lsls	r3, r3, #3
 8006156:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800615a:	00c9      	lsls	r1, r1, #3
 800615c:	eb11 0c00 	adds.w	ip, r1, r0
 8006160:	f143 0300 	adc.w	r3, r3, #0
 8006164:	0299      	lsls	r1, r3, #10
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8006166:	2300      	movs	r3, #0
 8006168:	ea4f 208c 	mov.w	r0, ip, lsl #10
 800616c:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8006170:	f7fa f8b6 	bl	80002e0 <__aeabi_uldivmod>
 8006174:	e7d1      	b.n	800611a <HAL_RCC_GetSysClockFreq+0x36>
		sysclockfreq = HSE_VALUE;
 8006176:	4803      	ldr	r0, [pc, #12]	; (8006184 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006178:	e000      	b.n	800617c <HAL_RCC_GetSysClockFreq+0x98>
	switch (RCC->CFGR & RCC_CFGR_SWS) {
 800617a:	4803      	ldr	r0, [pc, #12]	; (8006188 <HAL_RCC_GetSysClockFreq+0xa4>)
		sysclockfreq = HSI_VALUE;
		break;
	}
	}
	return sysclockfreq;
}
 800617c:	bd08      	pop	{r3, pc}
 800617e:	bf00      	nop
 8006180:	40023800 	.word	0x40023800
 8006184:	017d7840 	.word	0x017d7840
 8006188:	00f42400 	.word	0x00f42400

0800618c <HAL_RCC_ClockConfig>:
	if (RCC_ClkInitStruct == NULL) {
 800618c:	2800      	cmp	r0, #0
 800618e:	f000 80a0 	beq.w	80062d2 <HAL_RCC_ClockConfig+0x146>
		uint32_t FLatency) {
 8006192:	b570      	push	{r4, r5, r6, lr}
 8006194:	460d      	mov	r5, r1
 8006196:	4604      	mov	r4, r0
	if (FLatency > __HAL_FLASH_GET_LATENCY()) {
 8006198:	4b52      	ldr	r3, [pc, #328]	; (80062e4 <HAL_RCC_ClockConfig+0x158>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 030f 	and.w	r3, r3, #15
 80061a0:	428b      	cmp	r3, r1
 80061a2:	d20b      	bcs.n	80061bc <HAL_RCC_ClockConfig+0x30>
		__HAL_FLASH_SET_LATENCY(FLatency);
 80061a4:	4a4f      	ldr	r2, [pc, #316]	; (80062e4 <HAL_RCC_ClockConfig+0x158>)
 80061a6:	6813      	ldr	r3, [r2, #0]
 80061a8:	f023 030f 	bic.w	r3, r3, #15
 80061ac:	430b      	orrs	r3, r1
 80061ae:	6013      	str	r3, [r2, #0]
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 80061b0:	6813      	ldr	r3, [r2, #0]
 80061b2:	f003 030f 	and.w	r3, r3, #15
 80061b6:	428b      	cmp	r3, r1
 80061b8:	f040 808d 	bne.w	80062d6 <HAL_RCC_ClockConfig+0x14a>
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK)
 80061bc:	6823      	ldr	r3, [r4, #0]
 80061be:	f013 0f02 	tst.w	r3, #2
 80061c2:	d017      	beq.n	80061f4 <HAL_RCC_ClockConfig+0x68>
		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 80061c4:	f013 0f04 	tst.w	r3, #4
 80061c8:	d004      	beq.n	80061d4 <HAL_RCC_ClockConfig+0x48>
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061ca:	4a47      	ldr	r2, [pc, #284]	; (80062e8 <HAL_RCC_ClockConfig+0x15c>)
 80061cc:	6893      	ldr	r3, [r2, #8]
 80061ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80061d2:	6093      	str	r3, [r2, #8]
		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 80061d4:	6823      	ldr	r3, [r4, #0]
 80061d6:	f013 0f08 	tst.w	r3, #8
 80061da:	d004      	beq.n	80061e6 <HAL_RCC_ClockConfig+0x5a>
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061dc:	4a42      	ldr	r2, [pc, #264]	; (80062e8 <HAL_RCC_ClockConfig+0x15c>)
 80061de:	6893      	ldr	r3, [r2, #8]
 80061e0:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80061e4:	6093      	str	r3, [r2, #8]
		MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061e6:	4a40      	ldr	r2, [pc, #256]	; (80062e8 <HAL_RCC_ClockConfig+0x15c>)
 80061e8:	6893      	ldr	r3, [r2, #8]
 80061ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061ee:	68a1      	ldr	r1, [r4, #8]
 80061f0:	430b      	orrs	r3, r1
 80061f2:	6093      	str	r3, [r2, #8]
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK)
 80061f4:	6823      	ldr	r3, [r4, #0]
 80061f6:	f013 0f01 	tst.w	r3, #1
 80061fa:	d031      	beq.n	8006260 <HAL_RCC_ClockConfig+0xd4>
		if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 80061fc:	6863      	ldr	r3, [r4, #4]
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d020      	beq.n	8006244 <HAL_RCC_ClockConfig+0xb8>
		else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) {
 8006202:	2b02      	cmp	r3, #2
 8006204:	d025      	beq.n	8006252 <HAL_RCC_ClockConfig+0xc6>
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8006206:	4a38      	ldr	r2, [pc, #224]	; (80062e8 <HAL_RCC_ClockConfig+0x15c>)
 8006208:	6812      	ldr	r2, [r2, #0]
 800620a:	f012 0f02 	tst.w	r2, #2
 800620e:	d064      	beq.n	80062da <HAL_RCC_ClockConfig+0x14e>
		__HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006210:	4935      	ldr	r1, [pc, #212]	; (80062e8 <HAL_RCC_ClockConfig+0x15c>)
 8006212:	688a      	ldr	r2, [r1, #8]
 8006214:	f022 0203 	bic.w	r2, r2, #3
 8006218:	4313      	orrs	r3, r2
 800621a:	608b      	str	r3, [r1, #8]
		tickstart = HAL_GetTick();
 800621c:	f7fd fe70 	bl	8003f00 <HAL_GetTick>
 8006220:	4606      	mov	r6, r0
		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 8006222:	4b31      	ldr	r3, [pc, #196]	; (80062e8 <HAL_RCC_ClockConfig+0x15c>)
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	f003 030c 	and.w	r3, r3, #12
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
 800622a:	6862      	ldr	r2, [r4, #4]
 800622c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006230:	d016      	beq.n	8006260 <HAL_RCC_ClockConfig+0xd4>
			if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 8006232:	f7fd fe65 	bl	8003f00 <HAL_GetTick>
 8006236:	1b80      	subs	r0, r0, r6
 8006238:	f241 3388 	movw	r3, #5000	; 0x1388
 800623c:	4298      	cmp	r0, r3
 800623e:	d9f0      	bls.n	8006222 <HAL_RCC_ClockConfig+0x96>
				return HAL_TIMEOUT;
 8006240:	2003      	movs	r0, #3
 8006242:	e045      	b.n	80062d0 <HAL_RCC_ClockConfig+0x144>
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8006244:	4a28      	ldr	r2, [pc, #160]	; (80062e8 <HAL_RCC_ClockConfig+0x15c>)
 8006246:	6812      	ldr	r2, [r2, #0]
 8006248:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800624c:	d1e0      	bne.n	8006210 <HAL_RCC_ClockConfig+0x84>
				return HAL_ERROR;
 800624e:	2001      	movs	r0, #1
 8006250:	e03e      	b.n	80062d0 <HAL_RCC_ClockConfig+0x144>
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8006252:	4a25      	ldr	r2, [pc, #148]	; (80062e8 <HAL_RCC_ClockConfig+0x15c>)
 8006254:	6812      	ldr	r2, [r2, #0]
 8006256:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800625a:	d1d9      	bne.n	8006210 <HAL_RCC_ClockConfig+0x84>
				return HAL_ERROR;
 800625c:	2001      	movs	r0, #1
 800625e:	e037      	b.n	80062d0 <HAL_RCC_ClockConfig+0x144>
	if (FLatency < __HAL_FLASH_GET_LATENCY()) {
 8006260:	4b20      	ldr	r3, [pc, #128]	; (80062e4 <HAL_RCC_ClockConfig+0x158>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 030f 	and.w	r3, r3, #15
 8006268:	42ab      	cmp	r3, r5
 800626a:	d90a      	bls.n	8006282 <HAL_RCC_ClockConfig+0xf6>
		__HAL_FLASH_SET_LATENCY(FLatency);
 800626c:	4a1d      	ldr	r2, [pc, #116]	; (80062e4 <HAL_RCC_ClockConfig+0x158>)
 800626e:	6813      	ldr	r3, [r2, #0]
 8006270:	f023 030f 	bic.w	r3, r3, #15
 8006274:	432b      	orrs	r3, r5
 8006276:	6013      	str	r3, [r2, #0]
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 8006278:	6813      	ldr	r3, [r2, #0]
 800627a:	f003 030f 	and.w	r3, r3, #15
 800627e:	42ab      	cmp	r3, r5
 8006280:	d12d      	bne.n	80062de <HAL_RCC_ClockConfig+0x152>
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 8006282:	6823      	ldr	r3, [r4, #0]
 8006284:	f013 0f04 	tst.w	r3, #4
 8006288:	d006      	beq.n	8006298 <HAL_RCC_ClockConfig+0x10c>
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1,
 800628a:	4a17      	ldr	r2, [pc, #92]	; (80062e8 <HAL_RCC_ClockConfig+0x15c>)
 800628c:	6893      	ldr	r3, [r2, #8]
 800628e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8006292:	68e1      	ldr	r1, [r4, #12]
 8006294:	430b      	orrs	r3, r1
 8006296:	6093      	str	r3, [r2, #8]
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 8006298:	6823      	ldr	r3, [r4, #0]
 800629a:	f013 0f08 	tst.w	r3, #8
 800629e:	d007      	beq.n	80062b0 <HAL_RCC_ClockConfig+0x124>
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2,
 80062a0:	4a11      	ldr	r2, [pc, #68]	; (80062e8 <HAL_RCC_ClockConfig+0x15c>)
 80062a2:	6893      	ldr	r3, [r2, #8]
 80062a4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80062a8:	6921      	ldr	r1, [r4, #16]
 80062aa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80062ae:	6093      	str	r3, [r2, #8]
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 80062b0:	f7ff ff18 	bl	80060e4 <HAL_RCC_GetSysClockFreq>
			>> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80062b4:	4b0c      	ldr	r3, [pc, #48]	; (80062e8 <HAL_RCC_ClockConfig+0x15c>)
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80062bc:	4a0b      	ldr	r2, [pc, #44]	; (80062ec <HAL_RCC_ClockConfig+0x160>)
 80062be:	5cd3      	ldrb	r3, [r2, r3]
 80062c0:	40d8      	lsrs	r0, r3
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 80062c2:	4b0b      	ldr	r3, [pc, #44]	; (80062f0 <HAL_RCC_ClockConfig+0x164>)
 80062c4:	6018      	str	r0, [r3, #0]
	HAL_InitTick(uwTickPrio);
 80062c6:	4b0b      	ldr	r3, [pc, #44]	; (80062f4 <HAL_RCC_ClockConfig+0x168>)
 80062c8:	6818      	ldr	r0, [r3, #0]
 80062ca:	f7fd fceb 	bl	8003ca4 <HAL_InitTick>
	return HAL_OK;
 80062ce:	2000      	movs	r0, #0
}
 80062d0:	bd70      	pop	{r4, r5, r6, pc}
		return HAL_ERROR;
 80062d2:	2001      	movs	r0, #1
}
 80062d4:	4770      	bx	lr
			return HAL_ERROR;
 80062d6:	2001      	movs	r0, #1
 80062d8:	e7fa      	b.n	80062d0 <HAL_RCC_ClockConfig+0x144>
				return HAL_ERROR;
 80062da:	2001      	movs	r0, #1
 80062dc:	e7f8      	b.n	80062d0 <HAL_RCC_ClockConfig+0x144>
			return HAL_ERROR;
 80062de:	2001      	movs	r0, #1
 80062e0:	e7f6      	b.n	80062d0 <HAL_RCC_ClockConfig+0x144>
 80062e2:	bf00      	nop
 80062e4:	40023c00 	.word	0x40023c00
 80062e8:	40023800 	.word	0x40023800
 80062ec:	0800ab70 	.word	0x0800ab70
 80062f0:	200000a8 	.word	0x200000a8
 80062f4:	200000b0 	.word	0x200000b0

080062f8 <HAL_RCC_GetHCLKFreq>:
 * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
 * @retval HCLK frequency
 */
uint32_t HAL_RCC_GetHCLKFreq(void) {
	return SystemCoreClock;
}
 80062f8:	4b01      	ldr	r3, [pc, #4]	; (8006300 <HAL_RCC_GetHCLKFreq+0x8>)
 80062fa:	6818      	ldr	r0, [r3, #0]
 80062fc:	4770      	bx	lr
 80062fe:	bf00      	nop
 8006300:	200000a8 	.word	0x200000a8

08006304 <HAL_RCC_GetPCLK1Freq>:
 * @brief  Returns the PCLK1 frequency
 * @note   Each time PCLK1 changes, this function must be called to update the
 *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK1 frequency
 */
uint32_t HAL_RCC_GetPCLK1Freq(void) {
 8006304:	b508      	push	{r3, lr}
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (HAL_RCC_GetHCLKFreq()
 8006306:	f7ff fff7 	bl	80062f8 <HAL_RCC_GetHCLKFreq>
			>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800630a:	4b04      	ldr	r3, [pc, #16]	; (800631c <HAL_RCC_GetPCLK1Freq+0x18>)
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8006312:	4a03      	ldr	r2, [pc, #12]	; (8006320 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006314:	5cd3      	ldrb	r3, [r2, r3]
}
 8006316:	40d8      	lsrs	r0, r3
 8006318:	bd08      	pop	{r3, pc}
 800631a:	bf00      	nop
 800631c:	40023800 	.word	0x40023800
 8006320:	0800ab80 	.word	0x0800ab80

08006324 <HAL_RCC_GetPCLK2Freq>:
 * @brief  Returns the PCLK2 frequency
 * @note   Each time PCLK2 changes, this function must be called to update the
 *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK2 frequency
 */
uint32_t HAL_RCC_GetPCLK2Freq(void) {
 8006324:	b508      	push	{r3, lr}
	/* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
	return (HAL_RCC_GetHCLKFreq()
 8006326:	f7ff ffe7 	bl	80062f8 <HAL_RCC_GetHCLKFreq>
			>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800632a:	4b04      	ldr	r3, [pc, #16]	; (800633c <HAL_RCC_GetPCLK2Freq+0x18>)
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8006332:	4a03      	ldr	r2, [pc, #12]	; (8006340 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006334:	5cd3      	ldrb	r3, [r2, r3]
}
 8006336:	40d8      	lsrs	r0, r3
 8006338:	bd08      	pop	{r3, pc}
 800633a:	bf00      	nop
 800633c:	40023800 	.word	0x40023800
 8006340:	0800ab80 	.word	0x0800ab80

08006344 <HAL_RCC_GetClockConfig>:
 * @retval None
 */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct,
		uint32_t *pFLatency) {
	/* Set all possible values for the Clock type parameter --------------------*/
	RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 8006344:	230f      	movs	r3, #15
 8006346:	6003      	str	r3, [r0, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

	/* Get the SYSCLK configuration --------------------------------------------*/
	RCC_ClkInitStruct->SYSCLKSource = (uint32_t) (RCC->CFGR & RCC_CFGR_SW);
 8006348:	4b0b      	ldr	r3, [pc, #44]	; (8006378 <HAL_RCC_GetClockConfig+0x34>)
 800634a:	689a      	ldr	r2, [r3, #8]
 800634c:	f002 0203 	and.w	r2, r2, #3
 8006350:	6042      	str	r2, [r0, #4]

	/* Get the HCLK configuration ----------------------------------------------*/
	RCC_ClkInitStruct->AHBCLKDivider = (uint32_t) (RCC->CFGR & RCC_CFGR_HPRE);
 8006352:	689a      	ldr	r2, [r3, #8]
 8006354:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8006358:	6082      	str	r2, [r0, #8]

	/* Get the APB1 configuration ----------------------------------------------*/
	RCC_ClkInitStruct->APB1CLKDivider = (uint32_t) (RCC->CFGR & RCC_CFGR_PPRE1);
 800635a:	689a      	ldr	r2, [r3, #8]
 800635c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8006360:	60c2      	str	r2, [r0, #12]

	/* Get the APB2 configuration ----------------------------------------------*/
	RCC_ClkInitStruct->APB2CLKDivider = (uint32_t) ((RCC->CFGR & RCC_CFGR_PPRE2)
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	08db      	lsrs	r3, r3, #3
 8006366:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800636a:	6103      	str	r3, [r0, #16]
			>> 3);

	/* Get the Flash Wait State (Latency) configuration ------------------------*/
	*pFLatency = (uint32_t) (FLASH->ACR & FLASH_ACR_LATENCY);
 800636c:	4b03      	ldr	r3, [pc, #12]	; (800637c <HAL_RCC_GetClockConfig+0x38>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 030f 	and.w	r3, r3, #15
 8006374:	600b      	str	r3, [r1, #0]
}
 8006376:	4770      	bx	lr
 8006378:	40023800 	.word	0x40023800
 800637c:	40023c00 	.word	0x40023c00

08006380 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006382:	b083      	sub	sp, #12
 8006384:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006386:	6806      	ldr	r6, [r0, #0]
 8006388:	f016 0601 	ands.w	r6, r6, #1
 800638c:	d00d      	beq.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800638e:	4bb5      	ldr	r3, [pc, #724]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006390:	689a      	ldr	r2, [r3, #8]
 8006392:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8006396:	609a      	str	r2, [r3, #8]
 8006398:	689a      	ldr	r2, [r3, #8]
 800639a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800639c:	430a      	orrs	r2, r1
 800639e:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80063a0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	f000 8167 	beq.w	8006676 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  uint32_t plli2sused = 0;
 80063a8:	2600      	movs	r6, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80063aa:	6825      	ldr	r5, [r4, #0]
 80063ac:	f415 2500 	ands.w	r5, r5, #524288	; 0x80000
 80063b0:	d011      	beq.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80063b2:	4aac      	ldr	r2, [pc, #688]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80063b4:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80063b8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80063bc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80063be:	430b      	orrs	r3, r1
 80063c0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80063c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80063c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063ca:	f000 8156 	beq.w	800667a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	f000 8155 	beq.w	800667e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  uint32_t pllsaiused = 0;
 80063d4:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80063d6:	6823      	ldr	r3, [r4, #0]
 80063d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80063dc:	d00f      	beq.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80063de:	4aa1      	ldr	r2, [pc, #644]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80063e0:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80063e4:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80063e8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80063ea:	430b      	orrs	r3, r1
 80063ec:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80063f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80063f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063f6:	f000 8144 	beq.w	8006682 <HAL_RCCEx_PeriphCLKConfig+0x302>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80063fa:	b903      	cbnz	r3, 80063fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      pllsaiused = 1;
 80063fc:	2501      	movs	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80063fe:	6823      	ldr	r3, [r4, #0]
 8006400:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8006404:	d000      	beq.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
      plli2sused = 1;
 8006406:	2601      	movs	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006408:	f013 0f20 	tst.w	r3, #32
 800640c:	f040 813b 	bne.w	8006686 <HAL_RCCEx_PeriphCLKConfig+0x306>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006410:	6823      	ldr	r3, [r4, #0]
 8006412:	f013 0f10 	tst.w	r3, #16
 8006416:	d00c      	beq.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006418:	4b92      	ldr	r3, [pc, #584]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800641a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800641e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006422:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8006426:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800642a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800642c:	430a      	orrs	r2, r1
 800642e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006432:	6823      	ldr	r3, [r4, #0]
 8006434:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006438:	d008      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800643a:	4a8a      	ldr	r2, [pc, #552]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800643c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006440:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006444:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006446:	430b      	orrs	r3, r1
 8006448:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800644c:	6823      	ldr	r3, [r4, #0]
 800644e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8006452:	d008      	beq.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006454:	4a83      	ldr	r2, [pc, #524]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006456:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800645a:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800645e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8006460:	430b      	orrs	r3, r1
 8006462:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006466:	6823      	ldr	r3, [r4, #0]
 8006468:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800646c:	d008      	beq.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800646e:	4a7d      	ldr	r2, [pc, #500]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006470:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006474:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006478:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800647a:	430b      	orrs	r3, r1
 800647c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006480:	6823      	ldr	r3, [r4, #0]
 8006482:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006486:	d008      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006488:	4a76      	ldr	r2, [pc, #472]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800648a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800648e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8006492:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8006494:	430b      	orrs	r3, r1
 8006496:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800649a:	6823      	ldr	r3, [r4, #0]
 800649c:	f013 0f40 	tst.w	r3, #64	; 0x40
 80064a0:	d008      	beq.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80064a2:	4a70      	ldr	r2, [pc, #448]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80064a4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80064a8:	f023 0303 	bic.w	r3, r3, #3
 80064ac:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80064ae:	430b      	orrs	r3, r1
 80064b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80064b4:	6823      	ldr	r3, [r4, #0]
 80064b6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80064ba:	d008      	beq.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80064bc:	4a69      	ldr	r2, [pc, #420]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80064be:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80064c2:	f023 030c 	bic.w	r3, r3, #12
 80064c6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80064c8:	430b      	orrs	r3, r1
 80064ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80064ce:	6823      	ldr	r3, [r4, #0]
 80064d0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80064d4:	d008      	beq.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80064d6:	4a63      	ldr	r2, [pc, #396]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80064d8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80064dc:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80064e0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80064e2:	430b      	orrs	r3, r1
 80064e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80064e8:	6823      	ldr	r3, [r4, #0]
 80064ea:	f413 7f00 	tst.w	r3, #512	; 0x200
 80064ee:	d008      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80064f0:	4a5c      	ldr	r2, [pc, #368]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80064f2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80064f6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80064fa:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80064fc:	430b      	orrs	r3, r1
 80064fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006502:	6823      	ldr	r3, [r4, #0]
 8006504:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006508:	d008      	beq.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800650a:	4a56      	ldr	r2, [pc, #344]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800650c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006510:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006514:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8006516:	430b      	orrs	r3, r1
 8006518:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800651c:	6823      	ldr	r3, [r4, #0]
 800651e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8006522:	d008      	beq.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006524:	4a4f      	ldr	r2, [pc, #316]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006526:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800652a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800652e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006530:	430b      	orrs	r3, r1
 8006532:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006536:	6823      	ldr	r3, [r4, #0]
 8006538:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800653c:	d008      	beq.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800653e:	4a49      	ldr	r2, [pc, #292]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006540:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006544:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006548:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800654a:	430b      	orrs	r3, r1
 800654c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006550:	6823      	ldr	r3, [r4, #0]
 8006552:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8006556:	d008      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006558:	4a42      	ldr	r2, [pc, #264]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800655a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800655e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006562:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8006564:	430b      	orrs	r3, r1
 8006566:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800656a:	6823      	ldr	r3, [r4, #0]
 800656c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8006570:	d008      	beq.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006572:	4a3c      	ldr	r2, [pc, #240]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006574:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006578:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800657c:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800657e:	430b      	orrs	r3, r1
 8006580:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006584:	6823      	ldr	r3, [r4, #0]
 8006586:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800658a:	d00d      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800658c:	4a35      	ldr	r2, [pc, #212]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800658e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006592:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8006596:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8006598:	430b      	orrs	r3, r1
 800659a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800659e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80065a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065a4:	f000 80d5 	beq.w	8006752 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80065a8:	6823      	ldr	r3, [r4, #0]
 80065aa:	f013 0f08 	tst.w	r3, #8
 80065ae:	d000      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    pllsaiused = 1;
 80065b0:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80065b2:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80065b6:	d008      	beq.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80065b8:	4a2a      	ldr	r2, [pc, #168]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80065ba:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80065be:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80065c2:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80065c4:	430b      	orrs	r3, r1
 80065c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80065ca:	6823      	ldr	r3, [r4, #0]
 80065cc:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80065d0:	d009      	beq.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80065d2:	4a24      	ldr	r2, [pc, #144]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80065d4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80065d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065dc:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80065e0:	430b      	orrs	r3, r1
 80065e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80065e6:	6823      	ldr	r3, [r4, #0]
 80065e8:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 80065ec:	d009      	beq.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x282>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80065ee:	4a1d      	ldr	r2, [pc, #116]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80065f0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80065f4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80065f8:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80065fc:	430b      	orrs	r3, r1
 80065fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006602:	6823      	ldr	r3, [r4, #0]
 8006604:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8006608:	d009      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800660a:	4a16      	ldr	r2, [pc, #88]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800660c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8006610:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006614:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8006618:	430b      	orrs	r3, r1
 800661a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800661e:	6823      	ldr	r3, [r4, #0]
 8006620:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8006624:	d009      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006626:	4a0f      	ldr	r2, [pc, #60]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006628:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800662c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006630:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8006634:	430b      	orrs	r3, r1
 8006636:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800663a:	b926      	cbnz	r6, 8006646 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
 800663c:	6823      	ldr	r3, [r4, #0]
 800663e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006642:	f000 8106 	beq.w	8006852 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006646:	4a07      	ldr	r2, [pc, #28]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006648:	6813      	ldr	r3, [r2, #0]
 800664a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800664e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006650:	f7fd fc56 	bl	8003f00 <HAL_GetTick>
 8006654:	4606      	mov	r6, r0

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006656:	4b03      	ldr	r3, [pc, #12]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800665e:	d07a      	beq.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
 8006660:	e002      	b.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8006662:	bf00      	nop
 8006664:	40023800 	.word	0x40023800
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006668:	f7fd fc4a 	bl	8003f00 <HAL_GetTick>
 800666c:	1b80      	subs	r0, r0, r6
 800666e:	2864      	cmp	r0, #100	; 0x64
 8006670:	d9f1      	bls.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006672:	2003      	movs	r0, #3
 8006674:	e0f0      	b.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
      plli2sused = 1;
 8006676:	2601      	movs	r6, #1
 8006678:	e697      	b.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1;
 800667a:	2601      	movs	r6, #1
 800667c:	e6a7      	b.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
      pllsaiused = 1;
 800667e:	2501      	movs	r5, #1
 8006680:	e6a9      	b.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
      plli2sused = 1;
 8006682:	2601      	movs	r6, #1
 8006684:	e6b9      	b.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
    __HAL_RCC_PWR_CLK_ENABLE();
 8006686:	4b7f      	ldr	r3, [pc, #508]	; (8006884 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006688:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800668a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800668e:	641a      	str	r2, [r3, #64]	; 0x40
 8006690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006696:	9301      	str	r3, [sp, #4]
 8006698:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800669a:	4a7b      	ldr	r2, [pc, #492]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 800669c:	6813      	ldr	r3, [r2, #0]
 800669e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066a2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80066a4:	f7fd fc2c 	bl	8003f00 <HAL_GetTick>
 80066a8:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80066aa:	4b77      	ldr	r3, [pc, #476]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f413 7f80 	tst.w	r3, #256	; 0x100
 80066b2:	d106      	bne.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x342>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066b4:	f7fd fc24 	bl	8003f00 <HAL_GetTick>
 80066b8:	1bc0      	subs	r0, r0, r7
 80066ba:	2864      	cmp	r0, #100	; 0x64
 80066bc:	d9f5      	bls.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x32a>
        return HAL_TIMEOUT;
 80066be:	2003      	movs	r0, #3
 80066c0:	e0ca      	b.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80066c2:	4b70      	ldr	r3, [pc, #448]	; (8006884 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80066c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80066c6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80066ca:	d015      	beq.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x378>
 80066cc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80066ce:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d010      	beq.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x378>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80066d6:	4b6b      	ldr	r3, [pc, #428]	; (8006884 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80066d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80066da:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80066de:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80066e0:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80066e4:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80066e6:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80066e8:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80066ec:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 80066ee:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80066f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066f2:	f013 0f01 	tst.w	r3, #1
 80066f6:	d112      	bne.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80066fa:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80066fe:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8006702:	d01d      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8006704:	4a5f      	ldr	r2, [pc, #380]	; (8006884 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006706:	6893      	ldr	r3, [r2, #8]
 8006708:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800670c:	6093      	str	r3, [r2, #8]
 800670e:	495d      	ldr	r1, [pc, #372]	; (8006884 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006710:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8006712:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006714:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8006718:	4313      	orrs	r3, r2
 800671a:	670b      	str	r3, [r1, #112]	; 0x70
 800671c:	e678      	b.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x90>
        tickstart = HAL_GetTick();
 800671e:	f7fd fbef 	bl	8003f00 <HAL_GetTick>
 8006722:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006724:	4b57      	ldr	r3, [pc, #348]	; (8006884 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006728:	f013 0f02 	tst.w	r3, #2
 800672c:	d1e4      	bne.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x378>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800672e:	f7fd fbe7 	bl	8003f00 <HAL_GetTick>
 8006732:	1bc0      	subs	r0, r0, r7
 8006734:	f241 3388 	movw	r3, #5000	; 0x1388
 8006738:	4298      	cmp	r0, r3
 800673a:	d9f3      	bls.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
            return HAL_TIMEOUT;
 800673c:	2003      	movs	r0, #3
 800673e:	e08b      	b.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006740:	4850      	ldr	r0, [pc, #320]	; (8006884 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006742:	6882      	ldr	r2, [r0, #8]
 8006744:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8006748:	4950      	ldr	r1, [pc, #320]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800674a:	4019      	ands	r1, r3
 800674c:	430a      	orrs	r2, r1
 800674e:	6082      	str	r2, [r0, #8]
 8006750:	e7dd      	b.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x38e>
      pllsaiused = 1;
 8006752:	2501      	movs	r5, #1
 8006754:	e728      	b.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x228>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006756:	6823      	ldr	r3, [r4, #0]
 8006758:	f013 0f01 	tst.w	r3, #1
 800675c:	d013      	beq.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800675e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006760:	b98b      	cbnz	r3, 8006786 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006762:	4a48      	ldr	r2, [pc, #288]	; (8006884 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006764:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006768:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800676c:	6860      	ldr	r0, [r4, #4]
 800676e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006772:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8006776:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800677a:	430b      	orrs	r3, r1
 800677c:	68a1      	ldr	r1, [r4, #8]
 800677e:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8006782:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006786:	6823      	ldr	r3, [r4, #0]
 8006788:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800678c:	d003      	beq.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800678e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006790:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8006794:	d006      	beq.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8006796:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800679a:	d01e      	beq.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x45a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800679c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800679e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067a2:	d11a      	bne.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x45a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80067a4:	4a37      	ldr	r2, [pc, #220]	; (8006884 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80067a6:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80067aa:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80067ae:	6860      	ldr	r0, [r4, #4]
 80067b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80067b4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80067b8:	68e0      	ldr	r0, [r4, #12]
 80067ba:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80067be:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80067c2:	430b      	orrs	r3, r1
 80067c4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80067c8:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80067cc:	f023 031f 	bic.w	r3, r3, #31
 80067d0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80067d2:	3901      	subs	r1, #1
 80067d4:	430b      	orrs	r3, r1
 80067d6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80067da:	6823      	ldr	r3, [r4, #0]
 80067dc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80067e0:	d011      	beq.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x486>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80067e2:	4a28      	ldr	r2, [pc, #160]	; (8006884 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80067e4:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80067e8:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80067ec:	6866      	ldr	r6, [r4, #4]
 80067ee:	6923      	ldr	r3, [r4, #16]
 80067f0:	041b      	lsls	r3, r3, #16
 80067f2:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 80067f6:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 80067fa:	4303      	orrs	r3, r0
 80067fc:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8006800:	430b      	orrs	r3, r1
 8006802:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006806:	6823      	ldr	r3, [r4, #0]
 8006808:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800680c:	d00d      	beq.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800680e:	6862      	ldr	r2, [r4, #4]
 8006810:	6923      	ldr	r3, [r4, #16]
 8006812:	041b      	lsls	r3, r3, #16
 8006814:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8006818:	68e2      	ldr	r2, [r4, #12]
 800681a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800681e:	68a2      	ldr	r2, [r4, #8]
 8006820:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8006824:	4a17      	ldr	r2, [pc, #92]	; (8006884 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006826:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800682a:	4a16      	ldr	r2, [pc, #88]	; (8006884 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800682c:	6813      	ldr	r3, [r2, #0]
 800682e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006832:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006834:	f7fd fb64 	bl	8003f00 <HAL_GetTick>
 8006838:	4606      	mov	r6, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800683a:	4b12      	ldr	r3, [pc, #72]	; (8006884 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8006842:	d106      	bne.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006844:	f7fd fb5c 	bl	8003f00 <HAL_GetTick>
 8006848:	1b80      	subs	r0, r0, r6
 800684a:	2864      	cmp	r0, #100	; 0x64
 800684c:	d9f5      	bls.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800684e:	2003      	movs	r0, #3
 8006850:	e002      	b.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006852:	2d01      	cmp	r5, #1
 8006854:	d002      	beq.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8006856:	2000      	movs	r0, #0
}
 8006858:	b003      	add	sp, #12
 800685a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 800685c:	4a09      	ldr	r2, [pc, #36]	; (8006884 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800685e:	6813      	ldr	r3, [r2, #0]
 8006860:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006864:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006866:	f7fd fb4b 	bl	8003f00 <HAL_GetTick>
 800686a:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800686c:	4b05      	ldr	r3, [pc, #20]	; (8006884 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8006874:	d00c      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x510>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006876:	f7fd fb43 	bl	8003f00 <HAL_GetTick>
 800687a:	1b40      	subs	r0, r0, r5
 800687c:	2864      	cmp	r0, #100	; 0x64
 800687e:	d9f5      	bls.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x4ec>
        return HAL_TIMEOUT;
 8006880:	2003      	movs	r0, #3
 8006882:	e7e9      	b.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8006884:	40023800 	.word	0x40023800
 8006888:	40007000 	.word	0x40007000
 800688c:	0ffffcff 	.word	0x0ffffcff
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006890:	6823      	ldr	r3, [r4, #0]
 8006892:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8006896:	d001      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x51c>
 8006898:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800689a:	b122      	cbz	r2, 80068a6 <HAL_RCCEx_PeriphCLKConfig+0x526>
 800689c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80068a0:	d01d      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x55e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80068a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80068a4:	b9db      	cbnz	r3, 80068de <HAL_RCCEx_PeriphCLKConfig+0x55e>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80068a6:	4a35      	ldr	r2, [pc, #212]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 80068a8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80068ac:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80068b0:	6960      	ldr	r0, [r4, #20]
 80068b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80068b6:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80068ba:	69a0      	ldr	r0, [r4, #24]
 80068bc:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80068c0:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80068c4:	430b      	orrs	r3, r1
 80068c6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80068ca:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80068ce:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80068d2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80068d4:	3901      	subs	r1, #1
 80068d6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80068da:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80068de:	6823      	ldr	r3, [r4, #0]
 80068e0:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80068e4:	d003      	beq.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x56e>
 80068e6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80068e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068ec:	d031      	beq.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80068ee:	6823      	ldr	r3, [r4, #0]
 80068f0:	f013 0f08 	tst.w	r3, #8
 80068f4:	d019      	beq.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80068f6:	4a21      	ldr	r2, [pc, #132]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 80068f8:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80068fc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006900:	6960      	ldr	r0, [r4, #20]
 8006902:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006906:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800690a:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800690e:	430b      	orrs	r3, r1
 8006910:	69e1      	ldr	r1, [r4, #28]
 8006912:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8006916:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800691a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800691e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006922:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006924:	430b      	orrs	r3, r1
 8006926:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 800692a:	4a14      	ldr	r2, [pc, #80]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 800692c:	6813      	ldr	r3, [r2, #0]
 800692e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006932:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006934:	f7fd fae4 	bl	8003f00 <HAL_GetTick>
 8006938:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800693a:	4b10      	ldr	r3, [pc, #64]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8006942:	d119      	bne.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006944:	f7fd fadc 	bl	8003f00 <HAL_GetTick>
 8006948:	1b00      	subs	r0, r0, r4
 800694a:	2864      	cmp	r0, #100	; 0x64
 800694c:	d9f5      	bls.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
        return HAL_TIMEOUT;
 800694e:	2003      	movs	r0, #3
 8006950:	e782      	b.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006952:	4a0a      	ldr	r2, [pc, #40]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8006954:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006958:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800695c:	6965      	ldr	r5, [r4, #20]
 800695e:	6a23      	ldr	r3, [r4, #32]
 8006960:	041b      	lsls	r3, r3, #16
 8006962:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8006966:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 800696a:	4303      	orrs	r3, r0
 800696c:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8006970:	430b      	orrs	r3, r1
 8006972:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8006976:	e7ba      	b.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x56e>
  return HAL_OK;
 8006978:	2000      	movs	r0, #0
 800697a:	e76d      	b.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 800697c:	40023800 	.word	0x40023800

08006980 <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8006980:	4770      	bx	lr

08006982 <HAL_SDRAM_Init>:
  if (hsdram == NULL)
 8006982:	b1e0      	cbz	r0, 80069be <HAL_SDRAM_Init+0x3c>
{
 8006984:	b538      	push	{r3, r4, r5, lr}
 8006986:	460d      	mov	r5, r1
 8006988:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800698a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800698e:	b18b      	cbz	r3, 80069b4 <HAL_SDRAM_Init+0x32>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006990:	2302      	movs	r3, #2
 8006992:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006996:	4621      	mov	r1, r4
 8006998:	f851 0b04 	ldr.w	r0, [r1], #4
 800699c:	f001 f86a 	bl	8007a74 <FMC_SDRAM_Init>
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80069a0:	6862      	ldr	r2, [r4, #4]
 80069a2:	4629      	mov	r1, r5
 80069a4:	6820      	ldr	r0, [r4, #0]
 80069a6:	f001 f89f 	bl	8007ae8 <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
 80069aa:	2301      	movs	r3, #1
 80069ac:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 80069b0:	2000      	movs	r0, #0
}
 80069b2:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 80069b4:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 80069b8:	f7ff ffe2 	bl	8006980 <HAL_SDRAM_MspInit>
 80069bc:	e7e8      	b.n	8006990 <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 80069be:	2001      	movs	r0, #1
}
 80069c0:	4770      	bx	lr

080069c2 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80069c2:	b538      	push	{r3, r4, r5, lr}
 80069c4:	4604      	mov	r4, r0
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80069c6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80069ca:	b2d8      	uxtb	r0, r3

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80069cc:	2802      	cmp	r0, #2
 80069ce:	d005      	beq.n	80069dc <HAL_SDRAM_SendCommand+0x1a>
 80069d0:	460d      	mov	r5, r1
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80069d2:	2805      	cmp	r0, #5
 80069d4:	bf18      	it	ne
 80069d6:	2801      	cmpne	r0, #1
 80069d8:	d001      	beq.n	80069de <HAL_SDRAM_SendCommand+0x1c>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 80069da:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 80069dc:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80069de:	2302      	movs	r3, #2
 80069e0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80069e4:	6820      	ldr	r0, [r4, #0]
 80069e6:	f001 f8d3 	bl	8007b90 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80069ea:	682b      	ldr	r3, [r5, #0]
 80069ec:	2b02      	cmp	r3, #2
 80069ee:	d004      	beq.n	80069fa <HAL_SDRAM_SendCommand+0x38>
      hsdram->State = HAL_SDRAM_STATE_READY;
 80069f0:	2301      	movs	r3, #1
 80069f2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 80069f6:	2000      	movs	r0, #0
 80069f8:	e7f0      	b.n	80069dc <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80069fa:	2305      	movs	r3, #5
 80069fc:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 8006a00:	2000      	movs	r0, #0
 8006a02:	e7eb      	b.n	80069dc <HAL_SDRAM_SendCommand+0x1a>

08006a04 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006a04:	b510      	push	{r4, lr}
 8006a06:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006a08:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006a0c:	b2d8      	uxtb	r0, r3
 8006a0e:	2802      	cmp	r0, #2
 8006a10:	d005      	beq.n	8006a1e <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8006a12:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d001      	beq.n	8006a20 <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 8006a1c:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8006a1e:	bd10      	pop	{r4, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006a20:	2302      	movs	r3, #2
 8006a22:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006a26:	6820      	ldr	r0, [r4, #0]
 8006a28:	f001 f8ca 	bl	8007bc0 <FMC_SDRAM_ProgramRefreshRate>
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 8006a32:	2000      	movs	r0, #0
 8006a34:	e7f3      	b.n	8006a1e <HAL_SDRAM_ProgramRefreshRate+0x1a>

08006a36 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006a36:	4770      	bx	lr

08006a38 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a38:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d13a      	bne.n	8006ab8 <HAL_TIM_Base_Start_IT+0x80>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a42:	2302      	movs	r3, #2
 8006a44:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a48:	6802      	ldr	r2, [r0, #0]
 8006a4a:	68d3      	ldr	r3, [r2, #12]
 8006a4c:	f043 0301 	orr.w	r3, r3, #1
 8006a50:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a52:	6803      	ldr	r3, [r0, #0]
 8006a54:	4a1a      	ldr	r2, [pc, #104]	; (8006ac0 <HAL_TIM_Base_Start_IT+0x88>)
 8006a56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a5a:	bf18      	it	ne
 8006a5c:	4293      	cmpne	r3, r2
 8006a5e:	d01d      	beq.n	8006a9c <HAL_TIM_Base_Start_IT+0x64>
 8006a60:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d019      	beq.n	8006a9c <HAL_TIM_Base_Start_IT+0x64>
 8006a68:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d015      	beq.n	8006a9c <HAL_TIM_Base_Start_IT+0x64>
 8006a70:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d011      	beq.n	8006a9c <HAL_TIM_Base_Start_IT+0x64>
 8006a78:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d00d      	beq.n	8006a9c <HAL_TIM_Base_Start_IT+0x64>
 8006a80:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d009      	beq.n	8006a9c <HAL_TIM_Base_Start_IT+0x64>
 8006a88:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d005      	beq.n	8006a9c <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	f042 0201 	orr.w	r2, r2, #1
 8006a96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a98:	2000      	movs	r0, #0
 8006a9a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a9c:	6899      	ldr	r1, [r3, #8]
 8006a9e:	4a09      	ldr	r2, [pc, #36]	; (8006ac4 <HAL_TIM_Base_Start_IT+0x8c>)
 8006aa0:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aa2:	2a06      	cmp	r2, #6
 8006aa4:	bf18      	it	ne
 8006aa6:	f5b2 3f80 	cmpne.w	r2, #65536	; 0x10000
 8006aaa:	d007      	beq.n	8006abc <HAL_TIM_Base_Start_IT+0x84>
      __HAL_TIM_ENABLE(htim);
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	f042 0201 	orr.w	r2, r2, #1
 8006ab2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006ab4:	2000      	movs	r0, #0
 8006ab6:	4770      	bx	lr
    return HAL_ERROR;
 8006ab8:	2001      	movs	r0, #1
 8006aba:	4770      	bx	lr
  return HAL_OK;
 8006abc:	2000      	movs	r0, #0
}
 8006abe:	4770      	bx	lr
 8006ac0:	40010000 	.word	0x40010000
 8006ac4:	00010007 	.word	0x00010007

08006ac8 <HAL_TIM_PeriodElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006ac8:	4770      	bx	lr

08006aca <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006aca:	4770      	bx	lr

08006acc <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006acc:	4770      	bx	lr

08006ace <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ace:	4770      	bx	lr

08006ad0 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ad0:	4770      	bx	lr

08006ad2 <HAL_TIM_IRQHandler>:
{
 8006ad2:	b510      	push	{r4, lr}
 8006ad4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ad6:	6803      	ldr	r3, [r0, #0]
 8006ad8:	691a      	ldr	r2, [r3, #16]
 8006ada:	f012 0f02 	tst.w	r2, #2
 8006ade:	d011      	beq.n	8006b04 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ae0:	68da      	ldr	r2, [r3, #12]
 8006ae2:	f012 0f02 	tst.w	r2, #2
 8006ae6:	d00d      	beq.n	8006b04 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ae8:	f06f 0202 	mvn.w	r2, #2
 8006aec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006aee:	2301      	movs	r3, #1
 8006af0:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006af2:	6803      	ldr	r3, [r0, #0]
 8006af4:	699b      	ldr	r3, [r3, #24]
 8006af6:	f013 0f03 	tst.w	r3, #3
 8006afa:	d079      	beq.n	8006bf0 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8006afc:	f7ff ffe6 	bl	8006acc <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b00:	2300      	movs	r3, #0
 8006b02:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b04:	6823      	ldr	r3, [r4, #0]
 8006b06:	691a      	ldr	r2, [r3, #16]
 8006b08:	f012 0f04 	tst.w	r2, #4
 8006b0c:	d012      	beq.n	8006b34 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b0e:	68da      	ldr	r2, [r3, #12]
 8006b10:	f012 0f04 	tst.w	r2, #4
 8006b14:	d00e      	beq.n	8006b34 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b16:	f06f 0204 	mvn.w	r2, #4
 8006b1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b1c:	2302      	movs	r3, #2
 8006b1e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b20:	6823      	ldr	r3, [r4, #0]
 8006b22:	699b      	ldr	r3, [r3, #24]
 8006b24:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006b28:	d068      	beq.n	8006bfc <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8006b2a:	4620      	mov	r0, r4
 8006b2c:	f7ff ffce 	bl	8006acc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b30:	2300      	movs	r3, #0
 8006b32:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b34:	6823      	ldr	r3, [r4, #0]
 8006b36:	691a      	ldr	r2, [r3, #16]
 8006b38:	f012 0f08 	tst.w	r2, #8
 8006b3c:	d012      	beq.n	8006b64 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b3e:	68da      	ldr	r2, [r3, #12]
 8006b40:	f012 0f08 	tst.w	r2, #8
 8006b44:	d00e      	beq.n	8006b64 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b46:	f06f 0208 	mvn.w	r2, #8
 8006b4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b4c:	2304      	movs	r3, #4
 8006b4e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b50:	6823      	ldr	r3, [r4, #0]
 8006b52:	69db      	ldr	r3, [r3, #28]
 8006b54:	f013 0f03 	tst.w	r3, #3
 8006b58:	d057      	beq.n	8006c0a <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8006b5a:	4620      	mov	r0, r4
 8006b5c:	f7ff ffb6 	bl	8006acc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b60:	2300      	movs	r3, #0
 8006b62:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006b64:	6823      	ldr	r3, [r4, #0]
 8006b66:	691a      	ldr	r2, [r3, #16]
 8006b68:	f012 0f10 	tst.w	r2, #16
 8006b6c:	d012      	beq.n	8006b94 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006b6e:	68da      	ldr	r2, [r3, #12]
 8006b70:	f012 0f10 	tst.w	r2, #16
 8006b74:	d00e      	beq.n	8006b94 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b76:	f06f 0210 	mvn.w	r2, #16
 8006b7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b7c:	2308      	movs	r3, #8
 8006b7e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b80:	6823      	ldr	r3, [r4, #0]
 8006b82:	69db      	ldr	r3, [r3, #28]
 8006b84:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006b88:	d046      	beq.n	8006c18 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8006b8a:	4620      	mov	r0, r4
 8006b8c:	f7ff ff9e 	bl	8006acc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b90:	2300      	movs	r3, #0
 8006b92:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b94:	6823      	ldr	r3, [r4, #0]
 8006b96:	691a      	ldr	r2, [r3, #16]
 8006b98:	f012 0f01 	tst.w	r2, #1
 8006b9c:	d003      	beq.n	8006ba6 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b9e:	68da      	ldr	r2, [r3, #12]
 8006ba0:	f012 0f01 	tst.w	r2, #1
 8006ba4:	d13f      	bne.n	8006c26 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ba6:	6823      	ldr	r3, [r4, #0]
 8006ba8:	691a      	ldr	r2, [r3, #16]
 8006baa:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006bae:	d003      	beq.n	8006bb8 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006bb0:	68da      	ldr	r2, [r3, #12]
 8006bb2:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006bb6:	d13d      	bne.n	8006c34 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006bb8:	6823      	ldr	r3, [r4, #0]
 8006bba:	691a      	ldr	r2, [r3, #16]
 8006bbc:	f412 7f80 	tst.w	r2, #256	; 0x100
 8006bc0:	d003      	beq.n	8006bca <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006bc2:	68da      	ldr	r2, [r3, #12]
 8006bc4:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006bc8:	d13b      	bne.n	8006c42 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006bca:	6823      	ldr	r3, [r4, #0]
 8006bcc:	691a      	ldr	r2, [r3, #16]
 8006bce:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006bd2:	d003      	beq.n	8006bdc <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006bd4:	68da      	ldr	r2, [r3, #12]
 8006bd6:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006bda:	d139      	bne.n	8006c50 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006bdc:	6823      	ldr	r3, [r4, #0]
 8006bde:	691a      	ldr	r2, [r3, #16]
 8006be0:	f012 0f20 	tst.w	r2, #32
 8006be4:	d003      	beq.n	8006bee <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006be6:	68da      	ldr	r2, [r3, #12]
 8006be8:	f012 0f20 	tst.w	r2, #32
 8006bec:	d137      	bne.n	8006c5e <HAL_TIM_IRQHandler+0x18c>
}
 8006bee:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bf0:	f7ff ff6b 	bl	8006aca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bf4:	4620      	mov	r0, r4
 8006bf6:	f7ff ff6a 	bl	8006ace <HAL_TIM_PWM_PulseFinishedCallback>
 8006bfa:	e781      	b.n	8006b00 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bfc:	4620      	mov	r0, r4
 8006bfe:	f7ff ff64 	bl	8006aca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c02:	4620      	mov	r0, r4
 8006c04:	f7ff ff63 	bl	8006ace <HAL_TIM_PWM_PulseFinishedCallback>
 8006c08:	e792      	b.n	8006b30 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c0a:	4620      	mov	r0, r4
 8006c0c:	f7ff ff5d 	bl	8006aca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c10:	4620      	mov	r0, r4
 8006c12:	f7ff ff5c 	bl	8006ace <HAL_TIM_PWM_PulseFinishedCallback>
 8006c16:	e7a3      	b.n	8006b60 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c18:	4620      	mov	r0, r4
 8006c1a:	f7ff ff56 	bl	8006aca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c1e:	4620      	mov	r0, r4
 8006c20:	f7ff ff55 	bl	8006ace <HAL_TIM_PWM_PulseFinishedCallback>
 8006c24:	e7b4      	b.n	8006b90 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c26:	f06f 0201 	mvn.w	r2, #1
 8006c2a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c2c:	4620      	mov	r0, r4
 8006c2e:	f7ff ff4b 	bl	8006ac8 <HAL_TIM_PeriodElapsedCallback>
 8006c32:	e7b8      	b.n	8006ba6 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c38:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006c3a:	4620      	mov	r0, r4
 8006c3c:	f000 f8cf 	bl	8006dde <HAL_TIMEx_BreakCallback>
 8006c40:	e7ba      	b.n	8006bb8 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006c42:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006c46:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8006c48:	4620      	mov	r0, r4
 8006c4a:	f000 f8c9 	bl	8006de0 <HAL_TIMEx_Break2Callback>
 8006c4e:	e7bc      	b.n	8006bca <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c54:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006c56:	4620      	mov	r0, r4
 8006c58:	f7ff ff3a 	bl	8006ad0 <HAL_TIM_TriggerCallback>
 8006c5c:	e7be      	b.n	8006bdc <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c5e:	f06f 0220 	mvn.w	r2, #32
 8006c62:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8006c64:	4620      	mov	r0, r4
 8006c66:	f000 f8b9 	bl	8006ddc <HAL_TIMEx_CommutCallback>
}
 8006c6a:	e7c0      	b.n	8006bee <HAL_TIM_IRQHandler+0x11c>

08006c6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c6c:	b530      	push	{r4, r5, lr}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c6e:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c70:	4a3b      	ldr	r2, [pc, #236]	; (8006d60 <TIM_Base_SetConfig+0xf4>)
 8006c72:	4290      	cmp	r0, r2
 8006c74:	bf14      	ite	ne
 8006c76:	f04f 0e00 	movne.w	lr, #0
 8006c7a:	f04f 0e01 	moveq.w	lr, #1
 8006c7e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006c82:	bf14      	ite	ne
 8006c84:	4672      	movne	r2, lr
 8006c86:	f04e 0201 	orreq.w	r2, lr, #1
 8006c8a:	b9aa      	cbnz	r2, 8006cb8 <TIM_Base_SetConfig+0x4c>
 8006c8c:	4c35      	ldr	r4, [pc, #212]	; (8006d64 <TIM_Base_SetConfig+0xf8>)
 8006c8e:	42a0      	cmp	r0, r4
 8006c90:	bf14      	ite	ne
 8006c92:	2400      	movne	r4, #0
 8006c94:	2401      	moveq	r4, #1
 8006c96:	4d34      	ldr	r5, [pc, #208]	; (8006d68 <TIM_Base_SetConfig+0xfc>)
 8006c98:	42a8      	cmp	r0, r5
 8006c9a:	d00d      	beq.n	8006cb8 <TIM_Base_SetConfig+0x4c>
 8006c9c:	b964      	cbnz	r4, 8006cb8 <TIM_Base_SetConfig+0x4c>
 8006c9e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8006ca2:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
 8006ca6:	42a0      	cmp	r0, r4
 8006ca8:	bf14      	ite	ne
 8006caa:	2400      	movne	r4, #0
 8006cac:	2401      	moveq	r4, #1
 8006cae:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006cb2:	42a8      	cmp	r0, r5
 8006cb4:	d000      	beq.n	8006cb8 <TIM_Base_SetConfig+0x4c>
 8006cb6:	b11c      	cbz	r4, 8006cc0 <TIM_Base_SetConfig+0x54>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006cbc:	684c      	ldr	r4, [r1, #4]
 8006cbe:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cc0:	2a00      	cmp	r2, #0
 8006cc2:	d133      	bne.n	8006d2c <TIM_Base_SetConfig+0xc0>
 8006cc4:	4a27      	ldr	r2, [pc, #156]	; (8006d64 <TIM_Base_SetConfig+0xf8>)
 8006cc6:	4290      	cmp	r0, r2
 8006cc8:	bf14      	ite	ne
 8006cca:	2200      	movne	r2, #0
 8006ccc:	2201      	moveq	r2, #1
 8006cce:	4c26      	ldr	r4, [pc, #152]	; (8006d68 <TIM_Base_SetConfig+0xfc>)
 8006cd0:	42a0      	cmp	r0, r4
 8006cd2:	d02b      	beq.n	8006d2c <TIM_Base_SetConfig+0xc0>
 8006cd4:	bb52      	cbnz	r2, 8006d2c <TIM_Base_SetConfig+0xc0>
 8006cd6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006cda:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 8006cde:	4290      	cmp	r0, r2
 8006ce0:	bf14      	ite	ne
 8006ce2:	2200      	movne	r2, #0
 8006ce4:	2201      	moveq	r2, #1
 8006ce6:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8006cea:	42a0      	cmp	r0, r4
 8006cec:	d01e      	beq.n	8006d2c <TIM_Base_SetConfig+0xc0>
 8006cee:	b9ea      	cbnz	r2, 8006d2c <TIM_Base_SetConfig+0xc0>
 8006cf0:	4a1e      	ldr	r2, [pc, #120]	; (8006d6c <TIM_Base_SetConfig+0x100>)
 8006cf2:	4290      	cmp	r0, r2
 8006cf4:	bf14      	ite	ne
 8006cf6:	2200      	movne	r2, #0
 8006cf8:	2201      	moveq	r2, #1
 8006cfa:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 8006cfe:	42a0      	cmp	r0, r4
 8006d00:	d014      	beq.n	8006d2c <TIM_Base_SetConfig+0xc0>
 8006d02:	b99a      	cbnz	r2, 8006d2c <TIM_Base_SetConfig+0xc0>
 8006d04:	4a1a      	ldr	r2, [pc, #104]	; (8006d70 <TIM_Base_SetConfig+0x104>)
 8006d06:	4290      	cmp	r0, r2
 8006d08:	bf14      	ite	ne
 8006d0a:	2200      	movne	r2, #0
 8006d0c:	2201      	moveq	r2, #1
 8006d0e:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8006d12:	42a0      	cmp	r0, r4
 8006d14:	d00a      	beq.n	8006d2c <TIM_Base_SetConfig+0xc0>
 8006d16:	b94a      	cbnz	r2, 8006d2c <TIM_Base_SetConfig+0xc0>
 8006d18:	4a16      	ldr	r2, [pc, #88]	; (8006d74 <TIM_Base_SetConfig+0x108>)
 8006d1a:	4290      	cmp	r0, r2
 8006d1c:	bf14      	ite	ne
 8006d1e:	2200      	movne	r2, #0
 8006d20:	2201      	moveq	r2, #1
 8006d22:	f5a4 3496 	sub.w	r4, r4, #76800	; 0x12c00
 8006d26:	42a0      	cmp	r0, r4
 8006d28:	d000      	beq.n	8006d2c <TIM_Base_SetConfig+0xc0>
 8006d2a:	b122      	cbz	r2, 8006d36 <TIM_Base_SetConfig+0xca>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d2c:	f423 7c40 	bic.w	ip, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d30:	68cb      	ldr	r3, [r1, #12]
 8006d32:	ea43 030c 	orr.w	r3, r3, ip
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d3a:	694a      	ldr	r2, [r1, #20]
 8006d3c:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8006d3e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d40:	688a      	ldr	r2, [r1, #8]
 8006d42:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d44:	680a      	ldr	r2, [r1, #0]
 8006d46:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d48:	4a0b      	ldr	r2, [pc, #44]	; (8006d78 <TIM_Base_SetConfig+0x10c>)
 8006d4a:	4290      	cmp	r0, r2
 8006d4c:	bf14      	ite	ne
 8006d4e:	4673      	movne	r3, lr
 8006d50:	f04e 0301 	orreq.w	r3, lr, #1
 8006d54:	b10b      	cbz	r3, 8006d5a <TIM_Base_SetConfig+0xee>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d56:	690b      	ldr	r3, [r1, #16]
 8006d58:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	6143      	str	r3, [r0, #20]
}
 8006d5e:	bd30      	pop	{r4, r5, pc}
 8006d60:	40010000 	.word	0x40010000
 8006d64:	40000800 	.word	0x40000800
 8006d68:	40000400 	.word	0x40000400
 8006d6c:	40014400 	.word	0x40014400
 8006d70:	40001800 	.word	0x40001800
 8006d74:	40002000 	.word	0x40002000
 8006d78:	40010400 	.word	0x40010400

08006d7c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8006d7c:	b360      	cbz	r0, 8006dd8 <HAL_TIM_Base_Init+0x5c>
{
 8006d7e:	b510      	push	{r4, lr}
 8006d80:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8006d82:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006d86:	b313      	cbz	r3, 8006dce <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8006d88:	2302      	movs	r3, #2
 8006d8a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d8e:	4621      	mov	r1, r4
 8006d90:	f851 0b04 	ldr.w	r0, [r1], #4
 8006d94:	f7ff ff6a 	bl	8006c6c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d9e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006da2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006da6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006daa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8006dae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006db2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006db6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006dba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006dbe:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8006dc2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006dc6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006dca:	2000      	movs	r0, #0
}
 8006dcc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8006dce:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006dd2:	f7ff fe30 	bl	8006a36 <HAL_TIM_Base_MspInit>
 8006dd6:	e7d7      	b.n	8006d88 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8006dd8:	2001      	movs	r0, #1
}
 8006dda:	4770      	bx	lr

08006ddc <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ddc:	4770      	bx	lr

08006dde <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006dde:	4770      	bx	lr

08006de0 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006de0:	4770      	bx	lr

08006de2 <UART_EndTxTransfer>:
 * @param  huart UART handle.
 * @retval None
 */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart) {
	/* Disable TXEIE and TCIE interrupts */
	ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006de2:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de4:	e852 3f00 	ldrex	r3, [r2]
 8006de8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dec:	e842 3100 	strex	r1, r3, [r2]
 8006df0:	2900      	cmp	r1, #0
 8006df2:	d1f6      	bne.n	8006de2 <UART_EndTxTransfer>

	/* At end of Tx process, restore huart->gState to Ready */
	huart->gState = HAL_UART_STATE_READY;
 8006df4:	2320      	movs	r3, #32
 8006df6:	67c3      	str	r3, [r0, #124]	; 0x7c
}
 8006df8:	4770      	bx	lr

08006dfa <UART_EndRxTransfer>:
 * @param  huart UART handle.
 * @retval None
 */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart) {
	/* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
	ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dfa:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfc:	e852 3f00 	ldrex	r3, [r2]
 8006e00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e04:	e842 3100 	strex	r1, r3, [r2]
 8006e08:	2900      	cmp	r1, #0
 8006e0a:	d1f6      	bne.n	8006dfa <UART_EndRxTransfer>
	ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e0c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0e:	f102 0308 	add.w	r3, r2, #8
 8006e12:	e853 3f00 	ldrex	r3, [r3]
 8006e16:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e1a:	3208      	adds	r2, #8
 8006e1c:	e842 3100 	strex	r1, r3, [r2]
 8006e20:	2900      	cmp	r1, #0
 8006e22:	d1f3      	bne.n	8006e0c <UART_EndRxTransfer+0x12>

	/* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
	if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
 8006e24:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d006      	beq.n	8006e38 <UART_EndRxTransfer+0x3e>
		ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
	}

	/* At end of Rx process, restore huart->RxState to Ready */
	huart->RxState = HAL_UART_STATE_READY;
 8006e2a:	2320      	movs	r3, #32
 8006e2c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e30:	2300      	movs	r3, #0
 8006e32:	6603      	str	r3, [r0, #96]	; 0x60

	/* Reset RxIsr function pointer */
	huart->RxISR = NULL;
 8006e34:	6683      	str	r3, [r0, #104]	; 0x68
}
 8006e36:	4770      	bx	lr
		ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e38:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3a:	e852 3f00 	ldrex	r3, [r2]
 8006e3e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e42:	e842 3100 	strex	r1, r3, [r2]
 8006e46:	2900      	cmp	r1, #0
 8006e48:	d1f6      	bne.n	8006e38 <UART_EndRxTransfer+0x3e>
 8006e4a:	e7ee      	b.n	8006e2a <UART_EndRxTransfer+0x30>

08006e4c <UART_TxISR_8BIT>:
 * @param huart UART handle.
 * @retval None
 */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart) {
	/* Check that a Tx process is ongoing */
	if (huart->gState == HAL_UART_STATE_BUSY_TX) {
 8006e4c:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8006e4e:	2b21      	cmp	r3, #33	; 0x21
 8006e50:	d000      	beq.n	8006e54 <UART_TxISR_8BIT+0x8>
					& (uint8_t) 0xFF);
			huart->pTxBuffPtr++;
			huart->TxXferCount--;
		}
	}
}
 8006e52:	4770      	bx	lr
		if (huart->TxXferCount == 0U) {
 8006e54:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	b993      	cbnz	r3, 8006e82 <UART_TxISR_8BIT+0x36>
			ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006e5c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5e:	e852 3f00 	ldrex	r3, [r2]
 8006e62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e66:	e842 3100 	strex	r1, r3, [r2]
 8006e6a:	2900      	cmp	r1, #0
 8006e6c:	d1f6      	bne.n	8006e5c <UART_TxISR_8BIT+0x10>
			ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e6e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e70:	e852 3f00 	ldrex	r3, [r2]
 8006e74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e78:	e842 3100 	strex	r1, r3, [r2]
 8006e7c:	2900      	cmp	r1, #0
 8006e7e:	d1f6      	bne.n	8006e6e <UART_TxISR_8BIT+0x22>
 8006e80:	4770      	bx	lr
			huart->Instance->TDR = (uint8_t) (*huart->pTxBuffPtr
 8006e82:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006e84:	781a      	ldrb	r2, [r3, #0]
 8006e86:	6803      	ldr	r3, [r0, #0]
 8006e88:	629a      	str	r2, [r3, #40]	; 0x28
			huart->pTxBuffPtr++;
 8006e8a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	64c3      	str	r3, [r0, #76]	; 0x4c
			huart->TxXferCount--;
 8006e90:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	3b01      	subs	r3, #1
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
}
 8006e9e:	e7d8      	b.n	8006e52 <UART_TxISR_8BIT+0x6>

08006ea0 <UART_TxISR_16BIT>:
 */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart) {
	const uint16_t *tmp;

	/* Check that a Tx process is ongoing */
	if (huart->gState == HAL_UART_STATE_BUSY_TX) {
 8006ea0:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8006ea2:	2b21      	cmp	r3, #33	; 0x21
 8006ea4:	d000      	beq.n	8006ea8 <UART_TxISR_16BIT+0x8>
			huart->Instance->TDR = (((uint32_t) (*tmp)) & 0x01FFUL);
			huart->pTxBuffPtr += 2U;
			huart->TxXferCount--;
		}
	}
}
 8006ea6:	4770      	bx	lr
		if (huart->TxXferCount == 0U) {
 8006ea8:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	b993      	cbnz	r3, 8006ed6 <UART_TxISR_16BIT+0x36>
			ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006eb0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb2:	e852 3f00 	ldrex	r3, [r2]
 8006eb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eba:	e842 3100 	strex	r1, r3, [r2]
 8006ebe:	2900      	cmp	r1, #0
 8006ec0:	d1f6      	bne.n	8006eb0 <UART_TxISR_16BIT+0x10>
			ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ec2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec4:	e852 3f00 	ldrex	r3, [r2]
 8006ec8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ecc:	e842 3100 	strex	r1, r3, [r2]
 8006ed0:	2900      	cmp	r1, #0
 8006ed2:	d1f6      	bne.n	8006ec2 <UART_TxISR_16BIT+0x22>
 8006ed4:	4770      	bx	lr
			tmp = (const uint16_t*) huart->pTxBuffPtr;
 8006ed6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
			huart->Instance->TDR = (((uint32_t) (*tmp)) & 0x01FFUL);
 8006ed8:	881b      	ldrh	r3, [r3, #0]
 8006eda:	6802      	ldr	r2, [r0, #0]
 8006edc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ee0:	6293      	str	r3, [r2, #40]	; 0x28
			huart->pTxBuffPtr += 2U;
 8006ee2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006ee4:	3302      	adds	r3, #2
 8006ee6:	64c3      	str	r3, [r0, #76]	; 0x4c
			huart->TxXferCount--;
 8006ee8:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	3b01      	subs	r3, #1
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
}
 8006ef6:	e7d6      	b.n	8006ea6 <UART_TxISR_16BIT+0x6>

08006ef8 <HAL_UART_Transmit_IT>:
	if (huart->gState == HAL_UART_STATE_READY) {
 8006ef8:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8006efa:	2b20      	cmp	r3, #32
 8006efc:	d125      	bne.n	8006f4a <HAL_UART_Transmit_IT+0x52>
		if ((pData == NULL) || (Size == 0U)) {
 8006efe:	2a00      	cmp	r2, #0
 8006f00:	bf18      	it	ne
 8006f02:	2900      	cmpne	r1, #0
 8006f04:	d023      	beq.n	8006f4e <HAL_UART_Transmit_IT+0x56>
		huart->pTxBuffPtr = pData;
 8006f06:	64c1      	str	r1, [r0, #76]	; 0x4c
		huart->TxXferSize = Size;
 8006f08:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
		huart->TxXferCount = Size;
 8006f0c:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
		huart->TxISR = NULL;
 8006f10:	2300      	movs	r3, #0
 8006f12:	66c3      	str	r3, [r0, #108]	; 0x6c
		huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f14:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f18:	2321      	movs	r3, #33	; 0x21
 8006f1a:	67c3      	str	r3, [r0, #124]	; 0x7c
		if ((huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006f1c:	6883      	ldr	r3, [r0, #8]
 8006f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f22:	d00c      	beq.n	8006f3e <HAL_UART_Transmit_IT+0x46>
			huart->TxISR = UART_TxISR_8BIT;
 8006f24:	4b0b      	ldr	r3, [pc, #44]	; (8006f54 <HAL_UART_Transmit_IT+0x5c>)
 8006f26:	66c3      	str	r3, [r0, #108]	; 0x6c
		ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006f28:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2a:	e852 3f00 	ldrex	r3, [r2]
 8006f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f32:	e842 3100 	strex	r1, r3, [r2]
 8006f36:	2900      	cmp	r1, #0
 8006f38:	d1f6      	bne.n	8006f28 <HAL_UART_Transmit_IT+0x30>
		return HAL_OK;
 8006f3a:	2000      	movs	r0, #0
 8006f3c:	4770      	bx	lr
				&& (huart->Init.Parity == UART_PARITY_NONE)) {
 8006f3e:	6903      	ldr	r3, [r0, #16]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d1ef      	bne.n	8006f24 <HAL_UART_Transmit_IT+0x2c>
			huart->TxISR = UART_TxISR_16BIT;
 8006f44:	4b04      	ldr	r3, [pc, #16]	; (8006f58 <HAL_UART_Transmit_IT+0x60>)
 8006f46:	66c3      	str	r3, [r0, #108]	; 0x6c
 8006f48:	e7ee      	b.n	8006f28 <HAL_UART_Transmit_IT+0x30>
		return HAL_BUSY;
 8006f4a:	2002      	movs	r0, #2
 8006f4c:	4770      	bx	lr
			return HAL_ERROR;
 8006f4e:	2001      	movs	r0, #1
}
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	08006e4d 	.word	0x08006e4d
 8006f58:	08006ea1 	.word	0x08006ea1

08006f5c <HAL_UART_Transmit_DMA>:
		const uint8_t *pData, uint16_t Size) {
 8006f5c:	4613      	mov	r3, r2
	if (huart->gState == HAL_UART_STATE_READY) {
 8006f5e:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8006f60:	2a20      	cmp	r2, #32
 8006f62:	d13b      	bne.n	8006fdc <HAL_UART_Transmit_DMA+0x80>
		const uint8_t *pData, uint16_t Size) {
 8006f64:	b510      	push	{r4, lr}
 8006f66:	4604      	mov	r4, r0
		if ((pData == NULL) || (Size == 0U)) {
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	bf18      	it	ne
 8006f6c:	2900      	cmpne	r1, #0
 8006f6e:	d037      	beq.n	8006fe0 <HAL_UART_Transmit_DMA+0x84>
		huart->pTxBuffPtr = pData;
 8006f70:	64c1      	str	r1, [r0, #76]	; 0x4c
		huart->TxXferSize = Size;
 8006f72:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
		huart->TxXferCount = Size;
 8006f76:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
		huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
		huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f80:	2221      	movs	r2, #33	; 0x21
 8006f82:	67c2      	str	r2, [r0, #124]	; 0x7c
		if (huart->hdmatx != NULL) {
 8006f84:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8006f86:	b1c2      	cbz	r2, 8006fba <HAL_UART_Transmit_DMA+0x5e>
			huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006f88:	4916      	ldr	r1, [pc, #88]	; (8006fe4 <HAL_UART_Transmit_DMA+0x88>)
 8006f8a:	63d1      	str	r1, [r2, #60]	; 0x3c
			huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006f8c:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8006f8e:	4916      	ldr	r1, [pc, #88]	; (8006fe8 <HAL_UART_Transmit_DMA+0x8c>)
 8006f90:	6411      	str	r1, [r2, #64]	; 0x40
			huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006f92:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8006f94:	4915      	ldr	r1, [pc, #84]	; (8006fec <HAL_UART_Transmit_DMA+0x90>)
 8006f96:	64d1      	str	r1, [r2, #76]	; 0x4c
			huart->hdmatx->XferAbortCallback = NULL;
 8006f98:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8006f9a:	2100      	movs	r1, #0
 8006f9c:	6511      	str	r1, [r2, #80]	; 0x50
					(uint32_t) &huart->Instance->TDR, Size) != HAL_OK) {
 8006f9e:	6802      	ldr	r2, [r0, #0]
			if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t) huart->pTxBuffPtr,
 8006fa0:	3228      	adds	r2, #40	; 0x28
 8006fa2:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8006fa4:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8006fa6:	f7fd f91d 	bl	80041e4 <HAL_DMA_Start_IT>
 8006faa:	b130      	cbz	r0, 8006fba <HAL_UART_Transmit_DMA+0x5e>
				huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006fac:	2310      	movs	r3, #16
 8006fae:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
				huart->gState = HAL_UART_STATE_READY;
 8006fb2:	2320      	movs	r3, #32
 8006fb4:	67e3      	str	r3, [r4, #124]	; 0x7c
				return HAL_ERROR;
 8006fb6:	2001      	movs	r0, #1
 8006fb8:	e00f      	b.n	8006fda <HAL_UART_Transmit_DMA+0x7e>
		__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006fba:	6823      	ldr	r3, [r4, #0]
 8006fbc:	2240      	movs	r2, #64	; 0x40
 8006fbe:	621a      	str	r2, [r3, #32]
		ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006fc0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc2:	f102 0308 	add.w	r3, r2, #8
 8006fc6:	e853 3f00 	ldrex	r3, [r3]
 8006fca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fce:	3208      	adds	r2, #8
 8006fd0:	e842 3100 	strex	r1, r3, [r2]
 8006fd4:	2900      	cmp	r1, #0
 8006fd6:	d1f3      	bne.n	8006fc0 <HAL_UART_Transmit_DMA+0x64>
		return HAL_OK;
 8006fd8:	2000      	movs	r0, #0
}
 8006fda:	bd10      	pop	{r4, pc}
		return HAL_BUSY;
 8006fdc:	2002      	movs	r0, #2
}
 8006fde:	4770      	bx	lr
			return HAL_ERROR;
 8006fe0:	2001      	movs	r0, #1
 8006fe2:	e7fa      	b.n	8006fda <HAL_UART_Transmit_DMA+0x7e>
 8006fe4:	08006ff1 	.word	0x08006ff1
 8006fe8:	0800705b 	.word	0x0800705b
 8006fec:	08007067 	.word	0x08007067

08006ff0 <UART_DMATransmitCplt>:
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma) {
 8006ff0:	b508      	push	{r3, lr}
 8006ff2:	4603      	mov	r3, r0
	UART_HandleTypeDef *huart = (UART_HandleTypeDef*) (hdma->Parent);
 8006ff4:	6b80      	ldr	r0, [r0, #56]	; 0x38
	if (hdma->Init.Mode == DMA_CIRCULAR) {
 8006ff6:	69db      	ldr	r3, [r3, #28]
 8006ff8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ffc:	d118      	bne.n	8007030 <UART_DMATransmitCplt+0x40>
		huart->TxXferCount = 0U;
 8006ffe:	2300      	movs	r3, #0
 8007000:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
		ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007004:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007006:	f102 0308 	add.w	r3, r2, #8
 800700a:	e853 3f00 	ldrex	r3, [r3]
 800700e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007012:	3208      	adds	r2, #8
 8007014:	e842 3100 	strex	r1, r3, [r2]
 8007018:	2900      	cmp	r1, #0
 800701a:	d1f3      	bne.n	8007004 <UART_DMATransmitCplt+0x14>
		ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800701c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701e:	e852 3f00 	ldrex	r3, [r2]
 8007022:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007026:	e842 3100 	strex	r1, r3, [r2]
 800702a:	2900      	cmp	r1, #0
 800702c:	d1f6      	bne.n	800701c <UART_DMATransmitCplt+0x2c>
}
 800702e:	bd08      	pop	{r3, pc}
		HAL_UART_TxCpltCallback(huart);
 8007030:	f7fc f89c 	bl	800316c <HAL_UART_TxCpltCallback>
}
 8007034:	e7fb      	b.n	800702e <UART_DMATransmitCplt+0x3e>

08007036 <UART_EndTransmit_IT>:
 * @brief  Wrap up transmission in non-blocking mode.
 * @param  huart pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart) {
 8007036:	b508      	push	{r3, lr}
	/* Disable the UART Transmit Complete Interrupt */
	ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007038:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800703a:	e852 3f00 	ldrex	r3, [r2]
 800703e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007042:	e842 3100 	strex	r1, r3, [r2]
 8007046:	2900      	cmp	r1, #0
 8007048:	d1f6      	bne.n	8007038 <UART_EndTransmit_IT+0x2>

	/* Tx process is ended, restore huart->gState to Ready */
	huart->gState = HAL_UART_STATE_READY;
 800704a:	2320      	movs	r3, #32
 800704c:	67c3      	str	r3, [r0, #124]	; 0x7c

	/* Cleat TxISR function pointer */
	huart->TxISR = NULL;
 800704e:	2300      	movs	r3, #0
 8007050:	66c3      	str	r3, [r0, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
	/*Call legacy weak Tx complete callback*/
	HAL_UART_TxCpltCallback(huart);
 8007052:	f7fc f88b 	bl	800316c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007056:	bd08      	pop	{r3, pc}

08007058 <HAL_UART_TxHalfCpltCallback>:
}
 8007058:	4770      	bx	lr

0800705a <UART_DMATxHalfCplt>:
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma) {
 800705a:	b508      	push	{r3, lr}
	HAL_UART_TxHalfCpltCallback(huart);
 800705c:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800705e:	f7ff fffb 	bl	8007058 <HAL_UART_TxHalfCpltCallback>
}
 8007062:	bd08      	pop	{r3, pc}

08007064 <HAL_UART_ErrorCallback>:
}
 8007064:	4770      	bx	lr

08007066 <UART_DMAError>:
static void UART_DMAError(DMA_HandleTypeDef *hdma) {
 8007066:	b538      	push	{r3, r4, r5, lr}
	UART_HandleTypeDef *huart = (UART_HandleTypeDef*) (hdma->Parent);
 8007068:	6b84      	ldr	r4, [r0, #56]	; 0x38
	const HAL_UART_StateTypeDef gstate = huart->gState;
 800706a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
	const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800706c:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
	if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8007070:	6823      	ldr	r3, [r4, #0]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007078:	d001      	beq.n	800707e <UART_DMAError+0x18>
			&& (gstate == HAL_UART_STATE_BUSY_TX)) {
 800707a:	2a21      	cmp	r2, #33	; 0x21
 800707c:	d010      	beq.n	80070a0 <UART_DMAError+0x3a>
	if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800707e:	6823      	ldr	r3, [r4, #0]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007086:	d001      	beq.n	800708c <UART_DMAError+0x26>
			&& (rxstate == HAL_UART_STATE_BUSY_RX)) {
 8007088:	2d22      	cmp	r5, #34	; 0x22
 800708a:	d010      	beq.n	80070ae <UART_DMAError+0x48>
	huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800708c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8007090:	f043 0310 	orr.w	r3, r3, #16
 8007094:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	HAL_UART_ErrorCallback(huart);
 8007098:	4620      	mov	r0, r4
 800709a:	f7ff ffe3 	bl	8007064 <HAL_UART_ErrorCallback>
}
 800709e:	bd38      	pop	{r3, r4, r5, pc}
		huart->TxXferCount = 0U;
 80070a0:	2300      	movs	r3, #0
 80070a2:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
		UART_EndTxTransfer(huart);
 80070a6:	4620      	mov	r0, r4
 80070a8:	f7ff fe9b 	bl	8006de2 <UART_EndTxTransfer>
 80070ac:	e7e7      	b.n	800707e <UART_DMAError+0x18>
		huart->RxXferCount = 0U;
 80070ae:	2300      	movs	r3, #0
 80070b0:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
		UART_EndRxTransfer(huart);
 80070b4:	4620      	mov	r0, r4
 80070b6:	f7ff fea0 	bl	8006dfa <UART_EndRxTransfer>
 80070ba:	e7e7      	b.n	800708c <UART_DMAError+0x26>

080070bc <UART_DMAAbortOnError>:
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma) {
 80070bc:	b508      	push	{r3, lr}
	UART_HandleTypeDef *huart = (UART_HandleTypeDef*) (hdma->Parent);
 80070be:	6b80      	ldr	r0, [r0, #56]	; 0x38
	huart->RxXferCount = 0U;
 80070c0:	2300      	movs	r3, #0
 80070c2:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
	huart->TxXferCount = 0U;
 80070c6:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
	HAL_UART_ErrorCallback(huart);
 80070ca:	f7ff ffcb 	bl	8007064 <HAL_UART_ErrorCallback>
}
 80070ce:	bd08      	pop	{r3, pc}

080070d0 <HAL_UARTEx_RxEventCallback>:
}
 80070d0:	4770      	bx	lr

080070d2 <HAL_UARTEx_WakeupCallback>:
}
 80070d2:	4770      	bx	lr

080070d4 <HAL_UART_IRQHandler>:
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart) {
 80070d4:	b570      	push	{r4, r5, r6, lr}
 80070d6:	4604      	mov	r4, r0
	uint32_t isrflags = READ_REG(huart->Instance->ISR);
 80070d8:	6801      	ldr	r1, [r0, #0]
 80070da:	69cb      	ldr	r3, [r1, #28]
	uint32_t cr1its = READ_REG(huart->Instance->CR1);
 80070dc:	6808      	ldr	r0, [r1, #0]
	uint32_t cr3its = READ_REG(huart->Instance->CR3);
 80070de:	688d      	ldr	r5, [r1, #8]
	errorflags = (isrflags
 80070e0:	f640 020f 	movw	r2, #2063	; 0x80f
	if (errorflags == 0U) {
 80070e4:	401a      	ands	r2, r3
 80070e6:	d105      	bne.n	80070f4 <HAL_UART_IRQHandler+0x20>
		if (((isrflags & USART_ISR_RXNE) != 0U)
 80070e8:	f013 0f20 	tst.w	r3, #32
 80070ec:	d002      	beq.n	80070f4 <HAL_UART_IRQHandler+0x20>
				&& ((cr1its & USART_CR1_RXNEIE) != 0U)) {
 80070ee:	f010 0f20 	tst.w	r0, #32
 80070f2:	d120      	bne.n	8007136 <HAL_UART_IRQHandler+0x62>
	if ((errorflags != 0U)
 80070f4:	b12a      	cbz	r2, 8007102 <HAL_UART_IRQHandler+0x2e>
			&& (((cr3its & USART_CR3_EIE) != 0U)
 80070f6:	f015 0201 	ands.w	r2, r5, #1
 80070fa:	d122      	bne.n	8007142 <HAL_UART_IRQHandler+0x6e>
					|| ((cr1its
 80070fc:	4eae      	ldr	r6, [pc, #696]	; (80073b8 <HAL_UART_IRQHandler+0x2e4>)
 80070fe:	4230      	tst	r0, r6
 8007100:	d11f      	bne.n	8007142 <HAL_UART_IRQHandler+0x6e>
	if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007102:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8007104:	2a01      	cmp	r2, #1
 8007106:	f000 80ab 	beq.w	8007260 <HAL_UART_IRQHandler+0x18c>
	if (((isrflags & USART_ISR_WUF) != 0U)
 800710a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800710e:	d003      	beq.n	8007118 <HAL_UART_IRQHandler+0x44>
			&& ((cr3its & USART_CR3_WUFIE) != 0U)) {
 8007110:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 8007114:	f040 813e 	bne.w	8007394 <HAL_UART_IRQHandler+0x2c0>
	if (((isrflags & USART_ISR_TXE) != 0U)
 8007118:	f013 0f80 	tst.w	r3, #128	; 0x80
 800711c:	d003      	beq.n	8007126 <HAL_UART_IRQHandler+0x52>
			&& ((cr1its & USART_CR1_TXEIE) != 0U)) {
 800711e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8007122:	f040 813e 	bne.w	80073a2 <HAL_UART_IRQHandler+0x2ce>
	if (((isrflags & USART_ISR_TC) != 0U)
 8007126:	f013 0f40 	tst.w	r3, #64	; 0x40
 800712a:	d003      	beq.n	8007134 <HAL_UART_IRQHandler+0x60>
			&& ((cr1its & USART_CR1_TCIE) != 0U)) {
 800712c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007130:	f040 813e 	bne.w	80073b0 <HAL_UART_IRQHandler+0x2dc>
}
 8007134:	bd70      	pop	{r4, r5, r6, pc}
			if (huart->RxISR != NULL) {
 8007136:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007138:	2b00      	cmp	r3, #0
 800713a:	d0fb      	beq.n	8007134 <HAL_UART_IRQHandler+0x60>
				huart->RxISR(huart);
 800713c:	4620      	mov	r0, r4
 800713e:	4798      	blx	r3
			return;
 8007140:	e7f8      	b.n	8007134 <HAL_UART_IRQHandler+0x60>
		if (((isrflags & USART_ISR_PE) != 0U)
 8007142:	f013 0f01 	tst.w	r3, #1
 8007146:	d009      	beq.n	800715c <HAL_UART_IRQHandler+0x88>
				&& ((cr1its & USART_CR1_PEIE) != 0U)) {
 8007148:	f410 7f80 	tst.w	r0, #256	; 0x100
 800714c:	d006      	beq.n	800715c <HAL_UART_IRQHandler+0x88>
			__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800714e:	2501      	movs	r5, #1
 8007150:	620d      	str	r5, [r1, #32]
			huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007152:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8007156:	4329      	orrs	r1, r5
 8007158:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
		if (((isrflags & USART_ISR_FE) != 0U)
 800715c:	f013 0f02 	tst.w	r3, #2
 8007160:	d009      	beq.n	8007176 <HAL_UART_IRQHandler+0xa2>
				&& ((cr3its & USART_CR3_EIE) != 0U)) {
 8007162:	b142      	cbz	r2, 8007176 <HAL_UART_IRQHandler+0xa2>
			__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007164:	6821      	ldr	r1, [r4, #0]
 8007166:	2502      	movs	r5, #2
 8007168:	620d      	str	r5, [r1, #32]
			huart->ErrorCode |= HAL_UART_ERROR_FE;
 800716a:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800716e:	f041 0104 	orr.w	r1, r1, #4
 8007172:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
		if (((isrflags & USART_ISR_NE) != 0U)
 8007176:	f013 0f04 	tst.w	r3, #4
 800717a:	d009      	beq.n	8007190 <HAL_UART_IRQHandler+0xbc>
				&& ((cr3its & USART_CR3_EIE) != 0U)) {
 800717c:	b142      	cbz	r2, 8007190 <HAL_UART_IRQHandler+0xbc>
			__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800717e:	6821      	ldr	r1, [r4, #0]
 8007180:	2504      	movs	r5, #4
 8007182:	620d      	str	r5, [r1, #32]
			huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007184:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8007188:	f041 0102 	orr.w	r1, r1, #2
 800718c:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
		if (((isrflags & USART_ISR_ORE) != 0U)
 8007190:	f013 0f08 	tst.w	r3, #8
 8007194:	d00b      	beq.n	80071ae <HAL_UART_IRQHandler+0xda>
				&& (((cr1its & USART_CR1_RXNEIE) != 0U)
 8007196:	f010 0f20 	tst.w	r0, #32
 800719a:	d100      	bne.n	800719e <HAL_UART_IRQHandler+0xca>
						|| ((cr3its & USART_CR3_EIE) != 0U))) {
 800719c:	b13a      	cbz	r2, 80071ae <HAL_UART_IRQHandler+0xda>
			__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800719e:	6822      	ldr	r2, [r4, #0]
 80071a0:	2108      	movs	r1, #8
 80071a2:	6211      	str	r1, [r2, #32]
			huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80071a4:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80071a8:	430a      	orrs	r2, r1
 80071aa:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
		if (((isrflags & USART_ISR_RTOF) != 0U)
 80071ae:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80071b2:	d00c      	beq.n	80071ce <HAL_UART_IRQHandler+0xfa>
				&& ((cr1its & USART_CR1_RTOIE) != 0U)) {
 80071b4:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 80071b8:	d009      	beq.n	80071ce <HAL_UART_IRQHandler+0xfa>
			__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071ba:	6822      	ldr	r2, [r4, #0]
 80071bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80071c0:	6211      	str	r1, [r2, #32]
			huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80071c2:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80071c6:	f042 0220 	orr.w	r2, r2, #32
 80071ca:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
		if (huart->ErrorCode != HAL_UART_ERROR_NONE) {
 80071ce:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80071d2:	2a00      	cmp	r2, #0
 80071d4:	d0ae      	beq.n	8007134 <HAL_UART_IRQHandler+0x60>
			if (((isrflags & USART_ISR_RXNE) != 0U)
 80071d6:	f013 0f20 	tst.w	r3, #32
 80071da:	d006      	beq.n	80071ea <HAL_UART_IRQHandler+0x116>
					&& ((cr1its & USART_CR1_RXNEIE) != 0U)) {
 80071dc:	f010 0f20 	tst.w	r0, #32
 80071e0:	d003      	beq.n	80071ea <HAL_UART_IRQHandler+0x116>
				if (huart->RxISR != NULL) {
 80071e2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80071e4:	b10b      	cbz	r3, 80071ea <HAL_UART_IRQHandler+0x116>
					huart->RxISR(huart);
 80071e6:	4620      	mov	r0, r4
 80071e8:	4798      	blx	r3
			errorcode = huart->ErrorCode;
 80071ea:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
			if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071ee:	6823      	ldr	r3, [r4, #0]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80071f6:	d102      	bne.n	80071fe <HAL_UART_IRQHandler+0x12a>
					|| ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE))
 80071f8:	f012 0f28 	tst.w	r2, #40	; 0x28
 80071fc:	d029      	beq.n	8007252 <HAL_UART_IRQHandler+0x17e>
				UART_EndRxTransfer(huart);
 80071fe:	4620      	mov	r0, r4
 8007200:	f7ff fdfb 	bl	8006dfa <UART_EndRxTransfer>
				if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 8007204:	6823      	ldr	r3, [r4, #0]
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	f013 0f40 	tst.w	r3, #64	; 0x40
 800720c:	d01d      	beq.n	800724a <HAL_UART_IRQHandler+0x176>
					ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800720e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007210:	f102 0308 	add.w	r3, r2, #8
 8007214:	e853 3f00 	ldrex	r3, [r3]
 8007218:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800721c:	3208      	adds	r2, #8
 800721e:	e842 3100 	strex	r1, r3, [r2]
 8007222:	2900      	cmp	r1, #0
 8007224:	d1f3      	bne.n	800720e <HAL_UART_IRQHandler+0x13a>
					if (huart->hdmarx != NULL) {
 8007226:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8007228:	b15b      	cbz	r3, 8007242 <HAL_UART_IRQHandler+0x16e>
						huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800722a:	4a64      	ldr	r2, [pc, #400]	; (80073bc <HAL_UART_IRQHandler+0x2e8>)
 800722c:	651a      	str	r2, [r3, #80]	; 0x50
						if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK) {
 800722e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8007230:	f7fd f85c 	bl	80042ec <HAL_DMA_Abort_IT>
 8007234:	2800      	cmp	r0, #0
 8007236:	f43f af7d 	beq.w	8007134 <HAL_UART_IRQHandler+0x60>
							huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800723a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800723c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800723e:	4798      	blx	r3
 8007240:	e778      	b.n	8007134 <HAL_UART_IRQHandler+0x60>
						HAL_UART_ErrorCallback(huart);
 8007242:	4620      	mov	r0, r4
 8007244:	f7ff ff0e 	bl	8007064 <HAL_UART_ErrorCallback>
 8007248:	e774      	b.n	8007134 <HAL_UART_IRQHandler+0x60>
					HAL_UART_ErrorCallback(huart);
 800724a:	4620      	mov	r0, r4
 800724c:	f7ff ff0a 	bl	8007064 <HAL_UART_ErrorCallback>
 8007250:	e770      	b.n	8007134 <HAL_UART_IRQHandler+0x60>
				HAL_UART_ErrorCallback(huart);
 8007252:	4620      	mov	r0, r4
 8007254:	f7ff ff06 	bl	8007064 <HAL_UART_ErrorCallback>
				huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007258:	2300      	movs	r3, #0
 800725a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		return;
 800725e:	e769      	b.n	8007134 <HAL_UART_IRQHandler+0x60>
			&& ((isrflags & USART_ISR_IDLE) != 0U)
 8007260:	f013 0f10 	tst.w	r3, #16
 8007264:	f43f af51 	beq.w	800710a <HAL_UART_IRQHandler+0x36>
			&& ((cr1its & USART_ISR_IDLE) != 0U)) {
 8007268:	f010 0f10 	tst.w	r0, #16
 800726c:	f43f af4d 	beq.w	800710a <HAL_UART_IRQHandler+0x36>
		__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007270:	2310      	movs	r3, #16
 8007272:	620b      	str	r3, [r1, #32]
		if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 8007274:	6823      	ldr	r3, [r4, #0]
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	f013 0f40 	tst.w	r3, #64	; 0x40
 800727c:	d050      	beq.n	8007320 <HAL_UART_IRQHandler+0x24c>
			uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(
 800727e:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8007280:	6813      	ldr	r3, [r2, #0]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	b29b      	uxth	r3, r3
			if ((nb_remaining_rx_data > 0U)
 8007286:	2b00      	cmp	r3, #0
 8007288:	f43f af54 	beq.w	8007134 <HAL_UART_IRQHandler+0x60>
					&& (nb_remaining_rx_data < huart->RxXferSize)) {
 800728c:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8007290:	4299      	cmp	r1, r3
 8007292:	f67f af4f 	bls.w	8007134 <HAL_UART_IRQHandler+0x60>
				huart->RxXferCount = nb_remaining_rx_data;
 8007296:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
				if (huart->hdmarx->Init.Mode != DMA_CIRCULAR) {
 800729a:	69d3      	ldr	r3, [r2, #28]
 800729c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072a0:	d031      	beq.n	8007306 <HAL_UART_IRQHandler+0x232>
					ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072a2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a4:	e852 3f00 	ldrex	r3, [r2]
 80072a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ac:	e842 3100 	strex	r1, r3, [r2]
 80072b0:	2900      	cmp	r1, #0
 80072b2:	d1f6      	bne.n	80072a2 <HAL_UART_IRQHandler+0x1ce>
					ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072b4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b6:	f102 0308 	add.w	r3, r2, #8
 80072ba:	e853 3f00 	ldrex	r3, [r3]
 80072be:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c2:	3208      	adds	r2, #8
 80072c4:	e842 3100 	strex	r1, r3, [r2]
 80072c8:	2900      	cmp	r1, #0
 80072ca:	d1f3      	bne.n	80072b4 <HAL_UART_IRQHandler+0x1e0>
					ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072cc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ce:	f102 0308 	add.w	r3, r2, #8
 80072d2:	e853 3f00 	ldrex	r3, [r3]
 80072d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072da:	3208      	adds	r2, #8
 80072dc:	e842 3100 	strex	r1, r3, [r2]
 80072e0:	2900      	cmp	r1, #0
 80072e2:	d1f3      	bne.n	80072cc <HAL_UART_IRQHandler+0x1f8>
					huart->RxState = HAL_UART_STATE_READY;
 80072e4:	2320      	movs	r3, #32
 80072e6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
					huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072ea:	2300      	movs	r3, #0
 80072ec:	6623      	str	r3, [r4, #96]	; 0x60
					ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072ee:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f0:	e852 3f00 	ldrex	r3, [r2]
 80072f4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f8:	e842 3100 	strex	r1, r3, [r2]
 80072fc:	2900      	cmp	r1, #0
 80072fe:	d1f6      	bne.n	80072ee <HAL_UART_IRQHandler+0x21a>
					(void) HAL_DMA_Abort(huart->hdmarx);
 8007300:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8007302:	f7fc ffa9 	bl	8004258 <HAL_DMA_Abort>
				huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007306:	2302      	movs	r3, #2
 8007308:	6663      	str	r3, [r4, #100]	; 0x64
						(huart->RxXferSize - huart->RxXferCount));
 800730a:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 800730e:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8007312:	b29b      	uxth	r3, r3
				HAL_UARTEx_RxEventCallback(huart,
 8007314:	1ac9      	subs	r1, r1, r3
 8007316:	b289      	uxth	r1, r1
 8007318:	4620      	mov	r0, r4
 800731a:	f7ff fed9 	bl	80070d0 <HAL_UARTEx_RxEventCallback>
			return;
 800731e:	e709      	b.n	8007134 <HAL_UART_IRQHandler+0x60>
			uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007320:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8007324:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8007328:	b29b      	uxth	r3, r3
 800732a:	1ac9      	subs	r1, r1, r3
 800732c:	b289      	uxth	r1, r1
			if ((huart->RxXferCount > 0U) && (nb_rx_data > 0U)) {
 800732e:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8007332:	b29b      	uxth	r3, r3
 8007334:	2b00      	cmp	r3, #0
 8007336:	f43f aefd 	beq.w	8007134 <HAL_UART_IRQHandler+0x60>
 800733a:	2900      	cmp	r1, #0
 800733c:	f43f aefa 	beq.w	8007134 <HAL_UART_IRQHandler+0x60>
				ATOMIC_CLEAR_BIT(huart->Instance->CR1,
 8007340:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007342:	e852 3f00 	ldrex	r3, [r2]
 8007346:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800734a:	e842 3000 	strex	r0, r3, [r2]
 800734e:	2800      	cmp	r0, #0
 8007350:	d1f6      	bne.n	8007340 <HAL_UART_IRQHandler+0x26c>
				ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007352:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007354:	f102 0308 	add.w	r3, r2, #8
 8007358:	e853 3f00 	ldrex	r3, [r3]
 800735c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007360:	3208      	adds	r2, #8
 8007362:	e842 3000 	strex	r0, r3, [r2]
 8007366:	2800      	cmp	r0, #0
 8007368:	d1f3      	bne.n	8007352 <HAL_UART_IRQHandler+0x27e>
				huart->RxState = HAL_UART_STATE_READY;
 800736a:	2320      	movs	r3, #32
 800736c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
				huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007370:	2300      	movs	r3, #0
 8007372:	6623      	str	r3, [r4, #96]	; 0x60
				huart->RxISR = NULL;
 8007374:	66a3      	str	r3, [r4, #104]	; 0x68
				ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007376:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007378:	e852 3f00 	ldrex	r3, [r2]
 800737c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007380:	e842 3000 	strex	r0, r3, [r2]
 8007384:	2800      	cmp	r0, #0
 8007386:	d1f6      	bne.n	8007376 <HAL_UART_IRQHandler+0x2a2>
				huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007388:	2302      	movs	r3, #2
 800738a:	6663      	str	r3, [r4, #100]	; 0x64
				HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800738c:	4620      	mov	r0, r4
 800738e:	f7ff fe9f 	bl	80070d0 <HAL_UARTEx_RxEventCallback>
			return;
 8007392:	e6cf      	b.n	8007134 <HAL_UART_IRQHandler+0x60>
		__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007394:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007398:	620b      	str	r3, [r1, #32]
		HAL_UARTEx_WakeupCallback(huart);
 800739a:	4620      	mov	r0, r4
 800739c:	f7ff fe99 	bl	80070d2 <HAL_UARTEx_WakeupCallback>
		return;
 80073a0:	e6c8      	b.n	8007134 <HAL_UART_IRQHandler+0x60>
		if (huart->TxISR != NULL) {
 80073a2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f43f aec5 	beq.w	8007134 <HAL_UART_IRQHandler+0x60>
			huart->TxISR(huart);
 80073aa:	4620      	mov	r0, r4
 80073ac:	4798      	blx	r3
		return;
 80073ae:	e6c1      	b.n	8007134 <HAL_UART_IRQHandler+0x60>
		UART_EndTransmit_IT(huart);
 80073b0:	4620      	mov	r0, r4
 80073b2:	f7ff fe40 	bl	8007036 <UART_EndTransmit_IT>
		return;
 80073b6:	e6bd      	b.n	8007134 <HAL_UART_IRQHandler+0x60>
 80073b8:	04000120 	.word	0x04000120
 80073bc:	080070bd 	.word	0x080070bd

080073c0 <UART_SetConfig>:
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart) {
 80073c0:	b510      	push	{r4, lr}
 80073c2:	4604      	mov	r4, r0
	tmpreg = (uint32_t) huart->Init.WordLength | huart->Init.Parity
 80073c4:	6883      	ldr	r3, [r0, #8]
 80073c6:	6902      	ldr	r2, [r0, #16]
 80073c8:	4313      	orrs	r3, r2
			| huart->Init.Mode | huart->Init.OverSampling;
 80073ca:	6942      	ldr	r2, [r0, #20]
 80073cc:	4313      	orrs	r3, r2
 80073ce:	69c2      	ldr	r2, [r0, #28]
	tmpreg = (uint32_t) huart->Init.WordLength | huart->Init.Parity
 80073d0:	4313      	orrs	r3, r2
	MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80073d2:	6801      	ldr	r1, [r0, #0]
 80073d4:	6808      	ldr	r0, [r1, #0]
 80073d6:	4a93      	ldr	r2, [pc, #588]	; (8007624 <UART_SetConfig+0x264>)
 80073d8:	4002      	ands	r2, r0
 80073da:	431a      	orrs	r2, r3
 80073dc:	600a      	str	r2, [r1, #0]
	MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073de:	6822      	ldr	r2, [r4, #0]
 80073e0:	6853      	ldr	r3, [r2, #4]
 80073e2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80073e6:	68e1      	ldr	r1, [r4, #12]
 80073e8:	430b      	orrs	r3, r1
 80073ea:	6053      	str	r3, [r2, #4]
	tmpreg = (uint32_t) huart->Init.HwFlowCtl;
 80073ec:	69a2      	ldr	r2, [r4, #24]
	tmpreg |= huart->Init.OneBitSampling;
 80073ee:	6a23      	ldr	r3, [r4, #32]
 80073f0:	431a      	orrs	r2, r3
	MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073f2:	6821      	ldr	r1, [r4, #0]
 80073f4:	688b      	ldr	r3, [r1, #8]
 80073f6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80073fa:	4313      	orrs	r3, r2
 80073fc:	608b      	str	r3, [r1, #8]
	UART_GETCLOCKSOURCE(huart, clocksource);
 80073fe:	6823      	ldr	r3, [r4, #0]
 8007400:	4a89      	ldr	r2, [pc, #548]	; (8007628 <UART_SetConfig+0x268>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d019      	beq.n	800743a <UART_SetConfig+0x7a>
 8007406:	4a89      	ldr	r2, [pc, #548]	; (800762c <UART_SetConfig+0x26c>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d029      	beq.n	8007460 <UART_SetConfig+0xa0>
 800740c:	4a88      	ldr	r2, [pc, #544]	; (8007630 <UART_SetConfig+0x270>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d03e      	beq.n	8007490 <UART_SetConfig+0xd0>
 8007412:	4a88      	ldr	r2, [pc, #544]	; (8007634 <UART_SetConfig+0x274>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d062      	beq.n	80074de <UART_SetConfig+0x11e>
 8007418:	4a87      	ldr	r2, [pc, #540]	; (8007638 <UART_SetConfig+0x278>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d071      	beq.n	8007502 <UART_SetConfig+0x142>
 800741e:	4a87      	ldr	r2, [pc, #540]	; (800763c <UART_SetConfig+0x27c>)
 8007420:	4293      	cmp	r3, r2
 8007422:	f000 8083 	beq.w	800752c <UART_SetConfig+0x16c>
 8007426:	4a86      	ldr	r2, [pc, #536]	; (8007640 <UART_SetConfig+0x280>)
 8007428:	4293      	cmp	r3, r2
 800742a:	f000 8094 	beq.w	8007556 <UART_SetConfig+0x196>
 800742e:	4a85      	ldr	r2, [pc, #532]	; (8007644 <UART_SetConfig+0x284>)
 8007430:	4293      	cmp	r3, r2
 8007432:	f000 80a5 	beq.w	8007580 <UART_SetConfig+0x1c0>
 8007436:	2310      	movs	r3, #16
 8007438:	e03a      	b.n	80074b0 <UART_SetConfig+0xf0>
 800743a:	4b83      	ldr	r3, [pc, #524]	; (8007648 <UART_SetConfig+0x288>)
 800743c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007440:	f003 0303 	and.w	r3, r3, #3
 8007444:	2b03      	cmp	r3, #3
 8007446:	d809      	bhi.n	800745c <UART_SetConfig+0x9c>
 8007448:	e8df f003 	tbb	[pc, r3]
 800744c:	06ae0402 	.word	0x06ae0402
 8007450:	2301      	movs	r3, #1
 8007452:	e02d      	b.n	80074b0 <UART_SetConfig+0xf0>
 8007454:	2304      	movs	r3, #4
 8007456:	e02b      	b.n	80074b0 <UART_SetConfig+0xf0>
 8007458:	2308      	movs	r3, #8
 800745a:	e029      	b.n	80074b0 <UART_SetConfig+0xf0>
 800745c:	2310      	movs	r3, #16
 800745e:	e027      	b.n	80074b0 <UART_SetConfig+0xf0>
 8007460:	4b79      	ldr	r3, [pc, #484]	; (8007648 <UART_SetConfig+0x288>)
 8007462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007466:	f003 030c 	and.w	r3, r3, #12
 800746a:	2b0c      	cmp	r3, #12
 800746c:	d80e      	bhi.n	800748c <UART_SetConfig+0xcc>
 800746e:	e8df f003 	tbb	[pc, r3]
 8007472:	0d07      	.short	0x0d07
 8007474:	0d090d0d 	.word	0x0d090d0d
 8007478:	0d9d0d0d 	.word	0x0d9d0d0d
 800747c:	0d0d      	.short	0x0d0d
 800747e:	0b          	.byte	0x0b
 800747f:	00          	.byte	0x00
 8007480:	2300      	movs	r3, #0
 8007482:	e015      	b.n	80074b0 <UART_SetConfig+0xf0>
 8007484:	2304      	movs	r3, #4
 8007486:	e013      	b.n	80074b0 <UART_SetConfig+0xf0>
 8007488:	2308      	movs	r3, #8
 800748a:	e011      	b.n	80074b0 <UART_SetConfig+0xf0>
 800748c:	2310      	movs	r3, #16
 800748e:	e00f      	b.n	80074b0 <UART_SetConfig+0xf0>
 8007490:	4b6d      	ldr	r3, [pc, #436]	; (8007648 <UART_SetConfig+0x288>)
 8007492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007496:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800749a:	2b20      	cmp	r3, #32
 800749c:	f000 8088 	beq.w	80075b0 <UART_SetConfig+0x1f0>
 80074a0:	d819      	bhi.n	80074d6 <UART_SetConfig+0x116>
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	f000 8086 	beq.w	80075b4 <UART_SetConfig+0x1f4>
 80074a8:	2b10      	cmp	r3, #16
 80074aa:	f040 8085 	bne.w	80075b8 <UART_SetConfig+0x1f8>
 80074ae:	2304      	movs	r3, #4
	if (huart->Init.OverSampling == UART_OVERSAMPLING_8) {
 80074b0:	69e0      	ldr	r0, [r4, #28]
 80074b2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80074b6:	f000 80ab 	beq.w	8007610 <UART_SetConfig+0x250>
		switch (clocksource) {
 80074ba:	2b08      	cmp	r3, #8
 80074bc:	f200 810c 	bhi.w	80076d8 <UART_SetConfig+0x318>
 80074c0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80074c4:	00fb00e8 	.word	0x00fb00e8
 80074c8:	010a00e6 	.word	0x010a00e6
 80074cc:	010a00fe 	.word	0x010a00fe
 80074d0:	010a010a 	.word	0x010a010a
 80074d4:	0101      	.short	0x0101
	UART_GETCLOCKSOURCE(huart, clocksource);
 80074d6:	2b30      	cmp	r3, #48	; 0x30
 80074d8:	d170      	bne.n	80075bc <UART_SetConfig+0x1fc>
 80074da:	2308      	movs	r3, #8
 80074dc:	e7e8      	b.n	80074b0 <UART_SetConfig+0xf0>
 80074de:	4b5a      	ldr	r3, [pc, #360]	; (8007648 <UART_SetConfig+0x288>)
 80074e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074e4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80074e8:	2b80      	cmp	r3, #128	; 0x80
 80074ea:	d069      	beq.n	80075c0 <UART_SetConfig+0x200>
 80074ec:	d805      	bhi.n	80074fa <UART_SetConfig+0x13a>
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d068      	beq.n	80075c4 <UART_SetConfig+0x204>
 80074f2:	2b40      	cmp	r3, #64	; 0x40
 80074f4:	d168      	bne.n	80075c8 <UART_SetConfig+0x208>
 80074f6:	2304      	movs	r3, #4
 80074f8:	e7da      	b.n	80074b0 <UART_SetConfig+0xf0>
 80074fa:	2bc0      	cmp	r3, #192	; 0xc0
 80074fc:	d166      	bne.n	80075cc <UART_SetConfig+0x20c>
 80074fe:	2308      	movs	r3, #8
 8007500:	e7d6      	b.n	80074b0 <UART_SetConfig+0xf0>
 8007502:	4b51      	ldr	r3, [pc, #324]	; (8007648 <UART_SetConfig+0x288>)
 8007504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007508:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800750c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007510:	d05e      	beq.n	80075d0 <UART_SetConfig+0x210>
 8007512:	d806      	bhi.n	8007522 <UART_SetConfig+0x162>
 8007514:	2b00      	cmp	r3, #0
 8007516:	d05d      	beq.n	80075d4 <UART_SetConfig+0x214>
 8007518:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800751c:	d15c      	bne.n	80075d8 <UART_SetConfig+0x218>
 800751e:	2304      	movs	r3, #4
 8007520:	e7c6      	b.n	80074b0 <UART_SetConfig+0xf0>
 8007522:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007526:	d159      	bne.n	80075dc <UART_SetConfig+0x21c>
 8007528:	2308      	movs	r3, #8
 800752a:	e7c1      	b.n	80074b0 <UART_SetConfig+0xf0>
 800752c:	4b46      	ldr	r3, [pc, #280]	; (8007648 <UART_SetConfig+0x288>)
 800752e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007532:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007536:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800753a:	d051      	beq.n	80075e0 <UART_SetConfig+0x220>
 800753c:	d806      	bhi.n	800754c <UART_SetConfig+0x18c>
 800753e:	2b00      	cmp	r3, #0
 8007540:	d050      	beq.n	80075e4 <UART_SetConfig+0x224>
 8007542:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007546:	d14f      	bne.n	80075e8 <UART_SetConfig+0x228>
 8007548:	2304      	movs	r3, #4
 800754a:	e7b1      	b.n	80074b0 <UART_SetConfig+0xf0>
 800754c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007550:	d14c      	bne.n	80075ec <UART_SetConfig+0x22c>
 8007552:	2308      	movs	r3, #8
 8007554:	e7ac      	b.n	80074b0 <UART_SetConfig+0xf0>
 8007556:	4b3c      	ldr	r3, [pc, #240]	; (8007648 <UART_SetConfig+0x288>)
 8007558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800755c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007560:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007564:	d044      	beq.n	80075f0 <UART_SetConfig+0x230>
 8007566:	d806      	bhi.n	8007576 <UART_SetConfig+0x1b6>
 8007568:	2b00      	cmp	r3, #0
 800756a:	d043      	beq.n	80075f4 <UART_SetConfig+0x234>
 800756c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007570:	d142      	bne.n	80075f8 <UART_SetConfig+0x238>
 8007572:	2304      	movs	r3, #4
 8007574:	e79c      	b.n	80074b0 <UART_SetConfig+0xf0>
 8007576:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800757a:	d13f      	bne.n	80075fc <UART_SetConfig+0x23c>
 800757c:	2308      	movs	r3, #8
 800757e:	e797      	b.n	80074b0 <UART_SetConfig+0xf0>
 8007580:	4b31      	ldr	r3, [pc, #196]	; (8007648 <UART_SetConfig+0x288>)
 8007582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007586:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800758a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800758e:	d037      	beq.n	8007600 <UART_SetConfig+0x240>
 8007590:	d805      	bhi.n	800759e <UART_SetConfig+0x1de>
 8007592:	b3bb      	cbz	r3, 8007604 <UART_SetConfig+0x244>
 8007594:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007598:	d136      	bne.n	8007608 <UART_SetConfig+0x248>
 800759a:	2304      	movs	r3, #4
 800759c:	e788      	b.n	80074b0 <UART_SetConfig+0xf0>
 800759e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80075a2:	d133      	bne.n	800760c <UART_SetConfig+0x24c>
 80075a4:	2308      	movs	r3, #8
 80075a6:	e783      	b.n	80074b0 <UART_SetConfig+0xf0>
 80075a8:	2302      	movs	r3, #2
 80075aa:	e781      	b.n	80074b0 <UART_SetConfig+0xf0>
 80075ac:	2302      	movs	r3, #2
 80075ae:	e77f      	b.n	80074b0 <UART_SetConfig+0xf0>
 80075b0:	2302      	movs	r3, #2
 80075b2:	e77d      	b.n	80074b0 <UART_SetConfig+0xf0>
 80075b4:	2300      	movs	r3, #0
 80075b6:	e77b      	b.n	80074b0 <UART_SetConfig+0xf0>
 80075b8:	2310      	movs	r3, #16
 80075ba:	e779      	b.n	80074b0 <UART_SetConfig+0xf0>
 80075bc:	2310      	movs	r3, #16
 80075be:	e777      	b.n	80074b0 <UART_SetConfig+0xf0>
 80075c0:	2302      	movs	r3, #2
 80075c2:	e775      	b.n	80074b0 <UART_SetConfig+0xf0>
 80075c4:	2300      	movs	r3, #0
 80075c6:	e773      	b.n	80074b0 <UART_SetConfig+0xf0>
 80075c8:	2310      	movs	r3, #16
 80075ca:	e771      	b.n	80074b0 <UART_SetConfig+0xf0>
 80075cc:	2310      	movs	r3, #16
 80075ce:	e76f      	b.n	80074b0 <UART_SetConfig+0xf0>
 80075d0:	2302      	movs	r3, #2
 80075d2:	e76d      	b.n	80074b0 <UART_SetConfig+0xf0>
 80075d4:	2300      	movs	r3, #0
 80075d6:	e76b      	b.n	80074b0 <UART_SetConfig+0xf0>
 80075d8:	2310      	movs	r3, #16
 80075da:	e769      	b.n	80074b0 <UART_SetConfig+0xf0>
 80075dc:	2310      	movs	r3, #16
 80075de:	e767      	b.n	80074b0 <UART_SetConfig+0xf0>
 80075e0:	2302      	movs	r3, #2
 80075e2:	e765      	b.n	80074b0 <UART_SetConfig+0xf0>
 80075e4:	2301      	movs	r3, #1
 80075e6:	e763      	b.n	80074b0 <UART_SetConfig+0xf0>
 80075e8:	2310      	movs	r3, #16
 80075ea:	e761      	b.n	80074b0 <UART_SetConfig+0xf0>
 80075ec:	2310      	movs	r3, #16
 80075ee:	e75f      	b.n	80074b0 <UART_SetConfig+0xf0>
 80075f0:	2302      	movs	r3, #2
 80075f2:	e75d      	b.n	80074b0 <UART_SetConfig+0xf0>
 80075f4:	2300      	movs	r3, #0
 80075f6:	e75b      	b.n	80074b0 <UART_SetConfig+0xf0>
 80075f8:	2310      	movs	r3, #16
 80075fa:	e759      	b.n	80074b0 <UART_SetConfig+0xf0>
 80075fc:	2310      	movs	r3, #16
 80075fe:	e757      	b.n	80074b0 <UART_SetConfig+0xf0>
 8007600:	2302      	movs	r3, #2
 8007602:	e755      	b.n	80074b0 <UART_SetConfig+0xf0>
 8007604:	2300      	movs	r3, #0
 8007606:	e753      	b.n	80074b0 <UART_SetConfig+0xf0>
 8007608:	2310      	movs	r3, #16
 800760a:	e751      	b.n	80074b0 <UART_SetConfig+0xf0>
 800760c:	2310      	movs	r3, #16
 800760e:	e74f      	b.n	80074b0 <UART_SetConfig+0xf0>
		switch (clocksource) {
 8007610:	2b08      	cmp	r3, #8
 8007612:	d85b      	bhi.n	80076cc <UART_SetConfig+0x30c>
 8007614:	e8df f003 	tbb	[pc, r3]
 8007618:	5a3a341a 	.word	0x5a3a341a
 800761c:	5a5a5a37 	.word	0x5a5a5a37
 8007620:	1e          	.byte	0x1e
 8007621:	00          	.byte	0x00
 8007622:	bf00      	nop
 8007624:	efff69f3 	.word	0xefff69f3
 8007628:	40011000 	.word	0x40011000
 800762c:	40004400 	.word	0x40004400
 8007630:	40004800 	.word	0x40004800
 8007634:	40004c00 	.word	0x40004c00
 8007638:	40005000 	.word	0x40005000
 800763c:	40011400 	.word	0x40011400
 8007640:	40007800 	.word	0x40007800
 8007644:	40007c00 	.word	0x40007c00
 8007648:	40023800 	.word	0x40023800
			pclk = HAL_RCC_GetPCLK1Freq();
 800764c:	f7fe fe5a 	bl	8006304 <HAL_RCC_GetPCLK1Freq>
		if (pclk != 0U) {
 8007650:	2800      	cmp	r0, #0
 8007652:	d03d      	beq.n	80076d0 <UART_SetConfig+0x310>
			usartdiv = (uint32_t) (UART_DIV_SAMPLING8(pclk,
 8007654:	6862      	ldr	r2, [r4, #4]
 8007656:	0853      	lsrs	r3, r2, #1
 8007658:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800765c:	fbb3 f3f2 	udiv	r3, r3, r2
			if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX)) {
 8007660:	f1a3 0110 	sub.w	r1, r3, #16
 8007664:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8007668:	4291      	cmp	r1, r2
 800766a:	d833      	bhi.n	80076d4 <UART_SetConfig+0x314>
				brrtemp = (uint16_t) (usartdiv & 0xFFF0U);
 800766c:	b29a      	uxth	r2, r3
 800766e:	f022 020f 	bic.w	r2, r2, #15
				brrtemp |= (uint16_t) ((usartdiv & (uint16_t) 0x000FU) >> 1U);
 8007672:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8007676:	4313      	orrs	r3, r2
				huart->Instance->BRR = brrtemp;
 8007678:	6822      	ldr	r2, [r4, #0]
 800767a:	60d3      	str	r3, [r2, #12]
 800767c:	2000      	movs	r0, #0
 800767e:	e030      	b.n	80076e2 <UART_SetConfig+0x322>
			pclk = HAL_RCC_GetPCLK2Freq();
 8007680:	f7fe fe50 	bl	8006324 <HAL_RCC_GetPCLK2Freq>
			break;
 8007684:	e7e4      	b.n	8007650 <UART_SetConfig+0x290>
			pclk = HAL_RCC_GetSysClockFreq();
 8007686:	f7fe fd2d 	bl	80060e4 <HAL_RCC_GetSysClockFreq>
			break;
 800768a:	e7e1      	b.n	8007650 <UART_SetConfig+0x290>
			pclk = (uint32_t) HSI_VALUE;
 800768c:	4817      	ldr	r0, [pc, #92]	; (80076ec <UART_SetConfig+0x32c>)
 800768e:	e7e1      	b.n	8007654 <UART_SetConfig+0x294>
		switch (clocksource) {
 8007690:	4816      	ldr	r0, [pc, #88]	; (80076ec <UART_SetConfig+0x32c>)
 8007692:	e002      	b.n	800769a <UART_SetConfig+0x2da>
			pclk = HAL_RCC_GetPCLK1Freq();
 8007694:	f7fe fe36 	bl	8006304 <HAL_RCC_GetPCLK1Freq>
		if (pclk != 0U) {
 8007698:	b300      	cbz	r0, 80076dc <UART_SetConfig+0x31c>
			usartdiv = (uint32_t) (UART_DIV_SAMPLING16(pclk,
 800769a:	6863      	ldr	r3, [r4, #4]
 800769c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80076a0:	fbb0 f0f3 	udiv	r0, r0, r3
			if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX)) {
 80076a4:	f1a0 0210 	sub.w	r2, r0, #16
 80076a8:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d817      	bhi.n	80076e0 <UART_SetConfig+0x320>
				huart->Instance->BRR = (uint16_t) usartdiv;
 80076b0:	6823      	ldr	r3, [r4, #0]
 80076b2:	b280      	uxth	r0, r0
 80076b4:	60d8      	str	r0, [r3, #12]
 80076b6:	2000      	movs	r0, #0
 80076b8:	e013      	b.n	80076e2 <UART_SetConfig+0x322>
			pclk = HAL_RCC_GetPCLK2Freq();
 80076ba:	f7fe fe33 	bl	8006324 <HAL_RCC_GetPCLK2Freq>
			break;
 80076be:	e7eb      	b.n	8007698 <UART_SetConfig+0x2d8>
			pclk = HAL_RCC_GetSysClockFreq();
 80076c0:	f7fe fd10 	bl	80060e4 <HAL_RCC_GetSysClockFreq>
			break;
 80076c4:	e7e8      	b.n	8007698 <UART_SetConfig+0x2d8>
			pclk = (uint32_t) LSE_VALUE;
 80076c6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80076ca:	e7e6      	b.n	800769a <UART_SetConfig+0x2da>
		switch (clocksource) {
 80076cc:	2001      	movs	r0, #1
 80076ce:	e008      	b.n	80076e2 <UART_SetConfig+0x322>
 80076d0:	2000      	movs	r0, #0
 80076d2:	e006      	b.n	80076e2 <UART_SetConfig+0x322>
				ret = HAL_ERROR;
 80076d4:	2001      	movs	r0, #1
 80076d6:	e004      	b.n	80076e2 <UART_SetConfig+0x322>
		switch (clocksource) {
 80076d8:	2001      	movs	r0, #1
 80076da:	e002      	b.n	80076e2 <UART_SetConfig+0x322>
 80076dc:	2000      	movs	r0, #0
 80076de:	e000      	b.n	80076e2 <UART_SetConfig+0x322>
				ret = HAL_ERROR;
 80076e0:	2001      	movs	r0, #1
	huart->RxISR = NULL;
 80076e2:	2300      	movs	r3, #0
 80076e4:	66a3      	str	r3, [r4, #104]	; 0x68
	huart->TxISR = NULL;
 80076e6:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 80076e8:	bd10      	pop	{r4, pc}
 80076ea:	bf00      	nop
 80076ec:	00f42400 	.word	0x00f42400

080076f0 <UART_AdvFeatureConfig>:
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 80076f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80076f2:	f013 0f01 	tst.w	r3, #1
 80076f6:	d006      	beq.n	8007706 <UART_AdvFeatureConfig+0x16>
		MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV,
 80076f8:	6802      	ldr	r2, [r0, #0]
 80076fa:	6853      	ldr	r3, [r2, #4]
 80076fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007700:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8007702:	430b      	orrs	r3, r1
 8007704:	6053      	str	r3, [r2, #4]
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8007706:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007708:	f013 0f02 	tst.w	r3, #2
 800770c:	d006      	beq.n	800771c <UART_AdvFeatureConfig+0x2c>
		MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV,
 800770e:	6802      	ldr	r2, [r0, #0]
 8007710:	6853      	ldr	r3, [r2, #4]
 8007712:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007716:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8007718:	430b      	orrs	r3, r1
 800771a:	6053      	str	r3, [r2, #4]
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 800771c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800771e:	f013 0f04 	tst.w	r3, #4
 8007722:	d006      	beq.n	8007732 <UART_AdvFeatureConfig+0x42>
		MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV,
 8007724:	6802      	ldr	r2, [r0, #0]
 8007726:	6853      	ldr	r3, [r2, #4]
 8007728:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800772c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800772e:	430b      	orrs	r3, r1
 8007730:	6053      	str	r3, [r2, #4]
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8007732:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007734:	f013 0f08 	tst.w	r3, #8
 8007738:	d006      	beq.n	8007748 <UART_AdvFeatureConfig+0x58>
		MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP,
 800773a:	6802      	ldr	r2, [r0, #0]
 800773c:	6853      	ldr	r3, [r2, #4]
 800773e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007742:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8007744:	430b      	orrs	r3, r1
 8007746:	6053      	str	r3, [r2, #4]
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8007748:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800774a:	f013 0f10 	tst.w	r3, #16
 800774e:	d006      	beq.n	800775e <UART_AdvFeatureConfig+0x6e>
		MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS,
 8007750:	6802      	ldr	r2, [r0, #0]
 8007752:	6893      	ldr	r3, [r2, #8]
 8007754:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007758:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800775a:	430b      	orrs	r3, r1
 800775c:	6093      	str	r3, [r2, #8]
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 800775e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007760:	f013 0f20 	tst.w	r3, #32
 8007764:	d006      	beq.n	8007774 <UART_AdvFeatureConfig+0x84>
		MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE,
 8007766:	6802      	ldr	r2, [r0, #0]
 8007768:	6893      	ldr	r3, [r2, #8]
 800776a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800776e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8007770:	430b      	orrs	r3, r1
 8007772:	6093      	str	r3, [r2, #8]
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8007774:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007776:	f013 0f40 	tst.w	r3, #64	; 0x40
 800777a:	d00a      	beq.n	8007792 <UART_AdvFeatureConfig+0xa2>
		MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN,
 800777c:	6802      	ldr	r2, [r0, #0]
 800777e:	6853      	ldr	r3, [r2, #4]
 8007780:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007784:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8007786:	430b      	orrs	r3, r1
 8007788:	6053      	str	r3, [r2, #4]
		if (huart->AdvancedInit.AutoBaudRateEnable
 800778a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800778c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007790:	d00b      	beq.n	80077aa <UART_AdvFeatureConfig+0xba>
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8007792:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007794:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007798:	d006      	beq.n	80077a8 <UART_AdvFeatureConfig+0xb8>
		MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST,
 800779a:	6802      	ldr	r2, [r0, #0]
 800779c:	6853      	ldr	r3, [r2, #4]
 800779e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80077a2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80077a4:	430b      	orrs	r3, r1
 80077a6:	6053      	str	r3, [r2, #4]
}
 80077a8:	4770      	bx	lr
			MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE,
 80077aa:	6802      	ldr	r2, [r0, #0]
 80077ac:	6853      	ldr	r3, [r2, #4]
 80077ae:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80077b2:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80077b4:	430b      	orrs	r3, r1
 80077b6:	6053      	str	r3, [r2, #4]
 80077b8:	e7eb      	b.n	8007792 <UART_AdvFeatureConfig+0xa2>

080077ba <UART_WaitOnFlagUntilTimeout>:
		uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout) {
 80077ba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077be:	4605      	mov	r5, r0
 80077c0:	460f      	mov	r7, r1
 80077c2:	4616      	mov	r6, r2
 80077c4:	4699      	mov	r9, r3
 80077c6:	f8dd 8020 	ldr.w	r8, [sp, #32]
	while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) {
 80077ca:	682b      	ldr	r3, [r5, #0]
 80077cc:	69dc      	ldr	r4, [r3, #28]
 80077ce:	ea37 0404 	bics.w	r4, r7, r4
 80077d2:	bf0c      	ite	eq
 80077d4:	2401      	moveq	r4, #1
 80077d6:	2400      	movne	r4, #0
 80077d8:	42b4      	cmp	r4, r6
 80077da:	d155      	bne.n	8007888 <UART_WaitOnFlagUntilTimeout+0xce>
		if (Timeout != HAL_MAX_DELAY) {
 80077dc:	f1b8 3fff 	cmp.w	r8, #4294967295
 80077e0:	d0f3      	beq.n	80077ca <UART_WaitOnFlagUntilTimeout+0x10>
			if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 80077e2:	f7fc fb8d 	bl	8003f00 <HAL_GetTick>
 80077e6:	eba0 0009 	sub.w	r0, r0, r9
 80077ea:	4540      	cmp	r0, r8
 80077ec:	d82e      	bhi.n	800784c <UART_WaitOnFlagUntilTimeout+0x92>
 80077ee:	f1b8 0f00 	cmp.w	r8, #0
 80077f2:	d02b      	beq.n	800784c <UART_WaitOnFlagUntilTimeout+0x92>
			if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) {
 80077f4:	682b      	ldr	r3, [r5, #0]
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	f012 0f04 	tst.w	r2, #4
 80077fc:	d0e5      	beq.n	80077ca <UART_WaitOnFlagUntilTimeout+0x10>
				if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET) {
 80077fe:	69da      	ldr	r2, [r3, #28]
 8007800:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8007804:	d0e1      	beq.n	80077ca <UART_WaitOnFlagUntilTimeout+0x10>
					__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007806:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800780a:	621a      	str	r2, [r3, #32]
					ATOMIC_CLEAR_BIT(huart->Instance->CR1,
 800780c:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780e:	e852 3f00 	ldrex	r3, [r2]
 8007812:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007816:	e842 3100 	strex	r1, r3, [r2]
 800781a:	2900      	cmp	r1, #0
 800781c:	d1f6      	bne.n	800780c <UART_WaitOnFlagUntilTimeout+0x52>
					ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800781e:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007820:	f102 0308 	add.w	r3, r2, #8
 8007824:	e853 3f00 	ldrex	r3, [r3]
 8007828:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782c:	3208      	adds	r2, #8
 800782e:	e842 3100 	strex	r1, r3, [r2]
 8007832:	2900      	cmp	r1, #0
 8007834:	d1f3      	bne.n	800781e <UART_WaitOnFlagUntilTimeout+0x64>
					huart->gState = HAL_UART_STATE_READY;
 8007836:	2320      	movs	r3, #32
 8007838:	67eb      	str	r3, [r5, #124]	; 0x7c
					huart->RxState = HAL_UART_STATE_READY;
 800783a:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
					huart->ErrorCode = HAL_UART_ERROR_RTO;
 800783e:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
					__HAL_UNLOCK(huart);
 8007842:	2300      	movs	r3, #0
 8007844:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
					return HAL_TIMEOUT;
 8007848:	2003      	movs	r0, #3
 800784a:	e01e      	b.n	800788a <UART_WaitOnFlagUntilTimeout+0xd0>
				ATOMIC_CLEAR_BIT(huart->Instance->CR1,
 800784c:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784e:	e852 3f00 	ldrex	r3, [r2]
 8007852:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007856:	e842 3100 	strex	r1, r3, [r2]
 800785a:	2900      	cmp	r1, #0
 800785c:	d1f6      	bne.n	800784c <UART_WaitOnFlagUntilTimeout+0x92>
				ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800785e:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007860:	f102 0308 	add.w	r3, r2, #8
 8007864:	e853 3f00 	ldrex	r3, [r3]
 8007868:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786c:	3208      	adds	r2, #8
 800786e:	e842 3100 	strex	r1, r3, [r2]
 8007872:	2900      	cmp	r1, #0
 8007874:	d1f3      	bne.n	800785e <UART_WaitOnFlagUntilTimeout+0xa4>
				huart->gState = HAL_UART_STATE_READY;
 8007876:	2320      	movs	r3, #32
 8007878:	67eb      	str	r3, [r5, #124]	; 0x7c
				huart->RxState = HAL_UART_STATE_READY;
 800787a:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
				__HAL_UNLOCK(huart);
 800787e:	2300      	movs	r3, #0
 8007880:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
				return HAL_TIMEOUT;
 8007884:	2003      	movs	r0, #3
 8007886:	e000      	b.n	800788a <UART_WaitOnFlagUntilTimeout+0xd0>
	return HAL_OK;
 8007888:	2000      	movs	r0, #0
}
 800788a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800788e <HAL_UART_Receive>:
		uint16_t Size, uint32_t Timeout) {
 800788e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007892:	b083      	sub	sp, #12
 8007894:	461e      	mov	r6, r3
	if (huart->RxState == HAL_UART_STATE_READY) {
 8007896:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 800789a:	2b20      	cmp	r3, #32
 800789c:	d178      	bne.n	8007990 <HAL_UART_Receive+0x102>
 800789e:	4604      	mov	r4, r0
 80078a0:	460d      	mov	r5, r1
 80078a2:	4690      	mov	r8, r2
		if ((pData == NULL) || (Size == 0U)) {
 80078a4:	2a00      	cmp	r2, #0
 80078a6:	bf18      	it	ne
 80078a8:	2900      	cmpne	r1, #0
 80078aa:	d101      	bne.n	80078b0 <HAL_UART_Receive+0x22>
			return HAL_ERROR;
 80078ac:	2001      	movs	r0, #1
 80078ae:	e070      	b.n	8007992 <HAL_UART_Receive+0x104>
		huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078b0:	2300      	movs	r3, #0
 80078b2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		huart->RxState = HAL_UART_STATE_BUSY_RX;
 80078b6:	2222      	movs	r2, #34	; 0x22
 80078b8:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078bc:	6603      	str	r3, [r0, #96]	; 0x60
		tickstart = HAL_GetTick();
 80078be:	f7fc fb1f 	bl	8003f00 <HAL_GetTick>
 80078c2:	4607      	mov	r7, r0
		huart->RxXferSize = Size;
 80078c4:	f8a4 8058 	strh.w	r8, [r4, #88]	; 0x58
		huart->RxXferCount = Size;
 80078c8:	f8a4 805a 	strh.w	r8, [r4, #90]	; 0x5a
		UART_MASK_COMPUTATION(huart);
 80078cc:	68a3      	ldr	r3, [r4, #8]
 80078ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078d2:	d006      	beq.n	80078e2 <HAL_UART_Receive+0x54>
 80078d4:	b9a3      	cbnz	r3, 8007900 <HAL_UART_Receive+0x72>
 80078d6:	6922      	ldr	r2, [r4, #16]
 80078d8:	b972      	cbnz	r2, 80078f8 <HAL_UART_Receive+0x6a>
 80078da:	22ff      	movs	r2, #255	; 0xff
 80078dc:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80078e0:	e014      	b.n	800790c <HAL_UART_Receive+0x7e>
 80078e2:	6922      	ldr	r2, [r4, #16]
 80078e4:	b922      	cbnz	r2, 80078f0 <HAL_UART_Receive+0x62>
 80078e6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80078ea:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80078ee:	e00d      	b.n	800790c <HAL_UART_Receive+0x7e>
 80078f0:	22ff      	movs	r2, #255	; 0xff
 80078f2:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80078f6:	e009      	b.n	800790c <HAL_UART_Receive+0x7e>
 80078f8:	227f      	movs	r2, #127	; 0x7f
 80078fa:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80078fe:	e005      	b.n	800790c <HAL_UART_Receive+0x7e>
 8007900:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007904:	d00a      	beq.n	800791c <HAL_UART_Receive+0x8e>
 8007906:	2200      	movs	r2, #0
 8007908:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
		uhMask = huart->Mask;
 800790c:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
		if ((huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007914:	d00c      	beq.n	8007930 <HAL_UART_Receive+0xa2>
			pdata16bits = NULL;
 8007916:	f04f 0900 	mov.w	r9, #0
 800791a:	e01f      	b.n	800795c <HAL_UART_Receive+0xce>
		UART_MASK_COMPUTATION(huart);
 800791c:	6922      	ldr	r2, [r4, #16]
 800791e:	b91a      	cbnz	r2, 8007928 <HAL_UART_Receive+0x9a>
 8007920:	227f      	movs	r2, #127	; 0x7f
 8007922:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8007926:	e7f1      	b.n	800790c <HAL_UART_Receive+0x7e>
 8007928:	223f      	movs	r2, #63	; 0x3f
 800792a:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 800792e:	e7ed      	b.n	800790c <HAL_UART_Receive+0x7e>
				&& (huart->Init.Parity == UART_PARITY_NONE)) {
 8007930:	6923      	ldr	r3, [r4, #16]
 8007932:	b113      	cbz	r3, 800793a <HAL_UART_Receive+0xac>
			pdata16bits = NULL;
 8007934:	f04f 0900 	mov.w	r9, #0
 8007938:	e010      	b.n	800795c <HAL_UART_Receive+0xce>
			pdata16bits = (uint16_t*) pData;
 800793a:	46a9      	mov	r9, r5
			pdata8bits = NULL;
 800793c:	2500      	movs	r5, #0
 800793e:	e00d      	b.n	800795c <HAL_UART_Receive+0xce>
						(uint8_t) (huart->Instance->RDR & (uint8_t) uhMask);
 8007940:	6823      	ldr	r3, [r4, #0]
 8007942:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007944:	fa5f f388 	uxtb.w	r3, r8
 8007948:	4013      	ands	r3, r2
				*pdata8bits =
 800794a:	f805 3b01 	strb.w	r3, [r5], #1
			huart->RxXferCount--;
 800794e:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 8007952:	b292      	uxth	r2, r2
 8007954:	3a01      	subs	r2, #1
 8007956:	b292      	uxth	r2, r2
 8007958:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
		while (huart->RxXferCount > 0U) {
 800795c:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8007960:	b29b      	uxth	r3, r3
 8007962:	b183      	cbz	r3, 8007986 <HAL_UART_Receive+0xf8>
			if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET,
 8007964:	9600      	str	r6, [sp, #0]
 8007966:	463b      	mov	r3, r7
 8007968:	2200      	movs	r2, #0
 800796a:	2120      	movs	r1, #32
 800796c:	4620      	mov	r0, r4
 800796e:	f7ff ff24 	bl	80077ba <UART_WaitOnFlagUntilTimeout>
 8007972:	b988      	cbnz	r0, 8007998 <HAL_UART_Receive+0x10a>
			if (pdata8bits == NULL) {
 8007974:	2d00      	cmp	r5, #0
 8007976:	d1e3      	bne.n	8007940 <HAL_UART_Receive+0xb2>
				*pdata16bits = (uint16_t) (huart->Instance->RDR & uhMask);
 8007978:	6823      	ldr	r3, [r4, #0]
 800797a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797c:	ea08 0303 	and.w	r3, r8, r3
 8007980:	f829 3b02 	strh.w	r3, [r9], #2
				pdata16bits++;
 8007984:	e7e3      	b.n	800794e <HAL_UART_Receive+0xc0>
		huart->RxState = HAL_UART_STATE_READY;
 8007986:	2320      	movs	r3, #32
 8007988:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		return HAL_OK;
 800798c:	2000      	movs	r0, #0
 800798e:	e000      	b.n	8007992 <HAL_UART_Receive+0x104>
		return HAL_BUSY;
 8007990:	2002      	movs	r0, #2
}
 8007992:	b003      	add	sp, #12
 8007994:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				return HAL_TIMEOUT;
 8007998:	2003      	movs	r0, #3
 800799a:	e7fa      	b.n	8007992 <HAL_UART_Receive+0x104>

0800799c <UART_CheckIdleState>:
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart) {
 800799c:	b530      	push	{r4, r5, lr}
 800799e:	b083      	sub	sp, #12
 80079a0:	4604      	mov	r4, r0
	huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079a2:	2300      	movs	r3, #0
 80079a4:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	tickstart = HAL_GetTick();
 80079a8:	f7fc faaa 	bl	8003f00 <HAL_GetTick>
 80079ac:	4605      	mov	r5, r0
	if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE) {
 80079ae:	6822      	ldr	r2, [r4, #0]
 80079b0:	6812      	ldr	r2, [r2, #0]
 80079b2:	f012 0f08 	tst.w	r2, #8
 80079b6:	d10f      	bne.n	80079d8 <UART_CheckIdleState+0x3c>
	if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE) {
 80079b8:	6823      	ldr	r3, [r4, #0]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f013 0f04 	tst.w	r3, #4
 80079c0:	d118      	bne.n	80079f4 <UART_CheckIdleState+0x58>
	huart->gState = HAL_UART_STATE_READY;
 80079c2:	2320      	movs	r3, #32
 80079c4:	67e3      	str	r3, [r4, #124]	; 0x7c
	huart->RxState = HAL_UART_STATE_READY;
 80079c6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079ca:	2000      	movs	r0, #0
 80079cc:	6620      	str	r0, [r4, #96]	; 0x60
	huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079ce:	6660      	str	r0, [r4, #100]	; 0x64
	__HAL_UNLOCK(huart);
 80079d0:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
}
 80079d4:	b003      	add	sp, #12
 80079d6:	bd30      	pop	{r4, r5, pc}
		if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET,
 80079d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079dc:	9300      	str	r3, [sp, #0]
 80079de:	4603      	mov	r3, r0
 80079e0:	2200      	movs	r2, #0
 80079e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80079e6:	4620      	mov	r0, r4
 80079e8:	f7ff fee7 	bl	80077ba <UART_WaitOnFlagUntilTimeout>
 80079ec:	2800      	cmp	r0, #0
 80079ee:	d0e3      	beq.n	80079b8 <UART_CheckIdleState+0x1c>
			return HAL_TIMEOUT;
 80079f0:	2003      	movs	r0, #3
 80079f2:	e7ef      	b.n	80079d4 <UART_CheckIdleState+0x38>
		if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,
 80079f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079f8:	9300      	str	r3, [sp, #0]
 80079fa:	462b      	mov	r3, r5
 80079fc:	2200      	movs	r2, #0
 80079fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007a02:	4620      	mov	r0, r4
 8007a04:	f7ff fed9 	bl	80077ba <UART_WaitOnFlagUntilTimeout>
 8007a08:	2800      	cmp	r0, #0
 8007a0a:	d0da      	beq.n	80079c2 <UART_CheckIdleState+0x26>
			return HAL_TIMEOUT;
 8007a0c:	2003      	movs	r0, #3
 8007a0e:	e7e1      	b.n	80079d4 <UART_CheckIdleState+0x38>

08007a10 <HAL_UART_Init>:
	if (huart == NULL) {
 8007a10:	b368      	cbz	r0, 8007a6e <HAL_UART_Init+0x5e>
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart) {
 8007a12:	b510      	push	{r4, lr}
 8007a14:	4604      	mov	r4, r0
	if (huart->gState == HAL_UART_STATE_RESET) {
 8007a16:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8007a18:	b303      	cbz	r3, 8007a5c <HAL_UART_Init+0x4c>
	huart->gState = HAL_UART_STATE_BUSY;
 8007a1a:	2324      	movs	r3, #36	; 0x24
 8007a1c:	67e3      	str	r3, [r4, #124]	; 0x7c
	__HAL_UART_DISABLE(huart);
 8007a1e:	6822      	ldr	r2, [r4, #0]
 8007a20:	6813      	ldr	r3, [r2, #0]
 8007a22:	f023 0301 	bic.w	r3, r3, #1
 8007a26:	6013      	str	r3, [r2, #0]
	if (UART_SetConfig(huart) == HAL_ERROR) {
 8007a28:	4620      	mov	r0, r4
 8007a2a:	f7ff fcc9 	bl	80073c0 <UART_SetConfig>
 8007a2e:	2801      	cmp	r0, #1
 8007a30:	d013      	beq.n	8007a5a <HAL_UART_Init+0x4a>
	if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT) {
 8007a32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a34:	b9bb      	cbnz	r3, 8007a66 <HAL_UART_Init+0x56>
	CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a36:	6822      	ldr	r2, [r4, #0]
 8007a38:	6853      	ldr	r3, [r2, #4]
 8007a3a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8007a3e:	6053      	str	r3, [r2, #4]
	CLEAR_BIT(huart->Instance->CR3,
 8007a40:	6822      	ldr	r2, [r4, #0]
 8007a42:	6893      	ldr	r3, [r2, #8]
 8007a44:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8007a48:	6093      	str	r3, [r2, #8]
	__HAL_UART_ENABLE(huart);
 8007a4a:	6822      	ldr	r2, [r4, #0]
 8007a4c:	6813      	ldr	r3, [r2, #0]
 8007a4e:	f043 0301 	orr.w	r3, r3, #1
 8007a52:	6013      	str	r3, [r2, #0]
	return (UART_CheckIdleState(huart));
 8007a54:	4620      	mov	r0, r4
 8007a56:	f7ff ffa1 	bl	800799c <UART_CheckIdleState>
}
 8007a5a:	bd10      	pop	{r4, pc}
		huart->Lock = HAL_UNLOCKED;
 8007a5c:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
		HAL_UART_MspInit(huart);
 8007a60:	f7fc f966 	bl	8003d30 <HAL_UART_MspInit>
 8007a64:	e7d9      	b.n	8007a1a <HAL_UART_Init+0xa>
		UART_AdvFeatureConfig(huart);
 8007a66:	4620      	mov	r0, r4
 8007a68:	f7ff fe42 	bl	80076f0 <UART_AdvFeatureConfig>
 8007a6c:	e7e3      	b.n	8007a36 <HAL_UART_Init+0x26>
		return HAL_ERROR;
 8007a6e:	2001      	movs	r0, #1
}
 8007a70:	4770      	bx	lr
	...

08007a74 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007a74:	b410      	push	{r4}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8007a76:	680b      	ldr	r3, [r1, #0]
 8007a78:	b9cb      	cbnz	r3, 8007aae <FMC_SDRAM_Init+0x3a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007a7a:	6803      	ldr	r3, [r0, #0]
 8007a7c:	4a19      	ldr	r2, [pc, #100]	; (8007ae4 <FMC_SDRAM_Init+0x70>)
 8007a7e:	401a      	ands	r2, r3
 8007a80:	684b      	ldr	r3, [r1, #4]
 8007a82:	688c      	ldr	r4, [r1, #8]
 8007a84:	4323      	orrs	r3, r4
 8007a86:	68cc      	ldr	r4, [r1, #12]
 8007a88:	4323      	orrs	r3, r4
 8007a8a:	690c      	ldr	r4, [r1, #16]
 8007a8c:	4323      	orrs	r3, r4
 8007a8e:	694c      	ldr	r4, [r1, #20]
 8007a90:	4323      	orrs	r3, r4
 8007a92:	698c      	ldr	r4, [r1, #24]
 8007a94:	4323      	orrs	r3, r4
 8007a96:	69cc      	ldr	r4, [r1, #28]
 8007a98:	4323      	orrs	r3, r4
 8007a9a:	6a0c      	ldr	r4, [r1, #32]
 8007a9c:	4323      	orrs	r3, r4
 8007a9e:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8007aa0:	430b      	orrs	r3, r1
 8007aa2:	431a      	orrs	r2, r3
 8007aa4:	6002      	str	r2, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8007aa6:	2000      	movs	r0, #0
 8007aa8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007aac:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007aae:	6803      	ldr	r3, [r0, #0]
 8007ab0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ab4:	69ca      	ldr	r2, [r1, #28]
 8007ab6:	6a0c      	ldr	r4, [r1, #32]
 8007ab8:	4322      	orrs	r2, r4
 8007aba:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8007abc:	4322      	orrs	r2, r4
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007ac2:	6843      	ldr	r3, [r0, #4]
 8007ac4:	4a07      	ldr	r2, [pc, #28]	; (8007ae4 <FMC_SDRAM_Init+0x70>)
 8007ac6:	401a      	ands	r2, r3
 8007ac8:	684b      	ldr	r3, [r1, #4]
 8007aca:	688c      	ldr	r4, [r1, #8]
 8007acc:	4323      	orrs	r3, r4
 8007ace:	68cc      	ldr	r4, [r1, #12]
 8007ad0:	4323      	orrs	r3, r4
 8007ad2:	690c      	ldr	r4, [r1, #16]
 8007ad4:	4323      	orrs	r3, r4
 8007ad6:	694c      	ldr	r4, [r1, #20]
 8007ad8:	4323      	orrs	r3, r4
 8007ada:	6989      	ldr	r1, [r1, #24]
 8007adc:	430b      	orrs	r3, r1
 8007ade:	431a      	orrs	r2, r3
 8007ae0:	6042      	str	r2, [r0, #4]
 8007ae2:	e7e0      	b.n	8007aa6 <FMC_SDRAM_Init+0x32>
 8007ae4:	ffff8000 	.word	0xffff8000

08007ae8 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007ae8:	b410      	push	{r4}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8007aea:	bb3a      	cbnz	r2, 8007b3c <FMC_SDRAM_Timing_Init+0x54>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007aec:	6882      	ldr	r2, [r0, #8]
 8007aee:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8007af2:	680b      	ldr	r3, [r1, #0]
 8007af4:	3b01      	subs	r3, #1
 8007af6:	684c      	ldr	r4, [r1, #4]
 8007af8:	f104 3cff 	add.w	ip, r4, #4294967295
 8007afc:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 8007b00:	688c      	ldr	r4, [r1, #8]
 8007b02:	f104 3cff 	add.w	ip, r4, #4294967295
 8007b06:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8007b0a:	68cc      	ldr	r4, [r1, #12]
 8007b0c:	f104 3cff 	add.w	ip, r4, #4294967295
 8007b10:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
 8007b14:	690c      	ldr	r4, [r1, #16]
 8007b16:	f104 3cff 	add.w	ip, r4, #4294967295
 8007b1a:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8007b1e:	694c      	ldr	r4, [r1, #20]
 8007b20:	f104 3cff 	add.w	ip, r4, #4294967295
 8007b24:	ea43 530c 	orr.w	r3, r3, ip, lsl #20
 8007b28:	6989      	ldr	r1, [r1, #24]
 8007b2a:	3901      	subs	r1, #1
 8007b2c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007b30:	4313      	orrs	r3, r2
 8007b32:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 8007b34:	2000      	movs	r0, #0
 8007b36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b3a:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007b3c:	6883      	ldr	r3, [r0, #8]
 8007b3e:	4a13      	ldr	r2, [pc, #76]	; (8007b8c <FMC_SDRAM_Timing_Init+0xa4>)
 8007b40:	401a      	ands	r2, r3
 8007b42:	68cb      	ldr	r3, [r1, #12]
 8007b44:	f103 3cff 	add.w	ip, r3, #4294967295
 8007b48:	694b      	ldr	r3, [r1, #20]
 8007b4a:	3b01      	subs	r3, #1
 8007b4c:	051b      	lsls	r3, r3, #20
 8007b4e:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
 8007b52:	431a      	orrs	r2, r3
 8007b54:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007b56:	68c2      	ldr	r2, [r0, #12]
 8007b58:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8007b5c:	680b      	ldr	r3, [r1, #0]
 8007b5e:	3b01      	subs	r3, #1
 8007b60:	684c      	ldr	r4, [r1, #4]
 8007b62:	f104 3cff 	add.w	ip, r4, #4294967295
 8007b66:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 8007b6a:	688c      	ldr	r4, [r1, #8]
 8007b6c:	f104 3cff 	add.w	ip, r4, #4294967295
 8007b70:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8007b74:	690c      	ldr	r4, [r1, #16]
 8007b76:	f104 3cff 	add.w	ip, r4, #4294967295
 8007b7a:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8007b7e:	6989      	ldr	r1, [r1, #24]
 8007b80:	3901      	subs	r1, #1
 8007b82:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007b86:	4313      	orrs	r3, r2
 8007b88:	60c3      	str	r3, [r0, #12]
 8007b8a:	e7d3      	b.n	8007b34 <FMC_SDRAM_Timing_Init+0x4c>
 8007b8c:	ff0f0fff 	.word	0xff0f0fff

08007b90 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007b90:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8007b92:	6903      	ldr	r3, [r0, #16]
 8007b94:	4a09      	ldr	r2, [pc, #36]	; (8007bbc <FMC_SDRAM_SendCommand+0x2c>)
 8007b96:	401a      	ands	r2, r3
 8007b98:	680b      	ldr	r3, [r1, #0]
 8007b9a:	684c      	ldr	r4, [r1, #4]
 8007b9c:	4323      	orrs	r3, r4
 8007b9e:	688c      	ldr	r4, [r1, #8]
 8007ba0:	f104 3cff 	add.w	ip, r4, #4294967295
 8007ba4:	ea43 134c 	orr.w	r3, r3, ip, lsl #5
 8007ba8:	68c9      	ldr	r1, [r1, #12]
 8007baa:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8007bae:	431a      	orrs	r2, r3
 8007bb0:	6102      	str	r2, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 8007bb2:	2000      	movs	r0, #0
 8007bb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bb8:	4770      	bx	lr
 8007bba:	bf00      	nop
 8007bbc:	ffc00000 	.word	0xffc00000

08007bc0 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8007bc0:	6942      	ldr	r2, [r0, #20]
 8007bc2:	4b03      	ldr	r3, [pc, #12]	; (8007bd0 <FMC_SDRAM_ProgramRefreshRate+0x10>)
 8007bc4:	4013      	ands	r3, r2
 8007bc6:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8007bca:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 8007bcc:	2000      	movs	r0, #0
 8007bce:	4770      	bx	lr
 8007bd0:	ffffc001 	.word	0xffffc001

08007bd4 <std>:
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	b510      	push	{r4, lr}
 8007bd8:	4604      	mov	r4, r0
 8007bda:	e9c0 3300 	strd	r3, r3, [r0]
 8007bde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007be2:	6083      	str	r3, [r0, #8]
 8007be4:	8181      	strh	r1, [r0, #12]
 8007be6:	6643      	str	r3, [r0, #100]	; 0x64
 8007be8:	81c2      	strh	r2, [r0, #14]
 8007bea:	6183      	str	r3, [r0, #24]
 8007bec:	4619      	mov	r1, r3
 8007bee:	2208      	movs	r2, #8
 8007bf0:	305c      	adds	r0, #92	; 0x5c
 8007bf2:	f000 f9bc 	bl	8007f6e <memset>
 8007bf6:	4b0d      	ldr	r3, [pc, #52]	; (8007c2c <std+0x58>)
 8007bf8:	6263      	str	r3, [r4, #36]	; 0x24
 8007bfa:	4b0d      	ldr	r3, [pc, #52]	; (8007c30 <std+0x5c>)
 8007bfc:	62a3      	str	r3, [r4, #40]	; 0x28
 8007bfe:	4b0d      	ldr	r3, [pc, #52]	; (8007c34 <std+0x60>)
 8007c00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c02:	4b0d      	ldr	r3, [pc, #52]	; (8007c38 <std+0x64>)
 8007c04:	6323      	str	r3, [r4, #48]	; 0x30
 8007c06:	4b0d      	ldr	r3, [pc, #52]	; (8007c3c <std+0x68>)
 8007c08:	6224      	str	r4, [r4, #32]
 8007c0a:	429c      	cmp	r4, r3
 8007c0c:	d006      	beq.n	8007c1c <std+0x48>
 8007c0e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007c12:	4294      	cmp	r4, r2
 8007c14:	d002      	beq.n	8007c1c <std+0x48>
 8007c16:	33d0      	adds	r3, #208	; 0xd0
 8007c18:	429c      	cmp	r4, r3
 8007c1a:	d105      	bne.n	8007c28 <std+0x54>
 8007c1c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c24:	f000 ba16 	b.w	8008054 <__retarget_lock_init_recursive>
 8007c28:	bd10      	pop	{r4, pc}
 8007c2a:	bf00      	nop
 8007c2c:	08007ee9 	.word	0x08007ee9
 8007c30:	08007f0b 	.word	0x08007f0b
 8007c34:	08007f43 	.word	0x08007f43
 8007c38:	08007f67 	.word	0x08007f67
 8007c3c:	200051c4 	.word	0x200051c4

08007c40 <stdio_exit_handler>:
 8007c40:	4a02      	ldr	r2, [pc, #8]	; (8007c4c <stdio_exit_handler+0xc>)
 8007c42:	4903      	ldr	r1, [pc, #12]	; (8007c50 <stdio_exit_handler+0x10>)
 8007c44:	4803      	ldr	r0, [pc, #12]	; (8007c54 <stdio_exit_handler+0x14>)
 8007c46:	f000 b869 	b.w	8007d1c <_fwalk_sglue>
 8007c4a:	bf00      	nop
 8007c4c:	200000b4 	.word	0x200000b4
 8007c50:	0800892d 	.word	0x0800892d
 8007c54:	200000c0 	.word	0x200000c0

08007c58 <cleanup_stdio>:
 8007c58:	6841      	ldr	r1, [r0, #4]
 8007c5a:	4b0c      	ldr	r3, [pc, #48]	; (8007c8c <cleanup_stdio+0x34>)
 8007c5c:	4299      	cmp	r1, r3
 8007c5e:	b510      	push	{r4, lr}
 8007c60:	4604      	mov	r4, r0
 8007c62:	d001      	beq.n	8007c68 <cleanup_stdio+0x10>
 8007c64:	f000 fe62 	bl	800892c <_fflush_r>
 8007c68:	68a1      	ldr	r1, [r4, #8]
 8007c6a:	4b09      	ldr	r3, [pc, #36]	; (8007c90 <cleanup_stdio+0x38>)
 8007c6c:	4299      	cmp	r1, r3
 8007c6e:	d002      	beq.n	8007c76 <cleanup_stdio+0x1e>
 8007c70:	4620      	mov	r0, r4
 8007c72:	f000 fe5b 	bl	800892c <_fflush_r>
 8007c76:	68e1      	ldr	r1, [r4, #12]
 8007c78:	4b06      	ldr	r3, [pc, #24]	; (8007c94 <cleanup_stdio+0x3c>)
 8007c7a:	4299      	cmp	r1, r3
 8007c7c:	d004      	beq.n	8007c88 <cleanup_stdio+0x30>
 8007c7e:	4620      	mov	r0, r4
 8007c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c84:	f000 be52 	b.w	800892c <_fflush_r>
 8007c88:	bd10      	pop	{r4, pc}
 8007c8a:	bf00      	nop
 8007c8c:	200051c4 	.word	0x200051c4
 8007c90:	2000522c 	.word	0x2000522c
 8007c94:	20005294 	.word	0x20005294

08007c98 <global_stdio_init.part.0>:
 8007c98:	b510      	push	{r4, lr}
 8007c9a:	4b0b      	ldr	r3, [pc, #44]	; (8007cc8 <global_stdio_init.part.0+0x30>)
 8007c9c:	4c0b      	ldr	r4, [pc, #44]	; (8007ccc <global_stdio_init.part.0+0x34>)
 8007c9e:	4a0c      	ldr	r2, [pc, #48]	; (8007cd0 <global_stdio_init.part.0+0x38>)
 8007ca0:	601a      	str	r2, [r3, #0]
 8007ca2:	4620      	mov	r0, r4
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	2104      	movs	r1, #4
 8007ca8:	f7ff ff94 	bl	8007bd4 <std>
 8007cac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	2109      	movs	r1, #9
 8007cb4:	f7ff ff8e 	bl	8007bd4 <std>
 8007cb8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007cbc:	2202      	movs	r2, #2
 8007cbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cc2:	2112      	movs	r1, #18
 8007cc4:	f7ff bf86 	b.w	8007bd4 <std>
 8007cc8:	200052fc 	.word	0x200052fc
 8007ccc:	200051c4 	.word	0x200051c4
 8007cd0:	08007c41 	.word	0x08007c41

08007cd4 <__sfp_lock_acquire>:
 8007cd4:	4801      	ldr	r0, [pc, #4]	; (8007cdc <__sfp_lock_acquire+0x8>)
 8007cd6:	f000 b9be 	b.w	8008056 <__retarget_lock_acquire_recursive>
 8007cda:	bf00      	nop
 8007cdc:	20005305 	.word	0x20005305

08007ce0 <__sfp_lock_release>:
 8007ce0:	4801      	ldr	r0, [pc, #4]	; (8007ce8 <__sfp_lock_release+0x8>)
 8007ce2:	f000 b9b9 	b.w	8008058 <__retarget_lock_release_recursive>
 8007ce6:	bf00      	nop
 8007ce8:	20005305 	.word	0x20005305

08007cec <__sinit>:
 8007cec:	b510      	push	{r4, lr}
 8007cee:	4604      	mov	r4, r0
 8007cf0:	f7ff fff0 	bl	8007cd4 <__sfp_lock_acquire>
 8007cf4:	6a23      	ldr	r3, [r4, #32]
 8007cf6:	b11b      	cbz	r3, 8007d00 <__sinit+0x14>
 8007cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cfc:	f7ff bff0 	b.w	8007ce0 <__sfp_lock_release>
 8007d00:	4b04      	ldr	r3, [pc, #16]	; (8007d14 <__sinit+0x28>)
 8007d02:	6223      	str	r3, [r4, #32]
 8007d04:	4b04      	ldr	r3, [pc, #16]	; (8007d18 <__sinit+0x2c>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d1f5      	bne.n	8007cf8 <__sinit+0xc>
 8007d0c:	f7ff ffc4 	bl	8007c98 <global_stdio_init.part.0>
 8007d10:	e7f2      	b.n	8007cf8 <__sinit+0xc>
 8007d12:	bf00      	nop
 8007d14:	08007c59 	.word	0x08007c59
 8007d18:	200052fc 	.word	0x200052fc

08007d1c <_fwalk_sglue>:
 8007d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d20:	4607      	mov	r7, r0
 8007d22:	4688      	mov	r8, r1
 8007d24:	4614      	mov	r4, r2
 8007d26:	2600      	movs	r6, #0
 8007d28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d2c:	f1b9 0901 	subs.w	r9, r9, #1
 8007d30:	d505      	bpl.n	8007d3e <_fwalk_sglue+0x22>
 8007d32:	6824      	ldr	r4, [r4, #0]
 8007d34:	2c00      	cmp	r4, #0
 8007d36:	d1f7      	bne.n	8007d28 <_fwalk_sglue+0xc>
 8007d38:	4630      	mov	r0, r6
 8007d3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d3e:	89ab      	ldrh	r3, [r5, #12]
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d907      	bls.n	8007d54 <_fwalk_sglue+0x38>
 8007d44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	d003      	beq.n	8007d54 <_fwalk_sglue+0x38>
 8007d4c:	4629      	mov	r1, r5
 8007d4e:	4638      	mov	r0, r7
 8007d50:	47c0      	blx	r8
 8007d52:	4306      	orrs	r6, r0
 8007d54:	3568      	adds	r5, #104	; 0x68
 8007d56:	e7e9      	b.n	8007d2c <_fwalk_sglue+0x10>

08007d58 <iprintf>:
 8007d58:	b40f      	push	{r0, r1, r2, r3}
 8007d5a:	b507      	push	{r0, r1, r2, lr}
 8007d5c:	4906      	ldr	r1, [pc, #24]	; (8007d78 <iprintf+0x20>)
 8007d5e:	ab04      	add	r3, sp, #16
 8007d60:	6808      	ldr	r0, [r1, #0]
 8007d62:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d66:	6881      	ldr	r1, [r0, #8]
 8007d68:	9301      	str	r3, [sp, #4]
 8007d6a:	f000 faaf 	bl	80082cc <_vfiprintf_r>
 8007d6e:	b003      	add	sp, #12
 8007d70:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d74:	b004      	add	sp, #16
 8007d76:	4770      	bx	lr
 8007d78:	2000010c 	.word	0x2000010c

08007d7c <setbuf>:
 8007d7c:	fab1 f281 	clz	r2, r1
 8007d80:	0952      	lsrs	r2, r2, #5
 8007d82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d86:	0052      	lsls	r2, r2, #1
 8007d88:	f000 b800 	b.w	8007d8c <setvbuf>

08007d8c <setvbuf>:
 8007d8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007d90:	461d      	mov	r5, r3
 8007d92:	4b54      	ldr	r3, [pc, #336]	; (8007ee4 <setvbuf+0x158>)
 8007d94:	681f      	ldr	r7, [r3, #0]
 8007d96:	4604      	mov	r4, r0
 8007d98:	460e      	mov	r6, r1
 8007d9a:	4690      	mov	r8, r2
 8007d9c:	b127      	cbz	r7, 8007da8 <setvbuf+0x1c>
 8007d9e:	6a3b      	ldr	r3, [r7, #32]
 8007da0:	b913      	cbnz	r3, 8007da8 <setvbuf+0x1c>
 8007da2:	4638      	mov	r0, r7
 8007da4:	f7ff ffa2 	bl	8007cec <__sinit>
 8007da8:	f1b8 0f02 	cmp.w	r8, #2
 8007dac:	d006      	beq.n	8007dbc <setvbuf+0x30>
 8007dae:	f1b8 0f01 	cmp.w	r8, #1
 8007db2:	f200 8094 	bhi.w	8007ede <setvbuf+0x152>
 8007db6:	2d00      	cmp	r5, #0
 8007db8:	f2c0 8091 	blt.w	8007ede <setvbuf+0x152>
 8007dbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007dbe:	07da      	lsls	r2, r3, #31
 8007dc0:	d405      	bmi.n	8007dce <setvbuf+0x42>
 8007dc2:	89a3      	ldrh	r3, [r4, #12]
 8007dc4:	059b      	lsls	r3, r3, #22
 8007dc6:	d402      	bmi.n	8007dce <setvbuf+0x42>
 8007dc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dca:	f000 f944 	bl	8008056 <__retarget_lock_acquire_recursive>
 8007dce:	4621      	mov	r1, r4
 8007dd0:	4638      	mov	r0, r7
 8007dd2:	f000 fdab 	bl	800892c <_fflush_r>
 8007dd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dd8:	b141      	cbz	r1, 8007dec <setvbuf+0x60>
 8007dda:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007dde:	4299      	cmp	r1, r3
 8007de0:	d002      	beq.n	8007de8 <setvbuf+0x5c>
 8007de2:	4638      	mov	r0, r7
 8007de4:	f000 f948 	bl	8008078 <_free_r>
 8007de8:	2300      	movs	r3, #0
 8007dea:	6363      	str	r3, [r4, #52]	; 0x34
 8007dec:	2300      	movs	r3, #0
 8007dee:	61a3      	str	r3, [r4, #24]
 8007df0:	6063      	str	r3, [r4, #4]
 8007df2:	89a3      	ldrh	r3, [r4, #12]
 8007df4:	0618      	lsls	r0, r3, #24
 8007df6:	d503      	bpl.n	8007e00 <setvbuf+0x74>
 8007df8:	6921      	ldr	r1, [r4, #16]
 8007dfa:	4638      	mov	r0, r7
 8007dfc:	f000 f93c 	bl	8008078 <_free_r>
 8007e00:	89a3      	ldrh	r3, [r4, #12]
 8007e02:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8007e06:	f023 0303 	bic.w	r3, r3, #3
 8007e0a:	f1b8 0f02 	cmp.w	r8, #2
 8007e0e:	81a3      	strh	r3, [r4, #12]
 8007e10:	d05f      	beq.n	8007ed2 <setvbuf+0x146>
 8007e12:	ab01      	add	r3, sp, #4
 8007e14:	466a      	mov	r2, sp
 8007e16:	4621      	mov	r1, r4
 8007e18:	4638      	mov	r0, r7
 8007e1a:	f000 fdaf 	bl	800897c <__swhatbuf_r>
 8007e1e:	89a3      	ldrh	r3, [r4, #12]
 8007e20:	4318      	orrs	r0, r3
 8007e22:	81a0      	strh	r0, [r4, #12]
 8007e24:	bb2d      	cbnz	r5, 8007e72 <setvbuf+0xe6>
 8007e26:	9d00      	ldr	r5, [sp, #0]
 8007e28:	4628      	mov	r0, r5
 8007e2a:	f000 f971 	bl	8008110 <malloc>
 8007e2e:	4606      	mov	r6, r0
 8007e30:	2800      	cmp	r0, #0
 8007e32:	d150      	bne.n	8007ed6 <setvbuf+0x14a>
 8007e34:	f8dd 9000 	ldr.w	r9, [sp]
 8007e38:	45a9      	cmp	r9, r5
 8007e3a:	d13e      	bne.n	8007eba <setvbuf+0x12e>
 8007e3c:	f04f 35ff 	mov.w	r5, #4294967295
 8007e40:	2200      	movs	r2, #0
 8007e42:	60a2      	str	r2, [r4, #8]
 8007e44:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8007e48:	6022      	str	r2, [r4, #0]
 8007e4a:	6122      	str	r2, [r4, #16]
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e52:	6162      	str	r2, [r4, #20]
 8007e54:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e56:	f043 0302 	orr.w	r3, r3, #2
 8007e5a:	07d1      	lsls	r1, r2, #31
 8007e5c:	81a3      	strh	r3, [r4, #12]
 8007e5e:	d404      	bmi.n	8007e6a <setvbuf+0xde>
 8007e60:	059b      	lsls	r3, r3, #22
 8007e62:	d402      	bmi.n	8007e6a <setvbuf+0xde>
 8007e64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e66:	f000 f8f7 	bl	8008058 <__retarget_lock_release_recursive>
 8007e6a:	4628      	mov	r0, r5
 8007e6c:	b003      	add	sp, #12
 8007e6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e72:	2e00      	cmp	r6, #0
 8007e74:	d0d8      	beq.n	8007e28 <setvbuf+0x9c>
 8007e76:	6a3b      	ldr	r3, [r7, #32]
 8007e78:	b913      	cbnz	r3, 8007e80 <setvbuf+0xf4>
 8007e7a:	4638      	mov	r0, r7
 8007e7c:	f7ff ff36 	bl	8007cec <__sinit>
 8007e80:	f1b8 0f01 	cmp.w	r8, #1
 8007e84:	bf08      	it	eq
 8007e86:	89a3      	ldrheq	r3, [r4, #12]
 8007e88:	6026      	str	r6, [r4, #0]
 8007e8a:	bf04      	itt	eq
 8007e8c:	f043 0301 	orreq.w	r3, r3, #1
 8007e90:	81a3      	strheq	r3, [r4, #12]
 8007e92:	89a3      	ldrh	r3, [r4, #12]
 8007e94:	f013 0208 	ands.w	r2, r3, #8
 8007e98:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8007e9c:	d01d      	beq.n	8007eda <setvbuf+0x14e>
 8007e9e:	07da      	lsls	r2, r3, #31
 8007ea0:	bf41      	itttt	mi
 8007ea2:	2200      	movmi	r2, #0
 8007ea4:	426d      	negmi	r5, r5
 8007ea6:	60a2      	strmi	r2, [r4, #8]
 8007ea8:	61a5      	strmi	r5, [r4, #24]
 8007eaa:	bf58      	it	pl
 8007eac:	60a5      	strpl	r5, [r4, #8]
 8007eae:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8007eb0:	f015 0501 	ands.w	r5, r5, #1
 8007eb4:	d0d4      	beq.n	8007e60 <setvbuf+0xd4>
 8007eb6:	2500      	movs	r5, #0
 8007eb8:	e7d7      	b.n	8007e6a <setvbuf+0xde>
 8007eba:	4648      	mov	r0, r9
 8007ebc:	f000 f928 	bl	8008110 <malloc>
 8007ec0:	4606      	mov	r6, r0
 8007ec2:	2800      	cmp	r0, #0
 8007ec4:	d0ba      	beq.n	8007e3c <setvbuf+0xb0>
 8007ec6:	89a3      	ldrh	r3, [r4, #12]
 8007ec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ecc:	81a3      	strh	r3, [r4, #12]
 8007ece:	464d      	mov	r5, r9
 8007ed0:	e7d1      	b.n	8007e76 <setvbuf+0xea>
 8007ed2:	2500      	movs	r5, #0
 8007ed4:	e7b4      	b.n	8007e40 <setvbuf+0xb4>
 8007ed6:	46a9      	mov	r9, r5
 8007ed8:	e7f5      	b.n	8007ec6 <setvbuf+0x13a>
 8007eda:	60a2      	str	r2, [r4, #8]
 8007edc:	e7e7      	b.n	8007eae <setvbuf+0x122>
 8007ede:	f04f 35ff 	mov.w	r5, #4294967295
 8007ee2:	e7c2      	b.n	8007e6a <setvbuf+0xde>
 8007ee4:	2000010c 	.word	0x2000010c

08007ee8 <__sread>:
 8007ee8:	b510      	push	{r4, lr}
 8007eea:	460c      	mov	r4, r1
 8007eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ef0:	f000 f868 	bl	8007fc4 <_read_r>
 8007ef4:	2800      	cmp	r0, #0
 8007ef6:	bfab      	itete	ge
 8007ef8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007efa:	89a3      	ldrhlt	r3, [r4, #12]
 8007efc:	181b      	addge	r3, r3, r0
 8007efe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007f02:	bfac      	ite	ge
 8007f04:	6563      	strge	r3, [r4, #84]	; 0x54
 8007f06:	81a3      	strhlt	r3, [r4, #12]
 8007f08:	bd10      	pop	{r4, pc}

08007f0a <__swrite>:
 8007f0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f0e:	461f      	mov	r7, r3
 8007f10:	898b      	ldrh	r3, [r1, #12]
 8007f12:	05db      	lsls	r3, r3, #23
 8007f14:	4605      	mov	r5, r0
 8007f16:	460c      	mov	r4, r1
 8007f18:	4616      	mov	r6, r2
 8007f1a:	d505      	bpl.n	8007f28 <__swrite+0x1e>
 8007f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f20:	2302      	movs	r3, #2
 8007f22:	2200      	movs	r2, #0
 8007f24:	f000 f83c 	bl	8007fa0 <_lseek_r>
 8007f28:	89a3      	ldrh	r3, [r4, #12]
 8007f2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f32:	81a3      	strh	r3, [r4, #12]
 8007f34:	4632      	mov	r2, r6
 8007f36:	463b      	mov	r3, r7
 8007f38:	4628      	mov	r0, r5
 8007f3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f3e:	f000 b853 	b.w	8007fe8 <_write_r>

08007f42 <__sseek>:
 8007f42:	b510      	push	{r4, lr}
 8007f44:	460c      	mov	r4, r1
 8007f46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f4a:	f000 f829 	bl	8007fa0 <_lseek_r>
 8007f4e:	1c43      	adds	r3, r0, #1
 8007f50:	89a3      	ldrh	r3, [r4, #12]
 8007f52:	bf15      	itete	ne
 8007f54:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f5e:	81a3      	strheq	r3, [r4, #12]
 8007f60:	bf18      	it	ne
 8007f62:	81a3      	strhne	r3, [r4, #12]
 8007f64:	bd10      	pop	{r4, pc}

08007f66 <__sclose>:
 8007f66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f6a:	f000 b809 	b.w	8007f80 <_close_r>

08007f6e <memset>:
 8007f6e:	4402      	add	r2, r0
 8007f70:	4603      	mov	r3, r0
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d100      	bne.n	8007f78 <memset+0xa>
 8007f76:	4770      	bx	lr
 8007f78:	f803 1b01 	strb.w	r1, [r3], #1
 8007f7c:	e7f9      	b.n	8007f72 <memset+0x4>
	...

08007f80 <_close_r>:
 8007f80:	b538      	push	{r3, r4, r5, lr}
 8007f82:	4d06      	ldr	r5, [pc, #24]	; (8007f9c <_close_r+0x1c>)
 8007f84:	2300      	movs	r3, #0
 8007f86:	4604      	mov	r4, r0
 8007f88:	4608      	mov	r0, r1
 8007f8a:	602b      	str	r3, [r5, #0]
 8007f8c:	f001 f814 	bl	8008fb8 <_close>
 8007f90:	1c43      	adds	r3, r0, #1
 8007f92:	d102      	bne.n	8007f9a <_close_r+0x1a>
 8007f94:	682b      	ldr	r3, [r5, #0]
 8007f96:	b103      	cbz	r3, 8007f9a <_close_r+0x1a>
 8007f98:	6023      	str	r3, [r4, #0]
 8007f9a:	bd38      	pop	{r3, r4, r5, pc}
 8007f9c:	20005300 	.word	0x20005300

08007fa0 <_lseek_r>:
 8007fa0:	b538      	push	{r3, r4, r5, lr}
 8007fa2:	4d07      	ldr	r5, [pc, #28]	; (8007fc0 <_lseek_r+0x20>)
 8007fa4:	4604      	mov	r4, r0
 8007fa6:	4608      	mov	r0, r1
 8007fa8:	4611      	mov	r1, r2
 8007faa:	2200      	movs	r2, #0
 8007fac:	602a      	str	r2, [r5, #0]
 8007fae:	461a      	mov	r2, r3
 8007fb0:	f7fb ff56 	bl	8003e60 <_lseek>
 8007fb4:	1c43      	adds	r3, r0, #1
 8007fb6:	d102      	bne.n	8007fbe <_lseek_r+0x1e>
 8007fb8:	682b      	ldr	r3, [r5, #0]
 8007fba:	b103      	cbz	r3, 8007fbe <_lseek_r+0x1e>
 8007fbc:	6023      	str	r3, [r4, #0]
 8007fbe:	bd38      	pop	{r3, r4, r5, pc}
 8007fc0:	20005300 	.word	0x20005300

08007fc4 <_read_r>:
 8007fc4:	b538      	push	{r3, r4, r5, lr}
 8007fc6:	4d07      	ldr	r5, [pc, #28]	; (8007fe4 <_read_r+0x20>)
 8007fc8:	4604      	mov	r4, r0
 8007fca:	4608      	mov	r0, r1
 8007fcc:	4611      	mov	r1, r2
 8007fce:	2200      	movs	r2, #0
 8007fd0:	602a      	str	r2, [r5, #0]
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	f7fb ff36 	bl	8003e44 <_read>
 8007fd8:	1c43      	adds	r3, r0, #1
 8007fda:	d102      	bne.n	8007fe2 <_read_r+0x1e>
 8007fdc:	682b      	ldr	r3, [r5, #0]
 8007fde:	b103      	cbz	r3, 8007fe2 <_read_r+0x1e>
 8007fe0:	6023      	str	r3, [r4, #0]
 8007fe2:	bd38      	pop	{r3, r4, r5, pc}
 8007fe4:	20005300 	.word	0x20005300

08007fe8 <_write_r>:
 8007fe8:	b538      	push	{r3, r4, r5, lr}
 8007fea:	4d07      	ldr	r5, [pc, #28]	; (8008008 <_write_r+0x20>)
 8007fec:	4604      	mov	r4, r0
 8007fee:	4608      	mov	r0, r1
 8007ff0:	4611      	mov	r1, r2
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	602a      	str	r2, [r5, #0]
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	f7fb ff1a 	bl	8003e30 <_write>
 8007ffc:	1c43      	adds	r3, r0, #1
 8007ffe:	d102      	bne.n	8008006 <_write_r+0x1e>
 8008000:	682b      	ldr	r3, [r5, #0]
 8008002:	b103      	cbz	r3, 8008006 <_write_r+0x1e>
 8008004:	6023      	str	r3, [r4, #0]
 8008006:	bd38      	pop	{r3, r4, r5, pc}
 8008008:	20005300 	.word	0x20005300

0800800c <__libc_init_array>:
 800800c:	b570      	push	{r4, r5, r6, lr}
 800800e:	4d0d      	ldr	r5, [pc, #52]	; (8008044 <__libc_init_array+0x38>)
 8008010:	4c0d      	ldr	r4, [pc, #52]	; (8008048 <__libc_init_array+0x3c>)
 8008012:	1b64      	subs	r4, r4, r5
 8008014:	10a4      	asrs	r4, r4, #2
 8008016:	2600      	movs	r6, #0
 8008018:	42a6      	cmp	r6, r4
 800801a:	d109      	bne.n	8008030 <__libc_init_array+0x24>
 800801c:	4d0b      	ldr	r5, [pc, #44]	; (800804c <__libc_init_array+0x40>)
 800801e:	4c0c      	ldr	r4, [pc, #48]	; (8008050 <__libc_init_array+0x44>)
 8008020:	f000 ffe0 	bl	8008fe4 <_init>
 8008024:	1b64      	subs	r4, r4, r5
 8008026:	10a4      	asrs	r4, r4, #2
 8008028:	2600      	movs	r6, #0
 800802a:	42a6      	cmp	r6, r4
 800802c:	d105      	bne.n	800803a <__libc_init_array+0x2e>
 800802e:	bd70      	pop	{r4, r5, r6, pc}
 8008030:	f855 3b04 	ldr.w	r3, [r5], #4
 8008034:	4798      	blx	r3
 8008036:	3601      	adds	r6, #1
 8008038:	e7ee      	b.n	8008018 <__libc_init_array+0xc>
 800803a:	f855 3b04 	ldr.w	r3, [r5], #4
 800803e:	4798      	blx	r3
 8008040:	3601      	adds	r6, #1
 8008042:	e7f2      	b.n	800802a <__libc_init_array+0x1e>
 8008044:	0800acf0 	.word	0x0800acf0
 8008048:	0800acf0 	.word	0x0800acf0
 800804c:	0800acf0 	.word	0x0800acf0
 8008050:	0800acf4 	.word	0x0800acf4

08008054 <__retarget_lock_init_recursive>:
 8008054:	4770      	bx	lr

08008056 <__retarget_lock_acquire_recursive>:
 8008056:	4770      	bx	lr

08008058 <__retarget_lock_release_recursive>:
 8008058:	4770      	bx	lr

0800805a <memcpy>:
 800805a:	440a      	add	r2, r1
 800805c:	4291      	cmp	r1, r2
 800805e:	f100 33ff 	add.w	r3, r0, #4294967295
 8008062:	d100      	bne.n	8008066 <memcpy+0xc>
 8008064:	4770      	bx	lr
 8008066:	b510      	push	{r4, lr}
 8008068:	f811 4b01 	ldrb.w	r4, [r1], #1
 800806c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008070:	4291      	cmp	r1, r2
 8008072:	d1f9      	bne.n	8008068 <memcpy+0xe>
 8008074:	bd10      	pop	{r4, pc}
	...

08008078 <_free_r>:
 8008078:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800807a:	2900      	cmp	r1, #0
 800807c:	d044      	beq.n	8008108 <_free_r+0x90>
 800807e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008082:	9001      	str	r0, [sp, #4]
 8008084:	2b00      	cmp	r3, #0
 8008086:	f1a1 0404 	sub.w	r4, r1, #4
 800808a:	bfb8      	it	lt
 800808c:	18e4      	addlt	r4, r4, r3
 800808e:	f000 f8e7 	bl	8008260 <__malloc_lock>
 8008092:	4a1e      	ldr	r2, [pc, #120]	; (800810c <_free_r+0x94>)
 8008094:	9801      	ldr	r0, [sp, #4]
 8008096:	6813      	ldr	r3, [r2, #0]
 8008098:	b933      	cbnz	r3, 80080a8 <_free_r+0x30>
 800809a:	6063      	str	r3, [r4, #4]
 800809c:	6014      	str	r4, [r2, #0]
 800809e:	b003      	add	sp, #12
 80080a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080a4:	f000 b8e2 	b.w	800826c <__malloc_unlock>
 80080a8:	42a3      	cmp	r3, r4
 80080aa:	d908      	bls.n	80080be <_free_r+0x46>
 80080ac:	6825      	ldr	r5, [r4, #0]
 80080ae:	1961      	adds	r1, r4, r5
 80080b0:	428b      	cmp	r3, r1
 80080b2:	bf01      	itttt	eq
 80080b4:	6819      	ldreq	r1, [r3, #0]
 80080b6:	685b      	ldreq	r3, [r3, #4]
 80080b8:	1949      	addeq	r1, r1, r5
 80080ba:	6021      	streq	r1, [r4, #0]
 80080bc:	e7ed      	b.n	800809a <_free_r+0x22>
 80080be:	461a      	mov	r2, r3
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	b10b      	cbz	r3, 80080c8 <_free_r+0x50>
 80080c4:	42a3      	cmp	r3, r4
 80080c6:	d9fa      	bls.n	80080be <_free_r+0x46>
 80080c8:	6811      	ldr	r1, [r2, #0]
 80080ca:	1855      	adds	r5, r2, r1
 80080cc:	42a5      	cmp	r5, r4
 80080ce:	d10b      	bne.n	80080e8 <_free_r+0x70>
 80080d0:	6824      	ldr	r4, [r4, #0]
 80080d2:	4421      	add	r1, r4
 80080d4:	1854      	adds	r4, r2, r1
 80080d6:	42a3      	cmp	r3, r4
 80080d8:	6011      	str	r1, [r2, #0]
 80080da:	d1e0      	bne.n	800809e <_free_r+0x26>
 80080dc:	681c      	ldr	r4, [r3, #0]
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	6053      	str	r3, [r2, #4]
 80080e2:	440c      	add	r4, r1
 80080e4:	6014      	str	r4, [r2, #0]
 80080e6:	e7da      	b.n	800809e <_free_r+0x26>
 80080e8:	d902      	bls.n	80080f0 <_free_r+0x78>
 80080ea:	230c      	movs	r3, #12
 80080ec:	6003      	str	r3, [r0, #0]
 80080ee:	e7d6      	b.n	800809e <_free_r+0x26>
 80080f0:	6825      	ldr	r5, [r4, #0]
 80080f2:	1961      	adds	r1, r4, r5
 80080f4:	428b      	cmp	r3, r1
 80080f6:	bf04      	itt	eq
 80080f8:	6819      	ldreq	r1, [r3, #0]
 80080fa:	685b      	ldreq	r3, [r3, #4]
 80080fc:	6063      	str	r3, [r4, #4]
 80080fe:	bf04      	itt	eq
 8008100:	1949      	addeq	r1, r1, r5
 8008102:	6021      	streq	r1, [r4, #0]
 8008104:	6054      	str	r4, [r2, #4]
 8008106:	e7ca      	b.n	800809e <_free_r+0x26>
 8008108:	b003      	add	sp, #12
 800810a:	bd30      	pop	{r4, r5, pc}
 800810c:	20005308 	.word	0x20005308

08008110 <malloc>:
 8008110:	4b02      	ldr	r3, [pc, #8]	; (800811c <malloc+0xc>)
 8008112:	4601      	mov	r1, r0
 8008114:	6818      	ldr	r0, [r3, #0]
 8008116:	f000 b823 	b.w	8008160 <_malloc_r>
 800811a:	bf00      	nop
 800811c:	2000010c 	.word	0x2000010c

08008120 <sbrk_aligned>:
 8008120:	b570      	push	{r4, r5, r6, lr}
 8008122:	4e0e      	ldr	r6, [pc, #56]	; (800815c <sbrk_aligned+0x3c>)
 8008124:	460c      	mov	r4, r1
 8008126:	6831      	ldr	r1, [r6, #0]
 8008128:	4605      	mov	r5, r0
 800812a:	b911      	cbnz	r1, 8008132 <sbrk_aligned+0x12>
 800812c:	f000 fd40 	bl	8008bb0 <_sbrk_r>
 8008130:	6030      	str	r0, [r6, #0]
 8008132:	4621      	mov	r1, r4
 8008134:	4628      	mov	r0, r5
 8008136:	f000 fd3b 	bl	8008bb0 <_sbrk_r>
 800813a:	1c43      	adds	r3, r0, #1
 800813c:	d00a      	beq.n	8008154 <sbrk_aligned+0x34>
 800813e:	1cc4      	adds	r4, r0, #3
 8008140:	f024 0403 	bic.w	r4, r4, #3
 8008144:	42a0      	cmp	r0, r4
 8008146:	d007      	beq.n	8008158 <sbrk_aligned+0x38>
 8008148:	1a21      	subs	r1, r4, r0
 800814a:	4628      	mov	r0, r5
 800814c:	f000 fd30 	bl	8008bb0 <_sbrk_r>
 8008150:	3001      	adds	r0, #1
 8008152:	d101      	bne.n	8008158 <sbrk_aligned+0x38>
 8008154:	f04f 34ff 	mov.w	r4, #4294967295
 8008158:	4620      	mov	r0, r4
 800815a:	bd70      	pop	{r4, r5, r6, pc}
 800815c:	2000530c 	.word	0x2000530c

08008160 <_malloc_r>:
 8008160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008164:	1ccd      	adds	r5, r1, #3
 8008166:	f025 0503 	bic.w	r5, r5, #3
 800816a:	3508      	adds	r5, #8
 800816c:	2d0c      	cmp	r5, #12
 800816e:	bf38      	it	cc
 8008170:	250c      	movcc	r5, #12
 8008172:	2d00      	cmp	r5, #0
 8008174:	4607      	mov	r7, r0
 8008176:	db01      	blt.n	800817c <_malloc_r+0x1c>
 8008178:	42a9      	cmp	r1, r5
 800817a:	d905      	bls.n	8008188 <_malloc_r+0x28>
 800817c:	230c      	movs	r3, #12
 800817e:	603b      	str	r3, [r7, #0]
 8008180:	2600      	movs	r6, #0
 8008182:	4630      	mov	r0, r6
 8008184:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008188:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800825c <_malloc_r+0xfc>
 800818c:	f000 f868 	bl	8008260 <__malloc_lock>
 8008190:	f8d8 3000 	ldr.w	r3, [r8]
 8008194:	461c      	mov	r4, r3
 8008196:	bb5c      	cbnz	r4, 80081f0 <_malloc_r+0x90>
 8008198:	4629      	mov	r1, r5
 800819a:	4638      	mov	r0, r7
 800819c:	f7ff ffc0 	bl	8008120 <sbrk_aligned>
 80081a0:	1c43      	adds	r3, r0, #1
 80081a2:	4604      	mov	r4, r0
 80081a4:	d155      	bne.n	8008252 <_malloc_r+0xf2>
 80081a6:	f8d8 4000 	ldr.w	r4, [r8]
 80081aa:	4626      	mov	r6, r4
 80081ac:	2e00      	cmp	r6, #0
 80081ae:	d145      	bne.n	800823c <_malloc_r+0xdc>
 80081b0:	2c00      	cmp	r4, #0
 80081b2:	d048      	beq.n	8008246 <_malloc_r+0xe6>
 80081b4:	6823      	ldr	r3, [r4, #0]
 80081b6:	4631      	mov	r1, r6
 80081b8:	4638      	mov	r0, r7
 80081ba:	eb04 0903 	add.w	r9, r4, r3
 80081be:	f000 fcf7 	bl	8008bb0 <_sbrk_r>
 80081c2:	4581      	cmp	r9, r0
 80081c4:	d13f      	bne.n	8008246 <_malloc_r+0xe6>
 80081c6:	6821      	ldr	r1, [r4, #0]
 80081c8:	1a6d      	subs	r5, r5, r1
 80081ca:	4629      	mov	r1, r5
 80081cc:	4638      	mov	r0, r7
 80081ce:	f7ff ffa7 	bl	8008120 <sbrk_aligned>
 80081d2:	3001      	adds	r0, #1
 80081d4:	d037      	beq.n	8008246 <_malloc_r+0xe6>
 80081d6:	6823      	ldr	r3, [r4, #0]
 80081d8:	442b      	add	r3, r5
 80081da:	6023      	str	r3, [r4, #0]
 80081dc:	f8d8 3000 	ldr.w	r3, [r8]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d038      	beq.n	8008256 <_malloc_r+0xf6>
 80081e4:	685a      	ldr	r2, [r3, #4]
 80081e6:	42a2      	cmp	r2, r4
 80081e8:	d12b      	bne.n	8008242 <_malloc_r+0xe2>
 80081ea:	2200      	movs	r2, #0
 80081ec:	605a      	str	r2, [r3, #4]
 80081ee:	e00f      	b.n	8008210 <_malloc_r+0xb0>
 80081f0:	6822      	ldr	r2, [r4, #0]
 80081f2:	1b52      	subs	r2, r2, r5
 80081f4:	d41f      	bmi.n	8008236 <_malloc_r+0xd6>
 80081f6:	2a0b      	cmp	r2, #11
 80081f8:	d917      	bls.n	800822a <_malloc_r+0xca>
 80081fa:	1961      	adds	r1, r4, r5
 80081fc:	42a3      	cmp	r3, r4
 80081fe:	6025      	str	r5, [r4, #0]
 8008200:	bf18      	it	ne
 8008202:	6059      	strne	r1, [r3, #4]
 8008204:	6863      	ldr	r3, [r4, #4]
 8008206:	bf08      	it	eq
 8008208:	f8c8 1000 	streq.w	r1, [r8]
 800820c:	5162      	str	r2, [r4, r5]
 800820e:	604b      	str	r3, [r1, #4]
 8008210:	4638      	mov	r0, r7
 8008212:	f104 060b 	add.w	r6, r4, #11
 8008216:	f000 f829 	bl	800826c <__malloc_unlock>
 800821a:	f026 0607 	bic.w	r6, r6, #7
 800821e:	1d23      	adds	r3, r4, #4
 8008220:	1af2      	subs	r2, r6, r3
 8008222:	d0ae      	beq.n	8008182 <_malloc_r+0x22>
 8008224:	1b9b      	subs	r3, r3, r6
 8008226:	50a3      	str	r3, [r4, r2]
 8008228:	e7ab      	b.n	8008182 <_malloc_r+0x22>
 800822a:	42a3      	cmp	r3, r4
 800822c:	6862      	ldr	r2, [r4, #4]
 800822e:	d1dd      	bne.n	80081ec <_malloc_r+0x8c>
 8008230:	f8c8 2000 	str.w	r2, [r8]
 8008234:	e7ec      	b.n	8008210 <_malloc_r+0xb0>
 8008236:	4623      	mov	r3, r4
 8008238:	6864      	ldr	r4, [r4, #4]
 800823a:	e7ac      	b.n	8008196 <_malloc_r+0x36>
 800823c:	4634      	mov	r4, r6
 800823e:	6876      	ldr	r6, [r6, #4]
 8008240:	e7b4      	b.n	80081ac <_malloc_r+0x4c>
 8008242:	4613      	mov	r3, r2
 8008244:	e7cc      	b.n	80081e0 <_malloc_r+0x80>
 8008246:	230c      	movs	r3, #12
 8008248:	603b      	str	r3, [r7, #0]
 800824a:	4638      	mov	r0, r7
 800824c:	f000 f80e 	bl	800826c <__malloc_unlock>
 8008250:	e797      	b.n	8008182 <_malloc_r+0x22>
 8008252:	6025      	str	r5, [r4, #0]
 8008254:	e7dc      	b.n	8008210 <_malloc_r+0xb0>
 8008256:	605b      	str	r3, [r3, #4]
 8008258:	deff      	udf	#255	; 0xff
 800825a:	bf00      	nop
 800825c:	20005308 	.word	0x20005308

08008260 <__malloc_lock>:
 8008260:	4801      	ldr	r0, [pc, #4]	; (8008268 <__malloc_lock+0x8>)
 8008262:	f7ff bef8 	b.w	8008056 <__retarget_lock_acquire_recursive>
 8008266:	bf00      	nop
 8008268:	20005304 	.word	0x20005304

0800826c <__malloc_unlock>:
 800826c:	4801      	ldr	r0, [pc, #4]	; (8008274 <__malloc_unlock+0x8>)
 800826e:	f7ff bef3 	b.w	8008058 <__retarget_lock_release_recursive>
 8008272:	bf00      	nop
 8008274:	20005304 	.word	0x20005304

08008278 <__sfputc_r>:
 8008278:	6893      	ldr	r3, [r2, #8]
 800827a:	3b01      	subs	r3, #1
 800827c:	2b00      	cmp	r3, #0
 800827e:	b410      	push	{r4}
 8008280:	6093      	str	r3, [r2, #8]
 8008282:	da08      	bge.n	8008296 <__sfputc_r+0x1e>
 8008284:	6994      	ldr	r4, [r2, #24]
 8008286:	42a3      	cmp	r3, r4
 8008288:	db01      	blt.n	800828e <__sfputc_r+0x16>
 800828a:	290a      	cmp	r1, #10
 800828c:	d103      	bne.n	8008296 <__sfputc_r+0x1e>
 800828e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008292:	f000 bbd5 	b.w	8008a40 <__swbuf_r>
 8008296:	6813      	ldr	r3, [r2, #0]
 8008298:	1c58      	adds	r0, r3, #1
 800829a:	6010      	str	r0, [r2, #0]
 800829c:	7019      	strb	r1, [r3, #0]
 800829e:	4608      	mov	r0, r1
 80082a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082a4:	4770      	bx	lr

080082a6 <__sfputs_r>:
 80082a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082a8:	4606      	mov	r6, r0
 80082aa:	460f      	mov	r7, r1
 80082ac:	4614      	mov	r4, r2
 80082ae:	18d5      	adds	r5, r2, r3
 80082b0:	42ac      	cmp	r4, r5
 80082b2:	d101      	bne.n	80082b8 <__sfputs_r+0x12>
 80082b4:	2000      	movs	r0, #0
 80082b6:	e007      	b.n	80082c8 <__sfputs_r+0x22>
 80082b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082bc:	463a      	mov	r2, r7
 80082be:	4630      	mov	r0, r6
 80082c0:	f7ff ffda 	bl	8008278 <__sfputc_r>
 80082c4:	1c43      	adds	r3, r0, #1
 80082c6:	d1f3      	bne.n	80082b0 <__sfputs_r+0xa>
 80082c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080082cc <_vfiprintf_r>:
 80082cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082d0:	460d      	mov	r5, r1
 80082d2:	b09d      	sub	sp, #116	; 0x74
 80082d4:	4614      	mov	r4, r2
 80082d6:	4698      	mov	r8, r3
 80082d8:	4606      	mov	r6, r0
 80082da:	b118      	cbz	r0, 80082e4 <_vfiprintf_r+0x18>
 80082dc:	6a03      	ldr	r3, [r0, #32]
 80082de:	b90b      	cbnz	r3, 80082e4 <_vfiprintf_r+0x18>
 80082e0:	f7ff fd04 	bl	8007cec <__sinit>
 80082e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082e6:	07d9      	lsls	r1, r3, #31
 80082e8:	d405      	bmi.n	80082f6 <_vfiprintf_r+0x2a>
 80082ea:	89ab      	ldrh	r3, [r5, #12]
 80082ec:	059a      	lsls	r2, r3, #22
 80082ee:	d402      	bmi.n	80082f6 <_vfiprintf_r+0x2a>
 80082f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082f2:	f7ff feb0 	bl	8008056 <__retarget_lock_acquire_recursive>
 80082f6:	89ab      	ldrh	r3, [r5, #12]
 80082f8:	071b      	lsls	r3, r3, #28
 80082fa:	d501      	bpl.n	8008300 <_vfiprintf_r+0x34>
 80082fc:	692b      	ldr	r3, [r5, #16]
 80082fe:	b99b      	cbnz	r3, 8008328 <_vfiprintf_r+0x5c>
 8008300:	4629      	mov	r1, r5
 8008302:	4630      	mov	r0, r6
 8008304:	f000 fbda 	bl	8008abc <__swsetup_r>
 8008308:	b170      	cbz	r0, 8008328 <_vfiprintf_r+0x5c>
 800830a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800830c:	07dc      	lsls	r4, r3, #31
 800830e:	d504      	bpl.n	800831a <_vfiprintf_r+0x4e>
 8008310:	f04f 30ff 	mov.w	r0, #4294967295
 8008314:	b01d      	add	sp, #116	; 0x74
 8008316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800831a:	89ab      	ldrh	r3, [r5, #12]
 800831c:	0598      	lsls	r0, r3, #22
 800831e:	d4f7      	bmi.n	8008310 <_vfiprintf_r+0x44>
 8008320:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008322:	f7ff fe99 	bl	8008058 <__retarget_lock_release_recursive>
 8008326:	e7f3      	b.n	8008310 <_vfiprintf_r+0x44>
 8008328:	2300      	movs	r3, #0
 800832a:	9309      	str	r3, [sp, #36]	; 0x24
 800832c:	2320      	movs	r3, #32
 800832e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008332:	f8cd 800c 	str.w	r8, [sp, #12]
 8008336:	2330      	movs	r3, #48	; 0x30
 8008338:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80084ec <_vfiprintf_r+0x220>
 800833c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008340:	f04f 0901 	mov.w	r9, #1
 8008344:	4623      	mov	r3, r4
 8008346:	469a      	mov	sl, r3
 8008348:	f813 2b01 	ldrb.w	r2, [r3], #1
 800834c:	b10a      	cbz	r2, 8008352 <_vfiprintf_r+0x86>
 800834e:	2a25      	cmp	r2, #37	; 0x25
 8008350:	d1f9      	bne.n	8008346 <_vfiprintf_r+0x7a>
 8008352:	ebba 0b04 	subs.w	fp, sl, r4
 8008356:	d00b      	beq.n	8008370 <_vfiprintf_r+0xa4>
 8008358:	465b      	mov	r3, fp
 800835a:	4622      	mov	r2, r4
 800835c:	4629      	mov	r1, r5
 800835e:	4630      	mov	r0, r6
 8008360:	f7ff ffa1 	bl	80082a6 <__sfputs_r>
 8008364:	3001      	adds	r0, #1
 8008366:	f000 80a9 	beq.w	80084bc <_vfiprintf_r+0x1f0>
 800836a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800836c:	445a      	add	r2, fp
 800836e:	9209      	str	r2, [sp, #36]	; 0x24
 8008370:	f89a 3000 	ldrb.w	r3, [sl]
 8008374:	2b00      	cmp	r3, #0
 8008376:	f000 80a1 	beq.w	80084bc <_vfiprintf_r+0x1f0>
 800837a:	2300      	movs	r3, #0
 800837c:	f04f 32ff 	mov.w	r2, #4294967295
 8008380:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008384:	f10a 0a01 	add.w	sl, sl, #1
 8008388:	9304      	str	r3, [sp, #16]
 800838a:	9307      	str	r3, [sp, #28]
 800838c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008390:	931a      	str	r3, [sp, #104]	; 0x68
 8008392:	4654      	mov	r4, sl
 8008394:	2205      	movs	r2, #5
 8008396:	f814 1b01 	ldrb.w	r1, [r4], #1
 800839a:	4854      	ldr	r0, [pc, #336]	; (80084ec <_vfiprintf_r+0x220>)
 800839c:	f7f7 ff50 	bl	8000240 <memchr>
 80083a0:	9a04      	ldr	r2, [sp, #16]
 80083a2:	b9d8      	cbnz	r0, 80083dc <_vfiprintf_r+0x110>
 80083a4:	06d1      	lsls	r1, r2, #27
 80083a6:	bf44      	itt	mi
 80083a8:	2320      	movmi	r3, #32
 80083aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083ae:	0713      	lsls	r3, r2, #28
 80083b0:	bf44      	itt	mi
 80083b2:	232b      	movmi	r3, #43	; 0x2b
 80083b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083b8:	f89a 3000 	ldrb.w	r3, [sl]
 80083bc:	2b2a      	cmp	r3, #42	; 0x2a
 80083be:	d015      	beq.n	80083ec <_vfiprintf_r+0x120>
 80083c0:	9a07      	ldr	r2, [sp, #28]
 80083c2:	4654      	mov	r4, sl
 80083c4:	2000      	movs	r0, #0
 80083c6:	f04f 0c0a 	mov.w	ip, #10
 80083ca:	4621      	mov	r1, r4
 80083cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083d0:	3b30      	subs	r3, #48	; 0x30
 80083d2:	2b09      	cmp	r3, #9
 80083d4:	d94d      	bls.n	8008472 <_vfiprintf_r+0x1a6>
 80083d6:	b1b0      	cbz	r0, 8008406 <_vfiprintf_r+0x13a>
 80083d8:	9207      	str	r2, [sp, #28]
 80083da:	e014      	b.n	8008406 <_vfiprintf_r+0x13a>
 80083dc:	eba0 0308 	sub.w	r3, r0, r8
 80083e0:	fa09 f303 	lsl.w	r3, r9, r3
 80083e4:	4313      	orrs	r3, r2
 80083e6:	9304      	str	r3, [sp, #16]
 80083e8:	46a2      	mov	sl, r4
 80083ea:	e7d2      	b.n	8008392 <_vfiprintf_r+0xc6>
 80083ec:	9b03      	ldr	r3, [sp, #12]
 80083ee:	1d19      	adds	r1, r3, #4
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	9103      	str	r1, [sp, #12]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	bfbb      	ittet	lt
 80083f8:	425b      	neglt	r3, r3
 80083fa:	f042 0202 	orrlt.w	r2, r2, #2
 80083fe:	9307      	strge	r3, [sp, #28]
 8008400:	9307      	strlt	r3, [sp, #28]
 8008402:	bfb8      	it	lt
 8008404:	9204      	strlt	r2, [sp, #16]
 8008406:	7823      	ldrb	r3, [r4, #0]
 8008408:	2b2e      	cmp	r3, #46	; 0x2e
 800840a:	d10c      	bne.n	8008426 <_vfiprintf_r+0x15a>
 800840c:	7863      	ldrb	r3, [r4, #1]
 800840e:	2b2a      	cmp	r3, #42	; 0x2a
 8008410:	d134      	bne.n	800847c <_vfiprintf_r+0x1b0>
 8008412:	9b03      	ldr	r3, [sp, #12]
 8008414:	1d1a      	adds	r2, r3, #4
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	9203      	str	r2, [sp, #12]
 800841a:	2b00      	cmp	r3, #0
 800841c:	bfb8      	it	lt
 800841e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008422:	3402      	adds	r4, #2
 8008424:	9305      	str	r3, [sp, #20]
 8008426:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80084fc <_vfiprintf_r+0x230>
 800842a:	7821      	ldrb	r1, [r4, #0]
 800842c:	2203      	movs	r2, #3
 800842e:	4650      	mov	r0, sl
 8008430:	f7f7 ff06 	bl	8000240 <memchr>
 8008434:	b138      	cbz	r0, 8008446 <_vfiprintf_r+0x17a>
 8008436:	9b04      	ldr	r3, [sp, #16]
 8008438:	eba0 000a 	sub.w	r0, r0, sl
 800843c:	2240      	movs	r2, #64	; 0x40
 800843e:	4082      	lsls	r2, r0
 8008440:	4313      	orrs	r3, r2
 8008442:	3401      	adds	r4, #1
 8008444:	9304      	str	r3, [sp, #16]
 8008446:	f814 1b01 	ldrb.w	r1, [r4], #1
 800844a:	4829      	ldr	r0, [pc, #164]	; (80084f0 <_vfiprintf_r+0x224>)
 800844c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008450:	2206      	movs	r2, #6
 8008452:	f7f7 fef5 	bl	8000240 <memchr>
 8008456:	2800      	cmp	r0, #0
 8008458:	d03f      	beq.n	80084da <_vfiprintf_r+0x20e>
 800845a:	4b26      	ldr	r3, [pc, #152]	; (80084f4 <_vfiprintf_r+0x228>)
 800845c:	bb1b      	cbnz	r3, 80084a6 <_vfiprintf_r+0x1da>
 800845e:	9b03      	ldr	r3, [sp, #12]
 8008460:	3307      	adds	r3, #7
 8008462:	f023 0307 	bic.w	r3, r3, #7
 8008466:	3308      	adds	r3, #8
 8008468:	9303      	str	r3, [sp, #12]
 800846a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800846c:	443b      	add	r3, r7
 800846e:	9309      	str	r3, [sp, #36]	; 0x24
 8008470:	e768      	b.n	8008344 <_vfiprintf_r+0x78>
 8008472:	fb0c 3202 	mla	r2, ip, r2, r3
 8008476:	460c      	mov	r4, r1
 8008478:	2001      	movs	r0, #1
 800847a:	e7a6      	b.n	80083ca <_vfiprintf_r+0xfe>
 800847c:	2300      	movs	r3, #0
 800847e:	3401      	adds	r4, #1
 8008480:	9305      	str	r3, [sp, #20]
 8008482:	4619      	mov	r1, r3
 8008484:	f04f 0c0a 	mov.w	ip, #10
 8008488:	4620      	mov	r0, r4
 800848a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800848e:	3a30      	subs	r2, #48	; 0x30
 8008490:	2a09      	cmp	r2, #9
 8008492:	d903      	bls.n	800849c <_vfiprintf_r+0x1d0>
 8008494:	2b00      	cmp	r3, #0
 8008496:	d0c6      	beq.n	8008426 <_vfiprintf_r+0x15a>
 8008498:	9105      	str	r1, [sp, #20]
 800849a:	e7c4      	b.n	8008426 <_vfiprintf_r+0x15a>
 800849c:	fb0c 2101 	mla	r1, ip, r1, r2
 80084a0:	4604      	mov	r4, r0
 80084a2:	2301      	movs	r3, #1
 80084a4:	e7f0      	b.n	8008488 <_vfiprintf_r+0x1bc>
 80084a6:	ab03      	add	r3, sp, #12
 80084a8:	9300      	str	r3, [sp, #0]
 80084aa:	462a      	mov	r2, r5
 80084ac:	4b12      	ldr	r3, [pc, #72]	; (80084f8 <_vfiprintf_r+0x22c>)
 80084ae:	a904      	add	r1, sp, #16
 80084b0:	4630      	mov	r0, r6
 80084b2:	f3af 8000 	nop.w
 80084b6:	4607      	mov	r7, r0
 80084b8:	1c78      	adds	r0, r7, #1
 80084ba:	d1d6      	bne.n	800846a <_vfiprintf_r+0x19e>
 80084bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084be:	07d9      	lsls	r1, r3, #31
 80084c0:	d405      	bmi.n	80084ce <_vfiprintf_r+0x202>
 80084c2:	89ab      	ldrh	r3, [r5, #12]
 80084c4:	059a      	lsls	r2, r3, #22
 80084c6:	d402      	bmi.n	80084ce <_vfiprintf_r+0x202>
 80084c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084ca:	f7ff fdc5 	bl	8008058 <__retarget_lock_release_recursive>
 80084ce:	89ab      	ldrh	r3, [r5, #12]
 80084d0:	065b      	lsls	r3, r3, #25
 80084d2:	f53f af1d 	bmi.w	8008310 <_vfiprintf_r+0x44>
 80084d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084d8:	e71c      	b.n	8008314 <_vfiprintf_r+0x48>
 80084da:	ab03      	add	r3, sp, #12
 80084dc:	9300      	str	r3, [sp, #0]
 80084de:	462a      	mov	r2, r5
 80084e0:	4b05      	ldr	r3, [pc, #20]	; (80084f8 <_vfiprintf_r+0x22c>)
 80084e2:	a904      	add	r1, sp, #16
 80084e4:	4630      	mov	r0, r6
 80084e6:	f000 f879 	bl	80085dc <_printf_i>
 80084ea:	e7e4      	b.n	80084b6 <_vfiprintf_r+0x1ea>
 80084ec:	0800ac41 	.word	0x0800ac41
 80084f0:	0800ac4b 	.word	0x0800ac4b
 80084f4:	00000000 	.word	0x00000000
 80084f8:	080082a7 	.word	0x080082a7
 80084fc:	0800ac47 	.word	0x0800ac47

08008500 <_printf_common>:
 8008500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008504:	4616      	mov	r6, r2
 8008506:	4699      	mov	r9, r3
 8008508:	688a      	ldr	r2, [r1, #8]
 800850a:	690b      	ldr	r3, [r1, #16]
 800850c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008510:	4293      	cmp	r3, r2
 8008512:	bfb8      	it	lt
 8008514:	4613      	movlt	r3, r2
 8008516:	6033      	str	r3, [r6, #0]
 8008518:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800851c:	4607      	mov	r7, r0
 800851e:	460c      	mov	r4, r1
 8008520:	b10a      	cbz	r2, 8008526 <_printf_common+0x26>
 8008522:	3301      	adds	r3, #1
 8008524:	6033      	str	r3, [r6, #0]
 8008526:	6823      	ldr	r3, [r4, #0]
 8008528:	0699      	lsls	r1, r3, #26
 800852a:	bf42      	ittt	mi
 800852c:	6833      	ldrmi	r3, [r6, #0]
 800852e:	3302      	addmi	r3, #2
 8008530:	6033      	strmi	r3, [r6, #0]
 8008532:	6825      	ldr	r5, [r4, #0]
 8008534:	f015 0506 	ands.w	r5, r5, #6
 8008538:	d106      	bne.n	8008548 <_printf_common+0x48>
 800853a:	f104 0a19 	add.w	sl, r4, #25
 800853e:	68e3      	ldr	r3, [r4, #12]
 8008540:	6832      	ldr	r2, [r6, #0]
 8008542:	1a9b      	subs	r3, r3, r2
 8008544:	42ab      	cmp	r3, r5
 8008546:	dc26      	bgt.n	8008596 <_printf_common+0x96>
 8008548:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800854c:	1e13      	subs	r3, r2, #0
 800854e:	6822      	ldr	r2, [r4, #0]
 8008550:	bf18      	it	ne
 8008552:	2301      	movne	r3, #1
 8008554:	0692      	lsls	r2, r2, #26
 8008556:	d42b      	bmi.n	80085b0 <_printf_common+0xb0>
 8008558:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800855c:	4649      	mov	r1, r9
 800855e:	4638      	mov	r0, r7
 8008560:	47c0      	blx	r8
 8008562:	3001      	adds	r0, #1
 8008564:	d01e      	beq.n	80085a4 <_printf_common+0xa4>
 8008566:	6823      	ldr	r3, [r4, #0]
 8008568:	6922      	ldr	r2, [r4, #16]
 800856a:	f003 0306 	and.w	r3, r3, #6
 800856e:	2b04      	cmp	r3, #4
 8008570:	bf02      	ittt	eq
 8008572:	68e5      	ldreq	r5, [r4, #12]
 8008574:	6833      	ldreq	r3, [r6, #0]
 8008576:	1aed      	subeq	r5, r5, r3
 8008578:	68a3      	ldr	r3, [r4, #8]
 800857a:	bf0c      	ite	eq
 800857c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008580:	2500      	movne	r5, #0
 8008582:	4293      	cmp	r3, r2
 8008584:	bfc4      	itt	gt
 8008586:	1a9b      	subgt	r3, r3, r2
 8008588:	18ed      	addgt	r5, r5, r3
 800858a:	2600      	movs	r6, #0
 800858c:	341a      	adds	r4, #26
 800858e:	42b5      	cmp	r5, r6
 8008590:	d11a      	bne.n	80085c8 <_printf_common+0xc8>
 8008592:	2000      	movs	r0, #0
 8008594:	e008      	b.n	80085a8 <_printf_common+0xa8>
 8008596:	2301      	movs	r3, #1
 8008598:	4652      	mov	r2, sl
 800859a:	4649      	mov	r1, r9
 800859c:	4638      	mov	r0, r7
 800859e:	47c0      	blx	r8
 80085a0:	3001      	adds	r0, #1
 80085a2:	d103      	bne.n	80085ac <_printf_common+0xac>
 80085a4:	f04f 30ff 	mov.w	r0, #4294967295
 80085a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085ac:	3501      	adds	r5, #1
 80085ae:	e7c6      	b.n	800853e <_printf_common+0x3e>
 80085b0:	18e1      	adds	r1, r4, r3
 80085b2:	1c5a      	adds	r2, r3, #1
 80085b4:	2030      	movs	r0, #48	; 0x30
 80085b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80085ba:	4422      	add	r2, r4
 80085bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80085c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80085c4:	3302      	adds	r3, #2
 80085c6:	e7c7      	b.n	8008558 <_printf_common+0x58>
 80085c8:	2301      	movs	r3, #1
 80085ca:	4622      	mov	r2, r4
 80085cc:	4649      	mov	r1, r9
 80085ce:	4638      	mov	r0, r7
 80085d0:	47c0      	blx	r8
 80085d2:	3001      	adds	r0, #1
 80085d4:	d0e6      	beq.n	80085a4 <_printf_common+0xa4>
 80085d6:	3601      	adds	r6, #1
 80085d8:	e7d9      	b.n	800858e <_printf_common+0x8e>
	...

080085dc <_printf_i>:
 80085dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085e0:	7e0f      	ldrb	r7, [r1, #24]
 80085e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80085e4:	2f78      	cmp	r7, #120	; 0x78
 80085e6:	4691      	mov	r9, r2
 80085e8:	4680      	mov	r8, r0
 80085ea:	460c      	mov	r4, r1
 80085ec:	469a      	mov	sl, r3
 80085ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80085f2:	d807      	bhi.n	8008604 <_printf_i+0x28>
 80085f4:	2f62      	cmp	r7, #98	; 0x62
 80085f6:	d80a      	bhi.n	800860e <_printf_i+0x32>
 80085f8:	2f00      	cmp	r7, #0
 80085fa:	f000 80d4 	beq.w	80087a6 <_printf_i+0x1ca>
 80085fe:	2f58      	cmp	r7, #88	; 0x58
 8008600:	f000 80c0 	beq.w	8008784 <_printf_i+0x1a8>
 8008604:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008608:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800860c:	e03a      	b.n	8008684 <_printf_i+0xa8>
 800860e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008612:	2b15      	cmp	r3, #21
 8008614:	d8f6      	bhi.n	8008604 <_printf_i+0x28>
 8008616:	a101      	add	r1, pc, #4	; (adr r1, 800861c <_printf_i+0x40>)
 8008618:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800861c:	08008675 	.word	0x08008675
 8008620:	08008689 	.word	0x08008689
 8008624:	08008605 	.word	0x08008605
 8008628:	08008605 	.word	0x08008605
 800862c:	08008605 	.word	0x08008605
 8008630:	08008605 	.word	0x08008605
 8008634:	08008689 	.word	0x08008689
 8008638:	08008605 	.word	0x08008605
 800863c:	08008605 	.word	0x08008605
 8008640:	08008605 	.word	0x08008605
 8008644:	08008605 	.word	0x08008605
 8008648:	0800878d 	.word	0x0800878d
 800864c:	080086b5 	.word	0x080086b5
 8008650:	08008747 	.word	0x08008747
 8008654:	08008605 	.word	0x08008605
 8008658:	08008605 	.word	0x08008605
 800865c:	080087af 	.word	0x080087af
 8008660:	08008605 	.word	0x08008605
 8008664:	080086b5 	.word	0x080086b5
 8008668:	08008605 	.word	0x08008605
 800866c:	08008605 	.word	0x08008605
 8008670:	0800874f 	.word	0x0800874f
 8008674:	682b      	ldr	r3, [r5, #0]
 8008676:	1d1a      	adds	r2, r3, #4
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	602a      	str	r2, [r5, #0]
 800867c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008680:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008684:	2301      	movs	r3, #1
 8008686:	e09f      	b.n	80087c8 <_printf_i+0x1ec>
 8008688:	6820      	ldr	r0, [r4, #0]
 800868a:	682b      	ldr	r3, [r5, #0]
 800868c:	0607      	lsls	r7, r0, #24
 800868e:	f103 0104 	add.w	r1, r3, #4
 8008692:	6029      	str	r1, [r5, #0]
 8008694:	d501      	bpl.n	800869a <_printf_i+0xbe>
 8008696:	681e      	ldr	r6, [r3, #0]
 8008698:	e003      	b.n	80086a2 <_printf_i+0xc6>
 800869a:	0646      	lsls	r6, r0, #25
 800869c:	d5fb      	bpl.n	8008696 <_printf_i+0xba>
 800869e:	f9b3 6000 	ldrsh.w	r6, [r3]
 80086a2:	2e00      	cmp	r6, #0
 80086a4:	da03      	bge.n	80086ae <_printf_i+0xd2>
 80086a6:	232d      	movs	r3, #45	; 0x2d
 80086a8:	4276      	negs	r6, r6
 80086aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086ae:	485a      	ldr	r0, [pc, #360]	; (8008818 <_printf_i+0x23c>)
 80086b0:	230a      	movs	r3, #10
 80086b2:	e012      	b.n	80086da <_printf_i+0xfe>
 80086b4:	682b      	ldr	r3, [r5, #0]
 80086b6:	6820      	ldr	r0, [r4, #0]
 80086b8:	1d19      	adds	r1, r3, #4
 80086ba:	6029      	str	r1, [r5, #0]
 80086bc:	0605      	lsls	r5, r0, #24
 80086be:	d501      	bpl.n	80086c4 <_printf_i+0xe8>
 80086c0:	681e      	ldr	r6, [r3, #0]
 80086c2:	e002      	b.n	80086ca <_printf_i+0xee>
 80086c4:	0641      	lsls	r1, r0, #25
 80086c6:	d5fb      	bpl.n	80086c0 <_printf_i+0xe4>
 80086c8:	881e      	ldrh	r6, [r3, #0]
 80086ca:	4853      	ldr	r0, [pc, #332]	; (8008818 <_printf_i+0x23c>)
 80086cc:	2f6f      	cmp	r7, #111	; 0x6f
 80086ce:	bf0c      	ite	eq
 80086d0:	2308      	moveq	r3, #8
 80086d2:	230a      	movne	r3, #10
 80086d4:	2100      	movs	r1, #0
 80086d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80086da:	6865      	ldr	r5, [r4, #4]
 80086dc:	60a5      	str	r5, [r4, #8]
 80086de:	2d00      	cmp	r5, #0
 80086e0:	bfa2      	ittt	ge
 80086e2:	6821      	ldrge	r1, [r4, #0]
 80086e4:	f021 0104 	bicge.w	r1, r1, #4
 80086e8:	6021      	strge	r1, [r4, #0]
 80086ea:	b90e      	cbnz	r6, 80086f0 <_printf_i+0x114>
 80086ec:	2d00      	cmp	r5, #0
 80086ee:	d04b      	beq.n	8008788 <_printf_i+0x1ac>
 80086f0:	4615      	mov	r5, r2
 80086f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80086f6:	fb03 6711 	mls	r7, r3, r1, r6
 80086fa:	5dc7      	ldrb	r7, [r0, r7]
 80086fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008700:	4637      	mov	r7, r6
 8008702:	42bb      	cmp	r3, r7
 8008704:	460e      	mov	r6, r1
 8008706:	d9f4      	bls.n	80086f2 <_printf_i+0x116>
 8008708:	2b08      	cmp	r3, #8
 800870a:	d10b      	bne.n	8008724 <_printf_i+0x148>
 800870c:	6823      	ldr	r3, [r4, #0]
 800870e:	07de      	lsls	r6, r3, #31
 8008710:	d508      	bpl.n	8008724 <_printf_i+0x148>
 8008712:	6923      	ldr	r3, [r4, #16]
 8008714:	6861      	ldr	r1, [r4, #4]
 8008716:	4299      	cmp	r1, r3
 8008718:	bfde      	ittt	le
 800871a:	2330      	movle	r3, #48	; 0x30
 800871c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008720:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008724:	1b52      	subs	r2, r2, r5
 8008726:	6122      	str	r2, [r4, #16]
 8008728:	f8cd a000 	str.w	sl, [sp]
 800872c:	464b      	mov	r3, r9
 800872e:	aa03      	add	r2, sp, #12
 8008730:	4621      	mov	r1, r4
 8008732:	4640      	mov	r0, r8
 8008734:	f7ff fee4 	bl	8008500 <_printf_common>
 8008738:	3001      	adds	r0, #1
 800873a:	d14a      	bne.n	80087d2 <_printf_i+0x1f6>
 800873c:	f04f 30ff 	mov.w	r0, #4294967295
 8008740:	b004      	add	sp, #16
 8008742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008746:	6823      	ldr	r3, [r4, #0]
 8008748:	f043 0320 	orr.w	r3, r3, #32
 800874c:	6023      	str	r3, [r4, #0]
 800874e:	4833      	ldr	r0, [pc, #204]	; (800881c <_printf_i+0x240>)
 8008750:	2778      	movs	r7, #120	; 0x78
 8008752:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008756:	6823      	ldr	r3, [r4, #0]
 8008758:	6829      	ldr	r1, [r5, #0]
 800875a:	061f      	lsls	r7, r3, #24
 800875c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008760:	d402      	bmi.n	8008768 <_printf_i+0x18c>
 8008762:	065f      	lsls	r7, r3, #25
 8008764:	bf48      	it	mi
 8008766:	b2b6      	uxthmi	r6, r6
 8008768:	07df      	lsls	r7, r3, #31
 800876a:	bf48      	it	mi
 800876c:	f043 0320 	orrmi.w	r3, r3, #32
 8008770:	6029      	str	r1, [r5, #0]
 8008772:	bf48      	it	mi
 8008774:	6023      	strmi	r3, [r4, #0]
 8008776:	b91e      	cbnz	r6, 8008780 <_printf_i+0x1a4>
 8008778:	6823      	ldr	r3, [r4, #0]
 800877a:	f023 0320 	bic.w	r3, r3, #32
 800877e:	6023      	str	r3, [r4, #0]
 8008780:	2310      	movs	r3, #16
 8008782:	e7a7      	b.n	80086d4 <_printf_i+0xf8>
 8008784:	4824      	ldr	r0, [pc, #144]	; (8008818 <_printf_i+0x23c>)
 8008786:	e7e4      	b.n	8008752 <_printf_i+0x176>
 8008788:	4615      	mov	r5, r2
 800878a:	e7bd      	b.n	8008708 <_printf_i+0x12c>
 800878c:	682b      	ldr	r3, [r5, #0]
 800878e:	6826      	ldr	r6, [r4, #0]
 8008790:	6961      	ldr	r1, [r4, #20]
 8008792:	1d18      	adds	r0, r3, #4
 8008794:	6028      	str	r0, [r5, #0]
 8008796:	0635      	lsls	r5, r6, #24
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	d501      	bpl.n	80087a0 <_printf_i+0x1c4>
 800879c:	6019      	str	r1, [r3, #0]
 800879e:	e002      	b.n	80087a6 <_printf_i+0x1ca>
 80087a0:	0670      	lsls	r0, r6, #25
 80087a2:	d5fb      	bpl.n	800879c <_printf_i+0x1c0>
 80087a4:	8019      	strh	r1, [r3, #0]
 80087a6:	2300      	movs	r3, #0
 80087a8:	6123      	str	r3, [r4, #16]
 80087aa:	4615      	mov	r5, r2
 80087ac:	e7bc      	b.n	8008728 <_printf_i+0x14c>
 80087ae:	682b      	ldr	r3, [r5, #0]
 80087b0:	1d1a      	adds	r2, r3, #4
 80087b2:	602a      	str	r2, [r5, #0]
 80087b4:	681d      	ldr	r5, [r3, #0]
 80087b6:	6862      	ldr	r2, [r4, #4]
 80087b8:	2100      	movs	r1, #0
 80087ba:	4628      	mov	r0, r5
 80087bc:	f7f7 fd40 	bl	8000240 <memchr>
 80087c0:	b108      	cbz	r0, 80087c6 <_printf_i+0x1ea>
 80087c2:	1b40      	subs	r0, r0, r5
 80087c4:	6060      	str	r0, [r4, #4]
 80087c6:	6863      	ldr	r3, [r4, #4]
 80087c8:	6123      	str	r3, [r4, #16]
 80087ca:	2300      	movs	r3, #0
 80087cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087d0:	e7aa      	b.n	8008728 <_printf_i+0x14c>
 80087d2:	6923      	ldr	r3, [r4, #16]
 80087d4:	462a      	mov	r2, r5
 80087d6:	4649      	mov	r1, r9
 80087d8:	4640      	mov	r0, r8
 80087da:	47d0      	blx	sl
 80087dc:	3001      	adds	r0, #1
 80087de:	d0ad      	beq.n	800873c <_printf_i+0x160>
 80087e0:	6823      	ldr	r3, [r4, #0]
 80087e2:	079b      	lsls	r3, r3, #30
 80087e4:	d413      	bmi.n	800880e <_printf_i+0x232>
 80087e6:	68e0      	ldr	r0, [r4, #12]
 80087e8:	9b03      	ldr	r3, [sp, #12]
 80087ea:	4298      	cmp	r0, r3
 80087ec:	bfb8      	it	lt
 80087ee:	4618      	movlt	r0, r3
 80087f0:	e7a6      	b.n	8008740 <_printf_i+0x164>
 80087f2:	2301      	movs	r3, #1
 80087f4:	4632      	mov	r2, r6
 80087f6:	4649      	mov	r1, r9
 80087f8:	4640      	mov	r0, r8
 80087fa:	47d0      	blx	sl
 80087fc:	3001      	adds	r0, #1
 80087fe:	d09d      	beq.n	800873c <_printf_i+0x160>
 8008800:	3501      	adds	r5, #1
 8008802:	68e3      	ldr	r3, [r4, #12]
 8008804:	9903      	ldr	r1, [sp, #12]
 8008806:	1a5b      	subs	r3, r3, r1
 8008808:	42ab      	cmp	r3, r5
 800880a:	dcf2      	bgt.n	80087f2 <_printf_i+0x216>
 800880c:	e7eb      	b.n	80087e6 <_printf_i+0x20a>
 800880e:	2500      	movs	r5, #0
 8008810:	f104 0619 	add.w	r6, r4, #25
 8008814:	e7f5      	b.n	8008802 <_printf_i+0x226>
 8008816:	bf00      	nop
 8008818:	0800ac52 	.word	0x0800ac52
 800881c:	0800ac63 	.word	0x0800ac63

08008820 <__sflush_r>:
 8008820:	898a      	ldrh	r2, [r1, #12]
 8008822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008826:	4605      	mov	r5, r0
 8008828:	0710      	lsls	r0, r2, #28
 800882a:	460c      	mov	r4, r1
 800882c:	d458      	bmi.n	80088e0 <__sflush_r+0xc0>
 800882e:	684b      	ldr	r3, [r1, #4]
 8008830:	2b00      	cmp	r3, #0
 8008832:	dc05      	bgt.n	8008840 <__sflush_r+0x20>
 8008834:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008836:	2b00      	cmp	r3, #0
 8008838:	dc02      	bgt.n	8008840 <__sflush_r+0x20>
 800883a:	2000      	movs	r0, #0
 800883c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008840:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008842:	2e00      	cmp	r6, #0
 8008844:	d0f9      	beq.n	800883a <__sflush_r+0x1a>
 8008846:	2300      	movs	r3, #0
 8008848:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800884c:	682f      	ldr	r7, [r5, #0]
 800884e:	6a21      	ldr	r1, [r4, #32]
 8008850:	602b      	str	r3, [r5, #0]
 8008852:	d032      	beq.n	80088ba <__sflush_r+0x9a>
 8008854:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008856:	89a3      	ldrh	r3, [r4, #12]
 8008858:	075a      	lsls	r2, r3, #29
 800885a:	d505      	bpl.n	8008868 <__sflush_r+0x48>
 800885c:	6863      	ldr	r3, [r4, #4]
 800885e:	1ac0      	subs	r0, r0, r3
 8008860:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008862:	b10b      	cbz	r3, 8008868 <__sflush_r+0x48>
 8008864:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008866:	1ac0      	subs	r0, r0, r3
 8008868:	2300      	movs	r3, #0
 800886a:	4602      	mov	r2, r0
 800886c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800886e:	6a21      	ldr	r1, [r4, #32]
 8008870:	4628      	mov	r0, r5
 8008872:	47b0      	blx	r6
 8008874:	1c43      	adds	r3, r0, #1
 8008876:	89a3      	ldrh	r3, [r4, #12]
 8008878:	d106      	bne.n	8008888 <__sflush_r+0x68>
 800887a:	6829      	ldr	r1, [r5, #0]
 800887c:	291d      	cmp	r1, #29
 800887e:	d82b      	bhi.n	80088d8 <__sflush_r+0xb8>
 8008880:	4a29      	ldr	r2, [pc, #164]	; (8008928 <__sflush_r+0x108>)
 8008882:	410a      	asrs	r2, r1
 8008884:	07d6      	lsls	r6, r2, #31
 8008886:	d427      	bmi.n	80088d8 <__sflush_r+0xb8>
 8008888:	2200      	movs	r2, #0
 800888a:	6062      	str	r2, [r4, #4]
 800888c:	04d9      	lsls	r1, r3, #19
 800888e:	6922      	ldr	r2, [r4, #16]
 8008890:	6022      	str	r2, [r4, #0]
 8008892:	d504      	bpl.n	800889e <__sflush_r+0x7e>
 8008894:	1c42      	adds	r2, r0, #1
 8008896:	d101      	bne.n	800889c <__sflush_r+0x7c>
 8008898:	682b      	ldr	r3, [r5, #0]
 800889a:	b903      	cbnz	r3, 800889e <__sflush_r+0x7e>
 800889c:	6560      	str	r0, [r4, #84]	; 0x54
 800889e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088a0:	602f      	str	r7, [r5, #0]
 80088a2:	2900      	cmp	r1, #0
 80088a4:	d0c9      	beq.n	800883a <__sflush_r+0x1a>
 80088a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088aa:	4299      	cmp	r1, r3
 80088ac:	d002      	beq.n	80088b4 <__sflush_r+0x94>
 80088ae:	4628      	mov	r0, r5
 80088b0:	f7ff fbe2 	bl	8008078 <_free_r>
 80088b4:	2000      	movs	r0, #0
 80088b6:	6360      	str	r0, [r4, #52]	; 0x34
 80088b8:	e7c0      	b.n	800883c <__sflush_r+0x1c>
 80088ba:	2301      	movs	r3, #1
 80088bc:	4628      	mov	r0, r5
 80088be:	47b0      	blx	r6
 80088c0:	1c41      	adds	r1, r0, #1
 80088c2:	d1c8      	bne.n	8008856 <__sflush_r+0x36>
 80088c4:	682b      	ldr	r3, [r5, #0]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d0c5      	beq.n	8008856 <__sflush_r+0x36>
 80088ca:	2b1d      	cmp	r3, #29
 80088cc:	d001      	beq.n	80088d2 <__sflush_r+0xb2>
 80088ce:	2b16      	cmp	r3, #22
 80088d0:	d101      	bne.n	80088d6 <__sflush_r+0xb6>
 80088d2:	602f      	str	r7, [r5, #0]
 80088d4:	e7b1      	b.n	800883a <__sflush_r+0x1a>
 80088d6:	89a3      	ldrh	r3, [r4, #12]
 80088d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088dc:	81a3      	strh	r3, [r4, #12]
 80088de:	e7ad      	b.n	800883c <__sflush_r+0x1c>
 80088e0:	690f      	ldr	r7, [r1, #16]
 80088e2:	2f00      	cmp	r7, #0
 80088e4:	d0a9      	beq.n	800883a <__sflush_r+0x1a>
 80088e6:	0793      	lsls	r3, r2, #30
 80088e8:	680e      	ldr	r6, [r1, #0]
 80088ea:	bf08      	it	eq
 80088ec:	694b      	ldreq	r3, [r1, #20]
 80088ee:	600f      	str	r7, [r1, #0]
 80088f0:	bf18      	it	ne
 80088f2:	2300      	movne	r3, #0
 80088f4:	eba6 0807 	sub.w	r8, r6, r7
 80088f8:	608b      	str	r3, [r1, #8]
 80088fa:	f1b8 0f00 	cmp.w	r8, #0
 80088fe:	dd9c      	ble.n	800883a <__sflush_r+0x1a>
 8008900:	6a21      	ldr	r1, [r4, #32]
 8008902:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008904:	4643      	mov	r3, r8
 8008906:	463a      	mov	r2, r7
 8008908:	4628      	mov	r0, r5
 800890a:	47b0      	blx	r6
 800890c:	2800      	cmp	r0, #0
 800890e:	dc06      	bgt.n	800891e <__sflush_r+0xfe>
 8008910:	89a3      	ldrh	r3, [r4, #12]
 8008912:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008916:	81a3      	strh	r3, [r4, #12]
 8008918:	f04f 30ff 	mov.w	r0, #4294967295
 800891c:	e78e      	b.n	800883c <__sflush_r+0x1c>
 800891e:	4407      	add	r7, r0
 8008920:	eba8 0800 	sub.w	r8, r8, r0
 8008924:	e7e9      	b.n	80088fa <__sflush_r+0xda>
 8008926:	bf00      	nop
 8008928:	dfbffffe 	.word	0xdfbffffe

0800892c <_fflush_r>:
 800892c:	b538      	push	{r3, r4, r5, lr}
 800892e:	690b      	ldr	r3, [r1, #16]
 8008930:	4605      	mov	r5, r0
 8008932:	460c      	mov	r4, r1
 8008934:	b913      	cbnz	r3, 800893c <_fflush_r+0x10>
 8008936:	2500      	movs	r5, #0
 8008938:	4628      	mov	r0, r5
 800893a:	bd38      	pop	{r3, r4, r5, pc}
 800893c:	b118      	cbz	r0, 8008946 <_fflush_r+0x1a>
 800893e:	6a03      	ldr	r3, [r0, #32]
 8008940:	b90b      	cbnz	r3, 8008946 <_fflush_r+0x1a>
 8008942:	f7ff f9d3 	bl	8007cec <__sinit>
 8008946:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d0f3      	beq.n	8008936 <_fflush_r+0xa>
 800894e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008950:	07d0      	lsls	r0, r2, #31
 8008952:	d404      	bmi.n	800895e <_fflush_r+0x32>
 8008954:	0599      	lsls	r1, r3, #22
 8008956:	d402      	bmi.n	800895e <_fflush_r+0x32>
 8008958:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800895a:	f7ff fb7c 	bl	8008056 <__retarget_lock_acquire_recursive>
 800895e:	4628      	mov	r0, r5
 8008960:	4621      	mov	r1, r4
 8008962:	f7ff ff5d 	bl	8008820 <__sflush_r>
 8008966:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008968:	07da      	lsls	r2, r3, #31
 800896a:	4605      	mov	r5, r0
 800896c:	d4e4      	bmi.n	8008938 <_fflush_r+0xc>
 800896e:	89a3      	ldrh	r3, [r4, #12]
 8008970:	059b      	lsls	r3, r3, #22
 8008972:	d4e1      	bmi.n	8008938 <_fflush_r+0xc>
 8008974:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008976:	f7ff fb6f 	bl	8008058 <__retarget_lock_release_recursive>
 800897a:	e7dd      	b.n	8008938 <_fflush_r+0xc>

0800897c <__swhatbuf_r>:
 800897c:	b570      	push	{r4, r5, r6, lr}
 800897e:	460c      	mov	r4, r1
 8008980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008984:	2900      	cmp	r1, #0
 8008986:	b096      	sub	sp, #88	; 0x58
 8008988:	4615      	mov	r5, r2
 800898a:	461e      	mov	r6, r3
 800898c:	da0d      	bge.n	80089aa <__swhatbuf_r+0x2e>
 800898e:	89a3      	ldrh	r3, [r4, #12]
 8008990:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008994:	f04f 0100 	mov.w	r1, #0
 8008998:	bf0c      	ite	eq
 800899a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800899e:	2340      	movne	r3, #64	; 0x40
 80089a0:	2000      	movs	r0, #0
 80089a2:	6031      	str	r1, [r6, #0]
 80089a4:	602b      	str	r3, [r5, #0]
 80089a6:	b016      	add	sp, #88	; 0x58
 80089a8:	bd70      	pop	{r4, r5, r6, pc}
 80089aa:	466a      	mov	r2, sp
 80089ac:	f000 f8de 	bl	8008b6c <_fstat_r>
 80089b0:	2800      	cmp	r0, #0
 80089b2:	dbec      	blt.n	800898e <__swhatbuf_r+0x12>
 80089b4:	9901      	ldr	r1, [sp, #4]
 80089b6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80089ba:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80089be:	4259      	negs	r1, r3
 80089c0:	4159      	adcs	r1, r3
 80089c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089c6:	e7eb      	b.n	80089a0 <__swhatbuf_r+0x24>

080089c8 <__smakebuf_r>:
 80089c8:	898b      	ldrh	r3, [r1, #12]
 80089ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80089cc:	079d      	lsls	r5, r3, #30
 80089ce:	4606      	mov	r6, r0
 80089d0:	460c      	mov	r4, r1
 80089d2:	d507      	bpl.n	80089e4 <__smakebuf_r+0x1c>
 80089d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80089d8:	6023      	str	r3, [r4, #0]
 80089da:	6123      	str	r3, [r4, #16]
 80089dc:	2301      	movs	r3, #1
 80089de:	6163      	str	r3, [r4, #20]
 80089e0:	b002      	add	sp, #8
 80089e2:	bd70      	pop	{r4, r5, r6, pc}
 80089e4:	ab01      	add	r3, sp, #4
 80089e6:	466a      	mov	r2, sp
 80089e8:	f7ff ffc8 	bl	800897c <__swhatbuf_r>
 80089ec:	9900      	ldr	r1, [sp, #0]
 80089ee:	4605      	mov	r5, r0
 80089f0:	4630      	mov	r0, r6
 80089f2:	f7ff fbb5 	bl	8008160 <_malloc_r>
 80089f6:	b948      	cbnz	r0, 8008a0c <__smakebuf_r+0x44>
 80089f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089fc:	059a      	lsls	r2, r3, #22
 80089fe:	d4ef      	bmi.n	80089e0 <__smakebuf_r+0x18>
 8008a00:	f023 0303 	bic.w	r3, r3, #3
 8008a04:	f043 0302 	orr.w	r3, r3, #2
 8008a08:	81a3      	strh	r3, [r4, #12]
 8008a0a:	e7e3      	b.n	80089d4 <__smakebuf_r+0xc>
 8008a0c:	89a3      	ldrh	r3, [r4, #12]
 8008a0e:	6020      	str	r0, [r4, #0]
 8008a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a14:	81a3      	strh	r3, [r4, #12]
 8008a16:	9b00      	ldr	r3, [sp, #0]
 8008a18:	6163      	str	r3, [r4, #20]
 8008a1a:	9b01      	ldr	r3, [sp, #4]
 8008a1c:	6120      	str	r0, [r4, #16]
 8008a1e:	b15b      	cbz	r3, 8008a38 <__smakebuf_r+0x70>
 8008a20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a24:	4630      	mov	r0, r6
 8008a26:	f000 f8b3 	bl	8008b90 <_isatty_r>
 8008a2a:	b128      	cbz	r0, 8008a38 <__smakebuf_r+0x70>
 8008a2c:	89a3      	ldrh	r3, [r4, #12]
 8008a2e:	f023 0303 	bic.w	r3, r3, #3
 8008a32:	f043 0301 	orr.w	r3, r3, #1
 8008a36:	81a3      	strh	r3, [r4, #12]
 8008a38:	89a3      	ldrh	r3, [r4, #12]
 8008a3a:	431d      	orrs	r5, r3
 8008a3c:	81a5      	strh	r5, [r4, #12]
 8008a3e:	e7cf      	b.n	80089e0 <__smakebuf_r+0x18>

08008a40 <__swbuf_r>:
 8008a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a42:	460e      	mov	r6, r1
 8008a44:	4614      	mov	r4, r2
 8008a46:	4605      	mov	r5, r0
 8008a48:	b118      	cbz	r0, 8008a52 <__swbuf_r+0x12>
 8008a4a:	6a03      	ldr	r3, [r0, #32]
 8008a4c:	b90b      	cbnz	r3, 8008a52 <__swbuf_r+0x12>
 8008a4e:	f7ff f94d 	bl	8007cec <__sinit>
 8008a52:	69a3      	ldr	r3, [r4, #24]
 8008a54:	60a3      	str	r3, [r4, #8]
 8008a56:	89a3      	ldrh	r3, [r4, #12]
 8008a58:	071a      	lsls	r2, r3, #28
 8008a5a:	d525      	bpl.n	8008aa8 <__swbuf_r+0x68>
 8008a5c:	6923      	ldr	r3, [r4, #16]
 8008a5e:	b31b      	cbz	r3, 8008aa8 <__swbuf_r+0x68>
 8008a60:	6823      	ldr	r3, [r4, #0]
 8008a62:	6922      	ldr	r2, [r4, #16]
 8008a64:	1a98      	subs	r0, r3, r2
 8008a66:	6963      	ldr	r3, [r4, #20]
 8008a68:	b2f6      	uxtb	r6, r6
 8008a6a:	4283      	cmp	r3, r0
 8008a6c:	4637      	mov	r7, r6
 8008a6e:	dc04      	bgt.n	8008a7a <__swbuf_r+0x3a>
 8008a70:	4621      	mov	r1, r4
 8008a72:	4628      	mov	r0, r5
 8008a74:	f7ff ff5a 	bl	800892c <_fflush_r>
 8008a78:	b9e0      	cbnz	r0, 8008ab4 <__swbuf_r+0x74>
 8008a7a:	68a3      	ldr	r3, [r4, #8]
 8008a7c:	3b01      	subs	r3, #1
 8008a7e:	60a3      	str	r3, [r4, #8]
 8008a80:	6823      	ldr	r3, [r4, #0]
 8008a82:	1c5a      	adds	r2, r3, #1
 8008a84:	6022      	str	r2, [r4, #0]
 8008a86:	701e      	strb	r6, [r3, #0]
 8008a88:	6962      	ldr	r2, [r4, #20]
 8008a8a:	1c43      	adds	r3, r0, #1
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d004      	beq.n	8008a9a <__swbuf_r+0x5a>
 8008a90:	89a3      	ldrh	r3, [r4, #12]
 8008a92:	07db      	lsls	r3, r3, #31
 8008a94:	d506      	bpl.n	8008aa4 <__swbuf_r+0x64>
 8008a96:	2e0a      	cmp	r6, #10
 8008a98:	d104      	bne.n	8008aa4 <__swbuf_r+0x64>
 8008a9a:	4621      	mov	r1, r4
 8008a9c:	4628      	mov	r0, r5
 8008a9e:	f7ff ff45 	bl	800892c <_fflush_r>
 8008aa2:	b938      	cbnz	r0, 8008ab4 <__swbuf_r+0x74>
 8008aa4:	4638      	mov	r0, r7
 8008aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008aa8:	4621      	mov	r1, r4
 8008aaa:	4628      	mov	r0, r5
 8008aac:	f000 f806 	bl	8008abc <__swsetup_r>
 8008ab0:	2800      	cmp	r0, #0
 8008ab2:	d0d5      	beq.n	8008a60 <__swbuf_r+0x20>
 8008ab4:	f04f 37ff 	mov.w	r7, #4294967295
 8008ab8:	e7f4      	b.n	8008aa4 <__swbuf_r+0x64>
	...

08008abc <__swsetup_r>:
 8008abc:	b538      	push	{r3, r4, r5, lr}
 8008abe:	4b2a      	ldr	r3, [pc, #168]	; (8008b68 <__swsetup_r+0xac>)
 8008ac0:	4605      	mov	r5, r0
 8008ac2:	6818      	ldr	r0, [r3, #0]
 8008ac4:	460c      	mov	r4, r1
 8008ac6:	b118      	cbz	r0, 8008ad0 <__swsetup_r+0x14>
 8008ac8:	6a03      	ldr	r3, [r0, #32]
 8008aca:	b90b      	cbnz	r3, 8008ad0 <__swsetup_r+0x14>
 8008acc:	f7ff f90e 	bl	8007cec <__sinit>
 8008ad0:	89a3      	ldrh	r3, [r4, #12]
 8008ad2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ad6:	0718      	lsls	r0, r3, #28
 8008ad8:	d422      	bmi.n	8008b20 <__swsetup_r+0x64>
 8008ada:	06d9      	lsls	r1, r3, #27
 8008adc:	d407      	bmi.n	8008aee <__swsetup_r+0x32>
 8008ade:	2309      	movs	r3, #9
 8008ae0:	602b      	str	r3, [r5, #0]
 8008ae2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008ae6:	81a3      	strh	r3, [r4, #12]
 8008ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8008aec:	e034      	b.n	8008b58 <__swsetup_r+0x9c>
 8008aee:	0758      	lsls	r0, r3, #29
 8008af0:	d512      	bpl.n	8008b18 <__swsetup_r+0x5c>
 8008af2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008af4:	b141      	cbz	r1, 8008b08 <__swsetup_r+0x4c>
 8008af6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008afa:	4299      	cmp	r1, r3
 8008afc:	d002      	beq.n	8008b04 <__swsetup_r+0x48>
 8008afe:	4628      	mov	r0, r5
 8008b00:	f7ff faba 	bl	8008078 <_free_r>
 8008b04:	2300      	movs	r3, #0
 8008b06:	6363      	str	r3, [r4, #52]	; 0x34
 8008b08:	89a3      	ldrh	r3, [r4, #12]
 8008b0a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008b0e:	81a3      	strh	r3, [r4, #12]
 8008b10:	2300      	movs	r3, #0
 8008b12:	6063      	str	r3, [r4, #4]
 8008b14:	6923      	ldr	r3, [r4, #16]
 8008b16:	6023      	str	r3, [r4, #0]
 8008b18:	89a3      	ldrh	r3, [r4, #12]
 8008b1a:	f043 0308 	orr.w	r3, r3, #8
 8008b1e:	81a3      	strh	r3, [r4, #12]
 8008b20:	6923      	ldr	r3, [r4, #16]
 8008b22:	b94b      	cbnz	r3, 8008b38 <__swsetup_r+0x7c>
 8008b24:	89a3      	ldrh	r3, [r4, #12]
 8008b26:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008b2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b2e:	d003      	beq.n	8008b38 <__swsetup_r+0x7c>
 8008b30:	4621      	mov	r1, r4
 8008b32:	4628      	mov	r0, r5
 8008b34:	f7ff ff48 	bl	80089c8 <__smakebuf_r>
 8008b38:	89a0      	ldrh	r0, [r4, #12]
 8008b3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b3e:	f010 0301 	ands.w	r3, r0, #1
 8008b42:	d00a      	beq.n	8008b5a <__swsetup_r+0x9e>
 8008b44:	2300      	movs	r3, #0
 8008b46:	60a3      	str	r3, [r4, #8]
 8008b48:	6963      	ldr	r3, [r4, #20]
 8008b4a:	425b      	negs	r3, r3
 8008b4c:	61a3      	str	r3, [r4, #24]
 8008b4e:	6923      	ldr	r3, [r4, #16]
 8008b50:	b943      	cbnz	r3, 8008b64 <__swsetup_r+0xa8>
 8008b52:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008b56:	d1c4      	bne.n	8008ae2 <__swsetup_r+0x26>
 8008b58:	bd38      	pop	{r3, r4, r5, pc}
 8008b5a:	0781      	lsls	r1, r0, #30
 8008b5c:	bf58      	it	pl
 8008b5e:	6963      	ldrpl	r3, [r4, #20]
 8008b60:	60a3      	str	r3, [r4, #8]
 8008b62:	e7f4      	b.n	8008b4e <__swsetup_r+0x92>
 8008b64:	2000      	movs	r0, #0
 8008b66:	e7f7      	b.n	8008b58 <__swsetup_r+0x9c>
 8008b68:	2000010c 	.word	0x2000010c

08008b6c <_fstat_r>:
 8008b6c:	b538      	push	{r3, r4, r5, lr}
 8008b6e:	4d07      	ldr	r5, [pc, #28]	; (8008b8c <_fstat_r+0x20>)
 8008b70:	2300      	movs	r3, #0
 8008b72:	4604      	mov	r4, r0
 8008b74:	4608      	mov	r0, r1
 8008b76:	4611      	mov	r1, r2
 8008b78:	602b      	str	r3, [r5, #0]
 8008b7a:	f7fb f972 	bl	8003e62 <_fstat>
 8008b7e:	1c43      	adds	r3, r0, #1
 8008b80:	d102      	bne.n	8008b88 <_fstat_r+0x1c>
 8008b82:	682b      	ldr	r3, [r5, #0]
 8008b84:	b103      	cbz	r3, 8008b88 <_fstat_r+0x1c>
 8008b86:	6023      	str	r3, [r4, #0]
 8008b88:	bd38      	pop	{r3, r4, r5, pc}
 8008b8a:	bf00      	nop
 8008b8c:	20005300 	.word	0x20005300

08008b90 <_isatty_r>:
 8008b90:	b538      	push	{r3, r4, r5, lr}
 8008b92:	4d06      	ldr	r5, [pc, #24]	; (8008bac <_isatty_r+0x1c>)
 8008b94:	2300      	movs	r3, #0
 8008b96:	4604      	mov	r4, r0
 8008b98:	4608      	mov	r0, r1
 8008b9a:	602b      	str	r3, [r5, #0]
 8008b9c:	f7fb f962 	bl	8003e64 <_isatty>
 8008ba0:	1c43      	adds	r3, r0, #1
 8008ba2:	d102      	bne.n	8008baa <_isatty_r+0x1a>
 8008ba4:	682b      	ldr	r3, [r5, #0]
 8008ba6:	b103      	cbz	r3, 8008baa <_isatty_r+0x1a>
 8008ba8:	6023      	str	r3, [r4, #0]
 8008baa:	bd38      	pop	{r3, r4, r5, pc}
 8008bac:	20005300 	.word	0x20005300

08008bb0 <_sbrk_r>:
 8008bb0:	b538      	push	{r3, r4, r5, lr}
 8008bb2:	4d06      	ldr	r5, [pc, #24]	; (8008bcc <_sbrk_r+0x1c>)
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	4604      	mov	r4, r0
 8008bb8:	4608      	mov	r0, r1
 8008bba:	602b      	str	r3, [r5, #0]
 8008bbc:	f000 fa04 	bl	8008fc8 <_sbrk>
 8008bc0:	1c43      	adds	r3, r0, #1
 8008bc2:	d102      	bne.n	8008bca <_sbrk_r+0x1a>
 8008bc4:	682b      	ldr	r3, [r5, #0]
 8008bc6:	b103      	cbz	r3, 8008bca <_sbrk_r+0x1a>
 8008bc8:	6023      	str	r3, [r4, #0]
 8008bca:	bd38      	pop	{r3, r4, r5, pc}
 8008bcc:	20005300 	.word	0x20005300

08008bd0 <atan2>:
 8008bd0:	f000 b92a 	b.w	8008e28 <__ieee754_atan2>
 8008bd4:	0000      	movs	r0, r0
	...

08008bd8 <sqrt>:
 8008bd8:	b508      	push	{r3, lr}
 8008bda:	ed2d 8b04 	vpush	{d8-d9}
 8008bde:	eeb0 8b40 	vmov.f64	d8, d0
 8008be2:	f000 f91c 	bl	8008e1e <__ieee754_sqrt>
 8008be6:	eeb4 8b48 	vcmp.f64	d8, d8
 8008bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bee:	d60c      	bvs.n	8008c0a <sqrt+0x32>
 8008bf0:	ed9f 9b07 	vldr	d9, [pc, #28]	; 8008c10 <sqrt+0x38>
 8008bf4:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8008bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bfc:	d505      	bpl.n	8008c0a <sqrt+0x32>
 8008bfe:	f000 f9d5 	bl	8008fac <__errno>
 8008c02:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8008c06:	2321      	movs	r3, #33	; 0x21
 8008c08:	6003      	str	r3, [r0, #0]
 8008c0a:	ecbd 8b04 	vpop	{d8-d9}
 8008c0e:	bd08      	pop	{r3, pc}
	...

08008c18 <atan>:
 8008c18:	b538      	push	{r3, r4, r5, lr}
 8008c1a:	eeb0 7b40 	vmov.f64	d7, d0
 8008c1e:	ee17 5a90 	vmov	r5, s15
 8008c22:	4b73      	ldr	r3, [pc, #460]	; (8008df0 <atan+0x1d8>)
 8008c24:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8008c28:	429c      	cmp	r4, r3
 8008c2a:	dd13      	ble.n	8008c54 <atan+0x3c>
 8008c2c:	4b71      	ldr	r3, [pc, #452]	; (8008df4 <atan+0x1dc>)
 8008c2e:	429c      	cmp	r4, r3
 8008c30:	dc03      	bgt.n	8008c3a <atan+0x22>
 8008c32:	d107      	bne.n	8008c44 <atan+0x2c>
 8008c34:	ee10 3a10 	vmov	r3, s0
 8008c38:	b123      	cbz	r3, 8008c44 <atan+0x2c>
 8008c3a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8008c3e:	eeb0 0b47 	vmov.f64	d0, d7
 8008c42:	bd38      	pop	{r3, r4, r5, pc}
 8008c44:	ed9f 7b4e 	vldr	d7, [pc, #312]	; 8008d80 <atan+0x168>
 8008c48:	ed9f 6b4f 	vldr	d6, [pc, #316]	; 8008d88 <atan+0x170>
 8008c4c:	2d00      	cmp	r5, #0
 8008c4e:	fe37 7b06 	vselgt.f64	d7, d7, d6
 8008c52:	e7f4      	b.n	8008c3e <atan+0x26>
 8008c54:	4b68      	ldr	r3, [pc, #416]	; (8008df8 <atan+0x1e0>)
 8008c56:	429c      	cmp	r4, r3
 8008c58:	dc11      	bgt.n	8008c7e <atan+0x66>
 8008c5a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008c5e:	429c      	cmp	r4, r3
 8008c60:	dc0a      	bgt.n	8008c78 <atan+0x60>
 8008c62:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8008c66:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8008d90 <atan+0x178>
 8008c6a:	ee30 6b06 	vadd.f64	d6, d0, d6
 8008c6e:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8008c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c76:	dce2      	bgt.n	8008c3e <atan+0x26>
 8008c78:	f04f 33ff 	mov.w	r3, #4294967295
 8008c7c:	e013      	b.n	8008ca6 <atan+0x8e>
 8008c7e:	f000 f8c5 	bl	8008e0c <fabs>
 8008c82:	4b5e      	ldr	r3, [pc, #376]	; (8008dfc <atan+0x1e4>)
 8008c84:	429c      	cmp	r4, r3
 8008c86:	dc4f      	bgt.n	8008d28 <atan+0x110>
 8008c88:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8008c8c:	429c      	cmp	r4, r3
 8008c8e:	dc41      	bgt.n	8008d14 <atan+0xfc>
 8008c90:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8008c94:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 8008c98:	2300      	movs	r3, #0
 8008c9a:	eea0 5b07 	vfma.f64	d5, d0, d7
 8008c9e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8008ca2:	ee85 7b00 	vdiv.f64	d7, d5, d0
 8008ca6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8008d98 <atan+0x180>
 8008caa:	ee27 4b07 	vmul.f64	d4, d7, d7
 8008cae:	ee24 5b04 	vmul.f64	d5, d4, d4
 8008cb2:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8008da0 <atan+0x188>
 8008cb6:	eea5 3b06 	vfma.f64	d3, d5, d6
 8008cba:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8008da8 <atan+0x190>
 8008cbe:	eea3 6b05 	vfma.f64	d6, d3, d5
 8008cc2:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8008db0 <atan+0x198>
 8008cc6:	eea6 3b05 	vfma.f64	d3, d6, d5
 8008cca:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8008db8 <atan+0x1a0>
 8008cce:	eea3 6b05 	vfma.f64	d6, d3, d5
 8008cd2:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8008dc0 <atan+0x1a8>
 8008cd6:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8008dc8 <atan+0x1b0>
 8008cda:	eea6 3b05 	vfma.f64	d3, d6, d5
 8008cde:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8008dd0 <atan+0x1b8>
 8008ce2:	eea5 2b06 	vfma.f64	d2, d5, d6
 8008ce6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8008dd8 <atan+0x1c0>
 8008cea:	eea2 6b05 	vfma.f64	d6, d2, d5
 8008cee:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8008de0 <atan+0x1c8>
 8008cf2:	eea6 2b05 	vfma.f64	d2, d6, d5
 8008cf6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8008de8 <atan+0x1d0>
 8008cfa:	1c5a      	adds	r2, r3, #1
 8008cfc:	eea2 6b05 	vfma.f64	d6, d2, d5
 8008d00:	ee26 6b05 	vmul.f64	d6, d6, d5
 8008d04:	eea3 6b04 	vfma.f64	d6, d3, d4
 8008d08:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008d0c:	d121      	bne.n	8008d52 <atan+0x13a>
 8008d0e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008d12:	e794      	b.n	8008c3e <atan+0x26>
 8008d14:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8008d18:	2301      	movs	r3, #1
 8008d1a:	ee30 5b47 	vsub.f64	d5, d0, d7
 8008d1e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8008d22:	ee85 7b00 	vdiv.f64	d7, d5, d0
 8008d26:	e7be      	b.n	8008ca6 <atan+0x8e>
 8008d28:	4b35      	ldr	r3, [pc, #212]	; (8008e00 <atan+0x1e8>)
 8008d2a:	429c      	cmp	r4, r3
 8008d2c:	da0b      	bge.n	8008d46 <atan+0x12e>
 8008d2e:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8008d32:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8008d36:	ee30 5b47 	vsub.f64	d5, d0, d7
 8008d3a:	eea0 6b07 	vfma.f64	d6, d0, d7
 8008d3e:	2302      	movs	r3, #2
 8008d40:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8008d44:	e7af      	b.n	8008ca6 <atan+0x8e>
 8008d46:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8008d4a:	2303      	movs	r3, #3
 8008d4c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8008d50:	e7a9      	b.n	8008ca6 <atan+0x8e>
 8008d52:	4a2c      	ldr	r2, [pc, #176]	; (8008e04 <atan+0x1ec>)
 8008d54:	492c      	ldr	r1, [pc, #176]	; (8008e08 <atan+0x1f0>)
 8008d56:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8008d5a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8008d5e:	ed93 5b00 	vldr	d5, [r3]
 8008d62:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008d66:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008d6a:	ed92 7b00 	vldr	d7, [r2]
 8008d6e:	2d00      	cmp	r5, #0
 8008d70:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008d74:	bfb8      	it	lt
 8008d76:	eeb1 7b47 	vneglt.f64	d7, d7
 8008d7a:	e760      	b.n	8008c3e <atan+0x26>
 8008d7c:	f3af 8000 	nop.w
 8008d80:	54442d18 	.word	0x54442d18
 8008d84:	3ff921fb 	.word	0x3ff921fb
 8008d88:	54442d18 	.word	0x54442d18
 8008d8c:	bff921fb 	.word	0xbff921fb
 8008d90:	8800759c 	.word	0x8800759c
 8008d94:	7e37e43c 	.word	0x7e37e43c
 8008d98:	e322da11 	.word	0xe322da11
 8008d9c:	3f90ad3a 	.word	0x3f90ad3a
 8008da0:	24760deb 	.word	0x24760deb
 8008da4:	3fa97b4b 	.word	0x3fa97b4b
 8008da8:	a0d03d51 	.word	0xa0d03d51
 8008dac:	3fb10d66 	.word	0x3fb10d66
 8008db0:	c54c206e 	.word	0xc54c206e
 8008db4:	3fb745cd 	.word	0x3fb745cd
 8008db8:	920083ff 	.word	0x920083ff
 8008dbc:	3fc24924 	.word	0x3fc24924
 8008dc0:	5555550d 	.word	0x5555550d
 8008dc4:	3fd55555 	.word	0x3fd55555
 8008dc8:	52defd9a 	.word	0x52defd9a
 8008dcc:	bfadde2d 	.word	0xbfadde2d
 8008dd0:	2c6a6c2f 	.word	0x2c6a6c2f
 8008dd4:	bfa2b444 	.word	0xbfa2b444
 8008dd8:	af749a6d 	.word	0xaf749a6d
 8008ddc:	bfb3b0f2 	.word	0xbfb3b0f2
 8008de0:	fe231671 	.word	0xfe231671
 8008de4:	bfbc71c6 	.word	0xbfbc71c6
 8008de8:	9998ebc4 	.word	0x9998ebc4
 8008dec:	bfc99999 	.word	0xbfc99999
 8008df0:	440fffff 	.word	0x440fffff
 8008df4:	7ff00000 	.word	0x7ff00000
 8008df8:	3fdbffff 	.word	0x3fdbffff
 8008dfc:	3ff2ffff 	.word	0x3ff2ffff
 8008e00:	40038000 	.word	0x40038000
 8008e04:	0800ac78 	.word	0x0800ac78
 8008e08:	0800ac98 	.word	0x0800ac98

08008e0c <fabs>:
 8008e0c:	ec51 0b10 	vmov	r0, r1, d0
 8008e10:	ee10 2a10 	vmov	r2, s0
 8008e14:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008e18:	ec43 2b10 	vmov	d0, r2, r3
 8008e1c:	4770      	bx	lr

08008e1e <__ieee754_sqrt>:
 8008e1e:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8008e22:	4770      	bx	lr
 8008e24:	0000      	movs	r0, r0
	...

08008e28 <__ieee754_atan2>:
 8008e28:	ee11 1a10 	vmov	r1, s2
 8008e2c:	eeb0 7b40 	vmov.f64	d7, d0
 8008e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e32:	ee11 5a90 	vmov	r5, s3
 8008e36:	424b      	negs	r3, r1
 8008e38:	4f59      	ldr	r7, [pc, #356]	; (8008fa0 <__ieee754_atan2+0x178>)
 8008e3a:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8008e3e:	430b      	orrs	r3, r1
 8008e40:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008e44:	42bb      	cmp	r3, r7
 8008e46:	d80d      	bhi.n	8008e64 <__ieee754_atan2+0x3c>
 8008e48:	ee10 ca10 	vmov	ip, s0
 8008e4c:	ee17 6a90 	vmov	r6, s15
 8008e50:	f1cc 0000 	rsb	r0, ip, #0
 8008e54:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8008e58:	ea40 000c 	orr.w	r0, r0, ip
 8008e5c:	ea43 70d0 	orr.w	r0, r3, r0, lsr #31
 8008e60:	42b8      	cmp	r0, r7
 8008e62:	d904      	bls.n	8008e6e <__ieee754_atan2+0x46>
 8008e64:	ee37 7b01 	vadd.f64	d7, d7, d1
 8008e68:	eeb0 0b47 	vmov.f64	d0, d7
 8008e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e6e:	f105 4040 	add.w	r0, r5, #3221225472	; 0xc0000000
 8008e72:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008e76:	4308      	orrs	r0, r1
 8008e78:	d103      	bne.n	8008e82 <__ieee754_atan2+0x5a>
 8008e7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008e7e:	f7ff becb 	b.w	8008c18 <atan>
 8008e82:	17ac      	asrs	r4, r5, #30
 8008e84:	f004 0402 	and.w	r4, r4, #2
 8008e88:	ea53 0c0c 	orrs.w	ip, r3, ip
 8008e8c:	ea44 74d6 	orr.w	r4, r4, r6, lsr #31
 8008e90:	d107      	bne.n	8008ea2 <__ieee754_atan2+0x7a>
 8008e92:	2c02      	cmp	r4, #2
 8008e94:	d05c      	beq.n	8008f50 <__ieee754_atan2+0x128>
 8008e96:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8008f68 <__ieee754_atan2+0x140>
 8008e9a:	2c03      	cmp	r4, #3
 8008e9c:	fe06 7b00 	vseleq.f64	d7, d6, d0
 8008ea0:	e7e2      	b.n	8008e68 <__ieee754_atan2+0x40>
 8008ea2:	4311      	orrs	r1, r2
 8008ea4:	d107      	bne.n	8008eb6 <__ieee754_atan2+0x8e>
 8008ea6:	ed9f 7b32 	vldr	d7, [pc, #200]	; 8008f70 <__ieee754_atan2+0x148>
 8008eaa:	ed9f 6b33 	vldr	d6, [pc, #204]	; 8008f78 <__ieee754_atan2+0x150>
 8008eae:	2e00      	cmp	r6, #0
 8008eb0:	fe27 7b06 	vselge.f64	d7, d7, d6
 8008eb4:	e7d8      	b.n	8008e68 <__ieee754_atan2+0x40>
 8008eb6:	42ba      	cmp	r2, r7
 8008eb8:	d10f      	bne.n	8008eda <__ieee754_atan2+0xb2>
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	f104 34ff 	add.w	r4, r4, #4294967295
 8008ec0:	d107      	bne.n	8008ed2 <__ieee754_atan2+0xaa>
 8008ec2:	2c02      	cmp	r4, #2
 8008ec4:	d847      	bhi.n	8008f56 <__ieee754_atan2+0x12e>
 8008ec6:	4b37      	ldr	r3, [pc, #220]	; (8008fa4 <__ieee754_atan2+0x17c>)
 8008ec8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008ecc:	ed93 7b00 	vldr	d7, [r3]
 8008ed0:	e7ca      	b.n	8008e68 <__ieee754_atan2+0x40>
 8008ed2:	2c02      	cmp	r4, #2
 8008ed4:	d842      	bhi.n	8008f5c <__ieee754_atan2+0x134>
 8008ed6:	4b34      	ldr	r3, [pc, #208]	; (8008fa8 <__ieee754_atan2+0x180>)
 8008ed8:	e7f6      	b.n	8008ec8 <__ieee754_atan2+0xa0>
 8008eda:	42bb      	cmp	r3, r7
 8008edc:	d0e3      	beq.n	8008ea6 <__ieee754_atan2+0x7e>
 8008ede:	1a9b      	subs	r3, r3, r2
 8008ee0:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8008ee4:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008ee8:	da1a      	bge.n	8008f20 <__ieee754_atan2+0xf8>
 8008eea:	2d00      	cmp	r5, #0
 8008eec:	da01      	bge.n	8008ef2 <__ieee754_atan2+0xca>
 8008eee:	323c      	adds	r2, #60	; 0x3c
 8008ef0:	db19      	blt.n	8008f26 <__ieee754_atan2+0xfe>
 8008ef2:	ee87 0b01 	vdiv.f64	d0, d7, d1
 8008ef6:	f7ff ff89 	bl	8008e0c <fabs>
 8008efa:	f7ff fe8d 	bl	8008c18 <atan>
 8008efe:	eeb0 7b40 	vmov.f64	d7, d0
 8008f02:	2c01      	cmp	r4, #1
 8008f04:	d012      	beq.n	8008f2c <__ieee754_atan2+0x104>
 8008f06:	2c02      	cmp	r4, #2
 8008f08:	d019      	beq.n	8008f3e <__ieee754_atan2+0x116>
 8008f0a:	2c00      	cmp	r4, #0
 8008f0c:	d0ac      	beq.n	8008e68 <__ieee754_atan2+0x40>
 8008f0e:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8008f80 <__ieee754_atan2+0x158>
 8008f12:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008f16:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8008f88 <__ieee754_atan2+0x160>
 8008f1a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008f1e:	e7a3      	b.n	8008e68 <__ieee754_atan2+0x40>
 8008f20:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8008f70 <__ieee754_atan2+0x148>
 8008f24:	e7ed      	b.n	8008f02 <__ieee754_atan2+0xda>
 8008f26:	ed9f 7b1a 	vldr	d7, [pc, #104]	; 8008f90 <__ieee754_atan2+0x168>
 8008f2a:	e7ea      	b.n	8008f02 <__ieee754_atan2+0xda>
 8008f2c:	ee17 1a90 	vmov	r1, s15
 8008f30:	ec53 2b17 	vmov	r2, r3, d7
 8008f34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f38:	ec43 2b17 	vmov	d7, r2, r3
 8008f3c:	e794      	b.n	8008e68 <__ieee754_atan2+0x40>
 8008f3e:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8008f80 <__ieee754_atan2+0x158>
 8008f42:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008f46:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8008f88 <__ieee754_atan2+0x160>
 8008f4a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008f4e:	e78b      	b.n	8008e68 <__ieee754_atan2+0x40>
 8008f50:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8008f88 <__ieee754_atan2+0x160>
 8008f54:	e788      	b.n	8008e68 <__ieee754_atan2+0x40>
 8008f56:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8008f98 <__ieee754_atan2+0x170>
 8008f5a:	e785      	b.n	8008e68 <__ieee754_atan2+0x40>
 8008f5c:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8008f90 <__ieee754_atan2+0x168>
 8008f60:	e782      	b.n	8008e68 <__ieee754_atan2+0x40>
 8008f62:	bf00      	nop
 8008f64:	f3af 8000 	nop.w
 8008f68:	54442d18 	.word	0x54442d18
 8008f6c:	c00921fb 	.word	0xc00921fb
 8008f70:	54442d18 	.word	0x54442d18
 8008f74:	3ff921fb 	.word	0x3ff921fb
 8008f78:	54442d18 	.word	0x54442d18
 8008f7c:	bff921fb 	.word	0xbff921fb
 8008f80:	33145c07 	.word	0x33145c07
 8008f84:	3ca1a626 	.word	0x3ca1a626
 8008f88:	54442d18 	.word	0x54442d18
 8008f8c:	400921fb 	.word	0x400921fb
	...
 8008f98:	54442d18 	.word	0x54442d18
 8008f9c:	3fe921fb 	.word	0x3fe921fb
 8008fa0:	7ff00000 	.word	0x7ff00000
 8008fa4:	0800acb8 	.word	0x0800acb8
 8008fa8:	0800acd0 	.word	0x0800acd0

08008fac <__errno>:
 8008fac:	4b01      	ldr	r3, [pc, #4]	; (8008fb4 <__errno+0x8>)
 8008fae:	6818      	ldr	r0, [r3, #0]
 8008fb0:	4770      	bx	lr
 8008fb2:	bf00      	nop
 8008fb4:	2000010c 	.word	0x2000010c

08008fb8 <_close>:
 8008fb8:	4b02      	ldr	r3, [pc, #8]	; (8008fc4 <_close+0xc>)
 8008fba:	2258      	movs	r2, #88	; 0x58
 8008fbc:	601a      	str	r2, [r3, #0]
 8008fbe:	f04f 30ff 	mov.w	r0, #4294967295
 8008fc2:	4770      	bx	lr
 8008fc4:	20005300 	.word	0x20005300

08008fc8 <_sbrk>:
 8008fc8:	4a04      	ldr	r2, [pc, #16]	; (8008fdc <_sbrk+0x14>)
 8008fca:	6811      	ldr	r1, [r2, #0]
 8008fcc:	4603      	mov	r3, r0
 8008fce:	b909      	cbnz	r1, 8008fd4 <_sbrk+0xc>
 8008fd0:	4903      	ldr	r1, [pc, #12]	; (8008fe0 <_sbrk+0x18>)
 8008fd2:	6011      	str	r1, [r2, #0]
 8008fd4:	6810      	ldr	r0, [r2, #0]
 8008fd6:	4403      	add	r3, r0
 8008fd8:	6013      	str	r3, [r2, #0]
 8008fda:	4770      	bx	lr
 8008fdc:	20005310 	.word	0x20005310
 8008fe0:	20005318 	.word	0x20005318

08008fe4 <_init>:
 8008fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fe6:	bf00      	nop
 8008fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fea:	bc08      	pop	{r3}
 8008fec:	469e      	mov	lr, r3
 8008fee:	4770      	bx	lr

08008ff0 <_fini>:
 8008ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ff2:	bf00      	nop
 8008ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ff6:	bc08      	pop	{r3}
 8008ff8:	469e      	mov	lr, r3
 8008ffa:	4770      	bx	lr
