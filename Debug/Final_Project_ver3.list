
Final_Project_ver3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064a4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  080066a4  080066a4  000166a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006860  08006860  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08006860  08006860  00016860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006868  08006868  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006868  08006868  00016868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800686c  0800686c  0001686c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08006870  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bbc  2000006c  080068dc  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20004c28  080068dc  00024c28  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002280e  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003cb9  00000000  00000000  000428eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000f9ce  00000000  00000000  000465a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001500  00000000  00000000  00055f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001137  00000000  00000000  00057478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000460a  00000000  00000000  000585af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00022c41  00000000  00000000  0005cbb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00130cd9  00000000  00000000  0007f7fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004398  00000000  00000000  001b04d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  001b486c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000006c 	.word	0x2000006c
 800021c:	00000000 	.word	0x00000000
 8000220:	0800668c 	.word	0x0800668c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000070 	.word	0x20000070
 800023c:	0800668c 	.word	0x0800668c

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b970 	b.w	8000538 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	460d      	mov	r5, r1
 8000278:	4604      	mov	r4, r0
 800027a:	460f      	mov	r7, r1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d14a      	bne.n	8000316 <__udivmoddi4+0xa6>
 8000280:	428a      	cmp	r2, r1
 8000282:	4694      	mov	ip, r2
 8000284:	d965      	bls.n	8000352 <__udivmoddi4+0xe2>
 8000286:	fab2 f382 	clz	r3, r2
 800028a:	b143      	cbz	r3, 800029e <__udivmoddi4+0x2e>
 800028c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000290:	f1c3 0220 	rsb	r2, r3, #32
 8000294:	409f      	lsls	r7, r3
 8000296:	fa20 f202 	lsr.w	r2, r0, r2
 800029a:	4317      	orrs	r7, r2
 800029c:	409c      	lsls	r4, r3
 800029e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002a2:	fa1f f58c 	uxth.w	r5, ip
 80002a6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002aa:	0c22      	lsrs	r2, r4, #16
 80002ac:	fb0e 7711 	mls	r7, lr, r1, r7
 80002b0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002b4:	fb01 f005 	mul.w	r0, r1, r5
 80002b8:	4290      	cmp	r0, r2
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x62>
 80002bc:	eb1c 0202 	adds.w	r2, ip, r2
 80002c0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002c4:	f080 811c 	bcs.w	8000500 <__udivmoddi4+0x290>
 80002c8:	4290      	cmp	r0, r2
 80002ca:	f240 8119 	bls.w	8000500 <__udivmoddi4+0x290>
 80002ce:	3902      	subs	r1, #2
 80002d0:	4462      	add	r2, ip
 80002d2:	1a12      	subs	r2, r2, r0
 80002d4:	b2a4      	uxth	r4, r4
 80002d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002da:	fb0e 2210 	mls	r2, lr, r0, r2
 80002de:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e2:	fb00 f505 	mul.w	r5, r0, r5
 80002e6:	42a5      	cmp	r5, r4
 80002e8:	d90a      	bls.n	8000300 <__udivmoddi4+0x90>
 80002ea:	eb1c 0404 	adds.w	r4, ip, r4
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f2:	f080 8107 	bcs.w	8000504 <__udivmoddi4+0x294>
 80002f6:	42a5      	cmp	r5, r4
 80002f8:	f240 8104 	bls.w	8000504 <__udivmoddi4+0x294>
 80002fc:	4464      	add	r4, ip
 80002fe:	3802      	subs	r0, #2
 8000300:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000304:	1b64      	subs	r4, r4, r5
 8000306:	2100      	movs	r1, #0
 8000308:	b11e      	cbz	r6, 8000312 <__udivmoddi4+0xa2>
 800030a:	40dc      	lsrs	r4, r3
 800030c:	2300      	movs	r3, #0
 800030e:	e9c6 4300 	strd	r4, r3, [r6]
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0xbc>
 800031a:	2e00      	cmp	r6, #0
 800031c:	f000 80ed 	beq.w	80004fa <__udivmoddi4+0x28a>
 8000320:	2100      	movs	r1, #0
 8000322:	e9c6 0500 	strd	r0, r5, [r6]
 8000326:	4608      	mov	r0, r1
 8000328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032c:	fab3 f183 	clz	r1, r3
 8000330:	2900      	cmp	r1, #0
 8000332:	d149      	bne.n	80003c8 <__udivmoddi4+0x158>
 8000334:	42ab      	cmp	r3, r5
 8000336:	d302      	bcc.n	800033e <__udivmoddi4+0xce>
 8000338:	4282      	cmp	r2, r0
 800033a:	f200 80f8 	bhi.w	800052e <__udivmoddi4+0x2be>
 800033e:	1a84      	subs	r4, r0, r2
 8000340:	eb65 0203 	sbc.w	r2, r5, r3
 8000344:	2001      	movs	r0, #1
 8000346:	4617      	mov	r7, r2
 8000348:	2e00      	cmp	r6, #0
 800034a:	d0e2      	beq.n	8000312 <__udivmoddi4+0xa2>
 800034c:	e9c6 4700 	strd	r4, r7, [r6]
 8000350:	e7df      	b.n	8000312 <__udivmoddi4+0xa2>
 8000352:	b902      	cbnz	r2, 8000356 <__udivmoddi4+0xe6>
 8000354:	deff      	udf	#255	; 0xff
 8000356:	fab2 f382 	clz	r3, r2
 800035a:	2b00      	cmp	r3, #0
 800035c:	f040 8090 	bne.w	8000480 <__udivmoddi4+0x210>
 8000360:	1a8a      	subs	r2, r1, r2
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2101      	movs	r1, #1
 800036c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000370:	fb07 2015 	mls	r0, r7, r5, r2
 8000374:	0c22      	lsrs	r2, r4, #16
 8000376:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800037a:	fb0e f005 	mul.w	r0, lr, r5
 800037e:	4290      	cmp	r0, r2
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x124>
 8000382:	eb1c 0202 	adds.w	r2, ip, r2
 8000386:	f105 38ff 	add.w	r8, r5, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x122>
 800038c:	4290      	cmp	r0, r2
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2b8>
 8000392:	4645      	mov	r5, r8
 8000394:	1a12      	subs	r2, r2, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb2 f0f7 	udiv	r0, r2, r7
 800039c:	fb07 2210 	mls	r2, r7, r0, r2
 80003a0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x14e>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x14c>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2c2>
 80003bc:	4610      	mov	r0, r2
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003c6:	e79f      	b.n	8000308 <__udivmoddi4+0x98>
 80003c8:	f1c1 0720 	rsb	r7, r1, #32
 80003cc:	408b      	lsls	r3, r1
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa05 f401 	lsl.w	r4, r5, r1
 80003da:	fa20 f307 	lsr.w	r3, r0, r7
 80003de:	40fd      	lsrs	r5, r7
 80003e0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e4:	4323      	orrs	r3, r4
 80003e6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ea:	fa1f fe8c 	uxth.w	lr, ip
 80003ee:	fb09 5518 	mls	r5, r9, r8, r5
 80003f2:	0c1c      	lsrs	r4, r3, #16
 80003f4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f8:	fb08 f50e 	mul.w	r5, r8, lr
 80003fc:	42a5      	cmp	r5, r4
 80003fe:	fa02 f201 	lsl.w	r2, r2, r1
 8000402:	fa00 f001 	lsl.w	r0, r0, r1
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b0>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2b4>
 8000414:	42a5      	cmp	r5, r4
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2b4>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4464      	add	r4, ip
 8000420:	1b64      	subs	r4, r4, r5
 8000422:	b29d      	uxth	r5, r3
 8000424:	fbb4 f3f9 	udiv	r3, r4, r9
 8000428:	fb09 4413 	mls	r4, r9, r3, r4
 800042c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000430:	fb03 fe0e 	mul.w	lr, r3, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1da>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2ac>
 8000442:	45a6      	cmp	lr, r4
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2ac>
 8000446:	3b02      	subs	r3, #2
 8000448:	4464      	add	r4, ip
 800044a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800044e:	fba3 9502 	umull	r9, r5, r3, r2
 8000452:	eba4 040e 	sub.w	r4, r4, lr
 8000456:	42ac      	cmp	r4, r5
 8000458:	46c8      	mov	r8, r9
 800045a:	46ae      	mov	lr, r5
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x29c>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x298>
 8000460:	b156      	cbz	r6, 8000478 <__udivmoddi4+0x208>
 8000462:	ebb0 0208 	subs.w	r2, r0, r8
 8000466:	eb64 040e 	sbc.w	r4, r4, lr
 800046a:	fa04 f707 	lsl.w	r7, r4, r7
 800046e:	40ca      	lsrs	r2, r1
 8000470:	40cc      	lsrs	r4, r1
 8000472:	4317      	orrs	r7, r2
 8000474:	e9c6 7400 	strd	r7, r4, [r6]
 8000478:	4618      	mov	r0, r3
 800047a:	2100      	movs	r1, #0
 800047c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000480:	f1c3 0120 	rsb	r1, r3, #32
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	fa20 f201 	lsr.w	r2, r0, r1
 800048c:	fa25 f101 	lsr.w	r1, r5, r1
 8000490:	409d      	lsls	r5, r3
 8000492:	432a      	orrs	r2, r5
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb1 f0f7 	udiv	r0, r1, r7
 80004a0:	fb07 1510 	mls	r5, r7, r0, r1
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004aa:	fb00 f50e 	mul.w	r5, r0, lr
 80004ae:	428d      	cmp	r5, r1
 80004b0:	fa04 f403 	lsl.w	r4, r4, r3
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x258>
 80004b6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004c0:	428d      	cmp	r5, r1
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1b49      	subs	r1, r1, r5
 80004ca:	b292      	uxth	r2, r2
 80004cc:	fbb1 f5f7 	udiv	r5, r1, r7
 80004d0:	fb07 1115 	mls	r1, r7, r5, r1
 80004d4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d8:	fb05 f10e 	mul.w	r1, r5, lr
 80004dc:	4291      	cmp	r1, r2
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x282>
 80004e0:	eb1c 0202 	adds.w	r2, ip, r2
 80004e4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2a8>
 80004ea:	4291      	cmp	r1, r2
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2a8>
 80004ee:	3d02      	subs	r5, #2
 80004f0:	4462      	add	r2, ip
 80004f2:	1a52      	subs	r2, r2, r1
 80004f4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0xfc>
 80004fa:	4631      	mov	r1, r6
 80004fc:	4630      	mov	r0, r6
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xa2>
 8000500:	4639      	mov	r1, r7
 8000502:	e6e6      	b.n	80002d2 <__udivmoddi4+0x62>
 8000504:	4610      	mov	r0, r2
 8000506:	e6fb      	b.n	8000300 <__udivmoddi4+0x90>
 8000508:	4548      	cmp	r0, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f0>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000514:	3b01      	subs	r3, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f0>
 8000518:	4645      	mov	r5, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x282>
 800051c:	462b      	mov	r3, r5
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1da>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x258>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b0>
 8000528:	3d02      	subs	r5, #2
 800052a:	4462      	add	r2, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x124>
 800052e:	4608      	mov	r0, r1
 8000530:	e70a      	b.n	8000348 <__udivmoddi4+0xd8>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x14e>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 800053c:	b508      	push	{r3, lr}
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800053e:	f002 fd0c 	bl	8002f5a <pvTimerGetTimerID>

  if (callb != NULL) {
 8000542:	b110      	cbz	r0, 800054a <TimerCallback+0xe>
    callb->func (callb->arg);
 8000544:	6802      	ldr	r2, [r0, #0]
 8000546:	6840      	ldr	r0, [r0, #4]
 8000548:	4790      	blx	r2
  }
}
 800054a:	bd08      	pop	{r3, pc}

0800054c <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800054c:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 8000550:	b97b      	cbnz	r3, 8000572 <osKernelInitialize+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000552:	f3ef 8310 	mrs	r3, PRIMASK
 8000556:	b913      	cbnz	r3, 800055e <osKernelInitialize+0x12>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8000558:	f3ef 8311 	mrs	r3, BASEPRI
 800055c:	b11b      	cbz	r3, 8000566 <osKernelInitialize+0x1a>
 800055e:	4b09      	ldr	r3, [pc, #36]	; (8000584 <osKernelInitialize+0x38>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	2b02      	cmp	r3, #2
 8000564:	d008      	beq.n	8000578 <osKernelInitialize+0x2c>
    if (KernelState == osKernelInactive) {
 8000566:	4b07      	ldr	r3, [pc, #28]	; (8000584 <osKernelInitialize+0x38>)
 8000568:	6818      	ldr	r0, [r3, #0]
 800056a:	b940      	cbnz	r0, 800057e <osKernelInitialize+0x32>
      KernelState = osKernelReady;
 800056c:	2201      	movs	r2, #1
 800056e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8000570:	4770      	bx	lr
    stat = osErrorISR;
 8000572:	f06f 0005 	mvn.w	r0, #5
 8000576:	4770      	bx	lr
 8000578:	f06f 0005 	mvn.w	r0, #5
 800057c:	4770      	bx	lr
      stat = osError;
 800057e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000582:	4770      	bx	lr
 8000584:	20000088 	.word	0x20000088

08000588 <osKernelStart>:
osStatus_t osKernelStart (void) {
 8000588:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800058a:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 800058e:	b9a3      	cbnz	r3, 80005ba <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000590:	f3ef 8310 	mrs	r3, PRIMASK
 8000594:	b913      	cbnz	r3, 800059c <osKernelStart+0x14>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8000596:	f3ef 8311 	mrs	r3, BASEPRI
 800059a:	b11b      	cbz	r3, 80005a4 <osKernelStart+0x1c>
 800059c:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <osKernelStart+0x44>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	2b02      	cmp	r3, #2
 80005a2:	d00d      	beq.n	80005c0 <osKernelStart+0x38>
    if (KernelState == osKernelReady) {
 80005a4:	4b09      	ldr	r3, [pc, #36]	; (80005cc <osKernelStart+0x44>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d10c      	bne.n	80005c6 <osKernelStart+0x3e>
      KernelState = osKernelRunning;
 80005ac:	4b07      	ldr	r3, [pc, #28]	; (80005cc <osKernelStart+0x44>)
 80005ae:	2202      	movs	r2, #2
 80005b0:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80005b2:	f001 fc9d 	bl	8001ef0 <vTaskStartScheduler>
      stat = osOK;
 80005b6:	2000      	movs	r0, #0
}
 80005b8:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 80005ba:	f06f 0005 	mvn.w	r0, #5
 80005be:	e7fb      	b.n	80005b8 <osKernelStart+0x30>
 80005c0:	f06f 0005 	mvn.w	r0, #5
 80005c4:	e7f8      	b.n	80005b8 <osKernelStart+0x30>
      stat = osError;
 80005c6:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 80005ca:	e7f5      	b.n	80005b8 <osKernelStart+0x30>
 80005cc:	20000088 	.word	0x20000088

080005d0 <osThreadNew>:
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80005d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005d2:	b087      	sub	sp, #28
  hTask = NULL;
 80005d4:	2400      	movs	r4, #0
 80005d6:	9405      	str	r4, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80005d8:	f3ef 8405 	mrs	r4, IPSR
  if (!IS_IRQ() && (func != NULL)) {
 80005dc:	2c00      	cmp	r4, #0
 80005de:	d138      	bne.n	8000652 <osThreadNew+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80005e0:	f3ef 8310 	mrs	r3, PRIMASK
 80005e4:	b913      	cbnz	r3, 80005ec <osThreadNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80005e6:	f3ef 8311 	mrs	r3, BASEPRI
 80005ea:	b11b      	cbz	r3, 80005f4 <osThreadNew+0x24>
 80005ec:	4b2d      	ldr	r3, [pc, #180]	; (80006a4 <osThreadNew+0xd4>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	2b02      	cmp	r3, #2
 80005f2:	d02e      	beq.n	8000652 <osThreadNew+0x82>
 80005f4:	b368      	cbz	r0, 8000652 <osThreadNew+0x82>
    if (attr != NULL) {
 80005f6:	b322      	cbz	r2, 8000642 <osThreadNew+0x72>
      if (attr->name != NULL) {
 80005f8:	6815      	ldr	r5, [r2, #0]
      if (attr->priority != osPriorityNone) {
 80005fa:	6993      	ldr	r3, [r2, #24]
 80005fc:	b903      	cbnz	r3, 8000600 <osThreadNew+0x30>
    prio  = (UBaseType_t)osPriorityNormal;
 80005fe:	2318      	movs	r3, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8000600:	1e5c      	subs	r4, r3, #1
 8000602:	2c37      	cmp	r4, #55	; 0x37
 8000604:	d849      	bhi.n	800069a <osThreadNew+0xca>
 8000606:	6854      	ldr	r4, [r2, #4]
 8000608:	f014 0f01 	tst.w	r4, #1
 800060c:	d147      	bne.n	800069e <osThreadNew+0xce>
      if (attr->stack_size > 0U) {
 800060e:	6956      	ldr	r6, [r2, #20]
 8000610:	b16e      	cbz	r6, 800062e <osThreadNew+0x5e>
        stack = attr->stack_size / sizeof(StackType_t);
 8000612:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8000616:	6894      	ldr	r4, [r2, #8]
 8000618:	b12c      	cbz	r4, 8000626 <osThreadNew+0x56>
 800061a:	68d7      	ldr	r7, [r2, #12]
 800061c:	2f5b      	cmp	r7, #91	; 0x5b
 800061e:	d902      	bls.n	8000626 <osThreadNew+0x56>
 8000620:	6917      	ldr	r7, [r2, #16]
 8000622:	b107      	cbz	r7, 8000626 <osThreadNew+0x56>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8000624:	b9c6      	cbnz	r6, 8000658 <osThreadNew+0x88>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8000626:	b12c      	cbz	r4, 8000634 <osThreadNew+0x64>
    mem  = -1;
 8000628:	f04f 34ff 	mov.w	r4, #4294967295
 800062c:	e00e      	b.n	800064c <osThreadNew+0x7c>
    stack = configMINIMAL_STACK_SIZE;
 800062e:	f04f 0c80 	mov.w	ip, #128	; 0x80
 8000632:	e7f0      	b.n	8000616 <osThreadNew+0x46>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8000634:	68d4      	ldr	r4, [r2, #12]
 8000636:	b98c      	cbnz	r4, 800065c <osThreadNew+0x8c>
 8000638:	6914      	ldr	r4, [r2, #16]
 800063a:	b194      	cbz	r4, 8000662 <osThreadNew+0x92>
    mem  = -1;
 800063c:	f04f 34ff 	mov.w	r4, #4294967295
 8000640:	e004      	b.n	800064c <osThreadNew+0x7c>
    name = NULL;
 8000642:	4615      	mov	r5, r2
      mem = 0;
 8000644:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 8000646:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 8000648:	f04f 0c80 	mov.w	ip, #128	; 0x80
    if (mem == 1) {
 800064c:	2c01      	cmp	r4, #1
 800064e:	d00a      	beq.n	8000666 <osThreadNew+0x96>
      if (mem == 0) {
 8000650:	b1ac      	cbz	r4, 800067e <osThreadNew+0xae>
  return ((osThreadId_t)hTask);
 8000652:	9805      	ldr	r0, [sp, #20]
}
 8000654:	b007      	add	sp, #28
 8000656:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 8000658:	2401      	movs	r4, #1
 800065a:	e7f7      	b.n	800064c <osThreadNew+0x7c>
    mem  = -1;
 800065c:	f04f 34ff 	mov.w	r4, #4294967295
 8000660:	e7f4      	b.n	800064c <osThreadNew+0x7c>
          mem = 0;
 8000662:	2400      	movs	r4, #0
 8000664:	e7f2      	b.n	800064c <osThreadNew+0x7c>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8000666:	6914      	ldr	r4, [r2, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8000668:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800066a:	9202      	str	r2, [sp, #8]
 800066c:	9401      	str	r4, [sp, #4]
 800066e:	9300      	str	r3, [sp, #0]
 8000670:	460b      	mov	r3, r1
 8000672:	4662      	mov	r2, ip
 8000674:	4629      	mov	r1, r5
 8000676:	f001 fbc5 	bl	8001e04 <xTaskCreateStatic>
 800067a:	9005      	str	r0, [sp, #20]
 800067c:	e7e9      	b.n	8000652 <osThreadNew+0x82>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800067e:	aa05      	add	r2, sp, #20
 8000680:	9201      	str	r2, [sp, #4]
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	460b      	mov	r3, r1
 8000686:	fa1f f28c 	uxth.w	r2, ip
 800068a:	4629      	mov	r1, r5
 800068c:	f001 fbfb 	bl	8001e86 <xTaskCreate>
 8000690:	2801      	cmp	r0, #1
 8000692:	d0de      	beq.n	8000652 <osThreadNew+0x82>
          hTask = NULL;
 8000694:	2300      	movs	r3, #0
 8000696:	9305      	str	r3, [sp, #20]
 8000698:	e7db      	b.n	8000652 <osThreadNew+0x82>
        return (NULL);
 800069a:	2000      	movs	r0, #0
 800069c:	e7da      	b.n	8000654 <osThreadNew+0x84>
 800069e:	2000      	movs	r0, #0
 80006a0:	e7d8      	b.n	8000654 <osThreadNew+0x84>
 80006a2:	bf00      	nop
 80006a4:	20000088 	.word	0x20000088

080006a8 <osThreadFlagsSet>:
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 80006a8:	b530      	push	{r4, r5, lr}
 80006aa:	b085      	sub	sp, #20
  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 80006ac:	0fcb      	lsrs	r3, r1, #31
 80006ae:	2800      	cmp	r0, #0
 80006b0:	bf08      	it	eq
 80006b2:	f043 0301 	orreq.w	r3, r3, #1
 80006b6:	b12b      	cbz	r3, 80006c4 <osThreadFlagsSet+0x1c>
    rflags = (uint32_t)osErrorParameter;
 80006b8:	f06f 0303 	mvn.w	r3, #3
 80006bc:	9303      	str	r3, [sp, #12]
}
 80006be:	9803      	ldr	r0, [sp, #12]
 80006c0:	b005      	add	sp, #20
 80006c2:	bd30      	pop	{r4, r5, pc}
 80006c4:	4604      	mov	r4, r0
    rflags = (uint32_t)osError;
 80006c6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ca:	9303      	str	r3, [sp, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80006cc:	f3ef 8305 	mrs	r3, IPSR
    if (IS_IRQ()) {
 80006d0:	b9ab      	cbnz	r3, 80006fe <osThreadFlagsSet+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80006d2:	f3ef 8310 	mrs	r3, PRIMASK
 80006d6:	b913      	cbnz	r3, 80006de <osThreadFlagsSet+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80006d8:	f3ef 8311 	mrs	r3, BASEPRI
 80006dc:	b11b      	cbz	r3, 80006e6 <osThreadFlagsSet+0x3e>
 80006de:	4b17      	ldr	r3, [pc, #92]	; (800073c <osThreadFlagsSet+0x94>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2b02      	cmp	r3, #2
 80006e4:	d00b      	beq.n	80006fe <osThreadFlagsSet+0x56>
      (void)xTaskNotify (hTask, flags, eSetBits);
 80006e6:	2300      	movs	r3, #0
 80006e8:	2201      	movs	r2, #1
 80006ea:	4620      	mov	r0, r4
 80006ec:	f002 f862 	bl	80027b4 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 80006f0:	ab03      	add	r3, sp, #12
 80006f2:	2200      	movs	r2, #0
 80006f4:	4611      	mov	r1, r2
 80006f6:	4620      	mov	r0, r4
 80006f8:	f002 f85c 	bl	80027b4 <xTaskGenericNotify>
 80006fc:	e7df      	b.n	80006be <osThreadFlagsSet+0x16>
      yield = pdFALSE;
 80006fe:	2500      	movs	r5, #0
 8000700:	9502      	str	r5, [sp, #8]
      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8000702:	ab02      	add	r3, sp, #8
 8000704:	9300      	str	r3, [sp, #0]
 8000706:	462b      	mov	r3, r5
 8000708:	2201      	movs	r2, #1
 800070a:	4620      	mov	r0, r4
 800070c:	f002 f8da 	bl	80028c4 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8000710:	9500      	str	r5, [sp, #0]
 8000712:	ab03      	add	r3, sp, #12
 8000714:	462a      	mov	r2, r5
 8000716:	4629      	mov	r1, r5
 8000718:	4620      	mov	r0, r4
 800071a:	f002 f8d3 	bl	80028c4 <xTaskGenericNotifyFromISR>
      portYIELD_FROM_ISR (yield);
 800071e:	9b02      	ldr	r3, [sp, #8]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d0cc      	beq.n	80006be <osThreadFlagsSet+0x16>
 8000724:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000728:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800072c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000730:	f3bf 8f4f 	dsb	sy
 8000734:	f3bf 8f6f 	isb	sy
 8000738:	e7c1      	b.n	80006be <osThreadFlagsSet+0x16>
 800073a:	bf00      	nop
 800073c:	20000088 	.word	0x20000088

08000740 <osThreadFlagsClear>:
uint32_t osThreadFlagsClear (uint32_t flags) {
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000744:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 8000748:	bb3b      	cbnz	r3, 800079a <osThreadFlagsClear+0x5a>
 800074a:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800074c:	f3ef 8310 	mrs	r3, PRIMASK
 8000750:	b913      	cbnz	r3, 8000758 <osThreadFlagsClear+0x18>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8000752:	f3ef 8311 	mrs	r3, BASEPRI
 8000756:	b11b      	cbz	r3, 8000760 <osThreadFlagsClear+0x20>
 8000758:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <osThreadFlagsClear+0x70>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2b02      	cmp	r3, #2
 800075e:	d021      	beq.n	80007a4 <osThreadFlagsClear+0x64>
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8000760:	2d00      	cmp	r5, #0
 8000762:	db22      	blt.n	80007aa <osThreadFlagsClear+0x6a>
    hTask = xTaskGetCurrentTaskHandle();
 8000764:	f001 feb8 	bl	80024d8 <xTaskGetCurrentTaskHandle>
 8000768:	4606      	mov	r6, r0
    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &cflags) == pdPASS) {
 800076a:	ab01      	add	r3, sp, #4
 800076c:	2200      	movs	r2, #0
 800076e:	4611      	mov	r1, r2
 8000770:	f002 f820 	bl	80027b4 <xTaskGenericNotify>
 8000774:	2801      	cmp	r0, #1
 8000776:	d002      	beq.n	800077e <osThreadFlagsClear+0x3e>
      rflags = (uint32_t)osError;
 8000778:	f04f 34ff 	mov.w	r4, #4294967295
 800077c:	e00f      	b.n	800079e <osThreadFlagsClear+0x5e>
      rflags = cflags;
 800077e:	9c01      	ldr	r4, [sp, #4]
      cflags &= ~flags;
 8000780:	ea24 0105 	bic.w	r1, r4, r5
 8000784:	9101      	str	r1, [sp, #4]
      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
 8000786:	2300      	movs	r3, #0
 8000788:	2203      	movs	r2, #3
 800078a:	4630      	mov	r0, r6
 800078c:	f002 f812 	bl	80027b4 <xTaskGenericNotify>
 8000790:	2801      	cmp	r0, #1
 8000792:	d004      	beq.n	800079e <osThreadFlagsClear+0x5e>
        rflags = (uint32_t)osError;
 8000794:	f04f 34ff 	mov.w	r4, #4294967295
  return (rflags);
 8000798:	e001      	b.n	800079e <osThreadFlagsClear+0x5e>
    rflags = (uint32_t)osErrorISR;
 800079a:	f06f 0405 	mvn.w	r4, #5
}
 800079e:	4620      	mov	r0, r4
 80007a0:	b002      	add	sp, #8
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
    rflags = (uint32_t)osErrorISR;
 80007a4:	f06f 0405 	mvn.w	r4, #5
 80007a8:	e7f9      	b.n	800079e <osThreadFlagsClear+0x5e>
    rflags = (uint32_t)osErrorParameter;
 80007aa:	f06f 0403 	mvn.w	r4, #3
 80007ae:	e7f6      	b.n	800079e <osThreadFlagsClear+0x5e>
 80007b0:	20000088 	.word	0x20000088

080007b4 <osThreadFlagsGet>:
uint32_t osThreadFlagsGet (void) {
 80007b4:	b500      	push	{lr}
 80007b6:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80007b8:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 80007bc:	b9b3      	cbnz	r3, 80007ec <osThreadFlagsGet+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80007be:	f3ef 8310 	mrs	r3, PRIMASK
 80007c2:	b913      	cbnz	r3, 80007ca <osThreadFlagsGet+0x16>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80007c4:	f3ef 8311 	mrs	r3, BASEPRI
 80007c8:	b11b      	cbz	r3, 80007d2 <osThreadFlagsGet+0x1e>
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <osThreadFlagsGet+0x48>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	2b02      	cmp	r3, #2
 80007d0:	d00c      	beq.n	80007ec <osThreadFlagsGet+0x38>
    hTask = xTaskGetCurrentTaskHandle();
 80007d2:	f001 fe81 	bl	80024d8 <xTaskGetCurrentTaskHandle>
    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags) != pdPASS) {
 80007d6:	ab01      	add	r3, sp, #4
 80007d8:	2200      	movs	r2, #0
 80007da:	4611      	mov	r1, r2
 80007dc:	f001 ffea 	bl	80027b4 <xTaskGenericNotify>
 80007e0:	2801      	cmp	r0, #1
 80007e2:	d006      	beq.n	80007f2 <osThreadFlagsGet+0x3e>
      rflags = (uint32_t)osError;
 80007e4:	f04f 33ff 	mov.w	r3, #4294967295
 80007e8:	9301      	str	r3, [sp, #4]
 80007ea:	e002      	b.n	80007f2 <osThreadFlagsGet+0x3e>
    rflags = (uint32_t)osErrorISR;
 80007ec:	f06f 0305 	mvn.w	r3, #5
 80007f0:	9301      	str	r3, [sp, #4]
}
 80007f2:	9801      	ldr	r0, [sp, #4]
 80007f4:	b003      	add	sp, #12
 80007f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80007fa:	bf00      	nop
 80007fc:	20000088 	.word	0x20000088

08000800 <osThreadFlagsWait>:
uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8000800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000804:	b085      	sub	sp, #20
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000806:	f3ef 8305 	mrs	r3, IPSR
 800080a:	9301      	str	r3, [sp, #4]
  if (IS_IRQ()) {
 800080c:	2b00      	cmp	r3, #0
 800080e:	d14c      	bne.n	80008aa <osThreadFlagsWait+0xaa>
 8000810:	4681      	mov	r9, r0
 8000812:	468a      	mov	sl, r1
 8000814:	4617      	mov	r7, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000816:	f3ef 8310 	mrs	r3, PRIMASK
 800081a:	b913      	cbnz	r3, 8000822 <osThreadFlagsWait+0x22>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800081c:	f3ef 8311 	mrs	r3, BASEPRI
 8000820:	b11b      	cbz	r3, 800082a <osThreadFlagsWait+0x2a>
 8000822:	4b29      	ldr	r3, [pc, #164]	; (80008c8 <osThreadFlagsWait+0xc8>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	2b02      	cmp	r3, #2
 8000828:	d045      	beq.n	80008b6 <osThreadFlagsWait+0xb6>
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800082a:	f1b9 0f00 	cmp.w	r9, #0
 800082e:	db45      	blt.n	80008bc <osThreadFlagsWait+0xbc>
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8000830:	f01a 0f02 	tst.w	sl, #2
 8000834:	d007      	beq.n	8000846 <osThreadFlagsWait+0x46>
      clear = 0U;
 8000836:	f8dd 8004 	ldr.w	r8, [sp, #4]
    t0 = xTaskGetTickCount();
 800083a:	f001 fbaf 	bl	8001f9c <xTaskGetTickCount>
 800083e:	4683      	mov	fp, r0
    tout   = timeout;
 8000840:	463e      	mov	r6, r7
    rflags = 0U;
 8000842:	9d01      	ldr	r5, [sp, #4]
 8000844:	e023      	b.n	800088e <osThreadFlagsWait+0x8e>
      clear = flags;
 8000846:	46c8      	mov	r8, r9
 8000848:	e7f7      	b.n	800083a <osThreadFlagsWait+0x3a>
        rflags &= flags;
 800084a:	ea05 0509 	and.w	r5, r5, r9
        rflags |= nval;
 800084e:	9b03      	ldr	r3, [sp, #12]
 8000850:	431d      	orrs	r5, r3
        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8000852:	f01a 0f01 	tst.w	sl, #1
 8000856:	d00d      	beq.n	8000874 <osThreadFlagsWait+0x74>
          if ((flags & rflags) == flags) {
 8000858:	ea39 0305 	bics.w	r3, r9, r5
 800085c:	d027      	beq.n	80008ae <osThreadFlagsWait+0xae>
            if (timeout == 0U) {
 800085e:	b387      	cbz	r7, 80008c2 <osThreadFlagsWait+0xc2>
        td = xTaskGetTickCount() - t0;
 8000860:	f001 fb9c 	bl	8001f9c <xTaskGetTickCount>
 8000864:	eba0 030b 	sub.w	r3, r0, fp
        if (td > tout) {
 8000868:	429e      	cmp	r6, r3
 800086a:	d30b      	bcc.n	8000884 <osThreadFlagsWait+0x84>
          tout -= td;
 800086c:	ebab 0000 	sub.w	r0, fp, r0
 8000870:	4406      	add	r6, r0
 8000872:	e00b      	b.n	800088c <osThreadFlagsWait+0x8c>
          if ((flags & rflags) != 0) {
 8000874:	ea19 0f05 	tst.w	r9, r5
 8000878:	d119      	bne.n	80008ae <osThreadFlagsWait+0xae>
            if (timeout == 0U) {
 800087a:	2f00      	cmp	r7, #0
 800087c:	d1f0      	bne.n	8000860 <osThreadFlagsWait+0x60>
              rflags = (uint32_t)osErrorResource;
 800087e:	f06f 0502 	mvn.w	r5, #2
  return (rflags);
 8000882:	e014      	b.n	80008ae <osThreadFlagsWait+0xae>
          tout  = 0;
 8000884:	9e01      	ldr	r6, [sp, #4]
 8000886:	e001      	b.n	800088c <osThreadFlagsWait+0x8c>
          rflags = (uint32_t)osErrorTimeout;
 8000888:	f06f 0501 	mvn.w	r5, #1
    while (rval != pdFAIL);
 800088c:	b17c      	cbz	r4, 80008ae <osThreadFlagsWait+0xae>
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800088e:	4633      	mov	r3, r6
 8000890:	aa03      	add	r2, sp, #12
 8000892:	4641      	mov	r1, r8
 8000894:	2000      	movs	r0, #0
 8000896:	f001 ff39 	bl	800270c <xTaskNotifyWait>
 800089a:	4604      	mov	r4, r0
      if (rval == pdPASS) {
 800089c:	2801      	cmp	r0, #1
 800089e:	d0d4      	beq.n	800084a <osThreadFlagsWait+0x4a>
        if (timeout == 0) {
 80008a0:	2f00      	cmp	r7, #0
 80008a2:	d1f1      	bne.n	8000888 <osThreadFlagsWait+0x88>
          rflags = (uint32_t)osErrorResource;
 80008a4:	f06f 0502 	mvn.w	r5, #2
 80008a8:	e7f0      	b.n	800088c <osThreadFlagsWait+0x8c>
    rflags = (uint32_t)osErrorISR;
 80008aa:	f06f 0505 	mvn.w	r5, #5
}
 80008ae:	4628      	mov	r0, r5
 80008b0:	b005      	add	sp, #20
 80008b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rflags = (uint32_t)osErrorISR;
 80008b6:	f06f 0505 	mvn.w	r5, #5
 80008ba:	e7f8      	b.n	80008ae <osThreadFlagsWait+0xae>
    rflags = (uint32_t)osErrorParameter;
 80008bc:	f06f 0503 	mvn.w	r5, #3
 80008c0:	e7f5      	b.n	80008ae <osThreadFlagsWait+0xae>
              rflags = (uint32_t)osErrorResource;
 80008c2:	f06f 0502 	mvn.w	r5, #2
 80008c6:	e7f2      	b.n	80008ae <osThreadFlagsWait+0xae>
 80008c8:	20000088 	.word	0x20000088

080008cc <osDelay>:
osStatus_t osDelay (uint32_t ticks) {
 80008cc:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80008ce:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 80008d2:	b983      	cbnz	r3, 80008f6 <osDelay+0x2a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80008d4:	f3ef 8310 	mrs	r3, PRIMASK
 80008d8:	b913      	cbnz	r3, 80008e0 <osDelay+0x14>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80008da:	f3ef 8311 	mrs	r3, BASEPRI
 80008de:	b11b      	cbz	r3, 80008e8 <osDelay+0x1c>
 80008e0:	4b08      	ldr	r3, [pc, #32]	; (8000904 <osDelay+0x38>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2b02      	cmp	r3, #2
 80008e6:	d009      	beq.n	80008fc <osDelay+0x30>
    if (ticks != 0U) {
 80008e8:	b908      	cbnz	r0, 80008ee <osDelay+0x22>
    stat = osOK;
 80008ea:	2000      	movs	r0, #0
}
 80008ec:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 80008ee:	f001 fc63 	bl	80021b8 <vTaskDelay>
    stat = osOK;
 80008f2:	2000      	movs	r0, #0
 80008f4:	e7fa      	b.n	80008ec <osDelay+0x20>
    stat = osErrorISR;
 80008f6:	f06f 0005 	mvn.w	r0, #5
 80008fa:	e7f7      	b.n	80008ec <osDelay+0x20>
 80008fc:	f06f 0005 	mvn.w	r0, #5
 8000900:	e7f4      	b.n	80008ec <osDelay+0x20>
 8000902:	bf00      	nop
 8000904:	20000088 	.word	0x20000088

08000908 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8000908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800090c:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800090e:	f3ef 8505 	mrs	r5, IPSR
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;

  if (!IS_IRQ() && (func != NULL)) {
 8000912:	2d00      	cmp	r5, #0
 8000914:	d141      	bne.n	800099a <osTimerNew+0x92>
 8000916:	4606      	mov	r6, r0
 8000918:	4688      	mov	r8, r1
 800091a:	4617      	mov	r7, r2
 800091c:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800091e:	f3ef 8310 	mrs	r3, PRIMASK
 8000922:	b913      	cbnz	r3, 800092a <osTimerNew+0x22>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8000924:	f3ef 8311 	mrs	r3, BASEPRI
 8000928:	b11b      	cbz	r3, 8000932 <osTimerNew+0x2a>
 800092a:	4b21      	ldr	r3, [pc, #132]	; (80009b0 <osTimerNew+0xa8>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	2b02      	cmp	r3, #2
 8000930:	d037      	beq.n	80009a2 <osTimerNew+0x9a>
 8000932:	2e00      	cmp	r6, #0
 8000934:	d037      	beq.n	80009a6 <osTimerNew+0x9e>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8000936:	2008      	movs	r0, #8
 8000938:	f002 fd2e 	bl	8003398 <pvPortMalloc>

    if (callb != NULL) {
 800093c:	b370      	cbz	r0, 800099c <osTimerNew+0x94>
      callb->func = func;
 800093e:	6006      	str	r6, [r0, #0]
      callb->arg  = argument;
 8000940:	6047      	str	r7, [r0, #4]

      if (type == osTimerOnce) {
 8000942:	f1b8 0f00 	cmp.w	r8, #0
 8000946:	d000      	beq.n	800094a <osTimerNew+0x42>
        reload = pdFALSE;
      } else {
        reload = pdTRUE;
 8000948:	2501      	movs	r5, #1
      }

      mem  = -1;
      name = NULL;

      if (attr != NULL) {
 800094a:	b30c      	cbz	r4, 8000990 <osTimerNew+0x88>
        if (attr->name != NULL) {
 800094c:	6826      	ldr	r6, [r4, #0]
          name = attr->name;
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800094e:	68a3      	ldr	r3, [r4, #8]
 8000950:	b113      	cbz	r3, 8000958 <osTimerNew+0x50>
 8000952:	68e2      	ldr	r2, [r4, #12]
 8000954:	2a2b      	cmp	r2, #43	; 0x2b
 8000956:	d811      	bhi.n	800097c <osTimerNew+0x74>
          mem = 1;
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8000958:	b15b      	cbz	r3, 8000972 <osTimerNew+0x6a>
      mem  = -1;
 800095a:	f04f 33ff 	mov.w	r3, #4294967295

      if (mem == 1) {
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
      }
      else {
        if (mem == 0) {
 800095e:	bb23      	cbnz	r3, 80009aa <osTimerNew+0xa2>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8000960:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <osTimerNew+0xac>)
 8000962:	9300      	str	r3, [sp, #0]
 8000964:	4603      	mov	r3, r0
 8000966:	462a      	mov	r2, r5
 8000968:	2101      	movs	r1, #1
 800096a:	4630      	mov	r0, r6
 800096c:	f002 f90c 	bl	8002b88 <xTimerCreate>
 8000970:	e014      	b.n	800099c <osTimerNew+0x94>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8000972:	68e3      	ldr	r3, [r4, #12]
 8000974:	b17b      	cbz	r3, 8000996 <osTimerNew+0x8e>
      mem  = -1;
 8000976:	f04f 33ff 	mov.w	r3, #4294967295
 800097a:	e7f0      	b.n	800095e <osTimerNew+0x56>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800097c:	9301      	str	r3, [sp, #4]
 800097e:	4b0d      	ldr	r3, [pc, #52]	; (80009b4 <osTimerNew+0xac>)
 8000980:	9300      	str	r3, [sp, #0]
 8000982:	4603      	mov	r3, r0
 8000984:	462a      	mov	r2, r5
 8000986:	2101      	movs	r1, #1
 8000988:	4630      	mov	r0, r6
 800098a:	f002 f919 	bl	8002bc0 <xTimerCreateStatic>
 800098e:	e005      	b.n	800099c <osTimerNew+0x94>
      name = NULL;
 8000990:	4626      	mov	r6, r4
        mem = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	e7e3      	b.n	800095e <osTimerNew+0x56>
            mem = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	e7e1      	b.n	800095e <osTimerNew+0x56>
  hTimer = NULL;
 800099a:	2000      	movs	r0, #0
      }
    }
  }

  return ((osTimerId_t)hTimer);
}
 800099c:	b002      	add	sp, #8
 800099e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hTimer = NULL;
 80009a2:	2000      	movs	r0, #0
 80009a4:	e7fa      	b.n	800099c <osTimerNew+0x94>
 80009a6:	2000      	movs	r0, #0
 80009a8:	e7f8      	b.n	800099c <osTimerNew+0x94>
 80009aa:	2000      	movs	r0, #0
  return ((osTimerId_t)hTimer);
 80009ac:	e7f6      	b.n	800099c <osTimerNew+0x94>
 80009ae:	bf00      	nop
 80009b0:	20000088 	.word	0x20000088
 80009b4:	0800053d 	.word	0x0800053d

080009b8 <osTimerStart>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80009b8:	f3ef 8305 	mrs	r3, IPSR

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
  osStatus_t stat;

  if (IS_IRQ()) {
 80009bc:	b9c3      	cbnz	r3, 80009f0 <osTimerStart+0x38>
 80009be:	460a      	mov	r2, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80009c0:	f3ef 8310 	mrs	r3, PRIMASK
 80009c4:	b913      	cbnz	r3, 80009cc <osTimerStart+0x14>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80009c6:	f3ef 8311 	mrs	r3, BASEPRI
 80009ca:	b11b      	cbz	r3, 80009d4 <osTimerStart+0x1c>
 80009cc:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <osTimerStart+0x50>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2b02      	cmp	r3, #2
 80009d2:	d010      	beq.n	80009f6 <osTimerStart+0x3e>
    stat = osErrorISR;
  }
  else if (hTimer == NULL) {
 80009d4:	b190      	cbz	r0, 80009fc <osTimerStart+0x44>
osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 80009d6:	b500      	push	{lr}
 80009d8:	b083      	sub	sp, #12
    stat = osErrorParameter;
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 80009da:	2300      	movs	r3, #0
 80009dc:	9300      	str	r3, [sp, #0]
 80009de:	2104      	movs	r1, #4
 80009e0:	f002 f91c 	bl	8002c1c <xTimerGenericCommand>
 80009e4:	2801      	cmp	r0, #1
 80009e6:	d10c      	bne.n	8000a02 <osTimerStart+0x4a>
      stat = osOK;
 80009e8:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 80009ea:	b003      	add	sp, #12
 80009ec:	f85d fb04 	ldr.w	pc, [sp], #4
    stat = osErrorISR;
 80009f0:	f06f 0005 	mvn.w	r0, #5
 80009f4:	4770      	bx	lr
 80009f6:	f06f 0005 	mvn.w	r0, #5
 80009fa:	4770      	bx	lr
    stat = osErrorParameter;
 80009fc:	f06f 0003 	mvn.w	r0, #3
}
 8000a00:	4770      	bx	lr
      stat = osErrorResource;
 8000a02:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8000a06:	e7f0      	b.n	80009ea <osTimerStart+0x32>
 8000a08:	20000088 	.word	0x20000088

08000a0c <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8000a0c:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000a0e:	f3ef 8305 	mrs	r3, IPSR
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;

  if (!IS_IRQ()) {
 8000a12:	bb1b      	cbnz	r3, 8000a5c <osEventFlagsNew+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000a14:	f3ef 8310 	mrs	r3, PRIMASK
 8000a18:	b913      	cbnz	r3, 8000a20 <osEventFlagsNew+0x14>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8000a1a:	f3ef 8311 	mrs	r3, BASEPRI
 8000a1e:	b11b      	cbz	r3, 8000a28 <osEventFlagsNew+0x1c>
 8000a20:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <osEventFlagsNew+0x5c>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2b02      	cmp	r3, #2
 8000a26:	d01b      	beq.n	8000a60 <osEventFlagsNew+0x54>
    mem = -1;

    if (attr != NULL) {
 8000a28:	b1a0      	cbz	r0, 8000a54 <osEventFlagsNew+0x48>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8000a2a:	6883      	ldr	r3, [r0, #8]
 8000a2c:	b113      	cbz	r3, 8000a34 <osEventFlagsNew+0x28>
 8000a2e:	68c2      	ldr	r2, [r0, #12]
 8000a30:	2a1f      	cmp	r2, #31
 8000a32:	d80b      	bhi.n	8000a4c <osEventFlagsNew+0x40>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8000a34:	b12b      	cbz	r3, 8000a42 <osEventFlagsNew+0x36>
    mem = -1;
 8000a36:	f04f 33ff 	mov.w	r3, #4294967295

    if (mem == 1) {
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
    }
    else {
      if (mem == 0) {
 8000a3a:	b99b      	cbnz	r3, 8000a64 <osEventFlagsNew+0x58>
        hEventGroup = xEventGroupCreate();
 8000a3c:	f000 fa4f 	bl	8000ede <xEventGroupCreate>
 8000a40:	e00d      	b.n	8000a5e <osEventFlagsNew+0x52>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8000a42:	68c3      	ldr	r3, [r0, #12]
 8000a44:	b143      	cbz	r3, 8000a58 <osEventFlagsNew+0x4c>
    mem = -1;
 8000a46:	f04f 33ff 	mov.w	r3, #4294967295
 8000a4a:	e7f6      	b.n	8000a3a <osEventFlagsNew+0x2e>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f000 fa1d 	bl	8000e8c <xEventGroupCreateStatic>
 8000a52:	e004      	b.n	8000a5e <osEventFlagsNew+0x52>
      mem = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	e7f0      	b.n	8000a3a <osEventFlagsNew+0x2e>
          mem = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	e7ee      	b.n	8000a3a <osEventFlagsNew+0x2e>
  hEventGroup = NULL;
 8000a5c:	2000      	movs	r0, #0
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
}
 8000a5e:	bd08      	pop	{r3, pc}
  hEventGroup = NULL;
 8000a60:	2000      	movs	r0, #0
 8000a62:	e7fc      	b.n	8000a5e <osEventFlagsNew+0x52>
 8000a64:	2000      	movs	r0, #0
  return ((osEventFlagsId_t)hEventGroup);
 8000a66:	e7fa      	b.n	8000a5e <osEventFlagsNew+0x52>
 8000a68:	20000088 	.word	0x20000088

08000a6c <osEventFlagsSet>:
uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8000a6c:	b370      	cbz	r0, 8000acc <osEventFlagsSet+0x60>
uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8000a6e:	b510      	push	{r4, lr}
 8000a70:	b082      	sub	sp, #8
 8000a72:	460c      	mov	r4, r1
 8000a74:	4603      	mov	r3, r0
  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8000a76:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
 8000a7a:	d12a      	bne.n	8000ad2 <osEventFlagsSet+0x66>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000a7c:	f3ef 8205 	mrs	r2, IPSR
    rflags = (uint32_t)osErrorParameter;
  }
  else if (IS_IRQ()) {
 8000a80:	b972      	cbnz	r2, 8000aa0 <osEventFlagsSet+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000a82:	f3ef 8210 	mrs	r2, PRIMASK
 8000a86:	b912      	cbnz	r2, 8000a8e <osEventFlagsSet+0x22>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8000a88:	f3ef 8211 	mrs	r2, BASEPRI
 8000a8c:	b11a      	cbz	r2, 8000a96 <osEventFlagsSet+0x2a>
 8000a8e:	4a15      	ldr	r2, [pc, #84]	; (8000ae4 <osEventFlagsSet+0x78>)
 8000a90:	6812      	ldr	r2, [r2, #0]
 8000a92:	2a02      	cmp	r2, #2
 8000a94:	d004      	beq.n	8000aa0 <osEventFlagsSet+0x34>
      rflags = flags;
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8000a96:	4621      	mov	r1, r4
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f000 fa73 	bl	8000f84 <xEventGroupSetBits>
 8000a9e:	e01a      	b.n	8000ad6 <osEventFlagsSet+0x6a>
    yield = pdFALSE;
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	9201      	str	r2, [sp, #4]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8000aa4:	aa01      	add	r2, sp, #4
 8000aa6:	4621      	mov	r1, r4
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f000 fab9 	bl	8001020 <xEventGroupSetBitsFromISR>
 8000aae:	b1a0      	cbz	r0, 8000ada <osEventFlagsSet+0x6e>
      portYIELD_FROM_ISR (yield);
 8000ab0:	9b01      	ldr	r3, [sp, #4]
 8000ab2:	b1ab      	cbz	r3, 8000ae0 <osEventFlagsSet+0x74>
 8000ab4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000ab8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000abc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000ac0:	f3bf 8f4f 	dsb	sy
 8000ac4:	f3bf 8f6f 	isb	sy
      rflags = flags;
 8000ac8:	4620      	mov	r0, r4
 8000aca:	e004      	b.n	8000ad6 <osEventFlagsSet+0x6a>
    rflags = (uint32_t)osErrorParameter;
 8000acc:	f06f 0003 	mvn.w	r0, #3
  }

  return (rflags);
}
 8000ad0:	4770      	bx	lr
    rflags = (uint32_t)osErrorParameter;
 8000ad2:	f06f 0003 	mvn.w	r0, #3
}
 8000ad6:	b002      	add	sp, #8
 8000ad8:	bd10      	pop	{r4, pc}
      rflags = (uint32_t)osErrorResource;
 8000ada:	f06f 0002 	mvn.w	r0, #2
 8000ade:	e7fa      	b.n	8000ad6 <osEventFlagsSet+0x6a>
      rflags = flags;
 8000ae0:	4620      	mov	r0, r4
  return (rflags);
 8000ae2:	e7f8      	b.n	8000ad6 <osEventFlagsSet+0x6a>
 8000ae4:	20000088 	.word	0x20000088

08000ae8 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8000ae8:	b570      	push	{r4, r5, r6, lr}
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8000aea:	b318      	cbz	r0, 8000b34 <osEventFlagsClear+0x4c>
 8000aec:	460c      	mov	r4, r1
 8000aee:	4606      	mov	r6, r0
 8000af0:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
 8000af4:	d121      	bne.n	8000b3a <osEventFlagsClear+0x52>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000af6:	f3ef 8305 	mrs	r3, IPSR
    rflags = (uint32_t)osErrorParameter;
  }
  else if (IS_IRQ()) {
 8000afa:	b97b      	cbnz	r3, 8000b1c <osEventFlagsClear+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000afc:	f3ef 8310 	mrs	r3, PRIMASK
 8000b00:	b913      	cbnz	r3, 8000b08 <osEventFlagsClear+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8000b02:	f3ef 8311 	mrs	r3, BASEPRI
 8000b06:	b11b      	cbz	r3, 8000b10 <osEventFlagsClear+0x28>
 8000b08:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <osEventFlagsClear+0x5c>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2b02      	cmp	r3, #2
 8000b0e:	d005      	beq.n	8000b1c <osEventFlagsClear+0x34>
    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
      rflags = (uint32_t)osErrorResource;
    }
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8000b10:	4621      	mov	r1, r4
 8000b12:	4630      	mov	r0, r6
 8000b14:	f000 f9f1 	bl	8000efa <xEventGroupClearBits>
 8000b18:	4605      	mov	r5, r0
 8000b1a:	e010      	b.n	8000b3e <osEventFlagsClear+0x56>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8000b1c:	4630      	mov	r0, r6
 8000b1e:	f000 fa21 	bl	8000f64 <xEventGroupGetBitsFromISR>
 8000b22:	4605      	mov	r5, r0
    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8000b24:	4621      	mov	r1, r4
 8000b26:	4630      	mov	r0, r6
 8000b28:	f000 fa12 	bl	8000f50 <xEventGroupClearBitsFromISR>
 8000b2c:	b938      	cbnz	r0, 8000b3e <osEventFlagsClear+0x56>
      rflags = (uint32_t)osErrorResource;
 8000b2e:	f06f 0502 	mvn.w	r5, #2
  }

  return (rflags);
 8000b32:	e004      	b.n	8000b3e <osEventFlagsClear+0x56>
    rflags = (uint32_t)osErrorParameter;
 8000b34:	f06f 0503 	mvn.w	r5, #3
 8000b38:	e001      	b.n	8000b3e <osEventFlagsClear+0x56>
 8000b3a:	f06f 0503 	mvn.w	r5, #3
}
 8000b3e:	4628      	mov	r0, r5
 8000b40:	bd70      	pop	{r4, r5, r6, pc}
 8000b42:	bf00      	nop
 8000b44:	20000088 	.word	0x20000088

08000b48 <osEventFlagsGet>:

uint32_t osEventFlagsGet (osEventFlagsId_t ef_id) {
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
  uint32_t rflags;

  if (ef_id == NULL) {
 8000b48:	b1b8      	cbz	r0, 8000b7a <osEventFlagsGet+0x32>
uint32_t osEventFlagsGet (osEventFlagsId_t ef_id) {
 8000b4a:	b508      	push	{r3, lr}
 8000b4c:	4603      	mov	r3, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000b4e:	f3ef 8205 	mrs	r2, IPSR
    rflags = 0U;
  }
  else if (IS_IRQ()) {
 8000b52:	b972      	cbnz	r2, 8000b72 <osEventFlagsGet+0x2a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000b54:	f3ef 8210 	mrs	r2, PRIMASK
 8000b58:	b912      	cbnz	r2, 8000b60 <osEventFlagsGet+0x18>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8000b5a:	f3ef 8211 	mrs	r2, BASEPRI
 8000b5e:	b11a      	cbz	r2, 8000b68 <osEventFlagsGet+0x20>
 8000b60:	4a07      	ldr	r2, [pc, #28]	; (8000b80 <osEventFlagsGet+0x38>)
 8000b62:	6812      	ldr	r2, [r2, #0]
 8000b64:	2a02      	cmp	r2, #2
 8000b66:	d004      	beq.n	8000b72 <osEventFlagsGet+0x2a>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
  }
  else {
    rflags = xEventGroupGetBits (hEventGroup);
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f000 f9c5 	bl	8000efa <xEventGroupClearBits>
 8000b70:	e002      	b.n	8000b78 <osEventFlagsGet+0x30>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8000b72:	4618      	mov	r0, r3
 8000b74:	f000 f9f6 	bl	8000f64 <xEventGroupGetBitsFromISR>
  }

  return (rflags);
}
 8000b78:	bd08      	pop	{r3, pc}
    rflags = 0U;
 8000b7a:	2000      	movs	r0, #0
}
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	20000088 	.word	0x20000088

08000b84 <osMutexAcquire>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000b84:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8000b88:	bb22      	cbnz	r2, 8000bd4 <osMutexAcquire+0x50>
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8000b8a:	b510      	push	{r4, lr}
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	460c      	mov	r4, r1
 8000b90:	f020 0001 	bic.w	r0, r0, #1
 8000b94:	f003 0301 	and.w	r3, r3, #1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000b98:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 8000b9c:	b912      	cbnz	r2, 8000ba4 <osMutexAcquire+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8000b9e:	f3ef 8211 	mrs	r2, BASEPRI
 8000ba2:	b11a      	cbz	r2, 8000bac <osMutexAcquire+0x28>
 8000ba4:	4a15      	ldr	r2, [pc, #84]	; (8000bfc <osMutexAcquire+0x78>)
 8000ba6:	6812      	ldr	r2, [r2, #0]
 8000ba8:	2a02      	cmp	r2, #2
 8000baa:	d016      	beq.n	8000bda <osMutexAcquire+0x56>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8000bac:	b1c0      	cbz	r0, 8000be0 <osMutexAcquire+0x5c>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8000bae:	b143      	cbz	r3, 8000bc2 <osMutexAcquire+0x3e>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8000bb0:	4621      	mov	r1, r4
 8000bb2:	f000 fef3 	bl	800199c <xQueueTakeMutexRecursive>
 8000bb6:	2801      	cmp	r0, #1
 8000bb8:	d015      	beq.n	8000be6 <osMutexAcquire+0x62>
        if (timeout != 0U) {
 8000bba:	b1b4      	cbz	r4, 8000bea <osMutexAcquire+0x66>
          stat = osErrorTimeout;
 8000bbc:	f06f 0001 	mvn.w	r0, #1
 8000bc0:	e012      	b.n	8000be8 <osMutexAcquire+0x64>
          stat = osErrorResource;
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8000bc2:	4621      	mov	r1, r4
 8000bc4:	f000 fe0f 	bl	80017e6 <xQueueSemaphoreTake>
 8000bc8:	2801      	cmp	r0, #1
 8000bca:	d011      	beq.n	8000bf0 <osMutexAcquire+0x6c>
        if (timeout != 0U) {
 8000bcc:	b194      	cbz	r4, 8000bf4 <osMutexAcquire+0x70>
          stat = osErrorTimeout;
 8000bce:	f06f 0001 	mvn.w	r0, #1
 8000bd2:	e009      	b.n	8000be8 <osMutexAcquire+0x64>
    stat = osErrorISR;
 8000bd4:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 8000bd8:	4770      	bx	lr
    stat = osErrorISR;
 8000bda:	f06f 0005 	mvn.w	r0, #5
 8000bde:	e003      	b.n	8000be8 <osMutexAcquire+0x64>
    stat = osErrorParameter;
 8000be0:	f06f 0003 	mvn.w	r0, #3
 8000be4:	e000      	b.n	8000be8 <osMutexAcquire+0x64>
  stat = osOK;
 8000be6:	2000      	movs	r0, #0
}
 8000be8:	bd10      	pop	{r4, pc}
          stat = osErrorResource;
 8000bea:	f06f 0002 	mvn.w	r0, #2
 8000bee:	e7fb      	b.n	8000be8 <osMutexAcquire+0x64>
  stat = osOK;
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	e7f9      	b.n	8000be8 <osMutexAcquire+0x64>
          stat = osErrorResource;
 8000bf4:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8000bf8:	e7f6      	b.n	8000be8 <osMutexAcquire+0x64>
 8000bfa:	bf00      	nop
 8000bfc:	20000088 	.word	0x20000088

08000c00 <osMutexRelease>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000c00:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8000c04:	bb02      	cbnz	r2, 8000c48 <osMutexRelease+0x48>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8000c06:	b508      	push	{r3, lr}
 8000c08:	4603      	mov	r3, r0
 8000c0a:	f020 0001 	bic.w	r0, r0, #1
 8000c0e:	f003 0301 	and.w	r3, r3, #1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000c12:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 8000c16:	b912      	cbnz	r2, 8000c1e <osMutexRelease+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8000c18:	f3ef 8211 	mrs	r2, BASEPRI
 8000c1c:	b11a      	cbz	r2, 8000c26 <osMutexRelease+0x26>
 8000c1e:	4a12      	ldr	r2, [pc, #72]	; (8000c68 <osMutexRelease+0x68>)
 8000c20:	6812      	ldr	r2, [r2, #0]
 8000c22:	2a02      	cmp	r2, #2
 8000c24:	d013      	beq.n	8000c4e <osMutexRelease+0x4e>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8000c26:	b1a8      	cbz	r0, 8000c54 <osMutexRelease+0x54>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8000c28:	b12b      	cbz	r3, 8000c36 <osMutexRelease+0x36>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8000c2a:	f000 fc97 	bl	800155c <xQueueGiveMutexRecursive>
 8000c2e:	2801      	cmp	r0, #1
 8000c30:	d113      	bne.n	8000c5a <osMutexRelease+0x5a>
  stat = osOK;
 8000c32:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8000c34:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8000c36:	2300      	movs	r3, #0
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	f000 fbc2 	bl	80013c4 <xQueueGenericSend>
 8000c40:	2801      	cmp	r0, #1
 8000c42:	d10d      	bne.n	8000c60 <osMutexRelease+0x60>
  stat = osOK;
 8000c44:	2000      	movs	r0, #0
 8000c46:	e7f5      	b.n	8000c34 <osMutexRelease+0x34>
    stat = osErrorISR;
 8000c48:	f06f 0005 	mvn.w	r0, #5
}
 8000c4c:	4770      	bx	lr
    stat = osErrorISR;
 8000c4e:	f06f 0005 	mvn.w	r0, #5
 8000c52:	e7ef      	b.n	8000c34 <osMutexRelease+0x34>
    stat = osErrorParameter;
 8000c54:	f06f 0003 	mvn.w	r0, #3
 8000c58:	e7ec      	b.n	8000c34 <osMutexRelease+0x34>
        stat = osErrorResource;
 8000c5a:	f06f 0002 	mvn.w	r0, #2
 8000c5e:	e7e9      	b.n	8000c34 <osMutexRelease+0x34>
        stat = osErrorResource;
 8000c60:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8000c64:	e7e6      	b.n	8000c34 <osMutexRelease+0x34>
 8000c66:	bf00      	nop
 8000c68:	20000088 	.word	0x20000088

08000c6c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8000c6c:	b570      	push	{r4, r5, r6, lr}
 8000c6e:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000c70:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d147      	bne.n	8000d08 <osMessageQueueNew+0x9c>
 8000c78:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000c7a:	f3ef 8310 	mrs	r3, PRIMASK
 8000c7e:	b913      	cbnz	r3, 8000c86 <osMessageQueueNew+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8000c80:	f3ef 8311 	mrs	r3, BASEPRI
 8000c84:	b11b      	cbz	r3, 8000c8e <osMessageQueueNew+0x22>
 8000c86:	4b25      	ldr	r3, [pc, #148]	; (8000d1c <osMessageQueueNew+0xb0>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	2b02      	cmp	r3, #2
 8000c8c:	d040      	beq.n	8000d10 <osMessageQueueNew+0xa4>
 8000c8e:	1e0b      	subs	r3, r1, #0
 8000c90:	bf18      	it	ne
 8000c92:	2301      	movne	r3, #1
 8000c94:	2800      	cmp	r0, #0
 8000c96:	d03d      	beq.n	8000d14 <osMessageQueueNew+0xa8>
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d03b      	beq.n	8000d14 <osMessageQueueNew+0xa8>
    mem = -1;

    if (attr != NULL) {
 8000c9c:	b36c      	cbz	r4, 8000cfa <osMessageQueueNew+0x8e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8000c9e:	68a3      	ldr	r3, [r4, #8]
 8000ca0:	b14b      	cbz	r3, 8000cb6 <osMessageQueueNew+0x4a>
 8000ca2:	68e2      	ldr	r2, [r4, #12]
 8000ca4:	2a4f      	cmp	r2, #79	; 0x4f
 8000ca6:	d906      	bls.n	8000cb6 <osMessageQueueNew+0x4a>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8000ca8:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8000caa:	b122      	cbz	r2, 8000cb6 <osMessageQueueNew+0x4a>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8000cac:	fb01 f500 	mul.w	r5, r1, r0
 8000cb0:	6966      	ldr	r6, [r4, #20]
 8000cb2:	42ae      	cmp	r6, r5
 8000cb4:	d21b      	bcs.n	8000cee <osMessageQueueNew+0x82>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8000cb6:	b173      	cbz	r3, 8000cd6 <osMessageQueueNew+0x6a>
    mem = -1;
 8000cb8:	f04f 33ff 	mov.w	r3, #4294967295

    if (mem == 1) {
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
    }
    else {
      if (mem == 0) {
 8000cbc:	bb63      	cbnz	r3, 8000d18 <osMessageQueueNew+0xac>
        hQueue = xQueueCreate (msg_count, msg_size);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f000 fb57 	bl	8001372 <xQueueGenericCreate>
 8000cc4:	4605      	mov	r5, r0
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8000cc6:	b305      	cbz	r5, 8000d0a <osMessageQueueNew+0x9e>
      if (attr != NULL) {
 8000cc8:	b104      	cbz	r4, 8000ccc <osMessageQueueNew+0x60>
        name = attr->name;
 8000cca:	6824      	ldr	r4, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 8000ccc:	4621      	mov	r1, r4
 8000cce:	4628      	mov	r0, r5
 8000cd0:	f000 fee4 	bl	8001a9c <vQueueAddToRegistry>
 8000cd4:	e019      	b.n	8000d0a <osMessageQueueNew+0x9e>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8000cd6:	68e3      	ldr	r3, [r4, #12]
 8000cd8:	b98b      	cbnz	r3, 8000cfe <osMessageQueueNew+0x92>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8000cda:	6923      	ldr	r3, [r4, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8000cdc:	b113      	cbz	r3, 8000ce4 <osMessageQueueNew+0x78>
    mem = -1;
 8000cde:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce2:	e7eb      	b.n	8000cbc <osMessageQueueNew+0x50>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8000ce4:	6963      	ldr	r3, [r4, #20]
 8000ce6:	b16b      	cbz	r3, 8000d04 <osMessageQueueNew+0x98>
    mem = -1;
 8000ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8000cec:	e7e6      	b.n	8000cbc <osMessageQueueNew+0x50>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8000cee:	2500      	movs	r5, #0
 8000cf0:	9500      	str	r5, [sp, #0]
 8000cf2:	f000 fae1 	bl	80012b8 <xQueueGenericCreateStatic>
 8000cf6:	4605      	mov	r5, r0
 8000cf8:	e7e5      	b.n	8000cc6 <osMessageQueueNew+0x5a>
      mem = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	e7de      	b.n	8000cbc <osMessageQueueNew+0x50>
    mem = -1;
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000d02:	e7db      	b.n	8000cbc <osMessageQueueNew+0x50>
          mem = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	e7d9      	b.n	8000cbc <osMessageQueueNew+0x50>
  hQueue = NULL;
 8000d08:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8000d0a:	4628      	mov	r0, r5
 8000d0c:	b002      	add	sp, #8
 8000d0e:	bd70      	pop	{r4, r5, r6, pc}
  hQueue = NULL;
 8000d10:	2500      	movs	r5, #0
 8000d12:	e7fa      	b.n	8000d0a <osMessageQueueNew+0x9e>
 8000d14:	2500      	movs	r5, #0
 8000d16:	e7f8      	b.n	8000d0a <osMessageQueueNew+0x9e>
 8000d18:	2500      	movs	r5, #0
  return ((osMessageQueueId_t)hQueue);
 8000d1a:	e7f6      	b.n	8000d0a <osMessageQueueNew+0x9e>
 8000d1c:	20000088 	.word	0x20000088

08000d20 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8000d20:	b510      	push	{r4, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000d26:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8000d2a:	b9bb      	cbnz	r3, 8000d5c <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000d2c:	f3ef 8310 	mrs	r3, PRIMASK
 8000d30:	b913      	cbnz	r3, 8000d38 <osMessageQueuePut+0x18>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8000d32:	f3ef 8311 	mrs	r3, BASEPRI
 8000d36:	b11b      	cbz	r3, 8000d40 <osMessageQueuePut+0x20>
 8000d38:	4b1e      	ldr	r3, [pc, #120]	; (8000db4 <osMessageQueuePut+0x94>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b02      	cmp	r3, #2
 8000d3e:	d00d      	beq.n	8000d5c <osMessageQueuePut+0x3c>
        portYIELD_FROM_ISR (yield);
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8000d40:	2900      	cmp	r1, #0
 8000d42:	bf18      	it	ne
 8000d44:	2800      	cmpne	r0, #0
 8000d46:	d02d      	beq.n	8000da4 <osMessageQueuePut+0x84>
      stat = osErrorParameter;
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8000d48:	2300      	movs	r3, #0
 8000d4a:	4622      	mov	r2, r4
 8000d4c:	f000 fb3a 	bl	80013c4 <xQueueGenericSend>
 8000d50:	2801      	cmp	r0, #1
 8000d52:	d02a      	beq.n	8000daa <osMessageQueuePut+0x8a>
        if (timeout != 0U) {
 8000d54:	b35c      	cbz	r4, 8000dae <osMessageQueuePut+0x8e>
          stat = osErrorTimeout;
 8000d56:	f06f 0001 	mvn.w	r0, #1
 8000d5a:	e018      	b.n	8000d8e <osMessageQueuePut+0x6e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8000d5c:	2900      	cmp	r1, #0
 8000d5e:	bf18      	it	ne
 8000d60:	2800      	cmpne	r0, #0
 8000d62:	d016      	beq.n	8000d92 <osMessageQueuePut+0x72>
 8000d64:	b9c4      	cbnz	r4, 8000d98 <osMessageQueuePut+0x78>
      yield = pdFALSE;
 8000d66:	2300      	movs	r3, #0
 8000d68:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8000d6a:	aa01      	add	r2, sp, #4
 8000d6c:	f000 fc18 	bl	80015a0 <xQueueGenericSendFromISR>
 8000d70:	2801      	cmp	r0, #1
 8000d72:	d114      	bne.n	8000d9e <osMessageQueuePut+0x7e>
        portYIELD_FROM_ISR (yield);
 8000d74:	9801      	ldr	r0, [sp, #4]
 8000d76:	b150      	cbz	r0, 8000d8e <osMessageQueuePut+0x6e>
 8000d78:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000d7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d80:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000d84:	f3bf 8f4f 	dsb	sy
 8000d88:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8000d8c:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8000d8e:	b002      	add	sp, #8
 8000d90:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 8000d92:	f06f 0003 	mvn.w	r0, #3
 8000d96:	e7fa      	b.n	8000d8e <osMessageQueuePut+0x6e>
 8000d98:	f06f 0003 	mvn.w	r0, #3
 8000d9c:	e7f7      	b.n	8000d8e <osMessageQueuePut+0x6e>
        stat = osErrorResource;
 8000d9e:	f06f 0002 	mvn.w	r0, #2
 8000da2:	e7f4      	b.n	8000d8e <osMessageQueuePut+0x6e>
      stat = osErrorParameter;
 8000da4:	f06f 0003 	mvn.w	r0, #3
 8000da8:	e7f1      	b.n	8000d8e <osMessageQueuePut+0x6e>
  stat = osOK;
 8000daa:	2000      	movs	r0, #0
 8000dac:	e7ef      	b.n	8000d8e <osMessageQueuePut+0x6e>
          stat = osErrorResource;
 8000dae:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8000db2:	e7ec      	b.n	8000d8e <osMessageQueuePut+0x6e>
 8000db4:	20000088 	.word	0x20000088

08000db8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8000db8:	b510      	push	{r4, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000dbe:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8000dc2:	b9b3      	cbnz	r3, 8000df2 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000dc4:	f3ef 8310 	mrs	r3, PRIMASK
 8000dc8:	b913      	cbnz	r3, 8000dd0 <osMessageQueueGet+0x18>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8000dca:	f3ef 8311 	mrs	r3, BASEPRI
 8000dce:	b11b      	cbz	r3, 8000dd8 <osMessageQueueGet+0x20>
 8000dd0:	4b1e      	ldr	r3, [pc, #120]	; (8000e4c <osMessageQueueGet+0x94>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d00c      	beq.n	8000df2 <osMessageQueueGet+0x3a>
        portYIELD_FROM_ISR (yield);
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8000dd8:	2900      	cmp	r1, #0
 8000dda:	bf18      	it	ne
 8000ddc:	2800      	cmpne	r0, #0
 8000dde:	d02c      	beq.n	8000e3a <osMessageQueueGet+0x82>
      stat = osErrorParameter;
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8000de0:	4622      	mov	r2, r4
 8000de2:	f000 fc4b 	bl	800167c <xQueueReceive>
 8000de6:	2801      	cmp	r0, #1
 8000de8:	d02a      	beq.n	8000e40 <osMessageQueueGet+0x88>
        if (timeout != 0U) {
 8000dea:	b35c      	cbz	r4, 8000e44 <osMessageQueueGet+0x8c>
          stat = osErrorTimeout;
 8000dec:	f06f 0001 	mvn.w	r0, #1
 8000df0:	e018      	b.n	8000e24 <osMessageQueueGet+0x6c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8000df2:	2900      	cmp	r1, #0
 8000df4:	bf18      	it	ne
 8000df6:	2800      	cmpne	r0, #0
 8000df8:	d016      	beq.n	8000e28 <osMessageQueueGet+0x70>
 8000dfa:	b9c4      	cbnz	r4, 8000e2e <osMessageQueueGet+0x76>
      yield = pdFALSE;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	9301      	str	r3, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8000e00:	aa01      	add	r2, sp, #4
 8000e02:	f000 fded 	bl	80019e0 <xQueueReceiveFromISR>
 8000e06:	2801      	cmp	r0, #1
 8000e08:	d114      	bne.n	8000e34 <osMessageQueueGet+0x7c>
        portYIELD_FROM_ISR (yield);
 8000e0a:	9801      	ldr	r0, [sp, #4]
 8000e0c:	b150      	cbz	r0, 8000e24 <osMessageQueueGet+0x6c>
 8000e0e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000e12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e16:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000e1a:	f3bf 8f4f 	dsb	sy
 8000e1e:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8000e22:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8000e24:	b002      	add	sp, #8
 8000e26:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 8000e28:	f06f 0003 	mvn.w	r0, #3
 8000e2c:	e7fa      	b.n	8000e24 <osMessageQueueGet+0x6c>
 8000e2e:	f06f 0003 	mvn.w	r0, #3
 8000e32:	e7f7      	b.n	8000e24 <osMessageQueueGet+0x6c>
        stat = osErrorResource;
 8000e34:	f06f 0002 	mvn.w	r0, #2
 8000e38:	e7f4      	b.n	8000e24 <osMessageQueueGet+0x6c>
      stat = osErrorParameter;
 8000e3a:	f06f 0003 	mvn.w	r0, #3
 8000e3e:	e7f1      	b.n	8000e24 <osMessageQueueGet+0x6c>
  stat = osOK;
 8000e40:	2000      	movs	r0, #0
 8000e42:	e7ef      	b.n	8000e24 <osMessageQueueGet+0x6c>
          stat = osErrorResource;
 8000e44:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8000e48:	e7ec      	b.n	8000e24 <osMessageQueueGet+0x6c>
 8000e4a:	bf00      	nop
 8000e4c:	20000088 	.word	0x20000088

08000e50 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8000e50:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8000e52:	4b05      	ldr	r3, [pc, #20]	; (8000e68 <vApplicationGetIdleTaskMemory+0x18>)
 8000e54:	1d1c      	adds	r4, r3, #4
 8000e56:	6004      	str	r4, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8000e58:	3360      	adds	r3, #96	; 0x60
 8000e5a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8000e5c:	2380      	movs	r3, #128	; 0x80
 8000e5e:	6013      	str	r3, [r2, #0]
}
 8000e60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	20000088 	.word	0x20000088

08000e6c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8000e6c:	b410      	push	{r4}
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <vApplicationGetTimerTaskMemory+0x1c>)
 8000e70:	f503 7418 	add.w	r4, r3, #608	; 0x260
 8000e74:	6004      	str	r4, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8000e76:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8000e7a:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8000e7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e80:	6013      	str	r3, [r2, #0]
}
 8000e82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	20000088 	.word	0x20000088

08000e8c <xEventGroupCreateStatic>:
	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8000e8c:	b190      	cbz	r0, 8000eb4 <xEventGroupCreateStatic+0x28>
	{
 8000e8e:	b510      	push	{r4, lr}
 8000e90:	b082      	sub	sp, #8
 8000e92:	4604      	mov	r4, r0
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8000e94:	2320      	movs	r3, #32
 8000e96:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8000e98:	9b01      	ldr	r3, [sp, #4]
 8000e9a:	2b20      	cmp	r3, #32
 8000e9c:	d015      	beq.n	8000eca <xEventGroupCreateStatic+0x3e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ea2:	b672      	cpsid	i
 8000ea4:	f383 8811 	msr	BASEPRI, r3
 8000ea8:	f3bf 8f6f 	isb	sy
 8000eac:	f3bf 8f4f 	dsb	sy
 8000eb0:	b662      	cpsie	i
 8000eb2:	e7fe      	b.n	8000eb2 <xEventGroupCreateStatic+0x26>
 8000eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000eb8:	b672      	cpsid	i
 8000eba:	f383 8811 	msr	BASEPRI, r3
 8000ebe:	f3bf 8f6f 	isb	sy
 8000ec2:	f3bf 8f4f 	dsb	sy
 8000ec6:	b662      	cpsie	i
		configASSERT( pxEventGroupBuffer );
 8000ec8:	e7fe      	b.n	8000ec8 <xEventGroupCreateStatic+0x3c>
		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */

		if( pxEventBits != NULL )
		{
			pxEventBits->uxEventBits = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f840 3b04 	str.w	r3, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8000ed0:	f000 f8b0 	bl	8001034 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	7723      	strb	r3, [r4, #28]
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
	}
 8000ed8:	4620      	mov	r0, r4
 8000eda:	b002      	add	sp, #8
 8000edc:	bd10      	pop	{r4, pc}

08000ede <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8000ede:	b538      	push	{r3, r4, r5, lr}
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8000ee0:	2020      	movs	r0, #32
 8000ee2:	f002 fa59 	bl	8003398 <pvPortMalloc>

		if( pxEventBits != NULL )
 8000ee6:	4604      	mov	r4, r0
 8000ee8:	b128      	cbz	r0, 8000ef6 <xEventGroupCreate+0x18>
		{
			pxEventBits->uxEventBits = 0;
 8000eea:	2500      	movs	r5, #0
 8000eec:	f840 5b04 	str.w	r5, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8000ef0:	f000 f8a0 	bl	8001034 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8000ef4:	7725      	strb	r5, [r4, #28]
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
	}
 8000ef6:	4620      	mov	r0, r4
 8000ef8:	bd38      	pop	{r3, r4, r5, pc}

08000efa <xEventGroupClearBits>:
EventGroup_t *pxEventBits = xEventGroup;
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8000efa:	b180      	cbz	r0, 8000f1e <xEventGroupClearBits+0x24>
{
 8000efc:	b570      	push	{r4, r5, r6, lr}
 8000efe:	460c      	mov	r4, r1
 8000f00:	4605      	mov	r5, r0
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8000f02:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
 8000f06:	d015      	beq.n	8000f34 <xEventGroupClearBits+0x3a>
 8000f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f0c:	b672      	cpsid	i
 8000f0e:	f383 8811 	msr	BASEPRI, r3
 8000f12:	f3bf 8f6f 	isb	sy
 8000f16:	f3bf 8f4f 	dsb	sy
 8000f1a:	b662      	cpsie	i
 8000f1c:	e7fe      	b.n	8000f1c <xEventGroupClearBits+0x22>
 8000f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f22:	b672      	cpsid	i
 8000f24:	f383 8811 	msr	BASEPRI, r3
 8000f28:	f3bf 8f6f 	isb	sy
 8000f2c:	f3bf 8f4f 	dsb	sy
 8000f30:	b662      	cpsie	i
	configASSERT( xEventGroup );
 8000f32:	e7fe      	b.n	8000f32 <xEventGroupClearBits+0x38>

	taskENTER_CRITICAL();
 8000f34:	f002 f8a6 	bl	8003084 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8000f38:	682e      	ldr	r6, [r5, #0]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8000f3a:	ea26 0404 	bic.w	r4, r6, r4
 8000f3e:	602c      	str	r4, [r5, #0]
	}
	taskEXIT_CRITICAL();
 8000f40:	f002 f8c6 	bl	80030d0 <vPortExitCritical>

	return uxReturn;
}
 8000f44:	4630      	mov	r0, r6
 8000f46:	bd70      	pop	{r4, r5, r6, pc}

08000f48 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8000f48:	b508      	push	{r3, lr}
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8000f4a:	f7ff ffd6 	bl	8000efa <xEventGroupClearBits>
}
 8000f4e:	bd08      	pop	{r3, pc}

08000f50 <xEventGroupClearBitsFromISR>:
	{
 8000f50:	b508      	push	{r3, lr}
 8000f52:	460a      	mov	r2, r1
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8000f54:	2300      	movs	r3, #0
 8000f56:	4601      	mov	r1, r0
 8000f58:	4801      	ldr	r0, [pc, #4]	; (8000f60 <xEventGroupClearBitsFromISR+0x10>)
 8000f5a:	f002 f813 	bl	8002f84 <xTimerPendFunctionCallFromISR>
	}
 8000f5e:	bd08      	pop	{r3, pc}
 8000f60:	08000f49 	.word	0x08000f49

08000f64 <xEventGroupGetBitsFromISR>:

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8000f64:	f3ef 8311 	mrs	r3, BASEPRI
 8000f68:	f04f 0250 	mov.w	r2, #80	; 0x50
 8000f6c:	b672      	cpsid	i
 8000f6e:	f382 8811 	msr	BASEPRI, r2
 8000f72:	f3bf 8f6f 	isb	sy
 8000f76:	f3bf 8f4f 	dsb	sy
 8000f7a:	b662      	cpsie	i
		uxReturn = pxEventBits->uxEventBits;
 8000f7c:	6800      	ldr	r0, [r0, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000f7e:	f383 8811 	msr	BASEPRI, r3
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8000f82:	4770      	bx	lr

08000f84 <xEventGroupSetBits>:
{
 8000f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( xEventGroup );
 8000f86:	b178      	cbz	r0, 8000fa8 <xEventGroupSetBits+0x24>
 8000f88:	460d      	mov	r5, r1
 8000f8a:	4604      	mov	r4, r0
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8000f8c:	f011 477f 	ands.w	r7, r1, #4278190080	; 0xff000000
 8000f90:	d015      	beq.n	8000fbe <xEventGroupSetBits+0x3a>
	__asm volatile
 8000f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f96:	b672      	cpsid	i
 8000f98:	f383 8811 	msr	BASEPRI, r3
 8000f9c:	f3bf 8f6f 	isb	sy
 8000fa0:	f3bf 8f4f 	dsb	sy
 8000fa4:	b662      	cpsie	i
 8000fa6:	e7fe      	b.n	8000fa6 <xEventGroupSetBits+0x22>
 8000fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fac:	b672      	cpsid	i
 8000fae:	f383 8811 	msr	BASEPRI, r3
 8000fb2:	f3bf 8f6f 	isb	sy
 8000fb6:	f3bf 8f4f 	dsb	sy
 8000fba:	b662      	cpsie	i
	configASSERT( xEventGroup );
 8000fbc:	e7fe      	b.n	8000fbc <xEventGroupSetBits+0x38>
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000fbe:	f100 060c 	add.w	r6, r0, #12
	vTaskSuspendAll();
 8000fc2:	f000 ffe1 	bl	8001f88 <vTaskSuspendAll>
		pxListItem = listGET_HEAD_ENTRY( pxList );
 8000fc6:	6920      	ldr	r0, [r4, #16]
		pxEventBits->uxEventBits |= uxBitsToSet;
 8000fc8:	6823      	ldr	r3, [r4, #0]
 8000fca:	432b      	orrs	r3, r5
 8000fcc:	6023      	str	r3, [r4, #0]
		while( pxListItem != pxListEnd )
 8000fce:	e00a      	b.n	8000fe6 <xEventGroupSetBits+0x62>
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8000fd0:	6821      	ldr	r1, [r4, #0]
 8000fd2:	ea32 0101 	bics.w	r1, r2, r1
 8000fd6:	d105      	bne.n	8000fe4 <xEventGroupSetBits+0x60>
 8000fd8:	e011      	b.n	8000ffe <xEventGroupSetBits+0x7a>
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8000fda:	6821      	ldr	r1, [r4, #0]
 8000fdc:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8000fe0:	f001 f9dc 	bl	800239c <vTaskRemoveFromUnorderedEventList>
{
 8000fe4:	4628      	mov	r0, r5
		while( pxListItem != pxListEnd )
 8000fe6:	42b0      	cmp	r0, r6
 8000fe8:	d00e      	beq.n	8001008 <xEventGroupSetBits+0x84>
			pxNext = listGET_NEXT( pxListItem );
 8000fea:	6845      	ldr	r5, [r0, #4]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8000fec:	6803      	ldr	r3, [r0, #0]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8000fee:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8000ff2:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8000ff6:	d1eb      	bne.n	8000fd0 <xEventGroupSetBits+0x4c>
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8000ff8:	6821      	ldr	r1, [r4, #0]
 8000ffa:	4211      	tst	r1, r2
 8000ffc:	d0f2      	beq.n	8000fe4 <xEventGroupSetBits+0x60>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8000ffe:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001002:	d0ea      	beq.n	8000fda <xEventGroupSetBits+0x56>
					uxBitsToClear |= uxBitsWaitedFor;
 8001004:	4317      	orrs	r7, r2
 8001006:	e7e8      	b.n	8000fda <xEventGroupSetBits+0x56>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8001008:	6823      	ldr	r3, [r4, #0]
 800100a:	ea23 0307 	bic.w	r3, r3, r7
 800100e:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 8001010:	f001 f858 	bl	80020c4 <xTaskResumeAll>
}
 8001014:	6820      	ldr	r0, [r4, #0]
 8001016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001018 <vEventGroupSetBitsCallback>:
{
 8001018:	b508      	push	{r3, lr}
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800101a:	f7ff ffb3 	bl	8000f84 <xEventGroupSetBits>
}
 800101e:	bd08      	pop	{r3, pc}

08001020 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8001020:	b508      	push	{r3, lr}
 8001022:	4613      	mov	r3, r2
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8001024:	460a      	mov	r2, r1
 8001026:	4601      	mov	r1, r0
 8001028:	4801      	ldr	r0, [pc, #4]	; (8001030 <xEventGroupSetBitsFromISR+0x10>)
 800102a:	f001 ffab 	bl	8002f84 <xTimerPendFunctionCallFromISR>

		return xReturn;
	}
 800102e:	bd08      	pop	{r3, pc}
 8001030:	08001019 	.word	0x08001019

08001034 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001034:	f100 0308 	add.w	r3, r0, #8
 8001038:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800103a:	f04f 32ff 	mov.w	r2, #4294967295
 800103e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001040:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001042:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001044:	2300      	movs	r3, #0
 8001046:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001048:	4770      	bx	lr

0800104a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800104a:	2300      	movs	r3, #0
 800104c:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800104e:	4770      	bx	lr

08001050 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001050:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001052:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001054:	689a      	ldr	r2, [r3, #8]
 8001056:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001058:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800105a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800105c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800105e:	6803      	ldr	r3, [r0, #0]
 8001060:	3301      	adds	r3, #1
 8001062:	6003      	str	r3, [r0, #0]
}
 8001064:	4770      	bx	lr

08001066 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001066:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001068:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800106a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800106e:	d011      	beq.n	8001094 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001070:	f100 0308 	add.w	r3, r0, #8
 8001074:	461c      	mov	r4, r3
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	42aa      	cmp	r2, r5
 800107c:	d9fa      	bls.n	8001074 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800107e:	6863      	ldr	r3, [r4, #4]
 8001080:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001082:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001084:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001086:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001088:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800108a:	6803      	ldr	r3, [r0, #0]
 800108c:	3301      	adds	r3, #1
 800108e:	6003      	str	r3, [r0, #0]
}
 8001090:	bc30      	pop	{r4, r5}
 8001092:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8001094:	6904      	ldr	r4, [r0, #16]
 8001096:	e7f2      	b.n	800107e <vListInsert+0x18>

08001098 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001098:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800109a:	6841      	ldr	r1, [r0, #4]
 800109c:	6882      	ldr	r2, [r0, #8]
 800109e:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80010a0:	6841      	ldr	r1, [r0, #4]
 80010a2:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80010a4:	685a      	ldr	r2, [r3, #4]
 80010a6:	4282      	cmp	r2, r0
 80010a8:	d006      	beq.n	80010b8 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80010aa:	2200      	movs	r2, #0
 80010ac:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	3a01      	subs	r2, #1
 80010b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80010b4:	6818      	ldr	r0, [r3, #0]
}
 80010b6:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80010b8:	6882      	ldr	r2, [r0, #8]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	e7f5      	b.n	80010aa <uxListRemove+0x12>

080010be <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80010be:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80010c0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80010c2:	b118      	cbz	r0, 80010cc <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	6818      	ldr	r0, [r3, #0]
 80010c8:	f1c0 0038 	rsb	r0, r0, #56	; 0x38
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 80010cc:	4770      	bx	lr

080010ce <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80010ce:	b510      	push	{r4, lr}
 80010d0:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80010d2:	f001 ffd7 	bl	8003084 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80010d6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80010d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80010da:	429a      	cmp	r2, r3
 80010dc:	d004      	beq.n	80010e8 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 80010de:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 80010e0:	f001 fff6 	bl	80030d0 <vPortExitCritical>

	return xReturn;
}
 80010e4:	4620      	mov	r0, r4
 80010e6:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 80010e8:	2401      	movs	r4, #1
 80010ea:	e7f9      	b.n	80010e0 <prvIsQueueFull+0x12>

080010ec <prvIsQueueEmpty>:
{
 80010ec:	b510      	push	{r4, lr}
 80010ee:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80010f0:	f001 ffc8 	bl	8003084 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80010f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80010f6:	b923      	cbnz	r3, 8001102 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 80010f8:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 80010fa:	f001 ffe9 	bl	80030d0 <vPortExitCritical>
}
 80010fe:	4620      	mov	r0, r4
 8001100:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 8001102:	2400      	movs	r4, #0
 8001104:	e7f9      	b.n	80010fa <prvIsQueueEmpty+0xe>

08001106 <prvCopyDataToQueue>:
{
 8001106:	b570      	push	{r4, r5, r6, lr}
 8001108:	4604      	mov	r4, r0
 800110a:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800110c:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800110e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001110:	b95a      	cbnz	r2, 800112a <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001112:	6803      	ldr	r3, [r0, #0]
 8001114:	b11b      	cbz	r3, 800111e <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8001116:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001118:	3601      	adds	r6, #1
 800111a:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800111c:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800111e:	6880      	ldr	r0, [r0, #8]
 8001120:	f001 fa40 	bl	80025a4 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001124:	2300      	movs	r3, #0
 8001126:	60a3      	str	r3, [r4, #8]
 8001128:	e7f6      	b.n	8001118 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 800112a:	b96d      	cbnz	r5, 8001148 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800112c:	6840      	ldr	r0, [r0, #4]
 800112e:	f005 f812 	bl	8006156 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001132:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001134:	6863      	ldr	r3, [r4, #4]
 8001136:	4413      	add	r3, r2
 8001138:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800113a:	68a2      	ldr	r2, [r4, #8]
 800113c:	4293      	cmp	r3, r2
 800113e:	d319      	bcc.n	8001174 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001140:	6823      	ldr	r3, [r4, #0]
 8001142:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8001144:	4628      	mov	r0, r5
 8001146:	e7e7      	b.n	8001118 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001148:	68c0      	ldr	r0, [r0, #12]
 800114a:	f005 f804 	bl	8006156 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800114e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001150:	4251      	negs	r1, r2
 8001152:	68e3      	ldr	r3, [r4, #12]
 8001154:	1a9b      	subs	r3, r3, r2
 8001156:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001158:	6822      	ldr	r2, [r4, #0]
 800115a:	4293      	cmp	r3, r2
 800115c:	d202      	bcs.n	8001164 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800115e:	68a3      	ldr	r3, [r4, #8]
 8001160:	440b      	add	r3, r1
 8001162:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8001164:	2d02      	cmp	r5, #2
 8001166:	d001      	beq.n	800116c <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8001168:	2000      	movs	r0, #0
 800116a:	e7d5      	b.n	8001118 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800116c:	b126      	cbz	r6, 8001178 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 800116e:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8001170:	2000      	movs	r0, #0
 8001172:	e7d1      	b.n	8001118 <prvCopyDataToQueue+0x12>
 8001174:	4628      	mov	r0, r5
 8001176:	e7cf      	b.n	8001118 <prvCopyDataToQueue+0x12>
 8001178:	2000      	movs	r0, #0
 800117a:	e7cd      	b.n	8001118 <prvCopyDataToQueue+0x12>

0800117c <prvCopyDataFromQueue>:
{
 800117c:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800117e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001180:	b16a      	cbz	r2, 800119e <prvCopyDataFromQueue+0x22>
{
 8001182:	b510      	push	{r4, lr}
 8001184:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001186:	68d9      	ldr	r1, [r3, #12]
 8001188:	4411      	add	r1, r2
 800118a:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800118c:	689c      	ldr	r4, [r3, #8]
 800118e:	42a1      	cmp	r1, r4
 8001190:	d301      	bcc.n	8001196 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001192:	6819      	ldr	r1, [r3, #0]
 8001194:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001196:	68d9      	ldr	r1, [r3, #12]
 8001198:	f004 ffdd 	bl	8006156 <memcpy>
}
 800119c:	bd10      	pop	{r4, pc}
 800119e:	4770      	bx	lr

080011a0 <prvUnlockQueue>:
{
 80011a0:	b538      	push	{r3, r4, r5, lr}
 80011a2:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 80011a4:	f001 ff6e 	bl	8003084 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80011a8:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 80011ac:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80011ae:	e001      	b.n	80011b4 <prvUnlockQueue+0x14>
			--cTxLock;
 80011b0:	3c01      	subs	r4, #1
 80011b2:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80011b4:	2c00      	cmp	r4, #0
 80011b6:	dd0a      	ble.n	80011ce <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80011b8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80011ba:	b143      	cbz	r3, 80011ce <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80011bc:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80011c0:	f001 f8a6 	bl	8002310 <xTaskRemoveFromEventList>
 80011c4:	2800      	cmp	r0, #0
 80011c6:	d0f3      	beq.n	80011b0 <prvUnlockQueue+0x10>
						vTaskMissedYield();
 80011c8:	f001 f97e 	bl	80024c8 <vTaskMissedYield>
 80011cc:	e7f0      	b.n	80011b0 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 80011ce:	23ff      	movs	r3, #255	; 0xff
 80011d0:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 80011d4:	f001 ff7c 	bl	80030d0 <vPortExitCritical>
	taskENTER_CRITICAL();
 80011d8:	f001 ff54 	bl	8003084 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80011dc:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 80011e0:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80011e2:	e001      	b.n	80011e8 <prvUnlockQueue+0x48>
				--cRxLock;
 80011e4:	3c01      	subs	r4, #1
 80011e6:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80011e8:	2c00      	cmp	r4, #0
 80011ea:	dd0a      	ble.n	8001202 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80011ec:	692b      	ldr	r3, [r5, #16]
 80011ee:	b143      	cbz	r3, 8001202 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80011f0:	f105 0010 	add.w	r0, r5, #16
 80011f4:	f001 f88c 	bl	8002310 <xTaskRemoveFromEventList>
 80011f8:	2800      	cmp	r0, #0
 80011fa:	d0f3      	beq.n	80011e4 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 80011fc:	f001 f964 	bl	80024c8 <vTaskMissedYield>
 8001200:	e7f0      	b.n	80011e4 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8001202:	23ff      	movs	r3, #255	; 0xff
 8001204:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8001208:	f001 ff62 	bl	80030d0 <vPortExitCritical>
}
 800120c:	bd38      	pop	{r3, r4, r5, pc}

0800120e <xQueueGenericReset>:
{
 800120e:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8001210:	b1e0      	cbz	r0, 800124c <xQueueGenericReset+0x3e>
 8001212:	460d      	mov	r5, r1
 8001214:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8001216:	f001 ff35 	bl	8003084 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800121a:	6823      	ldr	r3, [r4, #0]
 800121c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800121e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001220:	fb01 3002 	mla	r0, r1, r2, r3
 8001224:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001226:	2000      	movs	r0, #0
 8001228:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800122a:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800122c:	3a01      	subs	r2, #1
 800122e:	fb02 3301 	mla	r3, r2, r1, r3
 8001232:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001234:	23ff      	movs	r3, #255	; 0xff
 8001236:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800123a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800123e:	bb0d      	cbnz	r5, 8001284 <xQueueGenericReset+0x76>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001240:	6923      	ldr	r3, [r4, #16]
 8001242:	b973      	cbnz	r3, 8001262 <xQueueGenericReset+0x54>
	taskEXIT_CRITICAL();
 8001244:	f001 ff44 	bl	80030d0 <vPortExitCritical>
}
 8001248:	2001      	movs	r0, #1
 800124a:	bd38      	pop	{r3, r4, r5, pc}
 800124c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001250:	b672      	cpsid	i
 8001252:	f383 8811 	msr	BASEPRI, r3
 8001256:	f3bf 8f6f 	isb	sy
 800125a:	f3bf 8f4f 	dsb	sy
 800125e:	b662      	cpsie	i
	configASSERT( pxQueue );
 8001260:	e7fe      	b.n	8001260 <xQueueGenericReset+0x52>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001262:	f104 0010 	add.w	r0, r4, #16
 8001266:	f001 f853 	bl	8002310 <xTaskRemoveFromEventList>
 800126a:	2800      	cmp	r0, #0
 800126c:	d0ea      	beq.n	8001244 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 800126e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001276:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800127a:	f3bf 8f4f 	dsb	sy
 800127e:	f3bf 8f6f 	isb	sy
 8001282:	e7df      	b.n	8001244 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001284:	f104 0010 	add.w	r0, r4, #16
 8001288:	f7ff fed4 	bl	8001034 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800128c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001290:	f7ff fed0 	bl	8001034 <vListInitialise>
 8001294:	e7d6      	b.n	8001244 <xQueueGenericReset+0x36>

08001296 <prvInitialiseNewQueue>:
{
 8001296:	b538      	push	{r3, r4, r5, lr}
 8001298:	461d      	mov	r5, r3
 800129a:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 800129c:	460b      	mov	r3, r1
 800129e:	b949      	cbnz	r1, 80012b4 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80012a0:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80012a2:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80012a4:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80012a6:	2101      	movs	r1, #1
 80012a8:	4620      	mov	r0, r4
 80012aa:	f7ff ffb0 	bl	800120e <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80012ae:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 80012b2:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80012b4:	6022      	str	r2, [r4, #0]
 80012b6:	e7f4      	b.n	80012a2 <prvInitialiseNewQueue+0xc>

080012b8 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80012b8:	b950      	cbnz	r0, 80012d0 <xQueueGenericCreateStatic+0x18>
 80012ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012be:	b672      	cpsid	i
 80012c0:	f383 8811 	msr	BASEPRI, r3
 80012c4:	f3bf 8f6f 	isb	sy
 80012c8:	f3bf 8f4f 	dsb	sy
 80012cc:	b662      	cpsie	i
 80012ce:	e7fe      	b.n	80012ce <xQueueGenericCreateStatic+0x16>
	{
 80012d0:	b510      	push	{r4, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	461c      	mov	r4, r3
		configASSERT( pxStaticQueue != NULL );
 80012d6:	b193      	cbz	r3, 80012fe <xQueueGenericCreateStatic+0x46>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80012d8:	1e0b      	subs	r3, r1, #0
 80012da:	bf18      	it	ne
 80012dc:	2301      	movne	r3, #1
 80012de:	2a00      	cmp	r2, #0
 80012e0:	bf08      	it	eq
 80012e2:	f043 0301 	orreq.w	r3, r3, #1
 80012e6:	b9ab      	cbnz	r3, 8001314 <xQueueGenericCreateStatic+0x5c>
 80012e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012ec:	b672      	cpsid	i
 80012ee:	f383 8811 	msr	BASEPRI, r3
 80012f2:	f3bf 8f6f 	isb	sy
 80012f6:	f3bf 8f4f 	dsb	sy
 80012fa:	b662      	cpsie	i
 80012fc:	e7fe      	b.n	80012fc <xQueueGenericCreateStatic+0x44>
 80012fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001302:	b672      	cpsid	i
 8001304:	f383 8811 	msr	BASEPRI, r3
 8001308:	f3bf 8f6f 	isb	sy
 800130c:	f3bf 8f4f 	dsb	sy
 8001310:	b662      	cpsie	i
		configASSERT( pxStaticQueue != NULL );
 8001312:	e7fe      	b.n	8001312 <xQueueGenericCreateStatic+0x5a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001314:	fab1 f381 	clz	r3, r1
 8001318:	095b      	lsrs	r3, r3, #5
 800131a:	2a00      	cmp	r2, #0
 800131c:	bf18      	it	ne
 800131e:	f043 0301 	orrne.w	r3, r3, #1
 8001322:	b953      	cbnz	r3, 800133a <xQueueGenericCreateStatic+0x82>
 8001324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001328:	b672      	cpsid	i
 800132a:	f383 8811 	msr	BASEPRI, r3
 800132e:	f3bf 8f6f 	isb	sy
 8001332:	f3bf 8f4f 	dsb	sy
 8001336:	b662      	cpsie	i
 8001338:	e7fe      	b.n	8001338 <xQueueGenericCreateStatic+0x80>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800133a:	2350      	movs	r3, #80	; 0x50
 800133c:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 800133e:	9b03      	ldr	r3, [sp, #12]
 8001340:	2b50      	cmp	r3, #80	; 0x50
 8001342:	d00a      	beq.n	800135a <xQueueGenericCreateStatic+0xa2>
 8001344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001348:	b672      	cpsid	i
 800134a:	f383 8811 	msr	BASEPRI, r3
 800134e:	f3bf 8f6f 	isb	sy
 8001352:	f3bf 8f4f 	dsb	sy
 8001356:	b662      	cpsie	i
 8001358:	e7fe      	b.n	8001358 <xQueueGenericCreateStatic+0xa0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800135a:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800135c:	2301      	movs	r3, #1
 800135e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001362:	9400      	str	r4, [sp, #0]
 8001364:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8001368:	f7ff ff95 	bl	8001296 <prvInitialiseNewQueue>
	}
 800136c:	4620      	mov	r0, r4
 800136e:	b004      	add	sp, #16
 8001370:	bd10      	pop	{r4, pc}

08001372 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001372:	b950      	cbnz	r0, 800138a <xQueueGenericCreate+0x18>
 8001374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001378:	b672      	cpsid	i
 800137a:	f383 8811 	msr	BASEPRI, r3
 800137e:	f3bf 8f6f 	isb	sy
 8001382:	f3bf 8f4f 	dsb	sy
 8001386:	b662      	cpsie	i
 8001388:	e7fe      	b.n	8001388 <xQueueGenericCreate+0x16>
	{
 800138a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800138c:	b083      	sub	sp, #12
 800138e:	460c      	mov	r4, r1
 8001390:	4615      	mov	r5, r2
 8001392:	4607      	mov	r7, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 8001394:	b1a1      	cbz	r1, 80013c0 <xQueueGenericCreate+0x4e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001396:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800139a:	3050      	adds	r0, #80	; 0x50
 800139c:	f001 fffc 	bl	8003398 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80013a0:	4606      	mov	r6, r0
 80013a2:	b150      	cbz	r0, 80013ba <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80013a4:	2300      	movs	r3, #0
 80013a6:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80013aa:	9000      	str	r0, [sp, #0]
 80013ac:	462b      	mov	r3, r5
 80013ae:	f100 0250 	add.w	r2, r0, #80	; 0x50
 80013b2:	4621      	mov	r1, r4
 80013b4:	4638      	mov	r0, r7
 80013b6:	f7ff ff6e 	bl	8001296 <prvInitialiseNewQueue>
	}
 80013ba:	4630      	mov	r0, r6
 80013bc:	b003      	add	sp, #12
 80013be:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xQueueSizeInBytes = ( size_t ) 0;
 80013c0:	4608      	mov	r0, r1
 80013c2:	e7ea      	b.n	800139a <xQueueGenericCreate+0x28>

080013c4 <xQueueGenericSend>:
{
 80013c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013c6:	b085      	sub	sp, #20
 80013c8:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80013ca:	b198      	cbz	r0, 80013f4 <xQueueGenericSend+0x30>
 80013cc:	460f      	mov	r7, r1
 80013ce:	461d      	mov	r5, r3
 80013d0:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80013d2:	b1d1      	cbz	r1, 800140a <xQueueGenericSend+0x46>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80013d4:	2d02      	cmp	r5, #2
 80013d6:	d126      	bne.n	8001426 <xQueueGenericSend+0x62>
 80013d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d023      	beq.n	8001426 <xQueueGenericSend+0x62>
 80013de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013e2:	b672      	cpsid	i
 80013e4:	f383 8811 	msr	BASEPRI, r3
 80013e8:	f3bf 8f6f 	isb	sy
 80013ec:	f3bf 8f4f 	dsb	sy
 80013f0:	b662      	cpsie	i
 80013f2:	e7fe      	b.n	80013f2 <xQueueGenericSend+0x2e>
 80013f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013f8:	b672      	cpsid	i
 80013fa:	f383 8811 	msr	BASEPRI, r3
 80013fe:	f3bf 8f6f 	isb	sy
 8001402:	f3bf 8f4f 	dsb	sy
 8001406:	b662      	cpsie	i
	configASSERT( pxQueue );
 8001408:	e7fe      	b.n	8001408 <xQueueGenericSend+0x44>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800140a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800140c:	2b00      	cmp	r3, #0
 800140e:	d0e1      	beq.n	80013d4 <xQueueGenericSend+0x10>
 8001410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001414:	b672      	cpsid	i
 8001416:	f383 8811 	msr	BASEPRI, r3
 800141a:	f3bf 8f6f 	isb	sy
 800141e:	f3bf 8f4f 	dsb	sy
 8001422:	b662      	cpsie	i
 8001424:	e7fe      	b.n	8001424 <xQueueGenericSend+0x60>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001426:	f001 f85d 	bl	80024e4 <xTaskGetSchedulerState>
 800142a:	4606      	mov	r6, r0
 800142c:	b968      	cbnz	r0, 800144a <xQueueGenericSend+0x86>
 800142e:	9b01      	ldr	r3, [sp, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d04a      	beq.n	80014ca <xQueueGenericSend+0x106>
 8001434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001438:	b672      	cpsid	i
 800143a:	f383 8811 	msr	BASEPRI, r3
 800143e:	f3bf 8f6f 	isb	sy
 8001442:	f3bf 8f4f 	dsb	sy
 8001446:	b662      	cpsie	i
 8001448:	e7fe      	b.n	8001448 <xQueueGenericSend+0x84>
 800144a:	2600      	movs	r6, #0
 800144c:	e03d      	b.n	80014ca <xQueueGenericSend+0x106>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800144e:	462a      	mov	r2, r5
 8001450:	4639      	mov	r1, r7
 8001452:	4620      	mov	r0, r4
 8001454:	f7ff fe57 	bl	8001106 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001458:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800145a:	b97b      	cbnz	r3, 800147c <xQueueGenericSend+0xb8>
					else if( xYieldRequired != pdFALSE )
 800145c:	b148      	cbz	r0, 8001472 <xQueueGenericSend+0xae>
						queueYIELD_IF_USING_PREEMPTION();
 800145e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001466:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800146a:	f3bf 8f4f 	dsb	sy
 800146e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8001472:	f001 fe2d 	bl	80030d0 <vPortExitCritical>
				return pdPASS;
 8001476:	2001      	movs	r0, #1
}
 8001478:	b005      	add	sp, #20
 800147a:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800147c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001480:	f000 ff46 	bl	8002310 <xTaskRemoveFromEventList>
 8001484:	2800      	cmp	r0, #0
 8001486:	d0f4      	beq.n	8001472 <xQueueGenericSend+0xae>
							queueYIELD_IF_USING_PREEMPTION();
 8001488:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800148c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001490:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001494:	f3bf 8f4f 	dsb	sy
 8001498:	f3bf 8f6f 	isb	sy
 800149c:	e7e9      	b.n	8001472 <xQueueGenericSend+0xae>
					taskEXIT_CRITICAL();
 800149e:	f001 fe17 	bl	80030d0 <vPortExitCritical>
					return errQUEUE_FULL;
 80014a2:	2000      	movs	r0, #0
 80014a4:	e7e8      	b.n	8001478 <xQueueGenericSend+0xb4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80014a6:	a802      	add	r0, sp, #8
 80014a8:	f000 ffbe 	bl	8002428 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80014ac:	2601      	movs	r6, #1
 80014ae:	e019      	b.n	80014e4 <xQueueGenericSend+0x120>
		prvLockQueue( pxQueue );
 80014b0:	2300      	movs	r3, #0
 80014b2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80014b6:	e021      	b.n	80014fc <xQueueGenericSend+0x138>
 80014b8:	2300      	movs	r3, #0
 80014ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80014be:	e023      	b.n	8001508 <xQueueGenericSend+0x144>
				prvUnlockQueue( pxQueue );
 80014c0:	4620      	mov	r0, r4
 80014c2:	f7ff fe6d 	bl	80011a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80014c6:	f000 fdfd 	bl	80020c4 <xTaskResumeAll>
		taskENTER_CRITICAL();
 80014ca:	f001 fddb 	bl	8003084 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80014ce:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80014d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d3bb      	bcc.n	800144e <xQueueGenericSend+0x8a>
 80014d6:	2d02      	cmp	r5, #2
 80014d8:	d0b9      	beq.n	800144e <xQueueGenericSend+0x8a>
				if( xTicksToWait == ( TickType_t ) 0 )
 80014da:	9b01      	ldr	r3, [sp, #4]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d0de      	beq.n	800149e <xQueueGenericSend+0xda>
				else if( xEntryTimeSet == pdFALSE )
 80014e0:	2e00      	cmp	r6, #0
 80014e2:	d0e0      	beq.n	80014a6 <xQueueGenericSend+0xe2>
		taskEXIT_CRITICAL();
 80014e4:	f001 fdf4 	bl	80030d0 <vPortExitCritical>
		vTaskSuspendAll();
 80014e8:	f000 fd4e 	bl	8001f88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80014ec:	f001 fdca 	bl	8003084 <vPortEnterCritical>
 80014f0:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 80014f4:	b252      	sxtb	r2, r2
 80014f6:	f1b2 3fff 	cmp.w	r2, #4294967295
 80014fa:	d0d9      	beq.n	80014b0 <xQueueGenericSend+0xec>
 80014fc:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8001500:	b252      	sxtb	r2, r2
 8001502:	f1b2 3fff 	cmp.w	r2, #4294967295
 8001506:	d0d7      	beq.n	80014b8 <xQueueGenericSend+0xf4>
 8001508:	f001 fde2 	bl	80030d0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800150c:	a901      	add	r1, sp, #4
 800150e:	a802      	add	r0, sp, #8
 8001510:	f000 ff94 	bl	800243c <xTaskCheckForTimeOut>
 8001514:	b9d8      	cbnz	r0, 800154e <xQueueGenericSend+0x18a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001516:	4620      	mov	r0, r4
 8001518:	f7ff fdd9 	bl	80010ce <prvIsQueueFull>
 800151c:	2800      	cmp	r0, #0
 800151e:	d0cf      	beq.n	80014c0 <xQueueGenericSend+0xfc>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001520:	9901      	ldr	r1, [sp, #4]
 8001522:	f104 0010 	add.w	r0, r4, #16
 8001526:	f000 feb7 	bl	8002298 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800152a:	4620      	mov	r0, r4
 800152c:	f7ff fe38 	bl	80011a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001530:	f000 fdc8 	bl	80020c4 <xTaskResumeAll>
 8001534:	2800      	cmp	r0, #0
 8001536:	d1c8      	bne.n	80014ca <xQueueGenericSend+0x106>
					portYIELD_WITHIN_API();
 8001538:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800153c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001540:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001544:	f3bf 8f4f 	dsb	sy
 8001548:	f3bf 8f6f 	isb	sy
 800154c:	e7bd      	b.n	80014ca <xQueueGenericSend+0x106>
			prvUnlockQueue( pxQueue );
 800154e:	4620      	mov	r0, r4
 8001550:	f7ff fe26 	bl	80011a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001554:	f000 fdb6 	bl	80020c4 <xTaskResumeAll>
			return errQUEUE_FULL;
 8001558:	2000      	movs	r0, #0
 800155a:	e78d      	b.n	8001478 <xQueueGenericSend+0xb4>

0800155c <xQueueGiveMutexRecursive>:
	{
 800155c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 800155e:	b138      	cbz	r0, 8001570 <xQueueGiveMutexRecursive+0x14>
 8001560:	4604      	mov	r4, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8001562:	6885      	ldr	r5, [r0, #8]
 8001564:	f000 ffb8 	bl	80024d8 <xTaskGetCurrentTaskHandle>
 8001568:	4285      	cmp	r5, r0
 800156a:	d00c      	beq.n	8001586 <xQueueGiveMutexRecursive+0x2a>
			xReturn = pdFAIL;
 800156c:	2000      	movs	r0, #0
	}
 800156e:	bd38      	pop	{r3, r4, r5, pc}
 8001570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001574:	b672      	cpsid	i
 8001576:	f383 8811 	msr	BASEPRI, r3
 800157a:	f3bf 8f6f 	isb	sy
 800157e:	f3bf 8f4f 	dsb	sy
 8001582:	b662      	cpsie	i
		configASSERT( pxMutex );
 8001584:	e7fe      	b.n	8001584 <xQueueGiveMutexRecursive+0x28>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8001586:	68e3      	ldr	r3, [r4, #12]
 8001588:	3b01      	subs	r3, #1
 800158a:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800158c:	b10b      	cbz	r3, 8001592 <xQueueGiveMutexRecursive+0x36>
			xReturn = pdPASS;
 800158e:	2001      	movs	r0, #1
		return xReturn;
 8001590:	e7ed      	b.n	800156e <xQueueGiveMutexRecursive+0x12>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8001592:	461a      	mov	r2, r3
 8001594:	4619      	mov	r1, r3
 8001596:	4620      	mov	r0, r4
 8001598:	f7ff ff14 	bl	80013c4 <xQueueGenericSend>
			xReturn = pdPASS;
 800159c:	2001      	movs	r0, #1
 800159e:	e7e6      	b.n	800156e <xQueueGiveMutexRecursive+0x12>

080015a0 <xQueueGenericSendFromISR>:
{
 80015a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80015a4:	b1a0      	cbz	r0, 80015d0 <xQueueGenericSendFromISR+0x30>
 80015a6:	460f      	mov	r7, r1
 80015a8:	4616      	mov	r6, r2
 80015aa:	461c      	mov	r4, r3
 80015ac:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80015ae:	b1d1      	cbz	r1, 80015e6 <xQueueGenericSendFromISR+0x46>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80015b0:	2c02      	cmp	r4, #2
 80015b2:	d126      	bne.n	8001602 <xQueueGenericSendFromISR+0x62>
 80015b4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d023      	beq.n	8001602 <xQueueGenericSendFromISR+0x62>
 80015ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015be:	b672      	cpsid	i
 80015c0:	f383 8811 	msr	BASEPRI, r3
 80015c4:	f3bf 8f6f 	isb	sy
 80015c8:	f3bf 8f4f 	dsb	sy
 80015cc:	b662      	cpsie	i
 80015ce:	e7fe      	b.n	80015ce <xQueueGenericSendFromISR+0x2e>
 80015d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015d4:	b672      	cpsid	i
 80015d6:	f383 8811 	msr	BASEPRI, r3
 80015da:	f3bf 8f6f 	isb	sy
 80015de:	f3bf 8f4f 	dsb	sy
 80015e2:	b662      	cpsie	i
	configASSERT( pxQueue );
 80015e4:	e7fe      	b.n	80015e4 <xQueueGenericSendFromISR+0x44>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80015e6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d0e1      	beq.n	80015b0 <xQueueGenericSendFromISR+0x10>
 80015ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015f0:	b672      	cpsid	i
 80015f2:	f383 8811 	msr	BASEPRI, r3
 80015f6:	f3bf 8f6f 	isb	sy
 80015fa:	f3bf 8f4f 	dsb	sy
 80015fe:	b662      	cpsie	i
 8001600:	e7fe      	b.n	8001600 <xQueueGenericSendFromISR+0x60>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001602:	f001 fe43 	bl	800328c <vPortValidateInterruptPriority>
	__asm volatile
 8001606:	f3ef 8811 	mrs	r8, BASEPRI
 800160a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800160e:	b672      	cpsid	i
 8001610:	f383 8811 	msr	BASEPRI, r3
 8001614:	f3bf 8f6f 	isb	sy
 8001618:	f3bf 8f4f 	dsb	sy
 800161c:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800161e:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001620:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8001622:	429a      	cmp	r2, r3
 8001624:	d306      	bcc.n	8001634 <xQueueGenericSendFromISR+0x94>
 8001626:	2c02      	cmp	r4, #2
 8001628:	d004      	beq.n	8001634 <xQueueGenericSendFromISR+0x94>
			xReturn = errQUEUE_FULL;
 800162a:	2000      	movs	r0, #0
	__asm volatile
 800162c:	f388 8811 	msr	BASEPRI, r8
}
 8001630:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8001634:	f895 9045 	ldrb.w	r9, [r5, #69]	; 0x45
 8001638:	fa4f f989 	sxtb.w	r9, r9
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800163c:	4622      	mov	r2, r4
 800163e:	4639      	mov	r1, r7
 8001640:	4628      	mov	r0, r5
 8001642:	f7ff fd60 	bl	8001106 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8001646:	f1b9 3fff 	cmp.w	r9, #4294967295
 800164a:	d006      	beq.n	800165a <xQueueGenericSendFromISR+0xba>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800164c:	f109 0301 	add.w	r3, r9, #1
 8001650:	b25b      	sxtb	r3, r3
 8001652:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 8001656:	2001      	movs	r0, #1
 8001658:	e7e8      	b.n	800162c <xQueueGenericSendFromISR+0x8c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800165a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800165c:	b90b      	cbnz	r3, 8001662 <xQueueGenericSendFromISR+0xc2>
			xReturn = pdPASS;
 800165e:	2001      	movs	r0, #1
 8001660:	e7e4      	b.n	800162c <xQueueGenericSendFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001662:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001666:	f000 fe53 	bl	8002310 <xTaskRemoveFromEventList>
 800166a:	b118      	cbz	r0, 8001674 <xQueueGenericSendFromISR+0xd4>
							if( pxHigherPriorityTaskWoken != NULL )
 800166c:	b126      	cbz	r6, 8001678 <xQueueGenericSendFromISR+0xd8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800166e:	2001      	movs	r0, #1
 8001670:	6030      	str	r0, [r6, #0]
 8001672:	e7db      	b.n	800162c <xQueueGenericSendFromISR+0x8c>
			xReturn = pdPASS;
 8001674:	2001      	movs	r0, #1
 8001676:	e7d9      	b.n	800162c <xQueueGenericSendFromISR+0x8c>
 8001678:	2001      	movs	r0, #1
 800167a:	e7d7      	b.n	800162c <xQueueGenericSendFromISR+0x8c>

0800167c <xQueueReceive>:
{
 800167c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800167e:	b085      	sub	sp, #20
 8001680:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8001682:	b1a0      	cbz	r0, 80016ae <xQueueReceive+0x32>
 8001684:	460f      	mov	r7, r1
 8001686:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001688:	b1e1      	cbz	r1, 80016c4 <xQueueReceive+0x48>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800168a:	f000 ff2b 	bl	80024e4 <xTaskGetSchedulerState>
 800168e:	4606      	mov	r6, r0
 8001690:	bb30      	cbnz	r0, 80016e0 <xQueueReceive+0x64>
 8001692:	9b01      	ldr	r3, [sp, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d064      	beq.n	8001762 <xQueueReceive+0xe6>
	__asm volatile
 8001698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800169c:	b672      	cpsid	i
 800169e:	f383 8811 	msr	BASEPRI, r3
 80016a2:	f3bf 8f6f 	isb	sy
 80016a6:	f3bf 8f4f 	dsb	sy
 80016aa:	b662      	cpsie	i
 80016ac:	e7fe      	b.n	80016ac <xQueueReceive+0x30>
 80016ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016b2:	b672      	cpsid	i
 80016b4:	f383 8811 	msr	BASEPRI, r3
 80016b8:	f3bf 8f6f 	isb	sy
 80016bc:	f3bf 8f4f 	dsb	sy
 80016c0:	b662      	cpsie	i
	configASSERT( ( pxQueue ) );
 80016c2:	e7fe      	b.n	80016c2 <xQueueReceive+0x46>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80016c4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d0df      	beq.n	800168a <xQueueReceive+0xe>
 80016ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016ce:	b672      	cpsid	i
 80016d0:	f383 8811 	msr	BASEPRI, r3
 80016d4:	f3bf 8f6f 	isb	sy
 80016d8:	f3bf 8f4f 	dsb	sy
 80016dc:	b662      	cpsie	i
 80016de:	e7fe      	b.n	80016de <xQueueReceive+0x62>
 80016e0:	2600      	movs	r6, #0
 80016e2:	e03e      	b.n	8001762 <xQueueReceive+0xe6>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80016e4:	4639      	mov	r1, r7
 80016e6:	4620      	mov	r0, r4
 80016e8:	f7ff fd48 	bl	800117c <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80016ec:	3d01      	subs	r5, #1
 80016ee:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80016f0:	6923      	ldr	r3, [r4, #16]
 80016f2:	b923      	cbnz	r3, 80016fe <xQueueReceive+0x82>
				taskEXIT_CRITICAL();
 80016f4:	f001 fcec 	bl	80030d0 <vPortExitCritical>
				return pdPASS;
 80016f8:	2001      	movs	r0, #1
}
 80016fa:	b005      	add	sp, #20
 80016fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80016fe:	f104 0010 	add.w	r0, r4, #16
 8001702:	f000 fe05 	bl	8002310 <xTaskRemoveFromEventList>
 8001706:	2800      	cmp	r0, #0
 8001708:	d0f4      	beq.n	80016f4 <xQueueReceive+0x78>
						queueYIELD_IF_USING_PREEMPTION();
 800170a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800170e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001712:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001716:	f3bf 8f4f 	dsb	sy
 800171a:	f3bf 8f6f 	isb	sy
 800171e:	e7e9      	b.n	80016f4 <xQueueReceive+0x78>
					taskEXIT_CRITICAL();
 8001720:	f001 fcd6 	bl	80030d0 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8001724:	2000      	movs	r0, #0
 8001726:	e7e8      	b.n	80016fa <xQueueReceive+0x7e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001728:	a802      	add	r0, sp, #8
 800172a:	f000 fe7d 	bl	8002428 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800172e:	2601      	movs	r6, #1
 8001730:	e021      	b.n	8001776 <xQueueReceive+0xfa>
		prvLockQueue( pxQueue );
 8001732:	2300      	movs	r3, #0
 8001734:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001738:	e029      	b.n	800178e <xQueueReceive+0x112>
 800173a:	2300      	movs	r3, #0
 800173c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001740:	e02b      	b.n	800179a <xQueueReceive+0x11e>
				prvUnlockQueue( pxQueue );
 8001742:	4620      	mov	r0, r4
 8001744:	f7ff fd2c 	bl	80011a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001748:	f000 fcbc 	bl	80020c4 <xTaskResumeAll>
 800174c:	e009      	b.n	8001762 <xQueueReceive+0xe6>
			prvUnlockQueue( pxQueue );
 800174e:	4620      	mov	r0, r4
 8001750:	f7ff fd26 	bl	80011a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001754:	f000 fcb6 	bl	80020c4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001758:	4620      	mov	r0, r4
 800175a:	f7ff fcc7 	bl	80010ec <prvIsQueueEmpty>
 800175e:	2800      	cmp	r0, #0
 8001760:	d13f      	bne.n	80017e2 <xQueueReceive+0x166>
		taskENTER_CRITICAL();
 8001762:	f001 fc8f 	bl	8003084 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001766:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001768:	2d00      	cmp	r5, #0
 800176a:	d1bb      	bne.n	80016e4 <xQueueReceive+0x68>
				if( xTicksToWait == ( TickType_t ) 0 )
 800176c:	9b01      	ldr	r3, [sp, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d0d6      	beq.n	8001720 <xQueueReceive+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 8001772:	2e00      	cmp	r6, #0
 8001774:	d0d8      	beq.n	8001728 <xQueueReceive+0xac>
		taskEXIT_CRITICAL();
 8001776:	f001 fcab 	bl	80030d0 <vPortExitCritical>
		vTaskSuspendAll();
 800177a:	f000 fc05 	bl	8001f88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800177e:	f001 fc81 	bl	8003084 <vPortEnterCritical>
 8001782:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001786:	b25b      	sxtb	r3, r3
 8001788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800178c:	d0d1      	beq.n	8001732 <xQueueReceive+0xb6>
 800178e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001792:	b25b      	sxtb	r3, r3
 8001794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001798:	d0cf      	beq.n	800173a <xQueueReceive+0xbe>
 800179a:	f001 fc99 	bl	80030d0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800179e:	a901      	add	r1, sp, #4
 80017a0:	a802      	add	r0, sp, #8
 80017a2:	f000 fe4b 	bl	800243c <xTaskCheckForTimeOut>
 80017a6:	2800      	cmp	r0, #0
 80017a8:	d1d1      	bne.n	800174e <xQueueReceive+0xd2>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80017aa:	4620      	mov	r0, r4
 80017ac:	f7ff fc9e 	bl	80010ec <prvIsQueueEmpty>
 80017b0:	2800      	cmp	r0, #0
 80017b2:	d0c6      	beq.n	8001742 <xQueueReceive+0xc6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80017b4:	9901      	ldr	r1, [sp, #4]
 80017b6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80017ba:	f000 fd6d 	bl	8002298 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80017be:	4620      	mov	r0, r4
 80017c0:	f7ff fcee 	bl	80011a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80017c4:	f000 fc7e 	bl	80020c4 <xTaskResumeAll>
 80017c8:	2800      	cmp	r0, #0
 80017ca:	d1ca      	bne.n	8001762 <xQueueReceive+0xe6>
					portYIELD_WITHIN_API();
 80017cc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80017d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017d4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80017d8:	f3bf 8f4f 	dsb	sy
 80017dc:	f3bf 8f6f 	isb	sy
 80017e0:	e7bf      	b.n	8001762 <xQueueReceive+0xe6>
				return errQUEUE_EMPTY;
 80017e2:	2000      	movs	r0, #0
 80017e4:	e789      	b.n	80016fa <xQueueReceive+0x7e>

080017e6 <xQueueSemaphoreTake>:
{
 80017e6:	b570      	push	{r4, r5, r6, lr}
 80017e8:	b084      	sub	sp, #16
 80017ea:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 80017ec:	b168      	cbz	r0, 800180a <xQueueSemaphoreTake+0x24>
 80017ee:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 80017f0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80017f2:	b1ab      	cbz	r3, 8001820 <xQueueSemaphoreTake+0x3a>
 80017f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017f8:	b672      	cpsid	i
 80017fa:	f383 8811 	msr	BASEPRI, r3
 80017fe:	f3bf 8f6f 	isb	sy
 8001802:	f3bf 8f4f 	dsb	sy
 8001806:	b662      	cpsie	i
 8001808:	e7fe      	b.n	8001808 <xQueueSemaphoreTake+0x22>
 800180a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800180e:	b672      	cpsid	i
 8001810:	f383 8811 	msr	BASEPRI, r3
 8001814:	f3bf 8f6f 	isb	sy
 8001818:	f3bf 8f4f 	dsb	sy
 800181c:	b662      	cpsie	i
	configASSERT( ( pxQueue ) );
 800181e:	e7fe      	b.n	800181e <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001820:	f000 fe60 	bl	80024e4 <xTaskGetSchedulerState>
 8001824:	4605      	mov	r5, r0
 8001826:	b960      	cbnz	r0, 8001842 <xQueueSemaphoreTake+0x5c>
 8001828:	9b01      	ldr	r3, [sp, #4]
 800182a:	b16b      	cbz	r3, 8001848 <xQueueSemaphoreTake+0x62>
 800182c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001830:	b672      	cpsid	i
 8001832:	f383 8811 	msr	BASEPRI, r3
 8001836:	f3bf 8f6f 	isb	sy
 800183a:	f3bf 8f4f 	dsb	sy
 800183e:	b662      	cpsie	i
 8001840:	e7fe      	b.n	8001840 <xQueueSemaphoreTake+0x5a>
 8001842:	2600      	movs	r6, #0
 8001844:	4635      	mov	r5, r6
 8001846:	e057      	b.n	80018f8 <xQueueSemaphoreTake+0x112>
 8001848:	4606      	mov	r6, r0
 800184a:	e055      	b.n	80018f8 <xQueueSemaphoreTake+0x112>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800184c:	3b01      	subs	r3, #1
 800184e:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001850:	6823      	ldr	r3, [r4, #0]
 8001852:	b13b      	cbz	r3, 8001864 <xQueueSemaphoreTake+0x7e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001854:	6923      	ldr	r3, [r4, #16]
 8001856:	b94b      	cbnz	r3, 800186c <xQueueSemaphoreTake+0x86>
				taskEXIT_CRITICAL();
 8001858:	f001 fc3a 	bl	80030d0 <vPortExitCritical>
				return pdPASS;
 800185c:	2601      	movs	r6, #1
}
 800185e:	4630      	mov	r0, r6
 8001860:	b004      	add	sp, #16
 8001862:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8001864:	f000 ff42 	bl	80026ec <pvTaskIncrementMutexHeldCount>
 8001868:	60a0      	str	r0, [r4, #8]
 800186a:	e7f3      	b.n	8001854 <xQueueSemaphoreTake+0x6e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800186c:	f104 0010 	add.w	r0, r4, #16
 8001870:	f000 fd4e 	bl	8002310 <xTaskRemoveFromEventList>
 8001874:	2800      	cmp	r0, #0
 8001876:	d0ef      	beq.n	8001858 <xQueueSemaphoreTake+0x72>
						queueYIELD_IF_USING_PREEMPTION();
 8001878:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800187c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001880:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001884:	f3bf 8f4f 	dsb	sy
 8001888:	f3bf 8f6f 	isb	sy
 800188c:	e7e4      	b.n	8001858 <xQueueSemaphoreTake+0x72>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800188e:	b156      	cbz	r6, 80018a6 <xQueueSemaphoreTake+0xc0>
 8001890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001894:	b672      	cpsid	i
 8001896:	f383 8811 	msr	BASEPRI, r3
 800189a:	f3bf 8f6f 	isb	sy
 800189e:	f3bf 8f4f 	dsb	sy
 80018a2:	b662      	cpsie	i
 80018a4:	e7fe      	b.n	80018a4 <xQueueSemaphoreTake+0xbe>
					taskEXIT_CRITICAL();
 80018a6:	f001 fc13 	bl	80030d0 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80018aa:	e7d8      	b.n	800185e <xQueueSemaphoreTake+0x78>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80018ac:	a802      	add	r0, sp, #8
 80018ae:	f000 fdbb 	bl	8002428 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80018b2:	2501      	movs	r5, #1
 80018b4:	e02a      	b.n	800190c <xQueueSemaphoreTake+0x126>
		prvLockQueue( pxQueue );
 80018b6:	2300      	movs	r3, #0
 80018b8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80018bc:	e032      	b.n	8001924 <xQueueSemaphoreTake+0x13e>
 80018be:	2300      	movs	r3, #0
 80018c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80018c4:	e034      	b.n	8001930 <xQueueSemaphoreTake+0x14a>
						taskENTER_CRITICAL();
 80018c6:	f001 fbdd 	bl	8003084 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80018ca:	68a0      	ldr	r0, [r4, #8]
 80018cc:	f000 fe1a 	bl	8002504 <xTaskPriorityInherit>
 80018d0:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 80018d2:	f001 fbfd 	bl	80030d0 <vPortExitCritical>
 80018d6:	e03b      	b.n	8001950 <xQueueSemaphoreTake+0x16a>
				prvUnlockQueue( pxQueue );
 80018d8:	4620      	mov	r0, r4
 80018da:	f7ff fc61 	bl	80011a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80018de:	f000 fbf1 	bl	80020c4 <xTaskResumeAll>
 80018e2:	e009      	b.n	80018f8 <xQueueSemaphoreTake+0x112>
			prvUnlockQueue( pxQueue );
 80018e4:	4620      	mov	r0, r4
 80018e6:	f7ff fc5b 	bl	80011a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80018ea:	f000 fbeb 	bl	80020c4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80018ee:	4620      	mov	r0, r4
 80018f0:	f7ff fbfc 	bl	80010ec <prvIsQueueEmpty>
 80018f4:	2800      	cmp	r0, #0
 80018f6:	d142      	bne.n	800197e <xQueueSemaphoreTake+0x198>
		taskENTER_CRITICAL();
 80018f8:	f001 fbc4 	bl	8003084 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80018fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1a4      	bne.n	800184c <xQueueSemaphoreTake+0x66>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001902:	9b01      	ldr	r3, [sp, #4]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d0c2      	beq.n	800188e <xQueueSemaphoreTake+0xa8>
				else if( xEntryTimeSet == pdFALSE )
 8001908:	2d00      	cmp	r5, #0
 800190a:	d0cf      	beq.n	80018ac <xQueueSemaphoreTake+0xc6>
		taskEXIT_CRITICAL();
 800190c:	f001 fbe0 	bl	80030d0 <vPortExitCritical>
		vTaskSuspendAll();
 8001910:	f000 fb3a 	bl	8001f88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001914:	f001 fbb6 	bl	8003084 <vPortEnterCritical>
 8001918:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800191c:	b25b      	sxtb	r3, r3
 800191e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001922:	d0c8      	beq.n	80018b6 <xQueueSemaphoreTake+0xd0>
 8001924:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001928:	b25b      	sxtb	r3, r3
 800192a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800192e:	d0c6      	beq.n	80018be <xQueueSemaphoreTake+0xd8>
 8001930:	f001 fbce 	bl	80030d0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001934:	a901      	add	r1, sp, #4
 8001936:	a802      	add	r0, sp, #8
 8001938:	f000 fd80 	bl	800243c <xTaskCheckForTimeOut>
 800193c:	2800      	cmp	r0, #0
 800193e:	d1d1      	bne.n	80018e4 <xQueueSemaphoreTake+0xfe>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001940:	4620      	mov	r0, r4
 8001942:	f7ff fbd3 	bl	80010ec <prvIsQueueEmpty>
 8001946:	2800      	cmp	r0, #0
 8001948:	d0c6      	beq.n	80018d8 <xQueueSemaphoreTake+0xf2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800194a:	6823      	ldr	r3, [r4, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d0ba      	beq.n	80018c6 <xQueueSemaphoreTake+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001950:	9901      	ldr	r1, [sp, #4]
 8001952:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001956:	f000 fc9f 	bl	8002298 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800195a:	4620      	mov	r0, r4
 800195c:	f7ff fc20 	bl	80011a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001960:	f000 fbb0 	bl	80020c4 <xTaskResumeAll>
 8001964:	2800      	cmp	r0, #0
 8001966:	d1c7      	bne.n	80018f8 <xQueueSemaphoreTake+0x112>
					portYIELD_WITHIN_API();
 8001968:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800196c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001970:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001974:	f3bf 8f4f 	dsb	sy
 8001978:	f3bf 8f6f 	isb	sy
 800197c:	e7bc      	b.n	80018f8 <xQueueSemaphoreTake+0x112>
					if( xInheritanceOccurred != pdFALSE )
 800197e:	b90e      	cbnz	r6, 8001984 <xQueueSemaphoreTake+0x19e>
				return errQUEUE_EMPTY;
 8001980:	2600      	movs	r6, #0
 8001982:	e76c      	b.n	800185e <xQueueSemaphoreTake+0x78>
						taskENTER_CRITICAL();
 8001984:	f001 fb7e 	bl	8003084 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8001988:	4620      	mov	r0, r4
 800198a:	f7ff fb98 	bl	80010be <prvGetDisinheritPriorityAfterTimeout>
 800198e:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8001990:	68a0      	ldr	r0, [r4, #8]
 8001992:	f000 fe55 	bl	8002640 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8001996:	f001 fb9b 	bl	80030d0 <vPortExitCritical>
 800199a:	e7f1      	b.n	8001980 <xQueueSemaphoreTake+0x19a>

0800199c <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 800199c:	b180      	cbz	r0, 80019c0 <xQueueTakeMutexRecursive+0x24>
	{
 800199e:	b570      	push	{r4, r5, r6, lr}
 80019a0:	460c      	mov	r4, r1
 80019a2:	4605      	mov	r5, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80019a4:	6886      	ldr	r6, [r0, #8]
 80019a6:	f000 fd97 	bl	80024d8 <xTaskGetCurrentTaskHandle>
 80019aa:	4286      	cmp	r6, r0
 80019ac:	d013      	beq.n	80019d6 <xQueueTakeMutexRecursive+0x3a>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80019ae:	4621      	mov	r1, r4
 80019b0:	4628      	mov	r0, r5
 80019b2:	f7ff ff18 	bl	80017e6 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 80019b6:	b190      	cbz	r0, 80019de <xQueueTakeMutexRecursive+0x42>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80019b8:	68eb      	ldr	r3, [r5, #12]
 80019ba:	3301      	adds	r3, #1
 80019bc:	60eb      	str	r3, [r5, #12]
		return xReturn;
 80019be:	e00e      	b.n	80019de <xQueueTakeMutexRecursive+0x42>
 80019c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019c4:	b672      	cpsid	i
 80019c6:	f383 8811 	msr	BASEPRI, r3
 80019ca:	f3bf 8f6f 	isb	sy
 80019ce:	f3bf 8f4f 	dsb	sy
 80019d2:	b662      	cpsie	i
		configASSERT( pxMutex );
 80019d4:	e7fe      	b.n	80019d4 <xQueueTakeMutexRecursive+0x38>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80019d6:	68eb      	ldr	r3, [r5, #12]
 80019d8:	3301      	adds	r3, #1
 80019da:	60eb      	str	r3, [r5, #12]
			xReturn = pdPASS;
 80019dc:	2001      	movs	r0, #1
	}
 80019de:	bd70      	pop	{r4, r5, r6, pc}

080019e0 <xQueueReceiveFromISR>:
{
 80019e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80019e4:	b1c0      	cbz	r0, 8001a18 <xQueueReceiveFromISR+0x38>
 80019e6:	460d      	mov	r5, r1
 80019e8:	4690      	mov	r8, r2
 80019ea:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80019ec:	b1f9      	cbz	r1, 8001a2e <xQueueReceiveFromISR+0x4e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80019ee:	f001 fc4d 	bl	800328c <vPortValidateInterruptPriority>
	__asm volatile
 80019f2:	f3ef 8711 	mrs	r7, BASEPRI
 80019f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019fa:	b672      	cpsid	i
 80019fc:	f383 8811 	msr	BASEPRI, r3
 8001a00:	f3bf 8f6f 	isb	sy
 8001a04:	f3bf 8f4f 	dsb	sy
 8001a08:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001a0a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001a0c:	b9ee      	cbnz	r6, 8001a4a <xQueueReceiveFromISR+0x6a>
			xReturn = pdFAIL;
 8001a0e:	2000      	movs	r0, #0
	__asm volatile
 8001a10:	f387 8811 	msr	BASEPRI, r7
}
 8001a14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 8001a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a1c:	b672      	cpsid	i
 8001a1e:	f383 8811 	msr	BASEPRI, r3
 8001a22:	f3bf 8f6f 	isb	sy
 8001a26:	f3bf 8f4f 	dsb	sy
 8001a2a:	b662      	cpsie	i
	configASSERT( pxQueue );
 8001a2c:	e7fe      	b.n	8001a2c <xQueueReceiveFromISR+0x4c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001a2e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d0dc      	beq.n	80019ee <xQueueReceiveFromISR+0xe>
 8001a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a38:	b672      	cpsid	i
 8001a3a:	f383 8811 	msr	BASEPRI, r3
 8001a3e:	f3bf 8f6f 	isb	sy
 8001a42:	f3bf 8f4f 	dsb	sy
 8001a46:	b662      	cpsie	i
 8001a48:	e7fe      	b.n	8001a48 <xQueueReceiveFromISR+0x68>
			const int8_t cRxLock = pxQueue->cRxLock;
 8001a4a:	f894 9044 	ldrb.w	r9, [r4, #68]	; 0x44
 8001a4e:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001a52:	4629      	mov	r1, r5
 8001a54:	4620      	mov	r0, r4
 8001a56:	f7ff fb91 	bl	800117c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001a5a:	1e73      	subs	r3, r6, #1
 8001a5c:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8001a5e:	f1b9 3fff 	cmp.w	r9, #4294967295
 8001a62:	d006      	beq.n	8001a72 <xQueueReceiveFromISR+0x92>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8001a64:	f109 0301 	add.w	r3, r9, #1
 8001a68:	b25b      	sxtb	r3, r3
 8001a6a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 8001a6e:	2001      	movs	r0, #1
 8001a70:	e7ce      	b.n	8001a10 <xQueueReceiveFromISR+0x30>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001a72:	6923      	ldr	r3, [r4, #16]
 8001a74:	b90b      	cbnz	r3, 8001a7a <xQueueReceiveFromISR+0x9a>
			xReturn = pdPASS;
 8001a76:	2001      	movs	r0, #1
 8001a78:	e7ca      	b.n	8001a10 <xQueueReceiveFromISR+0x30>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001a7a:	f104 0010 	add.w	r0, r4, #16
 8001a7e:	f000 fc47 	bl	8002310 <xTaskRemoveFromEventList>
 8001a82:	b130      	cbz	r0, 8001a92 <xQueueReceiveFromISR+0xb2>
						if( pxHigherPriorityTaskWoken != NULL )
 8001a84:	f1b8 0f00 	cmp.w	r8, #0
 8001a88:	d005      	beq.n	8001a96 <xQueueReceiveFromISR+0xb6>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8001a8a:	2001      	movs	r0, #1
 8001a8c:	f8c8 0000 	str.w	r0, [r8]
 8001a90:	e7be      	b.n	8001a10 <xQueueReceiveFromISR+0x30>
			xReturn = pdPASS;
 8001a92:	2001      	movs	r0, #1
 8001a94:	e7bc      	b.n	8001a10 <xQueueReceiveFromISR+0x30>
 8001a96:	2001      	movs	r0, #1
 8001a98:	e7ba      	b.n	8001a10 <xQueueReceiveFromISR+0x30>
	...

08001a9c <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	2b07      	cmp	r3, #7
 8001aa0:	d80c      	bhi.n	8001abc <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001aa2:	4a07      	ldr	r2, [pc, #28]	; (8001ac0 <vQueueAddToRegistry+0x24>)
 8001aa4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001aa8:	b10a      	cbz	r2, 8001aae <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001aaa:	3301      	adds	r3, #1
 8001aac:	e7f7      	b.n	8001a9e <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001aae:	4a04      	ldr	r2, [pc, #16]	; (8001ac0 <vQueueAddToRegistry+0x24>)
 8001ab0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001ab4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8001ab8:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8001aba:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	20000744 	.word	0x20000744

08001ac4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001ac4:	b570      	push	{r4, r5, r6, lr}
 8001ac6:	4604      	mov	r4, r0
 8001ac8:	460d      	mov	r5, r1
 8001aca:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001acc:	f001 fada 	bl	8003084 <vPortEnterCritical>
 8001ad0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001ad4:	b25b      	sxtb	r3, r3
 8001ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ada:	d00d      	beq.n	8001af8 <vQueueWaitForMessageRestricted+0x34>
 8001adc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001ae0:	b25b      	sxtb	r3, r3
 8001ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae6:	d00b      	beq.n	8001b00 <vQueueWaitForMessageRestricted+0x3c>
 8001ae8:	f001 faf2 	bl	80030d0 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001aec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001aee:	b15b      	cbz	r3, 8001b08 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8001af0:	4620      	mov	r0, r4
 8001af2:	f7ff fb55 	bl	80011a0 <prvUnlockQueue>
	}
 8001af6:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8001af8:	2300      	movs	r3, #0
 8001afa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001afe:	e7ed      	b.n	8001adc <vQueueWaitForMessageRestricted+0x18>
 8001b00:	2300      	movs	r3, #0
 8001b02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001b06:	e7ef      	b.n	8001ae8 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001b08:	4632      	mov	r2, r6
 8001b0a:	4629      	mov	r1, r5
 8001b0c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001b10:	f000 fbde 	bl	80022d0 <vTaskPlaceOnEventListRestricted>
 8001b14:	e7ec      	b.n	8001af0 <vQueueWaitForMessageRestricted+0x2c>
	...

08001b18 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001b18:	4b07      	ldr	r3, [pc, #28]	; (8001b38 <prvResetNextTaskUnblockTime+0x20>)
 8001b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	b923      	cbnz	r3, 8001b2a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001b20:	4b05      	ldr	r3, [pc, #20]	; (8001b38 <prvResetNextTaskUnblockTime+0x20>)
 8001b22:	f04f 32ff 	mov.w	r2, #4294967295
 8001b26:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b28:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001b2a:	4b03      	ldr	r3, [pc, #12]	; (8001b38 <prvResetNextTaskUnblockTime+0x20>)
 8001b2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b2e:	68d2      	ldr	r2, [r2, #12]
 8001b30:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001b32:	6852      	ldr	r2, [r2, #4]
 8001b34:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 8001b36:	4770      	bx	lr
 8001b38:	20000784 	.word	0x20000784

08001b3c <prvInitialiseNewTask>:
{
 8001b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b40:	4680      	mov	r8, r0
 8001b42:	460d      	mov	r5, r1
 8001b44:	4617      	mov	r7, r2
 8001b46:	4699      	mov	r9, r3
 8001b48:	9e08      	ldr	r6, [sp, #32]
 8001b4a:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8001b4e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001b50:	0092      	lsls	r2, r2, #2
 8001b52:	21a5      	movs	r1, #165	; 0xa5
 8001b54:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001b56:	f004 fa89 	bl	800606c <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001b5a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001b5c:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8001b60:	443a      	add	r2, r7
 8001b62:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001b66:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8001b6a:	b3a5      	cbz	r5, 8001bd6 <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001b6c:	f04f 0c00 	mov.w	ip, #0
 8001b70:	f1bc 0f0f 	cmp.w	ip, #15
 8001b74:	d809      	bhi.n	8001b8a <prvInitialiseNewTask+0x4e>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001b76:	f815 300c 	ldrb.w	r3, [r5, ip]
 8001b7a:	eb04 020c 	add.w	r2, r4, ip
 8001b7e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8001b82:	b113      	cbz	r3, 8001b8a <prvInitialiseNewTask+0x4e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001b84:	f10c 0c01 	add.w	ip, ip, #1
 8001b88:	e7f2      	b.n	8001b70 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001b90:	2e37      	cmp	r6, #55	; 0x37
 8001b92:	d900      	bls.n	8001b96 <prvInitialiseNewTask+0x5a>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001b94:	2637      	movs	r6, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8001b96:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8001b98:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8001b9a:	2500      	movs	r5, #0
 8001b9c:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001b9e:	1d20      	adds	r0, r4, #4
 8001ba0:	f7ff fa53 	bl	800104a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001ba4:	f104 0018 	add.w	r0, r4, #24
 8001ba8:	f7ff fa4f 	bl	800104a <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001bac:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001bae:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
 8001bb2:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001bb4:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8001bb6:	6565      	str	r5, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001bb8:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001bbc:	464a      	mov	r2, r9
 8001bbe:	4641      	mov	r1, r8
 8001bc0:	4638      	mov	r0, r7
 8001bc2:	f001 fa35 	bl	8003030 <pxPortInitialiseStack>
 8001bc6:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8001bc8:	f1ba 0f00 	cmp.w	sl, #0
 8001bcc:	d001      	beq.n	8001bd2 <prvInitialiseNewTask+0x96>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001bce:	f8ca 4000 	str.w	r4, [sl]
}
 8001bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8001bdc:	e7d8      	b.n	8001b90 <prvInitialiseNewTask+0x54>
	...

08001be0 <prvInitialiseTaskLists>:
{
 8001be0:	b570      	push	{r4, r5, r6, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001be2:	2400      	movs	r4, #0
 8001be4:	e007      	b.n	8001bf6 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001be6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8001bea:	0093      	lsls	r3, r2, #2
 8001bec:	4810      	ldr	r0, [pc, #64]	; (8001c30 <prvInitialiseTaskLists+0x50>)
 8001bee:	4418      	add	r0, r3
 8001bf0:	f7ff fa20 	bl	8001034 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001bf4:	3401      	adds	r4, #1
 8001bf6:	2c37      	cmp	r4, #55	; 0x37
 8001bf8:	d9f5      	bls.n	8001be6 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8001bfa:	4c0e      	ldr	r4, [pc, #56]	; (8001c34 <prvInitialiseTaskLists+0x54>)
 8001bfc:	f504 6692 	add.w	r6, r4, #1168	; 0x490
 8001c00:	4630      	mov	r0, r6
 8001c02:	f7ff fa17 	bl	8001034 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001c06:	f204 45a4 	addw	r5, r4, #1188	; 0x4a4
 8001c0a:	4628      	mov	r0, r5
 8001c0c:	f7ff fa12 	bl	8001034 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001c10:	f104 0014 	add.w	r0, r4, #20
 8001c14:	f7ff fa0e 	bl	8001034 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8001c18:	f504 6097 	add.w	r0, r4, #1208	; 0x4b8
 8001c1c:	f7ff fa0a 	bl	8001034 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8001c20:	4620      	mov	r0, r4
 8001c22:	f7ff fa07 	bl	8001034 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8001c26:	62a6      	str	r6, [r4, #40]	; 0x28
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001c28:	f8c4 54cc 	str.w	r5, [r4, #1228]	; 0x4cc
}
 8001c2c:	bd70      	pop	{r4, r5, r6, pc}
 8001c2e:	bf00      	nop
 8001c30:	200007b4 	.word	0x200007b4
 8001c34:	20000784 	.word	0x20000784

08001c38 <prvAddNewTaskToReadyList>:
{
 8001c38:	b538      	push	{r3, r4, r5, lr}
 8001c3a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8001c3c:	f001 fa22 	bl	8003084 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8001c40:	4b28      	ldr	r3, [pc, #160]	; (8001ce4 <prvAddNewTaskToReadyList+0xac>)
 8001c42:	f8d3 24d0 	ldr.w	r2, [r3, #1232]	; 0x4d0
 8001c46:	3201      	adds	r2, #1
 8001c48:	f8c3 24d0 	str.w	r2, [r3, #1232]	; 0x4d0
		if( pxCurrentTCB == NULL )
 8001c4c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8001c50:	b173      	cbz	r3, 8001c70 <prvAddNewTaskToReadyList+0x38>
			if( xSchedulerRunning == pdFALSE )
 8001c52:	4b24      	ldr	r3, [pc, #144]	; (8001ce4 <prvAddNewTaskToReadyList+0xac>)
 8001c54:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 8001c58:	b98b      	cbnz	r3, 8001c7e <prvAddNewTaskToReadyList+0x46>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001c5a:	4b22      	ldr	r3, [pc, #136]	; (8001ce4 <prvAddNewTaskToReadyList+0xac>)
 8001c5c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8001c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c62:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d80a      	bhi.n	8001c7e <prvAddNewTaskToReadyList+0x46>
					pxCurrentTCB = pxNewTCB;
 8001c68:	4b1e      	ldr	r3, [pc, #120]	; (8001ce4 <prvAddNewTaskToReadyList+0xac>)
 8001c6a:	f8c3 44d4 	str.w	r4, [r3, #1236]	; 0x4d4
 8001c6e:	e006      	b.n	8001c7e <prvAddNewTaskToReadyList+0x46>
			pxCurrentTCB = pxNewTCB;
 8001c70:	4b1c      	ldr	r3, [pc, #112]	; (8001ce4 <prvAddNewTaskToReadyList+0xac>)
 8001c72:	f8c3 44d4 	str.w	r4, [r3, #1236]	; 0x4d4
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001c76:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d02e      	beq.n	8001cdc <prvAddNewTaskToReadyList+0xa4>
		uxTaskNumber++;
 8001c7e:	4a19      	ldr	r2, [pc, #100]	; (8001ce4 <prvAddNewTaskToReadyList+0xac>)
 8001c80:	f8d2 34dc 	ldr.w	r3, [r2, #1244]	; 0x4dc
 8001c84:	3301      	adds	r3, #1
 8001c86:	f8c2 34dc 	str.w	r3, [r2, #1244]	; 0x4dc
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001c8a:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8001c8c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c8e:	f8d2 24e0 	ldr.w	r2, [r2, #1248]	; 0x4e0
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d902      	bls.n	8001c9c <prvAddNewTaskToReadyList+0x64>
 8001c96:	4a13      	ldr	r2, [pc, #76]	; (8001ce4 <prvAddNewTaskToReadyList+0xac>)
 8001c98:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
 8001c9c:	4d11      	ldr	r5, [pc, #68]	; (8001ce4 <prvAddNewTaskToReadyList+0xac>)
 8001c9e:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8001ca2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001ca6:	1d21      	adds	r1, r4, #4
 8001ca8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001cac:	f7ff f9d0 	bl	8001050 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8001cb0:	f001 fa0e 	bl	80030d0 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8001cb4:	f8d5 34d8 	ldr.w	r3, [r5, #1240]	; 0x4d8
 8001cb8:	b17b      	cbz	r3, 8001cda <prvAddNewTaskToReadyList+0xa2>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001cba:	f8d5 34d4 	ldr.w	r3, [r5, #1236]	; 0x4d4
 8001cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cc0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d209      	bcs.n	8001cda <prvAddNewTaskToReadyList+0xa2>
			taskYIELD_IF_USING_PREEMPTION();
 8001cc6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cce:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001cd2:	f3bf 8f4f 	dsb	sy
 8001cd6:	f3bf 8f6f 	isb	sy
}
 8001cda:	bd38      	pop	{r3, r4, r5, pc}
				prvInitialiseTaskLists();
 8001cdc:	f7ff ff80 	bl	8001be0 <prvInitialiseTaskLists>
 8001ce0:	e7cd      	b.n	8001c7e <prvAddNewTaskToReadyList+0x46>
 8001ce2:	bf00      	nop
 8001ce4:	20000784 	.word	0x20000784

08001ce8 <prvDeleteTCB>:
	{
 8001ce8:	b510      	push	{r4, lr}
 8001cea:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8001cec:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
 8001cf0:	b173      	cbz	r3, 8001d10 <prvDeleteTCB+0x28>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d013      	beq.n	8001d1e <prvDeleteTCB+0x36>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d010      	beq.n	8001d1c <prvDeleteTCB+0x34>
 8001cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cfe:	b672      	cpsid	i
 8001d00:	f383 8811 	msr	BASEPRI, r3
 8001d04:	f3bf 8f6f 	isb	sy
 8001d08:	f3bf 8f4f 	dsb	sy
 8001d0c:	b662      	cpsie	i
 8001d0e:	e7fe      	b.n	8001d0e <prvDeleteTCB+0x26>
				vPortFree( pxTCB->pxStack );
 8001d10:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8001d12:	f001 fbb3 	bl	800347c <vPortFree>
				vPortFree( pxTCB );
 8001d16:	4620      	mov	r0, r4
 8001d18:	f001 fbb0 	bl	800347c <vPortFree>
	}
 8001d1c:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8001d1e:	f001 fbad 	bl	800347c <vPortFree>
 8001d22:	e7fb      	b.n	8001d1c <prvDeleteTCB+0x34>

08001d24 <prvCheckTasksWaitingTermination>:
{
 8001d24:	b538      	push	{r3, r4, r5, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001d26:	e017      	b.n	8001d58 <prvCheckTasksWaitingTermination+0x34>
			taskENTER_CRITICAL();
 8001d28:	f001 f9ac 	bl	8003084 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001d2c:	4c0d      	ldr	r4, [pc, #52]	; (8001d64 <prvCheckTasksWaitingTermination+0x40>)
 8001d2e:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
 8001d32:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001d34:	1d28      	adds	r0, r5, #4
 8001d36:	f7ff f9af 	bl	8001098 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001d3a:	f8d4 34d0 	ldr.w	r3, [r4, #1232]	; 0x4d0
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	f8c4 34d0 	str.w	r3, [r4, #1232]	; 0x4d0
				--uxDeletedTasksWaitingCleanUp;
 8001d44:	f8d4 34e4 	ldr.w	r3, [r4, #1252]	; 0x4e4
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	f8c4 34e4 	str.w	r3, [r4, #1252]	; 0x4e4
			taskEXIT_CRITICAL();
 8001d4e:	f001 f9bf 	bl	80030d0 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8001d52:	4628      	mov	r0, r5
 8001d54:	f7ff ffc8 	bl	8001ce8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001d58:	4b02      	ldr	r3, [pc, #8]	; (8001d64 <prvCheckTasksWaitingTermination+0x40>)
 8001d5a:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1e2      	bne.n	8001d28 <prvCheckTasksWaitingTermination+0x4>
}
 8001d62:	bd38      	pop	{r3, r4, r5, pc}
 8001d64:	20000784 	.word	0x20000784

08001d68 <prvIdleTask>:
{
 8001d68:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8001d6a:	f7ff ffdb 	bl	8001d24 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001d6e:	4b07      	ldr	r3, [pc, #28]	; (8001d8c <prvIdleTask+0x24>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d9f9      	bls.n	8001d6a <prvIdleTask+0x2>
				taskYIELD();
 8001d76:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d7e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001d82:	f3bf 8f4f 	dsb	sy
 8001d86:	f3bf 8f6f 	isb	sy
 8001d8a:	e7ee      	b.n	8001d6a <prvIdleTask+0x2>
 8001d8c:	20000784 	.word	0x20000784

08001d90 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001d90:	b570      	push	{r4, r5, r6, lr}
 8001d92:	4604      	mov	r4, r0
 8001d94:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001d96:	4b1a      	ldr	r3, [pc, #104]	; (8001e00 <prvAddCurrentTaskToDelayedList+0x70>)
 8001d98:	f8d3 64e8 	ldr.w	r6, [r3, #1256]	; 0x4e8
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001d9c:	f8d3 04d4 	ldr.w	r0, [r3, #1236]	; 0x4d4
 8001da0:	3004      	adds	r0, #4
 8001da2:	f7ff f979 	bl	8001098 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001da6:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001daa:	bf14      	ite	ne
 8001dac:	2300      	movne	r3, #0
 8001dae:	2301      	moveq	r3, #1
 8001db0:	2d00      	cmp	r5, #0
 8001db2:	bf08      	it	eq
 8001db4:	2300      	moveq	r3, #0
 8001db6:	b97b      	cbnz	r3, 8001dd8 <prvAddCurrentTaskToDelayedList+0x48>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001db8:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001dba:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <prvAddCurrentTaskToDelayedList+0x70>)
 8001dbc:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8001dc0:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8001dc2:	42a6      	cmp	r6, r4
 8001dc4:	d90f      	bls.n	8001de6 <prvAddCurrentTaskToDelayedList+0x56>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001dc6:	4b0e      	ldr	r3, [pc, #56]	; (8001e00 <prvAddCurrentTaskToDelayedList+0x70>)
 8001dc8:	f8d3 04cc 	ldr.w	r0, [r3, #1228]	; 0x4cc
 8001dcc:	f8d3 14d4 	ldr.w	r1, [r3, #1236]	; 0x4d4
 8001dd0:	3104      	adds	r1, #4
 8001dd2:	f7ff f948 	bl	8001066 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001dd6:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001dd8:	4809      	ldr	r0, [pc, #36]	; (8001e00 <prvAddCurrentTaskToDelayedList+0x70>)
 8001dda:	f8d0 14d4 	ldr.w	r1, [r0, #1236]	; 0x4d4
 8001dde:	3104      	adds	r1, #4
 8001de0:	f7ff f936 	bl	8001050 <vListInsertEnd>
 8001de4:	e7f7      	b.n	8001dd6 <prvAddCurrentTaskToDelayedList+0x46>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001de6:	4d06      	ldr	r5, [pc, #24]	; (8001e00 <prvAddCurrentTaskToDelayedList+0x70>)
 8001de8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8001dea:	f8d5 14d4 	ldr.w	r1, [r5, #1236]	; 0x4d4
 8001dee:	3104      	adds	r1, #4
 8001df0:	f7ff f939 	bl	8001066 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001df4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001df6:	42a3      	cmp	r3, r4
 8001df8:	d9ed      	bls.n	8001dd6 <prvAddCurrentTaskToDelayedList+0x46>
					xNextTaskUnblockTime = xTimeToWake;
 8001dfa:	62ec      	str	r4, [r5, #44]	; 0x2c
}
 8001dfc:	e7eb      	b.n	8001dd6 <prvAddCurrentTaskToDelayedList+0x46>
 8001dfe:	bf00      	nop
 8001e00:	20000784 	.word	0x20000784

08001e04 <xTaskCreateStatic>:
	{
 8001e04:	b530      	push	{r4, r5, lr}
 8001e06:	b087      	sub	sp, #28
 8001e08:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8001e0a:	b18c      	cbz	r4, 8001e30 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8001e0c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001e0e:	b1d5      	cbz	r5, 8001e46 <xTaskCreateStatic+0x42>
			volatile size_t xSize = sizeof( StaticTask_t );
 8001e10:	255c      	movs	r5, #92	; 0x5c
 8001e12:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001e14:	9d04      	ldr	r5, [sp, #16]
 8001e16:	2d5c      	cmp	r5, #92	; 0x5c
 8001e18:	d020      	beq.n	8001e5c <xTaskCreateStatic+0x58>
 8001e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e1e:	b672      	cpsid	i
 8001e20:	f383 8811 	msr	BASEPRI, r3
 8001e24:	f3bf 8f6f 	isb	sy
 8001e28:	f3bf 8f4f 	dsb	sy
 8001e2c:	b662      	cpsie	i
 8001e2e:	e7fe      	b.n	8001e2e <xTaskCreateStatic+0x2a>
 8001e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e34:	b672      	cpsid	i
 8001e36:	f383 8811 	msr	BASEPRI, r3
 8001e3a:	f3bf 8f6f 	isb	sy
 8001e3e:	f3bf 8f4f 	dsb	sy
 8001e42:	b662      	cpsie	i
		configASSERT( puxStackBuffer != NULL );
 8001e44:	e7fe      	b.n	8001e44 <xTaskCreateStatic+0x40>
 8001e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e4a:	b672      	cpsid	i
 8001e4c:	f383 8811 	msr	BASEPRI, r3
 8001e50:	f3bf 8f6f 	isb	sy
 8001e54:	f3bf 8f4f 	dsb	sy
 8001e58:	b662      	cpsie	i
		configASSERT( pxTaskBuffer != NULL );
 8001e5a:	e7fe      	b.n	8001e5a <xTaskCreateStatic+0x56>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8001e5c:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001e5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001e60:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001e62:	2402      	movs	r4, #2
 8001e64:	f885 4059 	strb.w	r4, [r5, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001e68:	2400      	movs	r4, #0
 8001e6a:	9403      	str	r4, [sp, #12]
 8001e6c:	9502      	str	r5, [sp, #8]
 8001e6e:	ac05      	add	r4, sp, #20
 8001e70:	9401      	str	r4, [sp, #4]
 8001e72:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001e74:	9400      	str	r4, [sp, #0]
 8001e76:	f7ff fe61 	bl	8001b3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001e7a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001e7c:	f7ff fedc 	bl	8001c38 <prvAddNewTaskToReadyList>
	}
 8001e80:	9805      	ldr	r0, [sp, #20]
 8001e82:	b007      	add	sp, #28
 8001e84:	bd30      	pop	{r4, r5, pc}

08001e86 <xTaskCreate>:
	{
 8001e86:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	4607      	mov	r7, r0
 8001e8e:	4688      	mov	r8, r1
 8001e90:	4614      	mov	r4, r2
 8001e92:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001e94:	0090      	lsls	r0, r2, #2
 8001e96:	f001 fa7f 	bl	8003398 <pvPortMalloc>
			if( pxStack != NULL )
 8001e9a:	b300      	cbz	r0, 8001ede <xTaskCreate+0x58>
 8001e9c:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001e9e:	205c      	movs	r0, #92	; 0x5c
 8001ea0:	f001 fa7a 	bl	8003398 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8001ea4:	4605      	mov	r5, r0
 8001ea6:	b1b0      	cbz	r0, 8001ed6 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 8001ea8:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8001eac:	b1e5      	cbz	r5, 8001ee8 <xTaskCreate+0x62>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	f885 3059 	strb.w	r3, [r5, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001eb4:	9303      	str	r3, [sp, #12]
 8001eb6:	9502      	str	r5, [sp, #8]
 8001eb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001eba:	9301      	str	r3, [sp, #4]
 8001ebc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	4633      	mov	r3, r6
 8001ec2:	4622      	mov	r2, r4
 8001ec4:	4641      	mov	r1, r8
 8001ec6:	4638      	mov	r0, r7
 8001ec8:	f7ff fe38 	bl	8001b3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001ecc:	4628      	mov	r0, r5
 8001ece:	f7ff feb3 	bl	8001c38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001ed2:	2001      	movs	r0, #1
 8001ed4:	e005      	b.n	8001ee2 <xTaskCreate+0x5c>
					vPortFree( pxStack );
 8001ed6:	4648      	mov	r0, r9
 8001ed8:	f001 fad0 	bl	800347c <vPortFree>
 8001edc:	e7e6      	b.n	8001eac <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001ede:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8001ee2:	b005      	add	sp, #20
 8001ee4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001ee8:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8001eec:	e7f9      	b.n	8001ee2 <xTaskCreate+0x5c>
	...

08001ef0 <vTaskStartScheduler>:
{
 8001ef0:	b510      	push	{r4, lr}
 8001ef2:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001ef4:	2400      	movs	r4, #0
 8001ef6:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001ef8:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001efa:	aa07      	add	r2, sp, #28
 8001efc:	a906      	add	r1, sp, #24
 8001efe:	a805      	add	r0, sp, #20
 8001f00:	f7fe ffa6 	bl	8000e50 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001f04:	9b05      	ldr	r3, [sp, #20]
 8001f06:	9302      	str	r3, [sp, #8]
 8001f08:	9b06      	ldr	r3, [sp, #24]
 8001f0a:	9301      	str	r3, [sp, #4]
 8001f0c:	9400      	str	r4, [sp, #0]
 8001f0e:	4623      	mov	r3, r4
 8001f10:	9a07      	ldr	r2, [sp, #28]
 8001f12:	491a      	ldr	r1, [pc, #104]	; (8001f7c <vTaskStartScheduler+0x8c>)
 8001f14:	481a      	ldr	r0, [pc, #104]	; (8001f80 <vTaskStartScheduler+0x90>)
 8001f16:	f7ff ff75 	bl	8001e04 <xTaskCreateStatic>
 8001f1a:	4b1a      	ldr	r3, [pc, #104]	; (8001f84 <vTaskStartScheduler+0x94>)
 8001f1c:	f8c3 04f0 	str.w	r0, [r3, #1264]	; 0x4f0
		if( xIdleTaskHandle != NULL )
 8001f20:	b140      	cbz	r0, 8001f34 <vTaskStartScheduler+0x44>
			xReturn = xTimerCreateTimerTask();
 8001f22:	f000 fdfd 	bl	8002b20 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8001f26:	2801      	cmp	r0, #1
 8001f28:	d006      	beq.n	8001f38 <vTaskStartScheduler+0x48>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001f2a:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001f2e:	d01a      	beq.n	8001f66 <vTaskStartScheduler+0x76>
}
 8001f30:	b008      	add	sp, #32
 8001f32:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 8001f34:	2000      	movs	r0, #0
 8001f36:	e7f6      	b.n	8001f26 <vTaskStartScheduler+0x36>
 8001f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f3c:	b672      	cpsid	i
 8001f3e:	f383 8811 	msr	BASEPRI, r3
 8001f42:	f3bf 8f6f 	isb	sy
 8001f46:	f3bf 8f4f 	dsb	sy
 8001f4a:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8001f4c:	4b0d      	ldr	r3, [pc, #52]	; (8001f84 <vTaskStartScheduler+0x94>)
 8001f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8001f52:	62da      	str	r2, [r3, #44]	; 0x2c
		xSchedulerRunning = pdTRUE;
 8001f54:	2201      	movs	r2, #1
 8001f56:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
		if( xPortStartScheduler() != pdFALSE )
 8001f60:	f001 f92c 	bl	80031bc <xPortStartScheduler>
 8001f64:	e7e4      	b.n	8001f30 <vTaskStartScheduler+0x40>
 8001f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f6a:	b672      	cpsid	i
 8001f6c:	f383 8811 	msr	BASEPRI, r3
 8001f70:	f3bf 8f6f 	isb	sy
 8001f74:	f3bf 8f4f 	dsb	sy
 8001f78:	b662      	cpsie	i
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001f7a:	e7fe      	b.n	8001f7a <vTaskStartScheduler+0x8a>
 8001f7c:	080067dc 	.word	0x080067dc
 8001f80:	08001d69 	.word	0x08001d69
 8001f84:	20000784 	.word	0x20000784

08001f88 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8001f88:	4a03      	ldr	r2, [pc, #12]	; (8001f98 <vTaskSuspendAll+0x10>)
 8001f8a:	f8d2 34ec 	ldr.w	r3, [r2, #1260]	; 0x4ec
 8001f8e:	3301      	adds	r3, #1
 8001f90:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
}
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	20000784 	.word	0x20000784

08001f9c <xTaskGetTickCount>:
		xTicks = xTickCount;
 8001f9c:	4b01      	ldr	r3, [pc, #4]	; (8001fa4 <xTaskGetTickCount+0x8>)
 8001f9e:	f8d3 04e8 	ldr.w	r0, [r3, #1256]	; 0x4e8
}
 8001fa2:	4770      	bx	lr
 8001fa4:	20000784 	.word	0x20000784

08001fa8 <xTaskIncrementTick>:
{
 8001fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001fac:	4b44      	ldr	r3, [pc, #272]	; (80020c0 <xTaskIncrementTick+0x118>)
 8001fae:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d172      	bne.n	800209c <xTaskIncrementTick+0xf4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001fb6:	4b42      	ldr	r3, [pc, #264]	; (80020c0 <xTaskIncrementTick+0x118>)
 8001fb8:	f8d3 54e8 	ldr.w	r5, [r3, #1256]	; 0x4e8
 8001fbc:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8001fbe:	f8c3 54e8 	str.w	r5, [r3, #1256]	; 0x4e8
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001fc2:	b9dd      	cbnz	r5, 8001ffc <xTaskIncrementTick+0x54>
			taskSWITCH_DELAYED_LISTS();
 8001fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	b153      	cbz	r3, 8001fe0 <xTaskIncrementTick+0x38>
 8001fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fce:	b672      	cpsid	i
 8001fd0:	f383 8811 	msr	BASEPRI, r3
 8001fd4:	f3bf 8f6f 	isb	sy
 8001fd8:	f3bf 8f4f 	dsb	sy
 8001fdc:	b662      	cpsie	i
 8001fde:	e7fe      	b.n	8001fde <xTaskIncrementTick+0x36>
 8001fe0:	4b37      	ldr	r3, [pc, #220]	; (80020c0 <xTaskIncrementTick+0x118>)
 8001fe2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fe4:	f8d3 14cc 	ldr.w	r1, [r3, #1228]	; 0x4cc
 8001fe8:	6299      	str	r1, [r3, #40]	; 0x28
 8001fea:	f8c3 24cc 	str.w	r2, [r3, #1228]	; 0x4cc
 8001fee:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	; 0x4f4
 8001ff2:	3201      	adds	r2, #1
 8001ff4:	f8c3 24f4 	str.w	r2, [r3, #1268]	; 0x4f4
 8001ff8:	f7ff fd8e 	bl	8001b18 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001ffc:	4b30      	ldr	r3, [pc, #192]	; (80020c0 <xTaskIncrementTick+0x118>)
 8001ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002000:	42ab      	cmp	r3, r5
 8002002:	d940      	bls.n	8002086 <xTaskIncrementTick+0xde>
BaseType_t xSwitchRequired = pdFALSE;
 8002004:	f04f 0800 	mov.w	r8, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002008:	4a2d      	ldr	r2, [pc, #180]	; (80020c0 <xTaskIncrementTick+0x118>)
 800200a:	f8d2 34d4 	ldr.w	r3, [r2, #1236]	; 0x4d4
 800200e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002010:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002014:	0099      	lsls	r1, r3, #2
 8002016:	440a      	add	r2, r1
 8002018:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800201a:	2b01      	cmp	r3, #1
 800201c:	d946      	bls.n	80020ac <xTaskIncrementTick+0x104>
				xSwitchRequired = pdTRUE;
 800201e:	f04f 0801 	mov.w	r8, #1
 8002022:	e043      	b.n	80020ac <xTaskIncrementTick+0x104>
							xSwitchRequired = pdTRUE;
 8002024:	f04f 0801 	mov.w	r8, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002028:	4b25      	ldr	r3, [pc, #148]	; (80020c0 <xTaskIncrementTick+0x118>)
 800202a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	b36b      	cbz	r3, 800208c <xTaskIncrementTick+0xe4>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002030:	4b23      	ldr	r3, [pc, #140]	; (80020c0 <xTaskIncrementTick+0x118>)
 8002032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002038:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 800203a:	429d      	cmp	r5, r3
 800203c:	d32b      	bcc.n	8002096 <xTaskIncrementTick+0xee>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800203e:	1d27      	adds	r7, r4, #4
 8002040:	4638      	mov	r0, r7
 8002042:	f7ff f829 	bl	8001098 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002046:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002048:	b11b      	cbz	r3, 8002052 <xTaskIncrementTick+0xaa>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800204a:	f104 0018 	add.w	r0, r4, #24
 800204e:	f7ff f823 	bl	8001098 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002052:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002054:	4a1a      	ldr	r2, [pc, #104]	; (80020c0 <xTaskIncrementTick+0x118>)
 8002056:	f8d2 24e0 	ldr.w	r2, [r2, #1248]	; 0x4e0
 800205a:	4293      	cmp	r3, r2
 800205c:	d902      	bls.n	8002064 <xTaskIncrementTick+0xbc>
 800205e:	4a18      	ldr	r2, [pc, #96]	; (80020c0 <xTaskIncrementTick+0x118>)
 8002060:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
 8002064:	4e16      	ldr	r6, [pc, #88]	; (80020c0 <xTaskIncrementTick+0x118>)
 8002066:	f106 0030 	add.w	r0, r6, #48	; 0x30
 800206a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800206e:	009a      	lsls	r2, r3, #2
 8002070:	4639      	mov	r1, r7
 8002072:	4410      	add	r0, r2
 8002074:	f7fe ffec 	bl	8001050 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002078:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800207a:	f8d6 34d4 	ldr.w	r3, [r6, #1236]	; 0x4d4
 800207e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002080:	429a      	cmp	r2, r3
 8002082:	d2cf      	bcs.n	8002024 <xTaskIncrementTick+0x7c>
 8002084:	e7d0      	b.n	8002028 <xTaskIncrementTick+0x80>
BaseType_t xSwitchRequired = pdFALSE;
 8002086:	f04f 0800 	mov.w	r8, #0
 800208a:	e7cd      	b.n	8002028 <xTaskIncrementTick+0x80>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800208c:	4b0c      	ldr	r3, [pc, #48]	; (80020c0 <xTaskIncrementTick+0x118>)
 800208e:	f04f 32ff 	mov.w	r2, #4294967295
 8002092:	62da      	str	r2, [r3, #44]	; 0x2c
					break;
 8002094:	e7b8      	b.n	8002008 <xTaskIncrementTick+0x60>
						xNextTaskUnblockTime = xItemValue;
 8002096:	4a0a      	ldr	r2, [pc, #40]	; (80020c0 <xTaskIncrementTick+0x118>)
 8002098:	62d3      	str	r3, [r2, #44]	; 0x2c
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800209a:	e7b5      	b.n	8002008 <xTaskIncrementTick+0x60>
		++uxPendedTicks;
 800209c:	4a08      	ldr	r2, [pc, #32]	; (80020c0 <xTaskIncrementTick+0x118>)
 800209e:	f8d2 34f8 	ldr.w	r3, [r2, #1272]	; 0x4f8
 80020a2:	3301      	adds	r3, #1
 80020a4:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
BaseType_t xSwitchRequired = pdFALSE;
 80020a8:	f04f 0800 	mov.w	r8, #0
		if( xYieldPending != pdFALSE )
 80020ac:	4b04      	ldr	r3, [pc, #16]	; (80020c0 <xTaskIncrementTick+0x118>)
 80020ae:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80020b2:	b10b      	cbz	r3, 80020b8 <xTaskIncrementTick+0x110>
			xSwitchRequired = pdTRUE;
 80020b4:	f04f 0801 	mov.w	r8, #1
}
 80020b8:	4640      	mov	r0, r8
 80020ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020be:	bf00      	nop
 80020c0:	20000784 	.word	0x20000784

080020c4 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 80020c4:	4b3b      	ldr	r3, [pc, #236]	; (80021b4 <xTaskResumeAll+0xf0>)
 80020c6:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80020ca:	b953      	cbnz	r3, 80020e2 <xTaskResumeAll+0x1e>
 80020cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020d0:	b672      	cpsid	i
 80020d2:	f383 8811 	msr	BASEPRI, r3
 80020d6:	f3bf 8f6f 	isb	sy
 80020da:	f3bf 8f4f 	dsb	sy
 80020de:	b662      	cpsie	i
 80020e0:	e7fe      	b.n	80020e0 <xTaskResumeAll+0x1c>
{
 80020e2:	b570      	push	{r4, r5, r6, lr}
	taskENTER_CRITICAL();
 80020e4:	f000 ffce 	bl	8003084 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80020e8:	4b32      	ldr	r3, [pc, #200]	; (80021b4 <xTaskResumeAll+0xf0>)
 80020ea:	f8d3 24ec 	ldr.w	r2, [r3, #1260]	; 0x4ec
 80020ee:	3a01      	subs	r2, #1
 80020f0:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80020f4:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d156      	bne.n	80021aa <xTaskResumeAll+0xe6>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80020fc:	4b2d      	ldr	r3, [pc, #180]	; (80021b4 <xTaskResumeAll+0xf0>)
 80020fe:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
 8002102:	b90b      	cbnz	r3, 8002108 <xTaskResumeAll+0x44>
BaseType_t xAlreadyYielded = pdFALSE;
 8002104:	2400      	movs	r4, #0
 8002106:	e051      	b.n	80021ac <xTaskResumeAll+0xe8>
TCB_t *pxTCB = NULL;
 8002108:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800210a:	4b2a      	ldr	r3, [pc, #168]	; (80021b4 <xTaskResumeAll+0xf0>)
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	b32b      	cbz	r3, 800215c <xTaskResumeAll+0x98>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002110:	4d28      	ldr	r5, [pc, #160]	; (80021b4 <xTaskResumeAll+0xf0>)
 8002112:	6a2b      	ldr	r3, [r5, #32]
 8002114:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002116:	f104 0018 	add.w	r0, r4, #24
 800211a:	f7fe ffbd 	bl	8001098 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800211e:	1d26      	adds	r6, r4, #4
 8002120:	4630      	mov	r0, r6
 8002122:	f7fe ffb9 	bl	8001098 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002126:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002128:	f8d5 24e0 	ldr.w	r2, [r5, #1248]	; 0x4e0
 800212c:	4293      	cmp	r3, r2
 800212e:	d901      	bls.n	8002134 <xTaskResumeAll+0x70>
 8002130:	f8c5 34e0 	str.w	r3, [r5, #1248]	; 0x4e0
 8002134:	4d1f      	ldr	r5, [pc, #124]	; (80021b4 <xTaskResumeAll+0xf0>)
 8002136:	f105 0030 	add.w	r0, r5, #48	; 0x30
 800213a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800213e:	4631      	mov	r1, r6
 8002140:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8002144:	f7fe ff84 	bl	8001050 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002148:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800214a:	f8d5 34d4 	ldr.w	r3, [r5, #1236]	; 0x4d4
 800214e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002150:	429a      	cmp	r2, r3
 8002152:	d3da      	bcc.n	800210a <xTaskResumeAll+0x46>
						xYieldPending = pdTRUE;
 8002154:	2201      	movs	r2, #1
 8002156:	f8c5 24fc 	str.w	r2, [r5, #1276]	; 0x4fc
 800215a:	e7d6      	b.n	800210a <xTaskResumeAll+0x46>
				if( pxTCB != NULL )
 800215c:	b10c      	cbz	r4, 8002162 <xTaskResumeAll+0x9e>
					prvResetNextTaskUnblockTime();
 800215e:	f7ff fcdb 	bl	8001b18 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002162:	4b14      	ldr	r3, [pc, #80]	; (80021b4 <xTaskResumeAll+0xf0>)
 8002164:	f8d3 44f8 	ldr.w	r4, [r3, #1272]	; 0x4f8
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002168:	b98c      	cbnz	r4, 800218e <xTaskResumeAll+0xca>
				if( xYieldPending != pdFALSE )
 800216a:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <xTaskResumeAll+0xf0>)
 800216c:	f8d3 44fc 	ldr.w	r4, [r3, #1276]	; 0x4fc
 8002170:	b1e4      	cbz	r4, 80021ac <xTaskResumeAll+0xe8>
					taskYIELD_IF_USING_PREEMPTION();
 8002172:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002176:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800217a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800217e:	f3bf 8f4f 	dsb	sy
 8002182:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8002186:	2401      	movs	r4, #1
 8002188:	e010      	b.n	80021ac <xTaskResumeAll+0xe8>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800218a:	3c01      	subs	r4, #1
 800218c:	d008      	beq.n	80021a0 <xTaskResumeAll+0xdc>
							if( xTaskIncrementTick() != pdFALSE )
 800218e:	f7ff ff0b 	bl	8001fa8 <xTaskIncrementTick>
 8002192:	2800      	cmp	r0, #0
 8002194:	d0f9      	beq.n	800218a <xTaskResumeAll+0xc6>
								xYieldPending = pdTRUE;
 8002196:	4b07      	ldr	r3, [pc, #28]	; (80021b4 <xTaskResumeAll+0xf0>)
 8002198:	2201      	movs	r2, #1
 800219a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
 800219e:	e7f4      	b.n	800218a <xTaskResumeAll+0xc6>
						uxPendedTicks = 0;
 80021a0:	4b04      	ldr	r3, [pc, #16]	; (80021b4 <xTaskResumeAll+0xf0>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
 80021a8:	e7df      	b.n	800216a <xTaskResumeAll+0xa6>
BaseType_t xAlreadyYielded = pdFALSE;
 80021aa:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80021ac:	f000 ff90 	bl	80030d0 <vPortExitCritical>
}
 80021b0:	4620      	mov	r0, r4
 80021b2:	bd70      	pop	{r4, r5, r6, pc}
 80021b4:	20000784 	.word	0x20000784

080021b8 <vTaskDelay>:
	{
 80021b8:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80021ba:	b1c0      	cbz	r0, 80021ee <vTaskDelay+0x36>
 80021bc:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 80021be:	4b11      	ldr	r3, [pc, #68]	; (8002204 <vTaskDelay+0x4c>)
 80021c0:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80021c4:	b153      	cbz	r3, 80021dc <vTaskDelay+0x24>
 80021c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ca:	b672      	cpsid	i
 80021cc:	f383 8811 	msr	BASEPRI, r3
 80021d0:	f3bf 8f6f 	isb	sy
 80021d4:	f3bf 8f4f 	dsb	sy
 80021d8:	b662      	cpsie	i
 80021da:	e7fe      	b.n	80021da <vTaskDelay+0x22>
			vTaskSuspendAll();
 80021dc:	f7ff fed4 	bl	8001f88 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80021e0:	2100      	movs	r1, #0
 80021e2:	4620      	mov	r0, r4
 80021e4:	f7ff fdd4 	bl	8001d90 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80021e8:	f7ff ff6c 	bl	80020c4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80021ec:	b948      	cbnz	r0, 8002202 <vTaskDelay+0x4a>
			portYIELD_WITHIN_API();
 80021ee:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80021f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021f6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80021fa:	f3bf 8f4f 	dsb	sy
 80021fe:	f3bf 8f6f 	isb	sy
	}
 8002202:	bd10      	pop	{r4, pc}
 8002204:	20000784 	.word	0x20000784

08002208 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002208:	4b22      	ldr	r3, [pc, #136]	; (8002294 <vTaskSwitchContext+0x8c>)
 800220a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800220e:	b123      	cbz	r3, 800221a <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 8002210:	4b20      	ldr	r3, [pc, #128]	; (8002294 <vTaskSwitchContext+0x8c>)
 8002212:	2201      	movs	r2, #1
 8002214:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
 8002218:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800221a:	4b1e      	ldr	r3, [pc, #120]	; (8002294 <vTaskSwitchContext+0x8c>)
 800221c:	2200      	movs	r2, #0
 800221e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002222:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002226:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800222a:	0091      	lsls	r1, r2, #2
 800222c:	4a19      	ldr	r2, [pc, #100]	; (8002294 <vTaskSwitchContext+0x8c>)
 800222e:	440a      	add	r2, r1
 8002230:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002232:	b96a      	cbnz	r2, 8002250 <vTaskSwitchContext+0x48>
 8002234:	b10b      	cbz	r3, 800223a <vTaskSwitchContext+0x32>
 8002236:	3b01      	subs	r3, #1
 8002238:	e7f5      	b.n	8002226 <vTaskSwitchContext+0x1e>
 800223a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800223e:	b672      	cpsid	i
 8002240:	f383 8811 	msr	BASEPRI, r3
 8002244:	f3bf 8f6f 	isb	sy
 8002248:	f3bf 8f4f 	dsb	sy
 800224c:	b662      	cpsie	i
 800224e:	e7fe      	b.n	800224e <vTaskSwitchContext+0x46>
 8002250:	4a10      	ldr	r2, [pc, #64]	; (8002294 <vTaskSwitchContext+0x8c>)
 8002252:	4411      	add	r1, r2
 8002254:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8002256:	6840      	ldr	r0, [r0, #4]
 8002258:	6348      	str	r0, [r1, #52]	; 0x34
 800225a:	3230      	adds	r2, #48	; 0x30
 800225c:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8002260:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8002264:	3108      	adds	r1, #8
 8002266:	440a      	add	r2, r1
 8002268:	4290      	cmp	r0, r2
 800226a:	d00b      	beq.n	8002284 <vTaskSwitchContext+0x7c>
 800226c:	4909      	ldr	r1, [pc, #36]	; (8002294 <vTaskSwitchContext+0x8c>)
 800226e:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8002272:	0082      	lsls	r2, r0, #2
 8002274:	440a      	add	r2, r1
 8002276:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002278:	68d2      	ldr	r2, [r2, #12]
 800227a:	f8c1 24d4 	str.w	r2, [r1, #1236]	; 0x4d4
 800227e:	f8c1 34e0 	str.w	r3, [r1, #1248]	; 0x4e0
}
 8002282:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002284:	6840      	ldr	r0, [r0, #4]
 8002286:	4662      	mov	r2, ip
 8002288:	0091      	lsls	r1, r2, #2
 800228a:	4a02      	ldr	r2, [pc, #8]	; (8002294 <vTaskSwitchContext+0x8c>)
 800228c:	440a      	add	r2, r1
 800228e:	6350      	str	r0, [r2, #52]	; 0x34
 8002290:	e7ec      	b.n	800226c <vTaskSwitchContext+0x64>
 8002292:	bf00      	nop
 8002294:	20000784 	.word	0x20000784

08002298 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8002298:	b160      	cbz	r0, 80022b4 <vTaskPlaceOnEventList+0x1c>
{
 800229a:	b510      	push	{r4, lr}
 800229c:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800229e:	4a0b      	ldr	r2, [pc, #44]	; (80022cc <vTaskPlaceOnEventList+0x34>)
 80022a0:	f8d2 14d4 	ldr.w	r1, [r2, #1236]	; 0x4d4
 80022a4:	3118      	adds	r1, #24
 80022a6:	f7fe fede 	bl	8001066 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80022aa:	2101      	movs	r1, #1
 80022ac:	4620      	mov	r0, r4
 80022ae:	f7ff fd6f 	bl	8001d90 <prvAddCurrentTaskToDelayedList>
}
 80022b2:	bd10      	pop	{r4, pc}
 80022b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022b8:	b672      	cpsid	i
 80022ba:	f383 8811 	msr	BASEPRI, r3
 80022be:	f3bf 8f6f 	isb	sy
 80022c2:	f3bf 8f4f 	dsb	sy
 80022c6:	b662      	cpsie	i
	configASSERT( pxEventList );
 80022c8:	e7fe      	b.n	80022c8 <vTaskPlaceOnEventList+0x30>
 80022ca:	bf00      	nop
 80022cc:	20000784 	.word	0x20000784

080022d0 <vTaskPlaceOnEventListRestricted>:
	{
 80022d0:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 80022d2:	b178      	cbz	r0, 80022f4 <vTaskPlaceOnEventListRestricted+0x24>
 80022d4:	460d      	mov	r5, r1
 80022d6:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80022d8:	4a0c      	ldr	r2, [pc, #48]	; (800230c <vTaskPlaceOnEventListRestricted+0x3c>)
 80022da:	f8d2 14d4 	ldr.w	r1, [r2, #1236]	; 0x4d4
 80022de:	3118      	adds	r1, #24
 80022e0:	f7fe feb6 	bl	8001050 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 80022e4:	b10c      	cbz	r4, 80022ea <vTaskPlaceOnEventListRestricted+0x1a>
			xTicksToWait = portMAX_DELAY;
 80022e6:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80022ea:	4621      	mov	r1, r4
 80022ec:	4628      	mov	r0, r5
 80022ee:	f7ff fd4f 	bl	8001d90 <prvAddCurrentTaskToDelayedList>
	}
 80022f2:	bd38      	pop	{r3, r4, r5, pc}
 80022f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022f8:	b672      	cpsid	i
 80022fa:	f383 8811 	msr	BASEPRI, r3
 80022fe:	f3bf 8f6f 	isb	sy
 8002302:	f3bf 8f4f 	dsb	sy
 8002306:	b662      	cpsie	i
		configASSERT( pxEventList );
 8002308:	e7fe      	b.n	8002308 <vTaskPlaceOnEventListRestricted+0x38>
 800230a:	bf00      	nop
 800230c:	20000784 	.word	0x20000784

08002310 <xTaskRemoveFromEventList>:
{
 8002310:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002312:	68c3      	ldr	r3, [r0, #12]
 8002314:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8002316:	b34c      	cbz	r4, 800236c <xTaskRemoveFromEventList+0x5c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002318:	f104 0518 	add.w	r5, r4, #24
 800231c:	4628      	mov	r0, r5
 800231e:	f7fe febb 	bl	8001098 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002322:	4b1b      	ldr	r3, [pc, #108]	; (8002390 <xTaskRemoveFromEventList+0x80>)
 8002324:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002328:	bb5b      	cbnz	r3, 8002382 <xTaskRemoveFromEventList+0x72>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800232a:	1d25      	adds	r5, r4, #4
 800232c:	4628      	mov	r0, r5
 800232e:	f7fe feb3 	bl	8001098 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002332:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002334:	4b16      	ldr	r3, [pc, #88]	; (8002390 <xTaskRemoveFromEventList+0x80>)
 8002336:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800233a:	4298      	cmp	r0, r3
 800233c:	d902      	bls.n	8002344 <xTaskRemoveFromEventList+0x34>
 800233e:	4b14      	ldr	r3, [pc, #80]	; (8002390 <xTaskRemoveFromEventList+0x80>)
 8002340:	f8c3 04e0 	str.w	r0, [r3, #1248]	; 0x4e0
 8002344:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002348:	4629      	mov	r1, r5
 800234a:	4b12      	ldr	r3, [pc, #72]	; (8002394 <xTaskRemoveFromEventList+0x84>)
 800234c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002350:	f7fe fe7e 	bl	8001050 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002354:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002356:	4b0e      	ldr	r3, [pc, #56]	; (8002390 <xTaskRemoveFromEventList+0x80>)
 8002358:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800235c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235e:	429a      	cmp	r2, r3
 8002360:	d914      	bls.n	800238c <xTaskRemoveFromEventList+0x7c>
		xYieldPending = pdTRUE;
 8002362:	2001      	movs	r0, #1
 8002364:	4b0a      	ldr	r3, [pc, #40]	; (8002390 <xTaskRemoveFromEventList+0x80>)
 8002366:	f8c3 04fc 	str.w	r0, [r3, #1276]	; 0x4fc
}
 800236a:	bd38      	pop	{r3, r4, r5, pc}
 800236c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002370:	b672      	cpsid	i
 8002372:	f383 8811 	msr	BASEPRI, r3
 8002376:	f3bf 8f6f 	isb	sy
 800237a:	f3bf 8f4f 	dsb	sy
 800237e:	b662      	cpsie	i
	configASSERT( pxUnblockedTCB );
 8002380:	e7fe      	b.n	8002380 <xTaskRemoveFromEventList+0x70>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002382:	4629      	mov	r1, r5
 8002384:	4804      	ldr	r0, [pc, #16]	; (8002398 <xTaskRemoveFromEventList+0x88>)
 8002386:	f7fe fe63 	bl	8001050 <vListInsertEnd>
 800238a:	e7e3      	b.n	8002354 <xTaskRemoveFromEventList+0x44>
		xReturn = pdFALSE;
 800238c:	2000      	movs	r0, #0
	return xReturn;
 800238e:	e7ec      	b.n	800236a <xTaskRemoveFromEventList+0x5a>
 8002390:	20000784 	.word	0x20000784
 8002394:	200007b4 	.word	0x200007b4
 8002398:	20000798 	.word	0x20000798

0800239c <vTaskRemoveFromUnorderedEventList>:
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800239c:	4b21      	ldr	r3, [pc, #132]	; (8002424 <vTaskRemoveFromUnorderedEventList+0x88>)
 800239e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80023a2:	b953      	cbnz	r3, 80023ba <vTaskRemoveFromUnorderedEventList+0x1e>
 80023a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023a8:	b672      	cpsid	i
 80023aa:	f383 8811 	msr	BASEPRI, r3
 80023ae:	f3bf 8f6f 	isb	sy
 80023b2:	f3bf 8f4f 	dsb	sy
 80023b6:	b662      	cpsie	i
 80023b8:	e7fe      	b.n	80023b8 <vTaskRemoveFromUnorderedEventList+0x1c>
{
 80023ba:	b570      	push	{r4, r5, r6, lr}
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80023bc:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80023c0:	6001      	str	r1, [r0, #0]
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80023c2:	68c4      	ldr	r4, [r0, #12]
	configASSERT( pxUnblockedTCB );
 80023c4:	b314      	cbz	r4, 800240c <vTaskRemoveFromUnorderedEventList+0x70>
	( void ) uxListRemove( pxEventListItem );
 80023c6:	f7fe fe67 	bl	8001098 <uxListRemove>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80023ca:	1d26      	adds	r6, r4, #4
 80023cc:	4630      	mov	r0, r6
 80023ce:	f7fe fe63 	bl	8001098 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80023d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80023d4:	4a13      	ldr	r2, [pc, #76]	; (8002424 <vTaskRemoveFromUnorderedEventList+0x88>)
 80023d6:	f8d2 24e0 	ldr.w	r2, [r2, #1248]	; 0x4e0
 80023da:	4293      	cmp	r3, r2
 80023dc:	d902      	bls.n	80023e4 <vTaskRemoveFromUnorderedEventList+0x48>
 80023de:	4a11      	ldr	r2, [pc, #68]	; (8002424 <vTaskRemoveFromUnorderedEventList+0x88>)
 80023e0:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
 80023e4:	4d0f      	ldr	r5, [pc, #60]	; (8002424 <vTaskRemoveFromUnorderedEventList+0x88>)
 80023e6:	f105 0030 	add.w	r0, r5, #48	; 0x30
 80023ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80023ee:	4631      	mov	r1, r6
 80023f0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80023f4:	f7fe fe2c 	bl	8001050 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80023f8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80023fa:	f8d5 34d4 	ldr.w	r3, [r5, #1236]	; 0x4d4
 80023fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002400:	429a      	cmp	r2, r3
 8002402:	d902      	bls.n	800240a <vTaskRemoveFromUnorderedEventList+0x6e>
		xYieldPending = pdTRUE;
 8002404:	2201      	movs	r2, #1
 8002406:	f8c5 24fc 	str.w	r2, [r5, #1276]	; 0x4fc
}
 800240a:	bd70      	pop	{r4, r5, r6, pc}
 800240c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002410:	b672      	cpsid	i
 8002412:	f383 8811 	msr	BASEPRI, r3
 8002416:	f3bf 8f6f 	isb	sy
 800241a:	f3bf 8f4f 	dsb	sy
 800241e:	b662      	cpsie	i
	configASSERT( pxUnblockedTCB );
 8002420:	e7fe      	b.n	8002420 <vTaskRemoveFromUnorderedEventList+0x84>
 8002422:	bf00      	nop
 8002424:	20000784 	.word	0x20000784

08002428 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002428:	4b03      	ldr	r3, [pc, #12]	; (8002438 <vTaskInternalSetTimeOutState+0x10>)
 800242a:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	; 0x4f4
 800242e:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002430:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8002434:	6043      	str	r3, [r0, #4]
}
 8002436:	4770      	bx	lr
 8002438:	20000784 	.word	0x20000784

0800243c <xTaskCheckForTimeOut>:
{
 800243c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800243e:	b1d8      	cbz	r0, 8002478 <xTaskCheckForTimeOut+0x3c>
 8002440:	460c      	mov	r4, r1
 8002442:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8002444:	b319      	cbz	r1, 800248e <xTaskCheckForTimeOut+0x52>
	taskENTER_CRITICAL();
 8002446:	f000 fe1d 	bl	8003084 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800244a:	4b1e      	ldr	r3, [pc, #120]	; (80024c4 <xTaskCheckForTimeOut+0x88>)
 800244c:	f8d3 14e8 	ldr.w	r1, [r3, #1256]	; 0x4e8
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002450:	686b      	ldr	r3, [r5, #4]
 8002452:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 8002454:	6822      	ldr	r2, [r4, #0]
 8002456:	f1b2 3fff 	cmp.w	r2, #4294967295
 800245a:	d02b      	beq.n	80024b4 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800245c:	4e19      	ldr	r6, [pc, #100]	; (80024c4 <xTaskCheckForTimeOut+0x88>)
 800245e:	f8d6 64f4 	ldr.w	r6, [r6, #1268]	; 0x4f4
 8002462:	682f      	ldr	r7, [r5, #0]
 8002464:	42b7      	cmp	r7, r6
 8002466:	d001      	beq.n	800246c <xTaskCheckForTimeOut+0x30>
 8002468:	428b      	cmp	r3, r1
 800246a:	d928      	bls.n	80024be <xTaskCheckForTimeOut+0x82>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800246c:	4282      	cmp	r2, r0
 800246e:	d819      	bhi.n	80024a4 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait = 0;
 8002470:	2300      	movs	r3, #0
 8002472:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8002474:	2401      	movs	r4, #1
 8002476:	e01e      	b.n	80024b6 <xTaskCheckForTimeOut+0x7a>
 8002478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800247c:	b672      	cpsid	i
 800247e:	f383 8811 	msr	BASEPRI, r3
 8002482:	f3bf 8f6f 	isb	sy
 8002486:	f3bf 8f4f 	dsb	sy
 800248a:	b662      	cpsie	i
	configASSERT( pxTimeOut );
 800248c:	e7fe      	b.n	800248c <xTaskCheckForTimeOut+0x50>
 800248e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002492:	b672      	cpsid	i
 8002494:	f383 8811 	msr	BASEPRI, r3
 8002498:	f3bf 8f6f 	isb	sy
 800249c:	f3bf 8f4f 	dsb	sy
 80024a0:	b662      	cpsie	i
	configASSERT( pxTicksToWait );
 80024a2:	e7fe      	b.n	80024a2 <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait -= xElapsedTime;
 80024a4:	1a5b      	subs	r3, r3, r1
 80024a6:	4413      	add	r3, r2
 80024a8:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80024aa:	4628      	mov	r0, r5
 80024ac:	f7ff ffbc 	bl	8002428 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80024b0:	2400      	movs	r4, #0
 80024b2:	e000      	b.n	80024b6 <xTaskCheckForTimeOut+0x7a>
				xReturn = pdFALSE;
 80024b4:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80024b6:	f000 fe0b 	bl	80030d0 <vPortExitCritical>
}
 80024ba:	4620      	mov	r0, r4
 80024bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 80024be:	2401      	movs	r4, #1
 80024c0:	e7f9      	b.n	80024b6 <xTaskCheckForTimeOut+0x7a>
 80024c2:	bf00      	nop
 80024c4:	20000784 	.word	0x20000784

080024c8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80024c8:	4b02      	ldr	r3, [pc, #8]	; (80024d4 <vTaskMissedYield+0xc>)
 80024ca:	2201      	movs	r2, #1
 80024cc:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
}
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	20000784 	.word	0x20000784

080024d8 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 80024d8:	4b01      	ldr	r3, [pc, #4]	; (80024e0 <xTaskGetCurrentTaskHandle+0x8>)
 80024da:	f8d3 04d4 	ldr.w	r0, [r3, #1236]	; 0x4d4
	}
 80024de:	4770      	bx	lr
 80024e0:	20000784 	.word	0x20000784

080024e4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80024e4:	4b06      	ldr	r3, [pc, #24]	; (8002500 <xTaskGetSchedulerState+0x1c>)
 80024e6:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 80024ea:	b13b      	cbz	r3, 80024fc <xTaskGetSchedulerState+0x18>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80024ec:	4b04      	ldr	r3, [pc, #16]	; (8002500 <xTaskGetSchedulerState+0x1c>)
 80024ee:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80024f2:	b10b      	cbz	r3, 80024f8 <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_SUSPENDED;
 80024f4:	2000      	movs	r0, #0
	}
 80024f6:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 80024f8:	2002      	movs	r0, #2
 80024fa:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80024fc:	2001      	movs	r0, #1
 80024fe:	4770      	bx	lr
 8002500:	20000784 	.word	0x20000784

08002504 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8002504:	2800      	cmp	r0, #0
 8002506:	d044      	beq.n	8002592 <xTaskPriorityInherit+0x8e>
	{
 8002508:	b538      	push	{r3, r4, r5, lr}
 800250a:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800250c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800250e:	4a23      	ldr	r2, [pc, #140]	; (800259c <xTaskPriorityInherit+0x98>)
 8002510:	f8d2 24d4 	ldr.w	r2, [r2, #1236]	; 0x4d4
 8002514:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002516:	4293      	cmp	r3, r2
 8002518:	d232      	bcs.n	8002580 <xTaskPriorityInherit+0x7c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800251a:	6982      	ldr	r2, [r0, #24]
 800251c:	2a00      	cmp	r2, #0
 800251e:	db06      	blt.n	800252e <xTaskPriorityInherit+0x2a>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002520:	4a1e      	ldr	r2, [pc, #120]	; (800259c <xTaskPriorityInherit+0x98>)
 8002522:	f8d2 24d4 	ldr.w	r2, [r2, #1236]	; 0x4d4
 8002526:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002528:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800252c:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800252e:	6961      	ldr	r1, [r4, #20]
 8002530:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002534:	4a1a      	ldr	r2, [pc, #104]	; (80025a0 <xTaskPriorityInherit+0x9c>)
 8002536:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800253a:	4299      	cmp	r1, r3
 800253c:	d006      	beq.n	800254c <xTaskPriorityInherit+0x48>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800253e:	4b17      	ldr	r3, [pc, #92]	; (800259c <xTaskPriorityInherit+0x98>)
 8002540:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8002544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002546:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 8002548:	2001      	movs	r0, #1
	}
 800254a:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800254c:	1d25      	adds	r5, r4, #4
 800254e:	4628      	mov	r0, r5
 8002550:	f7fe fda2 	bl	8001098 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002554:	4b11      	ldr	r3, [pc, #68]	; (800259c <xTaskPriorityInherit+0x98>)
 8002556:	f8d3 24d4 	ldr.w	r2, [r3, #1236]	; 0x4d4
 800255a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 800255c:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800255e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002562:	4298      	cmp	r0, r3
 8002564:	d902      	bls.n	800256c <xTaskPriorityInherit+0x68>
 8002566:	4b0d      	ldr	r3, [pc, #52]	; (800259c <xTaskPriorityInherit+0x98>)
 8002568:	f8c3 04e0 	str.w	r0, [r3, #1248]	; 0x4e0
 800256c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002570:	4629      	mov	r1, r5
 8002572:	4b0b      	ldr	r3, [pc, #44]	; (80025a0 <xTaskPriorityInherit+0x9c>)
 8002574:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002578:	f7fe fd6a 	bl	8001050 <vListInsertEnd>
				xReturn = pdTRUE;
 800257c:	2001      	movs	r0, #1
 800257e:	e7e4      	b.n	800254a <xTaskPriorityInherit+0x46>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8002580:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8002582:	4b06      	ldr	r3, [pc, #24]	; (800259c <xTaskPriorityInherit+0x98>)
 8002584:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8002588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258a:	429a      	cmp	r2, r3
 800258c:	d303      	bcc.n	8002596 <xTaskPriorityInherit+0x92>
	BaseType_t xReturn = pdFALSE;
 800258e:	2000      	movs	r0, #0
 8002590:	e7db      	b.n	800254a <xTaskPriorityInherit+0x46>
 8002592:	2000      	movs	r0, #0
	}
 8002594:	4770      	bx	lr
					xReturn = pdTRUE;
 8002596:	2001      	movs	r0, #1
		return xReturn;
 8002598:	e7d7      	b.n	800254a <xTaskPriorityInherit+0x46>
 800259a:	bf00      	nop
 800259c:	20000784 	.word	0x20000784
 80025a0:	200007b4 	.word	0x200007b4

080025a4 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80025a4:	2800      	cmp	r0, #0
 80025a6:	d042      	beq.n	800262e <xTaskPriorityDisinherit+0x8a>
	{
 80025a8:	b538      	push	{r3, r4, r5, lr}
 80025aa:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 80025ac:	4b22      	ldr	r3, [pc, #136]	; (8002638 <xTaskPriorityDisinherit+0x94>)
 80025ae:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 80025b2:	4283      	cmp	r3, r0
 80025b4:	d00a      	beq.n	80025cc <xTaskPriorityDisinherit+0x28>
 80025b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ba:	b672      	cpsid	i
 80025bc:	f383 8811 	msr	BASEPRI, r3
 80025c0:	f3bf 8f6f 	isb	sy
 80025c4:	f3bf 8f4f 	dsb	sy
 80025c8:	b662      	cpsie	i
 80025ca:	e7fe      	b.n	80025ca <xTaskPriorityDisinherit+0x26>
			configASSERT( pxTCB->uxMutexesHeld );
 80025cc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80025ce:	b953      	cbnz	r3, 80025e6 <xTaskPriorityDisinherit+0x42>
 80025d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025d4:	b672      	cpsid	i
 80025d6:	f383 8811 	msr	BASEPRI, r3
 80025da:	f3bf 8f6f 	isb	sy
 80025de:	f3bf 8f4f 	dsb	sy
 80025e2:	b662      	cpsie	i
 80025e4:	e7fe      	b.n	80025e4 <xTaskPriorityDisinherit+0x40>
			( pxTCB->uxMutexesHeld )--;
 80025e6:	3b01      	subs	r3, #1
 80025e8:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80025ea:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80025ec:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80025ee:	4291      	cmp	r1, r2
 80025f0:	d01f      	beq.n	8002632 <xTaskPriorityDisinherit+0x8e>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80025f2:	b10b      	cbz	r3, 80025f8 <xTaskPriorityDisinherit+0x54>
	BaseType_t xReturn = pdFALSE;
 80025f4:	2000      	movs	r0, #0
	}
 80025f6:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80025f8:	1d05      	adds	r5, r0, #4
 80025fa:	4628      	mov	r0, r5
 80025fc:	f7fe fd4c 	bl	8001098 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002600:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002602:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002604:	f1c0 0338 	rsb	r3, r0, #56	; 0x38
 8002608:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800260a:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <xTaskPriorityDisinherit+0x94>)
 800260c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002610:	4298      	cmp	r0, r3
 8002612:	d902      	bls.n	800261a <xTaskPriorityDisinherit+0x76>
 8002614:	4b08      	ldr	r3, [pc, #32]	; (8002638 <xTaskPriorityDisinherit+0x94>)
 8002616:	f8c3 04e0 	str.w	r0, [r3, #1248]	; 0x4e0
 800261a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800261e:	4629      	mov	r1, r5
 8002620:	4b06      	ldr	r3, [pc, #24]	; (800263c <xTaskPriorityDisinherit+0x98>)
 8002622:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002626:	f7fe fd13 	bl	8001050 <vListInsertEnd>
					xReturn = pdTRUE;
 800262a:	2001      	movs	r0, #1
 800262c:	e7e3      	b.n	80025f6 <xTaskPriorityDisinherit+0x52>
	BaseType_t xReturn = pdFALSE;
 800262e:	2000      	movs	r0, #0
	}
 8002630:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8002632:	2000      	movs	r0, #0
 8002634:	e7df      	b.n	80025f6 <xTaskPriorityDisinherit+0x52>
 8002636:	bf00      	nop
 8002638:	20000784 	.word	0x20000784
 800263c:	200007b4 	.word	0x200007b4

08002640 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8002640:	2800      	cmp	r0, #0
 8002642:	d04d      	beq.n	80026e0 <vTaskPriorityDisinheritAfterTimeout+0xa0>
	{
 8002644:	b538      	push	{r3, r4, r5, lr}
 8002646:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 8002648:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800264a:	b953      	cbnz	r3, 8002662 <vTaskPriorityDisinheritAfterTimeout+0x22>
 800264c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002650:	b672      	cpsid	i
 8002652:	f383 8811 	msr	BASEPRI, r3
 8002656:	f3bf 8f6f 	isb	sy
 800265a:	f3bf 8f4f 	dsb	sy
 800265e:	b662      	cpsie	i
 8002660:	e7fe      	b.n	8002660 <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8002662:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8002664:	428a      	cmp	r2, r1
 8002666:	d200      	bcs.n	800266a <vTaskPriorityDisinheritAfterTimeout+0x2a>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8002668:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 800266a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800266c:	4291      	cmp	r1, r2
 800266e:	d001      	beq.n	8002674 <vTaskPriorityDisinheritAfterTimeout+0x34>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8002670:	2b01      	cmp	r3, #1
 8002672:	d000      	beq.n	8002676 <vTaskPriorityDisinheritAfterTimeout+0x36>
	}
 8002674:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 8002676:	4b1b      	ldr	r3, [pc, #108]	; (80026e4 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
 8002678:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800267c:	42a3      	cmp	r3, r4
 800267e:	d024      	beq.n	80026ca <vTaskPriorityDisinheritAfterTimeout+0x8a>
					pxTCB->uxPriority = uxPriorityToUse;
 8002680:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002682:	69a3      	ldr	r3, [r4, #24]
 8002684:	2b00      	cmp	r3, #0
 8002686:	db02      	blt.n	800268e <vTaskPriorityDisinheritAfterTimeout+0x4e>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002688:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800268c:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800268e:	6962      	ldr	r2, [r4, #20]
 8002690:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002694:	4b14      	ldr	r3, [pc, #80]	; (80026e8 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 8002696:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800269a:	429a      	cmp	r2, r3
 800269c:	d1ea      	bne.n	8002674 <vTaskPriorityDisinheritAfterTimeout+0x34>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800269e:	1d25      	adds	r5, r4, #4
 80026a0:	4628      	mov	r0, r5
 80026a2:	f7fe fcf9 	bl	8001098 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 80026a6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80026a8:	4b0e      	ldr	r3, [pc, #56]	; (80026e4 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
 80026aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80026ae:	4298      	cmp	r0, r3
 80026b0:	d902      	bls.n	80026b8 <vTaskPriorityDisinheritAfterTimeout+0x78>
 80026b2:	4b0c      	ldr	r3, [pc, #48]	; (80026e4 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
 80026b4:	f8c3 04e0 	str.w	r0, [r3, #1248]	; 0x4e0
 80026b8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80026bc:	4629      	mov	r1, r5
 80026be:	4b0a      	ldr	r3, [pc, #40]	; (80026e8 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 80026c0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80026c4:	f7fe fcc4 	bl	8001050 <vListInsertEnd>
	}
 80026c8:	e7d4      	b.n	8002674 <vTaskPriorityDisinheritAfterTimeout+0x34>
 80026ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ce:	b672      	cpsid	i
 80026d0:	f383 8811 	msr	BASEPRI, r3
 80026d4:	f3bf 8f6f 	isb	sy
 80026d8:	f3bf 8f4f 	dsb	sy
 80026dc:	b662      	cpsie	i
					configASSERT( pxTCB != pxCurrentTCB );
 80026de:	e7fe      	b.n	80026de <vTaskPriorityDisinheritAfterTimeout+0x9e>
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	20000784 	.word	0x20000784
 80026e8:	200007b4 	.word	0x200007b4

080026ec <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80026ec:	4b06      	ldr	r3, [pc, #24]	; (8002708 <pvTaskIncrementMutexHeldCount+0x1c>)
 80026ee:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 80026f2:	b12b      	cbz	r3, 8002700 <pvTaskIncrementMutexHeldCount+0x14>
			( pxCurrentTCB->uxMutexesHeld )++;
 80026f4:	4b04      	ldr	r3, [pc, #16]	; (8002708 <pvTaskIncrementMutexHeldCount+0x1c>)
 80026f6:	f8d3 24d4 	ldr.w	r2, [r3, #1236]	; 0x4d4
 80026fa:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80026fc:	3301      	adds	r3, #1
 80026fe:	6513      	str	r3, [r2, #80]	; 0x50
		return pxCurrentTCB;
 8002700:	4b01      	ldr	r3, [pc, #4]	; (8002708 <pvTaskIncrementMutexHeldCount+0x1c>)
 8002702:	f8d3 04d4 	ldr.w	r0, [r3, #1236]	; 0x4d4
	}
 8002706:	4770      	bx	lr
 8002708:	20000784 	.word	0x20000784

0800270c <xTaskNotifyWait>:
	{
 800270c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800270e:	4606      	mov	r6, r0
 8002710:	460f      	mov	r7, r1
 8002712:	4614      	mov	r4, r2
 8002714:	461d      	mov	r5, r3
		taskENTER_CRITICAL();
 8002716:	f000 fcb5 	bl	8003084 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800271a:	4b25      	ldr	r3, [pc, #148]	; (80027b0 <xTaskNotifyWait+0xa4>)
 800271c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8002720:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002724:	b2d2      	uxtb	r2, r2
 8002726:	2a02      	cmp	r2, #2
 8002728:	d00c      	beq.n	8002744 <xTaskNotifyWait+0x38>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800272a:	4a21      	ldr	r2, [pc, #132]	; (80027b0 <xTaskNotifyWait+0xa4>)
 800272c:	f8d2 14d4 	ldr.w	r1, [r2, #1236]	; 0x4d4
 8002730:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8002732:	ea23 0306 	bic.w	r3, r3, r6
 8002736:	654b      	str	r3, [r1, #84]	; 0x54
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8002738:	f8d2 34d4 	ldr.w	r3, [r2, #1236]	; 0x4d4
 800273c:	2201      	movs	r2, #1
 800273e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				if( xTicksToWait > ( TickType_t ) 0 )
 8002742:	b9e5      	cbnz	r5, 800277e <xTaskNotifyWait+0x72>
		taskEXIT_CRITICAL();
 8002744:	f000 fcc4 	bl	80030d0 <vPortExitCritical>
		taskENTER_CRITICAL();
 8002748:	f000 fc9c 	bl	8003084 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 800274c:	b124      	cbz	r4, 8002758 <xTaskNotifyWait+0x4c>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800274e:	4b18      	ldr	r3, [pc, #96]	; (80027b0 <xTaskNotifyWait+0xa4>)
 8002750:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8002754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002756:	6023      	str	r3, [r4, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8002758:	4b15      	ldr	r3, [pc, #84]	; (80027b0 <xTaskNotifyWait+0xa4>)
 800275a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800275e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d019      	beq.n	800279c <xTaskNotifyWait+0x90>
				xReturn = pdFALSE;
 8002768:	2400      	movs	r4, #0
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800276a:	4b11      	ldr	r3, [pc, #68]	; (80027b0 <xTaskNotifyWait+0xa4>)
 800276c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		taskEXIT_CRITICAL();
 8002776:	f000 fcab 	bl	80030d0 <vPortExitCritical>
	}
 800277a:	4620      	mov	r0, r4
 800277c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800277e:	4611      	mov	r1, r2
 8002780:	4628      	mov	r0, r5
 8002782:	f7ff fb05 	bl	8001d90 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 8002786:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800278a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800278e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002792:	f3bf 8f4f 	dsb	sy
 8002796:	f3bf 8f6f 	isb	sy
 800279a:	e7d3      	b.n	8002744 <xTaskNotifyWait+0x38>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800279c:	4b04      	ldr	r3, [pc, #16]	; (80027b0 <xTaskNotifyWait+0xa4>)
 800279e:	f8d3 24d4 	ldr.w	r2, [r3, #1236]	; 0x4d4
 80027a2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80027a4:	ea23 0307 	bic.w	r3, r3, r7
 80027a8:	6553      	str	r3, [r2, #84]	; 0x54
				xReturn = pdTRUE;
 80027aa:	2401      	movs	r4, #1
 80027ac:	e7dd      	b.n	800276a <xTaskNotifyWait+0x5e>
 80027ae:	bf00      	nop
 80027b0:	20000784 	.word	0x20000784

080027b4 <xTaskGenericNotify>:
	{
 80027b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToNotify );
 80027b6:	b1a8      	cbz	r0, 80027e4 <xTaskGenericNotify+0x30>
 80027b8:	460f      	mov	r7, r1
 80027ba:	4614      	mov	r4, r2
 80027bc:	461d      	mov	r5, r3
 80027be:	4606      	mov	r6, r0
		taskENTER_CRITICAL();
 80027c0:	f000 fc60 	bl	8003084 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 80027c4:	b10d      	cbz	r5, 80027ca <xTaskGenericNotify+0x16>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80027c6:	6d73      	ldr	r3, [r6, #84]	; 0x54
 80027c8:	602b      	str	r3, [r5, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80027ca:	f896 3058 	ldrb.w	r3, [r6, #88]	; 0x58
 80027ce:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80027d0:	2202      	movs	r2, #2
 80027d2:	f886 2058 	strb.w	r2, [r6, #88]	; 0x58
			switch( eAction )
 80027d6:	2c04      	cmp	r4, #4
 80027d8:	d821      	bhi.n	800281e <xTaskGenericNotify+0x6a>
 80027da:	e8df f004 	tbb	[pc, r4]
 80027de:	0e2f      	.short	0x0e2f
 80027e0:	1813      	.short	0x1813
 80027e2:	1b          	.byte	0x1b
 80027e3:	00          	.byte	0x00
 80027e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e8:	b672      	cpsid	i
 80027ea:	f383 8811 	msr	BASEPRI, r3
 80027ee:	f3bf 8f6f 	isb	sy
 80027f2:	f3bf 8f4f 	dsb	sy
 80027f6:	b662      	cpsie	i
		configASSERT( xTaskToNotify );
 80027f8:	e7fe      	b.n	80027f8 <xTaskGenericNotify+0x44>
					pxTCB->ulNotifiedValue |= ulValue;
 80027fa:	6d72      	ldr	r2, [r6, #84]	; 0x54
 80027fc:	433a      	orrs	r2, r7
 80027fe:	6572      	str	r2, [r6, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8002800:	2401      	movs	r4, #1
					break;
 8002802:	e01c      	b.n	800283e <xTaskGenericNotify+0x8a>
					( pxTCB->ulNotifiedValue )++;
 8002804:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8002806:	3201      	adds	r2, #1
 8002808:	6572      	str	r2, [r6, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 800280a:	2401      	movs	r4, #1
					break;
 800280c:	e017      	b.n	800283e <xTaskGenericNotify+0x8a>
					pxTCB->ulNotifiedValue = ulValue;
 800280e:	6577      	str	r7, [r6, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8002810:	2401      	movs	r4, #1
					break;
 8002812:	e014      	b.n	800283e <xTaskGenericNotify+0x8a>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8002814:	2b02      	cmp	r3, #2
 8002816:	d018      	beq.n	800284a <xTaskGenericNotify+0x96>
						pxTCB->ulNotifiedValue = ulValue;
 8002818:	6577      	str	r7, [r6, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 800281a:	2401      	movs	r4, #1
 800281c:	e00f      	b.n	800283e <xTaskGenericNotify+0x8a>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800281e:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8002820:	f1b2 3fff 	cmp.w	r2, #4294967295
 8002824:	d013      	beq.n	800284e <xTaskGenericNotify+0x9a>
 8002826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800282a:	b672      	cpsid	i
 800282c:	f383 8811 	msr	BASEPRI, r3
 8002830:	f3bf 8f6f 	isb	sy
 8002834:	f3bf 8f4f 	dsb	sy
 8002838:	b662      	cpsie	i
 800283a:	e7fe      	b.n	800283a <xTaskGenericNotify+0x86>
			switch( eAction )
 800283c:	2401      	movs	r4, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800283e:	2b01      	cmp	r3, #1
 8002840:	d007      	beq.n	8002852 <xTaskGenericNotify+0x9e>
		taskEXIT_CRITICAL();
 8002842:	f000 fc45 	bl	80030d0 <vPortExitCritical>
	}
 8002846:	4620      	mov	r0, r4
 8002848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						xReturn = pdFAIL;
 800284a:	2400      	movs	r4, #0
 800284c:	e7f7      	b.n	800283e <xTaskGenericNotify+0x8a>
	BaseType_t xReturn = pdPASS;
 800284e:	2401      	movs	r4, #1
 8002850:	e7f5      	b.n	800283e <xTaskGenericNotify+0x8a>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002852:	1d35      	adds	r5, r6, #4
 8002854:	4628      	mov	r0, r5
 8002856:	f7fe fc1f 	bl	8001098 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800285a:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800285c:	4b17      	ldr	r3, [pc, #92]	; (80028bc <xTaskGenericNotify+0x108>)
 800285e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8002862:	4298      	cmp	r0, r3
 8002864:	d902      	bls.n	800286c <xTaskGenericNotify+0xb8>
 8002866:	4b15      	ldr	r3, [pc, #84]	; (80028bc <xTaskGenericNotify+0x108>)
 8002868:	f8c3 04e0 	str.w	r0, [r3, #1248]	; 0x4e0
 800286c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002870:	4629      	mov	r1, r5
 8002872:	4b13      	ldr	r3, [pc, #76]	; (80028c0 <xTaskGenericNotify+0x10c>)
 8002874:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002878:	f7fe fbea 	bl	8001050 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800287c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800287e:	b153      	cbz	r3, 8002896 <xTaskGenericNotify+0xe2>
 8002880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002884:	b672      	cpsid	i
 8002886:	f383 8811 	msr	BASEPRI, r3
 800288a:	f3bf 8f6f 	isb	sy
 800288e:	f3bf 8f4f 	dsb	sy
 8002892:	b662      	cpsie	i
 8002894:	e7fe      	b.n	8002894 <xTaskGenericNotify+0xe0>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002896:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8002898:	4b08      	ldr	r3, [pc, #32]	; (80028bc <xTaskGenericNotify+0x108>)
 800289a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800289e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d9ce      	bls.n	8002842 <xTaskGenericNotify+0x8e>
					taskYIELD_IF_USING_PREEMPTION();
 80028a4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80028a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028ac:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80028b0:	f3bf 8f4f 	dsb	sy
 80028b4:	f3bf 8f6f 	isb	sy
 80028b8:	e7c3      	b.n	8002842 <xTaskGenericNotify+0x8e>
 80028ba:	bf00      	nop
 80028bc:	20000784 	.word	0x20000784
 80028c0:	200007b4 	.word	0x200007b4

080028c4 <xTaskGenericNotifyFromISR>:
		configASSERT( xTaskToNotify );
 80028c4:	b320      	cbz	r0, 8002910 <xTaskGenericNotifyFromISR+0x4c>
	{
 80028c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028ca:	460e      	mov	r6, r1
 80028cc:	4614      	mov	r4, r2
 80028ce:	461d      	mov	r5, r3
 80028d0:	4607      	mov	r7, r0
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80028d2:	f000 fcdb 	bl	800328c <vPortValidateInterruptPriority>
	__asm volatile
 80028d6:	f3ef 8311 	mrs	r3, BASEPRI
 80028da:	f04f 0250 	mov.w	r2, #80	; 0x50
 80028de:	b672      	cpsid	i
 80028e0:	f382 8811 	msr	BASEPRI, r2
 80028e4:	f3bf 8f6f 	isb	sy
 80028e8:	f3bf 8f4f 	dsb	sy
 80028ec:	b662      	cpsie	i
 80028ee:	4698      	mov	r8, r3
			if( pulPreviousNotificationValue != NULL )
 80028f0:	b10d      	cbz	r5, 80028f6 <xTaskGenericNotifyFromISR+0x32>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80028f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028f4:	602b      	str	r3, [r5, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80028f6:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80028fa:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80028fc:	2202      	movs	r2, #2
 80028fe:	f887 2058 	strb.w	r2, [r7, #88]	; 0x58
			switch( eAction )
 8002902:	2c04      	cmp	r4, #4
 8002904:	d821      	bhi.n	800294a <xTaskGenericNotifyFromISR+0x86>
 8002906:	e8df f004 	tbb	[pc, r4]
 800290a:	0e2f      	.short	0x0e2f
 800290c:	1813      	.short	0x1813
 800290e:	1b          	.byte	0x1b
 800290f:	00          	.byte	0x00
	__asm volatile
 8002910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002914:	b672      	cpsid	i
 8002916:	f383 8811 	msr	BASEPRI, r3
 800291a:	f3bf 8f6f 	isb	sy
 800291e:	f3bf 8f4f 	dsb	sy
 8002922:	b662      	cpsie	i
		configASSERT( xTaskToNotify );
 8002924:	e7fe      	b.n	8002924 <xTaskGenericNotifyFromISR+0x60>
					pxTCB->ulNotifiedValue |= ulValue;
 8002926:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002928:	4332      	orrs	r2, r6
 800292a:	657a      	str	r2, [r7, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 800292c:	2401      	movs	r4, #1
					break;
 800292e:	e01c      	b.n	800296a <xTaskGenericNotifyFromISR+0xa6>
					( pxTCB->ulNotifiedValue )++;
 8002930:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002932:	3201      	adds	r2, #1
 8002934:	657a      	str	r2, [r7, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8002936:	2401      	movs	r4, #1
					break;
 8002938:	e017      	b.n	800296a <xTaskGenericNotifyFromISR+0xa6>
					pxTCB->ulNotifiedValue = ulValue;
 800293a:	657e      	str	r6, [r7, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 800293c:	2401      	movs	r4, #1
					break;
 800293e:	e014      	b.n	800296a <xTaskGenericNotifyFromISR+0xa6>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8002940:	2b02      	cmp	r3, #2
 8002942:	d019      	beq.n	8002978 <xTaskGenericNotifyFromISR+0xb4>
						pxTCB->ulNotifiedValue = ulValue;
 8002944:	657e      	str	r6, [r7, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8002946:	2401      	movs	r4, #1
 8002948:	e00f      	b.n	800296a <xTaskGenericNotifyFromISR+0xa6>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800294a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800294c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8002950:	d014      	beq.n	800297c <xTaskGenericNotifyFromISR+0xb8>
 8002952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002956:	b672      	cpsid	i
 8002958:	f383 8811 	msr	BASEPRI, r3
 800295c:	f3bf 8f6f 	isb	sy
 8002960:	f3bf 8f4f 	dsb	sy
 8002964:	b662      	cpsie	i
 8002966:	e7fe      	b.n	8002966 <xTaskGenericNotifyFromISR+0xa2>
			switch( eAction )
 8002968:	2401      	movs	r4, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800296a:	2b01      	cmp	r3, #1
 800296c:	d008      	beq.n	8002980 <xTaskGenericNotifyFromISR+0xbc>
	__asm volatile
 800296e:	f388 8811 	msr	BASEPRI, r8
	}
 8002972:	4620      	mov	r0, r4
 8002974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						xReturn = pdFAIL;
 8002978:	2400      	movs	r4, #0
 800297a:	e7f6      	b.n	800296a <xTaskGenericNotifyFromISR+0xa6>
	BaseType_t xReturn = pdPASS;
 800297c:	2401      	movs	r4, #1
 800297e:	e7f4      	b.n	800296a <xTaskGenericNotifyFromISR+0xa6>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8002980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002982:	b153      	cbz	r3, 800299a <xTaskGenericNotifyFromISR+0xd6>
	__asm volatile
 8002984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002988:	b672      	cpsid	i
 800298a:	f383 8811 	msr	BASEPRI, r3
 800298e:	f3bf 8f6f 	isb	sy
 8002992:	f3bf 8f4f 	dsb	sy
 8002996:	b662      	cpsie	i
 8002998:	e7fe      	b.n	8002998 <xTaskGenericNotifyFromISR+0xd4>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800299a:	4b18      	ldr	r3, [pc, #96]	; (80029fc <xTaskGenericNotifyFromISR+0x138>)
 800299c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80029a0:	bb2b      	cbnz	r3, 80029ee <xTaskGenericNotifyFromISR+0x12a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80029a2:	1d3d      	adds	r5, r7, #4
 80029a4:	4628      	mov	r0, r5
 80029a6:	f7fe fb77 	bl	8001098 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80029aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80029ac:	4b13      	ldr	r3, [pc, #76]	; (80029fc <xTaskGenericNotifyFromISR+0x138>)
 80029ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80029b2:	4298      	cmp	r0, r3
 80029b4:	d902      	bls.n	80029bc <xTaskGenericNotifyFromISR+0xf8>
 80029b6:	4b11      	ldr	r3, [pc, #68]	; (80029fc <xTaskGenericNotifyFromISR+0x138>)
 80029b8:	f8c3 04e0 	str.w	r0, [r3, #1248]	; 0x4e0
 80029bc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80029c0:	4629      	mov	r1, r5
 80029c2:	4b0f      	ldr	r3, [pc, #60]	; (8002a00 <xTaskGenericNotifyFromISR+0x13c>)
 80029c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80029c8:	f7fe fb42 	bl	8001050 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80029cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029ce:	4b0b      	ldr	r3, [pc, #44]	; (80029fc <xTaskGenericNotifyFromISR+0x138>)
 80029d0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 80029d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d9c9      	bls.n	800296e <xTaskGenericNotifyFromISR+0xaa>
					if( pxHigherPriorityTaskWoken != NULL )
 80029da:	9b06      	ldr	r3, [sp, #24]
 80029dc:	b113      	cbz	r3, 80029e4 <xTaskGenericNotifyFromISR+0x120>
						*pxHigherPriorityTaskWoken = pdTRUE;
 80029de:	2301      	movs	r3, #1
 80029e0:	9a06      	ldr	r2, [sp, #24]
 80029e2:	6013      	str	r3, [r2, #0]
					xYieldPending = pdTRUE;
 80029e4:	4b05      	ldr	r3, [pc, #20]	; (80029fc <xTaskGenericNotifyFromISR+0x138>)
 80029e6:	2201      	movs	r2, #1
 80029e8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
 80029ec:	e7bf      	b.n	800296e <xTaskGenericNotifyFromISR+0xaa>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80029ee:	f107 0118 	add.w	r1, r7, #24
 80029f2:	4804      	ldr	r0, [pc, #16]	; (8002a04 <xTaskGenericNotifyFromISR+0x140>)
 80029f4:	f7fe fb2c 	bl	8001050 <vListInsertEnd>
 80029f8:	e7e8      	b.n	80029cc <xTaskGenericNotifyFromISR+0x108>
 80029fa:	bf00      	nop
 80029fc:	20000784 	.word	0x20000784
 8002a00:	200007b4 	.word	0x200007b4
 8002a04:	20000798 	.word	0x20000798

08002a08 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002a08:	4b06      	ldr	r3, [pc, #24]	; (8002a24 <prvGetNextExpireTime+0x1c>)
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	6813      	ldr	r3, [r2, #0]
 8002a0e:	b92b      	cbnz	r3, 8002a1c <prvGetNextExpireTime+0x14>
 8002a10:	2301      	movs	r3, #1
 8002a12:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002a14:	b923      	cbnz	r3, 8002a20 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002a16:	68d3      	ldr	r3, [r2, #12]
 8002a18:	6818      	ldr	r0, [r3, #0]
 8002a1a:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	e7f8      	b.n	8002a12 <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8002a20:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 8002a22:	4770      	bx	lr
 8002a24:	20000c84 	.word	0x20000c84

08002a28 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8002a28:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002a2a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002a2c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002a2e:	4291      	cmp	r1, r2
 8002a30:	d80c      	bhi.n	8002a4c <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a32:	1ad2      	subs	r2, r2, r3
 8002a34:	6983      	ldr	r3, [r0, #24]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d301      	bcc.n	8002a3e <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002a3a:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8002a3c:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002a3e:	1d01      	adds	r1, r0, #4
 8002a40:	4b0b      	ldr	r3, [pc, #44]	; (8002a70 <prvInsertTimerInActiveList+0x48>)
 8002a42:	6858      	ldr	r0, [r3, #4]
 8002a44:	f7fe fb0f 	bl	8001066 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8002a48:	2000      	movs	r0, #0
 8002a4a:	e7f7      	b.n	8002a3c <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	bf2c      	ite	cs
 8002a50:	2200      	movcs	r2, #0
 8002a52:	2201      	movcc	r2, #1
 8002a54:	4299      	cmp	r1, r3
 8002a56:	bf38      	it	cc
 8002a58:	2200      	movcc	r2, #0
 8002a5a:	b10a      	cbz	r2, 8002a60 <prvInsertTimerInActiveList+0x38>
			xProcessTimerNow = pdTRUE;
 8002a5c:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8002a5e:	e7ed      	b.n	8002a3c <prvInsertTimerInActiveList+0x14>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002a60:	1d01      	adds	r1, r0, #4
 8002a62:	4b03      	ldr	r3, [pc, #12]	; (8002a70 <prvInsertTimerInActiveList+0x48>)
 8002a64:	6818      	ldr	r0, [r3, #0]
 8002a66:	f7fe fafe 	bl	8001066 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8002a6a:	2000      	movs	r0, #0
 8002a6c:	e7e6      	b.n	8002a3c <prvInsertTimerInActiveList+0x14>
 8002a6e:	bf00      	nop
 8002a70:	20000c84 	.word	0x20000c84

08002a74 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002a74:	b570      	push	{r4, r5, r6, lr}
 8002a76:	b082      	sub	sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002a78:	f000 fb04 	bl	8003084 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002a7c:	4b12      	ldr	r3, [pc, #72]	; (8002ac8 <prvCheckForValidListAndQueue+0x54>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	b11b      	cbz	r3, 8002a8a <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002a82:	f000 fb25 	bl	80030d0 <vPortExitCritical>
}
 8002a86:	b002      	add	sp, #8
 8002a88:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
 8002a8a:	4c0f      	ldr	r4, [pc, #60]	; (8002ac8 <prvCheckForValidListAndQueue+0x54>)
 8002a8c:	f104 060c 	add.w	r6, r4, #12
 8002a90:	4630      	mov	r0, r6
 8002a92:	f7fe facf 	bl	8001034 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002a96:	f104 0520 	add.w	r5, r4, #32
 8002a9a:	4628      	mov	r0, r5
 8002a9c:	f7fe faca 	bl	8001034 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002aa0:	6026      	str	r6, [r4, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002aa2:	6065      	str	r5, [r4, #4]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8002aac:	f104 0284 	add.w	r2, r4, #132	; 0x84
 8002ab0:	2110      	movs	r1, #16
 8002ab2:	200a      	movs	r0, #10
 8002ab4:	f7fe fc00 	bl	80012b8 <xQueueGenericCreateStatic>
 8002ab8:	60a0      	str	r0, [r4, #8]
				if( xTimerQueue != NULL )
 8002aba:	2800      	cmp	r0, #0
 8002abc:	d0e1      	beq.n	8002a82 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002abe:	4903      	ldr	r1, [pc, #12]	; (8002acc <prvCheckForValidListAndQueue+0x58>)
 8002ac0:	f7fe ffec 	bl	8001a9c <vQueueAddToRegistry>
 8002ac4:	e7dd      	b.n	8002a82 <prvCheckForValidListAndQueue+0xe>
 8002ac6:	bf00      	nop
 8002ac8:	20000c84 	.word	0x20000c84
 8002acc:	080067e4 	.word	0x080067e4

08002ad0 <prvInitialiseNewTimer>:
{
 8002ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ad4:	9f07      	ldr	r7, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8002ad6:	b951      	cbnz	r1, 8002aee <prvInitialiseNewTimer+0x1e>
 8002ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002adc:	b672      	cpsid	i
 8002ade:	f383 8811 	msr	BASEPRI, r3
 8002ae2:	f3bf 8f6f 	isb	sy
 8002ae6:	f3bf 8f4f 	dsb	sy
 8002aea:	b662      	cpsie	i
 8002aec:	e7fe      	b.n	8002aec <prvInitialiseNewTimer+0x1c>
 8002aee:	4606      	mov	r6, r0
 8002af0:	4614      	mov	r4, r2
 8002af2:	461d      	mov	r5, r3
 8002af4:	4688      	mov	r8, r1
	if( pxNewTimer != NULL )
 8002af6:	b18f      	cbz	r7, 8002b1c <prvInitialiseNewTimer+0x4c>
		prvCheckForValidListAndQueue();
 8002af8:	f7ff ffbc 	bl	8002a74 <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
 8002afc:	603e      	str	r6, [r7, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8002afe:	f8c7 8018 	str.w	r8, [r7, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8002b02:	61fd      	str	r5, [r7, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8002b04:	9b06      	ldr	r3, [sp, #24]
 8002b06:	623b      	str	r3, [r7, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8002b08:	1d38      	adds	r0, r7, #4
 8002b0a:	f7fe fa9e 	bl	800104a <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8002b0e:	b12c      	cbz	r4, 8002b1c <prvInitialiseNewTimer+0x4c>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8002b10:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002b14:	f043 0304 	orr.w	r3, r3, #4
 8002b18:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
}
 8002b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002b20 <xTimerCreateTimerTask>:
{
 8002b20:	b510      	push	{r4, lr}
 8002b22:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8002b24:	f7ff ffa6 	bl	8002a74 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8002b28:	4b14      	ldr	r3, [pc, #80]	; (8002b7c <xTimerCreateTimerTask+0x5c>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	b1d3      	cbz	r3, 8002b64 <xTimerCreateTimerTask+0x44>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8002b2e:	2400      	movs	r4, #0
 8002b30:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8002b32:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8002b34:	aa07      	add	r2, sp, #28
 8002b36:	a906      	add	r1, sp, #24
 8002b38:	a805      	add	r0, sp, #20
 8002b3a:	f7fe f997 	bl	8000e6c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8002b3e:	9b05      	ldr	r3, [sp, #20]
 8002b40:	9302      	str	r3, [sp, #8]
 8002b42:	9b06      	ldr	r3, [sp, #24]
 8002b44:	9301      	str	r3, [sp, #4]
 8002b46:	2302      	movs	r3, #2
 8002b48:	9300      	str	r3, [sp, #0]
 8002b4a:	4623      	mov	r3, r4
 8002b4c:	9a07      	ldr	r2, [sp, #28]
 8002b4e:	490c      	ldr	r1, [pc, #48]	; (8002b80 <xTimerCreateTimerTask+0x60>)
 8002b50:	480c      	ldr	r0, [pc, #48]	; (8002b84 <xTimerCreateTimerTask+0x64>)
 8002b52:	f7ff f957 	bl	8001e04 <xTaskCreateStatic>
 8002b56:	4b09      	ldr	r3, [pc, #36]	; (8002b7c <xTimerCreateTimerTask+0x5c>)
 8002b58:	f8c3 0124 	str.w	r0, [r3, #292]	; 0x124
			if( xTimerTaskHandle != NULL )
 8002b5c:	b110      	cbz	r0, 8002b64 <xTimerCreateTimerTask+0x44>
}
 8002b5e:	2001      	movs	r0, #1
 8002b60:	b008      	add	sp, #32
 8002b62:	bd10      	pop	{r4, pc}
 8002b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b68:	b672      	cpsid	i
 8002b6a:	f383 8811 	msr	BASEPRI, r3
 8002b6e:	f3bf 8f6f 	isb	sy
 8002b72:	f3bf 8f4f 	dsb	sy
 8002b76:	b662      	cpsie	i
	configASSERT( xReturn );
 8002b78:	e7fe      	b.n	8002b78 <xTimerCreateTimerTask+0x58>
 8002b7a:	bf00      	nop
 8002b7c:	20000c84 	.word	0x20000c84
 8002b80:	080067ec 	.word	0x080067ec
 8002b84:	08002f45 	.word	0x08002f45

08002b88 <xTimerCreate>:
	{
 8002b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b8c:	b082      	sub	sp, #8
 8002b8e:	4604      	mov	r4, r0
 8002b90:	4688      	mov	r8, r1
 8002b92:	4617      	mov	r7, r2
 8002b94:	461d      	mov	r5, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8002b96:	202c      	movs	r0, #44	; 0x2c
 8002b98:	f000 fbfe 	bl	8003398 <pvPortMalloc>
		if( pxNewTimer != NULL )
 8002b9c:	4606      	mov	r6, r0
 8002b9e:	b158      	cbz	r0, 8002bb8 <xTimerCreate+0x30>
			pxNewTimer->ucStatus = 0x00;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8002ba6:	9001      	str	r0, [sp, #4]
 8002ba8:	9b08      	ldr	r3, [sp, #32]
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	462b      	mov	r3, r5
 8002bae:	463a      	mov	r2, r7
 8002bb0:	4641      	mov	r1, r8
 8002bb2:	4620      	mov	r0, r4
 8002bb4:	f7ff ff8c 	bl	8002ad0 <prvInitialiseNewTimer>
	}
 8002bb8:	4630      	mov	r0, r6
 8002bba:	b002      	add	sp, #8
 8002bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002bc0 <xTimerCreateStatic>:
	{
 8002bc0:	b510      	push	{r4, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	4684      	mov	ip, r0
			volatile size_t xSize = sizeof( StaticTimer_t );
 8002bc6:	202c      	movs	r0, #44	; 0x2c
 8002bc8:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
 8002bca:	9803      	ldr	r0, [sp, #12]
 8002bcc:	282c      	cmp	r0, #44	; 0x2c
 8002bce:	d00a      	beq.n	8002be6 <xTimerCreateStatic+0x26>
 8002bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd4:	b672      	cpsid	i
 8002bd6:	f383 8811 	msr	BASEPRI, r3
 8002bda:	f3bf 8f6f 	isb	sy
 8002bde:	f3bf 8f4f 	dsb	sy
 8002be2:	b662      	cpsie	i
 8002be4:	e7fe      	b.n	8002be4 <xTimerCreateStatic+0x24>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002be6:	9803      	ldr	r0, [sp, #12]
		configASSERT( pxTimerBuffer );
 8002be8:	9807      	ldr	r0, [sp, #28]
 8002bea:	b160      	cbz	r0, 8002c06 <xTimerCreateStatic+0x46>
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8002bec:	2002      	movs	r0, #2
 8002bee:	9c07      	ldr	r4, [sp, #28]
 8002bf0:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8002bf4:	9401      	str	r4, [sp, #4]
 8002bf6:	9806      	ldr	r0, [sp, #24]
 8002bf8:	9000      	str	r0, [sp, #0]
 8002bfa:	4660      	mov	r0, ip
 8002bfc:	f7ff ff68 	bl	8002ad0 <prvInitialiseNewTimer>
	}
 8002c00:	9807      	ldr	r0, [sp, #28]
 8002c02:	b004      	add	sp, #16
 8002c04:	bd10      	pop	{r4, pc}
 8002c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c0a:	b672      	cpsid	i
 8002c0c:	f383 8811 	msr	BASEPRI, r3
 8002c10:	f3bf 8f6f 	isb	sy
 8002c14:	f3bf 8f4f 	dsb	sy
 8002c18:	b662      	cpsie	i
		configASSERT( pxTimerBuffer );
 8002c1a:	e7fe      	b.n	8002c1a <xTimerCreateStatic+0x5a>

08002c1c <xTimerGenericCommand>:
	configASSERT( xTimer );
 8002c1c:	b1b8      	cbz	r0, 8002c4e <xTimerGenericCommand+0x32>
 8002c1e:	469c      	mov	ip, r3
 8002c20:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 8002c22:	4819      	ldr	r0, [pc, #100]	; (8002c88 <xTimerGenericCommand+0x6c>)
 8002c24:	6880      	ldr	r0, [r0, #8]
 8002c26:	b368      	cbz	r0, 8002c84 <xTimerGenericCommand+0x68>
{
 8002c28:	b500      	push	{lr}
 8002c2a:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8002c2c:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002c2e:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8002c30:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002c32:	2905      	cmp	r1, #5
 8002c34:	dc1e      	bgt.n	8002c74 <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002c36:	f7ff fc55 	bl	80024e4 <xTaskGetSchedulerState>
 8002c3a:	2802      	cmp	r0, #2
 8002c3c:	d012      	beq.n	8002c64 <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002c3e:	2300      	movs	r3, #0
 8002c40:	461a      	mov	r2, r3
 8002c42:	4669      	mov	r1, sp
 8002c44:	4810      	ldr	r0, [pc, #64]	; (8002c88 <xTimerGenericCommand+0x6c>)
 8002c46:	6880      	ldr	r0, [r0, #8]
 8002c48:	f7fe fbbc 	bl	80013c4 <xQueueGenericSend>
 8002c4c:	e017      	b.n	8002c7e <xTimerGenericCommand+0x62>
 8002c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c52:	b672      	cpsid	i
 8002c54:	f383 8811 	msr	BASEPRI, r3
 8002c58:	f3bf 8f6f 	isb	sy
 8002c5c:	f3bf 8f4f 	dsb	sy
 8002c60:	b662      	cpsie	i
	configASSERT( xTimer );
 8002c62:	e7fe      	b.n	8002c62 <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002c64:	2300      	movs	r3, #0
 8002c66:	9a06      	ldr	r2, [sp, #24]
 8002c68:	4669      	mov	r1, sp
 8002c6a:	4807      	ldr	r0, [pc, #28]	; (8002c88 <xTimerGenericCommand+0x6c>)
 8002c6c:	6880      	ldr	r0, [r0, #8]
 8002c6e:	f7fe fba9 	bl	80013c4 <xQueueGenericSend>
 8002c72:	e004      	b.n	8002c7e <xTimerGenericCommand+0x62>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002c74:	2300      	movs	r3, #0
 8002c76:	4662      	mov	r2, ip
 8002c78:	4669      	mov	r1, sp
 8002c7a:	f7fe fc91 	bl	80015a0 <xQueueGenericSendFromISR>
}
 8002c7e:	b005      	add	sp, #20
 8002c80:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 8002c84:	2000      	movs	r0, #0
}
 8002c86:	4770      	bx	lr
 8002c88:	20000c84 	.word	0x20000c84

08002c8c <prvSwitchTimerLists>:
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002c8c:	4b22      	ldr	r3, [pc, #136]	; (8002d18 <prvSwitchTimerLists+0x8c>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	2a00      	cmp	r2, #0
 8002c94:	d03b      	beq.n	8002d0e <prvSwitchTimerLists+0x82>
{
 8002c96:	b570      	push	{r4, r5, r6, lr}
 8002c98:	b082      	sub	sp, #8
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c9e:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002ca0:	1d25      	adds	r5, r4, #4
 8002ca2:	4628      	mov	r0, r5
 8002ca4:	f7fe f9f8 	bl	8001098 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002ca8:	6a23      	ldr	r3, [r4, #32]
 8002caa:	4620      	mov	r0, r4
 8002cac:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002cae:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8002cb2:	f013 0f04 	tst.w	r3, #4
 8002cb6:	d10a      	bne.n	8002cce <prvSwitchTimerLists+0x42>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002cb8:	4b17      	ldr	r3, [pc, #92]	; (8002d18 <prvSwitchTimerLists+0x8c>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	2a00      	cmp	r2, #0
 8002cc0:	d1eb      	bne.n	8002c9a <prvSwitchTimerLists+0xe>
	pxCurrentTimerList = pxOverflowTimerList;
 8002cc2:	4a15      	ldr	r2, [pc, #84]	; (8002d18 <prvSwitchTimerLists+0x8c>)
 8002cc4:	6851      	ldr	r1, [r2, #4]
 8002cc6:	6011      	str	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8002cc8:	6053      	str	r3, [r2, #4]
}
 8002cca:	b002      	add	sp, #8
 8002ccc:	bd70      	pop	{r4, r5, r6, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002cce:	69a3      	ldr	r3, [r4, #24]
 8002cd0:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8002cd2:	429e      	cmp	r6, r3
 8002cd4:	d207      	bcs.n	8002ce6 <prvSwitchTimerLists+0x5a>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002cd6:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002cd8:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002cda:	4629      	mov	r1, r5
 8002cdc:	4b0e      	ldr	r3, [pc, #56]	; (8002d18 <prvSwitchTimerLists+0x8c>)
 8002cde:	6818      	ldr	r0, [r3, #0]
 8002ce0:	f7fe f9c1 	bl	8001066 <vListInsert>
 8002ce4:	e7e8      	b.n	8002cb8 <prvSwitchTimerLists+0x2c>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	9100      	str	r1, [sp, #0]
 8002cea:	460b      	mov	r3, r1
 8002cec:	4632      	mov	r2, r6
 8002cee:	4620      	mov	r0, r4
 8002cf0:	f7ff ff94 	bl	8002c1c <xTimerGenericCommand>
				configASSERT( xResult );
 8002cf4:	2800      	cmp	r0, #0
 8002cf6:	d1df      	bne.n	8002cb8 <prvSwitchTimerLists+0x2c>
 8002cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cfc:	b672      	cpsid	i
 8002cfe:	f383 8811 	msr	BASEPRI, r3
 8002d02:	f3bf 8f6f 	isb	sy
 8002d06:	f3bf 8f4f 	dsb	sy
 8002d0a:	b662      	cpsie	i
 8002d0c:	e7fe      	b.n	8002d0c <prvSwitchTimerLists+0x80>
	pxCurrentTimerList = pxOverflowTimerList;
 8002d0e:	4a02      	ldr	r2, [pc, #8]	; (8002d18 <prvSwitchTimerLists+0x8c>)
 8002d10:	6851      	ldr	r1, [r2, #4]
 8002d12:	6011      	str	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8002d14:	6053      	str	r3, [r2, #4]
 8002d16:	4770      	bx	lr
 8002d18:	20000c84 	.word	0x20000c84

08002d1c <prvSampleTimeNow>:
{
 8002d1c:	b538      	push	{r3, r4, r5, lr}
 8002d1e:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 8002d20:	f7ff f93c 	bl	8001f9c <xTaskGetTickCount>
 8002d24:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 8002d26:	4b08      	ldr	r3, [pc, #32]	; (8002d48 <prvSampleTimeNow+0x2c>)
 8002d28:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8002d2c:	4283      	cmp	r3, r0
 8002d2e:	d806      	bhi.n	8002d3e <prvSampleTimeNow+0x22>
		*pxTimerListsWereSwitched = pdFALSE;
 8002d30:	2300      	movs	r3, #0
 8002d32:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 8002d34:	4b04      	ldr	r3, [pc, #16]	; (8002d48 <prvSampleTimeNow+0x2c>)
 8002d36:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
}
 8002d3a:	4620      	mov	r0, r4
 8002d3c:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 8002d3e:	f7ff ffa5 	bl	8002c8c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002d42:	2301      	movs	r3, #1
 8002d44:	602b      	str	r3, [r5, #0]
 8002d46:	e7f5      	b.n	8002d34 <prvSampleTimeNow+0x18>
 8002d48:	20000c84 	.word	0x20000c84

08002d4c <prvProcessExpiredTimer>:
{
 8002d4c:	b570      	push	{r4, r5, r6, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	4606      	mov	r6, r0
 8002d52:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d54:	4918      	ldr	r1, [pc, #96]	; (8002db8 <prvProcessExpiredTimer+0x6c>)
 8002d56:	6809      	ldr	r1, [r1, #0]
 8002d58:	68c9      	ldr	r1, [r1, #12]
 8002d5a:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002d5c:	1d20      	adds	r0, r4, #4
 8002d5e:	f7fe f99b 	bl	8001098 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002d62:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
 8002d66:	f01c 0f04 	tst.w	ip, #4
 8002d6a:	d108      	bne.n	8002d7e <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002d6c:	f02c 0c01 	bic.w	ip, ip, #1
 8002d70:	f884 c028 	strb.w	ip, [r4, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002d74:	6a23      	ldr	r3, [r4, #32]
 8002d76:	4620      	mov	r0, r4
 8002d78:	4798      	blx	r3
}
 8002d7a:	b002      	add	sp, #8
 8002d7c:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002d7e:	69a1      	ldr	r1, [r4, #24]
 8002d80:	4633      	mov	r3, r6
 8002d82:	462a      	mov	r2, r5
 8002d84:	4431      	add	r1, r6
 8002d86:	4620      	mov	r0, r4
 8002d88:	f7ff fe4e 	bl	8002a28 <prvInsertTimerInActiveList>
 8002d8c:	2800      	cmp	r0, #0
 8002d8e:	d0f1      	beq.n	8002d74 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002d90:	2100      	movs	r1, #0
 8002d92:	9100      	str	r1, [sp, #0]
 8002d94:	460b      	mov	r3, r1
 8002d96:	4632      	mov	r2, r6
 8002d98:	4620      	mov	r0, r4
 8002d9a:	f7ff ff3f 	bl	8002c1c <xTimerGenericCommand>
			configASSERT( xResult );
 8002d9e:	2800      	cmp	r0, #0
 8002da0:	d1e8      	bne.n	8002d74 <prvProcessExpiredTimer+0x28>
 8002da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da6:	b672      	cpsid	i
 8002da8:	f383 8811 	msr	BASEPRI, r3
 8002dac:	f3bf 8f6f 	isb	sy
 8002db0:	f3bf 8f4f 	dsb	sy
 8002db4:	b662      	cpsie	i
 8002db6:	e7fe      	b.n	8002db6 <prvProcessExpiredTimer+0x6a>
 8002db8:	20000c84 	.word	0x20000c84

08002dbc <prvProcessTimerOrBlockTask>:
{
 8002dbc:	b570      	push	{r4, r5, r6, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	4606      	mov	r6, r0
 8002dc2:	460c      	mov	r4, r1
	vTaskSuspendAll();
 8002dc4:	f7ff f8e0 	bl	8001f88 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002dc8:	a801      	add	r0, sp, #4
 8002dca:	f7ff ffa7 	bl	8002d1c <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8002dce:	9b01      	ldr	r3, [sp, #4]
 8002dd0:	bb3b      	cbnz	r3, 8002e22 <prvProcessTimerOrBlockTask+0x66>
 8002dd2:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002dd4:	42b0      	cmp	r0, r6
 8002dd6:	bf28      	it	cs
 8002dd8:	2c00      	cmpcs	r4, #0
 8002dda:	d019      	beq.n	8002e10 <prvProcessTimerOrBlockTask+0x54>
				if( xListWasEmpty != pdFALSE )
 8002ddc:	b124      	cbz	r4, 8002de8 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002dde:	4a13      	ldr	r2, [pc, #76]	; (8002e2c <prvProcessTimerOrBlockTask+0x70>)
 8002de0:	6852      	ldr	r2, [r2, #4]
 8002de2:	6812      	ldr	r2, [r2, #0]
 8002de4:	b9da      	cbnz	r2, 8002e1e <prvProcessTimerOrBlockTask+0x62>
 8002de6:	2401      	movs	r4, #1
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002de8:	4622      	mov	r2, r4
 8002dea:	1b71      	subs	r1, r6, r5
 8002dec:	4b0f      	ldr	r3, [pc, #60]	; (8002e2c <prvProcessTimerOrBlockTask+0x70>)
 8002dee:	6898      	ldr	r0, [r3, #8]
 8002df0:	f7fe fe68 	bl	8001ac4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8002df4:	f7ff f966 	bl	80020c4 <xTaskResumeAll>
 8002df8:	b9a8      	cbnz	r0, 8002e26 <prvProcessTimerOrBlockTask+0x6a>
					portYIELD_WITHIN_API();
 8002dfa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e02:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002e06:	f3bf 8f4f 	dsb	sy
 8002e0a:	f3bf 8f6f 	isb	sy
 8002e0e:	e00a      	b.n	8002e26 <prvProcessTimerOrBlockTask+0x6a>
				( void ) xTaskResumeAll();
 8002e10:	f7ff f958 	bl	80020c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002e14:	4629      	mov	r1, r5
 8002e16:	4630      	mov	r0, r6
 8002e18:	f7ff ff98 	bl	8002d4c <prvProcessExpiredTimer>
 8002e1c:	e003      	b.n	8002e26 <prvProcessTimerOrBlockTask+0x6a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002e1e:	461c      	mov	r4, r3
 8002e20:	e7e2      	b.n	8002de8 <prvProcessTimerOrBlockTask+0x2c>
			( void ) xTaskResumeAll();
 8002e22:	f7ff f94f 	bl	80020c4 <xTaskResumeAll>
}
 8002e26:	b002      	add	sp, #8
 8002e28:	bd70      	pop	{r4, r5, r6, pc}
 8002e2a:	bf00      	nop
 8002e2c:	20000c84 	.word	0x20000c84

08002e30 <prvProcessReceivedCommands>:
{
 8002e30:	b510      	push	{r4, lr}
 8002e32:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002e34:	e002      	b.n	8002e3c <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002e36:	9b04      	ldr	r3, [sp, #16]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	da0f      	bge.n	8002e5c <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	a904      	add	r1, sp, #16
 8002e40:	4b3f      	ldr	r3, [pc, #252]	; (8002f40 <prvProcessReceivedCommands+0x110>)
 8002e42:	6898      	ldr	r0, [r3, #8]
 8002e44:	f7fe fc1a 	bl	800167c <xQueueReceive>
 8002e48:	2800      	cmp	r0, #0
 8002e4a:	d077      	beq.n	8002f3c <prvProcessReceivedCommands+0x10c>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8002e4c:	9b04      	ldr	r3, [sp, #16]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	daf1      	bge.n	8002e36 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8002e52:	9907      	ldr	r1, [sp, #28]
 8002e54:	9806      	ldr	r0, [sp, #24]
 8002e56:	9b05      	ldr	r3, [sp, #20]
 8002e58:	4798      	blx	r3
 8002e5a:	e7ec      	b.n	8002e36 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002e5c:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002e5e:	6963      	ldr	r3, [r4, #20]
 8002e60:	b113      	cbz	r3, 8002e68 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002e62:	1d20      	adds	r0, r4, #4
 8002e64:	f7fe f918 	bl	8001098 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002e68:	a803      	add	r0, sp, #12
 8002e6a:	f7ff ff57 	bl	8002d1c <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8002e6e:	9b04      	ldr	r3, [sp, #16]
 8002e70:	2b09      	cmp	r3, #9
 8002e72:	d8e3      	bhi.n	8002e3c <prvProcessReceivedCommands+0xc>
 8002e74:	e8df f003 	tbb	[pc, r3]
 8002e78:	32050505 	.word	0x32050505
 8002e7c:	05055439 	.word	0x05055439
 8002e80:	3932      	.short	0x3932
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002e82:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8002e86:	f043 0301 	orr.w	r3, r3, #1
 8002e8a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002e8e:	9b05      	ldr	r3, [sp, #20]
 8002e90:	69a1      	ldr	r1, [r4, #24]
 8002e92:	4602      	mov	r2, r0
 8002e94:	4419      	add	r1, r3
 8002e96:	4620      	mov	r0, r4
 8002e98:	f7ff fdc6 	bl	8002a28 <prvInsertTimerInActiveList>
 8002e9c:	2800      	cmp	r0, #0
 8002e9e:	d0cd      	beq.n	8002e3c <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002ea0:	6a23      	ldr	r3, [r4, #32]
 8002ea2:	4620      	mov	r0, r4
 8002ea4:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002ea6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8002eaa:	f013 0f04 	tst.w	r3, #4
 8002eae:	d0c5      	beq.n	8002e3c <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002eb0:	69a2      	ldr	r2, [r4, #24]
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	9100      	str	r1, [sp, #0]
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	9805      	ldr	r0, [sp, #20]
 8002eba:	4402      	add	r2, r0
 8002ebc:	4620      	mov	r0, r4
 8002ebe:	f7ff fead 	bl	8002c1c <xTimerGenericCommand>
							configASSERT( xResult );
 8002ec2:	2800      	cmp	r0, #0
 8002ec4:	d1ba      	bne.n	8002e3c <prvProcessReceivedCommands+0xc>
 8002ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eca:	b672      	cpsid	i
 8002ecc:	f383 8811 	msr	BASEPRI, r3
 8002ed0:	f3bf 8f6f 	isb	sy
 8002ed4:	f3bf 8f4f 	dsb	sy
 8002ed8:	b662      	cpsie	i
 8002eda:	e7fe      	b.n	8002eda <prvProcessReceivedCommands+0xaa>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002edc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8002ee0:	f023 0301 	bic.w	r3, r3, #1
 8002ee4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					break;
 8002ee8:	e7a8      	b.n	8002e3c <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002eea:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8002eee:	f043 0301 	orr.w	r3, r3, #1
 8002ef2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002ef6:	9905      	ldr	r1, [sp, #20]
 8002ef8:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002efa:	b131      	cbz	r1, 8002f0a <prvProcessReceivedCommands+0xda>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002efc:	4603      	mov	r3, r0
 8002efe:	4602      	mov	r2, r0
 8002f00:	4401      	add	r1, r0
 8002f02:	4620      	mov	r0, r4
 8002f04:	f7ff fd90 	bl	8002a28 <prvInsertTimerInActiveList>
					break;
 8002f08:	e798      	b.n	8002e3c <prvProcessReceivedCommands+0xc>
 8002f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f0e:	b672      	cpsid	i
 8002f10:	f383 8811 	msr	BASEPRI, r3
 8002f14:	f3bf 8f6f 	isb	sy
 8002f18:	f3bf 8f4f 	dsb	sy
 8002f1c:	b662      	cpsie	i
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002f1e:	e7fe      	b.n	8002f1e <prvProcessReceivedCommands+0xee>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002f20:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8002f24:	f013 0f02 	tst.w	r3, #2
 8002f28:	d004      	beq.n	8002f34 <prvProcessReceivedCommands+0x104>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002f2a:	f023 0301 	bic.w	r3, r3, #1
 8002f2e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8002f32:	e783      	b.n	8002e3c <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 8002f34:	4620      	mov	r0, r4
 8002f36:	f000 faa1 	bl	800347c <vPortFree>
 8002f3a:	e77f      	b.n	8002e3c <prvProcessReceivedCommands+0xc>
}
 8002f3c:	b008      	add	sp, #32
 8002f3e:	bd10      	pop	{r4, pc}
 8002f40:	20000c84 	.word	0x20000c84

08002f44 <prvTimerTask>:
{
 8002f44:	b500      	push	{lr}
 8002f46:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002f48:	a801      	add	r0, sp, #4
 8002f4a:	f7ff fd5d 	bl	8002a08 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002f4e:	9901      	ldr	r1, [sp, #4]
 8002f50:	f7ff ff34 	bl	8002dbc <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 8002f54:	f7ff ff6c 	bl	8002e30 <prvProcessReceivedCommands>
	for( ;; )
 8002f58:	e7f6      	b.n	8002f48 <prvTimerTask+0x4>

08002f5a <pvTimerGetTimerID>:
void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
Timer_t * const pxTimer = xTimer;
void *pvReturn;

	configASSERT( xTimer );
 8002f5a:	b140      	cbz	r0, 8002f6e <pvTimerGetTimerID+0x14>
{
 8002f5c:	b510      	push	{r4, lr}
 8002f5e:	4604      	mov	r4, r0

	taskENTER_CRITICAL();
 8002f60:	f000 f890 	bl	8003084 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8002f64:	69e4      	ldr	r4, [r4, #28]
	}
	taskEXIT_CRITICAL();
 8002f66:	f000 f8b3 	bl	80030d0 <vPortExitCritical>

	return pvReturn;
}
 8002f6a:	4620      	mov	r0, r4
 8002f6c:	bd10      	pop	{r4, pc}
 8002f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f72:	b672      	cpsid	i
 8002f74:	f383 8811 	msr	BASEPRI, r3
 8002f78:	f3bf 8f6f 	isb	sy
 8002f7c:	f3bf 8f4f 	dsb	sy
 8002f80:	b662      	cpsie	i
	configASSERT( xTimer );
 8002f82:	e7fe      	b.n	8002f82 <pvTimerGetTimerID+0x28>

08002f84 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8002f84:	b510      	push	{r4, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	4614      	mov	r4, r2
 8002f8a:	461a      	mov	r2, r3
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8002f8c:	f06f 0301 	mvn.w	r3, #1
 8002f90:	9300      	str	r3, [sp, #0]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8002f92:	9001      	str	r0, [sp, #4]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8002f94:	9102      	str	r1, [sp, #8]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8002f96:	9403      	str	r4, [sp, #12]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002f98:	2300      	movs	r3, #0
 8002f9a:	4669      	mov	r1, sp
 8002f9c:	4802      	ldr	r0, [pc, #8]	; (8002fa8 <xTimerPendFunctionCallFromISR+0x24>)
 8002f9e:	6880      	ldr	r0, [r0, #8]
 8002fa0:	f7fe fafe 	bl	80015a0 <xQueueGenericSendFromISR>

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
 8002fa4:	b004      	add	sp, #16
 8002fa6:	bd10      	pop	{r4, pc}
 8002fa8:	20000c84 	.word	0x20000c84

08002fac <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002fac:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002fb2:	4b0f      	ldr	r3, [pc, #60]	; (8002ff0 <prvTaskExitError+0x44>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fba:	d00a      	beq.n	8002fd2 <prvTaskExitError+0x26>
 8002fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc0:	b672      	cpsid	i
 8002fc2:	f383 8811 	msr	BASEPRI, r3
 8002fc6:	f3bf 8f6f 	isb	sy
 8002fca:	f3bf 8f4f 	dsb	sy
 8002fce:	b662      	cpsie	i
 8002fd0:	e7fe      	b.n	8002fd0 <prvTaskExitError+0x24>
 8002fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd6:	b672      	cpsid	i
 8002fd8:	f383 8811 	msr	BASEPRI, r3
 8002fdc:	f3bf 8f6f 	isb	sy
 8002fe0:	f3bf 8f4f 	dsb	sy
 8002fe4:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002fe6:	9b01      	ldr	r3, [sp, #4]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d0fc      	beq.n	8002fe6 <prvTaskExitError+0x3a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002fec:	b002      	add	sp, #8
 8002fee:	4770      	bx	lr
 8002ff0:	20000000 	.word	0x20000000

08002ff4 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002ff4:	4808      	ldr	r0, [pc, #32]	; (8003018 <prvPortStartFirstTask+0x24>)
 8002ff6:	6800      	ldr	r0, [r0, #0]
 8002ff8:	6800      	ldr	r0, [r0, #0]
 8002ffa:	f380 8808 	msr	MSP, r0
 8002ffe:	f04f 0000 	mov.w	r0, #0
 8003002:	f380 8814 	msr	CONTROL, r0
 8003006:	b662      	cpsie	i
 8003008:	b661      	cpsie	f
 800300a:	f3bf 8f4f 	dsb	sy
 800300e:	f3bf 8f6f 	isb	sy
 8003012:	df00      	svc	0
 8003014:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003016:	0000      	.short	0x0000
 8003018:	e000ed08 	.word	0xe000ed08

0800301c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800301c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800302c <vPortEnableVFP+0x10>
 8003020:	6801      	ldr	r1, [r0, #0]
 8003022:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003026:	6001      	str	r1, [r0, #0]
 8003028:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800302a:	0000      	.short	0x0000
 800302c:	e000ed88 	.word	0xe000ed88

08003030 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003030:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003034:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003038:	f021 0101 	bic.w	r1, r1, #1
 800303c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003040:	4b05      	ldr	r3, [pc, #20]	; (8003058 <pxPortInitialiseStack+0x28>)
 8003042:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003046:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800304a:	f06f 0302 	mvn.w	r3, #2
 800304e:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8003052:	3844      	subs	r0, #68	; 0x44
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	08002fad 	.word	0x08002fad
 800305c:	00000000 	.word	0x00000000

08003060 <SVC_Handler>:
	__asm volatile (
 8003060:	4b07      	ldr	r3, [pc, #28]	; (8003080 <pxCurrentTCBConst2>)
 8003062:	6819      	ldr	r1, [r3, #0]
 8003064:	6808      	ldr	r0, [r1, #0]
 8003066:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800306a:	f380 8809 	msr	PSP, r0
 800306e:	f3bf 8f6f 	isb	sy
 8003072:	f04f 0000 	mov.w	r0, #0
 8003076:	f380 8811 	msr	BASEPRI, r0
 800307a:	4770      	bx	lr
 800307c:	f3af 8000 	nop.w

08003080 <pxCurrentTCBConst2>:
 8003080:	20000c58 	.word	0x20000c58

08003084 <vPortEnterCritical>:
 8003084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003088:	b672      	cpsid	i
 800308a:	f383 8811 	msr	BASEPRI, r3
 800308e:	f3bf 8f6f 	isb	sy
 8003092:	f3bf 8f4f 	dsb	sy
 8003096:	b662      	cpsie	i
	uxCriticalNesting++;
 8003098:	4a0c      	ldr	r2, [pc, #48]	; (80030cc <vPortEnterCritical+0x48>)
 800309a:	6813      	ldr	r3, [r2, #0]
 800309c:	3301      	adds	r3, #1
 800309e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d000      	beq.n	80030a6 <vPortEnterCritical+0x22>
}
 80030a4:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80030a6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80030aa:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 80030ae:	f013 0fff 	tst.w	r3, #255	; 0xff
 80030b2:	d0f7      	beq.n	80030a4 <vPortEnterCritical+0x20>
 80030b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b8:	b672      	cpsid	i
 80030ba:	f383 8811 	msr	BASEPRI, r3
 80030be:	f3bf 8f6f 	isb	sy
 80030c2:	f3bf 8f4f 	dsb	sy
 80030c6:	b662      	cpsie	i
 80030c8:	e7fe      	b.n	80030c8 <vPortEnterCritical+0x44>
 80030ca:	bf00      	nop
 80030cc:	20000000 	.word	0x20000000

080030d0 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80030d0:	4b0a      	ldr	r3, [pc, #40]	; (80030fc <vPortExitCritical+0x2c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	b953      	cbnz	r3, 80030ec <vPortExitCritical+0x1c>
 80030d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030da:	b672      	cpsid	i
 80030dc:	f383 8811 	msr	BASEPRI, r3
 80030e0:	f3bf 8f6f 	isb	sy
 80030e4:	f3bf 8f4f 	dsb	sy
 80030e8:	b662      	cpsie	i
 80030ea:	e7fe      	b.n	80030ea <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 80030ec:	3b01      	subs	r3, #1
 80030ee:	4a03      	ldr	r2, [pc, #12]	; (80030fc <vPortExitCritical+0x2c>)
 80030f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80030f2:	b90b      	cbnz	r3, 80030f8 <vPortExitCritical+0x28>
	__asm volatile
 80030f4:	f383 8811 	msr	BASEPRI, r3
}
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	20000000 	.word	0x20000000

08003100 <PendSV_Handler>:
	__asm volatile
 8003100:	f3ef 8009 	mrs	r0, PSP
 8003104:	f3bf 8f6f 	isb	sy
 8003108:	4b15      	ldr	r3, [pc, #84]	; (8003160 <pxCurrentTCBConst>)
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	f01e 0f10 	tst.w	lr, #16
 8003110:	bf08      	it	eq
 8003112:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003116:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800311a:	6010      	str	r0, [r2, #0]
 800311c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003120:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003124:	b672      	cpsid	i
 8003126:	f380 8811 	msr	BASEPRI, r0
 800312a:	f3bf 8f4f 	dsb	sy
 800312e:	f3bf 8f6f 	isb	sy
 8003132:	b662      	cpsie	i
 8003134:	f7ff f868 	bl	8002208 <vTaskSwitchContext>
 8003138:	f04f 0000 	mov.w	r0, #0
 800313c:	f380 8811 	msr	BASEPRI, r0
 8003140:	bc09      	pop	{r0, r3}
 8003142:	6819      	ldr	r1, [r3, #0]
 8003144:	6808      	ldr	r0, [r1, #0]
 8003146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800314a:	f01e 0f10 	tst.w	lr, #16
 800314e:	bf08      	it	eq
 8003150:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003154:	f380 8809 	msr	PSP, r0
 8003158:	f3bf 8f6f 	isb	sy
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop

08003160 <pxCurrentTCBConst>:
 8003160:	20000c58 	.word	0x20000c58

08003164 <SysTick_Handler>:
{
 8003164:	b508      	push	{r3, lr}
	__asm volatile
 8003166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800316a:	b672      	cpsid	i
 800316c:	f383 8811 	msr	BASEPRI, r3
 8003170:	f3bf 8f6f 	isb	sy
 8003174:	f3bf 8f4f 	dsb	sy
 8003178:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 800317a:	f7fe ff15 	bl	8001fa8 <xTaskIncrementTick>
 800317e:	b128      	cbz	r0, 800318c <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003180:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003184:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003188:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 800318c:	2300      	movs	r3, #0
 800318e:	f383 8811 	msr	BASEPRI, r3
}
 8003192:	bd08      	pop	{r3, pc}

08003194 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003194:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8003198:	2300      	movs	r3, #0
 800319a:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800319c:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800319e:	4b05      	ldr	r3, [pc, #20]	; (80031b4 <vPortSetupTimerInterrupt+0x20>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4905      	ldr	r1, [pc, #20]	; (80031b8 <vPortSetupTimerInterrupt+0x24>)
 80031a4:	fba1 1303 	umull	r1, r3, r1, r3
 80031a8:	099b      	lsrs	r3, r3, #6
 80031aa:	3b01      	subs	r3, #1
 80031ac:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80031ae:	2307      	movs	r3, #7
 80031b0:	6113      	str	r3, [r2, #16]
}
 80031b2:	4770      	bx	lr
 80031b4:	20000004 	.word	0x20000004
 80031b8:	10624dd3 	.word	0x10624dd3

080031bc <xPortStartScheduler>:
{
 80031bc:	b530      	push	{r4, r5, lr}
 80031be:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80031c0:	4b2f      	ldr	r3, [pc, #188]	; (8003280 <xPortStartScheduler+0xc4>)
 80031c2:	781a      	ldrb	r2, [r3, #0]
 80031c4:	b2d2      	uxtb	r2, r2
 80031c6:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80031c8:	22ff      	movs	r2, #255	; 0xff
 80031ca:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80031d4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80031d8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80031dc:	4a29      	ldr	r2, [pc, #164]	; (8003284 <xPortStartScheduler+0xc8>)
 80031de:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80031e0:	2307      	movs	r3, #7
 80031e2:	6053      	str	r3, [r2, #4]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80031e4:	e009      	b.n	80031fa <xPortStartScheduler+0x3e>
			ulMaxPRIGROUPValue--;
 80031e6:	4a27      	ldr	r2, [pc, #156]	; (8003284 <xPortStartScheduler+0xc8>)
 80031e8:	6853      	ldr	r3, [r2, #4]
 80031ea:	3b01      	subs	r3, #1
 80031ec:	6053      	str	r3, [r2, #4]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80031ee:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80031fa:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80031fe:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003202:	d1f0      	bne.n	80031e6 <xPortStartScheduler+0x2a>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003204:	4b1f      	ldr	r3, [pc, #124]	; (8003284 <xPortStartScheduler+0xc8>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	2b03      	cmp	r3, #3
 800320a:	d00a      	beq.n	8003222 <xPortStartScheduler+0x66>
	__asm volatile
 800320c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003210:	b672      	cpsid	i
 8003212:	f383 8811 	msr	BASEPRI, r3
 8003216:	f3bf 8f6f 	isb	sy
 800321a:	f3bf 8f4f 	dsb	sy
 800321e:	b662      	cpsie	i
 8003220:	e7fe      	b.n	8003220 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003222:	021b      	lsls	r3, r3, #8
 8003224:	4a17      	ldr	r2, [pc, #92]	; (8003284 <xPortStartScheduler+0xc8>)
 8003226:	6053      	str	r3, [r2, #4]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003228:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800322c:	6053      	str	r3, [r2, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800322e:	9b01      	ldr	r3, [sp, #4]
 8003230:	b2db      	uxtb	r3, r3
 8003232:	4a13      	ldr	r2, [pc, #76]	; (8003280 <xPortStartScheduler+0xc4>)
 8003234:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003236:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 800323a:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800323e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003242:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003246:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800324a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800324e:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8003252:	f7ff ff9f 	bl	8003194 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8003256:	2500      	movs	r5, #0
 8003258:	4b0b      	ldr	r3, [pc, #44]	; (8003288 <xPortStartScheduler+0xcc>)
 800325a:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800325c:	f7ff fede 	bl	800301c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003260:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8003264:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003268:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 800326c:	f7ff fec2 	bl	8002ff4 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8003270:	f7fe ffca 	bl	8002208 <vTaskSwitchContext>
	prvTaskExitError();
 8003274:	f7ff fe9a 	bl	8002fac <prvTaskExitError>
}
 8003278:	4628      	mov	r0, r5
 800327a:	b003      	add	sp, #12
 800327c:	bd30      	pop	{r4, r5, pc}
 800327e:	bf00      	nop
 8003280:	e000e400 	.word	0xe000e400
 8003284:	20000db0 	.word	0x20000db0
 8003288:	20000000 	.word	0x20000000

0800328c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800328c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003290:	2b0f      	cmp	r3, #15
 8003292:	d911      	bls.n	80032b8 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003294:	4a13      	ldr	r2, [pc, #76]	; (80032e4 <vPortValidateInterruptPriority+0x58>)
 8003296:	5c9b      	ldrb	r3, [r3, r2]
 8003298:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800329a:	4a13      	ldr	r2, [pc, #76]	; (80032e8 <vPortValidateInterruptPriority+0x5c>)
 800329c:	7812      	ldrb	r2, [r2, #0]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d90a      	bls.n	80032b8 <vPortValidateInterruptPriority+0x2c>
 80032a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a6:	b672      	cpsid	i
 80032a8:	f383 8811 	msr	BASEPRI, r3
 80032ac:	f3bf 8f6f 	isb	sy
 80032b0:	f3bf 8f4f 	dsb	sy
 80032b4:	b662      	cpsie	i
 80032b6:	e7fe      	b.n	80032b6 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80032b8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80032bc:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 80032c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80032c4:	4a08      	ldr	r2, [pc, #32]	; (80032e8 <vPortValidateInterruptPriority+0x5c>)
 80032c6:	6852      	ldr	r2, [r2, #4]
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d90a      	bls.n	80032e2 <vPortValidateInterruptPriority+0x56>
 80032cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d0:	b672      	cpsid	i
 80032d2:	f383 8811 	msr	BASEPRI, r3
 80032d6:	f3bf 8f6f 	isb	sy
 80032da:	f3bf 8f4f 	dsb	sy
 80032de:	b662      	cpsie	i
 80032e0:	e7fe      	b.n	80032e0 <vPortValidateInterruptPriority+0x54>
	}
 80032e2:	4770      	bx	lr
 80032e4:	e000e3f0 	.word	0xe000e3f0
 80032e8:	20000db0 	.word	0x20000db0

080032ec <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80032ec:	4a10      	ldr	r2, [pc, #64]	; (8003330 <prvHeapInit+0x44>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80032ee:	f012 0f07 	tst.w	r2, #7
 80032f2:	d01a      	beq.n	800332a <prvHeapInit+0x3e>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80032f4:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80032f6:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80032fa:	f5c1 5370 	rsb	r3, r1, #15360	; 0x3c00
 80032fe:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003300:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003302:	490c      	ldr	r1, [pc, #48]	; (8003334 <prvHeapInit+0x48>)
 8003304:	600a      	str	r2, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003306:	2000      	movs	r0, #0
 8003308:	6048      	str	r0, [r1, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800330a:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800330c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800330e:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8003312:	608b      	str	r3, [r1, #8]
	pxEnd->xBlockSize = 0;
 8003314:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003316:	6018      	str	r0, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003318:	1a98      	subs	r0, r3, r2
 800331a:	6050      	str	r0, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800331c:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800331e:	60c8      	str	r0, [r1, #12]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003320:	6108      	str	r0, [r1, #16]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003322:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003326:	614b      	str	r3, [r1, #20]
}
 8003328:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800332a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800332e:	e7e8      	b.n	8003302 <prvHeapInit+0x16>
 8003330:	20000dd0 	.word	0x20000dd0
 8003334:	20000db8 	.word	0x20000db8

08003338 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003338:	4b16      	ldr	r3, [pc, #88]	; (8003394 <prvInsertBlockIntoFreeList+0x5c>)
 800333a:	461a      	mov	r2, r3
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4283      	cmp	r3, r0
 8003340:	d3fb      	bcc.n	800333a <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003342:	6851      	ldr	r1, [r2, #4]
 8003344:	eb02 0c01 	add.w	ip, r2, r1
 8003348:	4584      	cmp	ip, r0
 800334a:	d009      	beq.n	8003360 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800334c:	6841      	ldr	r1, [r0, #4]
 800334e:	eb00 0c01 	add.w	ip, r0, r1
 8003352:	4563      	cmp	r3, ip
 8003354:	d009      	beq.n	800336a <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003356:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003358:	4290      	cmp	r0, r2
 800335a:	d019      	beq.n	8003390 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800335c:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 800335e:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003360:	6840      	ldr	r0, [r0, #4]
 8003362:	4401      	add	r1, r0
 8003364:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8003366:	4610      	mov	r0, r2
 8003368:	e7f0      	b.n	800334c <prvInsertBlockIntoFreeList+0x14>
{
 800336a:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800336c:	4c09      	ldr	r4, [pc, #36]	; (8003394 <prvInsertBlockIntoFreeList+0x5c>)
 800336e:	68a4      	ldr	r4, [r4, #8]
 8003370:	42a3      	cmp	r3, r4
 8003372:	d00b      	beq.n	800338c <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	4419      	add	r1, r3
 8003378:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800337a:	6813      	ldr	r3, [r2, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8003380:	4290      	cmp	r0, r2
 8003382:	d000      	beq.n	8003386 <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003384:	6010      	str	r0, [r2, #0]
	}
}
 8003386:	f85d 4b04 	ldr.w	r4, [sp], #4
 800338a:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800338c:	6004      	str	r4, [r0, #0]
 800338e:	e7f7      	b.n	8003380 <prvInsertBlockIntoFreeList+0x48>
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	20000db8 	.word	0x20000db8

08003398 <pvPortMalloc>:
{
 8003398:	b570      	push	{r4, r5, r6, lr}
 800339a:	4605      	mov	r5, r0
	vTaskSuspendAll();
 800339c:	f7fe fdf4 	bl	8001f88 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80033a0:	4b35      	ldr	r3, [pc, #212]	; (8003478 <pvPortMalloc+0xe0>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	b1a3      	cbz	r3, 80033d0 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80033a6:	4b34      	ldr	r3, [pc, #208]	; (8003478 <pvPortMalloc+0xe0>)
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	421d      	tst	r5, r3
 80033ac:	d14b      	bne.n	8003446 <pvPortMalloc+0xae>
			if( xWantedSize > 0 )
 80033ae:	b135      	cbz	r5, 80033be <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 80033b0:	3508      	adds	r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80033b2:	f015 0f07 	tst.w	r5, #7
 80033b6:	d002      	beq.n	80033be <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80033b8:	f025 0507 	bic.w	r5, r5, #7
 80033bc:	3508      	adds	r5, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80033be:	2d00      	cmp	r5, #0
 80033c0:	d043      	beq.n	800344a <pvPortMalloc+0xb2>
 80033c2:	4b2d      	ldr	r3, [pc, #180]	; (8003478 <pvPortMalloc+0xe0>)
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	42ab      	cmp	r3, r5
 80033c8:	d350      	bcc.n	800346c <pvPortMalloc+0xd4>
				pxBlock = xStart.pxNextFreeBlock;
 80033ca:	4a2b      	ldr	r2, [pc, #172]	; (8003478 <pvPortMalloc+0xe0>)
 80033cc:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80033ce:	e004      	b.n	80033da <pvPortMalloc+0x42>
			prvHeapInit();
 80033d0:	f7ff ff8c 	bl	80032ec <prvHeapInit>
 80033d4:	e7e7      	b.n	80033a6 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 80033d6:	4622      	mov	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 80033d8:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80033da:	6863      	ldr	r3, [r4, #4]
 80033dc:	42ab      	cmp	r3, r5
 80033de:	d202      	bcs.n	80033e6 <pvPortMalloc+0x4e>
 80033e0:	6823      	ldr	r3, [r4, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1f7      	bne.n	80033d6 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 80033e6:	4b24      	ldr	r3, [pc, #144]	; (8003478 <pvPortMalloc+0xe0>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	42a3      	cmp	r3, r4
 80033ec:	d040      	beq.n	8003470 <pvPortMalloc+0xd8>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80033ee:	6816      	ldr	r6, [r2, #0]
 80033f0:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80033f2:	6823      	ldr	r3, [r4, #0]
 80033f4:	6013      	str	r3, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80033f6:	6863      	ldr	r3, [r4, #4]
 80033f8:	1b5b      	subs	r3, r3, r5
 80033fa:	2b10      	cmp	r3, #16
 80033fc:	d912      	bls.n	8003424 <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80033fe:	1960      	adds	r0, r4, r5
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003400:	f010 0f07 	tst.w	r0, #7
 8003404:	d00a      	beq.n	800341c <pvPortMalloc+0x84>
 8003406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800340a:	b672      	cpsid	i
 800340c:	f383 8811 	msr	BASEPRI, r3
 8003410:	f3bf 8f6f 	isb	sy
 8003414:	f3bf 8f4f 	dsb	sy
 8003418:	b662      	cpsie	i
 800341a:	e7fe      	b.n	800341a <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800341c:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800341e:	6065      	str	r5, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003420:	f7ff ff8a 	bl	8003338 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003424:	6861      	ldr	r1, [r4, #4]
 8003426:	4a14      	ldr	r2, [pc, #80]	; (8003478 <pvPortMalloc+0xe0>)
 8003428:	6913      	ldr	r3, [r2, #16]
 800342a:	1a5b      	subs	r3, r3, r1
 800342c:	6113      	str	r3, [r2, #16]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800342e:	68d2      	ldr	r2, [r2, #12]
 8003430:	4293      	cmp	r3, r2
 8003432:	d201      	bcs.n	8003438 <pvPortMalloc+0xa0>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003434:	4a10      	ldr	r2, [pc, #64]	; (8003478 <pvPortMalloc+0xe0>)
 8003436:	60d3      	str	r3, [r2, #12]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003438:	4b0f      	ldr	r3, [pc, #60]	; (8003478 <pvPortMalloc+0xe0>)
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	430b      	orrs	r3, r1
 800343e:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003440:	2300      	movs	r3, #0
 8003442:	6023      	str	r3, [r4, #0]
 8003444:	e002      	b.n	800344c <pvPortMalloc+0xb4>
void *pvReturn = NULL;
 8003446:	2600      	movs	r6, #0
 8003448:	e000      	b.n	800344c <pvPortMalloc+0xb4>
 800344a:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 800344c:	f7fe fe3a 	bl	80020c4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003450:	f016 0f07 	tst.w	r6, #7
 8003454:	d00e      	beq.n	8003474 <pvPortMalloc+0xdc>
 8003456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800345a:	b672      	cpsid	i
 800345c:	f383 8811 	msr	BASEPRI, r3
 8003460:	f3bf 8f6f 	isb	sy
 8003464:	f3bf 8f4f 	dsb	sy
 8003468:	b662      	cpsie	i
 800346a:	e7fe      	b.n	800346a <pvPortMalloc+0xd2>
void *pvReturn = NULL;
 800346c:	2600      	movs	r6, #0
 800346e:	e7ed      	b.n	800344c <pvPortMalloc+0xb4>
 8003470:	2600      	movs	r6, #0
 8003472:	e7eb      	b.n	800344c <pvPortMalloc+0xb4>
}
 8003474:	4630      	mov	r0, r6
 8003476:	bd70      	pop	{r4, r5, r6, pc}
 8003478:	20000db8 	.word	0x20000db8

0800347c <vPortFree>:
	if( pv != NULL )
 800347c:	2800      	cmp	r0, #0
 800347e:	d034      	beq.n	80034ea <vPortFree+0x6e>
{
 8003480:	b538      	push	{r3, r4, r5, lr}
 8003482:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8003484:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003488:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800348c:	4a17      	ldr	r2, [pc, #92]	; (80034ec <vPortFree+0x70>)
 800348e:	6952      	ldr	r2, [r2, #20]
 8003490:	4213      	tst	r3, r2
 8003492:	d10a      	bne.n	80034aa <vPortFree+0x2e>
 8003494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003498:	b672      	cpsid	i
 800349a:	f383 8811 	msr	BASEPRI, r3
 800349e:	f3bf 8f6f 	isb	sy
 80034a2:	f3bf 8f4f 	dsb	sy
 80034a6:	b662      	cpsie	i
 80034a8:	e7fe      	b.n	80034a8 <vPortFree+0x2c>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80034aa:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80034ae:	b151      	cbz	r1, 80034c6 <vPortFree+0x4a>
 80034b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b4:	b672      	cpsid	i
 80034b6:	f383 8811 	msr	BASEPRI, r3
 80034ba:	f3bf 8f6f 	isb	sy
 80034be:	f3bf 8f4f 	dsb	sy
 80034c2:	b662      	cpsie	i
 80034c4:	e7fe      	b.n	80034c4 <vPortFree+0x48>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80034c6:	ea23 0302 	bic.w	r3, r3, r2
 80034ca:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80034ce:	f7fe fd5b 	bl	8001f88 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80034d2:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80034d6:	4a05      	ldr	r2, [pc, #20]	; (80034ec <vPortFree+0x70>)
 80034d8:	6913      	ldr	r3, [r2, #16]
 80034da:	440b      	add	r3, r1
 80034dc:	6113      	str	r3, [r2, #16]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80034de:	4628      	mov	r0, r5
 80034e0:	f7ff ff2a 	bl	8003338 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 80034e4:	f7fe fdee 	bl	80020c4 <xTaskResumeAll>
}
 80034e8:	bd38      	pop	{r3, r4, r5, pc}
 80034ea:	4770      	bx	lr
 80034ec:	20000db8 	.word	0x20000db8

080034f0 <SystemClock_Config>:
  *            Main regulator output voltage  = Scale1 mode
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
void SystemClock_Config(void) {
 80034f0:	b500      	push	{lr}
 80034f2:	b093      	sub	sp, #76	; 0x4c
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80034f4:	2301      	movs	r3, #1
 80034f6:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80034f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034fc:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80034fe:	2302      	movs	r3, #2
 8003500:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003502:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003506:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.PLL.PLLM = 25;
 8003508:	2219      	movs	r2, #25
 800350a:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 432;
 800350c:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8003510:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003512:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8003514:	2309      	movs	r3, #9
 8003516:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = 7;
 8003518:	2307      	movs	r3, #7
 800351a:	930c      	str	r3, [sp, #48]	; 0x30

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800351c:	4668      	mov	r0, sp
 800351e:	f000 fecd 	bl	80042bc <HAL_RCC_OscConfig>
  if(ret != HAL_OK) {
 8003522:	b100      	cbz	r0, 8003526 <SystemClock_Config+0x36>
    while(1) { ; }
 8003524:	e7fe      	b.n	8003524 <SystemClock_Config+0x34>
  }

  /* Activate the OverDrive to reach the 216 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
 8003526:	f000 fe8b 	bl	8004240 <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK) {
 800352a:	b100      	cbz	r0, 800352e <SystemClock_Config+0x3e>
    while(1) { ; }
 800352c:	e7fe      	b.n	800352c <SystemClock_Config+0x3c>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800352e:	230f      	movs	r3, #15
 8003530:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003532:	2302      	movs	r3, #2
 8003534:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003536:	2300      	movs	r3, #0
 8003538:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800353a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800353e:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003540:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003544:	9311      	str	r3, [sp, #68]	; 0x44

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 8003546:	2107      	movs	r1, #7
 8003548:	a80d      	add	r0, sp, #52	; 0x34
 800354a:	f001 f92d 	bl	80047a8 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK) {
 800354e:	b100      	cbz	r0, 8003552 <SystemClock_Config+0x62>
    while(1) { ; }
 8003550:	e7fe      	b.n	8003550 <SystemClock_Config+0x60>
  }
}
 8003552:	b013      	add	sp, #76	; 0x4c
 8003554:	f85d fb04 	ldr.w	pc, [sp], #4

08003558 <CPU_CACHE_Enable>:

// Enables CPU Instruction and Data Caches
void CPU_CACHE_Enable(void) {
 8003558:	b410      	push	{r4}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800355a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800355e:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8003562:	4b1c      	ldr	r3, [pc, #112]	; (80035d4 <CPU_CACHE_Enable+0x7c>)
 8003564:	2100      	movs	r1, #0
 8003566:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800356a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800356e:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8003572:	695a      	ldr	r2, [r3, #20]
 8003574:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003578:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800357a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800357e:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8003582:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003586:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800358a:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800358e:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8003592:	e000      	b.n	8003596 <CPU_CACHE_Enable+0x3e>
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
    } while(sets-- != 0U);
 8003594:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003596:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800359a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800359e:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 80035a2:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 80035a6:	490b      	ldr	r1, [pc, #44]	; (80035d4 <CPU_CACHE_Enable+0x7c>)
 80035a8:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 80035ac:	4613      	mov	r3, r2
 80035ae:	3a01      	subs	r2, #1
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1f2      	bne.n	800359a <CPU_CACHE_Enable+0x42>
    } while(sets-- != 0U);
 80035b4:	1e43      	subs	r3, r0, #1
 80035b6:	2800      	cmp	r0, #0
 80035b8:	d1ec      	bne.n	8003594 <CPU_CACHE_Enable+0x3c>
 80035ba:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80035be:	694b      	ldr	r3, [r1, #20]
 80035c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c4:	614b      	str	r3, [r1, #20]
 80035c6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80035ca:	f3bf 8f6f 	isb	sy
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 80035ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	e000ed00 	.word	0xe000ed00

080035d8 <Clock_Inits>:
	initUart(&USB_UART, 115200, USART1);
	setbuf(stdout, NULL);
}

// Initializes clocks for various peripherals. Some might need to be added!
void Clock_Inits(void) {
 80035d8:	b0a2      	sub	sp, #136	; 0x88
	// Clock all GPIO ports and Timers.
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80035da:	4b96      	ldr	r3, [pc, #600]	; (8003834 <Clock_Inits+0x25c>)
 80035dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035de:	f042 0201 	orr.w	r2, r2, #1
 80035e2:	631a      	str	r2, [r3, #48]	; 0x30
 80035e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035e6:	f002 0201 	and.w	r2, r2, #1
 80035ea:	9201      	str	r2, [sp, #4]
 80035ec:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80035ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035f0:	f042 0202 	orr.w	r2, r2, #2
 80035f4:	631a      	str	r2, [r3, #48]	; 0x30
 80035f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035f8:	f002 0202 	and.w	r2, r2, #2
 80035fc:	9202      	str	r2, [sp, #8]
 80035fe:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003600:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003602:	f042 0204 	orr.w	r2, r2, #4
 8003606:	631a      	str	r2, [r3, #48]	; 0x30
 8003608:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800360a:	f002 0204 	and.w	r2, r2, #4
 800360e:	9203      	str	r2, [sp, #12]
 8003610:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8003612:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003614:	f042 0208 	orr.w	r2, r2, #8
 8003618:	631a      	str	r2, [r3, #48]	; 0x30
 800361a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800361c:	f002 0208 	and.w	r2, r2, #8
 8003620:	9204      	str	r2, [sp, #16]
 8003622:	9a04      	ldr	r2, [sp, #16]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8003624:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003626:	f042 0210 	orr.w	r2, r2, #16
 800362a:	631a      	str	r2, [r3, #48]	; 0x30
 800362c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800362e:	f002 0210 	and.w	r2, r2, #16
 8003632:	9205      	str	r2, [sp, #20]
 8003634:	9a05      	ldr	r2, [sp, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8003636:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003638:	f042 0220 	orr.w	r2, r2, #32
 800363c:	631a      	str	r2, [r3, #48]	; 0x30
 800363e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003640:	f002 0220 	and.w	r2, r2, #32
 8003644:	9206      	str	r2, [sp, #24]
 8003646:	9a06      	ldr	r2, [sp, #24]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8003648:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800364a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800364e:	631a      	str	r2, [r3, #48]	; 0x30
 8003650:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003652:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003656:	9207      	str	r2, [sp, #28]
 8003658:	9a07      	ldr	r2, [sp, #28]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800365a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800365c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003660:	631a      	str	r2, [r3, #48]	; 0x30
 8003662:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003664:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003668:	9208      	str	r2, [sp, #32]
 800366a:	9a08      	ldr	r2, [sp, #32]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 800366c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800366e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003672:	631a      	str	r2, [r3, #48]	; 0x30
 8003674:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003676:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800367a:	9209      	str	r2, [sp, #36]	; 0x24
 800367c:	9a09      	ldr	r2, [sp, #36]	; 0x24
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 800367e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003680:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003684:	631a      	str	r2, [r3, #48]	; 0x30
 8003686:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003688:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800368c:	920a      	str	r2, [sp, #40]	; 0x28
 800368e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	__HAL_RCC_GPIOK_CLK_ENABLE();
 8003690:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003692:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003696:	631a      	str	r2, [r3, #48]	; 0x30
 8003698:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800369a:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800369e:	920b      	str	r2, [sp, #44]	; 0x2c
 80036a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 80036a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036a8:	645a      	str	r2, [r3, #68]	; 0x44
 80036aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036ac:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80036b0:	920c      	str	r2, [sp, #48]	; 0x30
 80036b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	__HAL_RCC_TIM1_CLK_ENABLE();
 80036b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036b6:	f042 0201 	orr.w	r2, r2, #1
 80036ba:	645a      	str	r2, [r3, #68]	; 0x44
 80036bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036be:	f002 0201 	and.w	r2, r2, #1
 80036c2:	920d      	str	r2, [sp, #52]	; 0x34
 80036c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	__HAL_RCC_TIM2_CLK_ENABLE();
 80036c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036c8:	f042 0201 	orr.w	r2, r2, #1
 80036cc:	641a      	str	r2, [r3, #64]	; 0x40
 80036ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036d0:	f002 0201 	and.w	r2, r2, #1
 80036d4:	920e      	str	r2, [sp, #56]	; 0x38
 80036d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	__HAL_RCC_TIM3_CLK_ENABLE();
 80036d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036da:	f042 0202 	orr.w	r2, r2, #2
 80036de:	641a      	str	r2, [r3, #64]	; 0x40
 80036e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036e2:	f002 0202 	and.w	r2, r2, #2
 80036e6:	920f      	str	r2, [sp, #60]	; 0x3c
 80036e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
	__HAL_RCC_TIM4_CLK_ENABLE();
 80036ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036ec:	f042 0204 	orr.w	r2, r2, #4
 80036f0:	641a      	str	r2, [r3, #64]	; 0x40
 80036f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036f4:	f002 0204 	and.w	r2, r2, #4
 80036f8:	9210      	str	r2, [sp, #64]	; 0x40
 80036fa:	9a10      	ldr	r2, [sp, #64]	; 0x40
	__HAL_RCC_TIM5_CLK_ENABLE();
 80036fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036fe:	f042 0208 	orr.w	r2, r2, #8
 8003702:	641a      	str	r2, [r3, #64]	; 0x40
 8003704:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003706:	f002 0208 	and.w	r2, r2, #8
 800370a:	9211      	str	r2, [sp, #68]	; 0x44
 800370c:	9a11      	ldr	r2, [sp, #68]	; 0x44
	__HAL_RCC_TIM6_CLK_ENABLE();
 800370e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003710:	f042 0210 	orr.w	r2, r2, #16
 8003714:	641a      	str	r2, [r3, #64]	; 0x40
 8003716:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003718:	f002 0210 	and.w	r2, r2, #16
 800371c:	9212      	str	r2, [sp, #72]	; 0x48
 800371e:	9a12      	ldr	r2, [sp, #72]	; 0x48
	__HAL_RCC_TIM7_CLK_ENABLE();
 8003720:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003722:	f042 0220 	orr.w	r2, r2, #32
 8003726:	641a      	str	r2, [r3, #64]	; 0x40
 8003728:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800372a:	f002 0220 	and.w	r2, r2, #32
 800372e:	9213      	str	r2, [sp, #76]	; 0x4c
 8003730:	9a13      	ldr	r2, [sp, #76]	; 0x4c
	__HAL_RCC_TIM8_CLK_ENABLE();
 8003732:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003734:	f042 0202 	orr.w	r2, r2, #2
 8003738:	645a      	str	r2, [r3, #68]	; 0x44
 800373a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800373c:	f002 0202 	and.w	r2, r2, #2
 8003740:	9214      	str	r2, [sp, #80]	; 0x50
 8003742:	9a14      	ldr	r2, [sp, #80]	; 0x50
	__HAL_RCC_TIM9_CLK_ENABLE();
 8003744:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003746:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800374a:	645a      	str	r2, [r3, #68]	; 0x44
 800374c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800374e:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8003752:	9215      	str	r2, [sp, #84]	; 0x54
 8003754:	9a15      	ldr	r2, [sp, #84]	; 0x54
	__HAL_RCC_TIM10_CLK_ENABLE();
 8003756:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003758:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800375c:	645a      	str	r2, [r3, #68]	; 0x44
 800375e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003760:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003764:	9216      	str	r2, [sp, #88]	; 0x58
 8003766:	9a16      	ldr	r2, [sp, #88]	; 0x58
	__HAL_RCC_TIM11_CLK_ENABLE();
 8003768:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800376a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800376e:	645a      	str	r2, [r3, #68]	; 0x44
 8003770:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003772:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8003776:	9217      	str	r2, [sp, #92]	; 0x5c
 8003778:	9a17      	ldr	r2, [sp, #92]	; 0x5c
	__HAL_RCC_TIM12_CLK_ENABLE();
 800377a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800377c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003780:	641a      	str	r2, [r3, #64]	; 0x40
 8003782:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003784:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003788:	9218      	str	r2, [sp, #96]	; 0x60
 800378a:	9a18      	ldr	r2, [sp, #96]	; 0x60
	__HAL_RCC_TIM13_CLK_ENABLE();
 800378c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800378e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003792:	641a      	str	r2, [r3, #64]	; 0x40
 8003794:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003796:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800379a:	9219      	str	r2, [sp, #100]	; 0x64
 800379c:	9a19      	ldr	r2, [sp, #100]	; 0x64
	__HAL_RCC_TIM14_CLK_ENABLE();
 800379e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037a4:	641a      	str	r2, [r3, #64]	; 0x40
 80037a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037a8:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80037ac:	921a      	str	r2, [sp, #104]	; 0x68
 80037ae:	9a1a      	ldr	r2, [sp, #104]	; 0x68

	// Enable SPI2 clock
	__HAL_RCC_SPI2_CLK_ENABLE();
 80037b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037b6:	641a      	str	r2, [r3, #64]	; 0x40
 80037b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037ba:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80037be:	921b      	str	r2, [sp, #108]	; 0x6c
 80037c0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c

	// ADC and DAC
	__HAL_RCC_DAC_CLK_ENABLE();
 80037c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037c4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80037c8:	641a      	str	r2, [r3, #64]	; 0x40
 80037ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037cc:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 80037d0:	921c      	str	r2, [sp, #112]	; 0x70
 80037d2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
	__HAL_RCC_ADC1_CLK_ENABLE();
 80037d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037da:	645a      	str	r2, [r3, #68]	; 0x44
 80037dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037de:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80037e2:	921d      	str	r2, [sp, #116]	; 0x74
 80037e4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
	__HAL_RCC_ADC2_CLK_ENABLE();
 80037e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ec:	645a      	str	r2, [r3, #68]	; 0x44
 80037ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037f0:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80037f4:	921e      	str	r2, [sp, #120]	; 0x78
 80037f6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
	__HAL_RCC_ADC3_CLK_ENABLE();
 80037f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037fe:	645a      	str	r2, [r3, #68]	; 0x44
 8003800:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003802:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8003806:	921f      	str	r2, [sp, #124]	; 0x7c
 8003808:	9a1f      	ldr	r2, [sp, #124]	; 0x7c

	// DMA Clocks
	__HAL_RCC_DMA1_CLK_ENABLE();
 800380a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800380c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003810:	631a      	str	r2, [r3, #48]	; 0x30
 8003812:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003814:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003818:	9220      	str	r2, [sp, #128]	; 0x80
 800381a:	9a20      	ldr	r2, [sp, #128]	; 0x80
	__HAL_RCC_DMA2_CLK_ENABLE();
 800381c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800381e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003822:	631a      	str	r2, [r3, #48]	; 0x30
 8003824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800382a:	9321      	str	r3, [sp, #132]	; 0x84
 800382c:	9b21      	ldr	r3, [sp, #132]	; 0x84

}
 800382e:	b022      	add	sp, #136	; 0x88
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	40023800 	.word	0x40023800

08003838 <Sys_Init>:
void Sys_Init(void) {
 8003838:	b508      	push	{r3, lr}
	CPU_CACHE_Enable();		// Enable CPU Caching
 800383a:	f7ff fe8d 	bl	8003558 <CPU_CACHE_Enable>
	HAL_Init();				// Initialize HAL
 800383e:	f000 fb11 	bl	8003e64 <HAL_Init>
	SystemClock_Config(); 	// Configure the system clock to 216 MHz
 8003842:	f7ff fe55 	bl	80034f0 <SystemClock_Config>
	Clock_Inits();
 8003846:	f7ff fec7 	bl	80035d8 <Clock_Inits>
	initUart(&USB_UART, 115200, USART1);
 800384a:	4a06      	ldr	r2, [pc, #24]	; (8003864 <Sys_Init+0x2c>)
 800384c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8003850:	4805      	ldr	r0, [pc, #20]	; (8003868 <Sys_Init+0x30>)
 8003852:	f000 faa7 	bl	8003da4 <initUart>
	setbuf(stdout, NULL);
 8003856:	4b05      	ldr	r3, [pc, #20]	; (800386c <Sys_Init+0x34>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2100      	movs	r1, #0
 800385c:	6898      	ldr	r0, [r3, #8]
 800385e:	f002 fa77 	bl	8005d50 <setbuf>
}
 8003862:	bd08      	pop	{r3, pc}
 8003864:	40011000 	.word	0x40011000
 8003868:	20004a4c 	.word	0x20004a4c
 800386c:	20000068 	.word	0x20000068

08003870 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003870:	b500      	push	{lr}
 8003872:	b089      	sub	sp, #36	; 0x24
 8003874:	4601      	mov	r1, r0
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8003876:	2200      	movs	r2, #0
 8003878:	2037      	movs	r0, #55	; 0x37
 800387a:	f000 fb2d 	bl	8003ed8 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800387e:	2037      	movs	r0, #55	; 0x37
 8003880:	f000 fb60 	bl	8003f44 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8003884:	4b15      	ldr	r3, [pc, #84]	; (80038dc <HAL_InitTick+0x6c>)
 8003886:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003888:	f042 0220 	orr.w	r2, r2, #32
 800388c:	641a      	str	r2, [r3, #64]	; 0x40
 800388e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003890:	f003 0320 	and.w	r3, r3, #32
 8003894:	9301      	str	r3, [sp, #4]
 8003896:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003898:	a902      	add	r1, sp, #8
 800389a:	a803      	add	r0, sp, #12
 800389c:	f001 f860 	bl	8004960 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80038a0:	f001 f83e 	bl	8004920 <HAL_RCC_GetPCLK1Freq>
 80038a4:	0043      	lsls	r3, r0, #1

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80038a6:	4a0e      	ldr	r2, [pc, #56]	; (80038e0 <HAL_InitTick+0x70>)
 80038a8:	fba2 2303 	umull	r2, r3, r2, r3
 80038ac:	0c9b      	lsrs	r3, r3, #18
 80038ae:	3b01      	subs	r3, #1

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80038b0:	480c      	ldr	r0, [pc, #48]	; (80038e4 <HAL_InitTick+0x74>)
 80038b2:	4a0d      	ldr	r2, [pc, #52]	; (80038e8 <HAL_InitTick+0x78>)
 80038b4:	6002      	str	r2, [r0, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 80038b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80038ba:	60c2      	str	r2, [r0, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80038bc:	6043      	str	r3, [r0, #4]
  htim7.Init.ClockDivision = 0;
 80038be:	2300      	movs	r3, #0
 80038c0:	6103      	str	r3, [r0, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038c2:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 80038c4:	f001 fa0e 	bl	8004ce4 <HAL_TIM_Base_Init>
 80038c8:	b118      	cbz	r0, 80038d2 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
  }

  /* Return function status */
  return HAL_ERROR;
 80038ca:	2001      	movs	r0, #1
}
 80038cc:	b009      	add	sp, #36	; 0x24
 80038ce:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim7);
 80038d2:	4804      	ldr	r0, [pc, #16]	; (80038e4 <HAL_InitTick+0x74>)
 80038d4:	f001 f864 	bl	80049a0 <HAL_TIM_Base_Start_IT>
 80038d8:	e7f8      	b.n	80038cc <HAL_InitTick+0x5c>
 80038da:	bf00      	nop
 80038dc:	40023800 	.word	0x40023800
 80038e0:	431bde83 	.word	0x431bde83
 80038e4:	200049d0 	.word	0x200049d0
 80038e8:	40001400 	.word	0x40001400

080038ec <TIM7_IRQHandler>:
  /* Enable TIM7 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim7, TIM_IT_UPDATE);
}

void TIM7_IRQHandler(void)
{
 80038ec:	b508      	push	{r3, lr}
  HAL_TIM_IRQHandler(&htim7);
 80038ee:	4802      	ldr	r0, [pc, #8]	; (80038f8 <TIM7_IRQHandler+0xc>)
 80038f0:	f001 f8a2 	bl	8004a38 <HAL_TIM_IRQHandler>
}
 80038f4:	bd08      	pop	{r3, pc}
 80038f6:	bf00      	nop
 80038f8:	200049d0 	.word	0x200049d0

080038fc <LED1_Thread>:
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

}

// This is the thread function
void LED1_Thread(void *argument) {
 80038fc:	b508      	push	{r3, lr}
	while (1) {
		osMutexAcquire(LED1Mutex, osWaitForever);
 80038fe:	4c09      	ldr	r4, [pc, #36]	; (8003924 <LED1_Thread+0x28>)
 8003900:	f04f 31ff 	mov.w	r1, #4294967295
 8003904:	6820      	ldr	r0, [r4, #0]
 8003906:	f7fd f93d 	bl	8000b84 <osMutexAcquire>
		HAL_GPIO_TogglePin(GPIOJ, GPIO_PIN_13);
 800390a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800390e:	4806      	ldr	r0, [pc, #24]	; (8003928 <LED1_Thread+0x2c>)
 8003910:	f000 fc8c 	bl	800422c <HAL_GPIO_TogglePin>
		osMutexRelease(LED1Mutex);
 8003914:	6820      	ldr	r0, [r4, #0]
 8003916:	f7fd f973 	bl	8000c00 <osMutexRelease>
		osDelay(250);
 800391a:	20fa      	movs	r0, #250	; 0xfa
 800391c:	f7fc ffd6 	bl	80008cc <osDelay>
	while (1) {
 8003920:	e7ed      	b.n	80038fe <LED1_Thread+0x2>
 8003922:	bf00      	nop
 8003924:	20004a1c 	.word	0x20004a1c
 8003928:	40022400 	.word	0x40022400

0800392c <LED2_Thread>:
	}
}

void LED2_Thread(void *argument) {
 800392c:	b508      	push	{r3, lr}
	while (1) {
		HAL_GPIO_TogglePin(GPIOJ, GPIO_PIN_5);
 800392e:	2120      	movs	r1, #32
 8003930:	4803      	ldr	r0, [pc, #12]	; (8003940 <LED2_Thread+0x14>)
 8003932:	f000 fc7b 	bl	800422c <HAL_GPIO_TogglePin>
		osDelay(500);
 8003936:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800393a:	f7fc ffc7 	bl	80008cc <osDelay>
	while (1) {
 800393e:	e7f6      	b.n	800392e <LED2_Thread+0x2>
 8003940:	40022400 	.word	0x40022400

08003944 <LED3_Thread>:
	}
}

void LED3_Thread(void *argument) {
 8003944:	b508      	push	{r3, lr}
	//PA0 button interrupt
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003946:	2006      	movs	r0, #6
 8003948:	f000 fafc 	bl	8003f44 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI0_IRQn, 7, 1);
 800394c:	2201      	movs	r2, #1
 800394e:	2107      	movs	r1, #7
 8003950:	2006      	movs	r0, #6
 8003952:	f000 fac1 	bl	8003ed8 <HAL_NVIC_SetPriority>
	while (1) {
		osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever); // Wait forever until thread flag 1 is set.
 8003956:	f04f 32ff 	mov.w	r2, #4294967295
 800395a:	2100      	movs	r1, #0
 800395c:	2001      	movs	r0, #1
 800395e:	f7fc ff4f 	bl	8000800 <osThreadFlagsWait>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8003962:	4c0a      	ldr	r4, [pc, #40]	; (800398c <LED3_Thread+0x48>)
 8003964:	2201      	movs	r2, #1
 8003966:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800396a:	4620      	mov	r0, r4
 800396c:	f000 fc58 	bl	8004220 <HAL_GPIO_WritePin>

		osThreadFlagsWait(0x00000011U, osFlagsWaitAny, osWaitForever); // Wait forever until thread flag 0 is set.
 8003970:	f04f 32ff 	mov.w	r2, #4294967295
 8003974:	2100      	movs	r1, #0
 8003976:	2011      	movs	r0, #17
 8003978:	f7fc ff42 	bl	8000800 <osThreadFlagsWait>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800397c:	2200      	movs	r2, #0
 800397e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003982:	4620      	mov	r0, r4
 8003984:	f000 fc4c 	bl	8004220 <HAL_GPIO_WritePin>
	while (1) {
 8003988:	e7e5      	b.n	8003956 <LED3_Thread+0x12>
 800398a:	bf00      	nop
 800398c:	40020000 	.word	0x40020000

08003990 <timerCallback>:
		osThreadFlagsWait(0x00000010U, osFlagsWaitAny, osWaitForever);
		puts("+");
	}
}

void timerCallback() {
 8003990:	b510      	push	{r4, lr}
	status = osThreadFlagsSet(TimerThreadHandle, 0x00000010U);
 8003992:	4c03      	ldr	r4, [pc, #12]	; (80039a0 <timerCallback+0x10>)
 8003994:	2110      	movs	r1, #16
 8003996:	6860      	ldr	r0, [r4, #4]
 8003998:	f7fc fe86 	bl	80006a8 <osThreadFlagsSet>
 800399c:	60a0      	str	r0, [r4, #8]
}
 800399e:	bd10      	pop	{r4, pc}
 80039a0:	20004a1c 	.word	0x20004a1c

080039a4 <Timer_Thread>:
void Timer_Thread(void *argument) {
 80039a4:	b508      	push	{r3, lr}
	osTimerStart(tim1_handle, 2000);
 80039a6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80039aa:	4b07      	ldr	r3, [pc, #28]	; (80039c8 <Timer_Thread+0x24>)
 80039ac:	68d8      	ldr	r0, [r3, #12]
 80039ae:	f7fd f803 	bl	80009b8 <osTimerStart>
		osThreadFlagsWait(0x00000010U, osFlagsWaitAny, osWaitForever);
 80039b2:	f04f 32ff 	mov.w	r2, #4294967295
 80039b6:	2100      	movs	r1, #0
 80039b8:	2010      	movs	r0, #16
 80039ba:	f7fc ff21 	bl	8000800 <osThreadFlagsWait>
		puts("+");
 80039be:	4803      	ldr	r0, [pc, #12]	; (80039cc <Timer_Thread+0x28>)
 80039c0:	f002 f9be 	bl	8005d40 <puts>
	while (1) {
 80039c4:	e7f5      	b.n	80039b2 <Timer_Thread+0xe>
 80039c6:	bf00      	nop
 80039c8:	20004a1c 	.word	0x20004a1c
 80039cc:	080067f4 	.word	0x080067f4

080039d0 <LED1_ERROR_Thread>:

void LED1_ERROR_Thread(void *argument) {
 80039d0:	b508      	push	{r3, lr}
	while (1) {
		osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 80039d2:	f04f 32ff 	mov.w	r2, #4294967295
 80039d6:	2100      	movs	r1, #0
 80039d8:	2001      	movs	r0, #1
 80039da:	f7fc ff11 	bl	8000800 <osThreadFlagsWait>
		osThreadFlagsClear(0x00000001U);
 80039de:	2001      	movs	r0, #1
 80039e0:	f7fc feae 	bl	8000740 <osThreadFlagsClear>
		osMutexAcquire(LED1Mutex, osWaitForever); // try to acquire mutex
 80039e4:	f04f 31ff 	mov.w	r1, #4294967295
 80039e8:	4b0c      	ldr	r3, [pc, #48]	; (8003a1c <LED1_ERROR_Thread+0x4c>)
 80039ea:	6818      	ldr	r0, [r3, #0]
 80039ec:	f7fd f8ca 	bl	8000b84 <osMutexAcquire>
		while (1) {
			HAL_GPIO_TogglePin(GPIOJ, GPIO_PIN_13);
 80039f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80039f4:	480a      	ldr	r0, [pc, #40]	; (8003a20 <LED1_ERROR_Thread+0x50>)
 80039f6:	f000 fc19 	bl	800422c <HAL_GPIO_TogglePin>
			osDelay(100);
 80039fa:	2064      	movs	r0, #100	; 0x64
 80039fc:	f7fc ff66 	bl	80008cc <osDelay>
			if (osThreadFlagsGet() & 0x00000010U) {
 8003a00:	f7fc fed8 	bl	80007b4 <osThreadFlagsGet>
 8003a04:	f010 0f10 	tst.w	r0, #16
 8003a08:	d0f2      	beq.n	80039f0 <LED1_ERROR_Thread+0x20>
				break;
			}
		}
		osThreadFlagsClear(0x00000011U);
 8003a0a:	2011      	movs	r0, #17
 8003a0c:	f7fc fe98 	bl	8000740 <osThreadFlagsClear>
		osMutexRelease(LED1Mutex);
 8003a10:	4b02      	ldr	r3, [pc, #8]	; (8003a1c <LED1_ERROR_Thread+0x4c>)
 8003a12:	6818      	ldr	r0, [r3, #0]
 8003a14:	f7fd f8f4 	bl	8000c00 <osMutexRelease>
		osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 8003a18:	e7db      	b.n	80039d2 <LED1_ERROR_Thread+0x2>
 8003a1a:	bf00      	nop
 8003a1c:	20004a1c 	.word	0x20004a1c
 8003a20:	40022400 	.word	0x40022400

08003a24 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003a24:	b508      	push	{r3, lr}
	if (htim->Instance == TIM7) {
 8003a26:	6802      	ldr	r2, [r0, #0]
 8003a28:	4b03      	ldr	r3, [pc, #12]	; (8003a38 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d000      	beq.n	8003a30 <HAL_TIM_PeriodElapsedCallback+0xc>
}
 8003a2e:	bd08      	pop	{r3, pc}
		HAL_IncTick();
 8003a30:	f000 fa2e 	bl	8003e90 <HAL_IncTick>
}
 8003a34:	e7fb      	b.n	8003a2e <HAL_TIM_PeriodElapsedCallback+0xa>
 8003a36:	bf00      	nop
 8003a38:	40001400 	.word	0x40001400

08003a3c <USART1_IRQHandler>:
void USART1_IRQHandler(void) {
 8003a3c:	b508      	push	{r3, lr}
	HAL_UART_IRQHandler(&USB_UART);
 8003a3e:	4802      	ldr	r0, [pc, #8]	; (8003a48 <USART1_IRQHandler+0xc>)
 8003a40:	f001 fb06 	bl	8005050 <HAL_UART_IRQHandler>
}
 8003a44:	bd08      	pop	{r3, pc}
 8003a46:	bf00      	nop
 8003a48:	20004a4c 	.word	0x20004a4c

08003a4c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003a4c:	b538      	push	{r3, r4, r5, lr}
	HAL_UART_Receive_IT(&USB_UART, &buffer, 1);
 8003a4e:	4c07      	ldr	r4, [pc, #28]	; (8003a6c <HAL_UART_RxCpltCallback+0x20>)
 8003a50:	f104 0510 	add.w	r5, r4, #16
 8003a54:	2201      	movs	r2, #1
 8003a56:	4629      	mov	r1, r5
 8003a58:	4805      	ldr	r0, [pc, #20]	; (8003a70 <HAL_UART_RxCpltCallback+0x24>)
 8003a5a:	f002 f833 	bl	8005ac4 <HAL_UART_Receive_IT>
	osMessageQueuePut(uartQueueHandle, &buffer, 0U, 0U);
 8003a5e:	2300      	movs	r3, #0
 8003a60:	461a      	mov	r2, r3
 8003a62:	4629      	mov	r1, r5
 8003a64:	6960      	ldr	r0, [r4, #20]
 8003a66:	f7fd f95b 	bl	8000d20 <osMessageQueuePut>
}
 8003a6a:	bd38      	pop	{r3, r4, r5, pc}
 8003a6c:	20004a1c 	.word	0x20004a1c
 8003a70:	20004a4c 	.word	0x20004a4c

08003a74 <GPIO_Init>:
void GPIO_Init() {
 8003a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a78:	b08a      	sub	sp, #40	; 0x28
	GPIO_InitTypeDef GPIO_InitType = { .Mode = GPIO_MODE_OUTPUT_PP, .Pull =
 8003a7a:	2400      	movs	r4, #0
 8003a7c:	9405      	str	r4, [sp, #20]
 8003a7e:	9406      	str	r4, [sp, #24]
 8003a80:	9407      	str	r4, [sp, #28]
 8003a82:	9408      	str	r4, [sp, #32]
 8003a84:	9409      	str	r4, [sp, #36]	; 0x24
 8003a86:	2501      	movs	r5, #1
 8003a88:	9506      	str	r5, [sp, #24]
 8003a8a:	9507      	str	r5, [sp, #28]
 8003a8c:	9508      	str	r5, [sp, #32]
	GPIO_InitType.Pin = GPIO_PIN_13;
 8003a8e:	f44f 5900 	mov.w	r9, #8192	; 0x2000
 8003a92:	f8cd 9014 	str.w	r9, [sp, #20]
	HAL_GPIO_Init(GPIOJ, &GPIO_InitType);
 8003a96:	4e1a      	ldr	r6, [pc, #104]	; (8003b00 <GPIO_Init+0x8c>)
 8003a98:	a905      	add	r1, sp, #20
 8003a9a:	4630      	mov	r0, r6
 8003a9c:	f000 fabe 	bl	800401c <HAL_GPIO_Init>
	GPIO_InitType.Pin = GPIO_PIN_5;
 8003aa0:	f04f 0a20 	mov.w	sl, #32
 8003aa4:	f8cd a014 	str.w	sl, [sp, #20]
	HAL_GPIO_Init(GPIOJ, &GPIO_InitType);
 8003aa8:	a905      	add	r1, sp, #20
 8003aaa:	4630      	mov	r0, r6
 8003aac:	f000 fab6 	bl	800401c <HAL_GPIO_Init>
	GPIO_InitType.Pin = GPIO_PIN_12;
 8003ab0:	f44f 5880 	mov.w	r8, #4096	; 0x1000
 8003ab4:	f8cd 8014 	str.w	r8, [sp, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitType);
 8003ab8:	4f12      	ldr	r7, [pc, #72]	; (8003b04 <GPIO_Init+0x90>)
 8003aba:	a905      	add	r1, sp, #20
 8003abc:	4638      	mov	r0, r7
 8003abe:	f000 faad 	bl	800401c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_5, GPIO_PIN_RESET);
 8003ac2:	4622      	mov	r2, r4
 8003ac4:	4651      	mov	r1, sl
 8003ac6:	4630      	mov	r0, r6
 8003ac8:	f000 fbaa 	bl	8004220 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_13, GPIO_PIN_RESET);
 8003acc:	4622      	mov	r2, r4
 8003ace:	4649      	mov	r1, r9
 8003ad0:	4630      	mov	r0, r6
 8003ad2:	f000 fba5 	bl	8004220 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8003ad6:	4622      	mov	r2, r4
 8003ad8:	4641      	mov	r1, r8
 8003ada:	4638      	mov	r0, r7
 8003adc:	f000 fba0 	bl	8004220 <HAL_GPIO_WritePin>
	GPIO_InitTypeDef GPIO_InitStruct = { .Pin = GPIO_PIN_0, .Mode =
 8003ae0:	9400      	str	r4, [sp, #0]
 8003ae2:	9401      	str	r4, [sp, #4]
 8003ae4:	9402      	str	r4, [sp, #8]
 8003ae6:	9403      	str	r4, [sp, #12]
 8003ae8:	9404      	str	r4, [sp, #16]
 8003aea:	9500      	str	r5, [sp, #0]
 8003aec:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8003af0:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003af2:	4669      	mov	r1, sp
 8003af4:	4638      	mov	r0, r7
 8003af6:	f000 fa91 	bl	800401c <HAL_GPIO_Init>
}
 8003afa:	b00a      	add	sp, #40	; 0x28
 8003afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b00:	40022400 	.word	0x40022400
 8003b04:	40020000 	.word	0x40020000

08003b08 <main>:
int main(void) {
 8003b08:	b538      	push	{r3, r4, r5, lr}
	Sys_Init();
 8003b0a:	f7ff fe95 	bl	8003838 <Sys_Init>
	GPIO_Init();
 8003b0e:	f7ff ffb1 	bl	8003a74 <GPIO_Init>
	osKernelInitialize();
 8003b12:	f7fc fd1b 	bl	800054c <osKernelInitialize>
	LED1ThreadHandle = osThreadNew(LED1_Thread, NULL, &LED1_Thread_attributes);
 8003b16:	4d26      	ldr	r5, [pc, #152]	; (8003bb0 <main+0xa8>)
 8003b18:	462a      	mov	r2, r5
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	4825      	ldr	r0, [pc, #148]	; (8003bb4 <main+0xac>)
 8003b1e:	f7fc fd57 	bl	80005d0 <osThreadNew>
 8003b22:	4c25      	ldr	r4, [pc, #148]	; (8003bb8 <main+0xb0>)
 8003b24:	61a0      	str	r0, [r4, #24]
	LED2ThreadHandle = osThreadNew(LED2_Thread, NULL, &LED2_Thread_attributes);
 8003b26:	f105 0224 	add.w	r2, r5, #36	; 0x24
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	4823      	ldr	r0, [pc, #140]	; (8003bbc <main+0xb4>)
 8003b2e:	f7fc fd4f 	bl	80005d0 <osThreadNew>
 8003b32:	61e0      	str	r0, [r4, #28]
	LED3ThreadHandle = osThreadNew(LED3_Thread, NULL, &LED3_Thread_attributes);
 8003b34:	f105 0248 	add.w	r2, r5, #72	; 0x48
 8003b38:	2100      	movs	r1, #0
 8003b3a:	4821      	ldr	r0, [pc, #132]	; (8003bc0 <main+0xb8>)
 8003b3c:	f7fc fd48 	bl	80005d0 <osThreadNew>
 8003b40:	6220      	str	r0, [r4, #32]
	LED1ERRORThreadHandle = osThreadNew(LED1_ERROR_Thread, NULL,
 8003b42:	f105 026c 	add.w	r2, r5, #108	; 0x6c
 8003b46:	2100      	movs	r1, #0
 8003b48:	481e      	ldr	r0, [pc, #120]	; (8003bc4 <main+0xbc>)
 8003b4a:	f7fc fd41 	bl	80005d0 <osThreadNew>
 8003b4e:	6260      	str	r0, [r4, #36]	; 0x24
	TimerThreadHandle = osThreadNew(Timer_Thread, NULL,
 8003b50:	f105 0290 	add.w	r2, r5, #144	; 0x90
 8003b54:	2100      	movs	r1, #0
 8003b56:	481c      	ldr	r0, [pc, #112]	; (8003bc8 <main+0xc0>)
 8003b58:	f7fc fd3a 	bl	80005d0 <osThreadNew>
 8003b5c:	6060      	str	r0, [r4, #4]
	UART_ThreadHandle = osThreadNew(UART_Thread, NULL, &UART_Thread_attributes);
 8003b5e:	f105 02b4 	add.w	r2, r5, #180	; 0xb4
 8003b62:	2100      	movs	r1, #0
 8003b64:	4819      	ldr	r0, [pc, #100]	; (8003bcc <main+0xc4>)
 8003b66:	f7fc fd33 	bl	80005d0 <osThreadNew>
 8003b6a:	62a0      	str	r0, [r4, #40]	; 0x28
	uartQueueHandle = osMessageQueueNew(1, sizeof(uint8_t),
 8003b6c:	f105 02d8 	add.w	r2, r5, #216	; 0xd8
 8003b70:	2101      	movs	r1, #1
 8003b72:	4608      	mov	r0, r1
 8003b74:	f7fd f87a 	bl	8000c6c <osMessageQueueNew>
 8003b78:	6160      	str	r0, [r4, #20]
	pushButtonFlag = osEventFlagsNew(NULL);
 8003b7a:	2000      	movs	r0, #0
 8003b7c:	f7fc ff46 	bl	8000a0c <osEventFlagsNew>
 8003b80:	62e0      	str	r0, [r4, #44]	; 0x2c
	tim1_handle = osTimerNew(timerCallback, osTimerPeriodic, NULL,
 8003b82:	f105 03f0 	add.w	r3, r5, #240	; 0xf0
 8003b86:	2200      	movs	r2, #0
 8003b88:	2101      	movs	r1, #1
 8003b8a:	4811      	ldr	r0, [pc, #68]	; (8003bd0 <main+0xc8>)
 8003b8c:	f7fc febc 	bl	8000908 <osTimerNew>
 8003b90:	60e0      	str	r0, [r4, #12]
	if (pushButtonFlag == NULL) {
 8003b92:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003b94:	b113      	cbz	r3, 8003b9c <main+0x94>
	osKernelStart();
 8003b96:	f7fc fcf7 	bl	8000588 <osKernelStart>
	while (1) {
 8003b9a:	e7fe      	b.n	8003b9a <main+0x92>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET); // DEBUG
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ba2:	480c      	ldr	r0, [pc, #48]	; (8003bd4 <main+0xcc>)
 8003ba4:	f000 fb3c 	bl	8004220 <HAL_GPIO_WritePin>
}
 8003ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bac:	bd38      	pop	{r3, r4, r5, pc}
 8003bae:	bf00      	nop
 8003bb0:	080066a4 	.word	0x080066a4
 8003bb4:	080038fd 	.word	0x080038fd
 8003bb8:	20004a1c 	.word	0x20004a1c
 8003bbc:	0800392d 	.word	0x0800392d
 8003bc0:	08003945 	.word	0x08003945
 8003bc4:	080039d1 	.word	0x080039d1
 8003bc8:	080039a5 	.word	0x080039a5
 8003bcc:	08003c05 	.word	0x08003c05
 8003bd0:	08003991 	.word	0x08003991
 8003bd4:	40020000 	.word	0x40020000

08003bd8 <UART_init>:
void UART_init() {
 8003bd8:	b508      	push	{r3, lr}
	USB_UART_ptr->Instance = USART1;
 8003bda:	4808      	ldr	r0, [pc, #32]	; (8003bfc <UART_init+0x24>)
 8003bdc:	4b08      	ldr	r3, [pc, #32]	; (8003c00 <UART_init+0x28>)
 8003bde:	6003      	str	r3, [r0, #0]
	USB_UART_ptr->Init.BaudRate = 115200;
 8003be0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003be4:	6043      	str	r3, [r0, #4]
	USB_UART_ptr->Init.WordLength = UART_WORDLENGTH_8B;
 8003be6:	2300      	movs	r3, #0
 8003be8:	6083      	str	r3, [r0, #8]
	USB_UART_ptr->Init.StopBits = UART_STOPBITS_1;
 8003bea:	60c3      	str	r3, [r0, #12]
	USB_UART_ptr->Init.Parity = UART_PARITY_NONE;
 8003bec:	6103      	str	r3, [r0, #16]
	USB_UART_ptr->Init.Mode = UART_MODE_TX_RX;
 8003bee:	220c      	movs	r2, #12
 8003bf0:	6142      	str	r2, [r0, #20]
	USB_UART_ptr->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bf2:	6183      	str	r3, [r0, #24]
	HAL_UART_Init(&USB_UART);
 8003bf4:	f001 feca 	bl	800598c <HAL_UART_Init>
}
 8003bf8:	bd08      	pop	{r3, pc}
 8003bfa:	bf00      	nop
 8003bfc:	20004a4c 	.word	0x20004a4c
 8003c00:	40011000 	.word	0x40011000

08003c04 <UART_Thread>:
void UART_Thread(void *argument) {
 8003c04:	b500      	push	{lr}
 8003c06:	b083      	sub	sp, #12
	UART_init();
 8003c08:	f7ff ffe6 	bl	8003bd8 <UART_init>
	HAL_UART_Receive_IT(&USB_UART, &buffer, 1);
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	4922      	ldr	r1, [pc, #136]	; (8003c98 <UART_Thread+0x94>)
 8003c10:	4822      	ldr	r0, [pc, #136]	; (8003c9c <UART_Thread+0x98>)
 8003c12:	f001 ff57 	bl	8005ac4 <HAL_UART_Receive_IT>
 8003c16:	e01b      	b.n	8003c50 <UART_Thread+0x4c>
				status = osThreadFlagsSet(LED1ERRORThreadHandle, 0x00000001U);
 8003c18:	4c21      	ldr	r4, [pc, #132]	; (8003ca0 <UART_Thread+0x9c>)
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003c1e:	f7fc fd43 	bl	80006a8 <osThreadFlagsSet>
 8003c22:	60a0      	str	r0, [r4, #8]
 8003c24:	e023      	b.n	8003c6e <UART_Thread+0x6a>
				status = osThreadFlagsSet(LED1ERRORThreadHandle, 0x00000011U);
 8003c26:	4c1e      	ldr	r4, [pc, #120]	; (8003ca0 <UART_Thread+0x9c>)
 8003c28:	2111      	movs	r1, #17
 8003c2a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003c2c:	f7fc fd3c 	bl	80006a8 <osThreadFlagsSet>
 8003c30:	60a0      	str	r0, [r4, #8]
 8003c32:	e020      	b.n	8003c76 <UART_Thread+0x72>
				status = osThreadFlagsSet(LED3ThreadHandle, 0x00000010U);
 8003c34:	4c1a      	ldr	r4, [pc, #104]	; (8003ca0 <UART_Thread+0x9c>)
 8003c36:	2110      	movs	r1, #16
 8003c38:	6a20      	ldr	r0, [r4, #32]
 8003c3a:	f7fc fd35 	bl	80006a8 <osThreadFlagsSet>
 8003c3e:	60a0      	str	r0, [r4, #8]
				osEventFlagsClear(pushButtonFlag, 0x1);
 8003c40:	2101      	movs	r1, #1
 8003c42:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003c44:	f7fc ff50 	bl	8000ae8 <osEventFlagsClear>
			printf("%c", to_print);
 8003c48:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8003c4c:	f002 f81c 	bl	8005c88 <putchar>
		if (osMessageQueueGet(uartQueueHandle, &to_print, NULL, osWaitForever)
 8003c50:	f04f 33ff 	mov.w	r3, #4294967295
 8003c54:	2200      	movs	r2, #0
 8003c56:	f10d 0107 	add.w	r1, sp, #7
 8003c5a:	4811      	ldr	r0, [pc, #68]	; (8003ca0 <UART_Thread+0x9c>)
 8003c5c:	6940      	ldr	r0, [r0, #20]
 8003c5e:	f7fd f8ab 	bl	8000db8 <osMessageQueueGet>
 8003c62:	2800      	cmp	r0, #0
 8003c64:	d1f4      	bne.n	8003c50 <UART_Thread+0x4c>
			if (to_print == 'e') {
 8003c66:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003c6a:	2b65      	cmp	r3, #101	; 0x65
 8003c6c:	d0d4      	beq.n	8003c18 <UART_Thread+0x14>
			if (to_print == 'n') {
 8003c6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003c72:	2b6e      	cmp	r3, #110	; 0x6e
 8003c74:	d0d7      	beq.n	8003c26 <UART_Thread+0x22>
			if (to_print == 'j'
 8003c76:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003c7a:	2b6a      	cmp	r3, #106	; 0x6a
 8003c7c:	d1da      	bne.n	8003c34 <UART_Thread+0x30>
					&& (osEventFlagsGet(pushButtonFlag) == 0x00000001U)) {
 8003c7e:	4b08      	ldr	r3, [pc, #32]	; (8003ca0 <UART_Thread+0x9c>)
 8003c80:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003c82:	f7fc ff61 	bl	8000b48 <osEventFlagsGet>
 8003c86:	2801      	cmp	r0, #1
 8003c88:	d1d4      	bne.n	8003c34 <UART_Thread+0x30>
				status = osThreadFlagsSet(LED3ThreadHandle, 0x00000001U);
 8003c8a:	4c05      	ldr	r4, [pc, #20]	; (8003ca0 <UART_Thread+0x9c>)
 8003c8c:	2101      	movs	r1, #1
 8003c8e:	6a20      	ldr	r0, [r4, #32]
 8003c90:	f7fc fd0a 	bl	80006a8 <osThreadFlagsSet>
 8003c94:	60a0      	str	r0, [r4, #8]
 8003c96:	e7d7      	b.n	8003c48 <UART_Thread+0x44>
 8003c98:	20004a2c 	.word	0x20004a2c
 8003c9c:	20004a4c 	.word	0x20004a4c
 8003ca0:	20004a1c 	.word	0x20004a1c

08003ca4 <EXTI0_IRQHandler>:
	}
}

void EXTI0_IRQHandler(void) {
 8003ca4:	b508      	push	{r3, lr}
	// When External interrupt 0 happened
	// Set flag here [EVENT]
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);  // Clear the interrupt flag
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	4b03      	ldr	r3, [pc, #12]	; (8003cb8 <EXTI0_IRQHandler+0x14>)
 8003caa:	6159      	str	r1, [r3, #20]
	osEventFlagsSet(pushButtonFlag, 0x00000001U);
 8003cac:	4b03      	ldr	r3, [pc, #12]	; (8003cbc <EXTI0_IRQHandler+0x18>)
 8003cae:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003cb0:	f7fc fedc 	bl	8000a6c <osEventFlagsSet>

}
 8003cb4:	bd08      	pop	{r3, pc}
 8003cb6:	bf00      	nop
 8003cb8:	40013c00 	.word	0x40013c00
 8003cbc:	20004a1c 	.word	0x20004a1c

08003cc0 <HAL_UART_MspInit>:

UART_HandleTypeDef USB_UART;
// Initialize Hardware Resources
// Peripheral's clock enable
// Peripheral's GPIO Configuration
void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 8003cc0:	b530      	push	{r4, r5, lr}
 8003cc2:	b08b      	sub	sp, #44	; 0x2c
	GPIO_InitTypeDef  GPIO_InitStruct;

	if (huart->Instance == USART1) {
 8003cc4:	6803      	ldr	r3, [r0, #0]
 8003cc6:	4a32      	ldr	r2, [pc, #200]	; (8003d90 <HAL_UART_MspInit+0xd0>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d004      	beq.n	8003cd6 <HAL_UART_MspInit+0x16>
		
		// Enable Interrupt Mode
		HAL_NVIC_SetPriority(USART1_IRQn, 10, 0);
		HAL_NVIC_EnableIRQ(USART1_IRQn);

	} else if (huart->Instance == USART6) {
 8003ccc:	4a31      	ldr	r2, [pc, #196]	; (8003d94 <HAL_UART_MspInit+0xd4>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d034      	beq.n	8003d3c <HAL_UART_MspInit+0x7c>

		// Enable UART Clocking
		__USART6_CLK_ENABLE();

	}
}
 8003cd2:	b00b      	add	sp, #44	; 0x2c
 8003cd4:	bd30      	pop	{r4, r5, pc}
		__GPIOA_CLK_ENABLE();
 8003cd6:	4c30      	ldr	r4, [pc, #192]	; (8003d98 <HAL_UART_MspInit+0xd8>)
 8003cd8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003cda:	f043 0301 	orr.w	r3, r3, #1
 8003cde:	6323      	str	r3, [r4, #48]	; 0x30
 8003ce0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	9301      	str	r3, [sp, #4]
 8003ce8:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin       = GPIO_PIN_9;
 8003cea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003cee:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003cfc:	2307      	movs	r3, #7
 8003cfe:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //TX Config
 8003d00:	4d26      	ldr	r5, [pc, #152]	; (8003d9c <HAL_UART_MspInit+0xdc>)
 8003d02:	a905      	add	r1, sp, #20
 8003d04:	4628      	mov	r0, r5
 8003d06:	f000 f989 	bl	800401c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003d0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d0e:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config
 8003d10:	a905      	add	r1, sp, #20
 8003d12:	4628      	mov	r0, r5
 8003d14:	f000 f982 	bl	800401c <HAL_GPIO_Init>
		__USART1_CLK_ENABLE();
 8003d18:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003d1a:	f043 0310 	orr.w	r3, r3, #16
 8003d1e:	6463      	str	r3, [r4, #68]	; 0x44
 8003d20:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003d22:	f003 0310 	and.w	r3, r3, #16
 8003d26:	9302      	str	r3, [sp, #8]
 8003d28:	9b02      	ldr	r3, [sp, #8]
		HAL_NVIC_SetPriority(USART1_IRQn, 10, 0);
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	210a      	movs	r1, #10
 8003d2e:	2025      	movs	r0, #37	; 0x25
 8003d30:	f000 f8d2 	bl	8003ed8 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003d34:	2025      	movs	r0, #37	; 0x25
 8003d36:	f000 f905 	bl	8003f44 <HAL_NVIC_EnableIRQ>
 8003d3a:	e7ca      	b.n	8003cd2 <HAL_UART_MspInit+0x12>
		__GPIOC_CLK_ENABLE();
 8003d3c:	4c16      	ldr	r4, [pc, #88]	; (8003d98 <HAL_UART_MspInit+0xd8>)
 8003d3e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003d40:	f043 0304 	orr.w	r3, r3, #4
 8003d44:	6323      	str	r3, [r4, #48]	; 0x30
 8003d46:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	9303      	str	r3, [sp, #12]
 8003d4e:	9b03      	ldr	r3, [sp, #12]
		GPIO_InitStruct.Pin       = GPIO_PIN_6;
 8003d50:	2340      	movs	r3, #64	; 0x40
 8003d52:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8003d54:	2302      	movs	r3, #2
 8003d56:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003d60:	2308      	movs	r3, #8
 8003d62:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //TX Config
 8003d64:	4d0e      	ldr	r5, [pc, #56]	; (8003da0 <HAL_UART_MspInit+0xe0>)
 8003d66:	a905      	add	r1, sp, #20
 8003d68:	4628      	mov	r0, r5
 8003d6a:	f000 f957 	bl	800401c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003d6e:	2380      	movs	r3, #128	; 0x80
 8003d70:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //RX Config
 8003d72:	a905      	add	r1, sp, #20
 8003d74:	4628      	mov	r0, r5
 8003d76:	f000 f951 	bl	800401c <HAL_GPIO_Init>
		__USART6_CLK_ENABLE();
 8003d7a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003d7c:	f043 0320 	orr.w	r3, r3, #32
 8003d80:	6463      	str	r3, [r4, #68]	; 0x44
 8003d82:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003d84:	f003 0320 	and.w	r3, r3, #32
 8003d88:	9304      	str	r3, [sp, #16]
 8003d8a:	9b04      	ldr	r3, [sp, #16]
}
 8003d8c:	e7a1      	b.n	8003cd2 <HAL_UART_MspInit+0x12>
 8003d8e:	bf00      	nop
 8003d90:	40011000 	.word	0x40011000
 8003d94:	40011400 	.word	0x40011400
 8003d98:	40023800 	.word	0x40023800
 8003d9c:	40020000 	.word	0x40020000
 8003da0:	40020800 	.word	0x40020800

08003da4 <initUart>:

//UART Initialization
void initUart(UART_HandleTypeDef* Uhand, uint32_t Baud, USART_TypeDef* Tgt) {
 8003da4:	b508      	push	{r3, lr}
	Uhand->Instance        = Tgt;
 8003da6:	6002      	str	r2, [r0, #0]

	Uhand->Init.BaudRate   = Baud;
 8003da8:	6041      	str	r1, [r0, #4]
	Uhand->Init.WordLength = UART_WORDLENGTH_8B;
 8003daa:	2200      	movs	r2, #0
 8003dac:	6082      	str	r2, [r0, #8]
	Uhand->Init.StopBits   = UART_STOPBITS_1;
 8003dae:	60c2      	str	r2, [r0, #12]
	Uhand->Init.Parity     = UART_PARITY_NONE;
 8003db0:	6102      	str	r2, [r0, #16]
	Uhand->Init.Mode       = UART_MODE_TX_RX;
 8003db2:	210c      	movs	r1, #12
 8003db4:	6141      	str	r1, [r0, #20]
	Uhand->Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8003db6:	6182      	str	r2, [r0, #24]

	HAL_UART_Init(Uhand);
 8003db8:	f001 fde8 	bl	800598c <HAL_UART_Init>
}
 8003dbc:	bd08      	pop	{r3, pc}
	...

08003dc0 <_write>:

============================================================================= */


// Make printf(), putchar(), etc. default to work over USB UART
int _write(int file, char *ptr, int len) {
 8003dc0:	b510      	push	{r4, lr}
 8003dc2:	4614      	mov	r4, r2
	// HAL_UART_Transmit(&USB_UART, (uint8_t*) ptr, len, 1000);
	HAL_UART_Transmit_IT(&USB_UART, (uint8_t*) ptr, len);
 8003dc4:	b292      	uxth	r2, r2
 8003dc6:	4802      	ldr	r0, [pc, #8]	; (8003dd0 <_write+0x10>)
 8003dc8:	f001 f83e 	bl	8004e48 <HAL_UART_Transmit_IT>
	return len;
}
 8003dcc:	4620      	mov	r0, r4
 8003dce:	bd10      	pop	{r4, pc}
 8003dd0:	20004a4c 	.word	0x20004a4c

08003dd4 <_read>:

// Make scanf(), getchar(), etc. default to work over USB UART
int _read(int file, char *ptr, int len) {
 8003dd4:	b508      	push	{r3, lr}
	*ptr = 0x00; // Clear the character buffer because scanf() is finicky
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	700a      	strb	r2, [r1, #0]
	len = 1; // Again because of scanf's finickiness, len must = 1
	HAL_UART_Receive(&USB_UART, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8003dda:	f04f 33ff 	mov.w	r3, #4294967295
 8003dde:	2201      	movs	r2, #1
 8003de0:	4802      	ldr	r0, [pc, #8]	; (8003dec <_read+0x18>)
 8003de2:	f001 fd12 	bl	800580a <HAL_UART_Receive>
	return len;
}
 8003de6:	2001      	movs	r0, #1
 8003de8:	bd08      	pop	{r3, pc}
 8003dea:	bf00      	nop
 8003dec:	20004a4c 	.word	0x20004a4c

08003df0 <_lseek>:
	}
  return i; // The way this is set up, it will always report the wrong size
}

// These functions need to be defined for compiler version gcc-arm version 11.3__attribute__((weak)) void _close(void){}
__attribute__((weak)) void _lseek(void){}
 8003df0:	4770      	bx	lr

08003df2 <_fstat>:
__attribute__((weak)) void _fstat(void){}
 8003df2:	4770      	bx	lr

08003df4 <_isatty>:
__attribute__((weak)) void _getpid(void){}
__attribute__((weak)) void _ispid(void){}
__attribute__((weak)) void _kill(void){}
__attribute__((weak)) void _isatty(void){}
 8003df4:	4770      	bx	lr
	...

08003df8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003df8:	480d      	ldr	r0, [pc, #52]	; (8003e30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003dfa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 8003dfc:	480d      	ldr	r0, [pc, #52]	; (8003e34 <LoopForever+0x6>)
  ldr r1, =_edata
 8003dfe:	490e      	ldr	r1, [pc, #56]	; (8003e38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003e00:	4a0e      	ldr	r2, [pc, #56]	; (8003e3c <LoopForever+0xe>)
  movs r3, #0
 8003e02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e04:	e002      	b.n	8003e0c <LoopCopyDataInit>

08003e06 <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 8003e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e0a:	3304      	adds	r3, #4

08003e0c <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 8003e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e0e:	428c      	cmp	r4, r1



  bcc CopyDataInit
 8003e10:	d3f9      	bcc.n	8003e06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e12:	4a0b      	ldr	r2, [pc, #44]	; (8003e40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003e14:	4c0b      	ldr	r4, [pc, #44]	; (8003e44 <LoopForever+0x16>)
  movs r3, #0
 8003e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e18:	e001      	b.n	8003e1e <LoopFillZerobss>

08003e1a <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 8003e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e1c:	3204      	adds	r2, #4

08003e1e <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 8003e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e20:	d3fb      	bcc.n	8003e1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003e22:	f000 f813 	bl	8003e4c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003e26:	f002 f96f 	bl	8006108 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003e2a:	f7ff fe6d 	bl	8003b08 <main>

08003e2e <LoopForever>:

LoopForever:
    b LoopForever
 8003e2e:	e7fe      	b.n	8003e2e <LoopForever>
  ldr   r0, =_estack
 8003e30:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8003e34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e38:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8003e3c:	08006870 	.word	0x08006870
  ldr r2, =_sbss
 8003e40:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8003e44:	20004c28 	.word	0x20004c28

08003e48 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003e48:	e7fe      	b.n	8003e48 <ADC_IRQHandler>
	...

08003e4c <SystemInit>:
 * @retval None
 */
void SystemInit(void) {
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8003e4c:	4a03      	ldr	r2, [pc, #12]	; (8003e5c <SystemInit+0x10>)
 8003e4e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003e52:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e56:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e5a:	4770      	bx	lr
 8003e5c:	e000ed00 	.word	0xe000ed00

08003e60 <HAL_MspInit>:
 */
__weak void HAL_MspInit(void) {
	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_MspInit could be implemented in the user file
	 */
}
 8003e60:	4770      	bx	lr
	...

08003e64 <HAL_Init>:
HAL_StatusTypeDef HAL_Init(void) {
 8003e64:	b508      	push	{r3, lr}
  __HAL_FLASH_ART_ENABLE();
 8003e66:	4b09      	ldr	r3, [pc, #36]	; (8003e8c <HAL_Init+0x28>)
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e6e:	601a      	str	r2, [r3, #0]
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e76:	601a      	str	r2, [r3, #0]
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e78:	2003      	movs	r0, #3
 8003e7a:	f000 f81b 	bl	8003eb4 <HAL_NVIC_SetPriorityGrouping>
	HAL_InitTick(TICK_INT_PRIORITY);
 8003e7e:	200f      	movs	r0, #15
 8003e80:	f7ff fcf6 	bl	8003870 <HAL_InitTick>
	HAL_MspInit();
 8003e84:	f7ff ffec 	bl	8003e60 <HAL_MspInit>
}
 8003e88:	2000      	movs	r0, #0
 8003e8a:	bd08      	pop	{r3, pc}
 8003e8c:	40023c00 	.word	0x40023c00

08003e90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
 *      implementations in user file.
 * @retval None
 */
__weak void HAL_IncTick(void) {
	uwTick += uwTickFreq;
 8003e90:	4a03      	ldr	r2, [pc, #12]	; (8003ea0 <HAL_IncTick+0x10>)
 8003e92:	6811      	ldr	r1, [r2, #0]
 8003e94:	4b03      	ldr	r3, [pc, #12]	; (8003ea4 <HAL_IncTick+0x14>)
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	440b      	add	r3, r1
 8003e9a:	6013      	str	r3, [r2, #0]
}
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	20004ad4 	.word	0x20004ad4
 8003ea4:	20000008 	.word	0x20000008

08003ea8 <HAL_GetTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
 *       implementations in user file.
 * @retval tick value
 */
__weak uint32_t HAL_GetTick(void) {
	return uwTick;
 8003ea8:	4b01      	ldr	r3, [pc, #4]	; (8003eb0 <HAL_GetTick+0x8>)
 8003eaa:	6818      	ldr	r0, [r3, #0]
}
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	20004ad4 	.word	0x20004ad4

08003eb4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003eb4:	4906      	ldr	r1, [pc, #24]	; (8003ed0 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8003eb6:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003eb8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003ebc:	041b      	lsls	r3, r3, #16
 8003ebe:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ec0:	0200      	lsls	r0, r0, #8
 8003ec2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ec6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8003ec8:	4a02      	ldr	r2, [pc, #8]	; (8003ed4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003eca:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8003ecc:	60ca      	str	r2, [r1, #12]
	/* Check the parameters */
	assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

	/* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
	NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003ece:	4770      	bx	lr
 8003ed0:	e000ed00 	.word	0xe000ed00
 8003ed4:	05fa0000 	.word	0x05fa0000

08003ed8 <HAL_NVIC_SetPriority>:
 *         This parameter can be a value between 0 and 15
 *         A lower priority value indicates a higher priority.          
 * @retval None
 */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority,
		uint32_t SubPriority) {
 8003ed8:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003eda:	4b17      	ldr	r3, [pc, #92]	; (8003f38 <HAL_NVIC_SetPriority+0x60>)
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ee2:	f1c3 0c07 	rsb	ip, r3, #7
 8003ee6:	f1bc 0f04 	cmp.w	ip, #4
 8003eea:	bf28      	it	cs
 8003eec:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ef0:	f103 0e04 	add.w	lr, r3, #4
 8003ef4:	f1be 0f06 	cmp.w	lr, #6
 8003ef8:	d914      	bls.n	8003f24 <HAL_NVIC_SetPriority+0x4c>
 8003efa:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003efc:	f04f 3eff 	mov.w	lr, #4294967295
 8003f00:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003f04:	ea21 010c 	bic.w	r1, r1, ip
 8003f08:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f0a:	fa0e fe03 	lsl.w	lr, lr, r3
 8003f0e:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f12:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 8003f14:	2800      	cmp	r0, #0
 8003f16:	db07      	blt.n	8003f28 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f18:	0112      	lsls	r2, r2, #4
 8003f1a:	b2d2      	uxtb	r2, r2
 8003f1c:	4b07      	ldr	r3, [pc, #28]	; (8003f3c <HAL_NVIC_SetPriority+0x64>)
 8003f1e:	541a      	strb	r2, [r3, r0]

	prioritygroup = NVIC_GetPriorityGrouping();

	NVIC_SetPriority(IRQn,
			NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003f20:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f24:	2300      	movs	r3, #0
 8003f26:	e7e9      	b.n	8003efc <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f28:	f000 000f 	and.w	r0, r0, #15
 8003f2c:	0112      	lsls	r2, r2, #4
 8003f2e:	b2d2      	uxtb	r2, r2
 8003f30:	4b03      	ldr	r3, [pc, #12]	; (8003f40 <HAL_NVIC_SetPriority+0x68>)
 8003f32:	541a      	strb	r2, [r3, r0]
 8003f34:	e7f4      	b.n	8003f20 <HAL_NVIC_SetPriority+0x48>
 8003f36:	bf00      	nop
 8003f38:	e000ed00 	.word	0xe000ed00
 8003f3c:	e000e400 	.word	0xe000e400
 8003f40:	e000ed14 	.word	0xe000ed14

08003f44 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003f44:	2800      	cmp	r0, #0
 8003f46:	db07      	blt.n	8003f58 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f48:	f000 021f 	and.w	r2, r0, #31
 8003f4c:	0940      	lsrs	r0, r0, #5
 8003f4e:	2301      	movs	r3, #1
 8003f50:	4093      	lsls	r3, r2
 8003f52:	4a02      	ldr	r2, [pc, #8]	; (8003f5c <HAL_NVIC_EnableIRQ+0x18>)
 8003f54:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
	/* Check the parameters */
	assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

	/* Enable interrupt */
	NVIC_EnableIRQ(IRQn);
}
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	e000e100 	.word	0xe000e100

08003f60 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f60:	b570      	push	{r4, r5, r6, lr}
 8003f62:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f64:	6d86      	ldr	r6, [r0, #88]	; 0x58
  
  uint32_t tickstart = HAL_GetTick();
 8003f66:	f7ff ff9f 	bl	8003ea8 <HAL_GetTick>
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f6a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d006      	beq.n	8003f82 <HAL_DMA_Abort+0x22>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f74:	2380      	movs	r3, #128	; 0x80
 8003f76:	6563      	str	r3, [r4, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f78:	2300      	movs	r3, #0
 8003f7a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    
    return HAL_ERROR;
 8003f7e:	2001      	movs	r0, #1
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
  }
  return HAL_OK;
}
 8003f80:	bd70      	pop	{r4, r5, r6, pc}
 8003f82:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f84:	6822      	ldr	r2, [r4, #0]
 8003f86:	6813      	ldr	r3, [r2, #0]
 8003f88:	f023 0316 	bic.w	r3, r3, #22
 8003f8c:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f8e:	6822      	ldr	r2, [r4, #0]
 8003f90:	6953      	ldr	r3, [r2, #20]
 8003f92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f96:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f9a:	b1e3      	cbz	r3, 8003fd6 <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f9c:	6822      	ldr	r2, [r4, #0]
 8003f9e:	6813      	ldr	r3, [r2, #0]
 8003fa0:	f023 0308 	bic.w	r3, r3, #8
 8003fa4:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003fa6:	6822      	ldr	r2, [r4, #0]
 8003fa8:	6813      	ldr	r3, [r2, #0]
 8003faa:	f023 0301 	bic.w	r3, r3, #1
 8003fae:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fb0:	6823      	ldr	r3, [r4, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f013 0f01 	tst.w	r3, #1
 8003fb8:	d011      	beq.n	8003fde <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003fba:	f7ff ff75 	bl	8003ea8 <HAL_GetTick>
 8003fbe:	1b43      	subs	r3, r0, r5
 8003fc0:	2b05      	cmp	r3, #5
 8003fc2:	d9f5      	bls.n	8003fb0 <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003fc4:	2320      	movs	r3, #32
 8003fc6:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003fc8:	2003      	movs	r0, #3
 8003fca:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8003fce:	2300      	movs	r3, #0
 8003fd0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8003fd4:	e7d4      	b.n	8003f80 <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003fd6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1df      	bne.n	8003f9c <HAL_DMA_Abort+0x3c>
 8003fdc:	e7e3      	b.n	8003fa6 <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fde:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003fe0:	233f      	movs	r3, #63	; 0x3f
 8003fe2:	4093      	lsls	r3, r2
 8003fe4:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8003fec:	2000      	movs	r0, #0
 8003fee:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return HAL_OK;
 8003ff2:	e7c5      	b.n	8003f80 <HAL_DMA_Abort+0x20>

08003ff4 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ff4:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d003      	beq.n	8004006 <HAL_DMA_Abort_IT+0x12>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ffe:	2380      	movs	r3, #128	; 0x80
 8004000:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8004002:	2001      	movs	r0, #1
 8004004:	4770      	bx	lr
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004006:	2305      	movs	r3, #5
 8004008:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800400c:	6802      	ldr	r2, [r0, #0]
 800400e:	6813      	ldr	r3, [r2, #0]
 8004010:	f023 0301 	bic.w	r3, r3, #1
 8004014:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004016:	2000      	movs	r0, #0
}
 8004018:	4770      	bx	lr
	...

0800401c <HAL_GPIO_Init>:
	assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
	assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
	assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

	/* Configure the port pins */
	for (position = 0; position < GPIO_NUMBER; position++) {
 800401c:	2300      	movs	r3, #0
 800401e:	2b0f      	cmp	r3, #15
 8004020:	f200 80f4 	bhi.w	800420c <HAL_GPIO_Init+0x1f0>
void HAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init) {
 8004024:	b570      	push	{r4, r5, r6, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	e066      	b.n	80040f8 <HAL_GPIO_Init+0xdc>
			if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT)
					|| ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)) {
				/* Check the Speed parameter */
				assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
				/* Configure the IO Speed */
				temp = GPIOx->OSPEEDR;
 800402a:	6885      	ldr	r5, [r0, #8]
				temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800402c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8004030:	2403      	movs	r4, #3
 8004032:	fa04 f40e 	lsl.w	r4, r4, lr
 8004036:	ea25 0504 	bic.w	r5, r5, r4
				temp |= (GPIO_Init->Speed << (position * 2));
 800403a:	68cc      	ldr	r4, [r1, #12]
 800403c:	fa04 f40e 	lsl.w	r4, r4, lr
 8004040:	432c      	orrs	r4, r5
				GPIOx->OSPEEDR = temp;
 8004042:	6084      	str	r4, [r0, #8]

				/* Configure the IO Output Type */
				temp = GPIOx->OTYPER;
 8004044:	6844      	ldr	r4, [r0, #4]
				temp &= ~(GPIO_OTYPER_OT_0 << position);
 8004046:	ea24 0402 	bic.w	r4, r4, r2
				temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos)
 800404a:	684a      	ldr	r2, [r1, #4]
 800404c:	f3c2 1200 	ubfx	r2, r2, #4, #1
						<< position);
 8004050:	409a      	lsls	r2, r3
				temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos)
 8004052:	4322      	orrs	r2, r4
				GPIOx->OTYPER = temp;
 8004054:	6042      	str	r2, [r0, #4]
 8004056:	e05d      	b.n	8004114 <HAL_GPIO_Init+0xf8>
			if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
				/* Check the Alternate function parameter */
				assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

				/* Configure Alternate function mapped with the current IO */
				temp = GPIOx->AFR[position >> 3];
 8004058:	08dc      	lsrs	r4, r3, #3
 800405a:	3408      	adds	r4, #8
 800405c:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
				temp &= ~((uint32_t) 0xF
						<< ((uint32_t) (position & (uint32_t) 0x07) * 4));
 8004060:	f003 0507 	and.w	r5, r3, #7
 8004064:	00ad      	lsls	r5, r5, #2
 8004066:	f04f 0e0f 	mov.w	lr, #15
 800406a:	fa0e fe05 	lsl.w	lr, lr, r5
				temp &= ~((uint32_t) 0xF
 800406e:	ea22 0e0e 	bic.w	lr, r2, lr
				temp |= ((uint32_t) (GPIO_Init->Alternate)
 8004072:	690a      	ldr	r2, [r1, #16]
						<< (((uint32_t) position & (uint32_t) 0x07) * 4));
 8004074:	40aa      	lsls	r2, r5
				temp |= ((uint32_t) (GPIO_Init->Alternate)
 8004076:	ea42 020e 	orr.w	r2, r2, lr
				GPIOx->AFR[position >> 3] = temp;
 800407a:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 800407e:	e05d      	b.n	800413c <HAL_GPIO_Init+0x120>
				/* Enable SYSCFG Clock */
				__HAL_RCC_SYSCFG_CLK_ENABLE();

				temp = SYSCFG->EXTICR[position >> 2];
				temp &= ~(((uint32_t) 0x0F) << (4 * (position & 0x03)));
				temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 8004080:	2209      	movs	r2, #9
 8004082:	e000      	b.n	8004086 <HAL_GPIO_Init+0x6a>
 8004084:	2200      	movs	r2, #0
						<< (4 * (position & 0x03)));
 8004086:	fa02 f20e 	lsl.w	r2, r2, lr
				temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 800408a:	432a      	orrs	r2, r5
				SYSCFG->EXTICR[position >> 2] = temp;
 800408c:	3402      	adds	r4, #2
 800408e:	4d60      	ldr	r5, [pc, #384]	; (8004210 <HAL_GPIO_Init+0x1f4>)
 8004090:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

				/* Clear Rising Falling edge configuration */
				temp = EXTI->RTSR;
 8004094:	4a5f      	ldr	r2, [pc, #380]	; (8004214 <HAL_GPIO_Init+0x1f8>)
 8004096:	6894      	ldr	r4, [r2, #8]
				temp &= ~((uint32_t) iocurrent);
 8004098:	ea6f 020c 	mvn.w	r2, ip
 800409c:	ea24 050c 	bic.w	r5, r4, ip
				if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u) {
 80040a0:	684e      	ldr	r6, [r1, #4]
 80040a2:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 80040a6:	d001      	beq.n	80040ac <HAL_GPIO_Init+0x90>
					temp |= iocurrent;
 80040a8:	ea4c 0504 	orr.w	r5, ip, r4
				}
				EXTI->RTSR = temp;
 80040ac:	4c59      	ldr	r4, [pc, #356]	; (8004214 <HAL_GPIO_Init+0x1f8>)
 80040ae:	60a5      	str	r5, [r4, #8]

				temp = EXTI->FTSR;
 80040b0:	68e4      	ldr	r4, [r4, #12]
				temp &= ~((uint32_t) iocurrent);
 80040b2:	ea02 0504 	and.w	r5, r2, r4
				if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u) {
 80040b6:	684e      	ldr	r6, [r1, #4]
 80040b8:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80040bc:	d001      	beq.n	80040c2 <HAL_GPIO_Init+0xa6>
					temp |= iocurrent;
 80040be:	ea4c 0504 	orr.w	r5, ip, r4
				}
				EXTI->FTSR = temp;
 80040c2:	4c54      	ldr	r4, [pc, #336]	; (8004214 <HAL_GPIO_Init+0x1f8>)
 80040c4:	60e5      	str	r5, [r4, #12]

				temp = EXTI->EMR;
 80040c6:	6864      	ldr	r4, [r4, #4]
				temp &= ~((uint32_t) iocurrent);
 80040c8:	ea02 0504 	and.w	r5, r2, r4
				if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u) {
 80040cc:	684e      	ldr	r6, [r1, #4]
 80040ce:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 80040d2:	d001      	beq.n	80040d8 <HAL_GPIO_Init+0xbc>
					temp |= iocurrent;
 80040d4:	ea4c 0504 	orr.w	r5, ip, r4
				}
				EXTI->EMR = temp;
 80040d8:	4c4e      	ldr	r4, [pc, #312]	; (8004214 <HAL_GPIO_Init+0x1f8>)
 80040da:	6065      	str	r5, [r4, #4]

				/* Clear EXTI line configuration */
				temp = EXTI->IMR;
 80040dc:	6824      	ldr	r4, [r4, #0]
				temp &= ~((uint32_t) iocurrent);
 80040de:	4022      	ands	r2, r4
				if ((GPIO_Init->Mode & EXTI_IT) != 0x00u) {
 80040e0:	684d      	ldr	r5, [r1, #4]
 80040e2:	f415 3f80 	tst.w	r5, #65536	; 0x10000
 80040e6:	d001      	beq.n	80040ec <HAL_GPIO_Init+0xd0>
					temp |= iocurrent;
 80040e8:	ea4c 0204 	orr.w	r2, ip, r4
				}
				EXTI->IMR = temp;
 80040ec:	4c49      	ldr	r4, [pc, #292]	; (8004214 <HAL_GPIO_Init+0x1f8>)
 80040ee:	6022      	str	r2, [r4, #0]
	for (position = 0; position < GPIO_NUMBER; position++) {
 80040f0:	3301      	adds	r3, #1
 80040f2:	2b0f      	cmp	r3, #15
 80040f4:	f200 8088 	bhi.w	8004208 <HAL_GPIO_Init+0x1ec>
		ioposition = ((uint32_t) 0x01) << position;
 80040f8:	2201      	movs	r2, #1
 80040fa:	409a      	lsls	r2, r3
		iocurrent = (uint32_t) (GPIO_Init->Pin) & ioposition;
 80040fc:	680c      	ldr	r4, [r1, #0]
 80040fe:	ea04 0c02 	and.w	ip, r4, r2
		if (iocurrent == ioposition) {
 8004102:	ea32 0404 	bics.w	r4, r2, r4
 8004106:	d1f3      	bne.n	80040f0 <HAL_GPIO_Init+0xd4>
			if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT)
 8004108:	684c      	ldr	r4, [r1, #4]
 800410a:	f004 0403 	and.w	r4, r4, #3
					|| ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)) {
 800410e:	3c01      	subs	r4, #1
			if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT)
 8004110:	2c01      	cmp	r4, #1
 8004112:	d98a      	bls.n	800402a <HAL_GPIO_Init+0xe>
			if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) {
 8004114:	684a      	ldr	r2, [r1, #4]
 8004116:	f002 0203 	and.w	r2, r2, #3
 800411a:	2a03      	cmp	r2, #3
 800411c:	d009      	beq.n	8004132 <HAL_GPIO_Init+0x116>
				temp = GPIOx->PUPDR;
 800411e:	68c4      	ldr	r4, [r0, #12]
				temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004120:	005d      	lsls	r5, r3, #1
 8004122:	2203      	movs	r2, #3
 8004124:	40aa      	lsls	r2, r5
 8004126:	ea24 0402 	bic.w	r4, r4, r2
				temp |= ((GPIO_Init->Pull) << (position * 2));
 800412a:	688a      	ldr	r2, [r1, #8]
 800412c:	40aa      	lsls	r2, r5
 800412e:	4322      	orrs	r2, r4
				GPIOx->PUPDR = temp;
 8004130:	60c2      	str	r2, [r0, #12]
			if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
 8004132:	684a      	ldr	r2, [r1, #4]
 8004134:	f002 0203 	and.w	r2, r2, #3
 8004138:	2a02      	cmp	r2, #2
 800413a:	d08d      	beq.n	8004058 <HAL_GPIO_Init+0x3c>
			temp = GPIOx->MODER;
 800413c:	6804      	ldr	r4, [r0, #0]
			temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800413e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8004142:	2203      	movs	r2, #3
 8004144:	fa02 f20e 	lsl.w	r2, r2, lr
 8004148:	ea24 0402 	bic.w	r4, r4, r2
			temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800414c:	684a      	ldr	r2, [r1, #4]
 800414e:	f002 0203 	and.w	r2, r2, #3
 8004152:	fa02 f20e 	lsl.w	r2, r2, lr
 8004156:	4322      	orrs	r2, r4
			GPIOx->MODER = temp;
 8004158:	6002      	str	r2, [r0, #0]
			if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u) {
 800415a:	684a      	ldr	r2, [r1, #4]
 800415c:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 8004160:	d0c6      	beq.n	80040f0 <HAL_GPIO_Init+0xd4>
				__HAL_RCC_SYSCFG_CLK_ENABLE();
 8004162:	4a2d      	ldr	r2, [pc, #180]	; (8004218 <HAL_GPIO_Init+0x1fc>)
 8004164:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8004166:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800416a:	6454      	str	r4, [r2, #68]	; 0x44
 800416c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800416e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004172:	9201      	str	r2, [sp, #4]
 8004174:	9a01      	ldr	r2, [sp, #4]
				temp = SYSCFG->EXTICR[position >> 2];
 8004176:	089c      	lsrs	r4, r3, #2
 8004178:	1ca5      	adds	r5, r4, #2
 800417a:	4a25      	ldr	r2, [pc, #148]	; (8004210 <HAL_GPIO_Init+0x1f4>)
 800417c:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
				temp &= ~(((uint32_t) 0x0F) << (4 * (position & 0x03)));
 8004180:	f003 0e03 	and.w	lr, r3, #3
 8004184:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8004188:	220f      	movs	r2, #15
 800418a:	fa02 f20e 	lsl.w	r2, r2, lr
 800418e:	ea25 0502 	bic.w	r5, r5, r2
				temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 8004192:	4a22      	ldr	r2, [pc, #136]	; (800421c <HAL_GPIO_Init+0x200>)
 8004194:	4290      	cmp	r0, r2
 8004196:	f43f af75 	beq.w	8004084 <HAL_GPIO_Init+0x68>
 800419a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800419e:	4290      	cmp	r0, r2
 80041a0:	d022      	beq.n	80041e8 <HAL_GPIO_Init+0x1cc>
 80041a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80041a6:	4290      	cmp	r0, r2
 80041a8:	d020      	beq.n	80041ec <HAL_GPIO_Init+0x1d0>
 80041aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80041ae:	4290      	cmp	r0, r2
 80041b0:	d01e      	beq.n	80041f0 <HAL_GPIO_Init+0x1d4>
 80041b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80041b6:	4290      	cmp	r0, r2
 80041b8:	d01c      	beq.n	80041f4 <HAL_GPIO_Init+0x1d8>
 80041ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80041be:	4290      	cmp	r0, r2
 80041c0:	d01a      	beq.n	80041f8 <HAL_GPIO_Init+0x1dc>
 80041c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80041c6:	4290      	cmp	r0, r2
 80041c8:	d018      	beq.n	80041fc <HAL_GPIO_Init+0x1e0>
 80041ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80041ce:	4290      	cmp	r0, r2
 80041d0:	d016      	beq.n	8004200 <HAL_GPIO_Init+0x1e4>
 80041d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80041d6:	4290      	cmp	r0, r2
 80041d8:	d014      	beq.n	8004204 <HAL_GPIO_Init+0x1e8>
 80041da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80041de:	4290      	cmp	r0, r2
 80041e0:	f43f af4e 	beq.w	8004080 <HAL_GPIO_Init+0x64>
 80041e4:	220a      	movs	r2, #10
 80041e6:	e74e      	b.n	8004086 <HAL_GPIO_Init+0x6a>
 80041e8:	2201      	movs	r2, #1
 80041ea:	e74c      	b.n	8004086 <HAL_GPIO_Init+0x6a>
 80041ec:	2202      	movs	r2, #2
 80041ee:	e74a      	b.n	8004086 <HAL_GPIO_Init+0x6a>
 80041f0:	2203      	movs	r2, #3
 80041f2:	e748      	b.n	8004086 <HAL_GPIO_Init+0x6a>
 80041f4:	2204      	movs	r2, #4
 80041f6:	e746      	b.n	8004086 <HAL_GPIO_Init+0x6a>
 80041f8:	2205      	movs	r2, #5
 80041fa:	e744      	b.n	8004086 <HAL_GPIO_Init+0x6a>
 80041fc:	2206      	movs	r2, #6
 80041fe:	e742      	b.n	8004086 <HAL_GPIO_Init+0x6a>
 8004200:	2207      	movs	r2, #7
 8004202:	e740      	b.n	8004086 <HAL_GPIO_Init+0x6a>
 8004204:	2208      	movs	r2, #8
 8004206:	e73e      	b.n	8004086 <HAL_GPIO_Init+0x6a>
			}
		}
	}
}
 8004208:	b002      	add	sp, #8
 800420a:	bd70      	pop	{r4, r5, r6, pc}
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	40013800 	.word	0x40013800
 8004214:	40013c00 	.word	0x40013c00
 8004218:	40023800 	.word	0x40023800
 800421c:	40020000 	.word	0x40020000

08004220 <HAL_GPIO_WritePin>:
		GPIO_PinState PinState) {
	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));
	assert_param(IS_GPIO_PIN_ACTION(PinState));

	if (PinState != GPIO_PIN_RESET) {
 8004220:	b10a      	cbz	r2, 8004226 <HAL_GPIO_WritePin+0x6>
		GPIOx->BSRR = GPIO_Pin;
 8004222:	6181      	str	r1, [r0, #24]
 8004224:	4770      	bx	lr
	} else {
		GPIOx->BSRR = (uint32_t) GPIO_Pin << 16;
 8004226:	0409      	lsls	r1, r1, #16
 8004228:	6181      	str	r1, [r0, #24]
	}
}
 800422a:	4770      	bx	lr

0800422c <HAL_GPIO_TogglePin>:

	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));

	/* get current Output Data Register value */
	odr = GPIOx->ODR;
 800422c:	6943      	ldr	r3, [r0, #20]

	/* Set selected pins that were at low level, and reset ones that were high */
	GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800422e:	ea01 0203 	and.w	r2, r1, r3
 8004232:	ea21 0103 	bic.w	r1, r1, r3
 8004236:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800423a:	6181      	str	r1, [r0, #24]
}
 800423c:	4770      	bx	lr
	...

08004240 <HAL_PWREx_EnableOverDrive>:
 *         critical tasks and when the system clock source is either HSI or HSE. 
 *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
 *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void) {
 8004240:	b510      	push	{r4, lr}
 8004242:	b082      	sub	sp, #8
	uint32_t tickstart = 0;

	__HAL_RCC_PWR_CLK_ENABLE();
 8004244:	4b1b      	ldr	r3, [pc, #108]	; (80042b4 <HAL_PWREx_EnableOverDrive+0x74>)
 8004246:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004248:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800424c:	641a      	str	r2, [r3, #64]	; 0x40
 800424e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004254:	9301      	str	r3, [sp, #4]
 8004256:	9b01      	ldr	r3, [sp, #4]

	/* Enable the Over-drive to extend the clock frequency to 216 MHz */
	__HAL_PWR_OVERDRIVE_ENABLE();
 8004258:	4a17      	ldr	r2, [pc, #92]	; (80042b8 <HAL_PWREx_EnableOverDrive+0x78>)
 800425a:	6813      	ldr	r3, [r2, #0]
 800425c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004260:	6013      	str	r3, [r2, #0]

	/* Get tick */
	tickstart = HAL_GetTick();
 8004262:	f7ff fe21 	bl	8003ea8 <HAL_GetTick>
 8004266:	4604      	mov	r4, r0

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY)) {
 8004268:	4b13      	ldr	r3, [pc, #76]	; (80042b8 <HAL_PWREx_EnableOverDrive+0x78>)
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004270:	d108      	bne.n	8004284 <HAL_PWREx_EnableOverDrive+0x44>
		if ((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE) {
 8004272:	f7ff fe19 	bl	8003ea8 <HAL_GetTick>
 8004276:	1b00      	subs	r0, r0, r4
 8004278:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800427c:	d9f4      	bls.n	8004268 <HAL_PWREx_EnableOverDrive+0x28>
			return HAL_TIMEOUT;
 800427e:	2003      	movs	r0, #3
		if ((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE) {
			return HAL_TIMEOUT;
		}
	}
	return HAL_OK;
}
 8004280:	b002      	add	sp, #8
 8004282:	bd10      	pop	{r4, pc}
	__HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004284:	4a0c      	ldr	r2, [pc, #48]	; (80042b8 <HAL_PWREx_EnableOverDrive+0x78>)
 8004286:	6813      	ldr	r3, [r2, #0]
 8004288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800428c:	6013      	str	r3, [r2, #0]
	tickstart = HAL_GetTick();
 800428e:	f7ff fe0b 	bl	8003ea8 <HAL_GetTick>
 8004292:	4604      	mov	r4, r0
	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY)) {
 8004294:	4b08      	ldr	r3, [pc, #32]	; (80042b8 <HAL_PWREx_EnableOverDrive+0x78>)
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800429c:	d107      	bne.n	80042ae <HAL_PWREx_EnableOverDrive+0x6e>
		if ((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE) {
 800429e:	f7ff fe03 	bl	8003ea8 <HAL_GetTick>
 80042a2:	1b00      	subs	r0, r0, r4
 80042a4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80042a8:	d9f4      	bls.n	8004294 <HAL_PWREx_EnableOverDrive+0x54>
			return HAL_TIMEOUT;
 80042aa:	2003      	movs	r0, #3
 80042ac:	e7e8      	b.n	8004280 <HAL_PWREx_EnableOverDrive+0x40>
	return HAL_OK;
 80042ae:	2000      	movs	r0, #0
 80042b0:	e7e6      	b.n	8004280 <HAL_PWREx_EnableOverDrive+0x40>
 80042b2:	bf00      	nop
 80042b4:	40023800 	.word	0x40023800
 80042b8:	40007000 	.word	0x40007000

080042bc <HAL_RCC_OscConfig>:
	uint32_t tickstart;
	uint32_t pll_config;
	FlagStatus pwrclkchanged = RESET;

	/* Check Null pointer */
	if (RCC_OscInitStruct == NULL) {
 80042bc:	2800      	cmp	r0, #0
 80042be:	f000 8206 	beq.w	80046ce <HAL_RCC_OscConfig+0x412>
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef *RCC_OscInitStruct) {
 80042c2:	b570      	push	{r4, r5, r6, lr}
 80042c4:	b082      	sub	sp, #8
 80042c6:	4604      	mov	r4, r0

	/* Check the parameters */
	assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

	/*------------------------------- HSE Configuration ------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE)
 80042c8:	6803      	ldr	r3, [r0, #0]
 80042ca:	f013 0f01 	tst.w	r3, #1
 80042ce:	d029      	beq.n	8004324 <HAL_RCC_OscConfig+0x68>
			== RCC_OSCILLATORTYPE_HSE) {
		/* Check the parameters */
		assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
		/* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042d0:	4b95      	ldr	r3, [pc, #596]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f003 030c 	and.w	r3, r3, #12
 80042d8:	2b04      	cmp	r3, #4
 80042da:	d01a      	beq.n	8004312 <HAL_RCC_OscConfig+0x56>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE()
 80042dc:	4b92      	ldr	r3, [pc, #584]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f003 030c 	and.w	r3, r3, #12
 80042e4:	2b08      	cmp	r3, #8
 80042e6:	d00f      	beq.n	8004308 <HAL_RCC_OscConfig+0x4c>
					&& (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
				return HAL_ERROR;
			}
		} else {
			/* Set the new HSE configuration ---------------------------------------*/
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042e8:	6863      	ldr	r3, [r4, #4]
 80042ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ee:	d040      	beq.n	8004372 <HAL_RCC_OscConfig+0xb6>
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d154      	bne.n	800439e <HAL_RCC_OscConfig+0xe2>
 80042f4:	4b8c      	ldr	r3, [pc, #560]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80042fc:	601a      	str	r2, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004304:	601a      	str	r2, [r3, #0]
 8004306:	e039      	b.n	800437c <HAL_RCC_OscConfig+0xc0>
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 8004308:	4b87      	ldr	r3, [pc, #540]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004310:	d0ea      	beq.n	80042e8 <HAL_RCC_OscConfig+0x2c>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004312:	4b85      	ldr	r3, [pc, #532]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800431a:	d003      	beq.n	8004324 <HAL_RCC_OscConfig+0x68>
					&& (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 800431c:	6863      	ldr	r3, [r4, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	f000 81d7 	beq.w	80046d2 <HAL_RCC_OscConfig+0x416>
				}
			}
		}
	}
	/*----------------------------- HSI Configuration --------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI)
 8004324:	6823      	ldr	r3, [r4, #0]
 8004326:	f013 0f02 	tst.w	r3, #2
 800432a:	d074      	beq.n	8004416 <HAL_RCC_OscConfig+0x15a>
		assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
		assert_param(
				IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

		/* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800432c:	4b7e      	ldr	r3, [pc, #504]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f013 0f0c 	tst.w	r3, #12
 8004334:	d05e      	beq.n	80043f4 <HAL_RCC_OscConfig+0x138>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE()
 8004336:	4b7c      	ldr	r3, [pc, #496]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f003 030c 	and.w	r3, r3, #12
 800433e:	2b08      	cmp	r3, #8
 8004340:	d053      	beq.n	80043ea <HAL_RCC_OscConfig+0x12e>
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
						RCC_OscInitStruct->HSICalibrationValue);
			}
		} else {
			/* Check the HSI State */
			if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF) {
 8004342:	68e3      	ldr	r3, [r4, #12]
 8004344:	2b00      	cmp	r3, #0
 8004346:	f000 8089 	beq.w	800445c <HAL_RCC_OscConfig+0x1a0>
				/* Enable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_ENABLE();
 800434a:	4a77      	ldr	r2, [pc, #476]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 800434c:	6813      	ldr	r3, [r2, #0]
 800434e:	f043 0301 	orr.w	r3, r3, #1
 8004352:	6013      	str	r3, [r2, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8004354:	f7ff fda8 	bl	8003ea8 <HAL_GetTick>
 8004358:	4605      	mov	r5, r0

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 800435a:	4b73      	ldr	r3, [pc, #460]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f013 0f02 	tst.w	r3, #2
 8004362:	d172      	bne.n	800444a <HAL_RCC_OscConfig+0x18e>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8004364:	f7ff fda0 	bl	8003ea8 <HAL_GetTick>
 8004368:	1b40      	subs	r0, r0, r5
 800436a:	2802      	cmp	r0, #2
 800436c:	d9f5      	bls.n	800435a <HAL_RCC_OscConfig+0x9e>
						return HAL_TIMEOUT;
 800436e:	2003      	movs	r0, #3
 8004370:	e1b4      	b.n	80046dc <HAL_RCC_OscConfig+0x420>
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004372:	4a6d      	ldr	r2, [pc, #436]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 8004374:	6813      	ldr	r3, [r2, #0]
 8004376:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800437a:	6013      	str	r3, [r2, #0]
			if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF) {
 800437c:	6863      	ldr	r3, [r4, #4]
 800437e:	b32b      	cbz	r3, 80043cc <HAL_RCC_OscConfig+0x110>
				tickstart = HAL_GetTick();
 8004380:	f7ff fd92 	bl	8003ea8 <HAL_GetTick>
 8004384:	4605      	mov	r5, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8004386:	4b68      	ldr	r3, [pc, #416]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800438e:	d1c9      	bne.n	8004324 <HAL_RCC_OscConfig+0x68>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8004390:	f7ff fd8a 	bl	8003ea8 <HAL_GetTick>
 8004394:	1b40      	subs	r0, r0, r5
 8004396:	2864      	cmp	r0, #100	; 0x64
 8004398:	d9f5      	bls.n	8004386 <HAL_RCC_OscConfig+0xca>
						return HAL_TIMEOUT;
 800439a:	2003      	movs	r0, #3
 800439c:	e19e      	b.n	80046dc <HAL_RCC_OscConfig+0x420>
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800439e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043a2:	d009      	beq.n	80043b8 <HAL_RCC_OscConfig+0xfc>
 80043a4:	4b60      	ldr	r3, [pc, #384]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80043ac:	601a      	str	r2, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80043b4:	601a      	str	r2, [r3, #0]
 80043b6:	e7e1      	b.n	800437c <HAL_RCC_OscConfig+0xc0>
 80043b8:	4b5b      	ldr	r3, [pc, #364]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80043c0:	601a      	str	r2, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	e7d7      	b.n	800437c <HAL_RCC_OscConfig+0xc0>
				tickstart = HAL_GetTick();
 80043cc:	f7ff fd6c 	bl	8003ea8 <HAL_GetTick>
 80043d0:	4605      	mov	r5, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 80043d2:	4b55      	ldr	r3, [pc, #340]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80043da:	d0a3      	beq.n	8004324 <HAL_RCC_OscConfig+0x68>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 80043dc:	f7ff fd64 	bl	8003ea8 <HAL_GetTick>
 80043e0:	1b40      	subs	r0, r0, r5
 80043e2:	2864      	cmp	r0, #100	; 0x64
 80043e4:	d9f5      	bls.n	80043d2 <HAL_RCC_OscConfig+0x116>
						return HAL_TIMEOUT;
 80043e6:	2003      	movs	r0, #3
 80043e8:	e178      	b.n	80046dc <HAL_RCC_OscConfig+0x420>
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 80043ea:	4b4f      	ldr	r3, [pc, #316]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80043f2:	d1a6      	bne.n	8004342 <HAL_RCC_OscConfig+0x86>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043f4:	4b4c      	ldr	r3, [pc, #304]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f013 0f02 	tst.w	r3, #2
 80043fc:	d003      	beq.n	8004406 <HAL_RCC_OscConfig+0x14a>
					&& (RCC_OscInitStruct->HSIState != RCC_HSI_ON)) {
 80043fe:	68e3      	ldr	r3, [r4, #12]
 8004400:	2b01      	cmp	r3, #1
 8004402:	f040 8168 	bne.w	80046d6 <HAL_RCC_OscConfig+0x41a>
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 8004406:	4a48      	ldr	r2, [pc, #288]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 8004408:	6813      	ldr	r3, [r2, #0]
 800440a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800440e:	6921      	ldr	r1, [r4, #16]
 8004410:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004414:	6013      	str	r3, [r2, #0]
				}
			}
		}
	}
	/*------------------------------ LSI Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI)
 8004416:	6823      	ldr	r3, [r4, #0]
 8004418:	f013 0f08 	tst.w	r3, #8
 800441c:	d046      	beq.n	80044ac <HAL_RCC_OscConfig+0x1f0>
			== RCC_OSCILLATORTYPE_LSI) {
		/* Check the parameters */
		assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

		/* Check the LSI State */
		if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF) {
 800441e:	6963      	ldr	r3, [r4, #20]
 8004420:	b383      	cbz	r3, 8004484 <HAL_RCC_OscConfig+0x1c8>
			/* Enable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_ENABLE();
 8004422:	4a41      	ldr	r2, [pc, #260]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 8004424:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8004426:	f043 0301 	orr.w	r3, r3, #1
 800442a:	6753      	str	r3, [r2, #116]	; 0x74

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 800442c:	f7ff fd3c 	bl	8003ea8 <HAL_GetTick>
 8004430:	4605      	mov	r5, r0

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 8004432:	4b3d      	ldr	r3, [pc, #244]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 8004434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004436:	f013 0f02 	tst.w	r3, #2
 800443a:	d137      	bne.n	80044ac <HAL_RCC_OscConfig+0x1f0>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 800443c:	f7ff fd34 	bl	8003ea8 <HAL_GetTick>
 8004440:	1b40      	subs	r0, r0, r5
 8004442:	2802      	cmp	r0, #2
 8004444:	d9f5      	bls.n	8004432 <HAL_RCC_OscConfig+0x176>
					return HAL_TIMEOUT;
 8004446:	2003      	movs	r0, #3
 8004448:	e148      	b.n	80046dc <HAL_RCC_OscConfig+0x420>
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 800444a:	4a37      	ldr	r2, [pc, #220]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 800444c:	6813      	ldr	r3, [r2, #0]
 800444e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004452:	6921      	ldr	r1, [r4, #16]
 8004454:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004458:	6013      	str	r3, [r2, #0]
 800445a:	e7dc      	b.n	8004416 <HAL_RCC_OscConfig+0x15a>
				__HAL_RCC_HSI_DISABLE();
 800445c:	4a32      	ldr	r2, [pc, #200]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 800445e:	6813      	ldr	r3, [r2, #0]
 8004460:	f023 0301 	bic.w	r3, r3, #1
 8004464:	6013      	str	r3, [r2, #0]
				tickstart = HAL_GetTick();
 8004466:	f7ff fd1f 	bl	8003ea8 <HAL_GetTick>
 800446a:	4605      	mov	r5, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 800446c:	4b2e      	ldr	r3, [pc, #184]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f013 0f02 	tst.w	r3, #2
 8004474:	d0cf      	beq.n	8004416 <HAL_RCC_OscConfig+0x15a>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8004476:	f7ff fd17 	bl	8003ea8 <HAL_GetTick>
 800447a:	1b40      	subs	r0, r0, r5
 800447c:	2802      	cmp	r0, #2
 800447e:	d9f5      	bls.n	800446c <HAL_RCC_OscConfig+0x1b0>
						return HAL_TIMEOUT;
 8004480:	2003      	movs	r0, #3
 8004482:	e12b      	b.n	80046dc <HAL_RCC_OscConfig+0x420>
				}
			}
		} else {
			/* Disable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_DISABLE();
 8004484:	4a28      	ldr	r2, [pc, #160]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 8004486:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8004488:	f023 0301 	bic.w	r3, r3, #1
 800448c:	6753      	str	r3, [r2, #116]	; 0x74

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 800448e:	f7ff fd0b 	bl	8003ea8 <HAL_GetTick>
 8004492:	4605      	mov	r5, r0

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 8004494:	4b24      	ldr	r3, [pc, #144]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 8004496:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004498:	f013 0f02 	tst.w	r3, #2
 800449c:	d006      	beq.n	80044ac <HAL_RCC_OscConfig+0x1f0>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 800449e:	f7ff fd03 	bl	8003ea8 <HAL_GetTick>
 80044a2:	1b40      	subs	r0, r0, r5
 80044a4:	2802      	cmp	r0, #2
 80044a6:	d9f5      	bls.n	8004494 <HAL_RCC_OscConfig+0x1d8>
					return HAL_TIMEOUT;
 80044a8:	2003      	movs	r0, #3
 80044aa:	e117      	b.n	80046dc <HAL_RCC_OscConfig+0x420>
				}
			}
		}
	}
	/*------------------------------ LSE Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE)
 80044ac:	6823      	ldr	r3, [r4, #0]
 80044ae:	f013 0f04 	tst.w	r3, #4
 80044b2:	d07d      	beq.n	80045b0 <HAL_RCC_OscConfig+0x2f4>
		/* Check the parameters */
		assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

		/* Update LSE configuration in Backup Domain control register    */
		/* Requires to enable write access to Backup Domain of necessary */
		if (__HAL_RCC_PWR_IS_CLK_DISABLED()) {
 80044b4:	4b1c      	ldr	r3, [pc, #112]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 80044b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80044bc:	d11e      	bne.n	80044fc <HAL_RCC_OscConfig+0x240>
			/* Enable Power Clock*/
			__HAL_RCC_PWR_CLK_ENABLE();
 80044be:	4b1a      	ldr	r3, [pc, #104]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 80044c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044c2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80044c6:	641a      	str	r2, [r3, #64]	; 0x40
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ce:	9301      	str	r3, [sp, #4]
 80044d0:	9b01      	ldr	r3, [sp, #4]
			pwrclkchanged = SET;
 80044d2:	2501      	movs	r5, #1
		}

		if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP)) {
 80044d4:	4b15      	ldr	r3, [pc, #84]	; (800452c <HAL_RCC_OscConfig+0x270>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80044dc:	d010      	beq.n	8004500 <HAL_RCC_OscConfig+0x244>
				}
			}
		}

		/* Set the new LSE configuration -----------------------------------------*/
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044de:	68a3      	ldr	r3, [r4, #8]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d025      	beq.n	8004530 <HAL_RCC_OscConfig+0x274>
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d13b      	bne.n	8004560 <HAL_RCC_OscConfig+0x2a4>
 80044e8:	4b0f      	ldr	r3, [pc, #60]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 80044ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044ec:	f022 0201 	bic.w	r2, r2, #1
 80044f0:	671a      	str	r2, [r3, #112]	; 0x70
 80044f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044f4:	f022 0204 	bic.w	r2, r2, #4
 80044f8:	671a      	str	r2, [r3, #112]	; 0x70
 80044fa:	e01e      	b.n	800453a <HAL_RCC_OscConfig+0x27e>
	FlagStatus pwrclkchanged = RESET;
 80044fc:	2500      	movs	r5, #0
 80044fe:	e7e9      	b.n	80044d4 <HAL_RCC_OscConfig+0x218>
			PWR->CR1 |= PWR_CR1_DBP;
 8004500:	4a0a      	ldr	r2, [pc, #40]	; (800452c <HAL_RCC_OscConfig+0x270>)
 8004502:	6813      	ldr	r3, [r2, #0]
 8004504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004508:	6013      	str	r3, [r2, #0]
			tickstart = HAL_GetTick();
 800450a:	f7ff fccd 	bl	8003ea8 <HAL_GetTick>
 800450e:	4606      	mov	r6, r0
			while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP)) {
 8004510:	4b06      	ldr	r3, [pc, #24]	; (800452c <HAL_RCC_OscConfig+0x270>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004518:	d1e1      	bne.n	80044de <HAL_RCC_OscConfig+0x222>
				if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 800451a:	f7ff fcc5 	bl	8003ea8 <HAL_GetTick>
 800451e:	1b80      	subs	r0, r0, r6
 8004520:	2864      	cmp	r0, #100	; 0x64
 8004522:	d9f5      	bls.n	8004510 <HAL_RCC_OscConfig+0x254>
					return HAL_TIMEOUT;
 8004524:	2003      	movs	r0, #3
 8004526:	e0d9      	b.n	80046dc <HAL_RCC_OscConfig+0x420>
 8004528:	40023800 	.word	0x40023800
 800452c:	40007000 	.word	0x40007000
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004530:	4a72      	ldr	r2, [pc, #456]	; (80046fc <HAL_RCC_OscConfig+0x440>)
 8004532:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004534:	f043 0301 	orr.w	r3, r3, #1
 8004538:	6713      	str	r3, [r2, #112]	; 0x70
		/* Check the LSE State */
		if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF) {
 800453a:	68a3      	ldr	r3, [r4, #8]
 800453c:	b333      	cbz	r3, 800458c <HAL_RCC_OscConfig+0x2d0>
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 800453e:	f7ff fcb3 	bl	8003ea8 <HAL_GetTick>
 8004542:	4606      	mov	r6, r0

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 8004544:	4b6d      	ldr	r3, [pc, #436]	; (80046fc <HAL_RCC_OscConfig+0x440>)
 8004546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004548:	f013 0f02 	tst.w	r3, #2
 800454c:	d12f      	bne.n	80045ae <HAL_RCC_OscConfig+0x2f2>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 800454e:	f7ff fcab 	bl	8003ea8 <HAL_GetTick>
 8004552:	1b80      	subs	r0, r0, r6
 8004554:	f241 3388 	movw	r3, #5000	; 0x1388
 8004558:	4298      	cmp	r0, r3
 800455a:	d9f3      	bls.n	8004544 <HAL_RCC_OscConfig+0x288>
					return HAL_TIMEOUT;
 800455c:	2003      	movs	r0, #3
 800455e:	e0bd      	b.n	80046dc <HAL_RCC_OscConfig+0x420>
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004560:	2b05      	cmp	r3, #5
 8004562:	d009      	beq.n	8004578 <HAL_RCC_OscConfig+0x2bc>
 8004564:	4b65      	ldr	r3, [pc, #404]	; (80046fc <HAL_RCC_OscConfig+0x440>)
 8004566:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004568:	f022 0201 	bic.w	r2, r2, #1
 800456c:	671a      	str	r2, [r3, #112]	; 0x70
 800456e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004570:	f022 0204 	bic.w	r2, r2, #4
 8004574:	671a      	str	r2, [r3, #112]	; 0x70
 8004576:	e7e0      	b.n	800453a <HAL_RCC_OscConfig+0x27e>
 8004578:	4b60      	ldr	r3, [pc, #384]	; (80046fc <HAL_RCC_OscConfig+0x440>)
 800457a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800457c:	f042 0204 	orr.w	r2, r2, #4
 8004580:	671a      	str	r2, [r3, #112]	; 0x70
 8004582:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004584:	f042 0201 	orr.w	r2, r2, #1
 8004588:	671a      	str	r2, [r3, #112]	; 0x70
 800458a:	e7d6      	b.n	800453a <HAL_RCC_OscConfig+0x27e>
				}
			}
		} else {
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 800458c:	f7ff fc8c 	bl	8003ea8 <HAL_GetTick>
 8004590:	4606      	mov	r6, r0

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 8004592:	4b5a      	ldr	r3, [pc, #360]	; (80046fc <HAL_RCC_OscConfig+0x440>)
 8004594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004596:	f013 0f02 	tst.w	r3, #2
 800459a:	d008      	beq.n	80045ae <HAL_RCC_OscConfig+0x2f2>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 800459c:	f7ff fc84 	bl	8003ea8 <HAL_GetTick>
 80045a0:	1b80      	subs	r0, r0, r6
 80045a2:	f241 3388 	movw	r3, #5000	; 0x1388
 80045a6:	4298      	cmp	r0, r3
 80045a8:	d9f3      	bls.n	8004592 <HAL_RCC_OscConfig+0x2d6>
					return HAL_TIMEOUT;
 80045aa:	2003      	movs	r0, #3
 80045ac:	e096      	b.n	80046dc <HAL_RCC_OscConfig+0x420>
				}
			}
		}

		/* Restore clock configuration if changed */
		if (pwrclkchanged == SET) {
 80045ae:	b9fd      	cbnz	r5, 80045f0 <HAL_RCC_OscConfig+0x334>
		}
	}
	/*-------------------------------- PLL Configuration -----------------------*/
	/* Check the parameters */
	assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
	if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE) {
 80045b0:	69a3      	ldr	r3, [r4, #24]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f000 8091 	beq.w	80046da <HAL_RCC_OscConfig+0x41e>
		/* Check if the PLL is used as system clock or not */
		if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {
 80045b8:	4a50      	ldr	r2, [pc, #320]	; (80046fc <HAL_RCC_OscConfig+0x440>)
 80045ba:	6892      	ldr	r2, [r2, #8]
 80045bc:	f002 020c 	and.w	r2, r2, #12
 80045c0:	2a08      	cmp	r2, #8
 80045c2:	d059      	beq.n	8004678 <HAL_RCC_OscConfig+0x3bc>
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON) {
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d019      	beq.n	80045fc <HAL_RCC_OscConfig+0x340>
						return HAL_TIMEOUT;
					}
				}
			} else {
				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 80045c8:	4a4c      	ldr	r2, [pc, #304]	; (80046fc <HAL_RCC_OscConfig+0x440>)
 80045ca:	6813      	ldr	r3, [r2, #0]
 80045cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045d0:	6013      	str	r3, [r2, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 80045d2:	f7ff fc69 	bl	8003ea8 <HAL_GetTick>
 80045d6:	4604      	mov	r4, r0

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 80045d8:	4b48      	ldr	r3, [pc, #288]	; (80046fc <HAL_RCC_OscConfig+0x440>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80045e0:	d048      	beq.n	8004674 <HAL_RCC_OscConfig+0x3b8>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 80045e2:	f7ff fc61 	bl	8003ea8 <HAL_GetTick>
 80045e6:	1b00      	subs	r0, r0, r4
 80045e8:	2802      	cmp	r0, #2
 80045ea:	d9f5      	bls.n	80045d8 <HAL_RCC_OscConfig+0x31c>
						return HAL_TIMEOUT;
 80045ec:	2003      	movs	r0, #3
 80045ee:	e075      	b.n	80046dc <HAL_RCC_OscConfig+0x420>
			__HAL_RCC_PWR_CLK_DISABLE();
 80045f0:	4a42      	ldr	r2, [pc, #264]	; (80046fc <HAL_RCC_OscConfig+0x440>)
 80045f2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80045f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045f8:	6413      	str	r3, [r2, #64]	; 0x40
 80045fa:	e7d9      	b.n	80045b0 <HAL_RCC_OscConfig+0x2f4>
				__HAL_RCC_PLL_DISABLE();
 80045fc:	4a3f      	ldr	r2, [pc, #252]	; (80046fc <HAL_RCC_OscConfig+0x440>)
 80045fe:	6813      	ldr	r3, [r2, #0]
 8004600:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004604:	6013      	str	r3, [r2, #0]
				tickstart = HAL_GetTick();
 8004606:	f7ff fc4f 	bl	8003ea8 <HAL_GetTick>
 800460a:	4605      	mov	r5, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 800460c:	4b3b      	ldr	r3, [pc, #236]	; (80046fc <HAL_RCC_OscConfig+0x440>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004614:	d006      	beq.n	8004624 <HAL_RCC_OscConfig+0x368>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8004616:	f7ff fc47 	bl	8003ea8 <HAL_GetTick>
 800461a:	1b40      	subs	r0, r0, r5
 800461c:	2802      	cmp	r0, #2
 800461e:	d9f5      	bls.n	800460c <HAL_RCC_OscConfig+0x350>
						return HAL_TIMEOUT;
 8004620:	2003      	movs	r0, #3
 8004622:	e05b      	b.n	80046dc <HAL_RCC_OscConfig+0x420>
				__HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004624:	69e3      	ldr	r3, [r4, #28]
 8004626:	6a22      	ldr	r2, [r4, #32]
 8004628:	4313      	orrs	r3, r2
 800462a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800462c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004630:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004632:	0852      	lsrs	r2, r2, #1
 8004634:	3a01      	subs	r2, #1
 8004636:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800463a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800463c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004640:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004642:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8004646:	4a2d      	ldr	r2, [pc, #180]	; (80046fc <HAL_RCC_OscConfig+0x440>)
 8004648:	6053      	str	r3, [r2, #4]
				__HAL_RCC_PLL_ENABLE();
 800464a:	6813      	ldr	r3, [r2, #0]
 800464c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004650:	6013      	str	r3, [r2, #0]
				tickstart = HAL_GetTick();
 8004652:	f7ff fc29 	bl	8003ea8 <HAL_GetTick>
 8004656:	4604      	mov	r4, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8004658:	4b28      	ldr	r3, [pc, #160]	; (80046fc <HAL_RCC_OscConfig+0x440>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004660:	d106      	bne.n	8004670 <HAL_RCC_OscConfig+0x3b4>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8004662:	f7ff fc21 	bl	8003ea8 <HAL_GetTick>
 8004666:	1b00      	subs	r0, r0, r4
 8004668:	2802      	cmp	r0, #2
 800466a:	d9f5      	bls.n	8004658 <HAL_RCC_OscConfig+0x39c>
						return HAL_TIMEOUT;
 800466c:	2003      	movs	r0, #3
 800466e:	e035      	b.n	80046dc <HAL_RCC_OscConfig+0x420>
					{
				return HAL_ERROR;
			}
		}
	}
	return HAL_OK;
 8004670:	2000      	movs	r0, #0
 8004672:	e033      	b.n	80046dc <HAL_RCC_OscConfig+0x420>
 8004674:	2000      	movs	r0, #0
 8004676:	e031      	b.n	80046dc <HAL_RCC_OscConfig+0x420>
			pll_config = RCC->PLLCFGR;
 8004678:	4a20      	ldr	r2, [pc, #128]	; (80046fc <HAL_RCC_OscConfig+0x440>)
 800467a:	6852      	ldr	r2, [r2, #4]
			if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800467c:	2b01      	cmp	r3, #1
 800467e:	d02f      	beq.n	80046e0 <HAL_RCC_OscConfig+0x424>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 8004680:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
							!= RCC_OscInitStruct->PLL.PLLSource)
 8004684:	69e1      	ldr	r1, [r4, #28]
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 8004686:	428b      	cmp	r3, r1
 8004688:	d12c      	bne.n	80046e4 <HAL_RCC_OscConfig+0x428>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 800468a:	f002 033f 	and.w	r3, r2, #63	; 0x3f
							!= RCC_OscInitStruct->PLL.PLLM)
 800468e:	6a21      	ldr	r1, [r4, #32]
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 8004690:	428b      	cmp	r3, r1
 8004692:	d129      	bne.n	80046e8 <HAL_RCC_OscConfig+0x42c>
							!= (RCC_OscInitStruct->PLL.PLLN
 8004694:	6a61      	ldr	r1, [r4, #36]	; 0x24
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)
 8004696:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800469a:	4013      	ands	r3, r2
 800469c:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 80046a0:	d124      	bne.n	80046ec <HAL_RCC_OscConfig+0x430>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)
 80046a2:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
							!= ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U)
 80046a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80046a8:	085b      	lsrs	r3, r3, #1
 80046aa:	3b01      	subs	r3, #1
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)
 80046ac:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 80046b0:	d11e      	bne.n	80046f0 <HAL_RCC_OscConfig+0x434>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 80046b2:	f002 6370 	and.w	r3, r2, #251658240	; 0xf000000
							!= (RCC_OscInitStruct->PLL.PLLQ
 80046b6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 80046b8:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 80046bc:	d11a      	bne.n	80046f4 <HAL_RCC_OscConfig+0x438>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)
 80046be:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
							!= (RCC_OscInitStruct->PLL.PLLR
 80046c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)
 80046c4:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
 80046c8:	d116      	bne.n	80046f8 <HAL_RCC_OscConfig+0x43c>
	return HAL_OK;
 80046ca:	2000      	movs	r0, #0
 80046cc:	e006      	b.n	80046dc <HAL_RCC_OscConfig+0x420>
		return HAL_ERROR;
 80046ce:	2001      	movs	r0, #1
}
 80046d0:	4770      	bx	lr
				return HAL_ERROR;
 80046d2:	2001      	movs	r0, #1
 80046d4:	e002      	b.n	80046dc <HAL_RCC_OscConfig+0x420>
				return HAL_ERROR;
 80046d6:	2001      	movs	r0, #1
 80046d8:	e000      	b.n	80046dc <HAL_RCC_OscConfig+0x420>
	return HAL_OK;
 80046da:	2000      	movs	r0, #0
}
 80046dc:	b002      	add	sp, #8
 80046de:	bd70      	pop	{r4, r5, r6, pc}
				return HAL_ERROR;
 80046e0:	2001      	movs	r0, #1
 80046e2:	e7fb      	b.n	80046dc <HAL_RCC_OscConfig+0x420>
 80046e4:	2001      	movs	r0, #1
 80046e6:	e7f9      	b.n	80046dc <HAL_RCC_OscConfig+0x420>
 80046e8:	2001      	movs	r0, #1
 80046ea:	e7f7      	b.n	80046dc <HAL_RCC_OscConfig+0x420>
 80046ec:	2001      	movs	r0, #1
 80046ee:	e7f5      	b.n	80046dc <HAL_RCC_OscConfig+0x420>
 80046f0:	2001      	movs	r0, #1
 80046f2:	e7f3      	b.n	80046dc <HAL_RCC_OscConfig+0x420>
 80046f4:	2001      	movs	r0, #1
 80046f6:	e7f1      	b.n	80046dc <HAL_RCC_OscConfig+0x420>
 80046f8:	2001      	movs	r0, #1
 80046fa:	e7ef      	b.n	80046dc <HAL_RCC_OscConfig+0x420>
 80046fc:	40023800 	.word	0x40023800

08004700 <HAL_RCC_GetSysClockFreq>:
 *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
 *
 *
 * @retval SYSCLK frequency
 */
uint32_t HAL_RCC_GetSysClockFreq(void) {
 8004700:	b508      	push	{r3, lr}
	uint32_t pllm = 0, pllvco = 0, pllp = 0;
	uint32_t sysclockfreq = 0;

	/* Get SYSCLK source -------------------------------------------------------*/
	switch (RCC->CFGR & RCC_CFGR_SWS) {
 8004702:	4b26      	ldr	r3, [pc, #152]	; (800479c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f003 030c 	and.w	r3, r3, #12
 800470a:	2b04      	cmp	r3, #4
 800470c:	d041      	beq.n	8004792 <HAL_RCC_GetSysClockFreq+0x92>
 800470e:	2b08      	cmp	r3, #8
 8004710:	d141      	bne.n	8004796 <HAL_RCC_GetSysClockFreq+0x96>
	}
	case RCC_SYSCLKSOURCE_STATUS_PLLCLK: /* PLL used as system clock  source */
	{
		/* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
		 SYSCLK = PLL_VCO / PLLP */
		pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004712:	4b22      	ldr	r3, [pc, #136]	; (800479c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	f002 023f 	and.w	r2, r2, #63	; 0x3f
		if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI) {
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004720:	d012      	beq.n	8004748 <HAL_RCC_GetSysClockFreq+0x48>
			/* HSE used as PLL clock source */
			pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8004722:	4b1e      	ldr	r3, [pc, #120]	; (800479c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004724:	6859      	ldr	r1, [r3, #4]
 8004726:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800472a:	481d      	ldr	r0, [pc, #116]	; (80047a0 <HAL_RCC_GetSysClockFreq+0xa0>)
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 800472c:	2300      	movs	r3, #0
 800472e:	fba1 0100 	umull	r0, r1, r1, r0
 8004732:	f7fb fd85 	bl	8000240 <__aeabi_uldivmod>
			pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
		}
		pllp =
				((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos)
 8004736:	4b19      	ldr	r3, [pc, #100]	; (800479c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f3c3 4301 	ubfx	r3, r3, #16, #2
						+ 1) * 2);
 800473e:	3301      	adds	r3, #1
		pllp =
 8004740:	005b      	lsls	r3, r3, #1

		sysclockfreq = pllvco / pllp;
 8004742:	fbb0 f0f3 	udiv	r0, r0, r3
		break;
 8004746:	e027      	b.n	8004798 <HAL_RCC_GetSysClockFreq+0x98>
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8004748:	4b14      	ldr	r3, [pc, #80]	; (800479c <HAL_RCC_GetSysClockFreq+0x9c>)
 800474a:	6858      	ldr	r0, [r3, #4]
 800474c:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8004750:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8004754:	ebbc 0c00 	subs.w	ip, ip, r0
 8004758:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800475c:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8004760:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8004764:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8004768:	ebb1 010c 	subs.w	r1, r1, ip
 800476c:	eb63 030e 	sbc.w	r3, r3, lr
 8004770:	00db      	lsls	r3, r3, #3
 8004772:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004776:	00c9      	lsls	r1, r1, #3
 8004778:	eb11 0c00 	adds.w	ip, r1, r0
 800477c:	f143 0300 	adc.w	r3, r3, #0
 8004780:	0299      	lsls	r1, r3, #10
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8004782:	2300      	movs	r3, #0
 8004784:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8004788:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 800478c:	f7fb fd58 	bl	8000240 <__aeabi_uldivmod>
 8004790:	e7d1      	b.n	8004736 <HAL_RCC_GetSysClockFreq+0x36>
		sysclockfreq = HSE_VALUE;
 8004792:	4803      	ldr	r0, [pc, #12]	; (80047a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004794:	e000      	b.n	8004798 <HAL_RCC_GetSysClockFreq+0x98>
	switch (RCC->CFGR & RCC_CFGR_SWS) {
 8004796:	4803      	ldr	r0, [pc, #12]	; (80047a4 <HAL_RCC_GetSysClockFreq+0xa4>)
		sysclockfreq = HSI_VALUE;
		break;
	}
	}
	return sysclockfreq;
}
 8004798:	bd08      	pop	{r3, pc}
 800479a:	bf00      	nop
 800479c:	40023800 	.word	0x40023800
 80047a0:	017d7840 	.word	0x017d7840
 80047a4:	00f42400 	.word	0x00f42400

080047a8 <HAL_RCC_ClockConfig>:
	if (RCC_ClkInitStruct == NULL) {
 80047a8:	2800      	cmp	r0, #0
 80047aa:	f000 80a0 	beq.w	80048ee <HAL_RCC_ClockConfig+0x146>
		uint32_t FLatency) {
 80047ae:	b570      	push	{r4, r5, r6, lr}
 80047b0:	460d      	mov	r5, r1
 80047b2:	4604      	mov	r4, r0
	if (FLatency > __HAL_FLASH_GET_LATENCY()) {
 80047b4:	4b52      	ldr	r3, [pc, #328]	; (8004900 <HAL_RCC_ClockConfig+0x158>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 030f 	and.w	r3, r3, #15
 80047bc:	428b      	cmp	r3, r1
 80047be:	d20b      	bcs.n	80047d8 <HAL_RCC_ClockConfig+0x30>
		__HAL_FLASH_SET_LATENCY(FLatency);
 80047c0:	4a4f      	ldr	r2, [pc, #316]	; (8004900 <HAL_RCC_ClockConfig+0x158>)
 80047c2:	6813      	ldr	r3, [r2, #0]
 80047c4:	f023 030f 	bic.w	r3, r3, #15
 80047c8:	430b      	orrs	r3, r1
 80047ca:	6013      	str	r3, [r2, #0]
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 80047cc:	6813      	ldr	r3, [r2, #0]
 80047ce:	f003 030f 	and.w	r3, r3, #15
 80047d2:	428b      	cmp	r3, r1
 80047d4:	f040 808d 	bne.w	80048f2 <HAL_RCC_ClockConfig+0x14a>
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK)
 80047d8:	6823      	ldr	r3, [r4, #0]
 80047da:	f013 0f02 	tst.w	r3, #2
 80047de:	d017      	beq.n	8004810 <HAL_RCC_ClockConfig+0x68>
		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 80047e0:	f013 0f04 	tst.w	r3, #4
 80047e4:	d004      	beq.n	80047f0 <HAL_RCC_ClockConfig+0x48>
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047e6:	4a47      	ldr	r2, [pc, #284]	; (8004904 <HAL_RCC_ClockConfig+0x15c>)
 80047e8:	6893      	ldr	r3, [r2, #8]
 80047ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047ee:	6093      	str	r3, [r2, #8]
		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 80047f0:	6823      	ldr	r3, [r4, #0]
 80047f2:	f013 0f08 	tst.w	r3, #8
 80047f6:	d004      	beq.n	8004802 <HAL_RCC_ClockConfig+0x5a>
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047f8:	4a42      	ldr	r2, [pc, #264]	; (8004904 <HAL_RCC_ClockConfig+0x15c>)
 80047fa:	6893      	ldr	r3, [r2, #8]
 80047fc:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004800:	6093      	str	r3, [r2, #8]
		MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004802:	4a40      	ldr	r2, [pc, #256]	; (8004904 <HAL_RCC_ClockConfig+0x15c>)
 8004804:	6893      	ldr	r3, [r2, #8]
 8004806:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800480a:	68a1      	ldr	r1, [r4, #8]
 800480c:	430b      	orrs	r3, r1
 800480e:	6093      	str	r3, [r2, #8]
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK)
 8004810:	6823      	ldr	r3, [r4, #0]
 8004812:	f013 0f01 	tst.w	r3, #1
 8004816:	d031      	beq.n	800487c <HAL_RCC_ClockConfig+0xd4>
		if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 8004818:	6863      	ldr	r3, [r4, #4]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d020      	beq.n	8004860 <HAL_RCC_ClockConfig+0xb8>
		else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) {
 800481e:	2b02      	cmp	r3, #2
 8004820:	d025      	beq.n	800486e <HAL_RCC_ClockConfig+0xc6>
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8004822:	4a38      	ldr	r2, [pc, #224]	; (8004904 <HAL_RCC_ClockConfig+0x15c>)
 8004824:	6812      	ldr	r2, [r2, #0]
 8004826:	f012 0f02 	tst.w	r2, #2
 800482a:	d064      	beq.n	80048f6 <HAL_RCC_ClockConfig+0x14e>
		__HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800482c:	4935      	ldr	r1, [pc, #212]	; (8004904 <HAL_RCC_ClockConfig+0x15c>)
 800482e:	688a      	ldr	r2, [r1, #8]
 8004830:	f022 0203 	bic.w	r2, r2, #3
 8004834:	4313      	orrs	r3, r2
 8004836:	608b      	str	r3, [r1, #8]
		tickstart = HAL_GetTick();
 8004838:	f7ff fb36 	bl	8003ea8 <HAL_GetTick>
 800483c:	4606      	mov	r6, r0
		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 800483e:	4b31      	ldr	r3, [pc, #196]	; (8004904 <HAL_RCC_ClockConfig+0x15c>)
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f003 030c 	and.w	r3, r3, #12
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
 8004846:	6862      	ldr	r2, [r4, #4]
 8004848:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800484c:	d016      	beq.n	800487c <HAL_RCC_ClockConfig+0xd4>
			if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 800484e:	f7ff fb2b 	bl	8003ea8 <HAL_GetTick>
 8004852:	1b80      	subs	r0, r0, r6
 8004854:	f241 3388 	movw	r3, #5000	; 0x1388
 8004858:	4298      	cmp	r0, r3
 800485a:	d9f0      	bls.n	800483e <HAL_RCC_ClockConfig+0x96>
				return HAL_TIMEOUT;
 800485c:	2003      	movs	r0, #3
 800485e:	e045      	b.n	80048ec <HAL_RCC_ClockConfig+0x144>
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8004860:	4a28      	ldr	r2, [pc, #160]	; (8004904 <HAL_RCC_ClockConfig+0x15c>)
 8004862:	6812      	ldr	r2, [r2, #0]
 8004864:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004868:	d1e0      	bne.n	800482c <HAL_RCC_ClockConfig+0x84>
				return HAL_ERROR;
 800486a:	2001      	movs	r0, #1
 800486c:	e03e      	b.n	80048ec <HAL_RCC_ClockConfig+0x144>
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 800486e:	4a25      	ldr	r2, [pc, #148]	; (8004904 <HAL_RCC_ClockConfig+0x15c>)
 8004870:	6812      	ldr	r2, [r2, #0]
 8004872:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8004876:	d1d9      	bne.n	800482c <HAL_RCC_ClockConfig+0x84>
				return HAL_ERROR;
 8004878:	2001      	movs	r0, #1
 800487a:	e037      	b.n	80048ec <HAL_RCC_ClockConfig+0x144>
	if (FLatency < __HAL_FLASH_GET_LATENCY()) {
 800487c:	4b20      	ldr	r3, [pc, #128]	; (8004900 <HAL_RCC_ClockConfig+0x158>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 030f 	and.w	r3, r3, #15
 8004884:	42ab      	cmp	r3, r5
 8004886:	d90a      	bls.n	800489e <HAL_RCC_ClockConfig+0xf6>
		__HAL_FLASH_SET_LATENCY(FLatency);
 8004888:	4a1d      	ldr	r2, [pc, #116]	; (8004900 <HAL_RCC_ClockConfig+0x158>)
 800488a:	6813      	ldr	r3, [r2, #0]
 800488c:	f023 030f 	bic.w	r3, r3, #15
 8004890:	432b      	orrs	r3, r5
 8004892:	6013      	str	r3, [r2, #0]
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 8004894:	6813      	ldr	r3, [r2, #0]
 8004896:	f003 030f 	and.w	r3, r3, #15
 800489a:	42ab      	cmp	r3, r5
 800489c:	d12d      	bne.n	80048fa <HAL_RCC_ClockConfig+0x152>
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 800489e:	6823      	ldr	r3, [r4, #0]
 80048a0:	f013 0f04 	tst.w	r3, #4
 80048a4:	d006      	beq.n	80048b4 <HAL_RCC_ClockConfig+0x10c>
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1,
 80048a6:	4a17      	ldr	r2, [pc, #92]	; (8004904 <HAL_RCC_ClockConfig+0x15c>)
 80048a8:	6893      	ldr	r3, [r2, #8]
 80048aa:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80048ae:	68e1      	ldr	r1, [r4, #12]
 80048b0:	430b      	orrs	r3, r1
 80048b2:	6093      	str	r3, [r2, #8]
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 80048b4:	6823      	ldr	r3, [r4, #0]
 80048b6:	f013 0f08 	tst.w	r3, #8
 80048ba:	d007      	beq.n	80048cc <HAL_RCC_ClockConfig+0x124>
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2,
 80048bc:	4a11      	ldr	r2, [pc, #68]	; (8004904 <HAL_RCC_ClockConfig+0x15c>)
 80048be:	6893      	ldr	r3, [r2, #8]
 80048c0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80048c4:	6921      	ldr	r1, [r4, #16]
 80048c6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80048ca:	6093      	str	r3, [r2, #8]
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 80048cc:	f7ff ff18 	bl	8004700 <HAL_RCC_GetSysClockFreq>
			>> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048d0:	4b0c      	ldr	r3, [pc, #48]	; (8004904 <HAL_RCC_ClockConfig+0x15c>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80048d8:	4a0b      	ldr	r2, [pc, #44]	; (8004908 <HAL_RCC_ClockConfig+0x160>)
 80048da:	5cd3      	ldrb	r3, [r2, r3]
 80048dc:	40d8      	lsrs	r0, r3
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 80048de:	4b0b      	ldr	r3, [pc, #44]	; (800490c <HAL_RCC_ClockConfig+0x164>)
 80048e0:	6018      	str	r0, [r3, #0]
	HAL_InitTick(uwTickPrio);
 80048e2:	4b0b      	ldr	r3, [pc, #44]	; (8004910 <HAL_RCC_ClockConfig+0x168>)
 80048e4:	6818      	ldr	r0, [r3, #0]
 80048e6:	f7fe ffc3 	bl	8003870 <HAL_InitTick>
	return HAL_OK;
 80048ea:	2000      	movs	r0, #0
}
 80048ec:	bd70      	pop	{r4, r5, r6, pc}
		return HAL_ERROR;
 80048ee:	2001      	movs	r0, #1
}
 80048f0:	4770      	bx	lr
			return HAL_ERROR;
 80048f2:	2001      	movs	r0, #1
 80048f4:	e7fa      	b.n	80048ec <HAL_RCC_ClockConfig+0x144>
				return HAL_ERROR;
 80048f6:	2001      	movs	r0, #1
 80048f8:	e7f8      	b.n	80048ec <HAL_RCC_ClockConfig+0x144>
			return HAL_ERROR;
 80048fa:	2001      	movs	r0, #1
 80048fc:	e7f6      	b.n	80048ec <HAL_RCC_ClockConfig+0x144>
 80048fe:	bf00      	nop
 8004900:	40023c00 	.word	0x40023c00
 8004904:	40023800 	.word	0x40023800
 8004908:	080067c4 	.word	0x080067c4
 800490c:	20000004 	.word	0x20000004
 8004910:	2000000c 	.word	0x2000000c

08004914 <HAL_RCC_GetHCLKFreq>:
 * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
 * @retval HCLK frequency
 */
uint32_t HAL_RCC_GetHCLKFreq(void) {
	return SystemCoreClock;
}
 8004914:	4b01      	ldr	r3, [pc, #4]	; (800491c <HAL_RCC_GetHCLKFreq+0x8>)
 8004916:	6818      	ldr	r0, [r3, #0]
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	20000004 	.word	0x20000004

08004920 <HAL_RCC_GetPCLK1Freq>:
 * @brief  Returns the PCLK1 frequency
 * @note   Each time PCLK1 changes, this function must be called to update the
 *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK1 frequency
 */
uint32_t HAL_RCC_GetPCLK1Freq(void) {
 8004920:	b508      	push	{r3, lr}
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (HAL_RCC_GetHCLKFreq()
 8004922:	f7ff fff7 	bl	8004914 <HAL_RCC_GetHCLKFreq>
			>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004926:	4b04      	ldr	r3, [pc, #16]	; (8004938 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800492e:	4a03      	ldr	r2, [pc, #12]	; (800493c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004930:	5cd3      	ldrb	r3, [r2, r3]
}
 8004932:	40d8      	lsrs	r0, r3
 8004934:	bd08      	pop	{r3, pc}
 8004936:	bf00      	nop
 8004938:	40023800 	.word	0x40023800
 800493c:	080067d4 	.word	0x080067d4

08004940 <HAL_RCC_GetPCLK2Freq>:
 * @brief  Returns the PCLK2 frequency
 * @note   Each time PCLK2 changes, this function must be called to update the
 *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK2 frequency
 */
uint32_t HAL_RCC_GetPCLK2Freq(void) {
 8004940:	b508      	push	{r3, lr}
	/* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
	return (HAL_RCC_GetHCLKFreq()
 8004942:	f7ff ffe7 	bl	8004914 <HAL_RCC_GetHCLKFreq>
			>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004946:	4b04      	ldr	r3, [pc, #16]	; (8004958 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800494e:	4a03      	ldr	r2, [pc, #12]	; (800495c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004950:	5cd3      	ldrb	r3, [r2, r3]
}
 8004952:	40d8      	lsrs	r0, r3
 8004954:	bd08      	pop	{r3, pc}
 8004956:	bf00      	nop
 8004958:	40023800 	.word	0x40023800
 800495c:	080067d4 	.word	0x080067d4

08004960 <HAL_RCC_GetClockConfig>:
 * @retval None
 */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct,
		uint32_t *pFLatency) {
	/* Set all possible values for the Clock type parameter --------------------*/
	RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 8004960:	230f      	movs	r3, #15
 8004962:	6003      	str	r3, [r0, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

	/* Get the SYSCLK configuration --------------------------------------------*/
	RCC_ClkInitStruct->SYSCLKSource = (uint32_t) (RCC->CFGR & RCC_CFGR_SW);
 8004964:	4b0b      	ldr	r3, [pc, #44]	; (8004994 <HAL_RCC_GetClockConfig+0x34>)
 8004966:	689a      	ldr	r2, [r3, #8]
 8004968:	f002 0203 	and.w	r2, r2, #3
 800496c:	6042      	str	r2, [r0, #4]

	/* Get the HCLK configuration ----------------------------------------------*/
	RCC_ClkInitStruct->AHBCLKDivider = (uint32_t) (RCC->CFGR & RCC_CFGR_HPRE);
 800496e:	689a      	ldr	r2, [r3, #8]
 8004970:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8004974:	6082      	str	r2, [r0, #8]

	/* Get the APB1 configuration ----------------------------------------------*/
	RCC_ClkInitStruct->APB1CLKDivider = (uint32_t) (RCC->CFGR & RCC_CFGR_PPRE1);
 8004976:	689a      	ldr	r2, [r3, #8]
 8004978:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800497c:	60c2      	str	r2, [r0, #12]

	/* Get the APB2 configuration ----------------------------------------------*/
	RCC_ClkInitStruct->APB2CLKDivider = (uint32_t) ((RCC->CFGR & RCC_CFGR_PPRE2)
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	08db      	lsrs	r3, r3, #3
 8004982:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8004986:	6103      	str	r3, [r0, #16]
			>> 3);

	/* Get the Flash Wait State (Latency) configuration ------------------------*/
	*pFLatency = (uint32_t) (FLASH->ACR & FLASH_ACR_LATENCY);
 8004988:	4b03      	ldr	r3, [pc, #12]	; (8004998 <HAL_RCC_GetClockConfig+0x38>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 030f 	and.w	r3, r3, #15
 8004990:	600b      	str	r3, [r1, #0]
}
 8004992:	4770      	bx	lr
 8004994:	40023800 	.word	0x40023800
 8004998:	40023c00 	.word	0x40023c00

0800499c <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800499c:	4770      	bx	lr
	...

080049a0 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049a0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d13a      	bne.n	8004a20 <HAL_TIM_Base_Start_IT+0x80>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049aa:	2302      	movs	r3, #2
 80049ac:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049b0:	6802      	ldr	r2, [r0, #0]
 80049b2:	68d3      	ldr	r3, [r2, #12]
 80049b4:	f043 0301 	orr.w	r3, r3, #1
 80049b8:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049ba:	6803      	ldr	r3, [r0, #0]
 80049bc:	4a1a      	ldr	r2, [pc, #104]	; (8004a28 <HAL_TIM_Base_Start_IT+0x88>)
 80049be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049c2:	bf18      	it	ne
 80049c4:	4293      	cmpne	r3, r2
 80049c6:	d01d      	beq.n	8004a04 <HAL_TIM_Base_Start_IT+0x64>
 80049c8:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d019      	beq.n	8004a04 <HAL_TIM_Base_Start_IT+0x64>
 80049d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d015      	beq.n	8004a04 <HAL_TIM_Base_Start_IT+0x64>
 80049d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80049dc:	4293      	cmp	r3, r2
 80049de:	d011      	beq.n	8004a04 <HAL_TIM_Base_Start_IT+0x64>
 80049e0:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d00d      	beq.n	8004a04 <HAL_TIM_Base_Start_IT+0x64>
 80049e8:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d009      	beq.n	8004a04 <HAL_TIM_Base_Start_IT+0x64>
 80049f0:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d005      	beq.n	8004a04 <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	f042 0201 	orr.w	r2, r2, #1
 80049fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a00:	2000      	movs	r0, #0
 8004a02:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a04:	6899      	ldr	r1, [r3, #8]
 8004a06:	4a09      	ldr	r2, [pc, #36]	; (8004a2c <HAL_TIM_Base_Start_IT+0x8c>)
 8004a08:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a0a:	2a06      	cmp	r2, #6
 8004a0c:	bf18      	it	ne
 8004a0e:	f5b2 3f80 	cmpne.w	r2, #65536	; 0x10000
 8004a12:	d007      	beq.n	8004a24 <HAL_TIM_Base_Start_IT+0x84>
      __HAL_TIM_ENABLE(htim);
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	f042 0201 	orr.w	r2, r2, #1
 8004a1a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004a1c:	2000      	movs	r0, #0
 8004a1e:	4770      	bx	lr
    return HAL_ERROR;
 8004a20:	2001      	movs	r0, #1
 8004a22:	4770      	bx	lr
  return HAL_OK;
 8004a24:	2000      	movs	r0, #0
}
 8004a26:	4770      	bx	lr
 8004a28:	40010000 	.word	0x40010000
 8004a2c:	00010007 	.word	0x00010007

08004a30 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a30:	4770      	bx	lr

08004a32 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a32:	4770      	bx	lr

08004a34 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a34:	4770      	bx	lr

08004a36 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a36:	4770      	bx	lr

08004a38 <HAL_TIM_IRQHandler>:
{
 8004a38:	b510      	push	{r4, lr}
 8004a3a:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a3c:	6803      	ldr	r3, [r0, #0]
 8004a3e:	691a      	ldr	r2, [r3, #16]
 8004a40:	f012 0f02 	tst.w	r2, #2
 8004a44:	d011      	beq.n	8004a6a <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a46:	68da      	ldr	r2, [r3, #12]
 8004a48:	f012 0f02 	tst.w	r2, #2
 8004a4c:	d00d      	beq.n	8004a6a <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a4e:	f06f 0202 	mvn.w	r2, #2
 8004a52:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a54:	2301      	movs	r3, #1
 8004a56:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a58:	6803      	ldr	r3, [r0, #0]
 8004a5a:	699b      	ldr	r3, [r3, #24]
 8004a5c:	f013 0f03 	tst.w	r3, #3
 8004a60:	d079      	beq.n	8004b56 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8004a62:	f7ff ffe6 	bl	8004a32 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a66:	2300      	movs	r3, #0
 8004a68:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a6a:	6823      	ldr	r3, [r4, #0]
 8004a6c:	691a      	ldr	r2, [r3, #16]
 8004a6e:	f012 0f04 	tst.w	r2, #4
 8004a72:	d012      	beq.n	8004a9a <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a74:	68da      	ldr	r2, [r3, #12]
 8004a76:	f012 0f04 	tst.w	r2, #4
 8004a7a:	d00e      	beq.n	8004a9a <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a7c:	f06f 0204 	mvn.w	r2, #4
 8004a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a82:	2302      	movs	r3, #2
 8004a84:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a86:	6823      	ldr	r3, [r4, #0]
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004a8e:	d068      	beq.n	8004b62 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8004a90:	4620      	mov	r0, r4
 8004a92:	f7ff ffce 	bl	8004a32 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a96:	2300      	movs	r3, #0
 8004a98:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a9a:	6823      	ldr	r3, [r4, #0]
 8004a9c:	691a      	ldr	r2, [r3, #16]
 8004a9e:	f012 0f08 	tst.w	r2, #8
 8004aa2:	d012      	beq.n	8004aca <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004aa4:	68da      	ldr	r2, [r3, #12]
 8004aa6:	f012 0f08 	tst.w	r2, #8
 8004aaa:	d00e      	beq.n	8004aca <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004aac:	f06f 0208 	mvn.w	r2, #8
 8004ab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ab2:	2304      	movs	r3, #4
 8004ab4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ab6:	6823      	ldr	r3, [r4, #0]
 8004ab8:	69db      	ldr	r3, [r3, #28]
 8004aba:	f013 0f03 	tst.w	r3, #3
 8004abe:	d057      	beq.n	8004b70 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8004ac0:	4620      	mov	r0, r4
 8004ac2:	f7ff ffb6 	bl	8004a32 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004aca:	6823      	ldr	r3, [r4, #0]
 8004acc:	691a      	ldr	r2, [r3, #16]
 8004ace:	f012 0f10 	tst.w	r2, #16
 8004ad2:	d012      	beq.n	8004afa <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ad4:	68da      	ldr	r2, [r3, #12]
 8004ad6:	f012 0f10 	tst.w	r2, #16
 8004ada:	d00e      	beq.n	8004afa <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004adc:	f06f 0210 	mvn.w	r2, #16
 8004ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ae2:	2308      	movs	r3, #8
 8004ae4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ae6:	6823      	ldr	r3, [r4, #0]
 8004ae8:	69db      	ldr	r3, [r3, #28]
 8004aea:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004aee:	d046      	beq.n	8004b7e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8004af0:	4620      	mov	r0, r4
 8004af2:	f7ff ff9e 	bl	8004a32 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004af6:	2300      	movs	r3, #0
 8004af8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004afa:	6823      	ldr	r3, [r4, #0]
 8004afc:	691a      	ldr	r2, [r3, #16]
 8004afe:	f012 0f01 	tst.w	r2, #1
 8004b02:	d003      	beq.n	8004b0c <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b04:	68da      	ldr	r2, [r3, #12]
 8004b06:	f012 0f01 	tst.w	r2, #1
 8004b0a:	d13f      	bne.n	8004b8c <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b0c:	6823      	ldr	r3, [r4, #0]
 8004b0e:	691a      	ldr	r2, [r3, #16]
 8004b10:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004b14:	d003      	beq.n	8004b1e <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b16:	68da      	ldr	r2, [r3, #12]
 8004b18:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004b1c:	d13d      	bne.n	8004b9a <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004b1e:	6823      	ldr	r3, [r4, #0]
 8004b20:	691a      	ldr	r2, [r3, #16]
 8004b22:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004b26:	d003      	beq.n	8004b30 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b28:	68da      	ldr	r2, [r3, #12]
 8004b2a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004b2e:	d13b      	bne.n	8004ba8 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b30:	6823      	ldr	r3, [r4, #0]
 8004b32:	691a      	ldr	r2, [r3, #16]
 8004b34:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004b38:	d003      	beq.n	8004b42 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b3a:	68da      	ldr	r2, [r3, #12]
 8004b3c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004b40:	d139      	bne.n	8004bb6 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b42:	6823      	ldr	r3, [r4, #0]
 8004b44:	691a      	ldr	r2, [r3, #16]
 8004b46:	f012 0f20 	tst.w	r2, #32
 8004b4a:	d003      	beq.n	8004b54 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b4c:	68da      	ldr	r2, [r3, #12]
 8004b4e:	f012 0f20 	tst.w	r2, #32
 8004b52:	d137      	bne.n	8004bc4 <HAL_TIM_IRQHandler+0x18c>
}
 8004b54:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b56:	f7ff ff6b 	bl	8004a30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b5a:	4620      	mov	r0, r4
 8004b5c:	f7ff ff6a 	bl	8004a34 <HAL_TIM_PWM_PulseFinishedCallback>
 8004b60:	e781      	b.n	8004a66 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b62:	4620      	mov	r0, r4
 8004b64:	f7ff ff64 	bl	8004a30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b68:	4620      	mov	r0, r4
 8004b6a:	f7ff ff63 	bl	8004a34 <HAL_TIM_PWM_PulseFinishedCallback>
 8004b6e:	e792      	b.n	8004a96 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b70:	4620      	mov	r0, r4
 8004b72:	f7ff ff5d 	bl	8004a30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b76:	4620      	mov	r0, r4
 8004b78:	f7ff ff5c 	bl	8004a34 <HAL_TIM_PWM_PulseFinishedCallback>
 8004b7c:	e7a3      	b.n	8004ac6 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b7e:	4620      	mov	r0, r4
 8004b80:	f7ff ff56 	bl	8004a30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b84:	4620      	mov	r0, r4
 8004b86:	f7ff ff55 	bl	8004a34 <HAL_TIM_PWM_PulseFinishedCallback>
 8004b8a:	e7b4      	b.n	8004af6 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b8c:	f06f 0201 	mvn.w	r2, #1
 8004b90:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b92:	4620      	mov	r0, r4
 8004b94:	f7fe ff46 	bl	8003a24 <HAL_TIM_PeriodElapsedCallback>
 8004b98:	e7b8      	b.n	8004b0c <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b9a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b9e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004ba0:	4620      	mov	r0, r4
 8004ba2:	f000 f8d0 	bl	8004d46 <HAL_TIMEx_BreakCallback>
 8004ba6:	e7ba      	b.n	8004b1e <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004ba8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004bac:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8004bae:	4620      	mov	r0, r4
 8004bb0:	f000 f8ca 	bl	8004d48 <HAL_TIMEx_Break2Callback>
 8004bb4:	e7bc      	b.n	8004b30 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bb6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bba:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004bbc:	4620      	mov	r0, r4
 8004bbe:	f7ff ff3a 	bl	8004a36 <HAL_TIM_TriggerCallback>
 8004bc2:	e7be      	b.n	8004b42 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bc4:	f06f 0220 	mvn.w	r2, #32
 8004bc8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8004bca:	4620      	mov	r0, r4
 8004bcc:	f000 f8ba 	bl	8004d44 <HAL_TIMEx_CommutCallback>
}
 8004bd0:	e7c0      	b.n	8004b54 <HAL_TIM_IRQHandler+0x11c>
	...

08004bd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004bd4:	b530      	push	{r4, r5, lr}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bd6:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bd8:	4a3b      	ldr	r2, [pc, #236]	; (8004cc8 <TIM_Base_SetConfig+0xf4>)
 8004bda:	4290      	cmp	r0, r2
 8004bdc:	bf14      	ite	ne
 8004bde:	f04f 0e00 	movne.w	lr, #0
 8004be2:	f04f 0e01 	moveq.w	lr, #1
 8004be6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004bea:	bf14      	ite	ne
 8004bec:	4672      	movne	r2, lr
 8004bee:	f04e 0201 	orreq.w	r2, lr, #1
 8004bf2:	b9aa      	cbnz	r2, 8004c20 <TIM_Base_SetConfig+0x4c>
 8004bf4:	4c35      	ldr	r4, [pc, #212]	; (8004ccc <TIM_Base_SetConfig+0xf8>)
 8004bf6:	42a0      	cmp	r0, r4
 8004bf8:	bf14      	ite	ne
 8004bfa:	2400      	movne	r4, #0
 8004bfc:	2401      	moveq	r4, #1
 8004bfe:	4d34      	ldr	r5, [pc, #208]	; (8004cd0 <TIM_Base_SetConfig+0xfc>)
 8004c00:	42a8      	cmp	r0, r5
 8004c02:	d00d      	beq.n	8004c20 <TIM_Base_SetConfig+0x4c>
 8004c04:	b964      	cbnz	r4, 8004c20 <TIM_Base_SetConfig+0x4c>
 8004c06:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8004c0a:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
 8004c0e:	42a0      	cmp	r0, r4
 8004c10:	bf14      	ite	ne
 8004c12:	2400      	movne	r4, #0
 8004c14:	2401      	moveq	r4, #1
 8004c16:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004c1a:	42a8      	cmp	r0, r5
 8004c1c:	d000      	beq.n	8004c20 <TIM_Base_SetConfig+0x4c>
 8004c1e:	b11c      	cbz	r4, 8004c28 <TIM_Base_SetConfig+0x54>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004c24:	684c      	ldr	r4, [r1, #4]
 8004c26:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c28:	2a00      	cmp	r2, #0
 8004c2a:	d133      	bne.n	8004c94 <TIM_Base_SetConfig+0xc0>
 8004c2c:	4a27      	ldr	r2, [pc, #156]	; (8004ccc <TIM_Base_SetConfig+0xf8>)
 8004c2e:	4290      	cmp	r0, r2
 8004c30:	bf14      	ite	ne
 8004c32:	2200      	movne	r2, #0
 8004c34:	2201      	moveq	r2, #1
 8004c36:	4c26      	ldr	r4, [pc, #152]	; (8004cd0 <TIM_Base_SetConfig+0xfc>)
 8004c38:	42a0      	cmp	r0, r4
 8004c3a:	d02b      	beq.n	8004c94 <TIM_Base_SetConfig+0xc0>
 8004c3c:	bb52      	cbnz	r2, 8004c94 <TIM_Base_SetConfig+0xc0>
 8004c3e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8004c42:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 8004c46:	4290      	cmp	r0, r2
 8004c48:	bf14      	ite	ne
 8004c4a:	2200      	movne	r2, #0
 8004c4c:	2201      	moveq	r2, #1
 8004c4e:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8004c52:	42a0      	cmp	r0, r4
 8004c54:	d01e      	beq.n	8004c94 <TIM_Base_SetConfig+0xc0>
 8004c56:	b9ea      	cbnz	r2, 8004c94 <TIM_Base_SetConfig+0xc0>
 8004c58:	4a1e      	ldr	r2, [pc, #120]	; (8004cd4 <TIM_Base_SetConfig+0x100>)
 8004c5a:	4290      	cmp	r0, r2
 8004c5c:	bf14      	ite	ne
 8004c5e:	2200      	movne	r2, #0
 8004c60:	2201      	moveq	r2, #1
 8004c62:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 8004c66:	42a0      	cmp	r0, r4
 8004c68:	d014      	beq.n	8004c94 <TIM_Base_SetConfig+0xc0>
 8004c6a:	b99a      	cbnz	r2, 8004c94 <TIM_Base_SetConfig+0xc0>
 8004c6c:	4a1a      	ldr	r2, [pc, #104]	; (8004cd8 <TIM_Base_SetConfig+0x104>)
 8004c6e:	4290      	cmp	r0, r2
 8004c70:	bf14      	ite	ne
 8004c72:	2200      	movne	r2, #0
 8004c74:	2201      	moveq	r2, #1
 8004c76:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8004c7a:	42a0      	cmp	r0, r4
 8004c7c:	d00a      	beq.n	8004c94 <TIM_Base_SetConfig+0xc0>
 8004c7e:	b94a      	cbnz	r2, 8004c94 <TIM_Base_SetConfig+0xc0>
 8004c80:	4a16      	ldr	r2, [pc, #88]	; (8004cdc <TIM_Base_SetConfig+0x108>)
 8004c82:	4290      	cmp	r0, r2
 8004c84:	bf14      	ite	ne
 8004c86:	2200      	movne	r2, #0
 8004c88:	2201      	moveq	r2, #1
 8004c8a:	f5a4 3496 	sub.w	r4, r4, #76800	; 0x12c00
 8004c8e:	42a0      	cmp	r0, r4
 8004c90:	d000      	beq.n	8004c94 <TIM_Base_SetConfig+0xc0>
 8004c92:	b122      	cbz	r2, 8004c9e <TIM_Base_SetConfig+0xca>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c94:	f423 7c40 	bic.w	ip, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c98:	68cb      	ldr	r3, [r1, #12]
 8004c9a:	ea43 030c 	orr.w	r3, r3, ip
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ca2:	694a      	ldr	r2, [r1, #20]
 8004ca4:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8004ca6:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ca8:	688a      	ldr	r2, [r1, #8]
 8004caa:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cac:	680a      	ldr	r2, [r1, #0]
 8004cae:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cb0:	4a0b      	ldr	r2, [pc, #44]	; (8004ce0 <TIM_Base_SetConfig+0x10c>)
 8004cb2:	4290      	cmp	r0, r2
 8004cb4:	bf14      	ite	ne
 8004cb6:	4673      	movne	r3, lr
 8004cb8:	f04e 0301 	orreq.w	r3, lr, #1
 8004cbc:	b10b      	cbz	r3, 8004cc2 <TIM_Base_SetConfig+0xee>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cbe:	690b      	ldr	r3, [r1, #16]
 8004cc0:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	6143      	str	r3, [r0, #20]
}
 8004cc6:	bd30      	pop	{r4, r5, pc}
 8004cc8:	40010000 	.word	0x40010000
 8004ccc:	40000800 	.word	0x40000800
 8004cd0:	40000400 	.word	0x40000400
 8004cd4:	40014400 	.word	0x40014400
 8004cd8:	40001800 	.word	0x40001800
 8004cdc:	40002000 	.word	0x40002000
 8004ce0:	40010400 	.word	0x40010400

08004ce4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8004ce4:	b360      	cbz	r0, 8004d40 <HAL_TIM_Base_Init+0x5c>
{
 8004ce6:	b510      	push	{r4, lr}
 8004ce8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004cea:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004cee:	b313      	cbz	r3, 8004d36 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cf6:	4621      	mov	r1, r4
 8004cf8:	f851 0b04 	ldr.w	r0, [r1], #4
 8004cfc:	f7ff ff6a 	bl	8004bd4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d00:	2301      	movs	r3, #1
 8004d02:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d06:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004d0a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004d0e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004d12:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8004d16:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d1e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004d22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d26:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8004d2a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004d2e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004d32:	2000      	movs	r0, #0
}
 8004d34:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004d36:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004d3a:	f7ff fe2f 	bl	800499c <HAL_TIM_Base_MspInit>
 8004d3e:	e7d7      	b.n	8004cf0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8004d40:	2001      	movs	r0, #1
}
 8004d42:	4770      	bx	lr

08004d44 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d44:	4770      	bx	lr

08004d46 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d46:	4770      	bx	lr

08004d48 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004d48:	4770      	bx	lr

08004d4a <UART_EndRxTransfer>:
 * @param  huart UART handle.
 * @retval None
 */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart) {
	/* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
	ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d4a:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4c:	e852 3f00 	ldrex	r3, [r2]
 8004d50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d54:	e842 3100 	strex	r1, r3, [r2]
 8004d58:	2900      	cmp	r1, #0
 8004d5a:	d1f6      	bne.n	8004d4a <UART_EndRxTransfer>
	ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d5c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5e:	f102 0308 	add.w	r3, r2, #8
 8004d62:	e853 3f00 	ldrex	r3, [r3]
 8004d66:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6a:	3208      	adds	r2, #8
 8004d6c:	e842 3100 	strex	r1, r3, [r2]
 8004d70:	2900      	cmp	r1, #0
 8004d72:	d1f3      	bne.n	8004d5c <UART_EndRxTransfer+0x12>

	/* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
	if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
 8004d74:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d006      	beq.n	8004d88 <UART_EndRxTransfer+0x3e>
		ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
	}

	/* At end of Rx process, restore huart->RxState to Ready */
	huart->RxState = HAL_UART_STATE_READY;
 8004d7a:	2320      	movs	r3, #32
 8004d7c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d80:	2300      	movs	r3, #0
 8004d82:	6603      	str	r3, [r0, #96]	; 0x60

	/* Reset RxIsr function pointer */
	huart->RxISR = NULL;
 8004d84:	6683      	str	r3, [r0, #104]	; 0x68
}
 8004d86:	4770      	bx	lr
		ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d88:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8a:	e852 3f00 	ldrex	r3, [r2]
 8004d8e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d92:	e842 3100 	strex	r1, r3, [r2]
 8004d96:	2900      	cmp	r1, #0
 8004d98:	d1f6      	bne.n	8004d88 <UART_EndRxTransfer+0x3e>
 8004d9a:	e7ee      	b.n	8004d7a <UART_EndRxTransfer+0x30>

08004d9c <UART_TxISR_8BIT>:
 * @param huart UART handle.
 * @retval None
 */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart) {
	/* Check that a Tx process is ongoing */
	if (huart->gState == HAL_UART_STATE_BUSY_TX) {
 8004d9c:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8004d9e:	2b21      	cmp	r3, #33	; 0x21
 8004da0:	d000      	beq.n	8004da4 <UART_TxISR_8BIT+0x8>
					& (uint8_t) 0xFF);
			huart->pTxBuffPtr++;
			huart->TxXferCount--;
		}
	}
}
 8004da2:	4770      	bx	lr
		if (huart->TxXferCount == 0U) {
 8004da4:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	b993      	cbnz	r3, 8004dd2 <UART_TxISR_8BIT+0x36>
			ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004dac:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dae:	e852 3f00 	ldrex	r3, [r2]
 8004db2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db6:	e842 3100 	strex	r1, r3, [r2]
 8004dba:	2900      	cmp	r1, #0
 8004dbc:	d1f6      	bne.n	8004dac <UART_TxISR_8BIT+0x10>
			ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004dbe:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc0:	e852 3f00 	ldrex	r3, [r2]
 8004dc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc8:	e842 3100 	strex	r1, r3, [r2]
 8004dcc:	2900      	cmp	r1, #0
 8004dce:	d1f6      	bne.n	8004dbe <UART_TxISR_8BIT+0x22>
 8004dd0:	4770      	bx	lr
			huart->Instance->TDR = (uint8_t) (*huart->pTxBuffPtr
 8004dd2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004dd4:	781a      	ldrb	r2, [r3, #0]
 8004dd6:	6803      	ldr	r3, [r0, #0]
 8004dd8:	629a      	str	r2, [r3, #40]	; 0x28
			huart->pTxBuffPtr++;
 8004dda:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004ddc:	3301      	adds	r3, #1
 8004dde:	64c3      	str	r3, [r0, #76]	; 0x4c
			huart->TxXferCount--;
 8004de0:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	3b01      	subs	r3, #1
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
}
 8004dee:	e7d8      	b.n	8004da2 <UART_TxISR_8BIT+0x6>

08004df0 <UART_TxISR_16BIT>:
 */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart) {
	const uint16_t *tmp;

	/* Check that a Tx process is ongoing */
	if (huart->gState == HAL_UART_STATE_BUSY_TX) {
 8004df0:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8004df2:	2b21      	cmp	r3, #33	; 0x21
 8004df4:	d000      	beq.n	8004df8 <UART_TxISR_16BIT+0x8>
			huart->Instance->TDR = (((uint32_t) (*tmp)) & 0x01FFUL);
			huart->pTxBuffPtr += 2U;
			huart->TxXferCount--;
		}
	}
}
 8004df6:	4770      	bx	lr
		if (huart->TxXferCount == 0U) {
 8004df8:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	b993      	cbnz	r3, 8004e26 <UART_TxISR_16BIT+0x36>
			ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004e00:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e02:	e852 3f00 	ldrex	r3, [r2]
 8004e06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0a:	e842 3100 	strex	r1, r3, [r2]
 8004e0e:	2900      	cmp	r1, #0
 8004e10:	d1f6      	bne.n	8004e00 <UART_TxISR_16BIT+0x10>
			ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e12:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e14:	e852 3f00 	ldrex	r3, [r2]
 8004e18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1c:	e842 3100 	strex	r1, r3, [r2]
 8004e20:	2900      	cmp	r1, #0
 8004e22:	d1f6      	bne.n	8004e12 <UART_TxISR_16BIT+0x22>
 8004e24:	4770      	bx	lr
			tmp = (const uint16_t*) huart->pTxBuffPtr;
 8004e26:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
			huart->Instance->TDR = (((uint32_t) (*tmp)) & 0x01FFUL);
 8004e28:	881b      	ldrh	r3, [r3, #0]
 8004e2a:	6802      	ldr	r2, [r0, #0]
 8004e2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e30:	6293      	str	r3, [r2, #40]	; 0x28
			huart->pTxBuffPtr += 2U;
 8004e32:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004e34:	3302      	adds	r3, #2
 8004e36:	64c3      	str	r3, [r0, #76]	; 0x4c
			huart->TxXferCount--;
 8004e38:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
}
 8004e46:	e7d6      	b.n	8004df6 <UART_TxISR_16BIT+0x6>

08004e48 <HAL_UART_Transmit_IT>:
	if (huart->gState == HAL_UART_STATE_READY) {
 8004e48:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8004e4a:	2b20      	cmp	r3, #32
 8004e4c:	d125      	bne.n	8004e9a <HAL_UART_Transmit_IT+0x52>
		if ((pData == NULL) || (Size == 0U)) {
 8004e4e:	2a00      	cmp	r2, #0
 8004e50:	bf18      	it	ne
 8004e52:	2900      	cmpne	r1, #0
 8004e54:	d023      	beq.n	8004e9e <HAL_UART_Transmit_IT+0x56>
		huart->pTxBuffPtr = pData;
 8004e56:	64c1      	str	r1, [r0, #76]	; 0x4c
		huart->TxXferSize = Size;
 8004e58:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
		huart->TxXferCount = Size;
 8004e5c:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
		huart->TxISR = NULL;
 8004e60:	2300      	movs	r3, #0
 8004e62:	66c3      	str	r3, [r0, #108]	; 0x6c
		huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e64:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e68:	2321      	movs	r3, #33	; 0x21
 8004e6a:	67c3      	str	r3, [r0, #124]	; 0x7c
		if ((huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004e6c:	6883      	ldr	r3, [r0, #8]
 8004e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e72:	d00c      	beq.n	8004e8e <HAL_UART_Transmit_IT+0x46>
			huart->TxISR = UART_TxISR_8BIT;
 8004e74:	4b0b      	ldr	r3, [pc, #44]	; (8004ea4 <HAL_UART_Transmit_IT+0x5c>)
 8004e76:	66c3      	str	r3, [r0, #108]	; 0x6c
		ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004e78:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7a:	e852 3f00 	ldrex	r3, [r2]
 8004e7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e82:	e842 3100 	strex	r1, r3, [r2]
 8004e86:	2900      	cmp	r1, #0
 8004e88:	d1f6      	bne.n	8004e78 <HAL_UART_Transmit_IT+0x30>
		return HAL_OK;
 8004e8a:	2000      	movs	r0, #0
 8004e8c:	4770      	bx	lr
				&& (huart->Init.Parity == UART_PARITY_NONE)) {
 8004e8e:	6903      	ldr	r3, [r0, #16]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1ef      	bne.n	8004e74 <HAL_UART_Transmit_IT+0x2c>
			huart->TxISR = UART_TxISR_16BIT;
 8004e94:	4b04      	ldr	r3, [pc, #16]	; (8004ea8 <HAL_UART_Transmit_IT+0x60>)
 8004e96:	66c3      	str	r3, [r0, #108]	; 0x6c
 8004e98:	e7ee      	b.n	8004e78 <HAL_UART_Transmit_IT+0x30>
		return HAL_BUSY;
 8004e9a:	2002      	movs	r0, #2
 8004e9c:	4770      	bx	lr
			return HAL_ERROR;
 8004e9e:	2001      	movs	r0, #1
}
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	08004d9d 	.word	0x08004d9d
 8004ea8:	08004df1 	.word	0x08004df1

08004eac <HAL_UART_TxCpltCallback>:
}
 8004eac:	4770      	bx	lr

08004eae <UART_EndTransmit_IT>:
 * @brief  Wrap up transmission in non-blocking mode.
 * @param  huart pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart) {
 8004eae:	b508      	push	{r3, lr}
	/* Disable the UART Transmit Complete Interrupt */
	ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004eb0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb2:	e852 3f00 	ldrex	r3, [r2]
 8004eb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eba:	e842 3100 	strex	r1, r3, [r2]
 8004ebe:	2900      	cmp	r1, #0
 8004ec0:	d1f6      	bne.n	8004eb0 <UART_EndTransmit_IT+0x2>

	/* Tx process is ended, restore huart->gState to Ready */
	huart->gState = HAL_UART_STATE_READY;
 8004ec2:	2320      	movs	r3, #32
 8004ec4:	67c3      	str	r3, [r0, #124]	; 0x7c

	/* Cleat TxISR function pointer */
	huart->TxISR = NULL;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	66c3      	str	r3, [r0, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
	/*Call legacy weak Tx complete callback*/
	HAL_UART_TxCpltCallback(huart);
 8004eca:	f7ff ffef 	bl	8004eac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ece:	bd08      	pop	{r3, pc}

08004ed0 <HAL_UART_ErrorCallback>:
}
 8004ed0:	4770      	bx	lr

08004ed2 <UART_DMAAbortOnError>:
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma) {
 8004ed2:	b508      	push	{r3, lr}
	UART_HandleTypeDef *huart = (UART_HandleTypeDef*) (hdma->Parent);
 8004ed4:	6b80      	ldr	r0, [r0, #56]	; 0x38
	huart->RxXferCount = 0U;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
	huart->TxXferCount = 0U;
 8004edc:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
	HAL_UART_ErrorCallback(huart);
 8004ee0:	f7ff fff6 	bl	8004ed0 <HAL_UART_ErrorCallback>
}
 8004ee4:	bd08      	pop	{r3, pc}

08004ee6 <HAL_UARTEx_RxEventCallback>:
}
 8004ee6:	4770      	bx	lr

08004ee8 <UART_RxISR_8BIT>:
/**
 * @brief RX interrupt handler for 7 or 8 bits data word length .
 * @param huart UART handle.
 * @retval None
 */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart) {
 8004ee8:	b508      	push	{r3, lr}
	uint16_t uhMask = huart->Mask;
 8004eea:	f8b0 305c 	ldrh.w	r3, [r0, #92]	; 0x5c
	uint16_t uhdata;

	/* Check that a Rx process is ongoing */
	if (huart->RxState == HAL_UART_STATE_BUSY_RX) {
 8004eee:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
 8004ef2:	2a22      	cmp	r2, #34	; 0x22
 8004ef4:	d005      	beq.n	8004f02 <UART_RxISR_8BIT+0x1a>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
			}
		}
	} else {
		/* Clear RXNE interrupt flag */
		__HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004ef6:	6802      	ldr	r2, [r0, #0]
 8004ef8:	6993      	ldr	r3, [r2, #24]
 8004efa:	f043 0308 	orr.w	r3, r3, #8
 8004efe:	6193      	str	r3, [r2, #24]
	}
}
 8004f00:	bd08      	pop	{r3, pc}
		uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004f02:	6802      	ldr	r2, [r0, #0]
 8004f04:	6a51      	ldr	r1, [r2, #36]	; 0x24
		*huart->pRxBuffPtr = (uint8_t) (uhdata & (uint8_t) uhMask);
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8004f0a:	400b      	ands	r3, r1
 8004f0c:	7013      	strb	r3, [r2, #0]
		huart->pRxBuffPtr++;
 8004f0e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004f10:	3301      	adds	r3, #1
 8004f12:	6543      	str	r3, [r0, #84]	; 0x54
		huart->RxXferCount--;
 8004f14:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
		if (huart->RxXferCount == 0U) {
 8004f22:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1e9      	bne.n	8004f00 <UART_RxISR_8BIT+0x18>
			ATOMIC_CLEAR_BIT(huart->Instance->CR1,
 8004f2c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2e:	e852 3f00 	ldrex	r3, [r2]
 8004f32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f36:	e842 3100 	strex	r1, r3, [r2]
 8004f3a:	2900      	cmp	r1, #0
 8004f3c:	d1f6      	bne.n	8004f2c <UART_RxISR_8BIT+0x44>
			ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f3e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f40:	f102 0308 	add.w	r3, r2, #8
 8004f44:	e853 3f00 	ldrex	r3, [r3]
 8004f48:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4c:	3208      	adds	r2, #8
 8004f4e:	e842 3100 	strex	r1, r3, [r2]
 8004f52:	2900      	cmp	r1, #0
 8004f54:	d1f3      	bne.n	8004f3e <UART_RxISR_8BIT+0x56>
			huart->RxState = HAL_UART_STATE_READY;
 8004f56:	2320      	movs	r3, #32
 8004f58:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
			huart->RxISR = NULL;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	6683      	str	r3, [r0, #104]	; 0x68
			huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f60:	6643      	str	r3, [r0, #100]	; 0x64
			if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
 8004f62:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d116      	bne.n	8004f96 <UART_RxISR_8BIT+0xae>
				huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	6603      	str	r3, [r0, #96]	; 0x60
				ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f6c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6e:	e852 3f00 	ldrex	r3, [r2]
 8004f72:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f76:	e842 3100 	strex	r1, r3, [r2]
 8004f7a:	2900      	cmp	r1, #0
 8004f7c:	d1f6      	bne.n	8004f6c <UART_RxISR_8BIT+0x84>
				if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET) {
 8004f7e:	6803      	ldr	r3, [r0, #0]
 8004f80:	69da      	ldr	r2, [r3, #28]
 8004f82:	f012 0f10 	tst.w	r2, #16
 8004f86:	d001      	beq.n	8004f8c <UART_RxISR_8BIT+0xa4>
					__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f88:	2210      	movs	r2, #16
 8004f8a:	621a      	str	r2, [r3, #32]
				HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f8c:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 8004f90:	f7ff ffa9 	bl	8004ee6 <HAL_UARTEx_RxEventCallback>
 8004f94:	e7b4      	b.n	8004f00 <UART_RxISR_8BIT+0x18>
				HAL_UART_RxCpltCallback(huart);
 8004f96:	f7fe fd59 	bl	8003a4c <HAL_UART_RxCpltCallback>
 8004f9a:	e7b1      	b.n	8004f00 <UART_RxISR_8BIT+0x18>

08004f9c <UART_RxISR_16BIT>:
 * @note   Function is called under interruption only, once
 *         interruptions have been enabled by HAL_UART_Receive_IT()
 * @param huart UART handle.
 * @retval None
 */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart) {
 8004f9c:	b508      	push	{r3, lr}
	uint16_t *tmp;
	uint16_t uhMask = huart->Mask;
 8004f9e:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
	uint16_t uhdata;

	/* Check that a Rx process is ongoing */
	if (huart->RxState == HAL_UART_STATE_BUSY_RX) {
 8004fa2:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8004fa6:	2b22      	cmp	r3, #34	; 0x22
 8004fa8:	d005      	beq.n	8004fb6 <UART_RxISR_16BIT+0x1a>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
			}
		}
	} else {
		/* Clear RXNE interrupt flag */
		__HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004faa:	6802      	ldr	r2, [r0, #0]
 8004fac:	6993      	ldr	r3, [r2, #24]
 8004fae:	f043 0308 	orr.w	r3, r3, #8
 8004fb2:	6193      	str	r3, [r2, #24]
	}
}
 8004fb4:	bd08      	pop	{r3, pc}
		uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004fb6:	6803      	ldr	r3, [r0, #0]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		tmp = (uint16_t*) huart->pRxBuffPtr;
 8004fba:	6d41      	ldr	r1, [r0, #84]	; 0x54
		*tmp = (uint16_t) (uhdata & uhMask);
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	800b      	strh	r3, [r1, #0]
		huart->pRxBuffPtr += 2U;
 8004fc0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004fc2:	3302      	adds	r3, #2
 8004fc4:	6543      	str	r3, [r0, #84]	; 0x54
		huart->RxXferCount--;
 8004fc6:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
		if (huart->RxXferCount == 0U) {
 8004fd4:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1ea      	bne.n	8004fb4 <UART_RxISR_16BIT+0x18>
			ATOMIC_CLEAR_BIT(huart->Instance->CR1,
 8004fde:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe0:	e852 3f00 	ldrex	r3, [r2]
 8004fe4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe8:	e842 3100 	strex	r1, r3, [r2]
 8004fec:	2900      	cmp	r1, #0
 8004fee:	d1f6      	bne.n	8004fde <UART_RxISR_16BIT+0x42>
			ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ff0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff2:	f102 0308 	add.w	r3, r2, #8
 8004ff6:	e853 3f00 	ldrex	r3, [r3]
 8004ffa:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffe:	3208      	adds	r2, #8
 8005000:	e842 3100 	strex	r1, r3, [r2]
 8005004:	2900      	cmp	r1, #0
 8005006:	d1f3      	bne.n	8004ff0 <UART_RxISR_16BIT+0x54>
			huart->RxState = HAL_UART_STATE_READY;
 8005008:	2320      	movs	r3, #32
 800500a:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
			huart->RxISR = NULL;
 800500e:	2300      	movs	r3, #0
 8005010:	6683      	str	r3, [r0, #104]	; 0x68
			huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005012:	6643      	str	r3, [r0, #100]	; 0x64
			if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
 8005014:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005016:	2b01      	cmp	r3, #1
 8005018:	d116      	bne.n	8005048 <UART_RxISR_16BIT+0xac>
				huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800501a:	2300      	movs	r3, #0
 800501c:	6603      	str	r3, [r0, #96]	; 0x60
				ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800501e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005020:	e852 3f00 	ldrex	r3, [r2]
 8005024:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005028:	e842 3100 	strex	r1, r3, [r2]
 800502c:	2900      	cmp	r1, #0
 800502e:	d1f6      	bne.n	800501e <UART_RxISR_16BIT+0x82>
				if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET) {
 8005030:	6803      	ldr	r3, [r0, #0]
 8005032:	69da      	ldr	r2, [r3, #28]
 8005034:	f012 0f10 	tst.w	r2, #16
 8005038:	d001      	beq.n	800503e <UART_RxISR_16BIT+0xa2>
					__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800503a:	2210      	movs	r2, #16
 800503c:	621a      	str	r2, [r3, #32]
				HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800503e:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 8005042:	f7ff ff50 	bl	8004ee6 <HAL_UARTEx_RxEventCallback>
 8005046:	e7b5      	b.n	8004fb4 <UART_RxISR_16BIT+0x18>
				HAL_UART_RxCpltCallback(huart);
 8005048:	f7fe fd00 	bl	8003a4c <HAL_UART_RxCpltCallback>
 800504c:	e7b2      	b.n	8004fb4 <UART_RxISR_16BIT+0x18>

0800504e <HAL_UARTEx_WakeupCallback>:
}
 800504e:	4770      	bx	lr

08005050 <HAL_UART_IRQHandler>:
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart) {
 8005050:	b570      	push	{r4, r5, r6, lr}
 8005052:	4604      	mov	r4, r0
	uint32_t isrflags = READ_REG(huart->Instance->ISR);
 8005054:	6801      	ldr	r1, [r0, #0]
 8005056:	69cb      	ldr	r3, [r1, #28]
	uint32_t cr1its = READ_REG(huart->Instance->CR1);
 8005058:	6808      	ldr	r0, [r1, #0]
	uint32_t cr3its = READ_REG(huart->Instance->CR3);
 800505a:	688d      	ldr	r5, [r1, #8]
	errorflags = (isrflags
 800505c:	f640 020f 	movw	r2, #2063	; 0x80f
	if (errorflags == 0U) {
 8005060:	401a      	ands	r2, r3
 8005062:	d105      	bne.n	8005070 <HAL_UART_IRQHandler+0x20>
		if (((isrflags & USART_ISR_RXNE) != 0U)
 8005064:	f013 0f20 	tst.w	r3, #32
 8005068:	d002      	beq.n	8005070 <HAL_UART_IRQHandler+0x20>
				&& ((cr1its & USART_CR1_RXNEIE) != 0U)) {
 800506a:	f010 0f20 	tst.w	r0, #32
 800506e:	d120      	bne.n	80050b2 <HAL_UART_IRQHandler+0x62>
	if ((errorflags != 0U)
 8005070:	b12a      	cbz	r2, 800507e <HAL_UART_IRQHandler+0x2e>
			&& (((cr3its & USART_CR3_EIE) != 0U)
 8005072:	f015 0201 	ands.w	r2, r5, #1
 8005076:	d122      	bne.n	80050be <HAL_UART_IRQHandler+0x6e>
					|| ((cr1its
 8005078:	4eae      	ldr	r6, [pc, #696]	; (8005334 <HAL_UART_IRQHandler+0x2e4>)
 800507a:	4230      	tst	r0, r6
 800507c:	d11f      	bne.n	80050be <HAL_UART_IRQHandler+0x6e>
	if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800507e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005080:	2a01      	cmp	r2, #1
 8005082:	f000 80ab 	beq.w	80051dc <HAL_UART_IRQHandler+0x18c>
	if (((isrflags & USART_ISR_WUF) != 0U)
 8005086:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800508a:	d003      	beq.n	8005094 <HAL_UART_IRQHandler+0x44>
			&& ((cr3its & USART_CR3_WUFIE) != 0U)) {
 800508c:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 8005090:	f040 813e 	bne.w	8005310 <HAL_UART_IRQHandler+0x2c0>
	if (((isrflags & USART_ISR_TXE) != 0U)
 8005094:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005098:	d003      	beq.n	80050a2 <HAL_UART_IRQHandler+0x52>
			&& ((cr1its & USART_CR1_TXEIE) != 0U)) {
 800509a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800509e:	f040 813e 	bne.w	800531e <HAL_UART_IRQHandler+0x2ce>
	if (((isrflags & USART_ISR_TC) != 0U)
 80050a2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80050a6:	d003      	beq.n	80050b0 <HAL_UART_IRQHandler+0x60>
			&& ((cr1its & USART_CR1_TCIE) != 0U)) {
 80050a8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80050ac:	f040 813e 	bne.w	800532c <HAL_UART_IRQHandler+0x2dc>
}
 80050b0:	bd70      	pop	{r4, r5, r6, pc}
			if (huart->RxISR != NULL) {
 80050b2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d0fb      	beq.n	80050b0 <HAL_UART_IRQHandler+0x60>
				huart->RxISR(huart);
 80050b8:	4620      	mov	r0, r4
 80050ba:	4798      	blx	r3
			return;
 80050bc:	e7f8      	b.n	80050b0 <HAL_UART_IRQHandler+0x60>
		if (((isrflags & USART_ISR_PE) != 0U)
 80050be:	f013 0f01 	tst.w	r3, #1
 80050c2:	d009      	beq.n	80050d8 <HAL_UART_IRQHandler+0x88>
				&& ((cr1its & USART_CR1_PEIE) != 0U)) {
 80050c4:	f410 7f80 	tst.w	r0, #256	; 0x100
 80050c8:	d006      	beq.n	80050d8 <HAL_UART_IRQHandler+0x88>
			__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80050ca:	2501      	movs	r5, #1
 80050cc:	620d      	str	r5, [r1, #32]
			huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050ce:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80050d2:	4329      	orrs	r1, r5
 80050d4:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
		if (((isrflags & USART_ISR_FE) != 0U)
 80050d8:	f013 0f02 	tst.w	r3, #2
 80050dc:	d009      	beq.n	80050f2 <HAL_UART_IRQHandler+0xa2>
				&& ((cr3its & USART_CR3_EIE) != 0U)) {
 80050de:	b142      	cbz	r2, 80050f2 <HAL_UART_IRQHandler+0xa2>
			__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80050e0:	6821      	ldr	r1, [r4, #0]
 80050e2:	2502      	movs	r5, #2
 80050e4:	620d      	str	r5, [r1, #32]
			huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050e6:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80050ea:	f041 0104 	orr.w	r1, r1, #4
 80050ee:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
		if (((isrflags & USART_ISR_NE) != 0U)
 80050f2:	f013 0f04 	tst.w	r3, #4
 80050f6:	d009      	beq.n	800510c <HAL_UART_IRQHandler+0xbc>
				&& ((cr3its & USART_CR3_EIE) != 0U)) {
 80050f8:	b142      	cbz	r2, 800510c <HAL_UART_IRQHandler+0xbc>
			__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80050fa:	6821      	ldr	r1, [r4, #0]
 80050fc:	2504      	movs	r5, #4
 80050fe:	620d      	str	r5, [r1, #32]
			huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005100:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8005104:	f041 0102 	orr.w	r1, r1, #2
 8005108:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
		if (((isrflags & USART_ISR_ORE) != 0U)
 800510c:	f013 0f08 	tst.w	r3, #8
 8005110:	d00b      	beq.n	800512a <HAL_UART_IRQHandler+0xda>
				&& (((cr1its & USART_CR1_RXNEIE) != 0U)
 8005112:	f010 0f20 	tst.w	r0, #32
 8005116:	d100      	bne.n	800511a <HAL_UART_IRQHandler+0xca>
						|| ((cr3its & USART_CR3_EIE) != 0U))) {
 8005118:	b13a      	cbz	r2, 800512a <HAL_UART_IRQHandler+0xda>
			__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800511a:	6822      	ldr	r2, [r4, #0]
 800511c:	2108      	movs	r1, #8
 800511e:	6211      	str	r1, [r2, #32]
			huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005120:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8005124:	430a      	orrs	r2, r1
 8005126:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
		if (((isrflags & USART_ISR_RTOF) != 0U)
 800512a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800512e:	d00c      	beq.n	800514a <HAL_UART_IRQHandler+0xfa>
				&& ((cr1its & USART_CR1_RTOIE) != 0U)) {
 8005130:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8005134:	d009      	beq.n	800514a <HAL_UART_IRQHandler+0xfa>
			__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005136:	6822      	ldr	r2, [r4, #0]
 8005138:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800513c:	6211      	str	r1, [r2, #32]
			huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800513e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8005142:	f042 0220 	orr.w	r2, r2, #32
 8005146:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
		if (huart->ErrorCode != HAL_UART_ERROR_NONE) {
 800514a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800514e:	2a00      	cmp	r2, #0
 8005150:	d0ae      	beq.n	80050b0 <HAL_UART_IRQHandler+0x60>
			if (((isrflags & USART_ISR_RXNE) != 0U)
 8005152:	f013 0f20 	tst.w	r3, #32
 8005156:	d006      	beq.n	8005166 <HAL_UART_IRQHandler+0x116>
					&& ((cr1its & USART_CR1_RXNEIE) != 0U)) {
 8005158:	f010 0f20 	tst.w	r0, #32
 800515c:	d003      	beq.n	8005166 <HAL_UART_IRQHandler+0x116>
				if (huart->RxISR != NULL) {
 800515e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8005160:	b10b      	cbz	r3, 8005166 <HAL_UART_IRQHandler+0x116>
					huart->RxISR(huart);
 8005162:	4620      	mov	r0, r4
 8005164:	4798      	blx	r3
			errorcode = huart->ErrorCode;
 8005166:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
			if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800516a:	6823      	ldr	r3, [r4, #0]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005172:	d102      	bne.n	800517a <HAL_UART_IRQHandler+0x12a>
					|| ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE))
 8005174:	f012 0f28 	tst.w	r2, #40	; 0x28
 8005178:	d029      	beq.n	80051ce <HAL_UART_IRQHandler+0x17e>
				UART_EndRxTransfer(huart);
 800517a:	4620      	mov	r0, r4
 800517c:	f7ff fde5 	bl	8004d4a <UART_EndRxTransfer>
				if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 8005180:	6823      	ldr	r3, [r4, #0]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005188:	d01d      	beq.n	80051c6 <HAL_UART_IRQHandler+0x176>
					ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800518a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518c:	f102 0308 	add.w	r3, r2, #8
 8005190:	e853 3f00 	ldrex	r3, [r3]
 8005194:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005198:	3208      	adds	r2, #8
 800519a:	e842 3100 	strex	r1, r3, [r2]
 800519e:	2900      	cmp	r1, #0
 80051a0:	d1f3      	bne.n	800518a <HAL_UART_IRQHandler+0x13a>
					if (huart->hdmarx != NULL) {
 80051a2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80051a4:	b15b      	cbz	r3, 80051be <HAL_UART_IRQHandler+0x16e>
						huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051a6:	4a64      	ldr	r2, [pc, #400]	; (8005338 <HAL_UART_IRQHandler+0x2e8>)
 80051a8:	651a      	str	r2, [r3, #80]	; 0x50
						if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK) {
 80051aa:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80051ac:	f7fe ff22 	bl	8003ff4 <HAL_DMA_Abort_IT>
 80051b0:	2800      	cmp	r0, #0
 80051b2:	f43f af7d 	beq.w	80050b0 <HAL_UART_IRQHandler+0x60>
							huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051b6:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80051b8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80051ba:	4798      	blx	r3
 80051bc:	e778      	b.n	80050b0 <HAL_UART_IRQHandler+0x60>
						HAL_UART_ErrorCallback(huart);
 80051be:	4620      	mov	r0, r4
 80051c0:	f7ff fe86 	bl	8004ed0 <HAL_UART_ErrorCallback>
 80051c4:	e774      	b.n	80050b0 <HAL_UART_IRQHandler+0x60>
					HAL_UART_ErrorCallback(huart);
 80051c6:	4620      	mov	r0, r4
 80051c8:	f7ff fe82 	bl	8004ed0 <HAL_UART_ErrorCallback>
 80051cc:	e770      	b.n	80050b0 <HAL_UART_IRQHandler+0x60>
				HAL_UART_ErrorCallback(huart);
 80051ce:	4620      	mov	r0, r4
 80051d0:	f7ff fe7e 	bl	8004ed0 <HAL_UART_ErrorCallback>
				huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051d4:	2300      	movs	r3, #0
 80051d6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		return;
 80051da:	e769      	b.n	80050b0 <HAL_UART_IRQHandler+0x60>
			&& ((isrflags & USART_ISR_IDLE) != 0U)
 80051dc:	f013 0f10 	tst.w	r3, #16
 80051e0:	f43f af51 	beq.w	8005086 <HAL_UART_IRQHandler+0x36>
			&& ((cr1its & USART_ISR_IDLE) != 0U)) {
 80051e4:	f010 0f10 	tst.w	r0, #16
 80051e8:	f43f af4d 	beq.w	8005086 <HAL_UART_IRQHandler+0x36>
		__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80051ec:	2310      	movs	r3, #16
 80051ee:	620b      	str	r3, [r1, #32]
		if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 80051f0:	6823      	ldr	r3, [r4, #0]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80051f8:	d050      	beq.n	800529c <HAL_UART_IRQHandler+0x24c>
			uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(
 80051fa:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80051fc:	6813      	ldr	r3, [r2, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	b29b      	uxth	r3, r3
			if ((nb_remaining_rx_data > 0U)
 8005202:	2b00      	cmp	r3, #0
 8005204:	f43f af54 	beq.w	80050b0 <HAL_UART_IRQHandler+0x60>
					&& (nb_remaining_rx_data < huart->RxXferSize)) {
 8005208:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 800520c:	4299      	cmp	r1, r3
 800520e:	f67f af4f 	bls.w	80050b0 <HAL_UART_IRQHandler+0x60>
				huart->RxXferCount = nb_remaining_rx_data;
 8005212:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
				if (huart->hdmarx->Init.Mode != DMA_CIRCULAR) {
 8005216:	69d3      	ldr	r3, [r2, #28]
 8005218:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800521c:	d031      	beq.n	8005282 <HAL_UART_IRQHandler+0x232>
					ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800521e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005220:	e852 3f00 	ldrex	r3, [r2]
 8005224:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005228:	e842 3100 	strex	r1, r3, [r2]
 800522c:	2900      	cmp	r1, #0
 800522e:	d1f6      	bne.n	800521e <HAL_UART_IRQHandler+0x1ce>
					ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005230:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005232:	f102 0308 	add.w	r3, r2, #8
 8005236:	e853 3f00 	ldrex	r3, [r3]
 800523a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523e:	3208      	adds	r2, #8
 8005240:	e842 3100 	strex	r1, r3, [r2]
 8005244:	2900      	cmp	r1, #0
 8005246:	d1f3      	bne.n	8005230 <HAL_UART_IRQHandler+0x1e0>
					ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005248:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800524a:	f102 0308 	add.w	r3, r2, #8
 800524e:	e853 3f00 	ldrex	r3, [r3]
 8005252:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005256:	3208      	adds	r2, #8
 8005258:	e842 3100 	strex	r1, r3, [r2]
 800525c:	2900      	cmp	r1, #0
 800525e:	d1f3      	bne.n	8005248 <HAL_UART_IRQHandler+0x1f8>
					huart->RxState = HAL_UART_STATE_READY;
 8005260:	2320      	movs	r3, #32
 8005262:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
					huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005266:	2300      	movs	r3, #0
 8005268:	6623      	str	r3, [r4, #96]	; 0x60
					ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800526a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526c:	e852 3f00 	ldrex	r3, [r2]
 8005270:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005274:	e842 3100 	strex	r1, r3, [r2]
 8005278:	2900      	cmp	r1, #0
 800527a:	d1f6      	bne.n	800526a <HAL_UART_IRQHandler+0x21a>
					(void) HAL_DMA_Abort(huart->hdmarx);
 800527c:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800527e:	f7fe fe6f 	bl	8003f60 <HAL_DMA_Abort>
				huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005282:	2302      	movs	r3, #2
 8005284:	6663      	str	r3, [r4, #100]	; 0x64
						(huart->RxXferSize - huart->RxXferCount));
 8005286:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 800528a:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800528e:	b29b      	uxth	r3, r3
				HAL_UARTEx_RxEventCallback(huart,
 8005290:	1ac9      	subs	r1, r1, r3
 8005292:	b289      	uxth	r1, r1
 8005294:	4620      	mov	r0, r4
 8005296:	f7ff fe26 	bl	8004ee6 <HAL_UARTEx_RxEventCallback>
			return;
 800529a:	e709      	b.n	80050b0 <HAL_UART_IRQHandler+0x60>
			uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800529c:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 80052a0:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	1ac9      	subs	r1, r1, r3
 80052a8:	b289      	uxth	r1, r1
			if ((huart->RxXferCount > 0U) && (nb_rx_data > 0U)) {
 80052aa:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f43f aefd 	beq.w	80050b0 <HAL_UART_IRQHandler+0x60>
 80052b6:	2900      	cmp	r1, #0
 80052b8:	f43f aefa 	beq.w	80050b0 <HAL_UART_IRQHandler+0x60>
				ATOMIC_CLEAR_BIT(huart->Instance->CR1,
 80052bc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052be:	e852 3f00 	ldrex	r3, [r2]
 80052c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c6:	e842 3000 	strex	r0, r3, [r2]
 80052ca:	2800      	cmp	r0, #0
 80052cc:	d1f6      	bne.n	80052bc <HAL_UART_IRQHandler+0x26c>
				ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ce:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d0:	f102 0308 	add.w	r3, r2, #8
 80052d4:	e853 3f00 	ldrex	r3, [r3]
 80052d8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052dc:	3208      	adds	r2, #8
 80052de:	e842 3000 	strex	r0, r3, [r2]
 80052e2:	2800      	cmp	r0, #0
 80052e4:	d1f3      	bne.n	80052ce <HAL_UART_IRQHandler+0x27e>
				huart->RxState = HAL_UART_STATE_READY;
 80052e6:	2320      	movs	r3, #32
 80052e8:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
				huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ec:	2300      	movs	r3, #0
 80052ee:	6623      	str	r3, [r4, #96]	; 0x60
				huart->RxISR = NULL;
 80052f0:	66a3      	str	r3, [r4, #104]	; 0x68
				ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052f2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f4:	e852 3f00 	ldrex	r3, [r2]
 80052f8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fc:	e842 3000 	strex	r0, r3, [r2]
 8005300:	2800      	cmp	r0, #0
 8005302:	d1f6      	bne.n	80052f2 <HAL_UART_IRQHandler+0x2a2>
				huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005304:	2302      	movs	r3, #2
 8005306:	6663      	str	r3, [r4, #100]	; 0x64
				HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005308:	4620      	mov	r0, r4
 800530a:	f7ff fdec 	bl	8004ee6 <HAL_UARTEx_RxEventCallback>
			return;
 800530e:	e6cf      	b.n	80050b0 <HAL_UART_IRQHandler+0x60>
		__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005310:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005314:	620b      	str	r3, [r1, #32]
		HAL_UARTEx_WakeupCallback(huart);
 8005316:	4620      	mov	r0, r4
 8005318:	f7ff fe99 	bl	800504e <HAL_UARTEx_WakeupCallback>
		return;
 800531c:	e6c8      	b.n	80050b0 <HAL_UART_IRQHandler+0x60>
		if (huart->TxISR != NULL) {
 800531e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8005320:	2b00      	cmp	r3, #0
 8005322:	f43f aec5 	beq.w	80050b0 <HAL_UART_IRQHandler+0x60>
			huart->TxISR(huart);
 8005326:	4620      	mov	r0, r4
 8005328:	4798      	blx	r3
		return;
 800532a:	e6c1      	b.n	80050b0 <HAL_UART_IRQHandler+0x60>
		UART_EndTransmit_IT(huart);
 800532c:	4620      	mov	r0, r4
 800532e:	f7ff fdbe 	bl	8004eae <UART_EndTransmit_IT>
		return;
 8005332:	e6bd      	b.n	80050b0 <HAL_UART_IRQHandler+0x60>
 8005334:	04000120 	.word	0x04000120
 8005338:	08004ed3 	.word	0x08004ed3

0800533c <UART_SetConfig>:
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart) {
 800533c:	b510      	push	{r4, lr}
 800533e:	4604      	mov	r4, r0
	tmpreg = (uint32_t) huart->Init.WordLength | huart->Init.Parity
 8005340:	6883      	ldr	r3, [r0, #8]
 8005342:	6902      	ldr	r2, [r0, #16]
 8005344:	4313      	orrs	r3, r2
			| huart->Init.Mode | huart->Init.OverSampling;
 8005346:	6942      	ldr	r2, [r0, #20]
 8005348:	4313      	orrs	r3, r2
 800534a:	69c2      	ldr	r2, [r0, #28]
	tmpreg = (uint32_t) huart->Init.WordLength | huart->Init.Parity
 800534c:	4313      	orrs	r3, r2
	MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800534e:	6801      	ldr	r1, [r0, #0]
 8005350:	6808      	ldr	r0, [r1, #0]
 8005352:	4a93      	ldr	r2, [pc, #588]	; (80055a0 <UART_SetConfig+0x264>)
 8005354:	4002      	ands	r2, r0
 8005356:	431a      	orrs	r2, r3
 8005358:	600a      	str	r2, [r1, #0]
	MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800535a:	6822      	ldr	r2, [r4, #0]
 800535c:	6853      	ldr	r3, [r2, #4]
 800535e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005362:	68e1      	ldr	r1, [r4, #12]
 8005364:	430b      	orrs	r3, r1
 8005366:	6053      	str	r3, [r2, #4]
	tmpreg = (uint32_t) huart->Init.HwFlowCtl;
 8005368:	69a2      	ldr	r2, [r4, #24]
	tmpreg |= huart->Init.OneBitSampling;
 800536a:	6a23      	ldr	r3, [r4, #32]
 800536c:	431a      	orrs	r2, r3
	MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800536e:	6821      	ldr	r1, [r4, #0]
 8005370:	688b      	ldr	r3, [r1, #8]
 8005372:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005376:	4313      	orrs	r3, r2
 8005378:	608b      	str	r3, [r1, #8]
	UART_GETCLOCKSOURCE(huart, clocksource);
 800537a:	6823      	ldr	r3, [r4, #0]
 800537c:	4a89      	ldr	r2, [pc, #548]	; (80055a4 <UART_SetConfig+0x268>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d019      	beq.n	80053b6 <UART_SetConfig+0x7a>
 8005382:	4a89      	ldr	r2, [pc, #548]	; (80055a8 <UART_SetConfig+0x26c>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d029      	beq.n	80053dc <UART_SetConfig+0xa0>
 8005388:	4a88      	ldr	r2, [pc, #544]	; (80055ac <UART_SetConfig+0x270>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d03e      	beq.n	800540c <UART_SetConfig+0xd0>
 800538e:	4a88      	ldr	r2, [pc, #544]	; (80055b0 <UART_SetConfig+0x274>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d062      	beq.n	800545a <UART_SetConfig+0x11e>
 8005394:	4a87      	ldr	r2, [pc, #540]	; (80055b4 <UART_SetConfig+0x278>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d071      	beq.n	800547e <UART_SetConfig+0x142>
 800539a:	4a87      	ldr	r2, [pc, #540]	; (80055b8 <UART_SetConfig+0x27c>)
 800539c:	4293      	cmp	r3, r2
 800539e:	f000 8083 	beq.w	80054a8 <UART_SetConfig+0x16c>
 80053a2:	4a86      	ldr	r2, [pc, #536]	; (80055bc <UART_SetConfig+0x280>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	f000 8094 	beq.w	80054d2 <UART_SetConfig+0x196>
 80053aa:	4a85      	ldr	r2, [pc, #532]	; (80055c0 <UART_SetConfig+0x284>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	f000 80a5 	beq.w	80054fc <UART_SetConfig+0x1c0>
 80053b2:	2310      	movs	r3, #16
 80053b4:	e03a      	b.n	800542c <UART_SetConfig+0xf0>
 80053b6:	4b83      	ldr	r3, [pc, #524]	; (80055c4 <UART_SetConfig+0x288>)
 80053b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053bc:	f003 0303 	and.w	r3, r3, #3
 80053c0:	2b03      	cmp	r3, #3
 80053c2:	d809      	bhi.n	80053d8 <UART_SetConfig+0x9c>
 80053c4:	e8df f003 	tbb	[pc, r3]
 80053c8:	06ae0402 	.word	0x06ae0402
 80053cc:	2301      	movs	r3, #1
 80053ce:	e02d      	b.n	800542c <UART_SetConfig+0xf0>
 80053d0:	2304      	movs	r3, #4
 80053d2:	e02b      	b.n	800542c <UART_SetConfig+0xf0>
 80053d4:	2308      	movs	r3, #8
 80053d6:	e029      	b.n	800542c <UART_SetConfig+0xf0>
 80053d8:	2310      	movs	r3, #16
 80053da:	e027      	b.n	800542c <UART_SetConfig+0xf0>
 80053dc:	4b79      	ldr	r3, [pc, #484]	; (80055c4 <UART_SetConfig+0x288>)
 80053de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053e2:	f003 030c 	and.w	r3, r3, #12
 80053e6:	2b0c      	cmp	r3, #12
 80053e8:	d80e      	bhi.n	8005408 <UART_SetConfig+0xcc>
 80053ea:	e8df f003 	tbb	[pc, r3]
 80053ee:	0d07      	.short	0x0d07
 80053f0:	0d090d0d 	.word	0x0d090d0d
 80053f4:	0d9d0d0d 	.word	0x0d9d0d0d
 80053f8:	0d0d      	.short	0x0d0d
 80053fa:	0b          	.byte	0x0b
 80053fb:	00          	.byte	0x00
 80053fc:	2300      	movs	r3, #0
 80053fe:	e015      	b.n	800542c <UART_SetConfig+0xf0>
 8005400:	2304      	movs	r3, #4
 8005402:	e013      	b.n	800542c <UART_SetConfig+0xf0>
 8005404:	2308      	movs	r3, #8
 8005406:	e011      	b.n	800542c <UART_SetConfig+0xf0>
 8005408:	2310      	movs	r3, #16
 800540a:	e00f      	b.n	800542c <UART_SetConfig+0xf0>
 800540c:	4b6d      	ldr	r3, [pc, #436]	; (80055c4 <UART_SetConfig+0x288>)
 800540e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005412:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005416:	2b20      	cmp	r3, #32
 8005418:	f000 8088 	beq.w	800552c <UART_SetConfig+0x1f0>
 800541c:	d819      	bhi.n	8005452 <UART_SetConfig+0x116>
 800541e:	2b00      	cmp	r3, #0
 8005420:	f000 8086 	beq.w	8005530 <UART_SetConfig+0x1f4>
 8005424:	2b10      	cmp	r3, #16
 8005426:	f040 8085 	bne.w	8005534 <UART_SetConfig+0x1f8>
 800542a:	2304      	movs	r3, #4
	if (huart->Init.OverSampling == UART_OVERSAMPLING_8) {
 800542c:	69e0      	ldr	r0, [r4, #28]
 800542e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005432:	f000 80ab 	beq.w	800558c <UART_SetConfig+0x250>
		switch (clocksource) {
 8005436:	2b08      	cmp	r3, #8
 8005438:	f200 810c 	bhi.w	8005654 <UART_SetConfig+0x318>
 800543c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005440:	00fb00e8 	.word	0x00fb00e8
 8005444:	010a00e6 	.word	0x010a00e6
 8005448:	010a00fe 	.word	0x010a00fe
 800544c:	010a010a 	.word	0x010a010a
 8005450:	0101      	.short	0x0101
	UART_GETCLOCKSOURCE(huart, clocksource);
 8005452:	2b30      	cmp	r3, #48	; 0x30
 8005454:	d170      	bne.n	8005538 <UART_SetConfig+0x1fc>
 8005456:	2308      	movs	r3, #8
 8005458:	e7e8      	b.n	800542c <UART_SetConfig+0xf0>
 800545a:	4b5a      	ldr	r3, [pc, #360]	; (80055c4 <UART_SetConfig+0x288>)
 800545c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005460:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005464:	2b80      	cmp	r3, #128	; 0x80
 8005466:	d069      	beq.n	800553c <UART_SetConfig+0x200>
 8005468:	d805      	bhi.n	8005476 <UART_SetConfig+0x13a>
 800546a:	2b00      	cmp	r3, #0
 800546c:	d068      	beq.n	8005540 <UART_SetConfig+0x204>
 800546e:	2b40      	cmp	r3, #64	; 0x40
 8005470:	d168      	bne.n	8005544 <UART_SetConfig+0x208>
 8005472:	2304      	movs	r3, #4
 8005474:	e7da      	b.n	800542c <UART_SetConfig+0xf0>
 8005476:	2bc0      	cmp	r3, #192	; 0xc0
 8005478:	d166      	bne.n	8005548 <UART_SetConfig+0x20c>
 800547a:	2308      	movs	r3, #8
 800547c:	e7d6      	b.n	800542c <UART_SetConfig+0xf0>
 800547e:	4b51      	ldr	r3, [pc, #324]	; (80055c4 <UART_SetConfig+0x288>)
 8005480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005484:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005488:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800548c:	d05e      	beq.n	800554c <UART_SetConfig+0x210>
 800548e:	d806      	bhi.n	800549e <UART_SetConfig+0x162>
 8005490:	2b00      	cmp	r3, #0
 8005492:	d05d      	beq.n	8005550 <UART_SetConfig+0x214>
 8005494:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005498:	d15c      	bne.n	8005554 <UART_SetConfig+0x218>
 800549a:	2304      	movs	r3, #4
 800549c:	e7c6      	b.n	800542c <UART_SetConfig+0xf0>
 800549e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054a2:	d159      	bne.n	8005558 <UART_SetConfig+0x21c>
 80054a4:	2308      	movs	r3, #8
 80054a6:	e7c1      	b.n	800542c <UART_SetConfig+0xf0>
 80054a8:	4b46      	ldr	r3, [pc, #280]	; (80055c4 <UART_SetConfig+0x288>)
 80054aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ae:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80054b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054b6:	d051      	beq.n	800555c <UART_SetConfig+0x220>
 80054b8:	d806      	bhi.n	80054c8 <UART_SetConfig+0x18c>
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d050      	beq.n	8005560 <UART_SetConfig+0x224>
 80054be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054c2:	d14f      	bne.n	8005564 <UART_SetConfig+0x228>
 80054c4:	2304      	movs	r3, #4
 80054c6:	e7b1      	b.n	800542c <UART_SetConfig+0xf0>
 80054c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054cc:	d14c      	bne.n	8005568 <UART_SetConfig+0x22c>
 80054ce:	2308      	movs	r3, #8
 80054d0:	e7ac      	b.n	800542c <UART_SetConfig+0xf0>
 80054d2:	4b3c      	ldr	r3, [pc, #240]	; (80055c4 <UART_SetConfig+0x288>)
 80054d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80054dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054e0:	d044      	beq.n	800556c <UART_SetConfig+0x230>
 80054e2:	d806      	bhi.n	80054f2 <UART_SetConfig+0x1b6>
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d043      	beq.n	8005570 <UART_SetConfig+0x234>
 80054e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ec:	d142      	bne.n	8005574 <UART_SetConfig+0x238>
 80054ee:	2304      	movs	r3, #4
 80054f0:	e79c      	b.n	800542c <UART_SetConfig+0xf0>
 80054f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80054f6:	d13f      	bne.n	8005578 <UART_SetConfig+0x23c>
 80054f8:	2308      	movs	r3, #8
 80054fa:	e797      	b.n	800542c <UART_SetConfig+0xf0>
 80054fc:	4b31      	ldr	r3, [pc, #196]	; (80055c4 <UART_SetConfig+0x288>)
 80054fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005502:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005506:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800550a:	d037      	beq.n	800557c <UART_SetConfig+0x240>
 800550c:	d805      	bhi.n	800551a <UART_SetConfig+0x1de>
 800550e:	b3bb      	cbz	r3, 8005580 <UART_SetConfig+0x244>
 8005510:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005514:	d136      	bne.n	8005584 <UART_SetConfig+0x248>
 8005516:	2304      	movs	r3, #4
 8005518:	e788      	b.n	800542c <UART_SetConfig+0xf0>
 800551a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800551e:	d133      	bne.n	8005588 <UART_SetConfig+0x24c>
 8005520:	2308      	movs	r3, #8
 8005522:	e783      	b.n	800542c <UART_SetConfig+0xf0>
 8005524:	2302      	movs	r3, #2
 8005526:	e781      	b.n	800542c <UART_SetConfig+0xf0>
 8005528:	2302      	movs	r3, #2
 800552a:	e77f      	b.n	800542c <UART_SetConfig+0xf0>
 800552c:	2302      	movs	r3, #2
 800552e:	e77d      	b.n	800542c <UART_SetConfig+0xf0>
 8005530:	2300      	movs	r3, #0
 8005532:	e77b      	b.n	800542c <UART_SetConfig+0xf0>
 8005534:	2310      	movs	r3, #16
 8005536:	e779      	b.n	800542c <UART_SetConfig+0xf0>
 8005538:	2310      	movs	r3, #16
 800553a:	e777      	b.n	800542c <UART_SetConfig+0xf0>
 800553c:	2302      	movs	r3, #2
 800553e:	e775      	b.n	800542c <UART_SetConfig+0xf0>
 8005540:	2300      	movs	r3, #0
 8005542:	e773      	b.n	800542c <UART_SetConfig+0xf0>
 8005544:	2310      	movs	r3, #16
 8005546:	e771      	b.n	800542c <UART_SetConfig+0xf0>
 8005548:	2310      	movs	r3, #16
 800554a:	e76f      	b.n	800542c <UART_SetConfig+0xf0>
 800554c:	2302      	movs	r3, #2
 800554e:	e76d      	b.n	800542c <UART_SetConfig+0xf0>
 8005550:	2300      	movs	r3, #0
 8005552:	e76b      	b.n	800542c <UART_SetConfig+0xf0>
 8005554:	2310      	movs	r3, #16
 8005556:	e769      	b.n	800542c <UART_SetConfig+0xf0>
 8005558:	2310      	movs	r3, #16
 800555a:	e767      	b.n	800542c <UART_SetConfig+0xf0>
 800555c:	2302      	movs	r3, #2
 800555e:	e765      	b.n	800542c <UART_SetConfig+0xf0>
 8005560:	2301      	movs	r3, #1
 8005562:	e763      	b.n	800542c <UART_SetConfig+0xf0>
 8005564:	2310      	movs	r3, #16
 8005566:	e761      	b.n	800542c <UART_SetConfig+0xf0>
 8005568:	2310      	movs	r3, #16
 800556a:	e75f      	b.n	800542c <UART_SetConfig+0xf0>
 800556c:	2302      	movs	r3, #2
 800556e:	e75d      	b.n	800542c <UART_SetConfig+0xf0>
 8005570:	2300      	movs	r3, #0
 8005572:	e75b      	b.n	800542c <UART_SetConfig+0xf0>
 8005574:	2310      	movs	r3, #16
 8005576:	e759      	b.n	800542c <UART_SetConfig+0xf0>
 8005578:	2310      	movs	r3, #16
 800557a:	e757      	b.n	800542c <UART_SetConfig+0xf0>
 800557c:	2302      	movs	r3, #2
 800557e:	e755      	b.n	800542c <UART_SetConfig+0xf0>
 8005580:	2300      	movs	r3, #0
 8005582:	e753      	b.n	800542c <UART_SetConfig+0xf0>
 8005584:	2310      	movs	r3, #16
 8005586:	e751      	b.n	800542c <UART_SetConfig+0xf0>
 8005588:	2310      	movs	r3, #16
 800558a:	e74f      	b.n	800542c <UART_SetConfig+0xf0>
		switch (clocksource) {
 800558c:	2b08      	cmp	r3, #8
 800558e:	d85b      	bhi.n	8005648 <UART_SetConfig+0x30c>
 8005590:	e8df f003 	tbb	[pc, r3]
 8005594:	5a3a341a 	.word	0x5a3a341a
 8005598:	5a5a5a37 	.word	0x5a5a5a37
 800559c:	1e          	.byte	0x1e
 800559d:	00          	.byte	0x00
 800559e:	bf00      	nop
 80055a0:	efff69f3 	.word	0xefff69f3
 80055a4:	40011000 	.word	0x40011000
 80055a8:	40004400 	.word	0x40004400
 80055ac:	40004800 	.word	0x40004800
 80055b0:	40004c00 	.word	0x40004c00
 80055b4:	40005000 	.word	0x40005000
 80055b8:	40011400 	.word	0x40011400
 80055bc:	40007800 	.word	0x40007800
 80055c0:	40007c00 	.word	0x40007c00
 80055c4:	40023800 	.word	0x40023800
			pclk = HAL_RCC_GetPCLK1Freq();
 80055c8:	f7ff f9aa 	bl	8004920 <HAL_RCC_GetPCLK1Freq>
		if (pclk != 0U) {
 80055cc:	2800      	cmp	r0, #0
 80055ce:	d03d      	beq.n	800564c <UART_SetConfig+0x310>
			usartdiv = (uint32_t) (UART_DIV_SAMPLING8(pclk,
 80055d0:	6862      	ldr	r2, [r4, #4]
 80055d2:	0853      	lsrs	r3, r2, #1
 80055d4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80055d8:	fbb3 f3f2 	udiv	r3, r3, r2
			if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX)) {
 80055dc:	f1a3 0110 	sub.w	r1, r3, #16
 80055e0:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80055e4:	4291      	cmp	r1, r2
 80055e6:	d833      	bhi.n	8005650 <UART_SetConfig+0x314>
				brrtemp = (uint16_t) (usartdiv & 0xFFF0U);
 80055e8:	b29a      	uxth	r2, r3
 80055ea:	f022 020f 	bic.w	r2, r2, #15
				brrtemp |= (uint16_t) ((usartdiv & (uint16_t) 0x000FU) >> 1U);
 80055ee:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80055f2:	4313      	orrs	r3, r2
				huart->Instance->BRR = brrtemp;
 80055f4:	6822      	ldr	r2, [r4, #0]
 80055f6:	60d3      	str	r3, [r2, #12]
 80055f8:	2000      	movs	r0, #0
 80055fa:	e030      	b.n	800565e <UART_SetConfig+0x322>
			pclk = HAL_RCC_GetPCLK2Freq();
 80055fc:	f7ff f9a0 	bl	8004940 <HAL_RCC_GetPCLK2Freq>
			break;
 8005600:	e7e4      	b.n	80055cc <UART_SetConfig+0x290>
			pclk = HAL_RCC_GetSysClockFreq();
 8005602:	f7ff f87d 	bl	8004700 <HAL_RCC_GetSysClockFreq>
			break;
 8005606:	e7e1      	b.n	80055cc <UART_SetConfig+0x290>
			pclk = (uint32_t) HSI_VALUE;
 8005608:	4817      	ldr	r0, [pc, #92]	; (8005668 <UART_SetConfig+0x32c>)
 800560a:	e7e1      	b.n	80055d0 <UART_SetConfig+0x294>
		switch (clocksource) {
 800560c:	4816      	ldr	r0, [pc, #88]	; (8005668 <UART_SetConfig+0x32c>)
 800560e:	e002      	b.n	8005616 <UART_SetConfig+0x2da>
			pclk = HAL_RCC_GetPCLK1Freq();
 8005610:	f7ff f986 	bl	8004920 <HAL_RCC_GetPCLK1Freq>
		if (pclk != 0U) {
 8005614:	b300      	cbz	r0, 8005658 <UART_SetConfig+0x31c>
			usartdiv = (uint32_t) (UART_DIV_SAMPLING16(pclk,
 8005616:	6863      	ldr	r3, [r4, #4]
 8005618:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800561c:	fbb0 f0f3 	udiv	r0, r0, r3
			if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX)) {
 8005620:	f1a0 0210 	sub.w	r2, r0, #16
 8005624:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8005628:	429a      	cmp	r2, r3
 800562a:	d817      	bhi.n	800565c <UART_SetConfig+0x320>
				huart->Instance->BRR = (uint16_t) usartdiv;
 800562c:	6823      	ldr	r3, [r4, #0]
 800562e:	b280      	uxth	r0, r0
 8005630:	60d8      	str	r0, [r3, #12]
 8005632:	2000      	movs	r0, #0
 8005634:	e013      	b.n	800565e <UART_SetConfig+0x322>
			pclk = HAL_RCC_GetPCLK2Freq();
 8005636:	f7ff f983 	bl	8004940 <HAL_RCC_GetPCLK2Freq>
			break;
 800563a:	e7eb      	b.n	8005614 <UART_SetConfig+0x2d8>
			pclk = HAL_RCC_GetSysClockFreq();
 800563c:	f7ff f860 	bl	8004700 <HAL_RCC_GetSysClockFreq>
			break;
 8005640:	e7e8      	b.n	8005614 <UART_SetConfig+0x2d8>
			pclk = (uint32_t) LSE_VALUE;
 8005642:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005646:	e7e6      	b.n	8005616 <UART_SetConfig+0x2da>
		switch (clocksource) {
 8005648:	2001      	movs	r0, #1
 800564a:	e008      	b.n	800565e <UART_SetConfig+0x322>
 800564c:	2000      	movs	r0, #0
 800564e:	e006      	b.n	800565e <UART_SetConfig+0x322>
				ret = HAL_ERROR;
 8005650:	2001      	movs	r0, #1
 8005652:	e004      	b.n	800565e <UART_SetConfig+0x322>
		switch (clocksource) {
 8005654:	2001      	movs	r0, #1
 8005656:	e002      	b.n	800565e <UART_SetConfig+0x322>
 8005658:	2000      	movs	r0, #0
 800565a:	e000      	b.n	800565e <UART_SetConfig+0x322>
				ret = HAL_ERROR;
 800565c:	2001      	movs	r0, #1
	huart->RxISR = NULL;
 800565e:	2300      	movs	r3, #0
 8005660:	66a3      	str	r3, [r4, #104]	; 0x68
	huart->TxISR = NULL;
 8005662:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8005664:	bd10      	pop	{r4, pc}
 8005666:	bf00      	nop
 8005668:	00f42400 	.word	0x00f42400

0800566c <UART_AdvFeatureConfig>:
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 800566c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800566e:	f013 0f01 	tst.w	r3, #1
 8005672:	d006      	beq.n	8005682 <UART_AdvFeatureConfig+0x16>
		MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV,
 8005674:	6802      	ldr	r2, [r0, #0]
 8005676:	6853      	ldr	r3, [r2, #4]
 8005678:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800567c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800567e:	430b      	orrs	r3, r1
 8005680:	6053      	str	r3, [r2, #4]
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8005682:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005684:	f013 0f02 	tst.w	r3, #2
 8005688:	d006      	beq.n	8005698 <UART_AdvFeatureConfig+0x2c>
		MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV,
 800568a:	6802      	ldr	r2, [r0, #0]
 800568c:	6853      	ldr	r3, [r2, #4]
 800568e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005692:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005694:	430b      	orrs	r3, r1
 8005696:	6053      	str	r3, [r2, #4]
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8005698:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800569a:	f013 0f04 	tst.w	r3, #4
 800569e:	d006      	beq.n	80056ae <UART_AdvFeatureConfig+0x42>
		MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV,
 80056a0:	6802      	ldr	r2, [r0, #0]
 80056a2:	6853      	ldr	r3, [r2, #4]
 80056a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056a8:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80056aa:	430b      	orrs	r3, r1
 80056ac:	6053      	str	r3, [r2, #4]
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 80056ae:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80056b0:	f013 0f08 	tst.w	r3, #8
 80056b4:	d006      	beq.n	80056c4 <UART_AdvFeatureConfig+0x58>
		MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP,
 80056b6:	6802      	ldr	r2, [r0, #0]
 80056b8:	6853      	ldr	r3, [r2, #4]
 80056ba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80056be:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80056c0:	430b      	orrs	r3, r1
 80056c2:	6053      	str	r3, [r2, #4]
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 80056c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80056c6:	f013 0f10 	tst.w	r3, #16
 80056ca:	d006      	beq.n	80056da <UART_AdvFeatureConfig+0x6e>
		MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS,
 80056cc:	6802      	ldr	r2, [r0, #0]
 80056ce:	6893      	ldr	r3, [r2, #8]
 80056d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056d4:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80056d6:	430b      	orrs	r3, r1
 80056d8:	6093      	str	r3, [r2, #8]
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 80056da:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80056dc:	f013 0f20 	tst.w	r3, #32
 80056e0:	d006      	beq.n	80056f0 <UART_AdvFeatureConfig+0x84>
		MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE,
 80056e2:	6802      	ldr	r2, [r0, #0]
 80056e4:	6893      	ldr	r3, [r2, #8]
 80056e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056ea:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80056ec:	430b      	orrs	r3, r1
 80056ee:	6093      	str	r3, [r2, #8]
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 80056f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80056f2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80056f6:	d00a      	beq.n	800570e <UART_AdvFeatureConfig+0xa2>
		MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN,
 80056f8:	6802      	ldr	r2, [r0, #0]
 80056fa:	6853      	ldr	r3, [r2, #4]
 80056fc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005700:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8005702:	430b      	orrs	r3, r1
 8005704:	6053      	str	r3, [r2, #4]
		if (huart->AdvancedInit.AutoBaudRateEnable
 8005706:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005708:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800570c:	d00b      	beq.n	8005726 <UART_AdvFeatureConfig+0xba>
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 800570e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005710:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005714:	d006      	beq.n	8005724 <UART_AdvFeatureConfig+0xb8>
		MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST,
 8005716:	6802      	ldr	r2, [r0, #0]
 8005718:	6853      	ldr	r3, [r2, #4]
 800571a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800571e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005720:	430b      	orrs	r3, r1
 8005722:	6053      	str	r3, [r2, #4]
}
 8005724:	4770      	bx	lr
			MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE,
 8005726:	6802      	ldr	r2, [r0, #0]
 8005728:	6853      	ldr	r3, [r2, #4]
 800572a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800572e:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8005730:	430b      	orrs	r3, r1
 8005732:	6053      	str	r3, [r2, #4]
 8005734:	e7eb      	b.n	800570e <UART_AdvFeatureConfig+0xa2>

08005736 <UART_WaitOnFlagUntilTimeout>:
		uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout) {
 8005736:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800573a:	4605      	mov	r5, r0
 800573c:	460f      	mov	r7, r1
 800573e:	4616      	mov	r6, r2
 8005740:	4699      	mov	r9, r3
 8005742:	f8dd 8020 	ldr.w	r8, [sp, #32]
	while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) {
 8005746:	682b      	ldr	r3, [r5, #0]
 8005748:	69dc      	ldr	r4, [r3, #28]
 800574a:	ea37 0404 	bics.w	r4, r7, r4
 800574e:	bf0c      	ite	eq
 8005750:	2401      	moveq	r4, #1
 8005752:	2400      	movne	r4, #0
 8005754:	42b4      	cmp	r4, r6
 8005756:	d155      	bne.n	8005804 <UART_WaitOnFlagUntilTimeout+0xce>
		if (Timeout != HAL_MAX_DELAY) {
 8005758:	f1b8 3fff 	cmp.w	r8, #4294967295
 800575c:	d0f3      	beq.n	8005746 <UART_WaitOnFlagUntilTimeout+0x10>
			if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 800575e:	f7fe fba3 	bl	8003ea8 <HAL_GetTick>
 8005762:	eba0 0009 	sub.w	r0, r0, r9
 8005766:	4540      	cmp	r0, r8
 8005768:	d82e      	bhi.n	80057c8 <UART_WaitOnFlagUntilTimeout+0x92>
 800576a:	f1b8 0f00 	cmp.w	r8, #0
 800576e:	d02b      	beq.n	80057c8 <UART_WaitOnFlagUntilTimeout+0x92>
			if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) {
 8005770:	682b      	ldr	r3, [r5, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	f012 0f04 	tst.w	r2, #4
 8005778:	d0e5      	beq.n	8005746 <UART_WaitOnFlagUntilTimeout+0x10>
				if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET) {
 800577a:	69da      	ldr	r2, [r3, #28]
 800577c:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8005780:	d0e1      	beq.n	8005746 <UART_WaitOnFlagUntilTimeout+0x10>
					__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005782:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005786:	621a      	str	r2, [r3, #32]
					ATOMIC_CLEAR_BIT(huart->Instance->CR1,
 8005788:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578a:	e852 3f00 	ldrex	r3, [r2]
 800578e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005792:	e842 3100 	strex	r1, r3, [r2]
 8005796:	2900      	cmp	r1, #0
 8005798:	d1f6      	bne.n	8005788 <UART_WaitOnFlagUntilTimeout+0x52>
					ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800579a:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579c:	f102 0308 	add.w	r3, r2, #8
 80057a0:	e853 3f00 	ldrex	r3, [r3]
 80057a4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a8:	3208      	adds	r2, #8
 80057aa:	e842 3100 	strex	r1, r3, [r2]
 80057ae:	2900      	cmp	r1, #0
 80057b0:	d1f3      	bne.n	800579a <UART_WaitOnFlagUntilTimeout+0x64>
					huart->gState = HAL_UART_STATE_READY;
 80057b2:	2320      	movs	r3, #32
 80057b4:	67eb      	str	r3, [r5, #124]	; 0x7c
					huart->RxState = HAL_UART_STATE_READY;
 80057b6:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
					huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057ba:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
					__HAL_UNLOCK(huart);
 80057be:	2300      	movs	r3, #0
 80057c0:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
					return HAL_TIMEOUT;
 80057c4:	2003      	movs	r0, #3
 80057c6:	e01e      	b.n	8005806 <UART_WaitOnFlagUntilTimeout+0xd0>
				ATOMIC_CLEAR_BIT(huart->Instance->CR1,
 80057c8:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ca:	e852 3f00 	ldrex	r3, [r2]
 80057ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d2:	e842 3100 	strex	r1, r3, [r2]
 80057d6:	2900      	cmp	r1, #0
 80057d8:	d1f6      	bne.n	80057c8 <UART_WaitOnFlagUntilTimeout+0x92>
				ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057da:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057dc:	f102 0308 	add.w	r3, r2, #8
 80057e0:	e853 3f00 	ldrex	r3, [r3]
 80057e4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e8:	3208      	adds	r2, #8
 80057ea:	e842 3100 	strex	r1, r3, [r2]
 80057ee:	2900      	cmp	r1, #0
 80057f0:	d1f3      	bne.n	80057da <UART_WaitOnFlagUntilTimeout+0xa4>
				huart->gState = HAL_UART_STATE_READY;
 80057f2:	2320      	movs	r3, #32
 80057f4:	67eb      	str	r3, [r5, #124]	; 0x7c
				huart->RxState = HAL_UART_STATE_READY;
 80057f6:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
				__HAL_UNLOCK(huart);
 80057fa:	2300      	movs	r3, #0
 80057fc:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
				return HAL_TIMEOUT;
 8005800:	2003      	movs	r0, #3
 8005802:	e000      	b.n	8005806 <UART_WaitOnFlagUntilTimeout+0xd0>
	return HAL_OK;
 8005804:	2000      	movs	r0, #0
}
 8005806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800580a <HAL_UART_Receive>:
		uint16_t Size, uint32_t Timeout) {
 800580a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800580e:	b083      	sub	sp, #12
 8005810:	461e      	mov	r6, r3
	if (huart->RxState == HAL_UART_STATE_READY) {
 8005812:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8005816:	2b20      	cmp	r3, #32
 8005818:	d178      	bne.n	800590c <HAL_UART_Receive+0x102>
 800581a:	4604      	mov	r4, r0
 800581c:	460d      	mov	r5, r1
 800581e:	4690      	mov	r8, r2
		if ((pData == NULL) || (Size == 0U)) {
 8005820:	2a00      	cmp	r2, #0
 8005822:	bf18      	it	ne
 8005824:	2900      	cmpne	r1, #0
 8005826:	d101      	bne.n	800582c <HAL_UART_Receive+0x22>
			return HAL_ERROR;
 8005828:	2001      	movs	r0, #1
 800582a:	e070      	b.n	800590e <HAL_UART_Receive+0x104>
		huart->ErrorCode = HAL_UART_ERROR_NONE;
 800582c:	2300      	movs	r3, #0
 800582e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005832:	2222      	movs	r2, #34	; 0x22
 8005834:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005838:	6603      	str	r3, [r0, #96]	; 0x60
		tickstart = HAL_GetTick();
 800583a:	f7fe fb35 	bl	8003ea8 <HAL_GetTick>
 800583e:	4607      	mov	r7, r0
		huart->RxXferSize = Size;
 8005840:	f8a4 8058 	strh.w	r8, [r4, #88]	; 0x58
		huart->RxXferCount = Size;
 8005844:	f8a4 805a 	strh.w	r8, [r4, #90]	; 0x5a
		UART_MASK_COMPUTATION(huart);
 8005848:	68a3      	ldr	r3, [r4, #8]
 800584a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800584e:	d006      	beq.n	800585e <HAL_UART_Receive+0x54>
 8005850:	b9a3      	cbnz	r3, 800587c <HAL_UART_Receive+0x72>
 8005852:	6922      	ldr	r2, [r4, #16]
 8005854:	b972      	cbnz	r2, 8005874 <HAL_UART_Receive+0x6a>
 8005856:	22ff      	movs	r2, #255	; 0xff
 8005858:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 800585c:	e014      	b.n	8005888 <HAL_UART_Receive+0x7e>
 800585e:	6922      	ldr	r2, [r4, #16]
 8005860:	b922      	cbnz	r2, 800586c <HAL_UART_Receive+0x62>
 8005862:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005866:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 800586a:	e00d      	b.n	8005888 <HAL_UART_Receive+0x7e>
 800586c:	22ff      	movs	r2, #255	; 0xff
 800586e:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8005872:	e009      	b.n	8005888 <HAL_UART_Receive+0x7e>
 8005874:	227f      	movs	r2, #127	; 0x7f
 8005876:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 800587a:	e005      	b.n	8005888 <HAL_UART_Receive+0x7e>
 800587c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005880:	d00a      	beq.n	8005898 <HAL_UART_Receive+0x8e>
 8005882:	2200      	movs	r2, #0
 8005884:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
		uhMask = huart->Mask;
 8005888:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
		if ((huart->Init.WordLength == UART_WORDLENGTH_9B)
 800588c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005890:	d00c      	beq.n	80058ac <HAL_UART_Receive+0xa2>
			pdata16bits = NULL;
 8005892:	f04f 0900 	mov.w	r9, #0
 8005896:	e01f      	b.n	80058d8 <HAL_UART_Receive+0xce>
		UART_MASK_COMPUTATION(huart);
 8005898:	6922      	ldr	r2, [r4, #16]
 800589a:	b91a      	cbnz	r2, 80058a4 <HAL_UART_Receive+0x9a>
 800589c:	227f      	movs	r2, #127	; 0x7f
 800589e:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80058a2:	e7f1      	b.n	8005888 <HAL_UART_Receive+0x7e>
 80058a4:	223f      	movs	r2, #63	; 0x3f
 80058a6:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80058aa:	e7ed      	b.n	8005888 <HAL_UART_Receive+0x7e>
				&& (huart->Init.Parity == UART_PARITY_NONE)) {
 80058ac:	6923      	ldr	r3, [r4, #16]
 80058ae:	b113      	cbz	r3, 80058b6 <HAL_UART_Receive+0xac>
			pdata16bits = NULL;
 80058b0:	f04f 0900 	mov.w	r9, #0
 80058b4:	e010      	b.n	80058d8 <HAL_UART_Receive+0xce>
			pdata16bits = (uint16_t*) pData;
 80058b6:	46a9      	mov	r9, r5
			pdata8bits = NULL;
 80058b8:	2500      	movs	r5, #0
 80058ba:	e00d      	b.n	80058d8 <HAL_UART_Receive+0xce>
						(uint8_t) (huart->Instance->RDR & (uint8_t) uhMask);
 80058bc:	6823      	ldr	r3, [r4, #0]
 80058be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058c0:	fa5f f388 	uxtb.w	r3, r8
 80058c4:	4013      	ands	r3, r2
				*pdata8bits =
 80058c6:	f805 3b01 	strb.w	r3, [r5], #1
			huart->RxXferCount--;
 80058ca:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 80058ce:	b292      	uxth	r2, r2
 80058d0:	3a01      	subs	r2, #1
 80058d2:	b292      	uxth	r2, r2
 80058d4:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
		while (huart->RxXferCount > 0U) {
 80058d8:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80058dc:	b29b      	uxth	r3, r3
 80058de:	b183      	cbz	r3, 8005902 <HAL_UART_Receive+0xf8>
			if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET,
 80058e0:	9600      	str	r6, [sp, #0]
 80058e2:	463b      	mov	r3, r7
 80058e4:	2200      	movs	r2, #0
 80058e6:	2120      	movs	r1, #32
 80058e8:	4620      	mov	r0, r4
 80058ea:	f7ff ff24 	bl	8005736 <UART_WaitOnFlagUntilTimeout>
 80058ee:	b988      	cbnz	r0, 8005914 <HAL_UART_Receive+0x10a>
			if (pdata8bits == NULL) {
 80058f0:	2d00      	cmp	r5, #0
 80058f2:	d1e3      	bne.n	80058bc <HAL_UART_Receive+0xb2>
				*pdata16bits = (uint16_t) (huart->Instance->RDR & uhMask);
 80058f4:	6823      	ldr	r3, [r4, #0]
 80058f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f8:	ea08 0303 	and.w	r3, r8, r3
 80058fc:	f829 3b02 	strh.w	r3, [r9], #2
				pdata16bits++;
 8005900:	e7e3      	b.n	80058ca <HAL_UART_Receive+0xc0>
		huart->RxState = HAL_UART_STATE_READY;
 8005902:	2320      	movs	r3, #32
 8005904:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		return HAL_OK;
 8005908:	2000      	movs	r0, #0
 800590a:	e000      	b.n	800590e <HAL_UART_Receive+0x104>
		return HAL_BUSY;
 800590c:	2002      	movs	r0, #2
}
 800590e:	b003      	add	sp, #12
 8005910:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				return HAL_TIMEOUT;
 8005914:	2003      	movs	r0, #3
 8005916:	e7fa      	b.n	800590e <HAL_UART_Receive+0x104>

08005918 <UART_CheckIdleState>:
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart) {
 8005918:	b530      	push	{r4, r5, lr}
 800591a:	b083      	sub	sp, #12
 800591c:	4604      	mov	r4, r0
	huart->ErrorCode = HAL_UART_ERROR_NONE;
 800591e:	2300      	movs	r3, #0
 8005920:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	tickstart = HAL_GetTick();
 8005924:	f7fe fac0 	bl	8003ea8 <HAL_GetTick>
 8005928:	4605      	mov	r5, r0
	if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE) {
 800592a:	6822      	ldr	r2, [r4, #0]
 800592c:	6812      	ldr	r2, [r2, #0]
 800592e:	f012 0f08 	tst.w	r2, #8
 8005932:	d10f      	bne.n	8005954 <UART_CheckIdleState+0x3c>
	if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE) {
 8005934:	6823      	ldr	r3, [r4, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f013 0f04 	tst.w	r3, #4
 800593c:	d118      	bne.n	8005970 <UART_CheckIdleState+0x58>
	huart->gState = HAL_UART_STATE_READY;
 800593e:	2320      	movs	r3, #32
 8005940:	67e3      	str	r3, [r4, #124]	; 0x7c
	huart->RxState = HAL_UART_STATE_READY;
 8005942:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005946:	2000      	movs	r0, #0
 8005948:	6620      	str	r0, [r4, #96]	; 0x60
	huart->RxEventType = HAL_UART_RXEVENT_TC;
 800594a:	6660      	str	r0, [r4, #100]	; 0x64
	__HAL_UNLOCK(huart);
 800594c:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
}
 8005950:	b003      	add	sp, #12
 8005952:	bd30      	pop	{r4, r5, pc}
		if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET,
 8005954:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005958:	9300      	str	r3, [sp, #0]
 800595a:	4603      	mov	r3, r0
 800595c:	2200      	movs	r2, #0
 800595e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005962:	4620      	mov	r0, r4
 8005964:	f7ff fee7 	bl	8005736 <UART_WaitOnFlagUntilTimeout>
 8005968:	2800      	cmp	r0, #0
 800596a:	d0e3      	beq.n	8005934 <UART_CheckIdleState+0x1c>
			return HAL_TIMEOUT;
 800596c:	2003      	movs	r0, #3
 800596e:	e7ef      	b.n	8005950 <UART_CheckIdleState+0x38>
		if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,
 8005970:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005974:	9300      	str	r3, [sp, #0]
 8005976:	462b      	mov	r3, r5
 8005978:	2200      	movs	r2, #0
 800597a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800597e:	4620      	mov	r0, r4
 8005980:	f7ff fed9 	bl	8005736 <UART_WaitOnFlagUntilTimeout>
 8005984:	2800      	cmp	r0, #0
 8005986:	d0da      	beq.n	800593e <UART_CheckIdleState+0x26>
			return HAL_TIMEOUT;
 8005988:	2003      	movs	r0, #3
 800598a:	e7e1      	b.n	8005950 <UART_CheckIdleState+0x38>

0800598c <HAL_UART_Init>:
	if (huart == NULL) {
 800598c:	b368      	cbz	r0, 80059ea <HAL_UART_Init+0x5e>
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart) {
 800598e:	b510      	push	{r4, lr}
 8005990:	4604      	mov	r4, r0
	if (huart->gState == HAL_UART_STATE_RESET) {
 8005992:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8005994:	b303      	cbz	r3, 80059d8 <HAL_UART_Init+0x4c>
	huart->gState = HAL_UART_STATE_BUSY;
 8005996:	2324      	movs	r3, #36	; 0x24
 8005998:	67e3      	str	r3, [r4, #124]	; 0x7c
	__HAL_UART_DISABLE(huart);
 800599a:	6822      	ldr	r2, [r4, #0]
 800599c:	6813      	ldr	r3, [r2, #0]
 800599e:	f023 0301 	bic.w	r3, r3, #1
 80059a2:	6013      	str	r3, [r2, #0]
	if (UART_SetConfig(huart) == HAL_ERROR) {
 80059a4:	4620      	mov	r0, r4
 80059a6:	f7ff fcc9 	bl	800533c <UART_SetConfig>
 80059aa:	2801      	cmp	r0, #1
 80059ac:	d013      	beq.n	80059d6 <HAL_UART_Init+0x4a>
	if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT) {
 80059ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059b0:	b9bb      	cbnz	r3, 80059e2 <HAL_UART_Init+0x56>
	CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059b2:	6822      	ldr	r2, [r4, #0]
 80059b4:	6853      	ldr	r3, [r2, #4]
 80059b6:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80059ba:	6053      	str	r3, [r2, #4]
	CLEAR_BIT(huart->Instance->CR3,
 80059bc:	6822      	ldr	r2, [r4, #0]
 80059be:	6893      	ldr	r3, [r2, #8]
 80059c0:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80059c4:	6093      	str	r3, [r2, #8]
	__HAL_UART_ENABLE(huart);
 80059c6:	6822      	ldr	r2, [r4, #0]
 80059c8:	6813      	ldr	r3, [r2, #0]
 80059ca:	f043 0301 	orr.w	r3, r3, #1
 80059ce:	6013      	str	r3, [r2, #0]
	return (UART_CheckIdleState(huart));
 80059d0:	4620      	mov	r0, r4
 80059d2:	f7ff ffa1 	bl	8005918 <UART_CheckIdleState>
}
 80059d6:	bd10      	pop	{r4, pc}
		huart->Lock = HAL_UNLOCKED;
 80059d8:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
		HAL_UART_MspInit(huart);
 80059dc:	f7fe f970 	bl	8003cc0 <HAL_UART_MspInit>
 80059e0:	e7d9      	b.n	8005996 <HAL_UART_Init+0xa>
		UART_AdvFeatureConfig(huart);
 80059e2:	4620      	mov	r0, r4
 80059e4:	f7ff fe42 	bl	800566c <UART_AdvFeatureConfig>
 80059e8:	e7e3      	b.n	80059b2 <HAL_UART_Init+0x26>
		return HAL_ERROR;
 80059ea:	2001      	movs	r0, #1
}
 80059ec:	4770      	bx	lr
	...

080059f0 <UART_Start_Receive_IT>:
	huart->pRxBuffPtr = pData;
 80059f0:	6541      	str	r1, [r0, #84]	; 0x54
	huart->RxXferSize = Size;
 80059f2:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
	huart->RxXferCount = Size;
 80059f6:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
	huart->RxISR = NULL;
 80059fa:	2300      	movs	r3, #0
 80059fc:	6683      	str	r3, [r0, #104]	; 0x68
	UART_MASK_COMPUTATION(huart);
 80059fe:	6883      	ldr	r3, [r0, #8]
 8005a00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a04:	d006      	beq.n	8005a14 <UART_Start_Receive_IT+0x24>
 8005a06:	b9a3      	cbnz	r3, 8005a32 <UART_Start_Receive_IT+0x42>
 8005a08:	6903      	ldr	r3, [r0, #16]
 8005a0a:	b973      	cbnz	r3, 8005a2a <UART_Start_Receive_IT+0x3a>
 8005a0c:	23ff      	movs	r3, #255	; 0xff
 8005a0e:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8005a12:	e014      	b.n	8005a3e <UART_Start_Receive_IT+0x4e>
 8005a14:	6903      	ldr	r3, [r0, #16]
 8005a16:	b923      	cbnz	r3, 8005a22 <UART_Start_Receive_IT+0x32>
 8005a18:	f240 13ff 	movw	r3, #511	; 0x1ff
 8005a1c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8005a20:	e00d      	b.n	8005a3e <UART_Start_Receive_IT+0x4e>
 8005a22:	23ff      	movs	r3, #255	; 0xff
 8005a24:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8005a28:	e009      	b.n	8005a3e <UART_Start_Receive_IT+0x4e>
 8005a2a:	237f      	movs	r3, #127	; 0x7f
 8005a2c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8005a30:	e005      	b.n	8005a3e <UART_Start_Receive_IT+0x4e>
 8005a32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a36:	d027      	beq.n	8005a88 <UART_Start_Receive_IT+0x98>
 8005a38:	2300      	movs	r3, #0
 8005a3a:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
	huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a44:	2322      	movs	r3, #34	; 0x22
 8005a46:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a4a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4c:	f102 0308 	add.w	r3, r2, #8
 8005a50:	e853 3f00 	ldrex	r3, [r3]
 8005a54:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a58:	3208      	adds	r2, #8
 8005a5a:	e842 3100 	strex	r1, r3, [r2]
 8005a5e:	2900      	cmp	r1, #0
 8005a60:	d1f3      	bne.n	8005a4a <UART_Start_Receive_IT+0x5a>
	if ((huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005a62:	6883      	ldr	r3, [r0, #8]
 8005a64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a68:	d018      	beq.n	8005a9c <UART_Start_Receive_IT+0xac>
		huart->RxISR = UART_RxISR_8BIT;
 8005a6a:	4b14      	ldr	r3, [pc, #80]	; (8005abc <UART_Start_Receive_IT+0xcc>)
 8005a6c:	6683      	str	r3, [r0, #104]	; 0x68
	if (huart->Init.Parity != UART_PARITY_NONE) {
 8005a6e:	6903      	ldr	r3, [r0, #16]
 8005a70:	b1d3      	cbz	r3, 8005aa8 <UART_Start_Receive_IT+0xb8>
		ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005a72:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a74:	e852 3f00 	ldrex	r3, [r2]
 8005a78:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a7c:	e842 3100 	strex	r1, r3, [r2]
 8005a80:	2900      	cmp	r1, #0
 8005a82:	d1f6      	bne.n	8005a72 <UART_Start_Receive_IT+0x82>
}
 8005a84:	2000      	movs	r0, #0
 8005a86:	4770      	bx	lr
	UART_MASK_COMPUTATION(huart);
 8005a88:	6903      	ldr	r3, [r0, #16]
 8005a8a:	b91b      	cbnz	r3, 8005a94 <UART_Start_Receive_IT+0xa4>
 8005a8c:	237f      	movs	r3, #127	; 0x7f
 8005a8e:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8005a92:	e7d4      	b.n	8005a3e <UART_Start_Receive_IT+0x4e>
 8005a94:	233f      	movs	r3, #63	; 0x3f
 8005a96:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8005a9a:	e7d0      	b.n	8005a3e <UART_Start_Receive_IT+0x4e>
			&& (huart->Init.Parity == UART_PARITY_NONE)) {
 8005a9c:	6903      	ldr	r3, [r0, #16]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1e3      	bne.n	8005a6a <UART_Start_Receive_IT+0x7a>
		huart->RxISR = UART_RxISR_16BIT;
 8005aa2:	4b07      	ldr	r3, [pc, #28]	; (8005ac0 <UART_Start_Receive_IT+0xd0>)
 8005aa4:	6683      	str	r3, [r0, #104]	; 0x68
 8005aa6:	e7e2      	b.n	8005a6e <UART_Start_Receive_IT+0x7e>
		ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005aa8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aaa:	e852 3f00 	ldrex	r3, [r2]
 8005aae:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab2:	e842 3100 	strex	r1, r3, [r2]
 8005ab6:	2900      	cmp	r1, #0
 8005ab8:	d1f6      	bne.n	8005aa8 <UART_Start_Receive_IT+0xb8>
 8005aba:	e7e3      	b.n	8005a84 <UART_Start_Receive_IT+0x94>
 8005abc:	08004ee9 	.word	0x08004ee9
 8005ac0:	08004f9d 	.word	0x08004f9d

08005ac4 <HAL_UART_Receive_IT>:
		uint16_t Size) {
 8005ac4:	b538      	push	{r3, r4, r5, lr}
	if (huart->RxState == HAL_UART_STATE_READY) {
 8005ac6:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8005aca:	2b20      	cmp	r3, #32
 8005acc:	d116      	bne.n	8005afc <HAL_UART_Receive_IT+0x38>
		if ((pData == NULL) || (Size == 0U)) {
 8005ace:	2a00      	cmp	r2, #0
 8005ad0:	bf18      	it	ne
 8005ad2:	2900      	cmpne	r1, #0
 8005ad4:	d014      	beq.n	8005b00 <HAL_UART_Receive_IT+0x3c>
		huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	6603      	str	r3, [r0, #96]	; 0x60
		if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U) {
 8005ada:	6803      	ldr	r3, [r0, #0]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8005ae2:	d008      	beq.n	8005af6 <HAL_UART_Receive_IT+0x32>
			ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005ae4:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae6:	e854 3f00 	ldrex	r3, [r4]
 8005aea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aee:	e844 3500 	strex	r5, r3, [r4]
 8005af2:	2d00      	cmp	r5, #0
 8005af4:	d1f6      	bne.n	8005ae4 <HAL_UART_Receive_IT+0x20>
		return (UART_Start_Receive_IT(huart, pData, Size));
 8005af6:	f7ff ff7b 	bl	80059f0 <UART_Start_Receive_IT>
 8005afa:	e000      	b.n	8005afe <HAL_UART_Receive_IT+0x3a>
		return HAL_BUSY;
 8005afc:	2002      	movs	r0, #2
}
 8005afe:	bd38      	pop	{r3, r4, r5, pc}
			return HAL_ERROR;
 8005b00:	2001      	movs	r0, #1
 8005b02:	e7fc      	b.n	8005afe <HAL_UART_Receive_IT+0x3a>

08005b04 <std>:
 8005b04:	2300      	movs	r3, #0
 8005b06:	b510      	push	{r4, lr}
 8005b08:	4604      	mov	r4, r0
 8005b0a:	e9c0 3300 	strd	r3, r3, [r0]
 8005b0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b12:	6083      	str	r3, [r0, #8]
 8005b14:	8181      	strh	r1, [r0, #12]
 8005b16:	6643      	str	r3, [r0, #100]	; 0x64
 8005b18:	81c2      	strh	r2, [r0, #14]
 8005b1a:	6183      	str	r3, [r0, #24]
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	2208      	movs	r2, #8
 8005b20:	305c      	adds	r0, #92	; 0x5c
 8005b22:	f000 faa3 	bl	800606c <memset>
 8005b26:	4b0d      	ldr	r3, [pc, #52]	; (8005b5c <std+0x58>)
 8005b28:	6263      	str	r3, [r4, #36]	; 0x24
 8005b2a:	4b0d      	ldr	r3, [pc, #52]	; (8005b60 <std+0x5c>)
 8005b2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b2e:	4b0d      	ldr	r3, [pc, #52]	; (8005b64 <std+0x60>)
 8005b30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b32:	4b0d      	ldr	r3, [pc, #52]	; (8005b68 <std+0x64>)
 8005b34:	6323      	str	r3, [r4, #48]	; 0x30
 8005b36:	4b0d      	ldr	r3, [pc, #52]	; (8005b6c <std+0x68>)
 8005b38:	6224      	str	r4, [r4, #32]
 8005b3a:	429c      	cmp	r4, r3
 8005b3c:	d006      	beq.n	8005b4c <std+0x48>
 8005b3e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005b42:	4294      	cmp	r4, r2
 8005b44:	d002      	beq.n	8005b4c <std+0x48>
 8005b46:	33d0      	adds	r3, #208	; 0xd0
 8005b48:	429c      	cmp	r4, r3
 8005b4a:	d105      	bne.n	8005b58 <std+0x54>
 8005b4c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b54:	f000 bafc 	b.w	8006150 <__retarget_lock_init_recursive>
 8005b58:	bd10      	pop	{r4, pc}
 8005b5a:	bf00      	nop
 8005b5c:	08005ebd 	.word	0x08005ebd
 8005b60:	08005edf 	.word	0x08005edf
 8005b64:	08005f17 	.word	0x08005f17
 8005b68:	08005f3b 	.word	0x08005f3b
 8005b6c:	20004ad8 	.word	0x20004ad8

08005b70 <stdio_exit_handler>:
 8005b70:	4a02      	ldr	r2, [pc, #8]	; (8005b7c <stdio_exit_handler+0xc>)
 8005b72:	4903      	ldr	r1, [pc, #12]	; (8005b80 <stdio_exit_handler+0x10>)
 8005b74:	4803      	ldr	r0, [pc, #12]	; (8005b84 <stdio_exit_handler+0x14>)
 8005b76:	f000 b869 	b.w	8005c4c <_fwalk_sglue>
 8005b7a:	bf00      	nop
 8005b7c:	20000010 	.word	0x20000010
 8005b80:	08006481 	.word	0x08006481
 8005b84:	2000001c 	.word	0x2000001c

08005b88 <cleanup_stdio>:
 8005b88:	6841      	ldr	r1, [r0, #4]
 8005b8a:	4b0c      	ldr	r3, [pc, #48]	; (8005bbc <cleanup_stdio+0x34>)
 8005b8c:	4299      	cmp	r1, r3
 8005b8e:	b510      	push	{r4, lr}
 8005b90:	4604      	mov	r4, r0
 8005b92:	d001      	beq.n	8005b98 <cleanup_stdio+0x10>
 8005b94:	f000 fc74 	bl	8006480 <_fflush_r>
 8005b98:	68a1      	ldr	r1, [r4, #8]
 8005b9a:	4b09      	ldr	r3, [pc, #36]	; (8005bc0 <cleanup_stdio+0x38>)
 8005b9c:	4299      	cmp	r1, r3
 8005b9e:	d002      	beq.n	8005ba6 <cleanup_stdio+0x1e>
 8005ba0:	4620      	mov	r0, r4
 8005ba2:	f000 fc6d 	bl	8006480 <_fflush_r>
 8005ba6:	68e1      	ldr	r1, [r4, #12]
 8005ba8:	4b06      	ldr	r3, [pc, #24]	; (8005bc4 <cleanup_stdio+0x3c>)
 8005baa:	4299      	cmp	r1, r3
 8005bac:	d004      	beq.n	8005bb8 <cleanup_stdio+0x30>
 8005bae:	4620      	mov	r0, r4
 8005bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bb4:	f000 bc64 	b.w	8006480 <_fflush_r>
 8005bb8:	bd10      	pop	{r4, pc}
 8005bba:	bf00      	nop
 8005bbc:	20004ad8 	.word	0x20004ad8
 8005bc0:	20004b40 	.word	0x20004b40
 8005bc4:	20004ba8 	.word	0x20004ba8

08005bc8 <global_stdio_init.part.0>:
 8005bc8:	b510      	push	{r4, lr}
 8005bca:	4b0b      	ldr	r3, [pc, #44]	; (8005bf8 <global_stdio_init.part.0+0x30>)
 8005bcc:	4c0b      	ldr	r4, [pc, #44]	; (8005bfc <global_stdio_init.part.0+0x34>)
 8005bce:	4a0c      	ldr	r2, [pc, #48]	; (8005c00 <global_stdio_init.part.0+0x38>)
 8005bd0:	601a      	str	r2, [r3, #0]
 8005bd2:	4620      	mov	r0, r4
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	2104      	movs	r1, #4
 8005bd8:	f7ff ff94 	bl	8005b04 <std>
 8005bdc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005be0:	2201      	movs	r2, #1
 8005be2:	2109      	movs	r1, #9
 8005be4:	f7ff ff8e 	bl	8005b04 <std>
 8005be8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005bec:	2202      	movs	r2, #2
 8005bee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bf2:	2112      	movs	r1, #18
 8005bf4:	f7ff bf86 	b.w	8005b04 <std>
 8005bf8:	20004c10 	.word	0x20004c10
 8005bfc:	20004ad8 	.word	0x20004ad8
 8005c00:	08005b71 	.word	0x08005b71

08005c04 <__sfp_lock_acquire>:
 8005c04:	4801      	ldr	r0, [pc, #4]	; (8005c0c <__sfp_lock_acquire+0x8>)
 8005c06:	f000 baa4 	b.w	8006152 <__retarget_lock_acquire_recursive>
 8005c0a:	bf00      	nop
 8005c0c:	20004c19 	.word	0x20004c19

08005c10 <__sfp_lock_release>:
 8005c10:	4801      	ldr	r0, [pc, #4]	; (8005c18 <__sfp_lock_release+0x8>)
 8005c12:	f000 ba9f 	b.w	8006154 <__retarget_lock_release_recursive>
 8005c16:	bf00      	nop
 8005c18:	20004c19 	.word	0x20004c19

08005c1c <__sinit>:
 8005c1c:	b510      	push	{r4, lr}
 8005c1e:	4604      	mov	r4, r0
 8005c20:	f7ff fff0 	bl	8005c04 <__sfp_lock_acquire>
 8005c24:	6a23      	ldr	r3, [r4, #32]
 8005c26:	b11b      	cbz	r3, 8005c30 <__sinit+0x14>
 8005c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c2c:	f7ff bff0 	b.w	8005c10 <__sfp_lock_release>
 8005c30:	4b04      	ldr	r3, [pc, #16]	; (8005c44 <__sinit+0x28>)
 8005c32:	6223      	str	r3, [r4, #32]
 8005c34:	4b04      	ldr	r3, [pc, #16]	; (8005c48 <__sinit+0x2c>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d1f5      	bne.n	8005c28 <__sinit+0xc>
 8005c3c:	f7ff ffc4 	bl	8005bc8 <global_stdio_init.part.0>
 8005c40:	e7f2      	b.n	8005c28 <__sinit+0xc>
 8005c42:	bf00      	nop
 8005c44:	08005b89 	.word	0x08005b89
 8005c48:	20004c10 	.word	0x20004c10

08005c4c <_fwalk_sglue>:
 8005c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c50:	4607      	mov	r7, r0
 8005c52:	4688      	mov	r8, r1
 8005c54:	4614      	mov	r4, r2
 8005c56:	2600      	movs	r6, #0
 8005c58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c5c:	f1b9 0901 	subs.w	r9, r9, #1
 8005c60:	d505      	bpl.n	8005c6e <_fwalk_sglue+0x22>
 8005c62:	6824      	ldr	r4, [r4, #0]
 8005c64:	2c00      	cmp	r4, #0
 8005c66:	d1f7      	bne.n	8005c58 <_fwalk_sglue+0xc>
 8005c68:	4630      	mov	r0, r6
 8005c6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c6e:	89ab      	ldrh	r3, [r5, #12]
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d907      	bls.n	8005c84 <_fwalk_sglue+0x38>
 8005c74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c78:	3301      	adds	r3, #1
 8005c7a:	d003      	beq.n	8005c84 <_fwalk_sglue+0x38>
 8005c7c:	4629      	mov	r1, r5
 8005c7e:	4638      	mov	r0, r7
 8005c80:	47c0      	blx	r8
 8005c82:	4306      	orrs	r6, r0
 8005c84:	3568      	adds	r5, #104	; 0x68
 8005c86:	e7e9      	b.n	8005c5c <_fwalk_sglue+0x10>

08005c88 <putchar>:
 8005c88:	4b02      	ldr	r3, [pc, #8]	; (8005c94 <putchar+0xc>)
 8005c8a:	4601      	mov	r1, r0
 8005c8c:	6818      	ldr	r0, [r3, #0]
 8005c8e:	6882      	ldr	r2, [r0, #8]
 8005c90:	f000 bc80 	b.w	8006594 <_putc_r>
 8005c94:	20000068 	.word	0x20000068

08005c98 <_puts_r>:
 8005c98:	6a03      	ldr	r3, [r0, #32]
 8005c9a:	b570      	push	{r4, r5, r6, lr}
 8005c9c:	6884      	ldr	r4, [r0, #8]
 8005c9e:	4605      	mov	r5, r0
 8005ca0:	460e      	mov	r6, r1
 8005ca2:	b90b      	cbnz	r3, 8005ca8 <_puts_r+0x10>
 8005ca4:	f7ff ffba 	bl	8005c1c <__sinit>
 8005ca8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005caa:	07db      	lsls	r3, r3, #31
 8005cac:	d405      	bmi.n	8005cba <_puts_r+0x22>
 8005cae:	89a3      	ldrh	r3, [r4, #12]
 8005cb0:	0598      	lsls	r0, r3, #22
 8005cb2:	d402      	bmi.n	8005cba <_puts_r+0x22>
 8005cb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cb6:	f000 fa4c 	bl	8006152 <__retarget_lock_acquire_recursive>
 8005cba:	89a3      	ldrh	r3, [r4, #12]
 8005cbc:	0719      	lsls	r1, r3, #28
 8005cbe:	d513      	bpl.n	8005ce8 <_puts_r+0x50>
 8005cc0:	6923      	ldr	r3, [r4, #16]
 8005cc2:	b18b      	cbz	r3, 8005ce8 <_puts_r+0x50>
 8005cc4:	3e01      	subs	r6, #1
 8005cc6:	68a3      	ldr	r3, [r4, #8]
 8005cc8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	60a3      	str	r3, [r4, #8]
 8005cd0:	b9e9      	cbnz	r1, 8005d0e <_puts_r+0x76>
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	da2e      	bge.n	8005d34 <_puts_r+0x9c>
 8005cd6:	4622      	mov	r2, r4
 8005cd8:	210a      	movs	r1, #10
 8005cda:	4628      	mov	r0, r5
 8005cdc:	f000 f931 	bl	8005f42 <__swbuf_r>
 8005ce0:	3001      	adds	r0, #1
 8005ce2:	d007      	beq.n	8005cf4 <_puts_r+0x5c>
 8005ce4:	250a      	movs	r5, #10
 8005ce6:	e007      	b.n	8005cf8 <_puts_r+0x60>
 8005ce8:	4621      	mov	r1, r4
 8005cea:	4628      	mov	r0, r5
 8005cec:	f000 f966 	bl	8005fbc <__swsetup_r>
 8005cf0:	2800      	cmp	r0, #0
 8005cf2:	d0e7      	beq.n	8005cc4 <_puts_r+0x2c>
 8005cf4:	f04f 35ff 	mov.w	r5, #4294967295
 8005cf8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005cfa:	07da      	lsls	r2, r3, #31
 8005cfc:	d405      	bmi.n	8005d0a <_puts_r+0x72>
 8005cfe:	89a3      	ldrh	r3, [r4, #12]
 8005d00:	059b      	lsls	r3, r3, #22
 8005d02:	d402      	bmi.n	8005d0a <_puts_r+0x72>
 8005d04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d06:	f000 fa25 	bl	8006154 <__retarget_lock_release_recursive>
 8005d0a:	4628      	mov	r0, r5
 8005d0c:	bd70      	pop	{r4, r5, r6, pc}
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	da04      	bge.n	8005d1c <_puts_r+0x84>
 8005d12:	69a2      	ldr	r2, [r4, #24]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	dc06      	bgt.n	8005d26 <_puts_r+0x8e>
 8005d18:	290a      	cmp	r1, #10
 8005d1a:	d004      	beq.n	8005d26 <_puts_r+0x8e>
 8005d1c:	6823      	ldr	r3, [r4, #0]
 8005d1e:	1c5a      	adds	r2, r3, #1
 8005d20:	6022      	str	r2, [r4, #0]
 8005d22:	7019      	strb	r1, [r3, #0]
 8005d24:	e7cf      	b.n	8005cc6 <_puts_r+0x2e>
 8005d26:	4622      	mov	r2, r4
 8005d28:	4628      	mov	r0, r5
 8005d2a:	f000 f90a 	bl	8005f42 <__swbuf_r>
 8005d2e:	3001      	adds	r0, #1
 8005d30:	d1c9      	bne.n	8005cc6 <_puts_r+0x2e>
 8005d32:	e7df      	b.n	8005cf4 <_puts_r+0x5c>
 8005d34:	6823      	ldr	r3, [r4, #0]
 8005d36:	250a      	movs	r5, #10
 8005d38:	1c5a      	adds	r2, r3, #1
 8005d3a:	6022      	str	r2, [r4, #0]
 8005d3c:	701d      	strb	r5, [r3, #0]
 8005d3e:	e7db      	b.n	8005cf8 <_puts_r+0x60>

08005d40 <puts>:
 8005d40:	4b02      	ldr	r3, [pc, #8]	; (8005d4c <puts+0xc>)
 8005d42:	4601      	mov	r1, r0
 8005d44:	6818      	ldr	r0, [r3, #0]
 8005d46:	f7ff bfa7 	b.w	8005c98 <_puts_r>
 8005d4a:	bf00      	nop
 8005d4c:	20000068 	.word	0x20000068

08005d50 <setbuf>:
 8005d50:	fab1 f281 	clz	r2, r1
 8005d54:	0952      	lsrs	r2, r2, #5
 8005d56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d5a:	0052      	lsls	r2, r2, #1
 8005d5c:	f000 b800 	b.w	8005d60 <setvbuf>

08005d60 <setvbuf>:
 8005d60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005d64:	461d      	mov	r5, r3
 8005d66:	4b54      	ldr	r3, [pc, #336]	; (8005eb8 <setvbuf+0x158>)
 8005d68:	681f      	ldr	r7, [r3, #0]
 8005d6a:	4604      	mov	r4, r0
 8005d6c:	460e      	mov	r6, r1
 8005d6e:	4690      	mov	r8, r2
 8005d70:	b127      	cbz	r7, 8005d7c <setvbuf+0x1c>
 8005d72:	6a3b      	ldr	r3, [r7, #32]
 8005d74:	b913      	cbnz	r3, 8005d7c <setvbuf+0x1c>
 8005d76:	4638      	mov	r0, r7
 8005d78:	f7ff ff50 	bl	8005c1c <__sinit>
 8005d7c:	f1b8 0f02 	cmp.w	r8, #2
 8005d80:	d006      	beq.n	8005d90 <setvbuf+0x30>
 8005d82:	f1b8 0f01 	cmp.w	r8, #1
 8005d86:	f200 8094 	bhi.w	8005eb2 <setvbuf+0x152>
 8005d8a:	2d00      	cmp	r5, #0
 8005d8c:	f2c0 8091 	blt.w	8005eb2 <setvbuf+0x152>
 8005d90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d92:	07da      	lsls	r2, r3, #31
 8005d94:	d405      	bmi.n	8005da2 <setvbuf+0x42>
 8005d96:	89a3      	ldrh	r3, [r4, #12]
 8005d98:	059b      	lsls	r3, r3, #22
 8005d9a:	d402      	bmi.n	8005da2 <setvbuf+0x42>
 8005d9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d9e:	f000 f9d8 	bl	8006152 <__retarget_lock_acquire_recursive>
 8005da2:	4621      	mov	r1, r4
 8005da4:	4638      	mov	r0, r7
 8005da6:	f000 fb6b 	bl	8006480 <_fflush_r>
 8005daa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005dac:	b141      	cbz	r1, 8005dc0 <setvbuf+0x60>
 8005dae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005db2:	4299      	cmp	r1, r3
 8005db4:	d002      	beq.n	8005dbc <setvbuf+0x5c>
 8005db6:	4638      	mov	r0, r7
 8005db8:	f000 f9dc 	bl	8006174 <_free_r>
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	6363      	str	r3, [r4, #52]	; 0x34
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	61a3      	str	r3, [r4, #24]
 8005dc4:	6063      	str	r3, [r4, #4]
 8005dc6:	89a3      	ldrh	r3, [r4, #12]
 8005dc8:	0618      	lsls	r0, r3, #24
 8005dca:	d503      	bpl.n	8005dd4 <setvbuf+0x74>
 8005dcc:	6921      	ldr	r1, [r4, #16]
 8005dce:	4638      	mov	r0, r7
 8005dd0:	f000 f9d0 	bl	8006174 <_free_r>
 8005dd4:	89a3      	ldrh	r3, [r4, #12]
 8005dd6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8005dda:	f023 0303 	bic.w	r3, r3, #3
 8005dde:	f1b8 0f02 	cmp.w	r8, #2
 8005de2:	81a3      	strh	r3, [r4, #12]
 8005de4:	d05f      	beq.n	8005ea6 <setvbuf+0x146>
 8005de6:	ab01      	add	r3, sp, #4
 8005de8:	466a      	mov	r2, sp
 8005dea:	4621      	mov	r1, r4
 8005dec:	4638      	mov	r0, r7
 8005dee:	f000 fb6f 	bl	80064d0 <__swhatbuf_r>
 8005df2:	89a3      	ldrh	r3, [r4, #12]
 8005df4:	4318      	orrs	r0, r3
 8005df6:	81a0      	strh	r0, [r4, #12]
 8005df8:	bb2d      	cbnz	r5, 8005e46 <setvbuf+0xe6>
 8005dfa:	9d00      	ldr	r5, [sp, #0]
 8005dfc:	4628      	mov	r0, r5
 8005dfe:	f000 fa05 	bl	800620c <malloc>
 8005e02:	4606      	mov	r6, r0
 8005e04:	2800      	cmp	r0, #0
 8005e06:	d150      	bne.n	8005eaa <setvbuf+0x14a>
 8005e08:	f8dd 9000 	ldr.w	r9, [sp]
 8005e0c:	45a9      	cmp	r9, r5
 8005e0e:	d13e      	bne.n	8005e8e <setvbuf+0x12e>
 8005e10:	f04f 35ff 	mov.w	r5, #4294967295
 8005e14:	2200      	movs	r2, #0
 8005e16:	60a2      	str	r2, [r4, #8]
 8005e18:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8005e1c:	6022      	str	r2, [r4, #0]
 8005e1e:	6122      	str	r2, [r4, #16]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e26:	6162      	str	r2, [r4, #20]
 8005e28:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005e2a:	f043 0302 	orr.w	r3, r3, #2
 8005e2e:	07d1      	lsls	r1, r2, #31
 8005e30:	81a3      	strh	r3, [r4, #12]
 8005e32:	d404      	bmi.n	8005e3e <setvbuf+0xde>
 8005e34:	059b      	lsls	r3, r3, #22
 8005e36:	d402      	bmi.n	8005e3e <setvbuf+0xde>
 8005e38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e3a:	f000 f98b 	bl	8006154 <__retarget_lock_release_recursive>
 8005e3e:	4628      	mov	r0, r5
 8005e40:	b003      	add	sp, #12
 8005e42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e46:	2e00      	cmp	r6, #0
 8005e48:	d0d8      	beq.n	8005dfc <setvbuf+0x9c>
 8005e4a:	6a3b      	ldr	r3, [r7, #32]
 8005e4c:	b913      	cbnz	r3, 8005e54 <setvbuf+0xf4>
 8005e4e:	4638      	mov	r0, r7
 8005e50:	f7ff fee4 	bl	8005c1c <__sinit>
 8005e54:	f1b8 0f01 	cmp.w	r8, #1
 8005e58:	bf08      	it	eq
 8005e5a:	89a3      	ldrheq	r3, [r4, #12]
 8005e5c:	6026      	str	r6, [r4, #0]
 8005e5e:	bf04      	itt	eq
 8005e60:	f043 0301 	orreq.w	r3, r3, #1
 8005e64:	81a3      	strheq	r3, [r4, #12]
 8005e66:	89a3      	ldrh	r3, [r4, #12]
 8005e68:	f013 0208 	ands.w	r2, r3, #8
 8005e6c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005e70:	d01d      	beq.n	8005eae <setvbuf+0x14e>
 8005e72:	07da      	lsls	r2, r3, #31
 8005e74:	bf41      	itttt	mi
 8005e76:	2200      	movmi	r2, #0
 8005e78:	426d      	negmi	r5, r5
 8005e7a:	60a2      	strmi	r2, [r4, #8]
 8005e7c:	61a5      	strmi	r5, [r4, #24]
 8005e7e:	bf58      	it	pl
 8005e80:	60a5      	strpl	r5, [r4, #8]
 8005e82:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8005e84:	f015 0501 	ands.w	r5, r5, #1
 8005e88:	d0d4      	beq.n	8005e34 <setvbuf+0xd4>
 8005e8a:	2500      	movs	r5, #0
 8005e8c:	e7d7      	b.n	8005e3e <setvbuf+0xde>
 8005e8e:	4648      	mov	r0, r9
 8005e90:	f000 f9bc 	bl	800620c <malloc>
 8005e94:	4606      	mov	r6, r0
 8005e96:	2800      	cmp	r0, #0
 8005e98:	d0ba      	beq.n	8005e10 <setvbuf+0xb0>
 8005e9a:	89a3      	ldrh	r3, [r4, #12]
 8005e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ea0:	81a3      	strh	r3, [r4, #12]
 8005ea2:	464d      	mov	r5, r9
 8005ea4:	e7d1      	b.n	8005e4a <setvbuf+0xea>
 8005ea6:	2500      	movs	r5, #0
 8005ea8:	e7b4      	b.n	8005e14 <setvbuf+0xb4>
 8005eaa:	46a9      	mov	r9, r5
 8005eac:	e7f5      	b.n	8005e9a <setvbuf+0x13a>
 8005eae:	60a2      	str	r2, [r4, #8]
 8005eb0:	e7e7      	b.n	8005e82 <setvbuf+0x122>
 8005eb2:	f04f 35ff 	mov.w	r5, #4294967295
 8005eb6:	e7c2      	b.n	8005e3e <setvbuf+0xde>
 8005eb8:	20000068 	.word	0x20000068

08005ebc <__sread>:
 8005ebc:	b510      	push	{r4, lr}
 8005ebe:	460c      	mov	r4, r1
 8005ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ec4:	f000 f8fc 	bl	80060c0 <_read_r>
 8005ec8:	2800      	cmp	r0, #0
 8005eca:	bfab      	itete	ge
 8005ecc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005ece:	89a3      	ldrhlt	r3, [r4, #12]
 8005ed0:	181b      	addge	r3, r3, r0
 8005ed2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005ed6:	bfac      	ite	ge
 8005ed8:	6563      	strge	r3, [r4, #84]	; 0x54
 8005eda:	81a3      	strhlt	r3, [r4, #12]
 8005edc:	bd10      	pop	{r4, pc}

08005ede <__swrite>:
 8005ede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ee2:	461f      	mov	r7, r3
 8005ee4:	898b      	ldrh	r3, [r1, #12]
 8005ee6:	05db      	lsls	r3, r3, #23
 8005ee8:	4605      	mov	r5, r0
 8005eea:	460c      	mov	r4, r1
 8005eec:	4616      	mov	r6, r2
 8005eee:	d505      	bpl.n	8005efc <__swrite+0x1e>
 8005ef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f000 f8d0 	bl	800609c <_lseek_r>
 8005efc:	89a3      	ldrh	r3, [r4, #12]
 8005efe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f06:	81a3      	strh	r3, [r4, #12]
 8005f08:	4632      	mov	r2, r6
 8005f0a:	463b      	mov	r3, r7
 8005f0c:	4628      	mov	r0, r5
 8005f0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f12:	f000 b8e7 	b.w	80060e4 <_write_r>

08005f16 <__sseek>:
 8005f16:	b510      	push	{r4, lr}
 8005f18:	460c      	mov	r4, r1
 8005f1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f1e:	f000 f8bd 	bl	800609c <_lseek_r>
 8005f22:	1c43      	adds	r3, r0, #1
 8005f24:	89a3      	ldrh	r3, [r4, #12]
 8005f26:	bf15      	itete	ne
 8005f28:	6560      	strne	r0, [r4, #84]	; 0x54
 8005f2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005f2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005f32:	81a3      	strheq	r3, [r4, #12]
 8005f34:	bf18      	it	ne
 8005f36:	81a3      	strhne	r3, [r4, #12]
 8005f38:	bd10      	pop	{r4, pc}

08005f3a <__sclose>:
 8005f3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f3e:	f000 b89d 	b.w	800607c <_close_r>

08005f42 <__swbuf_r>:
 8005f42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f44:	460e      	mov	r6, r1
 8005f46:	4614      	mov	r4, r2
 8005f48:	4605      	mov	r5, r0
 8005f4a:	b118      	cbz	r0, 8005f54 <__swbuf_r+0x12>
 8005f4c:	6a03      	ldr	r3, [r0, #32]
 8005f4e:	b90b      	cbnz	r3, 8005f54 <__swbuf_r+0x12>
 8005f50:	f7ff fe64 	bl	8005c1c <__sinit>
 8005f54:	69a3      	ldr	r3, [r4, #24]
 8005f56:	60a3      	str	r3, [r4, #8]
 8005f58:	89a3      	ldrh	r3, [r4, #12]
 8005f5a:	071a      	lsls	r2, r3, #28
 8005f5c:	d525      	bpl.n	8005faa <__swbuf_r+0x68>
 8005f5e:	6923      	ldr	r3, [r4, #16]
 8005f60:	b31b      	cbz	r3, 8005faa <__swbuf_r+0x68>
 8005f62:	6823      	ldr	r3, [r4, #0]
 8005f64:	6922      	ldr	r2, [r4, #16]
 8005f66:	1a98      	subs	r0, r3, r2
 8005f68:	6963      	ldr	r3, [r4, #20]
 8005f6a:	b2f6      	uxtb	r6, r6
 8005f6c:	4283      	cmp	r3, r0
 8005f6e:	4637      	mov	r7, r6
 8005f70:	dc04      	bgt.n	8005f7c <__swbuf_r+0x3a>
 8005f72:	4621      	mov	r1, r4
 8005f74:	4628      	mov	r0, r5
 8005f76:	f000 fa83 	bl	8006480 <_fflush_r>
 8005f7a:	b9e0      	cbnz	r0, 8005fb6 <__swbuf_r+0x74>
 8005f7c:	68a3      	ldr	r3, [r4, #8]
 8005f7e:	3b01      	subs	r3, #1
 8005f80:	60a3      	str	r3, [r4, #8]
 8005f82:	6823      	ldr	r3, [r4, #0]
 8005f84:	1c5a      	adds	r2, r3, #1
 8005f86:	6022      	str	r2, [r4, #0]
 8005f88:	701e      	strb	r6, [r3, #0]
 8005f8a:	6962      	ldr	r2, [r4, #20]
 8005f8c:	1c43      	adds	r3, r0, #1
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d004      	beq.n	8005f9c <__swbuf_r+0x5a>
 8005f92:	89a3      	ldrh	r3, [r4, #12]
 8005f94:	07db      	lsls	r3, r3, #31
 8005f96:	d506      	bpl.n	8005fa6 <__swbuf_r+0x64>
 8005f98:	2e0a      	cmp	r6, #10
 8005f9a:	d104      	bne.n	8005fa6 <__swbuf_r+0x64>
 8005f9c:	4621      	mov	r1, r4
 8005f9e:	4628      	mov	r0, r5
 8005fa0:	f000 fa6e 	bl	8006480 <_fflush_r>
 8005fa4:	b938      	cbnz	r0, 8005fb6 <__swbuf_r+0x74>
 8005fa6:	4638      	mov	r0, r7
 8005fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005faa:	4621      	mov	r1, r4
 8005fac:	4628      	mov	r0, r5
 8005fae:	f000 f805 	bl	8005fbc <__swsetup_r>
 8005fb2:	2800      	cmp	r0, #0
 8005fb4:	d0d5      	beq.n	8005f62 <__swbuf_r+0x20>
 8005fb6:	f04f 37ff 	mov.w	r7, #4294967295
 8005fba:	e7f4      	b.n	8005fa6 <__swbuf_r+0x64>

08005fbc <__swsetup_r>:
 8005fbc:	b538      	push	{r3, r4, r5, lr}
 8005fbe:	4b2a      	ldr	r3, [pc, #168]	; (8006068 <__swsetup_r+0xac>)
 8005fc0:	4605      	mov	r5, r0
 8005fc2:	6818      	ldr	r0, [r3, #0]
 8005fc4:	460c      	mov	r4, r1
 8005fc6:	b118      	cbz	r0, 8005fd0 <__swsetup_r+0x14>
 8005fc8:	6a03      	ldr	r3, [r0, #32]
 8005fca:	b90b      	cbnz	r3, 8005fd0 <__swsetup_r+0x14>
 8005fcc:	f7ff fe26 	bl	8005c1c <__sinit>
 8005fd0:	89a3      	ldrh	r3, [r4, #12]
 8005fd2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005fd6:	0718      	lsls	r0, r3, #28
 8005fd8:	d422      	bmi.n	8006020 <__swsetup_r+0x64>
 8005fda:	06d9      	lsls	r1, r3, #27
 8005fdc:	d407      	bmi.n	8005fee <__swsetup_r+0x32>
 8005fde:	2309      	movs	r3, #9
 8005fe0:	602b      	str	r3, [r5, #0]
 8005fe2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005fe6:	81a3      	strh	r3, [r4, #12]
 8005fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fec:	e034      	b.n	8006058 <__swsetup_r+0x9c>
 8005fee:	0758      	lsls	r0, r3, #29
 8005ff0:	d512      	bpl.n	8006018 <__swsetup_r+0x5c>
 8005ff2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ff4:	b141      	cbz	r1, 8006008 <__swsetup_r+0x4c>
 8005ff6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ffa:	4299      	cmp	r1, r3
 8005ffc:	d002      	beq.n	8006004 <__swsetup_r+0x48>
 8005ffe:	4628      	mov	r0, r5
 8006000:	f000 f8b8 	bl	8006174 <_free_r>
 8006004:	2300      	movs	r3, #0
 8006006:	6363      	str	r3, [r4, #52]	; 0x34
 8006008:	89a3      	ldrh	r3, [r4, #12]
 800600a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800600e:	81a3      	strh	r3, [r4, #12]
 8006010:	2300      	movs	r3, #0
 8006012:	6063      	str	r3, [r4, #4]
 8006014:	6923      	ldr	r3, [r4, #16]
 8006016:	6023      	str	r3, [r4, #0]
 8006018:	89a3      	ldrh	r3, [r4, #12]
 800601a:	f043 0308 	orr.w	r3, r3, #8
 800601e:	81a3      	strh	r3, [r4, #12]
 8006020:	6923      	ldr	r3, [r4, #16]
 8006022:	b94b      	cbnz	r3, 8006038 <__swsetup_r+0x7c>
 8006024:	89a3      	ldrh	r3, [r4, #12]
 8006026:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800602a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800602e:	d003      	beq.n	8006038 <__swsetup_r+0x7c>
 8006030:	4621      	mov	r1, r4
 8006032:	4628      	mov	r0, r5
 8006034:	f000 fa72 	bl	800651c <__smakebuf_r>
 8006038:	89a0      	ldrh	r0, [r4, #12]
 800603a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800603e:	f010 0301 	ands.w	r3, r0, #1
 8006042:	d00a      	beq.n	800605a <__swsetup_r+0x9e>
 8006044:	2300      	movs	r3, #0
 8006046:	60a3      	str	r3, [r4, #8]
 8006048:	6963      	ldr	r3, [r4, #20]
 800604a:	425b      	negs	r3, r3
 800604c:	61a3      	str	r3, [r4, #24]
 800604e:	6923      	ldr	r3, [r4, #16]
 8006050:	b943      	cbnz	r3, 8006064 <__swsetup_r+0xa8>
 8006052:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006056:	d1c4      	bne.n	8005fe2 <__swsetup_r+0x26>
 8006058:	bd38      	pop	{r3, r4, r5, pc}
 800605a:	0781      	lsls	r1, r0, #30
 800605c:	bf58      	it	pl
 800605e:	6963      	ldrpl	r3, [r4, #20]
 8006060:	60a3      	str	r3, [r4, #8]
 8006062:	e7f4      	b.n	800604e <__swsetup_r+0x92>
 8006064:	2000      	movs	r0, #0
 8006066:	e7f7      	b.n	8006058 <__swsetup_r+0x9c>
 8006068:	20000068 	.word	0x20000068

0800606c <memset>:
 800606c:	4402      	add	r2, r0
 800606e:	4603      	mov	r3, r0
 8006070:	4293      	cmp	r3, r2
 8006072:	d100      	bne.n	8006076 <memset+0xa>
 8006074:	4770      	bx	lr
 8006076:	f803 1b01 	strb.w	r1, [r3], #1
 800607a:	e7f9      	b.n	8006070 <memset+0x4>

0800607c <_close_r>:
 800607c:	b538      	push	{r3, r4, r5, lr}
 800607e:	4d06      	ldr	r5, [pc, #24]	; (8006098 <_close_r+0x1c>)
 8006080:	2300      	movs	r3, #0
 8006082:	4604      	mov	r4, r0
 8006084:	4608      	mov	r0, r1
 8006086:	602b      	str	r3, [r5, #0]
 8006088:	f000 faea 	bl	8006660 <_close>
 800608c:	1c43      	adds	r3, r0, #1
 800608e:	d102      	bne.n	8006096 <_close_r+0x1a>
 8006090:	682b      	ldr	r3, [r5, #0]
 8006092:	b103      	cbz	r3, 8006096 <_close_r+0x1a>
 8006094:	6023      	str	r3, [r4, #0]
 8006096:	bd38      	pop	{r3, r4, r5, pc}
 8006098:	20004c14 	.word	0x20004c14

0800609c <_lseek_r>:
 800609c:	b538      	push	{r3, r4, r5, lr}
 800609e:	4d07      	ldr	r5, [pc, #28]	; (80060bc <_lseek_r+0x20>)
 80060a0:	4604      	mov	r4, r0
 80060a2:	4608      	mov	r0, r1
 80060a4:	4611      	mov	r1, r2
 80060a6:	2200      	movs	r2, #0
 80060a8:	602a      	str	r2, [r5, #0]
 80060aa:	461a      	mov	r2, r3
 80060ac:	f7fd fea0 	bl	8003df0 <_lseek>
 80060b0:	1c43      	adds	r3, r0, #1
 80060b2:	d102      	bne.n	80060ba <_lseek_r+0x1e>
 80060b4:	682b      	ldr	r3, [r5, #0]
 80060b6:	b103      	cbz	r3, 80060ba <_lseek_r+0x1e>
 80060b8:	6023      	str	r3, [r4, #0]
 80060ba:	bd38      	pop	{r3, r4, r5, pc}
 80060bc:	20004c14 	.word	0x20004c14

080060c0 <_read_r>:
 80060c0:	b538      	push	{r3, r4, r5, lr}
 80060c2:	4d07      	ldr	r5, [pc, #28]	; (80060e0 <_read_r+0x20>)
 80060c4:	4604      	mov	r4, r0
 80060c6:	4608      	mov	r0, r1
 80060c8:	4611      	mov	r1, r2
 80060ca:	2200      	movs	r2, #0
 80060cc:	602a      	str	r2, [r5, #0]
 80060ce:	461a      	mov	r2, r3
 80060d0:	f7fd fe80 	bl	8003dd4 <_read>
 80060d4:	1c43      	adds	r3, r0, #1
 80060d6:	d102      	bne.n	80060de <_read_r+0x1e>
 80060d8:	682b      	ldr	r3, [r5, #0]
 80060da:	b103      	cbz	r3, 80060de <_read_r+0x1e>
 80060dc:	6023      	str	r3, [r4, #0]
 80060de:	bd38      	pop	{r3, r4, r5, pc}
 80060e0:	20004c14 	.word	0x20004c14

080060e4 <_write_r>:
 80060e4:	b538      	push	{r3, r4, r5, lr}
 80060e6:	4d07      	ldr	r5, [pc, #28]	; (8006104 <_write_r+0x20>)
 80060e8:	4604      	mov	r4, r0
 80060ea:	4608      	mov	r0, r1
 80060ec:	4611      	mov	r1, r2
 80060ee:	2200      	movs	r2, #0
 80060f0:	602a      	str	r2, [r5, #0]
 80060f2:	461a      	mov	r2, r3
 80060f4:	f7fd fe64 	bl	8003dc0 <_write>
 80060f8:	1c43      	adds	r3, r0, #1
 80060fa:	d102      	bne.n	8006102 <_write_r+0x1e>
 80060fc:	682b      	ldr	r3, [r5, #0]
 80060fe:	b103      	cbz	r3, 8006102 <_write_r+0x1e>
 8006100:	6023      	str	r3, [r4, #0]
 8006102:	bd38      	pop	{r3, r4, r5, pc}
 8006104:	20004c14 	.word	0x20004c14

08006108 <__libc_init_array>:
 8006108:	b570      	push	{r4, r5, r6, lr}
 800610a:	4d0d      	ldr	r5, [pc, #52]	; (8006140 <__libc_init_array+0x38>)
 800610c:	4c0d      	ldr	r4, [pc, #52]	; (8006144 <__libc_init_array+0x3c>)
 800610e:	1b64      	subs	r4, r4, r5
 8006110:	10a4      	asrs	r4, r4, #2
 8006112:	2600      	movs	r6, #0
 8006114:	42a6      	cmp	r6, r4
 8006116:	d109      	bne.n	800612c <__libc_init_array+0x24>
 8006118:	4d0b      	ldr	r5, [pc, #44]	; (8006148 <__libc_init_array+0x40>)
 800611a:	4c0c      	ldr	r4, [pc, #48]	; (800614c <__libc_init_array+0x44>)
 800611c:	f000 fab6 	bl	800668c <_init>
 8006120:	1b64      	subs	r4, r4, r5
 8006122:	10a4      	asrs	r4, r4, #2
 8006124:	2600      	movs	r6, #0
 8006126:	42a6      	cmp	r6, r4
 8006128:	d105      	bne.n	8006136 <__libc_init_array+0x2e>
 800612a:	bd70      	pop	{r4, r5, r6, pc}
 800612c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006130:	4798      	blx	r3
 8006132:	3601      	adds	r6, #1
 8006134:	e7ee      	b.n	8006114 <__libc_init_array+0xc>
 8006136:	f855 3b04 	ldr.w	r3, [r5], #4
 800613a:	4798      	blx	r3
 800613c:	3601      	adds	r6, #1
 800613e:	e7f2      	b.n	8006126 <__libc_init_array+0x1e>
 8006140:	08006868 	.word	0x08006868
 8006144:	08006868 	.word	0x08006868
 8006148:	08006868 	.word	0x08006868
 800614c:	0800686c 	.word	0x0800686c

08006150 <__retarget_lock_init_recursive>:
 8006150:	4770      	bx	lr

08006152 <__retarget_lock_acquire_recursive>:
 8006152:	4770      	bx	lr

08006154 <__retarget_lock_release_recursive>:
 8006154:	4770      	bx	lr

08006156 <memcpy>:
 8006156:	440a      	add	r2, r1
 8006158:	4291      	cmp	r1, r2
 800615a:	f100 33ff 	add.w	r3, r0, #4294967295
 800615e:	d100      	bne.n	8006162 <memcpy+0xc>
 8006160:	4770      	bx	lr
 8006162:	b510      	push	{r4, lr}
 8006164:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006168:	f803 4f01 	strb.w	r4, [r3, #1]!
 800616c:	4291      	cmp	r1, r2
 800616e:	d1f9      	bne.n	8006164 <memcpy+0xe>
 8006170:	bd10      	pop	{r4, pc}
	...

08006174 <_free_r>:
 8006174:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006176:	2900      	cmp	r1, #0
 8006178:	d044      	beq.n	8006204 <_free_r+0x90>
 800617a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800617e:	9001      	str	r0, [sp, #4]
 8006180:	2b00      	cmp	r3, #0
 8006182:	f1a1 0404 	sub.w	r4, r1, #4
 8006186:	bfb8      	it	lt
 8006188:	18e4      	addlt	r4, r4, r3
 800618a:	f000 f8e7 	bl	800635c <__malloc_lock>
 800618e:	4a1e      	ldr	r2, [pc, #120]	; (8006208 <_free_r+0x94>)
 8006190:	9801      	ldr	r0, [sp, #4]
 8006192:	6813      	ldr	r3, [r2, #0]
 8006194:	b933      	cbnz	r3, 80061a4 <_free_r+0x30>
 8006196:	6063      	str	r3, [r4, #4]
 8006198:	6014      	str	r4, [r2, #0]
 800619a:	b003      	add	sp, #12
 800619c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80061a0:	f000 b8e2 	b.w	8006368 <__malloc_unlock>
 80061a4:	42a3      	cmp	r3, r4
 80061a6:	d908      	bls.n	80061ba <_free_r+0x46>
 80061a8:	6825      	ldr	r5, [r4, #0]
 80061aa:	1961      	adds	r1, r4, r5
 80061ac:	428b      	cmp	r3, r1
 80061ae:	bf01      	itttt	eq
 80061b0:	6819      	ldreq	r1, [r3, #0]
 80061b2:	685b      	ldreq	r3, [r3, #4]
 80061b4:	1949      	addeq	r1, r1, r5
 80061b6:	6021      	streq	r1, [r4, #0]
 80061b8:	e7ed      	b.n	8006196 <_free_r+0x22>
 80061ba:	461a      	mov	r2, r3
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	b10b      	cbz	r3, 80061c4 <_free_r+0x50>
 80061c0:	42a3      	cmp	r3, r4
 80061c2:	d9fa      	bls.n	80061ba <_free_r+0x46>
 80061c4:	6811      	ldr	r1, [r2, #0]
 80061c6:	1855      	adds	r5, r2, r1
 80061c8:	42a5      	cmp	r5, r4
 80061ca:	d10b      	bne.n	80061e4 <_free_r+0x70>
 80061cc:	6824      	ldr	r4, [r4, #0]
 80061ce:	4421      	add	r1, r4
 80061d0:	1854      	adds	r4, r2, r1
 80061d2:	42a3      	cmp	r3, r4
 80061d4:	6011      	str	r1, [r2, #0]
 80061d6:	d1e0      	bne.n	800619a <_free_r+0x26>
 80061d8:	681c      	ldr	r4, [r3, #0]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	6053      	str	r3, [r2, #4]
 80061de:	440c      	add	r4, r1
 80061e0:	6014      	str	r4, [r2, #0]
 80061e2:	e7da      	b.n	800619a <_free_r+0x26>
 80061e4:	d902      	bls.n	80061ec <_free_r+0x78>
 80061e6:	230c      	movs	r3, #12
 80061e8:	6003      	str	r3, [r0, #0]
 80061ea:	e7d6      	b.n	800619a <_free_r+0x26>
 80061ec:	6825      	ldr	r5, [r4, #0]
 80061ee:	1961      	adds	r1, r4, r5
 80061f0:	428b      	cmp	r3, r1
 80061f2:	bf04      	itt	eq
 80061f4:	6819      	ldreq	r1, [r3, #0]
 80061f6:	685b      	ldreq	r3, [r3, #4]
 80061f8:	6063      	str	r3, [r4, #4]
 80061fa:	bf04      	itt	eq
 80061fc:	1949      	addeq	r1, r1, r5
 80061fe:	6021      	streq	r1, [r4, #0]
 8006200:	6054      	str	r4, [r2, #4]
 8006202:	e7ca      	b.n	800619a <_free_r+0x26>
 8006204:	b003      	add	sp, #12
 8006206:	bd30      	pop	{r4, r5, pc}
 8006208:	20004c1c 	.word	0x20004c1c

0800620c <malloc>:
 800620c:	4b02      	ldr	r3, [pc, #8]	; (8006218 <malloc+0xc>)
 800620e:	4601      	mov	r1, r0
 8006210:	6818      	ldr	r0, [r3, #0]
 8006212:	f000 b823 	b.w	800625c <_malloc_r>
 8006216:	bf00      	nop
 8006218:	20000068 	.word	0x20000068

0800621c <sbrk_aligned>:
 800621c:	b570      	push	{r4, r5, r6, lr}
 800621e:	4e0e      	ldr	r6, [pc, #56]	; (8006258 <sbrk_aligned+0x3c>)
 8006220:	460c      	mov	r4, r1
 8006222:	6831      	ldr	r1, [r6, #0]
 8006224:	4605      	mov	r5, r0
 8006226:	b911      	cbnz	r1, 800622e <sbrk_aligned+0x12>
 8006228:	f000 fa0a 	bl	8006640 <_sbrk_r>
 800622c:	6030      	str	r0, [r6, #0]
 800622e:	4621      	mov	r1, r4
 8006230:	4628      	mov	r0, r5
 8006232:	f000 fa05 	bl	8006640 <_sbrk_r>
 8006236:	1c43      	adds	r3, r0, #1
 8006238:	d00a      	beq.n	8006250 <sbrk_aligned+0x34>
 800623a:	1cc4      	adds	r4, r0, #3
 800623c:	f024 0403 	bic.w	r4, r4, #3
 8006240:	42a0      	cmp	r0, r4
 8006242:	d007      	beq.n	8006254 <sbrk_aligned+0x38>
 8006244:	1a21      	subs	r1, r4, r0
 8006246:	4628      	mov	r0, r5
 8006248:	f000 f9fa 	bl	8006640 <_sbrk_r>
 800624c:	3001      	adds	r0, #1
 800624e:	d101      	bne.n	8006254 <sbrk_aligned+0x38>
 8006250:	f04f 34ff 	mov.w	r4, #4294967295
 8006254:	4620      	mov	r0, r4
 8006256:	bd70      	pop	{r4, r5, r6, pc}
 8006258:	20004c20 	.word	0x20004c20

0800625c <_malloc_r>:
 800625c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006260:	1ccd      	adds	r5, r1, #3
 8006262:	f025 0503 	bic.w	r5, r5, #3
 8006266:	3508      	adds	r5, #8
 8006268:	2d0c      	cmp	r5, #12
 800626a:	bf38      	it	cc
 800626c:	250c      	movcc	r5, #12
 800626e:	2d00      	cmp	r5, #0
 8006270:	4607      	mov	r7, r0
 8006272:	db01      	blt.n	8006278 <_malloc_r+0x1c>
 8006274:	42a9      	cmp	r1, r5
 8006276:	d905      	bls.n	8006284 <_malloc_r+0x28>
 8006278:	230c      	movs	r3, #12
 800627a:	603b      	str	r3, [r7, #0]
 800627c:	2600      	movs	r6, #0
 800627e:	4630      	mov	r0, r6
 8006280:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006284:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006358 <_malloc_r+0xfc>
 8006288:	f000 f868 	bl	800635c <__malloc_lock>
 800628c:	f8d8 3000 	ldr.w	r3, [r8]
 8006290:	461c      	mov	r4, r3
 8006292:	bb5c      	cbnz	r4, 80062ec <_malloc_r+0x90>
 8006294:	4629      	mov	r1, r5
 8006296:	4638      	mov	r0, r7
 8006298:	f7ff ffc0 	bl	800621c <sbrk_aligned>
 800629c:	1c43      	adds	r3, r0, #1
 800629e:	4604      	mov	r4, r0
 80062a0:	d155      	bne.n	800634e <_malloc_r+0xf2>
 80062a2:	f8d8 4000 	ldr.w	r4, [r8]
 80062a6:	4626      	mov	r6, r4
 80062a8:	2e00      	cmp	r6, #0
 80062aa:	d145      	bne.n	8006338 <_malloc_r+0xdc>
 80062ac:	2c00      	cmp	r4, #0
 80062ae:	d048      	beq.n	8006342 <_malloc_r+0xe6>
 80062b0:	6823      	ldr	r3, [r4, #0]
 80062b2:	4631      	mov	r1, r6
 80062b4:	4638      	mov	r0, r7
 80062b6:	eb04 0903 	add.w	r9, r4, r3
 80062ba:	f000 f9c1 	bl	8006640 <_sbrk_r>
 80062be:	4581      	cmp	r9, r0
 80062c0:	d13f      	bne.n	8006342 <_malloc_r+0xe6>
 80062c2:	6821      	ldr	r1, [r4, #0]
 80062c4:	1a6d      	subs	r5, r5, r1
 80062c6:	4629      	mov	r1, r5
 80062c8:	4638      	mov	r0, r7
 80062ca:	f7ff ffa7 	bl	800621c <sbrk_aligned>
 80062ce:	3001      	adds	r0, #1
 80062d0:	d037      	beq.n	8006342 <_malloc_r+0xe6>
 80062d2:	6823      	ldr	r3, [r4, #0]
 80062d4:	442b      	add	r3, r5
 80062d6:	6023      	str	r3, [r4, #0]
 80062d8:	f8d8 3000 	ldr.w	r3, [r8]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d038      	beq.n	8006352 <_malloc_r+0xf6>
 80062e0:	685a      	ldr	r2, [r3, #4]
 80062e2:	42a2      	cmp	r2, r4
 80062e4:	d12b      	bne.n	800633e <_malloc_r+0xe2>
 80062e6:	2200      	movs	r2, #0
 80062e8:	605a      	str	r2, [r3, #4]
 80062ea:	e00f      	b.n	800630c <_malloc_r+0xb0>
 80062ec:	6822      	ldr	r2, [r4, #0]
 80062ee:	1b52      	subs	r2, r2, r5
 80062f0:	d41f      	bmi.n	8006332 <_malloc_r+0xd6>
 80062f2:	2a0b      	cmp	r2, #11
 80062f4:	d917      	bls.n	8006326 <_malloc_r+0xca>
 80062f6:	1961      	adds	r1, r4, r5
 80062f8:	42a3      	cmp	r3, r4
 80062fa:	6025      	str	r5, [r4, #0]
 80062fc:	bf18      	it	ne
 80062fe:	6059      	strne	r1, [r3, #4]
 8006300:	6863      	ldr	r3, [r4, #4]
 8006302:	bf08      	it	eq
 8006304:	f8c8 1000 	streq.w	r1, [r8]
 8006308:	5162      	str	r2, [r4, r5]
 800630a:	604b      	str	r3, [r1, #4]
 800630c:	4638      	mov	r0, r7
 800630e:	f104 060b 	add.w	r6, r4, #11
 8006312:	f000 f829 	bl	8006368 <__malloc_unlock>
 8006316:	f026 0607 	bic.w	r6, r6, #7
 800631a:	1d23      	adds	r3, r4, #4
 800631c:	1af2      	subs	r2, r6, r3
 800631e:	d0ae      	beq.n	800627e <_malloc_r+0x22>
 8006320:	1b9b      	subs	r3, r3, r6
 8006322:	50a3      	str	r3, [r4, r2]
 8006324:	e7ab      	b.n	800627e <_malloc_r+0x22>
 8006326:	42a3      	cmp	r3, r4
 8006328:	6862      	ldr	r2, [r4, #4]
 800632a:	d1dd      	bne.n	80062e8 <_malloc_r+0x8c>
 800632c:	f8c8 2000 	str.w	r2, [r8]
 8006330:	e7ec      	b.n	800630c <_malloc_r+0xb0>
 8006332:	4623      	mov	r3, r4
 8006334:	6864      	ldr	r4, [r4, #4]
 8006336:	e7ac      	b.n	8006292 <_malloc_r+0x36>
 8006338:	4634      	mov	r4, r6
 800633a:	6876      	ldr	r6, [r6, #4]
 800633c:	e7b4      	b.n	80062a8 <_malloc_r+0x4c>
 800633e:	4613      	mov	r3, r2
 8006340:	e7cc      	b.n	80062dc <_malloc_r+0x80>
 8006342:	230c      	movs	r3, #12
 8006344:	603b      	str	r3, [r7, #0]
 8006346:	4638      	mov	r0, r7
 8006348:	f000 f80e 	bl	8006368 <__malloc_unlock>
 800634c:	e797      	b.n	800627e <_malloc_r+0x22>
 800634e:	6025      	str	r5, [r4, #0]
 8006350:	e7dc      	b.n	800630c <_malloc_r+0xb0>
 8006352:	605b      	str	r3, [r3, #4]
 8006354:	deff      	udf	#255	; 0xff
 8006356:	bf00      	nop
 8006358:	20004c1c 	.word	0x20004c1c

0800635c <__malloc_lock>:
 800635c:	4801      	ldr	r0, [pc, #4]	; (8006364 <__malloc_lock+0x8>)
 800635e:	f7ff bef8 	b.w	8006152 <__retarget_lock_acquire_recursive>
 8006362:	bf00      	nop
 8006364:	20004c18 	.word	0x20004c18

08006368 <__malloc_unlock>:
 8006368:	4801      	ldr	r0, [pc, #4]	; (8006370 <__malloc_unlock+0x8>)
 800636a:	f7ff bef3 	b.w	8006154 <__retarget_lock_release_recursive>
 800636e:	bf00      	nop
 8006370:	20004c18 	.word	0x20004c18

08006374 <__sflush_r>:
 8006374:	898a      	ldrh	r2, [r1, #12]
 8006376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800637a:	4605      	mov	r5, r0
 800637c:	0710      	lsls	r0, r2, #28
 800637e:	460c      	mov	r4, r1
 8006380:	d458      	bmi.n	8006434 <__sflush_r+0xc0>
 8006382:	684b      	ldr	r3, [r1, #4]
 8006384:	2b00      	cmp	r3, #0
 8006386:	dc05      	bgt.n	8006394 <__sflush_r+0x20>
 8006388:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800638a:	2b00      	cmp	r3, #0
 800638c:	dc02      	bgt.n	8006394 <__sflush_r+0x20>
 800638e:	2000      	movs	r0, #0
 8006390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006394:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006396:	2e00      	cmp	r6, #0
 8006398:	d0f9      	beq.n	800638e <__sflush_r+0x1a>
 800639a:	2300      	movs	r3, #0
 800639c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80063a0:	682f      	ldr	r7, [r5, #0]
 80063a2:	6a21      	ldr	r1, [r4, #32]
 80063a4:	602b      	str	r3, [r5, #0]
 80063a6:	d032      	beq.n	800640e <__sflush_r+0x9a>
 80063a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80063aa:	89a3      	ldrh	r3, [r4, #12]
 80063ac:	075a      	lsls	r2, r3, #29
 80063ae:	d505      	bpl.n	80063bc <__sflush_r+0x48>
 80063b0:	6863      	ldr	r3, [r4, #4]
 80063b2:	1ac0      	subs	r0, r0, r3
 80063b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80063b6:	b10b      	cbz	r3, 80063bc <__sflush_r+0x48>
 80063b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80063ba:	1ac0      	subs	r0, r0, r3
 80063bc:	2300      	movs	r3, #0
 80063be:	4602      	mov	r2, r0
 80063c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80063c2:	6a21      	ldr	r1, [r4, #32]
 80063c4:	4628      	mov	r0, r5
 80063c6:	47b0      	blx	r6
 80063c8:	1c43      	adds	r3, r0, #1
 80063ca:	89a3      	ldrh	r3, [r4, #12]
 80063cc:	d106      	bne.n	80063dc <__sflush_r+0x68>
 80063ce:	6829      	ldr	r1, [r5, #0]
 80063d0:	291d      	cmp	r1, #29
 80063d2:	d82b      	bhi.n	800642c <__sflush_r+0xb8>
 80063d4:	4a29      	ldr	r2, [pc, #164]	; (800647c <__sflush_r+0x108>)
 80063d6:	410a      	asrs	r2, r1
 80063d8:	07d6      	lsls	r6, r2, #31
 80063da:	d427      	bmi.n	800642c <__sflush_r+0xb8>
 80063dc:	2200      	movs	r2, #0
 80063de:	6062      	str	r2, [r4, #4]
 80063e0:	04d9      	lsls	r1, r3, #19
 80063e2:	6922      	ldr	r2, [r4, #16]
 80063e4:	6022      	str	r2, [r4, #0]
 80063e6:	d504      	bpl.n	80063f2 <__sflush_r+0x7e>
 80063e8:	1c42      	adds	r2, r0, #1
 80063ea:	d101      	bne.n	80063f0 <__sflush_r+0x7c>
 80063ec:	682b      	ldr	r3, [r5, #0]
 80063ee:	b903      	cbnz	r3, 80063f2 <__sflush_r+0x7e>
 80063f0:	6560      	str	r0, [r4, #84]	; 0x54
 80063f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063f4:	602f      	str	r7, [r5, #0]
 80063f6:	2900      	cmp	r1, #0
 80063f8:	d0c9      	beq.n	800638e <__sflush_r+0x1a>
 80063fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80063fe:	4299      	cmp	r1, r3
 8006400:	d002      	beq.n	8006408 <__sflush_r+0x94>
 8006402:	4628      	mov	r0, r5
 8006404:	f7ff feb6 	bl	8006174 <_free_r>
 8006408:	2000      	movs	r0, #0
 800640a:	6360      	str	r0, [r4, #52]	; 0x34
 800640c:	e7c0      	b.n	8006390 <__sflush_r+0x1c>
 800640e:	2301      	movs	r3, #1
 8006410:	4628      	mov	r0, r5
 8006412:	47b0      	blx	r6
 8006414:	1c41      	adds	r1, r0, #1
 8006416:	d1c8      	bne.n	80063aa <__sflush_r+0x36>
 8006418:	682b      	ldr	r3, [r5, #0]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d0c5      	beq.n	80063aa <__sflush_r+0x36>
 800641e:	2b1d      	cmp	r3, #29
 8006420:	d001      	beq.n	8006426 <__sflush_r+0xb2>
 8006422:	2b16      	cmp	r3, #22
 8006424:	d101      	bne.n	800642a <__sflush_r+0xb6>
 8006426:	602f      	str	r7, [r5, #0]
 8006428:	e7b1      	b.n	800638e <__sflush_r+0x1a>
 800642a:	89a3      	ldrh	r3, [r4, #12]
 800642c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006430:	81a3      	strh	r3, [r4, #12]
 8006432:	e7ad      	b.n	8006390 <__sflush_r+0x1c>
 8006434:	690f      	ldr	r7, [r1, #16]
 8006436:	2f00      	cmp	r7, #0
 8006438:	d0a9      	beq.n	800638e <__sflush_r+0x1a>
 800643a:	0793      	lsls	r3, r2, #30
 800643c:	680e      	ldr	r6, [r1, #0]
 800643e:	bf08      	it	eq
 8006440:	694b      	ldreq	r3, [r1, #20]
 8006442:	600f      	str	r7, [r1, #0]
 8006444:	bf18      	it	ne
 8006446:	2300      	movne	r3, #0
 8006448:	eba6 0807 	sub.w	r8, r6, r7
 800644c:	608b      	str	r3, [r1, #8]
 800644e:	f1b8 0f00 	cmp.w	r8, #0
 8006452:	dd9c      	ble.n	800638e <__sflush_r+0x1a>
 8006454:	6a21      	ldr	r1, [r4, #32]
 8006456:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006458:	4643      	mov	r3, r8
 800645a:	463a      	mov	r2, r7
 800645c:	4628      	mov	r0, r5
 800645e:	47b0      	blx	r6
 8006460:	2800      	cmp	r0, #0
 8006462:	dc06      	bgt.n	8006472 <__sflush_r+0xfe>
 8006464:	89a3      	ldrh	r3, [r4, #12]
 8006466:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800646a:	81a3      	strh	r3, [r4, #12]
 800646c:	f04f 30ff 	mov.w	r0, #4294967295
 8006470:	e78e      	b.n	8006390 <__sflush_r+0x1c>
 8006472:	4407      	add	r7, r0
 8006474:	eba8 0800 	sub.w	r8, r8, r0
 8006478:	e7e9      	b.n	800644e <__sflush_r+0xda>
 800647a:	bf00      	nop
 800647c:	dfbffffe 	.word	0xdfbffffe

08006480 <_fflush_r>:
 8006480:	b538      	push	{r3, r4, r5, lr}
 8006482:	690b      	ldr	r3, [r1, #16]
 8006484:	4605      	mov	r5, r0
 8006486:	460c      	mov	r4, r1
 8006488:	b913      	cbnz	r3, 8006490 <_fflush_r+0x10>
 800648a:	2500      	movs	r5, #0
 800648c:	4628      	mov	r0, r5
 800648e:	bd38      	pop	{r3, r4, r5, pc}
 8006490:	b118      	cbz	r0, 800649a <_fflush_r+0x1a>
 8006492:	6a03      	ldr	r3, [r0, #32]
 8006494:	b90b      	cbnz	r3, 800649a <_fflush_r+0x1a>
 8006496:	f7ff fbc1 	bl	8005c1c <__sinit>
 800649a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d0f3      	beq.n	800648a <_fflush_r+0xa>
 80064a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80064a4:	07d0      	lsls	r0, r2, #31
 80064a6:	d404      	bmi.n	80064b2 <_fflush_r+0x32>
 80064a8:	0599      	lsls	r1, r3, #22
 80064aa:	d402      	bmi.n	80064b2 <_fflush_r+0x32>
 80064ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064ae:	f7ff fe50 	bl	8006152 <__retarget_lock_acquire_recursive>
 80064b2:	4628      	mov	r0, r5
 80064b4:	4621      	mov	r1, r4
 80064b6:	f7ff ff5d 	bl	8006374 <__sflush_r>
 80064ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80064bc:	07da      	lsls	r2, r3, #31
 80064be:	4605      	mov	r5, r0
 80064c0:	d4e4      	bmi.n	800648c <_fflush_r+0xc>
 80064c2:	89a3      	ldrh	r3, [r4, #12]
 80064c4:	059b      	lsls	r3, r3, #22
 80064c6:	d4e1      	bmi.n	800648c <_fflush_r+0xc>
 80064c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064ca:	f7ff fe43 	bl	8006154 <__retarget_lock_release_recursive>
 80064ce:	e7dd      	b.n	800648c <_fflush_r+0xc>

080064d0 <__swhatbuf_r>:
 80064d0:	b570      	push	{r4, r5, r6, lr}
 80064d2:	460c      	mov	r4, r1
 80064d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064d8:	2900      	cmp	r1, #0
 80064da:	b096      	sub	sp, #88	; 0x58
 80064dc:	4615      	mov	r5, r2
 80064de:	461e      	mov	r6, r3
 80064e0:	da0d      	bge.n	80064fe <__swhatbuf_r+0x2e>
 80064e2:	89a3      	ldrh	r3, [r4, #12]
 80064e4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80064e8:	f04f 0100 	mov.w	r1, #0
 80064ec:	bf0c      	ite	eq
 80064ee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80064f2:	2340      	movne	r3, #64	; 0x40
 80064f4:	2000      	movs	r0, #0
 80064f6:	6031      	str	r1, [r6, #0]
 80064f8:	602b      	str	r3, [r5, #0]
 80064fa:	b016      	add	sp, #88	; 0x58
 80064fc:	bd70      	pop	{r4, r5, r6, pc}
 80064fe:	466a      	mov	r2, sp
 8006500:	f000 f87c 	bl	80065fc <_fstat_r>
 8006504:	2800      	cmp	r0, #0
 8006506:	dbec      	blt.n	80064e2 <__swhatbuf_r+0x12>
 8006508:	9901      	ldr	r1, [sp, #4]
 800650a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800650e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006512:	4259      	negs	r1, r3
 8006514:	4159      	adcs	r1, r3
 8006516:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800651a:	e7eb      	b.n	80064f4 <__swhatbuf_r+0x24>

0800651c <__smakebuf_r>:
 800651c:	898b      	ldrh	r3, [r1, #12]
 800651e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006520:	079d      	lsls	r5, r3, #30
 8006522:	4606      	mov	r6, r0
 8006524:	460c      	mov	r4, r1
 8006526:	d507      	bpl.n	8006538 <__smakebuf_r+0x1c>
 8006528:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800652c:	6023      	str	r3, [r4, #0]
 800652e:	6123      	str	r3, [r4, #16]
 8006530:	2301      	movs	r3, #1
 8006532:	6163      	str	r3, [r4, #20]
 8006534:	b002      	add	sp, #8
 8006536:	bd70      	pop	{r4, r5, r6, pc}
 8006538:	ab01      	add	r3, sp, #4
 800653a:	466a      	mov	r2, sp
 800653c:	f7ff ffc8 	bl	80064d0 <__swhatbuf_r>
 8006540:	9900      	ldr	r1, [sp, #0]
 8006542:	4605      	mov	r5, r0
 8006544:	4630      	mov	r0, r6
 8006546:	f7ff fe89 	bl	800625c <_malloc_r>
 800654a:	b948      	cbnz	r0, 8006560 <__smakebuf_r+0x44>
 800654c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006550:	059a      	lsls	r2, r3, #22
 8006552:	d4ef      	bmi.n	8006534 <__smakebuf_r+0x18>
 8006554:	f023 0303 	bic.w	r3, r3, #3
 8006558:	f043 0302 	orr.w	r3, r3, #2
 800655c:	81a3      	strh	r3, [r4, #12]
 800655e:	e7e3      	b.n	8006528 <__smakebuf_r+0xc>
 8006560:	89a3      	ldrh	r3, [r4, #12]
 8006562:	6020      	str	r0, [r4, #0]
 8006564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006568:	81a3      	strh	r3, [r4, #12]
 800656a:	9b00      	ldr	r3, [sp, #0]
 800656c:	6163      	str	r3, [r4, #20]
 800656e:	9b01      	ldr	r3, [sp, #4]
 8006570:	6120      	str	r0, [r4, #16]
 8006572:	b15b      	cbz	r3, 800658c <__smakebuf_r+0x70>
 8006574:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006578:	4630      	mov	r0, r6
 800657a:	f000 f851 	bl	8006620 <_isatty_r>
 800657e:	b128      	cbz	r0, 800658c <__smakebuf_r+0x70>
 8006580:	89a3      	ldrh	r3, [r4, #12]
 8006582:	f023 0303 	bic.w	r3, r3, #3
 8006586:	f043 0301 	orr.w	r3, r3, #1
 800658a:	81a3      	strh	r3, [r4, #12]
 800658c:	89a3      	ldrh	r3, [r4, #12]
 800658e:	431d      	orrs	r5, r3
 8006590:	81a5      	strh	r5, [r4, #12]
 8006592:	e7cf      	b.n	8006534 <__smakebuf_r+0x18>

08006594 <_putc_r>:
 8006594:	b570      	push	{r4, r5, r6, lr}
 8006596:	460d      	mov	r5, r1
 8006598:	4614      	mov	r4, r2
 800659a:	4606      	mov	r6, r0
 800659c:	b118      	cbz	r0, 80065a6 <_putc_r+0x12>
 800659e:	6a03      	ldr	r3, [r0, #32]
 80065a0:	b90b      	cbnz	r3, 80065a6 <_putc_r+0x12>
 80065a2:	f7ff fb3b 	bl	8005c1c <__sinit>
 80065a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065a8:	07d8      	lsls	r0, r3, #31
 80065aa:	d405      	bmi.n	80065b8 <_putc_r+0x24>
 80065ac:	89a3      	ldrh	r3, [r4, #12]
 80065ae:	0599      	lsls	r1, r3, #22
 80065b0:	d402      	bmi.n	80065b8 <_putc_r+0x24>
 80065b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065b4:	f7ff fdcd 	bl	8006152 <__retarget_lock_acquire_recursive>
 80065b8:	68a3      	ldr	r3, [r4, #8]
 80065ba:	3b01      	subs	r3, #1
 80065bc:	2b00      	cmp	r3, #0
 80065be:	60a3      	str	r3, [r4, #8]
 80065c0:	da05      	bge.n	80065ce <_putc_r+0x3a>
 80065c2:	69a2      	ldr	r2, [r4, #24]
 80065c4:	4293      	cmp	r3, r2
 80065c6:	db12      	blt.n	80065ee <_putc_r+0x5a>
 80065c8:	b2eb      	uxtb	r3, r5
 80065ca:	2b0a      	cmp	r3, #10
 80065cc:	d00f      	beq.n	80065ee <_putc_r+0x5a>
 80065ce:	6823      	ldr	r3, [r4, #0]
 80065d0:	1c5a      	adds	r2, r3, #1
 80065d2:	6022      	str	r2, [r4, #0]
 80065d4:	701d      	strb	r5, [r3, #0]
 80065d6:	b2ed      	uxtb	r5, r5
 80065d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065da:	07da      	lsls	r2, r3, #31
 80065dc:	d405      	bmi.n	80065ea <_putc_r+0x56>
 80065de:	89a3      	ldrh	r3, [r4, #12]
 80065e0:	059b      	lsls	r3, r3, #22
 80065e2:	d402      	bmi.n	80065ea <_putc_r+0x56>
 80065e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065e6:	f7ff fdb5 	bl	8006154 <__retarget_lock_release_recursive>
 80065ea:	4628      	mov	r0, r5
 80065ec:	bd70      	pop	{r4, r5, r6, pc}
 80065ee:	4629      	mov	r1, r5
 80065f0:	4622      	mov	r2, r4
 80065f2:	4630      	mov	r0, r6
 80065f4:	f7ff fca5 	bl	8005f42 <__swbuf_r>
 80065f8:	4605      	mov	r5, r0
 80065fa:	e7ed      	b.n	80065d8 <_putc_r+0x44>

080065fc <_fstat_r>:
 80065fc:	b538      	push	{r3, r4, r5, lr}
 80065fe:	4d07      	ldr	r5, [pc, #28]	; (800661c <_fstat_r+0x20>)
 8006600:	2300      	movs	r3, #0
 8006602:	4604      	mov	r4, r0
 8006604:	4608      	mov	r0, r1
 8006606:	4611      	mov	r1, r2
 8006608:	602b      	str	r3, [r5, #0]
 800660a:	f7fd fbf2 	bl	8003df2 <_fstat>
 800660e:	1c43      	adds	r3, r0, #1
 8006610:	d102      	bne.n	8006618 <_fstat_r+0x1c>
 8006612:	682b      	ldr	r3, [r5, #0]
 8006614:	b103      	cbz	r3, 8006618 <_fstat_r+0x1c>
 8006616:	6023      	str	r3, [r4, #0]
 8006618:	bd38      	pop	{r3, r4, r5, pc}
 800661a:	bf00      	nop
 800661c:	20004c14 	.word	0x20004c14

08006620 <_isatty_r>:
 8006620:	b538      	push	{r3, r4, r5, lr}
 8006622:	4d06      	ldr	r5, [pc, #24]	; (800663c <_isatty_r+0x1c>)
 8006624:	2300      	movs	r3, #0
 8006626:	4604      	mov	r4, r0
 8006628:	4608      	mov	r0, r1
 800662a:	602b      	str	r3, [r5, #0]
 800662c:	f7fd fbe2 	bl	8003df4 <_isatty>
 8006630:	1c43      	adds	r3, r0, #1
 8006632:	d102      	bne.n	800663a <_isatty_r+0x1a>
 8006634:	682b      	ldr	r3, [r5, #0]
 8006636:	b103      	cbz	r3, 800663a <_isatty_r+0x1a>
 8006638:	6023      	str	r3, [r4, #0]
 800663a:	bd38      	pop	{r3, r4, r5, pc}
 800663c:	20004c14 	.word	0x20004c14

08006640 <_sbrk_r>:
 8006640:	b538      	push	{r3, r4, r5, lr}
 8006642:	4d06      	ldr	r5, [pc, #24]	; (800665c <_sbrk_r+0x1c>)
 8006644:	2300      	movs	r3, #0
 8006646:	4604      	mov	r4, r0
 8006648:	4608      	mov	r0, r1
 800664a:	602b      	str	r3, [r5, #0]
 800664c:	f000 f810 	bl	8006670 <_sbrk>
 8006650:	1c43      	adds	r3, r0, #1
 8006652:	d102      	bne.n	800665a <_sbrk_r+0x1a>
 8006654:	682b      	ldr	r3, [r5, #0]
 8006656:	b103      	cbz	r3, 800665a <_sbrk_r+0x1a>
 8006658:	6023      	str	r3, [r4, #0]
 800665a:	bd38      	pop	{r3, r4, r5, pc}
 800665c:	20004c14 	.word	0x20004c14

08006660 <_close>:
 8006660:	4b02      	ldr	r3, [pc, #8]	; (800666c <_close+0xc>)
 8006662:	2258      	movs	r2, #88	; 0x58
 8006664:	601a      	str	r2, [r3, #0]
 8006666:	f04f 30ff 	mov.w	r0, #4294967295
 800666a:	4770      	bx	lr
 800666c:	20004c14 	.word	0x20004c14

08006670 <_sbrk>:
 8006670:	4a04      	ldr	r2, [pc, #16]	; (8006684 <_sbrk+0x14>)
 8006672:	6811      	ldr	r1, [r2, #0]
 8006674:	4603      	mov	r3, r0
 8006676:	b909      	cbnz	r1, 800667c <_sbrk+0xc>
 8006678:	4903      	ldr	r1, [pc, #12]	; (8006688 <_sbrk+0x18>)
 800667a:	6011      	str	r1, [r2, #0]
 800667c:	6810      	ldr	r0, [r2, #0]
 800667e:	4403      	add	r3, r0
 8006680:	6013      	str	r3, [r2, #0]
 8006682:	4770      	bx	lr
 8006684:	20004c24 	.word	0x20004c24
 8006688:	20004c28 	.word	0x20004c28

0800668c <_init>:
 800668c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800668e:	bf00      	nop
 8006690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006692:	bc08      	pop	{r3}
 8006694:	469e      	mov	lr, r3
 8006696:	4770      	bx	lr

08006698 <_fini>:
 8006698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800669a:	bf00      	nop
 800669c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800669e:	bc08      	pop	{r3}
 80066a0:	469e      	mov	lr, r3
 80066a2:	4770      	bx	lr
