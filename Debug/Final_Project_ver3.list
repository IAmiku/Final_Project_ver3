
Final_Project_ver3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081f0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c9c  080083f0  080083f0  000183f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a08c  0800a08c  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800a08c  0800a08c  0001a08c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a094  0800a094  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a094  0800a094  0001a094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a098  0800a098  0001a098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800a09c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f98  20000080  0800a11c  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000400  20005018  0800a11c  00025018  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY
 13 .debug_info   000354b3  00000000  00000000  000200f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000059fe  00000000  00000000  000555a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00018ab1  00000000  00000000  0005afa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002108  00000000  00000000  00073a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001a32  00000000  00000000  00075b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003398d  00000000  00000000  00077592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00037a00  00000000  00000000  000aaf1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0013923b  00000000  00000000  000e291f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006a88  00000000  00000000  0021bb5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  002225e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000080 	.word	0x20000080
 800021c:	00000000 	.word	0x00000000
 8000220:	080083d8 	.word	0x080083d8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000084 	.word	0x20000084
 800023c:	080083d8 	.word	0x080083d8

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <NT35510_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t NT35510_Init(uint32_t ColorCoding, uint32_t orientation)
{
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	b0b1      	sub	sp, #196	; 0xc4
 80005f0:	4604      	mov	r4, r0
 80005f2:	460d      	mov	r5, r1
  NT35510_IO_Delay(120);
 80005f4:	2078      	movs	r0, #120	; 0x78
 80005f6:	f000 f971 	bl	80008dc <NT35510_IO_Delay>

/* ************************************************************************** */
/* Proprietary Initialization                                                 */
/* ************************************************************************** */
  const uint8_t nt35510_reg[]   = {0x55, 0xAA, 0x52, 0x08, 0x01, 0xF0};
 80005fa:	4ba9      	ldr	r3, [pc, #676]	; (80008a0 <NT35510_Init+0x2b4>)
 80005fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000600:	902e      	str	r0, [sp, #184]	; 0xb8
 8000602:	f8ad 10bc 	strh.w	r1, [sp, #188]	; 0xbc
  const uint8_t nt35510_reg1[]  = {0x03, 0x03, 0x03, 0xB0};
 8000606:	4ba7      	ldr	r3, [pc, #668]	; (80008a4 <NT35510_Init+0x2b8>)
 8000608:	932d      	str	r3, [sp, #180]	; 0xb4
  const uint8_t nt35510_reg2[]  = {0x46, 0x46, 0x46, 0xB6};
 800060a:	4ba7      	ldr	r3, [pc, #668]	; (80008a8 <NT35510_Init+0x2bc>)
 800060c:	932c      	str	r3, [sp, #176]	; 0xb0
  const uint8_t nt35510_reg3[]  = {0x03, 0x03, 0x03, 0xB1};
 800060e:	4ba7      	ldr	r3, [pc, #668]	; (80008ac <NT35510_Init+0x2c0>)
 8000610:	932b      	str	r3, [sp, #172]	; 0xac
  const uint8_t nt35510_reg4[]  = {0x36, 0x36, 0x36, 0xB7};
 8000612:	4ba7      	ldr	r3, [pc, #668]	; (80008b0 <NT35510_Init+0x2c4>)
 8000614:	932a      	str	r3, [sp, #168]	; 0xa8
  const uint8_t nt35510_reg5[]  = {0x00, 0x00, 0x02, 0xB2};
 8000616:	4ba7      	ldr	r3, [pc, #668]	; (80008b4 <NT35510_Init+0x2c8>)
 8000618:	9329      	str	r3, [sp, #164]	; 0xa4
  const uint8_t nt35510_reg6[]  = {0x26, 0x26, 0x26, 0xB8};
 800061a:	4ba7      	ldr	r3, [pc, #668]	; (80008b8 <NT35510_Init+0x2cc>)
 800061c:	9328      	str	r3, [sp, #160]	; 0xa0
  const uint8_t nt35510_reg7[]  = {0xBF, 0x01};
 800061e:	f240 13bf 	movw	r3, #447	; 0x1bf
 8000622:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
  const uint8_t nt35510_reg8[]  = {0x09, 0x09, 0x09, 0xB3};
 8000626:	4ba5      	ldr	r3, [pc, #660]	; (80008bc <NT35510_Init+0x2d0>)
 8000628:	9326      	str	r3, [sp, #152]	; 0x98
  const uint8_t nt35510_reg9[]  = {0x36, 0x36, 0x36, 0xB9};
 800062a:	4ba5      	ldr	r3, [pc, #660]	; (80008c0 <NT35510_Init+0x2d4>)
 800062c:	9325      	str	r3, [sp, #148]	; 0x94
  const uint8_t nt35510_reg10[] = {0x08, 0x08, 0x08, 0xB5};
 800062e:	4ba5      	ldr	r3, [pc, #660]	; (80008c4 <NT35510_Init+0x2d8>)
 8000630:	9324      	str	r3, [sp, #144]	; 0x90
  const uint8_t nt35510_reg12[] = {0x26, 0x26, 0x26, 0xBA};
 8000632:	4ba5      	ldr	r3, [pc, #660]	; (80008c8 <NT35510_Init+0x2dc>)
 8000634:	9323      	str	r3, [sp, #140]	; 0x8c
  const uint8_t nt35510_reg13[] = {0x00, 0x80, 0x00, 0xBC};
 8000636:	4ba5      	ldr	r3, [pc, #660]	; (80008cc <NT35510_Init+0x2e0>)
 8000638:	9322      	str	r3, [sp, #136]	; 0x88
  const uint8_t nt35510_reg14[] = {0x00, 0x80, 0x00, 0xBD};
 800063a:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 800063e:	9321      	str	r3, [sp, #132]	; 0x84
  const uint8_t nt35510_reg15[] = {0x00, 0x50, 0xBE};
 8000640:	4ba3      	ldr	r3, [pc, #652]	; (80008d0 <NT35510_Init+0x2e4>)
 8000642:	461a      	mov	r2, r3
 8000644:	f852 1b04 	ldr.w	r1, [r2], #4
 8000648:	f8ad 1080 	strh.w	r1, [sp, #128]	; 0x80
 800064c:	0c09      	lsrs	r1, r1, #16
 800064e:	f88d 1082 	strb.w	r1, [sp, #130]	; 0x82
  const uint8_t nt35510_reg16[] = {0x55, 0xAA, 0x52, 0x08, 0x00, 0xF0};
 8000652:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000656:	901e      	str	r0, [sp, #120]	; 0x78
 8000658:	f8ad 107c 	strh.w	r1, [sp, #124]	; 0x7c
  const uint8_t nt35510_reg17[] = {0xFC, 0x00, 0xB1};
 800065c:	68da      	ldr	r2, [r3, #12]
 800065e:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
 8000662:	0c12      	lsrs	r2, r2, #16
 8000664:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
  const uint8_t nt35510_reg18[] = {0xB6, 0x03};
 8000668:	f240 32b6 	movw	r2, #950	; 0x3b6
 800066c:	f8ad 2070 	strh.w	r2, [sp, #112]	; 0x70
  const uint8_t nt35510_reg19[] = {0xB5, 0x51};
 8000670:	f245 12b5 	movw	r2, #20917	; 0x51b5
 8000674:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
  const uint8_t nt35510_reg20[] = {0x00, 0x00, 0xB7};
 8000678:	691a      	ldr	r2, [r3, #16]
 800067a:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
 800067e:	0c12      	lsrs	r2, r2, #16
 8000680:	f88d 206a 	strb.w	r2, [sp, #106]	; 0x6a
  const uint8_t nt35510_reg21[] = {0x01, 0x02, 0x02, 0x02, 0xB8};
 8000684:	4a93      	ldr	r2, [pc, #588]	; (80008d4 <NT35510_Init+0x2e8>)
 8000686:	e892 0003 	ldmia.w	r2, {r0, r1}
 800068a:	9018      	str	r0, [sp, #96]	; 0x60
 800068c:	f88d 1064 	strb.w	r1, [sp, #100]	; 0x64
  const uint8_t nt35510_reg22[] = {0x00, 0x00, 0x00, 0xBC};
 8000690:	f04f 423c 	mov.w	r2, #3154116608	; 0xbc000000
 8000694:	9217      	str	r2, [sp, #92]	; 0x5c
  const uint8_t nt35510_reg23[] = {0x03, 0x00, 0x00, 0xCC};
 8000696:	4a90      	ldr	r2, [pc, #576]	; (80008d8 <NT35510_Init+0x2ec>)
 8000698:	9216      	str	r2, [sp, #88]	; 0x58
  const uint8_t nt35510_reg24[] = {0xBA, 0x01};
 800069a:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
 800069e:	f8ad 2054 	strh.w	r2, [sp, #84]	; 0x54
  const uint8_t nt35510_madctl_portrait[] = {NT35510_CMD_MADCTL ,0x00};
 80006a2:	2236      	movs	r2, #54	; 0x36
 80006a4:	f8ad 2050 	strh.w	r2, [sp, #80]	; 0x50
  const uint8_t nt35510_caset_portrait[] = {0x00, 0x00, 0x01, 0xDF ,NT35510_CMD_CASET};
 80006a8:	f103 0214 	add.w	r2, r3, #20
 80006ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006b0:	9012      	str	r0, [sp, #72]	; 0x48
 80006b2:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
  const uint8_t nt35510_raset_portrait[] = {0x00, 0x00, 0x03, 0x1F ,NT35510_CMD_RASET};
 80006b6:	f103 021c 	add.w	r2, r3, #28
 80006ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006be:	9010      	str	r0, [sp, #64]	; 0x40
 80006c0:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
  const uint8_t nt35510_madctl_landscape[] = {NT35510_CMD_MADCTL, 0x60};
 80006c4:	f246 0236 	movw	r2, #24630	; 0x6036
 80006c8:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
  const uint8_t nt35510_caset_landscape[] = {0x00, 0x00, 0x03, 0x1F ,NT35510_CMD_CASET};
 80006cc:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80006d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006d4:	900d      	str	r0, [sp, #52]	; 0x34
 80006d6:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  const uint8_t nt35510_raset_landscape[] = {0x00, 0x00, 0x01, 0xDF ,NT35510_CMD_RASET};
 80006da:	332c      	adds	r3, #44	; 0x2c
 80006dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006e0:	900b      	str	r0, [sp, #44]	; 0x2c
 80006e2:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
  const uint8_t nt35510_reg26[] = {NT35510_CMD_TEEON, 0x00};  /* Tear on */
 80006e6:	2335      	movs	r3, #53	; 0x35
 80006e8:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
  const uint8_t nt35510_reg27[] = {NT35510_CMD_SLPOUT, 0x00}; /* Sleep out */
 80006ec:	2311      	movs	r3, #17
 80006ee:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  const uint8_t nt35510_reg30[] = {NT35510_CMD_DISPON, 0x00};
 80006f2:	2329      	movs	r3, #41	; 0x29
 80006f4:	f8ad 3020 	strh.w	r3, [sp, #32]

  const uint8_t nt35510_reg31[] = {NT35510_CMD_WRDISBV, 0x7F};
 80006f8:	f647 7351 	movw	r3, #32593	; 0x7f51
 80006fc:	f8ad 301c 	strh.w	r3, [sp, #28]
  const uint8_t nt35510_reg32[] = {NT35510_CMD_WRCTRLD, 0x2C};
 8000700:	f642 4353 	movw	r3, #11347	; 0x2c53
 8000704:	f8ad 3018 	strh.w	r3, [sp, #24]
  const uint8_t nt35510_reg33[] = {NT35510_CMD_WRCABC, 0x02};
 8000708:	f240 2355 	movw	r3, #597	; 0x255
 800070c:	f8ad 3014 	strh.w	r3, [sp, #20]
  const uint8_t nt35510_reg34[] = {NT35510_CMD_WRCABCMB, 0xFF};
 8000710:	f64f 735e 	movw	r3, #65374	; 0xff5e
 8000714:	f8ad 3010 	strh.w	r3, [sp, #16]
  const uint8_t nt35510_reg35[] = {NT35510_CMD_RAMWR, 0x00};
 8000718:	232c      	movs	r3, #44	; 0x2c
 800071a:	f8ad 300c 	strh.w	r3, [sp, #12]
  const uint8_t nt35510_reg36[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB565};
 800071e:	f245 533a 	movw	r3, #21818	; 0x553a
 8000722:	f8ad 3008 	strh.w	r3, [sp, #8]
  const uint8_t nt35510_reg37[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB888};
 8000726:	f247 733a 	movw	r3, #30522	; 0x773a
 800072a:	f8ad 3004 	strh.w	r3, [sp, #4]

  DSI_IO_WriteCmd(5, (uint8_t *)nt35510_reg); /* LV2:  Page 1 enable */
 800072e:	a92e      	add	r1, sp, #184	; 0xb8
 8000730:	2005      	movs	r0, #5
 8000732:	f000 f9c3 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg1);/* AVDD: 5.2V */
 8000736:	a92d      	add	r1, sp, #180	; 0xb4
 8000738:	2003      	movs	r0, #3
 800073a:	f000 f9bf 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg2);/* AVDD: Ratio */
 800073e:	a92c      	add	r1, sp, #176	; 0xb0
 8000740:	2003      	movs	r0, #3
 8000742:	f000 f9bb 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg3);/* AVEE: -5.2V */
 8000746:	a92b      	add	r1, sp, #172	; 0xac
 8000748:	2003      	movs	r0, #3
 800074a:	f000 f9b7 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg4);/* AVEE: Ratio */
 800074e:	a92a      	add	r1, sp, #168	; 0xa8
 8000750:	2003      	movs	r0, #3
 8000752:	f000 f9b3 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg5);/* VCL: -2.5V */
 8000756:	a929      	add	r1, sp, #164	; 0xa4
 8000758:	2003      	movs	r0, #3
 800075a:	f000 f9af 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg6);/* VCL: Ratio */
 800075e:	a928      	add	r1, sp, #160	; 0xa0
 8000760:	2003      	movs	r0, #3
 8000762:	f000 f9ab 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg7);/* VGH: 15V (Free Pump) */
 8000766:	a927      	add	r1, sp, #156	; 0x9c
 8000768:	2001      	movs	r0, #1
 800076a:	f000 f9a7 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg8);
 800076e:	a926      	add	r1, sp, #152	; 0x98
 8000770:	2003      	movs	r0, #3
 8000772:	f000 f9a3 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg9);/* VGH: Ratio */
 8000776:	a925      	add	r1, sp, #148	; 0x94
 8000778:	2003      	movs	r0, #3
 800077a:	f000 f99f 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg10);/* VGL_REG: -10V */
 800077e:	a924      	add	r1, sp, #144	; 0x90
 8000780:	2003      	movs	r0, #3
 8000782:	f000 f99b 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg12);/* VGLX: Ratio */
 8000786:	a923      	add	r1, sp, #140	; 0x8c
 8000788:	2003      	movs	r0, #3
 800078a:	f000 f997 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg13);/* VGMP/VGSP: 4.5V/0V */
 800078e:	a922      	add	r1, sp, #136	; 0x88
 8000790:	2003      	movs	r0, #3
 8000792:	f000 f993 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg14);/* VGMN/VGSN:-4.5V/0V */
 8000796:	a921      	add	r1, sp, #132	; 0x84
 8000798:	2003      	movs	r0, #3
 800079a:	f000 f98f 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg15);/* VCOM: -1.325V */
 800079e:	a920      	add	r1, sp, #128	; 0x80
 80007a0:	2002      	movs	r0, #2
 80007a2:	f000 f98b 	bl	8000abc <DSI_IO_WriteCmd>

/* ************************************************************************** */
/* Proprietary DCS Initialization                                             */
/* ************************************************************************** */
  DSI_IO_WriteCmd(5, (uint8_t *)nt35510_reg16);/* LV2: Page 0 enable */
 80007a6:	a91e      	add	r1, sp, #120	; 0x78
 80007a8:	2005      	movs	r0, #5
 80007aa:	f000 f987 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg17);/* Display control */
 80007ae:	a91d      	add	r1, sp, #116	; 0x74
 80007b0:	2002      	movs	r0, #2
 80007b2:	f000 f983 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg18);/* Src hold time */
 80007b6:	a91c      	add	r1, sp, #112	; 0x70
 80007b8:	2001      	movs	r0, #1
 80007ba:	f000 f97f 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg19);
 80007be:	a91b      	add	r1, sp, #108	; 0x6c
 80007c0:	2001      	movs	r0, #1
 80007c2:	f000 f97b 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg20);/* Gate EQ control */
 80007c6:	a91a      	add	r1, sp, #104	; 0x68
 80007c8:	2002      	movs	r0, #2
 80007ca:	f000 f977 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(4, (uint8_t *)nt35510_reg21);/* Src EQ control(Mode2) */
 80007ce:	a918      	add	r1, sp, #96	; 0x60
 80007d0:	2004      	movs	r0, #4
 80007d2:	f000 f973 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg22);/* Inv. mode(2-dot) */
 80007d6:	a917      	add	r1, sp, #92	; 0x5c
 80007d8:	2003      	movs	r0, #3
 80007da:	f000 f96f 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg23);
 80007de:	a916      	add	r1, sp, #88	; 0x58
 80007e0:	2003      	movs	r0, #3
 80007e2:	f000 f96b 	bl	8000abc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg24);
 80007e6:	a915      	add	r1, sp, #84	; 0x54
 80007e8:	2001      	movs	r0, #1
 80007ea:	f000 f967 	bl	8000abc <DSI_IO_WriteCmd>
  /* Tear on */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg26);
 80007ee:	a90a      	add	r1, sp, #40	; 0x28
 80007f0:	2000      	movs	r0, #0
 80007f2:	f000 f963 	bl	8000abc <DSI_IO_WriteCmd>
  /* Set Pixel color format to RGB888 */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg37);
 80007f6:	a901      	add	r1, sp, #4
 80007f8:	2000      	movs	r0, #0
 80007fa:	f000 f95f 	bl	8000abc <DSI_IO_WriteCmd>
/* ************************************************************************** */
/* Standard DCS Initialization                                                */
/* ************************************************************************** */

  /* Add a delay, otherwise MADCTL not taken */
  NT35510_IO_Delay(200);
 80007fe:	20c8      	movs	r0, #200	; 0xc8
 8000800:	f000 f86c 	bl	80008dc <NT35510_IO_Delay>

  /* Configure orientation */
  if(orientation == NT35510_ORIENTATION_PORTRAIT)
 8000804:	2d00      	cmp	r5, #0
 8000806:	d134      	bne.n	8000872 <NT35510_Init+0x286>
  {
    DSI_IO_WriteCmd(1, (uint8_t *)nt35510_madctl_portrait);
 8000808:	a914      	add	r1, sp, #80	; 0x50
 800080a:	2001      	movs	r0, #1
 800080c:	f000 f956 	bl	8000abc <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_caset_portrait);
 8000810:	a912      	add	r1, sp, #72	; 0x48
 8000812:	2004      	movs	r0, #4
 8000814:	f000 f952 	bl	8000abc <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_raset_portrait);
 8000818:	a910      	add	r1, sp, #64	; 0x40
 800081a:	2004      	movs	r0, #4
 800081c:	f000 f94e 	bl	8000abc <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(1, (uint8_t *)nt35510_madctl_landscape);
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_caset_landscape);
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_raset_landscape);
  }

  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg27);
 8000820:	a909      	add	r1, sp, #36	; 0x24
 8000822:	2000      	movs	r0, #0
 8000824:	f000 f94a 	bl	8000abc <DSI_IO_WriteCmd>
  /* Wait for sleep out exit */
  NT35510_IO_Delay(120);
 8000828:	2078      	movs	r0, #120	; 0x78
 800082a:	f000 f857 	bl	80008dc <NT35510_IO_Delay>

  switch(ColorCoding)
 800082e:	b36c      	cbz	r4, 800088c <NT35510_Init+0x2a0>
 8000830:	2c02      	cmp	r4, #2
 8000832:	d130      	bne.n	8000896 <NT35510_Init+0x2aa>
  {
    case NT35510_FORMAT_RBG565 :
      /* Set Pixel color format to RGB565 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg36);
 8000834:	a902      	add	r1, sp, #8
 8000836:	2001      	movs	r0, #1
 8000838:	f000 f940 	bl	8000abc <DSI_IO_WriteCmd>
      break;
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg31);
 800083c:	a907      	add	r1, sp, #28
 800083e:	2001      	movs	r0, #1
 8000840:	f000 f93c 	bl	8000abc <DSI_IO_WriteCmd>
  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg32);
 8000844:	a906      	add	r1, sp, #24
 8000846:	2001      	movs	r0, #1
 8000848:	f000 f938 	bl	8000abc <DSI_IO_WriteCmd>
  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg33);
 800084c:	a905      	add	r1, sp, #20
 800084e:	2001      	movs	r0, #1
 8000850:	f000 f934 	bl	8000abc <DSI_IO_WriteCmd>
  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg34);
 8000854:	a904      	add	r1, sp, #16
 8000856:	2001      	movs	r0, #1
 8000858:	f000 f930 	bl	8000abc <DSI_IO_WriteCmd>
  /** CABC : Content Adaptive Backlight Control section end << */

  /* Display on */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg30);
 800085c:	a908      	add	r1, sp, #32
 800085e:	2000      	movs	r0, #0
 8000860:	f000 f92c 	bl	8000abc <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg35);
 8000864:	a903      	add	r1, sp, #12
 8000866:	2000      	movs	r0, #0
 8000868:	f000 f928 	bl	8000abc <DSI_IO_WriteCmd>

  return 0;
}
 800086c:	2000      	movs	r0, #0
 800086e:	b031      	add	sp, #196	; 0xc4
 8000870:	bd30      	pop	{r4, r5, pc}
    DSI_IO_WriteCmd(1, (uint8_t *)nt35510_madctl_landscape);
 8000872:	a90f      	add	r1, sp, #60	; 0x3c
 8000874:	2001      	movs	r0, #1
 8000876:	f000 f921 	bl	8000abc <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_caset_landscape);
 800087a:	a90d      	add	r1, sp, #52	; 0x34
 800087c:	2004      	movs	r0, #4
 800087e:	f000 f91d 	bl	8000abc <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_raset_landscape);
 8000882:	a90b      	add	r1, sp, #44	; 0x2c
 8000884:	2004      	movs	r0, #4
 8000886:	f000 f919 	bl	8000abc <DSI_IO_WriteCmd>
 800088a:	e7c9      	b.n	8000820 <NT35510_Init+0x234>
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg37);
 800088c:	a901      	add	r1, sp, #4
 800088e:	2001      	movs	r0, #1
 8000890:	f000 f914 	bl	8000abc <DSI_IO_WriteCmd>
      break;
 8000894:	e7d2      	b.n	800083c <NT35510_Init+0x250>
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg37);
 8000896:	a901      	add	r1, sp, #4
 8000898:	2001      	movs	r0, #1
 800089a:	f000 f90f 	bl	8000abc <DSI_IO_WriteCmd>
      break;
 800089e:	e7cd      	b.n	800083c <NT35510_Init+0x250>
 80008a0:	08009f68 	.word	0x08009f68
 80008a4:	b0030303 	.word	0xb0030303
 80008a8:	b6464646 	.word	0xb6464646
 80008ac:	b1030303 	.word	0xb1030303
 80008b0:	b7363636 	.word	0xb7363636
 80008b4:	b2020000 	.word	0xb2020000
 80008b8:	b8262626 	.word	0xb8262626
 80008bc:	b3090909 	.word	0xb3090909
 80008c0:	b9363636 	.word	0xb9363636
 80008c4:	b5080808 	.word	0xb5080808
 80008c8:	ba262626 	.word	0xba262626
 80008cc:	bc008000 	.word	0xbc008000
 80008d0:	080083f0 	.word	0x080083f0
 80008d4:	08009f70 	.word	0x08009f70
 80008d8:	cc000003 	.word	0xcc000003

080008dc <NT35510_IO_Delay>:
/**
  * @brief  NT35510 delay
  * @param  Delay: Delay in ms
  */
void NT35510_IO_Delay(uint32_t Delay)
{
 80008dc:	b508      	push	{r3, lr}
  HAL_Delay(Delay);
 80008de:	f002 fb3b 	bl	8002f58 <HAL_Delay>
}
 80008e2:	bd08      	pop	{r3, pc}

080008e4 <LCD_IO_GetID>:
    return 0;
  }
#else 
  return LCD_DSI_ID; 
#endif /* USE_LCD_HDMI */
}
 80008e4:	2011      	movs	r0, #17
 80008e6:	4770      	bx	lr

080008e8 <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 80008e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008ea:	b083      	sub	sp, #12
 80008ec:	4604      	mov	r4, r0
 80008ee:	460d      	mov	r5, r1
 80008f0:	4616      	mov	r6, r2
 80008f2:	461f      	mov	r7, r3
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 80008f4:	4811      	ldr	r0, [pc, #68]	; (800093c <LL_FillBuffer+0x54>)
 80008f6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80008fa:	6043      	str	r3, [r0, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 80008fc:	2300      	movs	r3, #0
 80008fe:	6083      	str	r3, [r0, #8]
  hdma2d_discovery.Init.OutputOffset = OffLine;
 8000900:	9b08      	ldr	r3, [sp, #32]
 8000902:	60c3      	str	r3, [r0, #12]

  hdma2d_discovery.Instance = DMA2D;
 8000904:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <LL_FillBuffer+0x58>)
 8000906:	6003      	str	r3, [r0, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 8000908:	f003 f908 	bl	8003b1c <HAL_DMA2D_Init>
 800090c:	b108      	cbz	r0, 8000912 <LL_FillBuffer+0x2a>
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
      }
    }
  }
}
 800090e:	b003      	add	sp, #12
 8000910:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, LayerIndex) == HAL_OK)
 8000912:	4621      	mov	r1, r4
 8000914:	4809      	ldr	r0, [pc, #36]	; (800093c <LL_FillBuffer+0x54>)
 8000916:	f003 f9f7 	bl	8003d08 <HAL_DMA2D_ConfigLayer>
 800091a:	2800      	cmp	r0, #0
 800091c:	d1f7      	bne.n	800090e <LL_FillBuffer+0x26>
      if (HAL_DMA2D_Start(&hdma2d_discovery, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800091e:	9700      	str	r7, [sp, #0]
 8000920:	4633      	mov	r3, r6
 8000922:	462a      	mov	r2, r5
 8000924:	9909      	ldr	r1, [sp, #36]	; 0x24
 8000926:	4805      	ldr	r0, [pc, #20]	; (800093c <LL_FillBuffer+0x54>)
 8000928:	f003 f932 	bl	8003b90 <HAL_DMA2D_Start>
 800092c:	2800      	cmp	r0, #0
 800092e:	d1ee      	bne.n	800090e <LL_FillBuffer+0x26>
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 8000930:	210a      	movs	r1, #10
 8000932:	4802      	ldr	r0, [pc, #8]	; (800093c <LL_FillBuffer+0x54>)
 8000934:	f003 f948 	bl	8003bc8 <HAL_DMA2D_PollForTransfer>
}
 8000938:	e7e9      	b.n	800090e <LL_FillBuffer+0x26>
 800093a:	bf00      	nop
 800093c:	2000009c 	.word	0x2000009c
 8000940:	4002b000 	.word	0x4002b000

08000944 <BSP_LCD_Reset>:
{
 8000944:	b570      	push	{r4, r5, r6, lr}
 8000946:	b086      	sub	sp, #24
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000948:	4b14      	ldr	r3, [pc, #80]	; (800099c <BSP_LCD_Reset+0x58>)
 800094a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800094c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000950:	631a      	str	r2, [r3, #48]	; 0x30
 8000952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000954:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000958:	9300      	str	r3, [sp, #0]
 800095a:	9b00      	ldr	r3, [sp, #0]
    gpio_init_structure.Pin   = GPIO_PIN_15;
 800095c:	f44f 4500 	mov.w	r5, #32768	; 0x8000
 8000960:	9501      	str	r5, [sp, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000962:	2601      	movs	r6, #1
 8000964:	9602      	str	r6, [sp, #8]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 8000966:	9603      	str	r6, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8000968:	2303      	movs	r3, #3
 800096a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 800096c:	4c0c      	ldr	r4, [pc, #48]	; (80009a0 <BSP_LCD_Reset+0x5c>)
 800096e:	a901      	add	r1, sp, #4
 8000970:	4620      	mov	r0, r4
 8000972:	f003 fd49 	bl	8004408 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	4629      	mov	r1, r5
 800097a:	4620      	mov	r0, r4
 800097c:	f003 fe46 	bl	800460c <HAL_GPIO_WritePin>
    HAL_Delay(20); /* wait 20 ms */
 8000980:	2014      	movs	r0, #20
 8000982:	f002 fae9 	bl	8002f58 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 8000986:	4632      	mov	r2, r6
 8000988:	4629      	mov	r1, r5
 800098a:	4620      	mov	r0, r4
 800098c:	f003 fe3e 	bl	800460c <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000990:	200a      	movs	r0, #10
 8000992:	f002 fae1 	bl	8002f58 <HAL_Delay>
}
 8000996:	b006      	add	sp, #24
 8000998:	bd70      	pop	{r4, r5, r6, pc}
 800099a:	bf00      	nop
 800099c:	40023800 	.word	0x40023800
 80009a0:	40022400 	.word	0x40022400

080009a4 <BSP_LCD_GetXSize>:
}
 80009a4:	4b01      	ldr	r3, [pc, #4]	; (80009ac <BSP_LCD_GetXSize+0x8>)
 80009a6:	6818      	ldr	r0, [r3, #0]
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	20000000 	.word	0x20000000

080009b0 <BSP_LCD_GetYSize>:
}
 80009b0:	4b01      	ldr	r3, [pc, #4]	; (80009b8 <BSP_LCD_GetYSize+0x8>)
 80009b2:	6858      	ldr	r0, [r3, #4]
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	20000000 	.word	0x20000000

080009bc <BSP_LCD_LayerDefaultInit>:
{
 80009bc:	b570      	push	{r4, r5, r6, lr}
 80009be:	b08e      	sub	sp, #56	; 0x38
 80009c0:	4604      	mov	r4, r0
 80009c2:	460e      	mov	r6, r1
  Layercfg.WindowX0 = 0;
 80009c4:	2500      	movs	r5, #0
 80009c6:	9501      	str	r5, [sp, #4]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80009c8:	f7ff ffec 	bl	80009a4 <BSP_LCD_GetXSize>
 80009cc:	9002      	str	r0, [sp, #8]
  Layercfg.WindowY0 = 0;
 80009ce:	9503      	str	r5, [sp, #12]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80009d0:	f7ff ffee 	bl	80009b0 <BSP_LCD_GetYSize>
 80009d4:	9004      	str	r0, [sp, #16]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80009d6:	9505      	str	r5, [sp, #20]
  Layercfg.FBStartAdress = FB_Address;
 80009d8:	960a      	str	r6, [sp, #40]	; 0x28
  Layercfg.Alpha = 255;
 80009da:	23ff      	movs	r3, #255	; 0xff
 80009dc:	9306      	str	r3, [sp, #24]
  Layercfg.Alpha0 = 0;
 80009de:	9507      	str	r5, [sp, #28]
  Layercfg.Backcolor.Blue = 0;
 80009e0:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
  Layercfg.Backcolor.Green = 0;
 80009e4:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  Layercfg.Backcolor.Red = 0;
 80009e8:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80009ec:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009f0:	9308      	str	r3, [sp, #32]
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80009f2:	2307      	movs	r3, #7
 80009f4:	9309      	str	r3, [sp, #36]	; 0x24
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80009f6:	f7ff ffd5 	bl	80009a4 <BSP_LCD_GetXSize>
 80009fa:	900b      	str	r0, [sp, #44]	; 0x2c
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80009fc:	f7ff ffd8 	bl	80009b0 <BSP_LCD_GetYSize>
 8000a00:	900c      	str	r0, [sp, #48]	; 0x30
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex); 
 8000a02:	4d0c      	ldr	r5, [pc, #48]	; (8000a34 <BSP_LCD_LayerDefaultInit+0x78>)
 8000a04:	4622      	mov	r2, r4
 8000a06:	a901      	add	r1, sp, #4
 8000a08:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8000a0c:	f004 fb74 	bl	80050f8 <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8000a10:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8000a14:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8000a18:	f04f 32ff 	mov.w	r2, #4294967295
 8000a1c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  DrawProp[LayerIndex].pFont     = &Font24;
 8000a20:	4a05      	ldr	r2, [pc, #20]	; (8000a38 <BSP_LCD_LayerDefaultInit+0x7c>)
 8000a22:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8000a26:	461d      	mov	r5, r3
 8000a28:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8000a2c:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
}
 8000a30:	b00e      	add	sp, #56	; 0x38
 8000a32:	bd70      	pop	{r4, r5, r6, pc}
 8000a34:	2000009c 	.word	0x2000009c
 8000a38:	2000000c 	.word	0x2000000c

08000a3c <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
 8000a3c:	4b01      	ldr	r3, [pc, #4]	; (8000a44 <BSP_LCD_SelectLayer+0x8>)
 8000a3e:	6598      	str	r0, [r3, #88]	; 0x58
}
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	2000009c 	.word	0x2000009c

08000a48 <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = fonts;
 8000a48:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <BSP_LCD_SetFont+0x14>)
 8000a4a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a4c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000a50:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000a54:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
}
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	2000009c 	.word	0x2000009c

08000a60 <BSP_LCD_Clear>:
{
 8000a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a62:	b083      	sub	sp, #12
 8000a64:	4605      	mov	r5, r0
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <BSP_LCD_Clear+0x34>)
 8000a68:	6d9e      	ldr	r6, [r3, #88]	; 0x58
 8000a6a:	2234      	movs	r2, #52	; 0x34
 8000a6c:	fb02 3306 	mla	r3, r2, r6, r3
 8000a70:	f8d3 70b8 	ldr.w	r7, [r3, #184]	; 0xb8
 8000a74:	f7ff ff96 	bl	80009a4 <BSP_LCD_GetXSize>
 8000a78:	4604      	mov	r4, r0
 8000a7a:	f7ff ff99 	bl	80009b0 <BSP_LCD_GetYSize>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	9501      	str	r5, [sp, #4]
 8000a82:	2200      	movs	r2, #0
 8000a84:	9200      	str	r2, [sp, #0]
 8000a86:	4622      	mov	r2, r4
 8000a88:	4639      	mov	r1, r7
 8000a8a:	4630      	mov	r0, r6
 8000a8c:	f7ff ff2c 	bl	80008e8 <LL_FillBuffer>
}
 8000a90:	b003      	add	sp, #12
 8000a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a94:	2000009c 	.word	0x2000009c

08000a98 <BSP_LCD_DisplayOn>:
{
 8000a98:	b500      	push	{lr}
 8000a9a:	b083      	sub	sp, #12
    HAL_DSI_ShortWrite(&(hdsi_discovery),
 8000a9c:	4806      	ldr	r0, [pc, #24]	; (8000ab8 <BSP_LCD_DisplayOn+0x20>)
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	9300      	str	r3, [sp, #0]
 8000aa2:	2329      	movs	r3, #41	; 0x29
 8000aa4:	2215      	movs	r2, #21
 8000aa6:	f8d0 111c 	ldr.w	r1, [r0, #284]	; 0x11c
 8000aaa:	f500 70c4 	add.w	r0, r0, #392	; 0x188
 8000aae:	f003 fc38 	bl	8004322 <HAL_DSI_ShortWrite>
}
 8000ab2:	b003      	add	sp, #12
 8000ab4:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ab8:	2000009c 	.word	0x2000009c

08000abc <DSI_IO_WriteCmd>:
{
 8000abc:	b500      	push	{lr}
 8000abe:	b083      	sub	sp, #12
  if(NbrParams <= 1)
 8000ac0:	2801      	cmp	r0, #1
 8000ac2:	d90b      	bls.n	8000adc <DSI_IO_WriteCmd+0x20>
 8000ac4:	4603      	mov	r3, r0
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8000ac6:	5c0a      	ldrb	r2, [r1, r0]
 8000ac8:	9101      	str	r1, [sp, #4]
 8000aca:	9200      	str	r2, [sp, #0]
 8000acc:	2239      	movs	r2, #57	; 0x39
 8000ace:	2100      	movs	r1, #0
 8000ad0:	4807      	ldr	r0, [pc, #28]	; (8000af0 <DSI_IO_WriteCmd+0x34>)
 8000ad2:	f003 fc39 	bl	8004348 <HAL_DSI_LongWrite>
}
 8000ad6:	b003      	add	sp, #12
 8000ad8:	f85d fb04 	ldr.w	pc, [sp], #4
   HAL_DSI_ShortWrite(&hdsi_discovery, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8000adc:	784b      	ldrb	r3, [r1, #1]
 8000ade:	9300      	str	r3, [sp, #0]
 8000ae0:	780b      	ldrb	r3, [r1, #0]
 8000ae2:	2215      	movs	r2, #21
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4802      	ldr	r0, [pc, #8]	; (8000af0 <DSI_IO_WriteCmd+0x34>)
 8000ae8:	f003 fc1b 	bl	8004322 <HAL_DSI_ShortWrite>
 8000aec:	e7f3      	b.n	8000ad6 <DSI_IO_WriteCmd+0x1a>
 8000aee:	bf00      	nop
 8000af0:	20000224 	.word	0x20000224

08000af4 <BSP_LCD_MspInit>:
{
 8000af4:	b500      	push	{lr}
 8000af6:	b085      	sub	sp, #20
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000af8:	4b27      	ldr	r3, [pc, #156]	; (8000b98 <BSP_LCD_MspInit+0xa4>)
 8000afa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000afc:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000b00:	645a      	str	r2, [r3, #68]	; 0x44
 8000b02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b04:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8000b08:	9201      	str	r2, [sp, #4]
 8000b0a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_LTDC_FORCE_RESET();
 8000b0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b0e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000b12:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 8000b14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b16:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8000b1a:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8000b1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b1e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000b22:	631a      	str	r2, [r3, #48]	; 0x30
 8000b24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b26:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8000b2a:	9202      	str	r2, [sp, #8]
 8000b2c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_DMA2D_FORCE_RESET();
 8000b2e:	691a      	ldr	r2, [r3, #16]
 8000b30:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000b34:	611a      	str	r2, [r3, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 8000b36:	691a      	ldr	r2, [r3, #16]
 8000b38:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000b3c:	611a      	str	r2, [r3, #16]
  __HAL_RCC_DSI_CLK_ENABLE();
 8000b3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b40:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8000b44:	645a      	str	r2, [r3, #68]	; 0x44
 8000b46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b48:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8000b4c:	9203      	str	r2, [sp, #12]
 8000b4e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_DSI_FORCE_RESET();
 8000b50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b52:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8000b56:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 8000b58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b5a:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 8000b5e:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2103      	movs	r1, #3
 8000b64:	2058      	movs	r0, #88	; 0x58
 8000b66:	f002 fded 	bl	8003744 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000b6a:	2058      	movs	r0, #88	; 0x58
 8000b6c:	f002 fe20 	bl	80037b0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8000b70:	2200      	movs	r2, #0
 8000b72:	2103      	movs	r1, #3
 8000b74:	205a      	movs	r0, #90	; 0x5a
 8000b76:	f002 fde5 	bl	8003744 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000b7a:	205a      	movs	r0, #90	; 0x5a
 8000b7c:	f002 fe18 	bl	80037b0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2103      	movs	r1, #3
 8000b84:	2062      	movs	r0, #98	; 0x62
 8000b86:	f002 fddd 	bl	8003744 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8000b8a:	2062      	movs	r0, #98	; 0x62
 8000b8c:	f002 fe10 	bl	80037b0 <HAL_NVIC_EnableIRQ>
}
 8000b90:	b005      	add	sp, #20
 8000b92:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b96:	bf00      	nop
 8000b98:	40023800 	.word	0x40023800

08000b9c <BSP_LCD_InitEx>:
{
 8000b9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ba0:	b085      	sub	sp, #20
 8000ba2:	4606      	mov	r6, r0
  BSP_LCD_Reset();
 8000ba4:	f7ff fece 	bl	8000944 <BSP_LCD_Reset>
  read_id = LCD_IO_GetID();
 8000ba8:	f7ff fe9c 	bl	80008e4 <LCD_IO_GetID>
  if(read_id != LCD_DSI_ID)
 8000bac:	2811      	cmp	r0, #17
 8000bae:	d003      	beq.n	8000bb8 <BSP_LCD_InitEx+0x1c>
    return LCD_ERROR;  
 8000bb0:	2001      	movs	r0, #1
}
 8000bb2:	b005      	add	sp, #20
 8000bb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  BSP_LCD_MspInit();
 8000bb8:	f7ff ff9c 	bl	8000af4 <BSP_LCD_MspInit>
  hdsi_discovery.Instance = DSI;
 8000bbc:	4c65      	ldr	r4, [pc, #404]	; (8000d54 <BSP_LCD_InitEx+0x1b8>)
 8000bbe:	4b66      	ldr	r3, [pc, #408]	; (8000d58 <BSP_LCD_InitEx+0x1bc>)
 8000bc0:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
  HAL_DSI_DeInit(&(hdsi_discovery));
 8000bc4:	f504 75c4 	add.w	r5, r4, #392	; 0x188
 8000bc8:	4628      	mov	r0, r5
 8000bca:	f003 fa00 	bl	8003fce <HAL_DSI_DeInit>
  dsiPllInit.PLLNDIV  = 100;
 8000bce:	2364      	movs	r3, #100	; 0x64
 8000bd0:	9301      	str	r3, [sp, #4]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 8000bd2:	2305      	movs	r3, #5
 8000bd4:	9302      	str	r3, [sp, #8]
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	9303      	str	r3, [sp, #12]
  hdsi_discovery.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 8000be0:	2304      	movs	r3, #4
 8000be2:	f8c4 3190 	str.w	r3, [r4, #400]	; 0x190
  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 8000be6:	eb0d 0103 	add.w	r1, sp, r3
 8000bea:	4628      	mov	r0, r5
 8000bec:	f003 f928 	bl	8003e40 <HAL_DSI_Init>
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 8000bf0:	2e00      	cmp	r6, #0
 8000bf2:	f040 80a7 	bne.w	8000d44 <BSP_LCD_InitEx+0x1a8>
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 8000bf6:	4b59      	ldr	r3, [pc, #356]	; (8000d5c <BSP_LCD_InitEx+0x1c0>)
 8000bf8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000bfc:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 8000bfe:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000c02:	605a      	str	r2, [r3, #4]
  HACT = lcd_x_size;
 8000c04:	4f55      	ldr	r7, [pc, #340]	; (8000d5c <BSP_LCD_InitEx+0x1c0>)
 8000c06:	683b      	ldr	r3, [r7, #0]
  VACT = lcd_y_size;
 8000c08:	687a      	ldr	r2, [r7, #4]
  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 8000c0a:	4c52      	ldr	r4, [pc, #328]	; (8000d54 <BSP_LCD_InitEx+0x1b8>)
 8000c0c:	2500      	movs	r5, #0
 8000c0e:	f8c4 511c 	str.w	r5, [r4, #284]	; 0x11c
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 8000c12:	2105      	movs	r1, #5
 8000c14:	f8c4 1120 	str.w	r1, [r4, #288]	; 0x120
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000c18:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8000c1c:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 8000c20:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 8000c24:	2102      	movs	r1, #2
 8000c26:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
  hdsivideo_handle.NullPacketSize = 0xFFF;
 8000c2a:	f640 71ff 	movw	r1, #4095	; 0xfff
 8000c2e:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
  hdsivideo_handle.NumberOfChunks = 0;
 8000c32:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 8000c36:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz)/LcdClock;
 8000c3a:	2104      	movs	r1, #4
 8000c3c:	f8c4 1144 	str.w	r1, [r4, #324]	; 0x144
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 8000c40:	214d      	movs	r1, #77	; 0x4d
 8000c42:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 8000c46:	3346      	adds	r3, #70	; 0x46
 8000c48:	f24f 4124 	movw	r1, #62500	; 0xf424
 8000c4c:	fb01 f303 	mul.w	r3, r1, r3
 8000c50:	4943      	ldr	r1, [pc, #268]	; (8000d60 <BSP_LCD_InitEx+0x1c4>)
 8000c52:	fba1 1303 	umull	r1, r3, r1, r3
 8000c56:	0b5b      	lsrs	r3, r3, #13
 8000c58:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
  hdsivideo_handle.VerticalSyncActive        = VSA;
 8000c5c:	2378      	movs	r3, #120	; 0x78
 8000c5e:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
  hdsivideo_handle.VerticalBackPorch         = VBP;
 8000c62:	2396      	movs	r3, #150	; 0x96
 8000c64:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 8000c68:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 8000c6c:	f8c4 215c 	str.w	r2, [r4, #348]	; 0x15c
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 8000c70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c74:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
  hdsivideo_handle.LPLargestPacketSize = 16;
 8000c78:	2310      	movs	r3, #16
 8000c7a:	f8c4 3164 	str.w	r3, [r4, #356]	; 0x164
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 8000c7e:	f8c4 5168 	str.w	r5, [r4, #360]	; 0x168
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 8000c82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c86:	f8c4 316c 	str.w	r3, [r4, #364]	; 0x16c
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 8000c8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c8e:	f8c4 3170 	str.w	r3, [r4, #368]	; 0x170
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 8000c92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c96:	f8c4 3174 	str.w	r3, [r4, #372]	; 0x174
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 8000c9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c9e:	f8c4 3178 	str.w	r3, [r4, #376]	; 0x178
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 8000ca2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ca6:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 8000caa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cae:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 8000cb2:	f504 798e 	add.w	r9, r4, #284	; 0x11c
 8000cb6:	f504 78c4 	add.w	r8, r4, #392	; 0x188
 8000cba:	4649      	mov	r1, r9
 8000cbc:	4640      	mov	r0, r8
 8000cbe:	f003 f9d5 	bl	800406c <HAL_DSI_ConfigVideoMode>
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	6723      	str	r3, [r4, #112]	; 0x70
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 8000cc6:	2323      	movs	r3, #35	; 0x23
 8000cc8:	67a3      	str	r3, [r4, #120]	; 0x78
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	f103 0223 	add.w	r2, r3, #35	; 0x23
 8000cd0:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 8000cd4:	f103 0245 	add.w	r2, r3, #69	; 0x45
 8000cd8:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  hltdc_discovery.LayerCfg->ImageWidth  = lcd_x_size;
 8000cdc:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000ce6:	2308      	movs	r3, #8
 8000ce8:	f8c4 31a4 	str.w	r3, [r4, #420]	; 0x1a4
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000cec:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000cf0:	f8c4 31b8 	str.w	r3, [r4, #440]	; 0x1b8
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 8000cf4:	2307      	movs	r3, #7
 8000cf6:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000cfa:	f8c4 51d0 	str.w	r5, [r4, #464]	; 0x1d0
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000cfe:	f504 70d2 	add.w	r0, r4, #420	; 0x1a4
 8000d02:	f004 fe09 	bl	8005918 <HAL_RCCEx_PeriphCLKConfig>
  hltdc_discovery.Init.Backcolor.Blue = 0;
 8000d06:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
  hltdc_discovery.Init.Backcolor.Green = 0;
 8000d0a:	f884 5091 	strb.w	r5, [r4, #145]	; 0x91
  hltdc_discovery.Init.Backcolor.Red = 0;
 8000d0e:	f884 5092 	strb.w	r5, [r4, #146]	; 0x92
  hltdc_discovery.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000d12:	66e5      	str	r5, [r4, #108]	; 0x6c
  hltdc_discovery.Instance = LTDC;
 8000d14:	4b13      	ldr	r3, [pc, #76]	; (8000d64 <BSP_LCD_InitEx+0x1c8>)
 8000d16:	f844 3f5c 	str.w	r3, [r4, #92]!
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 8000d1a:	4649      	mov	r1, r9
 8000d1c:	4620      	mov	r0, r4
 8000d1e:	f004 fa1f 	bl	8005160 <HAL_LTDCEx_StructInitFromVideoConfig>
  HAL_LTDC_Init(&hltdc_discovery);
 8000d22:	4620      	mov	r0, r4
 8000d24:	f004 f96e 	bl	8005004 <HAL_LTDC_Init>
  HAL_DSI_Start(&hdsi_discovery);
 8000d28:	4640      	mov	r0, r8
 8000d2a:	f003 fad3 	bl	80042d4 <HAL_DSI_Start>
  BSP_SDRAM_Init();
 8000d2e:	f000 f92f 	bl	8000f90 <BSP_SDRAM_Init>
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8000d32:	480d      	ldr	r0, [pc, #52]	; (8000d68 <BSP_LCD_InitEx+0x1cc>)
 8000d34:	f7ff fe88 	bl	8000a48 <BSP_LCD_SetFont>
  NT35510_Init(NT35510_FORMAT_RGB888, orientation);
 8000d38:	4631      	mov	r1, r6
 8000d3a:	4628      	mov	r0, r5
 8000d3c:	f7ff fc56 	bl	80005ec <NT35510_Init>
  return LCD_OK; 
 8000d40:	4628      	mov	r0, r5
 8000d42:	e736      	b.n	8000bb2 <BSP_LCD_InitEx+0x16>
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 8000d44:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <BSP_LCD_InitEx+0x1c0>)
 8000d46:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000d4a:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 8000d4c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	e757      	b.n	8000c04 <BSP_LCD_InitEx+0x68>
 8000d54:	2000009c 	.word	0x2000009c
 8000d58:	40016c00 	.word	0x40016c00
 8000d5c:	20000000 	.word	0x20000000
 8000d60:	4c751ce3 	.word	0x4c751ce3
 8000d64:	40016800 	.word	0x40016800
 8000d68:	2000000c 	.word	0x2000000c

08000d6c <BSP_LCD_Init>:
{
 8000d6c:	b508      	push	{r3, lr}
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8000d6e:	2001      	movs	r0, #1
 8000d70:	f7ff ff14 	bl	8000b9c <BSP_LCD_InitEx>
}
 8000d74:	bd08      	pop	{r3, pc}
	...

08000d78 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8000d78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d7c:	b083      	sub	sp, #12
 8000d7e:	4681      	mov	r9, r0
  __IO uint32_t tmpmrd = 0;
 8000d80:	f04f 0800 	mov.w	r8, #0
 8000d84:	f8cd 8004 	str.w	r8, [sp, #4]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8000d88:	4c20      	ldr	r4, [pc, #128]	; (8000e0c <BSP_SDRAM_Initialization_sequence+0x94>)
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	6026      	str	r6, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000d8e:	2710      	movs	r7, #16
 8000d90:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 8000d92:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8000d94:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000d98:	19e5      	adds	r5, r4, r7
 8000d9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d9e:	4621      	mov	r1, r4
 8000da0:	4628      	mov	r0, r5
 8000da2:	f005 f8da 	bl	8005f5a <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8000da6:	4630      	mov	r0, r6
 8000da8:	f002 f8d6 	bl	8002f58 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8000dac:	2302      	movs	r3, #2
 8000dae:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000db0:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 8000db2:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8000db4:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8000db8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dbc:	4621      	mov	r1, r4
 8000dbe:	4628      	mov	r0, r5
 8000dc0:	f005 f8cb 	bl	8005f5a <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000dc8:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 8;
 8000dca:	2308      	movs	r3, #8
 8000dcc:	60a3      	str	r3, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8000dce:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000dd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dd6:	4621      	mov	r1, r4
 8000dd8:	4628      	mov	r0, r5
 8000dda:	f005 f8be 	bl	8005f5a <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8000dde:	f44f 730c 	mov.w	r3, #560	; 0x230
 8000de2:	9301      	str	r3, [sp, #4]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8000de4:	2304      	movs	r3, #4
 8000de6:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000de8:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 8000dea:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8000dec:	9b01      	ldr	r3, [sp, #4]
 8000dee:	60e3      	str	r3, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000df0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000df4:	4621      	mov	r1, r4
 8000df6:	4628      	mov	r0, r5
 8000df8:	f005 f8af 	bl	8005f5a <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8000dfc:	4649      	mov	r1, r9
 8000dfe:	4628      	mov	r0, r5
 8000e00:	f005 f8cc 	bl	8005f9c <HAL_SDRAM_ProgramRefreshRate>
}
 8000e04:	b003      	add	sp, #12
 8000e06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e0a:	bf00      	nop
 8000e0c:	200002d0 	.word	0x200002d0

08000e10 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8000e10:	b570      	push	{r4, r5, r6, lr}
 8000e12:	b08e      	sub	sp, #56	; 0x38
 8000e14:	4606      	mov	r6, r0
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000e16:	4b55      	ldr	r3, [pc, #340]	; (8000f6c <BSP_SDRAM_MspInit+0x15c>)
 8000e18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e1a:	f042 0201 	orr.w	r2, r2, #1
 8000e1e:	639a      	str	r2, [r3, #56]	; 0x38
 8000e20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e22:	f002 0201 	and.w	r2, r2, #1
 8000e26:	9201      	str	r2, [sp, #4]
 8000e28:	9a01      	ldr	r2, [sp, #4]
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8000e2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e2c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000e30:	631a      	str	r2, [r3, #48]	; 0x30
 8000e32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e34:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8000e38:	9202      	str	r2, [sp, #8]
 8000e3a:	9a02      	ldr	r2, [sp, #8]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e3e:	f042 0208 	orr.w	r2, r2, #8
 8000e42:	631a      	str	r2, [r3, #48]	; 0x30
 8000e44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e46:	f002 0208 	and.w	r2, r2, #8
 8000e4a:	9203      	str	r2, [sp, #12]
 8000e4c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e50:	f042 0210 	orr.w	r2, r2, #16
 8000e54:	631a      	str	r2, [r3, #48]	; 0x30
 8000e56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e58:	f002 0210 	and.w	r2, r2, #16
 8000e5c:	9204      	str	r2, [sp, #16]
 8000e5e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e62:	f042 0220 	orr.w	r2, r2, #32
 8000e66:	631a      	str	r2, [r3, #48]	; 0x30
 8000e68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e6a:	f002 0220 	and.w	r2, r2, #32
 8000e6e:	9205      	str	r2, [sp, #20]
 8000e70:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e78:	631a      	str	r2, [r3, #48]	; 0x30
 8000e7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e7c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000e80:	9206      	str	r2, [sp, #24]
 8000e82:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e8a:	631a      	str	r2, [r3, #48]	; 0x30
 8000e8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e8e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000e92:	9207      	str	r2, [sp, #28]
 8000e94:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000e96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e9c:	631a      	str	r2, [r3, #48]	; 0x30
 8000e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ea4:	9308      	str	r3, [sp, #32]
 8000ea6:	9b08      	ldr	r3, [sp, #32]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	930a      	str	r3, [sp, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000eac:	2301      	movs	r3, #1
 8000eae:	930b      	str	r3, [sp, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8000eb0:	2503      	movs	r5, #3
 8000eb2:	950c      	str	r5, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8000eb4:	230c      	movs	r3, #12
 8000eb6:	930d      	str	r3, [sp, #52]	; 0x34
  
  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8000eb8:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000ebc:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;
 
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8000ebe:	a909      	add	r1, sp, #36	; 0x24
 8000ec0:	482b      	ldr	r0, [pc, #172]	; (8000f70 <BSP_SDRAM_MspInit+0x160>)
 8000ec2:	f003 faa1 	bl	8004408 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8000ec6:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000eca:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
      
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8000ecc:	a909      	add	r1, sp, #36	; 0x24
 8000ece:	4829      	ldr	r0, [pc, #164]	; (8000f74 <BSP_SDRAM_MspInit+0x164>)
 8000ed0:	f003 fa9a 	bl	8004408 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8000ed4:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000ed8:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
    
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8000eda:	a909      	add	r1, sp, #36	; 0x24
 8000edc:	4826      	ldr	r0, [pc, #152]	; (8000f78 <BSP_SDRAM_MspInit+0x168>)
 8000ede:	f003 fa93 	bl	8004408 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 8000ee2:	f248 1337 	movw	r3, #33079	; 0x8137
 8000ee6:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8000ee8:	a909      	add	r1, sp, #36	; 0x24
 8000eea:	4824      	ldr	r0, [pc, #144]	; (8000f7c <BSP_SDRAM_MspInit+0x16c>)
 8000eec:	f003 fa8c 	bl	8004408 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8000ef0:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8000ef4:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8000ef6:	a909      	add	r1, sp, #36	; 0x24
 8000ef8:	4821      	ldr	r0, [pc, #132]	; (8000f80 <BSP_SDRAM_MspInit+0x170>)
 8000efa:	f003 fa85 	bl	8004408 <HAL_GPIO_Init>
  
  /* GPIOI configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8000efe:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8000f02:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 8000f04:	a909      	add	r1, sp, #36	; 0x24
 8000f06:	481f      	ldr	r0, [pc, #124]	; (8000f84 <BSP_SDRAM_MspInit+0x174>)
 8000f08:	f003 fa7e 	bl	8004408 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8000f0c:	4b1e      	ldr	r3, [pc, #120]	; (8000f88 <BSP_SDRAM_MspInit+0x178>)
 8000f0e:	2400      	movs	r4, #0
 8000f10:	649c      	str	r4, [r3, #72]	; 0x48
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8000f12:	2280      	movs	r2, #128	; 0x80
 8000f14:	64da      	str	r2, [r3, #76]	; 0x4c
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8000f16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f1a:	651a      	str	r2, [r3, #80]	; 0x50
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8000f1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f20:	655a      	str	r2, [r3, #84]	; 0x54
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f22:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f26:	659a      	str	r2, [r3, #88]	; 0x58
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8000f28:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f2c:	65da      	str	r2, [r3, #92]	; 0x5c
  dma_handle.Init.Mode                = DMA_NORMAL;
 8000f2e:	661c      	str	r4, [r3, #96]	; 0x60
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8000f30:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f34:	665a      	str	r2, [r3, #100]	; 0x64
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8000f36:	669c      	str	r4, [r3, #104]	; 0x68
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8000f38:	66dd      	str	r5, [r3, #108]	; 0x6c
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8000f3a:	671c      	str	r4, [r3, #112]	; 0x70
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8000f3c:	675c      	str	r4, [r3, #116]	; 0x74
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8000f3e:	461d      	mov	r5, r3
 8000f40:	4a12      	ldr	r2, [pc, #72]	; (8000f8c <BSP_SDRAM_MspInit+0x17c>)
 8000f42:	f845 2f44 	str.w	r2, [r5, #68]!
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8000f46:	6335      	str	r5, [r6, #48]	; 0x30
 8000f48:	67de      	str	r6, [r3, #124]	; 0x7c
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8000f4a:	4628      	mov	r0, r5
 8000f4c:	f002 fd0c 	bl	8003968 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8000f50:	4628      	mov	r0, r5
 8000f52:	f002 fca3 	bl	800389c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8000f56:	4622      	mov	r2, r4
 8000f58:	210f      	movs	r1, #15
 8000f5a:	2038      	movs	r0, #56	; 0x38
 8000f5c:	f002 fbf2 	bl	8003744 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8000f60:	2038      	movs	r0, #56	; 0x38
 8000f62:	f002 fc25 	bl	80037b0 <HAL_NVIC_EnableIRQ>
}
 8000f66:	b00e      	add	sp, #56	; 0x38
 8000f68:	bd70      	pop	{r4, r5, r6, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40020c00 	.word	0x40020c00
 8000f74:	40021000 	.word	0x40021000
 8000f78:	40021400 	.word	0x40021400
 8000f7c:	40021800 	.word	0x40021800
 8000f80:	40021c00 	.word	0x40021c00
 8000f84:	40022000 	.word	0x40022000
 8000f88:	200002d0 	.word	0x200002d0
 8000f8c:	40026410 	.word	0x40026410

08000f90 <BSP_SDRAM_Init>:
{ 
 8000f90:	b538      	push	{r3, r4, r5, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8000f92:	4c20      	ldr	r4, [pc, #128]	; (8001014 <BSP_SDRAM_Init+0x84>)
 8000f94:	4b20      	ldr	r3, [pc, #128]	; (8001018 <BSP_SDRAM_Init+0x88>)
 8000f96:	6123      	str	r3, [r4, #16]
  Timing.LoadToActiveDelay    = 2;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
  Timing.ExitSelfRefreshDelay = 7;
 8000f9e:	2107      	movs	r1, #7
 8000fa0:	f8c4 10a8 	str.w	r1, [r4, #168]	; 0xa8
  Timing.SelfRefreshTime      = 4;
 8000fa4:	2204      	movs	r2, #4
 8000fa6:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
  Timing.RowCycleDelay        = 7;
 8000faa:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
  Timing.WriteRecoveryTime    = 2;
 8000fae:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
  Timing.RPDelay              = 2;
 8000fb2:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
  Timing.RCDDelay             = 2;
 8000fb6:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8000fba:	2100      	movs	r1, #0
 8000fbc:	6161      	str	r1, [r4, #20]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000fbe:	61a1      	str	r1, [r4, #24]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8000fc0:	61e2      	str	r2, [r4, #28]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8000fc2:	2320      	movs	r3, #32
 8000fc4:	6223      	str	r3, [r4, #32]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000fc6:	2340      	movs	r3, #64	; 0x40
 8000fc8:	6263      	str	r3, [r4, #36]	; 0x24
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8000fca:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000fce:	62a3      	str	r3, [r4, #40]	; 0x28
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000fd0:	62e1      	str	r1, [r4, #44]	; 0x2c
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8000fd2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fd6:	6323      	str	r3, [r4, #48]	; 0x30
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8000fd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fdc:	6363      	str	r3, [r4, #52]	; 0x34
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8000fde:	63a1      	str	r1, [r4, #56]	; 0x38
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8000fe0:	f104 0510 	add.w	r5, r4, #16
 8000fe4:	4628      	mov	r0, r5
 8000fe6:	f7ff ff13 	bl	8000e10 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8000fea:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
 8000fee:	4628      	mov	r0, r5
 8000ff0:	f004 ff93 	bl	8005f1a <HAL_SDRAM_Init>
 8000ff4:	b148      	cbz	r0, 800100a <BSP_SDRAM_Init+0x7a>
    sdramstatus = SDRAM_ERROR;
 8000ff6:	4b09      	ldr	r3, [pc, #36]	; (800101c <BSP_SDRAM_Init+0x8c>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	701a      	strb	r2, [r3, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8000ffc:	f240 6003 	movw	r0, #1539	; 0x603
 8001000:	f7ff feba 	bl	8000d78 <BSP_SDRAM_Initialization_sequence>
}
 8001004:	4b05      	ldr	r3, [pc, #20]	; (800101c <BSP_SDRAM_Init+0x8c>)
 8001006:	7818      	ldrb	r0, [r3, #0]
 8001008:	bd38      	pop	{r3, r4, r5, pc}
    sdramstatus = SDRAM_OK;
 800100a:	4b04      	ldr	r3, [pc, #16]	; (800101c <BSP_SDRAM_Init+0x8c>)
 800100c:	2200      	movs	r2, #0
 800100e:	701a      	strb	r2, [r3, #0]
 8001010:	e7f4      	b.n	8000ffc <BSP_SDRAM_Init+0x6c>
 8001012:	bf00      	nop
 8001014:	200002d0 	.word	0x200002d0
 8001018:	a0000140 	.word	0xa0000140
 800101c:	20000008 	.word	0x20000008

08001020 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001020:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8001024:	b97b      	cbnz	r3, 8001046 <osKernelInitialize+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001026:	f3ef 8310 	mrs	r3, PRIMASK
 800102a:	b913      	cbnz	r3, 8001032 <osKernelInitialize+0x12>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800102c:	f3ef 8311 	mrs	r3, BASEPRI
 8001030:	b11b      	cbz	r3, 800103a <osKernelInitialize+0x1a>
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <osKernelInitialize+0x38>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b02      	cmp	r3, #2
 8001038:	d008      	beq.n	800104c <osKernelInitialize+0x2c>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800103a:	4b07      	ldr	r3, [pc, #28]	; (8001058 <osKernelInitialize+0x38>)
 800103c:	6818      	ldr	r0, [r3, #0]
 800103e:	b940      	cbnz	r0, 8001052 <osKernelInitialize+0x32>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001040:	2201      	movs	r2, #1
 8001042:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001044:	4770      	bx	lr
    stat = osErrorISR;
 8001046:	f06f 0005 	mvn.w	r0, #5
 800104a:	4770      	bx	lr
 800104c:	f06f 0005 	mvn.w	r0, #5
 8001050:	4770      	bx	lr
    } else {
      stat = osError;
 8001052:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8001056:	4770      	bx	lr
 8001058:	200003f0 	.word	0x200003f0

0800105c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800105c:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800105e:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8001062:	b9a3      	cbnz	r3, 800108e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001064:	f3ef 8310 	mrs	r3, PRIMASK
 8001068:	b913      	cbnz	r3, 8001070 <osKernelStart+0x14>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800106a:	f3ef 8311 	mrs	r3, BASEPRI
 800106e:	b11b      	cbz	r3, 8001078 <osKernelStart+0x1c>
 8001070:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <osKernelStart+0x44>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2b02      	cmp	r3, #2
 8001076:	d00d      	beq.n	8001094 <osKernelStart+0x38>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8001078:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <osKernelStart+0x44>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d10c      	bne.n	800109a <osKernelStart+0x3e>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001080:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <osKernelStart+0x44>)
 8001082:	2202      	movs	r2, #2
 8001084:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001086:	f000 fe65 	bl	8001d54 <vTaskStartScheduler>
      stat = osOK;
 800108a:	2000      	movs	r0, #0
      stat = osError;
    }
  }

  return (stat);
}
 800108c:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 800108e:	f06f 0005 	mvn.w	r0, #5
 8001092:	e7fb      	b.n	800108c <osKernelStart+0x30>
 8001094:	f06f 0005 	mvn.w	r0, #5
 8001098:	e7f8      	b.n	800108c <osKernelStart+0x30>
      stat = osError;
 800109a:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800109e:	e7f5      	b.n	800108c <osKernelStart+0x30>
 80010a0:	200003f0 	.word	0x200003f0

080010a4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80010a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010a6:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80010a8:	2400      	movs	r4, #0
 80010aa:	9405      	str	r4, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80010ac:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80010b0:	2c00      	cmp	r4, #0
 80010b2:	d138      	bne.n	8001126 <osThreadNew+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80010b4:	f3ef 8310 	mrs	r3, PRIMASK
 80010b8:	b913      	cbnz	r3, 80010c0 <osThreadNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80010ba:	f3ef 8311 	mrs	r3, BASEPRI
 80010be:	b11b      	cbz	r3, 80010c8 <osThreadNew+0x24>
 80010c0:	4b2d      	ldr	r3, [pc, #180]	; (8001178 <osThreadNew+0xd4>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d02e      	beq.n	8001126 <osThreadNew+0x82>
 80010c8:	b368      	cbz	r0, 8001126 <osThreadNew+0x82>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 80010ca:	b322      	cbz	r2, 8001116 <osThreadNew+0x72>
      if (attr->name != NULL) {
 80010cc:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 80010ce:	6993      	ldr	r3, [r2, #24]
 80010d0:	b903      	cbnz	r3, 80010d4 <osThreadNew+0x30>
    prio  = (UBaseType_t)osPriorityNormal;
 80010d2:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80010d4:	1e5c      	subs	r4, r3, #1
 80010d6:	2c37      	cmp	r4, #55	; 0x37
 80010d8:	d849      	bhi.n	800116e <osThreadNew+0xca>
 80010da:	6854      	ldr	r4, [r2, #4]
 80010dc:	f014 0f01 	tst.w	r4, #1
 80010e0:	d147      	bne.n	8001172 <osThreadNew+0xce>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 80010e2:	6956      	ldr	r6, [r2, #20]
 80010e4:	b16e      	cbz	r6, 8001102 <osThreadNew+0x5e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80010e6:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80010ea:	6894      	ldr	r4, [r2, #8]
 80010ec:	b12c      	cbz	r4, 80010fa <osThreadNew+0x56>
 80010ee:	68d7      	ldr	r7, [r2, #12]
 80010f0:	2f5b      	cmp	r7, #91	; 0x5b
 80010f2:	d902      	bls.n	80010fa <osThreadNew+0x56>
 80010f4:	6917      	ldr	r7, [r2, #16]
 80010f6:	b107      	cbz	r7, 80010fa <osThreadNew+0x56>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80010f8:	b9c6      	cbnz	r6, 800112c <osThreadNew+0x88>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80010fa:	b12c      	cbz	r4, 8001108 <osThreadNew+0x64>
    mem  = -1;
 80010fc:	f04f 34ff 	mov.w	r4, #4294967295
 8001100:	e00e      	b.n	8001120 <osThreadNew+0x7c>
    stack = configMINIMAL_STACK_SIZE;
 8001102:	f04f 0c80 	mov.w	ip, #128	; 0x80
 8001106:	e7f0      	b.n	80010ea <osThreadNew+0x46>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001108:	68d4      	ldr	r4, [r2, #12]
 800110a:	b98c      	cbnz	r4, 8001130 <osThreadNew+0x8c>
 800110c:	6914      	ldr	r4, [r2, #16]
 800110e:	b194      	cbz	r4, 8001136 <osThreadNew+0x92>
    mem  = -1;
 8001110:	f04f 34ff 	mov.w	r4, #4294967295
 8001114:	e004      	b.n	8001120 <osThreadNew+0x7c>
    name = NULL;
 8001116:	4615      	mov	r5, r2
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 8001118:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 800111a:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 800111c:	f04f 0c80 	mov.w	ip, #128	; 0x80
    }

    if (mem == 1) {
 8001120:	2c01      	cmp	r4, #1
 8001122:	d00a      	beq.n	800113a <osThreadNew+0x96>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                    (StaticTask_t *)attr->cb_mem);
    }
    else {
      if (mem == 0) {
 8001124:	b1ac      	cbz	r4, 8001152 <osThreadNew+0xae>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001126:	9805      	ldr	r0, [sp, #20]
}
 8001128:	b007      	add	sp, #28
 800112a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 800112c:	2401      	movs	r4, #1
 800112e:	e7f7      	b.n	8001120 <osThreadNew+0x7c>
    mem  = -1;
 8001130:	f04f 34ff 	mov.w	r4, #4294967295
 8001134:	e7f4      	b.n	8001120 <osThreadNew+0x7c>
          mem = 0;
 8001136:	2400      	movs	r4, #0
 8001138:	e7f2      	b.n	8001120 <osThreadNew+0x7c>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800113a:	6914      	ldr	r4, [r2, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800113c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800113e:	9202      	str	r2, [sp, #8]
 8001140:	9401      	str	r4, [sp, #4]
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	460b      	mov	r3, r1
 8001146:	4662      	mov	r2, ip
 8001148:	4629      	mov	r1, r5
 800114a:	f000 fd8d 	bl	8001c68 <xTaskCreateStatic>
 800114e:	9005      	str	r0, [sp, #20]
 8001150:	e7e9      	b.n	8001126 <osThreadNew+0x82>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001152:	aa05      	add	r2, sp, #20
 8001154:	9201      	str	r2, [sp, #4]
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	460b      	mov	r3, r1
 800115a:	fa1f f28c 	uxth.w	r2, ip
 800115e:	4629      	mov	r1, r5
 8001160:	f000 fdc3 	bl	8001cea <xTaskCreate>
 8001164:	2801      	cmp	r0, #1
 8001166:	d0de      	beq.n	8001126 <osThreadNew+0x82>
          hTask = NULL;
 8001168:	2300      	movs	r3, #0
 800116a:	9305      	str	r3, [sp, #20]
 800116c:	e7db      	b.n	8001126 <osThreadNew+0x82>
        return (NULL);
 800116e:	2000      	movs	r0, #0
 8001170:	e7da      	b.n	8001128 <osThreadNew+0x84>
 8001172:	2000      	movs	r0, #0
 8001174:	e7d8      	b.n	8001128 <osThreadNew+0x84>
 8001176:	bf00      	nop
 8001178:	200003f0 	.word	0x200003f0

0800117c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800117c:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800117e:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8001182:	b983      	cbnz	r3, 80011a6 <osDelay+0x2a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001184:	f3ef 8310 	mrs	r3, PRIMASK
 8001188:	b913      	cbnz	r3, 8001190 <osDelay+0x14>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800118a:	f3ef 8311 	mrs	r3, BASEPRI
 800118e:	b11b      	cbz	r3, 8001198 <osDelay+0x1c>
 8001190:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <osDelay+0x38>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b02      	cmp	r3, #2
 8001196:	d009      	beq.n	80011ac <osDelay+0x30>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8001198:	b908      	cbnz	r0, 800119e <osDelay+0x22>
    stat = osOK;
 800119a:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 800119c:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 800119e:	f000 ff3d 	bl	800201c <vTaskDelay>
    stat = osOK;
 80011a2:	2000      	movs	r0, #0
 80011a4:	e7fa      	b.n	800119c <osDelay+0x20>
    stat = osErrorISR;
 80011a6:	f06f 0005 	mvn.w	r0, #5
 80011aa:	e7f7      	b.n	800119c <osDelay+0x20>
 80011ac:	f06f 0005 	mvn.w	r0, #5
 80011b0:	e7f4      	b.n	800119c <osDelay+0x20>
 80011b2:	bf00      	nop
 80011b4:	200003f0 	.word	0x200003f0

080011b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80011b8:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80011ba:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <vApplicationGetIdleTaskMemory+0x18>)
 80011bc:	1d1c      	adds	r4, r3, #4
 80011be:	6004      	str	r4, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80011c0:	3360      	adds	r3, #96	; 0x60
 80011c2:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80011c4:	2380      	movs	r3, #128	; 0x80
 80011c6:	6013      	str	r3, [r2, #0]
}
 80011c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	200003f0 	.word	0x200003f0

080011d4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80011d4:	b410      	push	{r4}
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <vApplicationGetTimerTaskMemory+0x1c>)
 80011d8:	f503 7418 	add.w	r4, r3, #608	; 0x260
 80011dc:	6004      	str	r4, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80011de:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80011e2:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80011e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011e8:	6013      	str	r3, [r2, #0]
}
 80011ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	200003f0 	.word	0x200003f0

080011f4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80011f4:	f100 0308 	add.w	r3, r0, #8
 80011f8:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80011fa:	f04f 32ff 	mov.w	r2, #4294967295
 80011fe:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001200:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001202:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001204:	2300      	movs	r3, #0
 8001206:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001208:	4770      	bx	lr

0800120a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800120a:	2300      	movs	r3, #0
 800120c:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800120e:	4770      	bx	lr

08001210 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001210:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001212:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001214:	689a      	ldr	r2, [r3, #8]
 8001216:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001218:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800121a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800121c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800121e:	6803      	ldr	r3, [r0, #0]
 8001220:	3301      	adds	r3, #1
 8001222:	6003      	str	r3, [r0, #0]
}
 8001224:	4770      	bx	lr

08001226 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001226:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001228:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800122a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800122e:	d011      	beq.n	8001254 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001230:	f100 0308 	add.w	r3, r0, #8
 8001234:	461c      	mov	r4, r3
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	42aa      	cmp	r2, r5
 800123c:	d9fa      	bls.n	8001234 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800123e:	6863      	ldr	r3, [r4, #4]
 8001240:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001242:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001244:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001246:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001248:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800124a:	6803      	ldr	r3, [r0, #0]
 800124c:	3301      	adds	r3, #1
 800124e:	6003      	str	r3, [r0, #0]
}
 8001250:	bc30      	pop	{r4, r5}
 8001252:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8001254:	6904      	ldr	r4, [r0, #16]
 8001256:	e7f2      	b.n	800123e <vListInsert+0x18>

08001258 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001258:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800125a:	6841      	ldr	r1, [r0, #4]
 800125c:	6882      	ldr	r2, [r0, #8]
 800125e:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001260:	6841      	ldr	r1, [r0, #4]
 8001262:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001264:	685a      	ldr	r2, [r3, #4]
 8001266:	4282      	cmp	r2, r0
 8001268:	d006      	beq.n	8001278 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800126a:	2200      	movs	r2, #0
 800126c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	3a01      	subs	r2, #1
 8001272:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001274:	6818      	ldr	r0, [r3, #0]
}
 8001276:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001278:	6882      	ldr	r2, [r0, #8]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	e7f5      	b.n	800126a <uxListRemove+0x12>

0800127e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800127e:	b510      	push	{r4, lr}
 8001280:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001282:	f001 fb17 	bl	80028b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001286:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001288:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800128a:	429a      	cmp	r2, r3
 800128c:	d004      	beq.n	8001298 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800128e:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8001290:	f001 fb36 	bl	8002900 <vPortExitCritical>

	return xReturn;
}
 8001294:	4620      	mov	r0, r4
 8001296:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8001298:	2401      	movs	r4, #1
 800129a:	e7f9      	b.n	8001290 <prvIsQueueFull+0x12>

0800129c <prvIsQueueEmpty>:
{
 800129c:	b510      	push	{r4, lr}
 800129e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80012a0:	f001 fb08 	bl	80028b4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80012a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80012a6:	b923      	cbnz	r3, 80012b2 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 80012a8:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 80012aa:	f001 fb29 	bl	8002900 <vPortExitCritical>
}
 80012ae:	4620      	mov	r0, r4
 80012b0:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 80012b2:	2400      	movs	r4, #0
 80012b4:	e7f9      	b.n	80012aa <prvIsQueueEmpty+0xe>

080012b6 <prvCopyDataToQueue>:
{
 80012b6:	b570      	push	{r4, r5, r6, lr}
 80012b8:	4604      	mov	r4, r0
 80012ba:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80012bc:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80012be:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80012c0:	b95a      	cbnz	r2, 80012da <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80012c2:	6803      	ldr	r3, [r0, #0]
 80012c4:	b11b      	cbz	r3, 80012ce <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 80012c6:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80012c8:	3601      	adds	r6, #1
 80012ca:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80012cc:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80012ce:	6880      	ldr	r0, [r0, #8]
 80012d0:	f000 fffe 	bl	80022d0 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60a3      	str	r3, [r4, #8]
 80012d8:	e7f6      	b.n	80012c8 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 80012da:	b96d      	cbnz	r5, 80012f8 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80012dc:	6840      	ldr	r0, [r0, #4]
 80012de:	f006 f900 	bl	80074e2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80012e2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80012e4:	6863      	ldr	r3, [r4, #4]
 80012e6:	4413      	add	r3, r2
 80012e8:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80012ea:	68a2      	ldr	r2, [r4, #8]
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d319      	bcc.n	8001324 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80012f0:	6823      	ldr	r3, [r4, #0]
 80012f2:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 80012f4:	4628      	mov	r0, r5
 80012f6:	e7e7      	b.n	80012c8 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80012f8:	68c0      	ldr	r0, [r0, #12]
 80012fa:	f006 f8f2 	bl	80074e2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80012fe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001300:	4251      	negs	r1, r2
 8001302:	68e3      	ldr	r3, [r4, #12]
 8001304:	1a9b      	subs	r3, r3, r2
 8001306:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001308:	6822      	ldr	r2, [r4, #0]
 800130a:	4293      	cmp	r3, r2
 800130c:	d202      	bcs.n	8001314 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800130e:	68a3      	ldr	r3, [r4, #8]
 8001310:	440b      	add	r3, r1
 8001312:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8001314:	2d02      	cmp	r5, #2
 8001316:	d001      	beq.n	800131c <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8001318:	2000      	movs	r0, #0
 800131a:	e7d5      	b.n	80012c8 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800131c:	b126      	cbz	r6, 8001328 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 800131e:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8001320:	2000      	movs	r0, #0
 8001322:	e7d1      	b.n	80012c8 <prvCopyDataToQueue+0x12>
 8001324:	4628      	mov	r0, r5
 8001326:	e7cf      	b.n	80012c8 <prvCopyDataToQueue+0x12>
 8001328:	2000      	movs	r0, #0
 800132a:	e7cd      	b.n	80012c8 <prvCopyDataToQueue+0x12>

0800132c <prvCopyDataFromQueue>:
{
 800132c:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800132e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001330:	b16a      	cbz	r2, 800134e <prvCopyDataFromQueue+0x22>
{
 8001332:	b510      	push	{r4, lr}
 8001334:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001336:	68d9      	ldr	r1, [r3, #12]
 8001338:	4411      	add	r1, r2
 800133a:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800133c:	689c      	ldr	r4, [r3, #8]
 800133e:	42a1      	cmp	r1, r4
 8001340:	d301      	bcc.n	8001346 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001342:	6819      	ldr	r1, [r3, #0]
 8001344:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001346:	68d9      	ldr	r1, [r3, #12]
 8001348:	f006 f8cb 	bl	80074e2 <memcpy>
}
 800134c:	bd10      	pop	{r4, pc}
 800134e:	4770      	bx	lr

08001350 <prvUnlockQueue>:
{
 8001350:	b538      	push	{r3, r4, r5, lr}
 8001352:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8001354:	f001 faae 	bl	80028b4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8001358:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 800135c:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800135e:	e001      	b.n	8001364 <prvUnlockQueue+0x14>
			--cTxLock;
 8001360:	3c01      	subs	r4, #1
 8001362:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001364:	2c00      	cmp	r4, #0
 8001366:	dd0a      	ble.n	800137e <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001368:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800136a:	b143      	cbz	r3, 800137e <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800136c:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001370:	f000 ff00 	bl	8002174 <xTaskRemoveFromEventList>
 8001374:	2800      	cmp	r0, #0
 8001376:	d0f3      	beq.n	8001360 <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8001378:	f000 ff92 	bl	80022a0 <vTaskMissedYield>
 800137c:	e7f0      	b.n	8001360 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 800137e:	23ff      	movs	r3, #255	; 0xff
 8001380:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8001384:	f001 fabc 	bl	8002900 <vPortExitCritical>
	taskENTER_CRITICAL();
 8001388:	f001 fa94 	bl	80028b4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800138c:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8001390:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001392:	e001      	b.n	8001398 <prvUnlockQueue+0x48>
				--cRxLock;
 8001394:	3c01      	subs	r4, #1
 8001396:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001398:	2c00      	cmp	r4, #0
 800139a:	dd0a      	ble.n	80013b2 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800139c:	692b      	ldr	r3, [r5, #16]
 800139e:	b143      	cbz	r3, 80013b2 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80013a0:	f105 0010 	add.w	r0, r5, #16
 80013a4:	f000 fee6 	bl	8002174 <xTaskRemoveFromEventList>
 80013a8:	2800      	cmp	r0, #0
 80013aa:	d0f3      	beq.n	8001394 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 80013ac:	f000 ff78 	bl	80022a0 <vTaskMissedYield>
 80013b0:	e7f0      	b.n	8001394 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 80013b2:	23ff      	movs	r3, #255	; 0xff
 80013b4:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 80013b8:	f001 faa2 	bl	8002900 <vPortExitCritical>
}
 80013bc:	bd38      	pop	{r3, r4, r5, pc}

080013be <xQueueGenericReset>:
{
 80013be:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 80013c0:	b1e0      	cbz	r0, 80013fc <xQueueGenericReset+0x3e>
 80013c2:	460d      	mov	r5, r1
 80013c4:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80013c6:	f001 fa75 	bl	80028b4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80013ca:	6823      	ldr	r3, [r4, #0]
 80013cc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80013ce:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80013d0:	fb01 3002 	mla	r0, r1, r2, r3
 80013d4:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80013d6:	2000      	movs	r0, #0
 80013d8:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80013da:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80013dc:	3a01      	subs	r2, #1
 80013de:	fb02 3301 	mla	r3, r2, r1, r3
 80013e2:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80013e4:	23ff      	movs	r3, #255	; 0xff
 80013e6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80013ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80013ee:	bb0d      	cbnz	r5, 8001434 <xQueueGenericReset+0x76>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80013f0:	6923      	ldr	r3, [r4, #16]
 80013f2:	b973      	cbnz	r3, 8001412 <xQueueGenericReset+0x54>
	taskEXIT_CRITICAL();
 80013f4:	f001 fa84 	bl	8002900 <vPortExitCritical>
}
 80013f8:	2001      	movs	r0, #1
 80013fa:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80013fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001400:	b672      	cpsid	i
 8001402:	f383 8811 	msr	BASEPRI, r3
 8001406:	f3bf 8f6f 	isb	sy
 800140a:	f3bf 8f4f 	dsb	sy
 800140e:	b662      	cpsie	i
	configASSERT( pxQueue );
 8001410:	e7fe      	b.n	8001410 <xQueueGenericReset+0x52>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001412:	f104 0010 	add.w	r0, r4, #16
 8001416:	f000 fead 	bl	8002174 <xTaskRemoveFromEventList>
 800141a:	2800      	cmp	r0, #0
 800141c:	d0ea      	beq.n	80013f4 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 800141e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001426:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800142a:	f3bf 8f4f 	dsb	sy
 800142e:	f3bf 8f6f 	isb	sy
 8001432:	e7df      	b.n	80013f4 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001434:	f104 0010 	add.w	r0, r4, #16
 8001438:	f7ff fedc 	bl	80011f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800143c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001440:	f7ff fed8 	bl	80011f4 <vListInitialise>
 8001444:	e7d6      	b.n	80013f4 <xQueueGenericReset+0x36>

08001446 <prvInitialiseNewQueue>:
{
 8001446:	b538      	push	{r3, r4, r5, lr}
 8001448:	461d      	mov	r5, r3
 800144a:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 800144c:	460b      	mov	r3, r1
 800144e:	b949      	cbnz	r1, 8001464 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001450:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8001452:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001454:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001456:	2101      	movs	r1, #1
 8001458:	4620      	mov	r0, r4
 800145a:	f7ff ffb0 	bl	80013be <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800145e:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 8001462:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001464:	6022      	str	r2, [r4, #0]
 8001466:	e7f4      	b.n	8001452 <prvInitialiseNewQueue+0xc>

08001468 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001468:	b950      	cbnz	r0, 8001480 <xQueueGenericCreateStatic+0x18>
 800146a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800146e:	b672      	cpsid	i
 8001470:	f383 8811 	msr	BASEPRI, r3
 8001474:	f3bf 8f6f 	isb	sy
 8001478:	f3bf 8f4f 	dsb	sy
 800147c:	b662      	cpsie	i
 800147e:	e7fe      	b.n	800147e <xQueueGenericCreateStatic+0x16>
	{
 8001480:	b510      	push	{r4, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	461c      	mov	r4, r3
		configASSERT( pxStaticQueue != NULL );
 8001486:	b193      	cbz	r3, 80014ae <xQueueGenericCreateStatic+0x46>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001488:	1e0b      	subs	r3, r1, #0
 800148a:	bf18      	it	ne
 800148c:	2301      	movne	r3, #1
 800148e:	2a00      	cmp	r2, #0
 8001490:	bf08      	it	eq
 8001492:	f043 0301 	orreq.w	r3, r3, #1
 8001496:	b9ab      	cbnz	r3, 80014c4 <xQueueGenericCreateStatic+0x5c>
 8001498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800149c:	b672      	cpsid	i
 800149e:	f383 8811 	msr	BASEPRI, r3
 80014a2:	f3bf 8f6f 	isb	sy
 80014a6:	f3bf 8f4f 	dsb	sy
 80014aa:	b662      	cpsie	i
 80014ac:	e7fe      	b.n	80014ac <xQueueGenericCreateStatic+0x44>
 80014ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014b2:	b672      	cpsid	i
 80014b4:	f383 8811 	msr	BASEPRI, r3
 80014b8:	f3bf 8f6f 	isb	sy
 80014bc:	f3bf 8f4f 	dsb	sy
 80014c0:	b662      	cpsie	i
		configASSERT( pxStaticQueue != NULL );
 80014c2:	e7fe      	b.n	80014c2 <xQueueGenericCreateStatic+0x5a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80014c4:	fab1 f381 	clz	r3, r1
 80014c8:	095b      	lsrs	r3, r3, #5
 80014ca:	2a00      	cmp	r2, #0
 80014cc:	bf18      	it	ne
 80014ce:	f043 0301 	orrne.w	r3, r3, #1
 80014d2:	b953      	cbnz	r3, 80014ea <xQueueGenericCreateStatic+0x82>
 80014d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014d8:	b672      	cpsid	i
 80014da:	f383 8811 	msr	BASEPRI, r3
 80014de:	f3bf 8f6f 	isb	sy
 80014e2:	f3bf 8f4f 	dsb	sy
 80014e6:	b662      	cpsie	i
 80014e8:	e7fe      	b.n	80014e8 <xQueueGenericCreateStatic+0x80>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80014ea:	2350      	movs	r3, #80	; 0x50
 80014ec:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 80014ee:	9b03      	ldr	r3, [sp, #12]
 80014f0:	2b50      	cmp	r3, #80	; 0x50
 80014f2:	d00a      	beq.n	800150a <xQueueGenericCreateStatic+0xa2>
 80014f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014f8:	b672      	cpsid	i
 80014fa:	f383 8811 	msr	BASEPRI, r3
 80014fe:	f3bf 8f6f 	isb	sy
 8001502:	f3bf 8f4f 	dsb	sy
 8001506:	b662      	cpsie	i
 8001508:	e7fe      	b.n	8001508 <xQueueGenericCreateStatic+0xa0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800150a:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800150c:	2301      	movs	r3, #1
 800150e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001512:	9400      	str	r4, [sp, #0]
 8001514:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8001518:	f7ff ff95 	bl	8001446 <prvInitialiseNewQueue>
	}
 800151c:	4620      	mov	r0, r4
 800151e:	b004      	add	sp, #16
 8001520:	bd10      	pop	{r4, pc}

08001522 <xQueueGenericSend>:
{
 8001522:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001524:	b085      	sub	sp, #20
 8001526:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8001528:	b198      	cbz	r0, 8001552 <xQueueGenericSend+0x30>
 800152a:	460f      	mov	r7, r1
 800152c:	461d      	mov	r5, r3
 800152e:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001530:	b1d1      	cbz	r1, 8001568 <xQueueGenericSend+0x46>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001532:	2d02      	cmp	r5, #2
 8001534:	d126      	bne.n	8001584 <xQueueGenericSend+0x62>
 8001536:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001538:	2b01      	cmp	r3, #1
 800153a:	d023      	beq.n	8001584 <xQueueGenericSend+0x62>
 800153c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001540:	b672      	cpsid	i
 8001542:	f383 8811 	msr	BASEPRI, r3
 8001546:	f3bf 8f6f 	isb	sy
 800154a:	f3bf 8f4f 	dsb	sy
 800154e:	b662      	cpsie	i
 8001550:	e7fe      	b.n	8001550 <xQueueGenericSend+0x2e>
 8001552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001556:	b672      	cpsid	i
 8001558:	f383 8811 	msr	BASEPRI, r3
 800155c:	f3bf 8f6f 	isb	sy
 8001560:	f3bf 8f4f 	dsb	sy
 8001564:	b662      	cpsie	i
	configASSERT( pxQueue );
 8001566:	e7fe      	b.n	8001566 <xQueueGenericSend+0x44>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001568:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0e1      	beq.n	8001532 <xQueueGenericSend+0x10>
 800156e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001572:	b672      	cpsid	i
 8001574:	f383 8811 	msr	BASEPRI, r3
 8001578:	f3bf 8f6f 	isb	sy
 800157c:	f3bf 8f4f 	dsb	sy
 8001580:	b662      	cpsie	i
 8001582:	e7fe      	b.n	8001582 <xQueueGenericSend+0x60>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001584:	f000 fe94 	bl	80022b0 <xTaskGetSchedulerState>
 8001588:	4606      	mov	r6, r0
 800158a:	b968      	cbnz	r0, 80015a8 <xQueueGenericSend+0x86>
 800158c:	9b01      	ldr	r3, [sp, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d04a      	beq.n	8001628 <xQueueGenericSend+0x106>
 8001592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001596:	b672      	cpsid	i
 8001598:	f383 8811 	msr	BASEPRI, r3
 800159c:	f3bf 8f6f 	isb	sy
 80015a0:	f3bf 8f4f 	dsb	sy
 80015a4:	b662      	cpsie	i
 80015a6:	e7fe      	b.n	80015a6 <xQueueGenericSend+0x84>
 80015a8:	2600      	movs	r6, #0
 80015aa:	e03d      	b.n	8001628 <xQueueGenericSend+0x106>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80015ac:	462a      	mov	r2, r5
 80015ae:	4639      	mov	r1, r7
 80015b0:	4620      	mov	r0, r4
 80015b2:	f7ff fe80 	bl	80012b6 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80015b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80015b8:	b97b      	cbnz	r3, 80015da <xQueueGenericSend+0xb8>
					else if( xYieldRequired != pdFALSE )
 80015ba:	b148      	cbz	r0, 80015d0 <xQueueGenericSend+0xae>
						queueYIELD_IF_USING_PREEMPTION();
 80015bc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80015c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015c4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80015c8:	f3bf 8f4f 	dsb	sy
 80015cc:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80015d0:	f001 f996 	bl	8002900 <vPortExitCritical>
				return pdPASS;
 80015d4:	2001      	movs	r0, #1
}
 80015d6:	b005      	add	sp, #20
 80015d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80015da:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80015de:	f000 fdc9 	bl	8002174 <xTaskRemoveFromEventList>
 80015e2:	2800      	cmp	r0, #0
 80015e4:	d0f4      	beq.n	80015d0 <xQueueGenericSend+0xae>
							queueYIELD_IF_USING_PREEMPTION();
 80015e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80015ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015ee:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80015f2:	f3bf 8f4f 	dsb	sy
 80015f6:	f3bf 8f6f 	isb	sy
 80015fa:	e7e9      	b.n	80015d0 <xQueueGenericSend+0xae>
					taskEXIT_CRITICAL();
 80015fc:	f001 f980 	bl	8002900 <vPortExitCritical>
					return errQUEUE_FULL;
 8001600:	2000      	movs	r0, #0
 8001602:	e7e8      	b.n	80015d6 <xQueueGenericSend+0xb4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001604:	a802      	add	r0, sp, #8
 8001606:	f000 fdfb 	bl	8002200 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800160a:	2601      	movs	r6, #1
 800160c:	e019      	b.n	8001642 <xQueueGenericSend+0x120>
		prvLockQueue( pxQueue );
 800160e:	2300      	movs	r3, #0
 8001610:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001614:	e021      	b.n	800165a <xQueueGenericSend+0x138>
 8001616:	2300      	movs	r3, #0
 8001618:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800161c:	e023      	b.n	8001666 <xQueueGenericSend+0x144>
				prvUnlockQueue( pxQueue );
 800161e:	4620      	mov	r0, r4
 8001620:	f7ff fe96 	bl	8001350 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001624:	f000 fc80 	bl	8001f28 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8001628:	f001 f944 	bl	80028b4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800162c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800162e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001630:	429a      	cmp	r2, r3
 8001632:	d3bb      	bcc.n	80015ac <xQueueGenericSend+0x8a>
 8001634:	2d02      	cmp	r5, #2
 8001636:	d0b9      	beq.n	80015ac <xQueueGenericSend+0x8a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001638:	9b01      	ldr	r3, [sp, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d0de      	beq.n	80015fc <xQueueGenericSend+0xda>
				else if( xEntryTimeSet == pdFALSE )
 800163e:	2e00      	cmp	r6, #0
 8001640:	d0e0      	beq.n	8001604 <xQueueGenericSend+0xe2>
		taskEXIT_CRITICAL();
 8001642:	f001 f95d 	bl	8002900 <vPortExitCritical>
		vTaskSuspendAll();
 8001646:	f000 fbd1 	bl	8001dec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800164a:	f001 f933 	bl	80028b4 <vPortEnterCritical>
 800164e:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8001652:	b252      	sxtb	r2, r2
 8001654:	f1b2 3fff 	cmp.w	r2, #4294967295
 8001658:	d0d9      	beq.n	800160e <xQueueGenericSend+0xec>
 800165a:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 800165e:	b252      	sxtb	r2, r2
 8001660:	f1b2 3fff 	cmp.w	r2, #4294967295
 8001664:	d0d7      	beq.n	8001616 <xQueueGenericSend+0xf4>
 8001666:	f001 f94b 	bl	8002900 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800166a:	a901      	add	r1, sp, #4
 800166c:	a802      	add	r0, sp, #8
 800166e:	f000 fdd1 	bl	8002214 <xTaskCheckForTimeOut>
 8001672:	b9d8      	cbnz	r0, 80016ac <xQueueGenericSend+0x18a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001674:	4620      	mov	r0, r4
 8001676:	f7ff fe02 	bl	800127e <prvIsQueueFull>
 800167a:	2800      	cmp	r0, #0
 800167c:	d0cf      	beq.n	800161e <xQueueGenericSend+0xfc>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800167e:	9901      	ldr	r1, [sp, #4]
 8001680:	f104 0010 	add.w	r0, r4, #16
 8001684:	f000 fd3a 	bl	80020fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001688:	4620      	mov	r0, r4
 800168a:	f7ff fe61 	bl	8001350 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800168e:	f000 fc4b 	bl	8001f28 <xTaskResumeAll>
 8001692:	2800      	cmp	r0, #0
 8001694:	d1c8      	bne.n	8001628 <xQueueGenericSend+0x106>
					portYIELD_WITHIN_API();
 8001696:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800169a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800169e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80016a2:	f3bf 8f4f 	dsb	sy
 80016a6:	f3bf 8f6f 	isb	sy
 80016aa:	e7bd      	b.n	8001628 <xQueueGenericSend+0x106>
			prvUnlockQueue( pxQueue );
 80016ac:	4620      	mov	r0, r4
 80016ae:	f7ff fe4f 	bl	8001350 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80016b2:	f000 fc39 	bl	8001f28 <xTaskResumeAll>
			return errQUEUE_FULL;
 80016b6:	2000      	movs	r0, #0
 80016b8:	e78d      	b.n	80015d6 <xQueueGenericSend+0xb4>

080016ba <xQueueGenericSendFromISR>:
{
 80016ba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80016be:	b1a0      	cbz	r0, 80016ea <xQueueGenericSendFromISR+0x30>
 80016c0:	460f      	mov	r7, r1
 80016c2:	4616      	mov	r6, r2
 80016c4:	461c      	mov	r4, r3
 80016c6:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80016c8:	b1d1      	cbz	r1, 8001700 <xQueueGenericSendFromISR+0x46>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80016ca:	2c02      	cmp	r4, #2
 80016cc:	d126      	bne.n	800171c <xQueueGenericSendFromISR+0x62>
 80016ce:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d023      	beq.n	800171c <xQueueGenericSendFromISR+0x62>
 80016d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016d8:	b672      	cpsid	i
 80016da:	f383 8811 	msr	BASEPRI, r3
 80016de:	f3bf 8f6f 	isb	sy
 80016e2:	f3bf 8f4f 	dsb	sy
 80016e6:	b662      	cpsie	i
 80016e8:	e7fe      	b.n	80016e8 <xQueueGenericSendFromISR+0x2e>
 80016ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016ee:	b672      	cpsid	i
 80016f0:	f383 8811 	msr	BASEPRI, r3
 80016f4:	f3bf 8f6f 	isb	sy
 80016f8:	f3bf 8f4f 	dsb	sy
 80016fc:	b662      	cpsie	i
	configASSERT( pxQueue );
 80016fe:	e7fe      	b.n	80016fe <xQueueGenericSendFromISR+0x44>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001700:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001702:	2b00      	cmp	r3, #0
 8001704:	d0e1      	beq.n	80016ca <xQueueGenericSendFromISR+0x10>
 8001706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800170a:	b672      	cpsid	i
 800170c:	f383 8811 	msr	BASEPRI, r3
 8001710:	f3bf 8f6f 	isb	sy
 8001714:	f3bf 8f4f 	dsb	sy
 8001718:	b662      	cpsie	i
 800171a:	e7fe      	b.n	800171a <xQueueGenericSendFromISR+0x60>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800171c:	f001 f9ce 	bl	8002abc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001720:	f3ef 8811 	mrs	r8, BASEPRI
 8001724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001728:	b672      	cpsid	i
 800172a:	f383 8811 	msr	BASEPRI, r3
 800172e:	f3bf 8f6f 	isb	sy
 8001732:	f3bf 8f4f 	dsb	sy
 8001736:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001738:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800173a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800173c:	429a      	cmp	r2, r3
 800173e:	d306      	bcc.n	800174e <xQueueGenericSendFromISR+0x94>
 8001740:	2c02      	cmp	r4, #2
 8001742:	d004      	beq.n	800174e <xQueueGenericSendFromISR+0x94>
			xReturn = errQUEUE_FULL;
 8001744:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001746:	f388 8811 	msr	BASEPRI, r8
}
 800174a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 800174e:	f895 9045 	ldrb.w	r9, [r5, #69]	; 0x45
 8001752:	fa4f f989 	sxtb.w	r9, r9
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001756:	4622      	mov	r2, r4
 8001758:	4639      	mov	r1, r7
 800175a:	4628      	mov	r0, r5
 800175c:	f7ff fdab 	bl	80012b6 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8001760:	f1b9 3fff 	cmp.w	r9, #4294967295
 8001764:	d006      	beq.n	8001774 <xQueueGenericSendFromISR+0xba>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001766:	f109 0301 	add.w	r3, r9, #1
 800176a:	b25b      	sxtb	r3, r3
 800176c:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 8001770:	2001      	movs	r0, #1
 8001772:	e7e8      	b.n	8001746 <xQueueGenericSendFromISR+0x8c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001774:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001776:	b90b      	cbnz	r3, 800177c <xQueueGenericSendFromISR+0xc2>
			xReturn = pdPASS;
 8001778:	2001      	movs	r0, #1
 800177a:	e7e4      	b.n	8001746 <xQueueGenericSendFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800177c:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001780:	f000 fcf8 	bl	8002174 <xTaskRemoveFromEventList>
 8001784:	b118      	cbz	r0, 800178e <xQueueGenericSendFromISR+0xd4>
							if( pxHigherPriorityTaskWoken != NULL )
 8001786:	b126      	cbz	r6, 8001792 <xQueueGenericSendFromISR+0xd8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001788:	2001      	movs	r0, #1
 800178a:	6030      	str	r0, [r6, #0]
 800178c:	e7db      	b.n	8001746 <xQueueGenericSendFromISR+0x8c>
			xReturn = pdPASS;
 800178e:	2001      	movs	r0, #1
 8001790:	e7d9      	b.n	8001746 <xQueueGenericSendFromISR+0x8c>
 8001792:	2001      	movs	r0, #1
 8001794:	e7d7      	b.n	8001746 <xQueueGenericSendFromISR+0x8c>

08001796 <xQueueReceive>:
{
 8001796:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001798:	b085      	sub	sp, #20
 800179a:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800179c:	b1a0      	cbz	r0, 80017c8 <xQueueReceive+0x32>
 800179e:	460f      	mov	r7, r1
 80017a0:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80017a2:	b1e1      	cbz	r1, 80017de <xQueueReceive+0x48>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80017a4:	f000 fd84 	bl	80022b0 <xTaskGetSchedulerState>
 80017a8:	4606      	mov	r6, r0
 80017aa:	bb30      	cbnz	r0, 80017fa <xQueueReceive+0x64>
 80017ac:	9b01      	ldr	r3, [sp, #4]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d064      	beq.n	800187c <xQueueReceive+0xe6>
	__asm volatile
 80017b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017b6:	b672      	cpsid	i
 80017b8:	f383 8811 	msr	BASEPRI, r3
 80017bc:	f3bf 8f6f 	isb	sy
 80017c0:	f3bf 8f4f 	dsb	sy
 80017c4:	b662      	cpsie	i
 80017c6:	e7fe      	b.n	80017c6 <xQueueReceive+0x30>
 80017c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017cc:	b672      	cpsid	i
 80017ce:	f383 8811 	msr	BASEPRI, r3
 80017d2:	f3bf 8f6f 	isb	sy
 80017d6:	f3bf 8f4f 	dsb	sy
 80017da:	b662      	cpsie	i
	configASSERT( ( pxQueue ) );
 80017dc:	e7fe      	b.n	80017dc <xQueueReceive+0x46>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80017de:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d0df      	beq.n	80017a4 <xQueueReceive+0xe>
 80017e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017e8:	b672      	cpsid	i
 80017ea:	f383 8811 	msr	BASEPRI, r3
 80017ee:	f3bf 8f6f 	isb	sy
 80017f2:	f3bf 8f4f 	dsb	sy
 80017f6:	b662      	cpsie	i
 80017f8:	e7fe      	b.n	80017f8 <xQueueReceive+0x62>
 80017fa:	2600      	movs	r6, #0
 80017fc:	e03e      	b.n	800187c <xQueueReceive+0xe6>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80017fe:	4639      	mov	r1, r7
 8001800:	4620      	mov	r0, r4
 8001802:	f7ff fd93 	bl	800132c <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001806:	3d01      	subs	r5, #1
 8001808:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800180a:	6923      	ldr	r3, [r4, #16]
 800180c:	b923      	cbnz	r3, 8001818 <xQueueReceive+0x82>
				taskEXIT_CRITICAL();
 800180e:	f001 f877 	bl	8002900 <vPortExitCritical>
				return pdPASS;
 8001812:	2001      	movs	r0, #1
}
 8001814:	b005      	add	sp, #20
 8001816:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001818:	f104 0010 	add.w	r0, r4, #16
 800181c:	f000 fcaa 	bl	8002174 <xTaskRemoveFromEventList>
 8001820:	2800      	cmp	r0, #0
 8001822:	d0f4      	beq.n	800180e <xQueueReceive+0x78>
						queueYIELD_IF_USING_PREEMPTION();
 8001824:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001828:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800182c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001830:	f3bf 8f4f 	dsb	sy
 8001834:	f3bf 8f6f 	isb	sy
 8001838:	e7e9      	b.n	800180e <xQueueReceive+0x78>
					taskEXIT_CRITICAL();
 800183a:	f001 f861 	bl	8002900 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800183e:	2000      	movs	r0, #0
 8001840:	e7e8      	b.n	8001814 <xQueueReceive+0x7e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001842:	a802      	add	r0, sp, #8
 8001844:	f000 fcdc 	bl	8002200 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001848:	2601      	movs	r6, #1
 800184a:	e021      	b.n	8001890 <xQueueReceive+0xfa>
		prvLockQueue( pxQueue );
 800184c:	2300      	movs	r3, #0
 800184e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001852:	e029      	b.n	80018a8 <xQueueReceive+0x112>
 8001854:	2300      	movs	r3, #0
 8001856:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800185a:	e02b      	b.n	80018b4 <xQueueReceive+0x11e>
				prvUnlockQueue( pxQueue );
 800185c:	4620      	mov	r0, r4
 800185e:	f7ff fd77 	bl	8001350 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001862:	f000 fb61 	bl	8001f28 <xTaskResumeAll>
 8001866:	e009      	b.n	800187c <xQueueReceive+0xe6>
			prvUnlockQueue( pxQueue );
 8001868:	4620      	mov	r0, r4
 800186a:	f7ff fd71 	bl	8001350 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800186e:	f000 fb5b 	bl	8001f28 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001872:	4620      	mov	r0, r4
 8001874:	f7ff fd12 	bl	800129c <prvIsQueueEmpty>
 8001878:	2800      	cmp	r0, #0
 800187a:	d13f      	bne.n	80018fc <xQueueReceive+0x166>
		taskENTER_CRITICAL();
 800187c:	f001 f81a 	bl	80028b4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001880:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001882:	2d00      	cmp	r5, #0
 8001884:	d1bb      	bne.n	80017fe <xQueueReceive+0x68>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001886:	9b01      	ldr	r3, [sp, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d0d6      	beq.n	800183a <xQueueReceive+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 800188c:	2e00      	cmp	r6, #0
 800188e:	d0d8      	beq.n	8001842 <xQueueReceive+0xac>
		taskEXIT_CRITICAL();
 8001890:	f001 f836 	bl	8002900 <vPortExitCritical>
		vTaskSuspendAll();
 8001894:	f000 faaa 	bl	8001dec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001898:	f001 f80c 	bl	80028b4 <vPortEnterCritical>
 800189c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80018a0:	b25b      	sxtb	r3, r3
 80018a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a6:	d0d1      	beq.n	800184c <xQueueReceive+0xb6>
 80018a8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80018ac:	b25b      	sxtb	r3, r3
 80018ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b2:	d0cf      	beq.n	8001854 <xQueueReceive+0xbe>
 80018b4:	f001 f824 	bl	8002900 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80018b8:	a901      	add	r1, sp, #4
 80018ba:	a802      	add	r0, sp, #8
 80018bc:	f000 fcaa 	bl	8002214 <xTaskCheckForTimeOut>
 80018c0:	2800      	cmp	r0, #0
 80018c2:	d1d1      	bne.n	8001868 <xQueueReceive+0xd2>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80018c4:	4620      	mov	r0, r4
 80018c6:	f7ff fce9 	bl	800129c <prvIsQueueEmpty>
 80018ca:	2800      	cmp	r0, #0
 80018cc:	d0c6      	beq.n	800185c <xQueueReceive+0xc6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80018ce:	9901      	ldr	r1, [sp, #4]
 80018d0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80018d4:	f000 fc12 	bl	80020fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80018d8:	4620      	mov	r0, r4
 80018da:	f7ff fd39 	bl	8001350 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80018de:	f000 fb23 	bl	8001f28 <xTaskResumeAll>
 80018e2:	2800      	cmp	r0, #0
 80018e4:	d1ca      	bne.n	800187c <xQueueReceive+0xe6>
					portYIELD_WITHIN_API();
 80018e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80018ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018ee:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80018f2:	f3bf 8f4f 	dsb	sy
 80018f6:	f3bf 8f6f 	isb	sy
 80018fa:	e7bf      	b.n	800187c <xQueueReceive+0xe6>
				return errQUEUE_EMPTY;
 80018fc:	2000      	movs	r0, #0
 80018fe:	e789      	b.n	8001814 <xQueueReceive+0x7e>

08001900 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001900:	2300      	movs	r3, #0
 8001902:	2b07      	cmp	r3, #7
 8001904:	d80c      	bhi.n	8001920 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001906:	4a07      	ldr	r2, [pc, #28]	; (8001924 <vQueueAddToRegistry+0x24>)
 8001908:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800190c:	b10a      	cbz	r2, 8001912 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800190e:	3301      	adds	r3, #1
 8001910:	e7f7      	b.n	8001902 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001912:	4a04      	ldr	r2, [pc, #16]	; (8001924 <vQueueAddToRegistry+0x24>)
 8001914:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001918:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800191c:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800191e:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	20000aac 	.word	0x20000aac

08001928 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001928:	b570      	push	{r4, r5, r6, lr}
 800192a:	4604      	mov	r4, r0
 800192c:	460d      	mov	r5, r1
 800192e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001930:	f000 ffc0 	bl	80028b4 <vPortEnterCritical>
 8001934:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001938:	b25b      	sxtb	r3, r3
 800193a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800193e:	d00d      	beq.n	800195c <vQueueWaitForMessageRestricted+0x34>
 8001940:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001944:	b25b      	sxtb	r3, r3
 8001946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800194a:	d00b      	beq.n	8001964 <vQueueWaitForMessageRestricted+0x3c>
 800194c:	f000 ffd8 	bl	8002900 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001950:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001952:	b15b      	cbz	r3, 800196c <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8001954:	4620      	mov	r0, r4
 8001956:	f7ff fcfb 	bl	8001350 <prvUnlockQueue>
	}
 800195a:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800195c:	2300      	movs	r3, #0
 800195e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001962:	e7ed      	b.n	8001940 <vQueueWaitForMessageRestricted+0x18>
 8001964:	2300      	movs	r3, #0
 8001966:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800196a:	e7ef      	b.n	800194c <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800196c:	4632      	mov	r2, r6
 800196e:	4629      	mov	r1, r5
 8001970:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001974:	f000 fbde 	bl	8002134 <vTaskPlaceOnEventListRestricted>
 8001978:	e7ec      	b.n	8001954 <vQueueWaitForMessageRestricted+0x2c>
	...

0800197c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800197c:	4b07      	ldr	r3, [pc, #28]	; (800199c <prvResetNextTaskUnblockTime+0x20>)
 800197e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	b923      	cbnz	r3, 800198e <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001984:	4b05      	ldr	r3, [pc, #20]	; (800199c <prvResetNextTaskUnblockTime+0x20>)
 8001986:	f04f 32ff 	mov.w	r2, #4294967295
 800198a:	62da      	str	r2, [r3, #44]	; 0x2c
 800198c:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800198e:	4b03      	ldr	r3, [pc, #12]	; (800199c <prvResetNextTaskUnblockTime+0x20>)
 8001990:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001992:	68d2      	ldr	r2, [r2, #12]
 8001994:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001996:	6852      	ldr	r2, [r2, #4]
 8001998:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 800199a:	4770      	bx	lr
 800199c:	20000aec 	.word	0x20000aec

080019a0 <prvInitialiseNewTask>:
{
 80019a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80019a4:	4680      	mov	r8, r0
 80019a6:	460d      	mov	r5, r1
 80019a8:	4617      	mov	r7, r2
 80019aa:	4699      	mov	r9, r3
 80019ac:	9e08      	ldr	r6, [sp, #32]
 80019ae:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80019b2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80019b4:	0092      	lsls	r2, r2, #2
 80019b6:	21a5      	movs	r1, #165	; 0xa5
 80019b8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80019ba:	f005 fd1c 	bl	80073f6 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80019be:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80019c0:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 80019c4:	443a      	add	r2, r7
 80019c6:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80019ca:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 80019ce:	b3a5      	cbz	r5, 8001a3a <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80019d0:	f04f 0c00 	mov.w	ip, #0
 80019d4:	f1bc 0f0f 	cmp.w	ip, #15
 80019d8:	d809      	bhi.n	80019ee <prvInitialiseNewTask+0x4e>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80019da:	f815 300c 	ldrb.w	r3, [r5, ip]
 80019de:	eb04 020c 	add.w	r2, r4, ip
 80019e2:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 80019e6:	b113      	cbz	r3, 80019ee <prvInitialiseNewTask+0x4e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80019e8:	f10c 0c01 	add.w	ip, ip, #1
 80019ec:	e7f2      	b.n	80019d4 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80019ee:	2300      	movs	r3, #0
 80019f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80019f4:	2e37      	cmp	r6, #55	; 0x37
 80019f6:	d900      	bls.n	80019fa <prvInitialiseNewTask+0x5a>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80019f8:	2637      	movs	r6, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 80019fa:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80019fc:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80019fe:	2500      	movs	r5, #0
 8001a00:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001a02:	1d20      	adds	r0, r4, #4
 8001a04:	f7ff fc01 	bl	800120a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001a08:	f104 0018 	add.w	r0, r4, #24
 8001a0c:	f7ff fbfd 	bl	800120a <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001a10:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a12:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
 8001a16:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001a18:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8001a1a:	6565      	str	r5, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001a1c:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001a20:	464a      	mov	r2, r9
 8001a22:	4641      	mov	r1, r8
 8001a24:	4638      	mov	r0, r7
 8001a26:	f000 ff1b 	bl	8002860 <pxPortInitialiseStack>
 8001a2a:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8001a2c:	f1ba 0f00 	cmp.w	sl, #0
 8001a30:	d001      	beq.n	8001a36 <prvInitialiseNewTask+0x96>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001a32:	f8ca 4000 	str.w	r4, [sl]
}
 8001a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8001a40:	e7d8      	b.n	80019f4 <prvInitialiseNewTask+0x54>
	...

08001a44 <prvInitialiseTaskLists>:
{
 8001a44:	b570      	push	{r4, r5, r6, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001a46:	2400      	movs	r4, #0
 8001a48:	e007      	b.n	8001a5a <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001a4a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8001a4e:	0093      	lsls	r3, r2, #2
 8001a50:	4810      	ldr	r0, [pc, #64]	; (8001a94 <prvInitialiseTaskLists+0x50>)
 8001a52:	4418      	add	r0, r3
 8001a54:	f7ff fbce 	bl	80011f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001a58:	3401      	adds	r4, #1
 8001a5a:	2c37      	cmp	r4, #55	; 0x37
 8001a5c:	d9f5      	bls.n	8001a4a <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8001a5e:	4c0e      	ldr	r4, [pc, #56]	; (8001a98 <prvInitialiseTaskLists+0x54>)
 8001a60:	f504 6692 	add.w	r6, r4, #1168	; 0x490
 8001a64:	4630      	mov	r0, r6
 8001a66:	f7ff fbc5 	bl	80011f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001a6a:	f204 45a4 	addw	r5, r4, #1188	; 0x4a4
 8001a6e:	4628      	mov	r0, r5
 8001a70:	f7ff fbc0 	bl	80011f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001a74:	f104 0014 	add.w	r0, r4, #20
 8001a78:	f7ff fbbc 	bl	80011f4 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8001a7c:	f504 6097 	add.w	r0, r4, #1208	; 0x4b8
 8001a80:	f7ff fbb8 	bl	80011f4 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8001a84:	4620      	mov	r0, r4
 8001a86:	f7ff fbb5 	bl	80011f4 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8001a8a:	62a6      	str	r6, [r4, #40]	; 0x28
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001a8c:	f8c4 54cc 	str.w	r5, [r4, #1228]	; 0x4cc
}
 8001a90:	bd70      	pop	{r4, r5, r6, pc}
 8001a92:	bf00      	nop
 8001a94:	20000b1c 	.word	0x20000b1c
 8001a98:	20000aec 	.word	0x20000aec

08001a9c <prvAddNewTaskToReadyList>:
{
 8001a9c:	b538      	push	{r3, r4, r5, lr}
 8001a9e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8001aa0:	f000 ff08 	bl	80028b4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8001aa4:	4b28      	ldr	r3, [pc, #160]	; (8001b48 <prvAddNewTaskToReadyList+0xac>)
 8001aa6:	f8d3 24d0 	ldr.w	r2, [r3, #1232]	; 0x4d0
 8001aaa:	3201      	adds	r2, #1
 8001aac:	f8c3 24d0 	str.w	r2, [r3, #1232]	; 0x4d0
		if( pxCurrentTCB == NULL )
 8001ab0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8001ab4:	b173      	cbz	r3, 8001ad4 <prvAddNewTaskToReadyList+0x38>
			if( xSchedulerRunning == pdFALSE )
 8001ab6:	4b24      	ldr	r3, [pc, #144]	; (8001b48 <prvAddNewTaskToReadyList+0xac>)
 8001ab8:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 8001abc:	b98b      	cbnz	r3, 8001ae2 <prvAddNewTaskToReadyList+0x46>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001abe:	4b22      	ldr	r3, [pc, #136]	; (8001b48 <prvAddNewTaskToReadyList+0xac>)
 8001ac0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8001ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ac6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d80a      	bhi.n	8001ae2 <prvAddNewTaskToReadyList+0x46>
					pxCurrentTCB = pxNewTCB;
 8001acc:	4b1e      	ldr	r3, [pc, #120]	; (8001b48 <prvAddNewTaskToReadyList+0xac>)
 8001ace:	f8c3 44d4 	str.w	r4, [r3, #1236]	; 0x4d4
 8001ad2:	e006      	b.n	8001ae2 <prvAddNewTaskToReadyList+0x46>
			pxCurrentTCB = pxNewTCB;
 8001ad4:	4b1c      	ldr	r3, [pc, #112]	; (8001b48 <prvAddNewTaskToReadyList+0xac>)
 8001ad6:	f8c3 44d4 	str.w	r4, [r3, #1236]	; 0x4d4
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001ada:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d02e      	beq.n	8001b40 <prvAddNewTaskToReadyList+0xa4>
		uxTaskNumber++;
 8001ae2:	4a19      	ldr	r2, [pc, #100]	; (8001b48 <prvAddNewTaskToReadyList+0xac>)
 8001ae4:	f8d2 34dc 	ldr.w	r3, [r2, #1244]	; 0x4dc
 8001ae8:	3301      	adds	r3, #1
 8001aea:	f8c2 34dc 	str.w	r3, [r2, #1244]	; 0x4dc
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001aee:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8001af0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001af2:	f8d2 24e0 	ldr.w	r2, [r2, #1248]	; 0x4e0
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d902      	bls.n	8001b00 <prvAddNewTaskToReadyList+0x64>
 8001afa:	4a13      	ldr	r2, [pc, #76]	; (8001b48 <prvAddNewTaskToReadyList+0xac>)
 8001afc:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
 8001b00:	4d11      	ldr	r5, [pc, #68]	; (8001b48 <prvAddNewTaskToReadyList+0xac>)
 8001b02:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8001b06:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001b0a:	1d21      	adds	r1, r4, #4
 8001b0c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001b10:	f7ff fb7e 	bl	8001210 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8001b14:	f000 fef4 	bl	8002900 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8001b18:	f8d5 34d8 	ldr.w	r3, [r5, #1240]	; 0x4d8
 8001b1c:	b17b      	cbz	r3, 8001b3e <prvAddNewTaskToReadyList+0xa2>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001b1e:	f8d5 34d4 	ldr.w	r3, [r5, #1236]	; 0x4d4
 8001b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d209      	bcs.n	8001b3e <prvAddNewTaskToReadyList+0xa2>
			taskYIELD_IF_USING_PREEMPTION();
 8001b2a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b32:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001b36:	f3bf 8f4f 	dsb	sy
 8001b3a:	f3bf 8f6f 	isb	sy
}
 8001b3e:	bd38      	pop	{r3, r4, r5, pc}
				prvInitialiseTaskLists();
 8001b40:	f7ff ff80 	bl	8001a44 <prvInitialiseTaskLists>
 8001b44:	e7cd      	b.n	8001ae2 <prvAddNewTaskToReadyList+0x46>
 8001b46:	bf00      	nop
 8001b48:	20000aec 	.word	0x20000aec

08001b4c <prvDeleteTCB>:
	{
 8001b4c:	b510      	push	{r4, lr}
 8001b4e:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8001b50:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
 8001b54:	b173      	cbz	r3, 8001b74 <prvDeleteTCB+0x28>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d013      	beq.n	8001b82 <prvDeleteTCB+0x36>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d010      	beq.n	8001b80 <prvDeleteTCB+0x34>
 8001b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b62:	b672      	cpsid	i
 8001b64:	f383 8811 	msr	BASEPRI, r3
 8001b68:	f3bf 8f6f 	isb	sy
 8001b6c:	f3bf 8f4f 	dsb	sy
 8001b70:	b662      	cpsie	i
 8001b72:	e7fe      	b.n	8001b72 <prvDeleteTCB+0x26>
				vPortFree( pxTCB->pxStack );
 8001b74:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8001b76:	f001 f899 	bl	8002cac <vPortFree>
				vPortFree( pxTCB );
 8001b7a:	4620      	mov	r0, r4
 8001b7c:	f001 f896 	bl	8002cac <vPortFree>
	}
 8001b80:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8001b82:	f001 f893 	bl	8002cac <vPortFree>
 8001b86:	e7fb      	b.n	8001b80 <prvDeleteTCB+0x34>

08001b88 <prvCheckTasksWaitingTermination>:
{
 8001b88:	b538      	push	{r3, r4, r5, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001b8a:	e017      	b.n	8001bbc <prvCheckTasksWaitingTermination+0x34>
			taskENTER_CRITICAL();
 8001b8c:	f000 fe92 	bl	80028b4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001b90:	4c0d      	ldr	r4, [pc, #52]	; (8001bc8 <prvCheckTasksWaitingTermination+0x40>)
 8001b92:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
 8001b96:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001b98:	1d28      	adds	r0, r5, #4
 8001b9a:	f7ff fb5d 	bl	8001258 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001b9e:	f8d4 34d0 	ldr.w	r3, [r4, #1232]	; 0x4d0
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	f8c4 34d0 	str.w	r3, [r4, #1232]	; 0x4d0
				--uxDeletedTasksWaitingCleanUp;
 8001ba8:	f8d4 34e4 	ldr.w	r3, [r4, #1252]	; 0x4e4
 8001bac:	3b01      	subs	r3, #1
 8001bae:	f8c4 34e4 	str.w	r3, [r4, #1252]	; 0x4e4
			taskEXIT_CRITICAL();
 8001bb2:	f000 fea5 	bl	8002900 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8001bb6:	4628      	mov	r0, r5
 8001bb8:	f7ff ffc8 	bl	8001b4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001bbc:	4b02      	ldr	r3, [pc, #8]	; (8001bc8 <prvCheckTasksWaitingTermination+0x40>)
 8001bbe:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1e2      	bne.n	8001b8c <prvCheckTasksWaitingTermination+0x4>
}
 8001bc6:	bd38      	pop	{r3, r4, r5, pc}
 8001bc8:	20000aec 	.word	0x20000aec

08001bcc <prvIdleTask>:
{
 8001bcc:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8001bce:	f7ff ffdb 	bl	8001b88 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001bd2:	4b07      	ldr	r3, [pc, #28]	; (8001bf0 <prvIdleTask+0x24>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d9f9      	bls.n	8001bce <prvIdleTask+0x2>
				taskYIELD();
 8001bda:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001be2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001be6:	f3bf 8f4f 	dsb	sy
 8001bea:	f3bf 8f6f 	isb	sy
 8001bee:	e7ee      	b.n	8001bce <prvIdleTask+0x2>
 8001bf0:	20000aec 	.word	0x20000aec

08001bf4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001bf4:	b570      	push	{r4, r5, r6, lr}
 8001bf6:	4604      	mov	r4, r0
 8001bf8:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001bfa:	4b1a      	ldr	r3, [pc, #104]	; (8001c64 <prvAddCurrentTaskToDelayedList+0x70>)
 8001bfc:	f8d3 64e8 	ldr.w	r6, [r3, #1256]	; 0x4e8
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001c00:	f8d3 04d4 	ldr.w	r0, [r3, #1236]	; 0x4d4
 8001c04:	3004      	adds	r0, #4
 8001c06:	f7ff fb27 	bl	8001258 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001c0a:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001c0e:	bf14      	ite	ne
 8001c10:	2300      	movne	r3, #0
 8001c12:	2301      	moveq	r3, #1
 8001c14:	2d00      	cmp	r5, #0
 8001c16:	bf08      	it	eq
 8001c18:	2300      	moveq	r3, #0
 8001c1a:	b97b      	cbnz	r3, 8001c3c <prvAddCurrentTaskToDelayedList+0x48>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001c1c:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001c1e:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <prvAddCurrentTaskToDelayedList+0x70>)
 8001c20:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8001c24:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8001c26:	42a6      	cmp	r6, r4
 8001c28:	d90f      	bls.n	8001c4a <prvAddCurrentTaskToDelayedList+0x56>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001c2a:	4b0e      	ldr	r3, [pc, #56]	; (8001c64 <prvAddCurrentTaskToDelayedList+0x70>)
 8001c2c:	f8d3 04cc 	ldr.w	r0, [r3, #1228]	; 0x4cc
 8001c30:	f8d3 14d4 	ldr.w	r1, [r3, #1236]	; 0x4d4
 8001c34:	3104      	adds	r1, #4
 8001c36:	f7ff faf6 	bl	8001226 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001c3a:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001c3c:	4809      	ldr	r0, [pc, #36]	; (8001c64 <prvAddCurrentTaskToDelayedList+0x70>)
 8001c3e:	f8d0 14d4 	ldr.w	r1, [r0, #1236]	; 0x4d4
 8001c42:	3104      	adds	r1, #4
 8001c44:	f7ff fae4 	bl	8001210 <vListInsertEnd>
 8001c48:	e7f7      	b.n	8001c3a <prvAddCurrentTaskToDelayedList+0x46>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001c4a:	4d06      	ldr	r5, [pc, #24]	; (8001c64 <prvAddCurrentTaskToDelayedList+0x70>)
 8001c4c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8001c4e:	f8d5 14d4 	ldr.w	r1, [r5, #1236]	; 0x4d4
 8001c52:	3104      	adds	r1, #4
 8001c54:	f7ff fae7 	bl	8001226 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001c58:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001c5a:	42a3      	cmp	r3, r4
 8001c5c:	d9ed      	bls.n	8001c3a <prvAddCurrentTaskToDelayedList+0x46>
					xNextTaskUnblockTime = xTimeToWake;
 8001c5e:	62ec      	str	r4, [r5, #44]	; 0x2c
}
 8001c60:	e7eb      	b.n	8001c3a <prvAddCurrentTaskToDelayedList+0x46>
 8001c62:	bf00      	nop
 8001c64:	20000aec 	.word	0x20000aec

08001c68 <xTaskCreateStatic>:
	{
 8001c68:	b530      	push	{r4, r5, lr}
 8001c6a:	b087      	sub	sp, #28
 8001c6c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8001c6e:	b18c      	cbz	r4, 8001c94 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8001c70:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001c72:	b1d5      	cbz	r5, 8001caa <xTaskCreateStatic+0x42>
			volatile size_t xSize = sizeof( StaticTask_t );
 8001c74:	255c      	movs	r5, #92	; 0x5c
 8001c76:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001c78:	9d04      	ldr	r5, [sp, #16]
 8001c7a:	2d5c      	cmp	r5, #92	; 0x5c
 8001c7c:	d020      	beq.n	8001cc0 <xTaskCreateStatic+0x58>
 8001c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c82:	b672      	cpsid	i
 8001c84:	f383 8811 	msr	BASEPRI, r3
 8001c88:	f3bf 8f6f 	isb	sy
 8001c8c:	f3bf 8f4f 	dsb	sy
 8001c90:	b662      	cpsie	i
 8001c92:	e7fe      	b.n	8001c92 <xTaskCreateStatic+0x2a>
 8001c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c98:	b672      	cpsid	i
 8001c9a:	f383 8811 	msr	BASEPRI, r3
 8001c9e:	f3bf 8f6f 	isb	sy
 8001ca2:	f3bf 8f4f 	dsb	sy
 8001ca6:	b662      	cpsie	i
		configASSERT( puxStackBuffer != NULL );
 8001ca8:	e7fe      	b.n	8001ca8 <xTaskCreateStatic+0x40>
 8001caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cae:	b672      	cpsid	i
 8001cb0:	f383 8811 	msr	BASEPRI, r3
 8001cb4:	f3bf 8f6f 	isb	sy
 8001cb8:	f3bf 8f4f 	dsb	sy
 8001cbc:	b662      	cpsie	i
		configASSERT( pxTaskBuffer != NULL );
 8001cbe:	e7fe      	b.n	8001cbe <xTaskCreateStatic+0x56>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8001cc0:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001cc2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001cc4:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001cc6:	2402      	movs	r4, #2
 8001cc8:	f885 4059 	strb.w	r4, [r5, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001ccc:	2400      	movs	r4, #0
 8001cce:	9403      	str	r4, [sp, #12]
 8001cd0:	9502      	str	r5, [sp, #8]
 8001cd2:	ac05      	add	r4, sp, #20
 8001cd4:	9401      	str	r4, [sp, #4]
 8001cd6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001cd8:	9400      	str	r4, [sp, #0]
 8001cda:	f7ff fe61 	bl	80019a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001cde:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001ce0:	f7ff fedc 	bl	8001a9c <prvAddNewTaskToReadyList>
	}
 8001ce4:	9805      	ldr	r0, [sp, #20]
 8001ce6:	b007      	add	sp, #28
 8001ce8:	bd30      	pop	{r4, r5, pc}

08001cea <xTaskCreate>:
	{
 8001cea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	4607      	mov	r7, r0
 8001cf2:	4688      	mov	r8, r1
 8001cf4:	4614      	mov	r4, r2
 8001cf6:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001cf8:	0090      	lsls	r0, r2, #2
 8001cfa:	f000 ff65 	bl	8002bc8 <pvPortMalloc>
			if( pxStack != NULL )
 8001cfe:	b300      	cbz	r0, 8001d42 <xTaskCreate+0x58>
 8001d00:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001d02:	205c      	movs	r0, #92	; 0x5c
 8001d04:	f000 ff60 	bl	8002bc8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8001d08:	4605      	mov	r5, r0
 8001d0a:	b1b0      	cbz	r0, 8001d3a <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 8001d0c:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8001d10:	b1e5      	cbz	r5, 8001d4c <xTaskCreate+0x62>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001d12:	2300      	movs	r3, #0
 8001d14:	f885 3059 	strb.w	r3, [r5, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001d18:	9303      	str	r3, [sp, #12]
 8001d1a:	9502      	str	r5, [sp, #8]
 8001d1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001d1e:	9301      	str	r3, [sp, #4]
 8001d20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	4633      	mov	r3, r6
 8001d26:	4622      	mov	r2, r4
 8001d28:	4641      	mov	r1, r8
 8001d2a:	4638      	mov	r0, r7
 8001d2c:	f7ff fe38 	bl	80019a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001d30:	4628      	mov	r0, r5
 8001d32:	f7ff feb3 	bl	8001a9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001d36:	2001      	movs	r0, #1
 8001d38:	e005      	b.n	8001d46 <xTaskCreate+0x5c>
					vPortFree( pxStack );
 8001d3a:	4648      	mov	r0, r9
 8001d3c:	f000 ffb6 	bl	8002cac <vPortFree>
 8001d40:	e7e6      	b.n	8001d10 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001d42:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8001d46:	b005      	add	sp, #20
 8001d48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001d4c:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8001d50:	e7f9      	b.n	8001d46 <xTaskCreate+0x5c>
	...

08001d54 <vTaskStartScheduler>:
{
 8001d54:	b510      	push	{r4, lr}
 8001d56:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001d58:	2400      	movs	r4, #0
 8001d5a:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001d5c:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001d5e:	aa07      	add	r2, sp, #28
 8001d60:	a906      	add	r1, sp, #24
 8001d62:	a805      	add	r0, sp, #20
 8001d64:	f7ff fa28 	bl	80011b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001d68:	9b05      	ldr	r3, [sp, #20]
 8001d6a:	9302      	str	r3, [sp, #8]
 8001d6c:	9b06      	ldr	r3, [sp, #24]
 8001d6e:	9301      	str	r3, [sp, #4]
 8001d70:	9400      	str	r4, [sp, #0]
 8001d72:	4623      	mov	r3, r4
 8001d74:	9a07      	ldr	r2, [sp, #28]
 8001d76:	491a      	ldr	r1, [pc, #104]	; (8001de0 <vTaskStartScheduler+0x8c>)
 8001d78:	481a      	ldr	r0, [pc, #104]	; (8001de4 <vTaskStartScheduler+0x90>)
 8001d7a:	f7ff ff75 	bl	8001c68 <xTaskCreateStatic>
 8001d7e:	4b1a      	ldr	r3, [pc, #104]	; (8001de8 <vTaskStartScheduler+0x94>)
 8001d80:	f8c3 04f0 	str.w	r0, [r3, #1264]	; 0x4f0
		if( xIdleTaskHandle != NULL )
 8001d84:	b140      	cbz	r0, 8001d98 <vTaskStartScheduler+0x44>
			xReturn = xTimerCreateTimerTask();
 8001d86:	f000 fb55 	bl	8002434 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8001d8a:	2801      	cmp	r0, #1
 8001d8c:	d006      	beq.n	8001d9c <vTaskStartScheduler+0x48>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001d8e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001d92:	d01a      	beq.n	8001dca <vTaskStartScheduler+0x76>
}
 8001d94:	b008      	add	sp, #32
 8001d96:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 8001d98:	2000      	movs	r0, #0
 8001d9a:	e7f6      	b.n	8001d8a <vTaskStartScheduler+0x36>
 8001d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001da0:	b672      	cpsid	i
 8001da2:	f383 8811 	msr	BASEPRI, r3
 8001da6:	f3bf 8f6f 	isb	sy
 8001daa:	f3bf 8f4f 	dsb	sy
 8001dae:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8001db0:	4b0d      	ldr	r3, [pc, #52]	; (8001de8 <vTaskStartScheduler+0x94>)
 8001db2:	f04f 32ff 	mov.w	r2, #4294967295
 8001db6:	62da      	str	r2, [r3, #44]	; 0x2c
		xSchedulerRunning = pdTRUE;
 8001db8:	2201      	movs	r2, #1
 8001dba:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
		if( xPortStartScheduler() != pdFALSE )
 8001dc4:	f000 fe12 	bl	80029ec <xPortStartScheduler>
 8001dc8:	e7e4      	b.n	8001d94 <vTaskStartScheduler+0x40>
 8001dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dce:	b672      	cpsid	i
 8001dd0:	f383 8811 	msr	BASEPRI, r3
 8001dd4:	f3bf 8f6f 	isb	sy
 8001dd8:	f3bf 8f4f 	dsb	sy
 8001ddc:	b662      	cpsie	i
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001dde:	e7fe      	b.n	8001dde <vTaskStartScheduler+0x8a>
 8001de0:	08009f78 	.word	0x08009f78
 8001de4:	08001bcd 	.word	0x08001bcd
 8001de8:	20000aec 	.word	0x20000aec

08001dec <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8001dec:	4a03      	ldr	r2, [pc, #12]	; (8001dfc <vTaskSuspendAll+0x10>)
 8001dee:	f8d2 34ec 	ldr.w	r3, [r2, #1260]	; 0x4ec
 8001df2:	3301      	adds	r3, #1
 8001df4:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
}
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	20000aec 	.word	0x20000aec

08001e00 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8001e00:	4b01      	ldr	r3, [pc, #4]	; (8001e08 <xTaskGetTickCount+0x8>)
 8001e02:	f8d3 04e8 	ldr.w	r0, [r3, #1256]	; 0x4e8
}
 8001e06:	4770      	bx	lr
 8001e08:	20000aec 	.word	0x20000aec

08001e0c <xTaskIncrementTick>:
{
 8001e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e10:	4b44      	ldr	r3, [pc, #272]	; (8001f24 <xTaskIncrementTick+0x118>)
 8001e12:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d172      	bne.n	8001f00 <xTaskIncrementTick+0xf4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001e1a:	4b42      	ldr	r3, [pc, #264]	; (8001f24 <xTaskIncrementTick+0x118>)
 8001e1c:	f8d3 54e8 	ldr.w	r5, [r3, #1256]	; 0x4e8
 8001e20:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8001e22:	f8c3 54e8 	str.w	r5, [r3, #1256]	; 0x4e8
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001e26:	b9dd      	cbnz	r5, 8001e60 <xTaskIncrementTick+0x54>
			taskSWITCH_DELAYED_LISTS();
 8001e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	b153      	cbz	r3, 8001e44 <xTaskIncrementTick+0x38>
 8001e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e32:	b672      	cpsid	i
 8001e34:	f383 8811 	msr	BASEPRI, r3
 8001e38:	f3bf 8f6f 	isb	sy
 8001e3c:	f3bf 8f4f 	dsb	sy
 8001e40:	b662      	cpsie	i
 8001e42:	e7fe      	b.n	8001e42 <xTaskIncrementTick+0x36>
 8001e44:	4b37      	ldr	r3, [pc, #220]	; (8001f24 <xTaskIncrementTick+0x118>)
 8001e46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e48:	f8d3 14cc 	ldr.w	r1, [r3, #1228]	; 0x4cc
 8001e4c:	6299      	str	r1, [r3, #40]	; 0x28
 8001e4e:	f8c3 24cc 	str.w	r2, [r3, #1228]	; 0x4cc
 8001e52:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	; 0x4f4
 8001e56:	3201      	adds	r2, #1
 8001e58:	f8c3 24f4 	str.w	r2, [r3, #1268]	; 0x4f4
 8001e5c:	f7ff fd8e 	bl	800197c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001e60:	4b30      	ldr	r3, [pc, #192]	; (8001f24 <xTaskIncrementTick+0x118>)
 8001e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e64:	42ab      	cmp	r3, r5
 8001e66:	d940      	bls.n	8001eea <xTaskIncrementTick+0xde>
BaseType_t xSwitchRequired = pdFALSE;
 8001e68:	f04f 0800 	mov.w	r8, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001e6c:	4a2d      	ldr	r2, [pc, #180]	; (8001f24 <xTaskIncrementTick+0x118>)
 8001e6e:	f8d2 34d4 	ldr.w	r3, [r2, #1236]	; 0x4d4
 8001e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e74:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001e78:	0099      	lsls	r1, r3, #2
 8001e7a:	440a      	add	r2, r1
 8001e7c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d946      	bls.n	8001f10 <xTaskIncrementTick+0x104>
				xSwitchRequired = pdTRUE;
 8001e82:	f04f 0801 	mov.w	r8, #1
 8001e86:	e043      	b.n	8001f10 <xTaskIncrementTick+0x104>
							xSwitchRequired = pdTRUE;
 8001e88:	f04f 0801 	mov.w	r8, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e8c:	4b25      	ldr	r3, [pc, #148]	; (8001f24 <xTaskIncrementTick+0x118>)
 8001e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	b36b      	cbz	r3, 8001ef0 <xTaskIncrementTick+0xe4>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e94:	4b23      	ldr	r3, [pc, #140]	; (8001f24 <xTaskIncrementTick+0x118>)
 8001e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001e9c:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8001e9e:	429d      	cmp	r5, r3
 8001ea0:	d32b      	bcc.n	8001efa <xTaskIncrementTick+0xee>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001ea2:	1d27      	adds	r7, r4, #4
 8001ea4:	4638      	mov	r0, r7
 8001ea6:	f7ff f9d7 	bl	8001258 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001eaa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001eac:	b11b      	cbz	r3, 8001eb6 <xTaskIncrementTick+0xaa>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001eae:	f104 0018 	add.w	r0, r4, #24
 8001eb2:	f7ff f9d1 	bl	8001258 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001eb6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001eb8:	4a1a      	ldr	r2, [pc, #104]	; (8001f24 <xTaskIncrementTick+0x118>)
 8001eba:	f8d2 24e0 	ldr.w	r2, [r2, #1248]	; 0x4e0
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d902      	bls.n	8001ec8 <xTaskIncrementTick+0xbc>
 8001ec2:	4a18      	ldr	r2, [pc, #96]	; (8001f24 <xTaskIncrementTick+0x118>)
 8001ec4:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
 8001ec8:	4e16      	ldr	r6, [pc, #88]	; (8001f24 <xTaskIncrementTick+0x118>)
 8001eca:	f106 0030 	add.w	r0, r6, #48	; 0x30
 8001ece:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001ed2:	009a      	lsls	r2, r3, #2
 8001ed4:	4639      	mov	r1, r7
 8001ed6:	4410      	add	r0, r2
 8001ed8:	f7ff f99a 	bl	8001210 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001edc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001ede:	f8d6 34d4 	ldr.w	r3, [r6, #1236]	; 0x4d4
 8001ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d2cf      	bcs.n	8001e88 <xTaskIncrementTick+0x7c>
 8001ee8:	e7d0      	b.n	8001e8c <xTaskIncrementTick+0x80>
BaseType_t xSwitchRequired = pdFALSE;
 8001eea:	f04f 0800 	mov.w	r8, #0
 8001eee:	e7cd      	b.n	8001e8c <xTaskIncrementTick+0x80>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ef0:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <xTaskIncrementTick+0x118>)
 8001ef2:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef6:	62da      	str	r2, [r3, #44]	; 0x2c
					break;
 8001ef8:	e7b8      	b.n	8001e6c <xTaskIncrementTick+0x60>
						xNextTaskUnblockTime = xItemValue;
 8001efa:	4a0a      	ldr	r2, [pc, #40]	; (8001f24 <xTaskIncrementTick+0x118>)
 8001efc:	62d3      	str	r3, [r2, #44]	; 0x2c
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001efe:	e7b5      	b.n	8001e6c <xTaskIncrementTick+0x60>
		++uxPendedTicks;
 8001f00:	4a08      	ldr	r2, [pc, #32]	; (8001f24 <xTaskIncrementTick+0x118>)
 8001f02:	f8d2 34f8 	ldr.w	r3, [r2, #1272]	; 0x4f8
 8001f06:	3301      	adds	r3, #1
 8001f08:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
BaseType_t xSwitchRequired = pdFALSE;
 8001f0c:	f04f 0800 	mov.w	r8, #0
		if( xYieldPending != pdFALSE )
 8001f10:	4b04      	ldr	r3, [pc, #16]	; (8001f24 <xTaskIncrementTick+0x118>)
 8001f12:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001f16:	b10b      	cbz	r3, 8001f1c <xTaskIncrementTick+0x110>
			xSwitchRequired = pdTRUE;
 8001f18:	f04f 0801 	mov.w	r8, #1
}
 8001f1c:	4640      	mov	r0, r8
 8001f1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f22:	bf00      	nop
 8001f24:	20000aec 	.word	0x20000aec

08001f28 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8001f28:	4b3b      	ldr	r3, [pc, #236]	; (8002018 <xTaskResumeAll+0xf0>)
 8001f2a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8001f2e:	b953      	cbnz	r3, 8001f46 <xTaskResumeAll+0x1e>
 8001f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f34:	b672      	cpsid	i
 8001f36:	f383 8811 	msr	BASEPRI, r3
 8001f3a:	f3bf 8f6f 	isb	sy
 8001f3e:	f3bf 8f4f 	dsb	sy
 8001f42:	b662      	cpsie	i
 8001f44:	e7fe      	b.n	8001f44 <xTaskResumeAll+0x1c>
{
 8001f46:	b570      	push	{r4, r5, r6, lr}
	taskENTER_CRITICAL();
 8001f48:	f000 fcb4 	bl	80028b4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8001f4c:	4b32      	ldr	r3, [pc, #200]	; (8002018 <xTaskResumeAll+0xf0>)
 8001f4e:	f8d3 24ec 	ldr.w	r2, [r3, #1260]	; 0x4ec
 8001f52:	3a01      	subs	r2, #1
 8001f54:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001f58:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d156      	bne.n	800200e <xTaskResumeAll+0xe6>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001f60:	4b2d      	ldr	r3, [pc, #180]	; (8002018 <xTaskResumeAll+0xf0>)
 8001f62:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
 8001f66:	b90b      	cbnz	r3, 8001f6c <xTaskResumeAll+0x44>
BaseType_t xAlreadyYielded = pdFALSE;
 8001f68:	2400      	movs	r4, #0
 8001f6a:	e051      	b.n	8002010 <xTaskResumeAll+0xe8>
TCB_t *pxTCB = NULL;
 8001f6c:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001f6e:	4b2a      	ldr	r3, [pc, #168]	; (8002018 <xTaskResumeAll+0xf0>)
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	b32b      	cbz	r3, 8001fc0 <xTaskResumeAll+0x98>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f74:	4d28      	ldr	r5, [pc, #160]	; (8002018 <xTaskResumeAll+0xf0>)
 8001f76:	6a2b      	ldr	r3, [r5, #32]
 8001f78:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001f7a:	f104 0018 	add.w	r0, r4, #24
 8001f7e:	f7ff f96b 	bl	8001258 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001f82:	1d26      	adds	r6, r4, #4
 8001f84:	4630      	mov	r0, r6
 8001f86:	f7ff f967 	bl	8001258 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001f8a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f8c:	f8d5 24e0 	ldr.w	r2, [r5, #1248]	; 0x4e0
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d901      	bls.n	8001f98 <xTaskResumeAll+0x70>
 8001f94:	f8c5 34e0 	str.w	r3, [r5, #1248]	; 0x4e0
 8001f98:	4d1f      	ldr	r5, [pc, #124]	; (8002018 <xTaskResumeAll+0xf0>)
 8001f9a:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8001f9e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001fa2:	4631      	mov	r1, r6
 8001fa4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001fa8:	f7ff f932 	bl	8001210 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001fac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001fae:	f8d5 34d4 	ldr.w	r3, [r5, #1236]	; 0x4d4
 8001fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d3da      	bcc.n	8001f6e <xTaskResumeAll+0x46>
						xYieldPending = pdTRUE;
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f8c5 24fc 	str.w	r2, [r5, #1276]	; 0x4fc
 8001fbe:	e7d6      	b.n	8001f6e <xTaskResumeAll+0x46>
				if( pxTCB != NULL )
 8001fc0:	b10c      	cbz	r4, 8001fc6 <xTaskResumeAll+0x9e>
					prvResetNextTaskUnblockTime();
 8001fc2:	f7ff fcdb 	bl	800197c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001fc6:	4b14      	ldr	r3, [pc, #80]	; (8002018 <xTaskResumeAll+0xf0>)
 8001fc8:	f8d3 44f8 	ldr.w	r4, [r3, #1272]	; 0x4f8
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001fcc:	b98c      	cbnz	r4, 8001ff2 <xTaskResumeAll+0xca>
				if( xYieldPending != pdFALSE )
 8001fce:	4b12      	ldr	r3, [pc, #72]	; (8002018 <xTaskResumeAll+0xf0>)
 8001fd0:	f8d3 44fc 	ldr.w	r4, [r3, #1276]	; 0x4fc
 8001fd4:	b1e4      	cbz	r4, 8002010 <xTaskResumeAll+0xe8>
					taskYIELD_IF_USING_PREEMPTION();
 8001fd6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001fda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fde:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001fe2:	f3bf 8f4f 	dsb	sy
 8001fe6:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8001fea:	2401      	movs	r4, #1
 8001fec:	e010      	b.n	8002010 <xTaskResumeAll+0xe8>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001fee:	3c01      	subs	r4, #1
 8001ff0:	d008      	beq.n	8002004 <xTaskResumeAll+0xdc>
							if( xTaskIncrementTick() != pdFALSE )
 8001ff2:	f7ff ff0b 	bl	8001e0c <xTaskIncrementTick>
 8001ff6:	2800      	cmp	r0, #0
 8001ff8:	d0f9      	beq.n	8001fee <xTaskResumeAll+0xc6>
								xYieldPending = pdTRUE;
 8001ffa:	4b07      	ldr	r3, [pc, #28]	; (8002018 <xTaskResumeAll+0xf0>)
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
 8002002:	e7f4      	b.n	8001fee <xTaskResumeAll+0xc6>
						uxPendedTicks = 0;
 8002004:	4b04      	ldr	r3, [pc, #16]	; (8002018 <xTaskResumeAll+0xf0>)
 8002006:	2200      	movs	r2, #0
 8002008:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
 800200c:	e7df      	b.n	8001fce <xTaskResumeAll+0xa6>
BaseType_t xAlreadyYielded = pdFALSE;
 800200e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002010:	f000 fc76 	bl	8002900 <vPortExitCritical>
}
 8002014:	4620      	mov	r0, r4
 8002016:	bd70      	pop	{r4, r5, r6, pc}
 8002018:	20000aec 	.word	0x20000aec

0800201c <vTaskDelay>:
	{
 800201c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800201e:	b1c0      	cbz	r0, 8002052 <vTaskDelay+0x36>
 8002020:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8002022:	4b11      	ldr	r3, [pc, #68]	; (8002068 <vTaskDelay+0x4c>)
 8002024:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002028:	b153      	cbz	r3, 8002040 <vTaskDelay+0x24>
 800202a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800202e:	b672      	cpsid	i
 8002030:	f383 8811 	msr	BASEPRI, r3
 8002034:	f3bf 8f6f 	isb	sy
 8002038:	f3bf 8f4f 	dsb	sy
 800203c:	b662      	cpsie	i
 800203e:	e7fe      	b.n	800203e <vTaskDelay+0x22>
			vTaskSuspendAll();
 8002040:	f7ff fed4 	bl	8001dec <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002044:	2100      	movs	r1, #0
 8002046:	4620      	mov	r0, r4
 8002048:	f7ff fdd4 	bl	8001bf4 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800204c:	f7ff ff6c 	bl	8001f28 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8002050:	b948      	cbnz	r0, 8002066 <vTaskDelay+0x4a>
			portYIELD_WITHIN_API();
 8002052:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800205a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800205e:	f3bf 8f4f 	dsb	sy
 8002062:	f3bf 8f6f 	isb	sy
	}
 8002066:	bd10      	pop	{r4, pc}
 8002068:	20000aec 	.word	0x20000aec

0800206c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800206c:	4b22      	ldr	r3, [pc, #136]	; (80020f8 <vTaskSwitchContext+0x8c>)
 800206e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002072:	b123      	cbz	r3, 800207e <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 8002074:	4b20      	ldr	r3, [pc, #128]	; (80020f8 <vTaskSwitchContext+0x8c>)
 8002076:	2201      	movs	r2, #1
 8002078:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
 800207c:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800207e:	4b1e      	ldr	r3, [pc, #120]	; (80020f8 <vTaskSwitchContext+0x8c>)
 8002080:	2200      	movs	r2, #0
 8002082:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002086:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800208a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800208e:	0091      	lsls	r1, r2, #2
 8002090:	4a19      	ldr	r2, [pc, #100]	; (80020f8 <vTaskSwitchContext+0x8c>)
 8002092:	440a      	add	r2, r1
 8002094:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002096:	b96a      	cbnz	r2, 80020b4 <vTaskSwitchContext+0x48>
 8002098:	b10b      	cbz	r3, 800209e <vTaskSwitchContext+0x32>
 800209a:	3b01      	subs	r3, #1
 800209c:	e7f5      	b.n	800208a <vTaskSwitchContext+0x1e>
 800209e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020a2:	b672      	cpsid	i
 80020a4:	f383 8811 	msr	BASEPRI, r3
 80020a8:	f3bf 8f6f 	isb	sy
 80020ac:	f3bf 8f4f 	dsb	sy
 80020b0:	b662      	cpsie	i
 80020b2:	e7fe      	b.n	80020b2 <vTaskSwitchContext+0x46>
 80020b4:	4a10      	ldr	r2, [pc, #64]	; (80020f8 <vTaskSwitchContext+0x8c>)
 80020b6:	4411      	add	r1, r2
 80020b8:	6b48      	ldr	r0, [r1, #52]	; 0x34
 80020ba:	6840      	ldr	r0, [r0, #4]
 80020bc:	6348      	str	r0, [r1, #52]	; 0x34
 80020be:	3230      	adds	r2, #48	; 0x30
 80020c0:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 80020c4:	ea4f 018c 	mov.w	r1, ip, lsl #2
 80020c8:	3108      	adds	r1, #8
 80020ca:	440a      	add	r2, r1
 80020cc:	4290      	cmp	r0, r2
 80020ce:	d00b      	beq.n	80020e8 <vTaskSwitchContext+0x7c>
 80020d0:	4909      	ldr	r1, [pc, #36]	; (80020f8 <vTaskSwitchContext+0x8c>)
 80020d2:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 80020d6:	0082      	lsls	r2, r0, #2
 80020d8:	440a      	add	r2, r1
 80020da:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80020dc:	68d2      	ldr	r2, [r2, #12]
 80020de:	f8c1 24d4 	str.w	r2, [r1, #1236]	; 0x4d4
 80020e2:	f8c1 34e0 	str.w	r3, [r1, #1248]	; 0x4e0
}
 80020e6:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80020e8:	6840      	ldr	r0, [r0, #4]
 80020ea:	4662      	mov	r2, ip
 80020ec:	0091      	lsls	r1, r2, #2
 80020ee:	4a02      	ldr	r2, [pc, #8]	; (80020f8 <vTaskSwitchContext+0x8c>)
 80020f0:	440a      	add	r2, r1
 80020f2:	6350      	str	r0, [r2, #52]	; 0x34
 80020f4:	e7ec      	b.n	80020d0 <vTaskSwitchContext+0x64>
 80020f6:	bf00      	nop
 80020f8:	20000aec 	.word	0x20000aec

080020fc <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 80020fc:	b160      	cbz	r0, 8002118 <vTaskPlaceOnEventList+0x1c>
{
 80020fe:	b510      	push	{r4, lr}
 8002100:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002102:	4a0b      	ldr	r2, [pc, #44]	; (8002130 <vTaskPlaceOnEventList+0x34>)
 8002104:	f8d2 14d4 	ldr.w	r1, [r2, #1236]	; 0x4d4
 8002108:	3118      	adds	r1, #24
 800210a:	f7ff f88c 	bl	8001226 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800210e:	2101      	movs	r1, #1
 8002110:	4620      	mov	r0, r4
 8002112:	f7ff fd6f 	bl	8001bf4 <prvAddCurrentTaskToDelayedList>
}
 8002116:	bd10      	pop	{r4, pc}
 8002118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800211c:	b672      	cpsid	i
 800211e:	f383 8811 	msr	BASEPRI, r3
 8002122:	f3bf 8f6f 	isb	sy
 8002126:	f3bf 8f4f 	dsb	sy
 800212a:	b662      	cpsie	i
	configASSERT( pxEventList );
 800212c:	e7fe      	b.n	800212c <vTaskPlaceOnEventList+0x30>
 800212e:	bf00      	nop
 8002130:	20000aec 	.word	0x20000aec

08002134 <vTaskPlaceOnEventListRestricted>:
	{
 8002134:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8002136:	b178      	cbz	r0, 8002158 <vTaskPlaceOnEventListRestricted+0x24>
 8002138:	460d      	mov	r5, r1
 800213a:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800213c:	4a0c      	ldr	r2, [pc, #48]	; (8002170 <vTaskPlaceOnEventListRestricted+0x3c>)
 800213e:	f8d2 14d4 	ldr.w	r1, [r2, #1236]	; 0x4d4
 8002142:	3118      	adds	r1, #24
 8002144:	f7ff f864 	bl	8001210 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 8002148:	b10c      	cbz	r4, 800214e <vTaskPlaceOnEventListRestricted+0x1a>
			xTicksToWait = portMAX_DELAY;
 800214a:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800214e:	4621      	mov	r1, r4
 8002150:	4628      	mov	r0, r5
 8002152:	f7ff fd4f 	bl	8001bf4 <prvAddCurrentTaskToDelayedList>
	}
 8002156:	bd38      	pop	{r3, r4, r5, pc}
 8002158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800215c:	b672      	cpsid	i
 800215e:	f383 8811 	msr	BASEPRI, r3
 8002162:	f3bf 8f6f 	isb	sy
 8002166:	f3bf 8f4f 	dsb	sy
 800216a:	b662      	cpsie	i
		configASSERT( pxEventList );
 800216c:	e7fe      	b.n	800216c <vTaskPlaceOnEventListRestricted+0x38>
 800216e:	bf00      	nop
 8002170:	20000aec 	.word	0x20000aec

08002174 <xTaskRemoveFromEventList>:
{
 8002174:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002176:	68c3      	ldr	r3, [r0, #12]
 8002178:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800217a:	b34c      	cbz	r4, 80021d0 <xTaskRemoveFromEventList+0x5c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800217c:	f104 0518 	add.w	r5, r4, #24
 8002180:	4628      	mov	r0, r5
 8002182:	f7ff f869 	bl	8001258 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002186:	4b1b      	ldr	r3, [pc, #108]	; (80021f4 <xTaskRemoveFromEventList+0x80>)
 8002188:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800218c:	bb5b      	cbnz	r3, 80021e6 <xTaskRemoveFromEventList+0x72>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800218e:	1d25      	adds	r5, r4, #4
 8002190:	4628      	mov	r0, r5
 8002192:	f7ff f861 	bl	8001258 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002196:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002198:	4b16      	ldr	r3, [pc, #88]	; (80021f4 <xTaskRemoveFromEventList+0x80>)
 800219a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800219e:	4298      	cmp	r0, r3
 80021a0:	d902      	bls.n	80021a8 <xTaskRemoveFromEventList+0x34>
 80021a2:	4b14      	ldr	r3, [pc, #80]	; (80021f4 <xTaskRemoveFromEventList+0x80>)
 80021a4:	f8c3 04e0 	str.w	r0, [r3, #1248]	; 0x4e0
 80021a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80021ac:	4629      	mov	r1, r5
 80021ae:	4b12      	ldr	r3, [pc, #72]	; (80021f8 <xTaskRemoveFromEventList+0x84>)
 80021b0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80021b4:	f7ff f82c 	bl	8001210 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80021b8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80021ba:	4b0e      	ldr	r3, [pc, #56]	; (80021f4 <xTaskRemoveFromEventList+0x80>)
 80021bc:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 80021c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d914      	bls.n	80021f0 <xTaskRemoveFromEventList+0x7c>
		xYieldPending = pdTRUE;
 80021c6:	2001      	movs	r0, #1
 80021c8:	4b0a      	ldr	r3, [pc, #40]	; (80021f4 <xTaskRemoveFromEventList+0x80>)
 80021ca:	f8c3 04fc 	str.w	r0, [r3, #1276]	; 0x4fc
}
 80021ce:	bd38      	pop	{r3, r4, r5, pc}
 80021d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021d4:	b672      	cpsid	i
 80021d6:	f383 8811 	msr	BASEPRI, r3
 80021da:	f3bf 8f6f 	isb	sy
 80021de:	f3bf 8f4f 	dsb	sy
 80021e2:	b662      	cpsie	i
	configASSERT( pxUnblockedTCB );
 80021e4:	e7fe      	b.n	80021e4 <xTaskRemoveFromEventList+0x70>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80021e6:	4629      	mov	r1, r5
 80021e8:	4804      	ldr	r0, [pc, #16]	; (80021fc <xTaskRemoveFromEventList+0x88>)
 80021ea:	f7ff f811 	bl	8001210 <vListInsertEnd>
 80021ee:	e7e3      	b.n	80021b8 <xTaskRemoveFromEventList+0x44>
		xReturn = pdFALSE;
 80021f0:	2000      	movs	r0, #0
	return xReturn;
 80021f2:	e7ec      	b.n	80021ce <xTaskRemoveFromEventList+0x5a>
 80021f4:	20000aec 	.word	0x20000aec
 80021f8:	20000b1c 	.word	0x20000b1c
 80021fc:	20000b00 	.word	0x20000b00

08002200 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002200:	4b03      	ldr	r3, [pc, #12]	; (8002210 <vTaskInternalSetTimeOutState+0x10>)
 8002202:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	; 0x4f4
 8002206:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002208:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800220c:	6043      	str	r3, [r0, #4]
}
 800220e:	4770      	bx	lr
 8002210:	20000aec 	.word	0x20000aec

08002214 <xTaskCheckForTimeOut>:
{
 8002214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8002216:	b1d8      	cbz	r0, 8002250 <xTaskCheckForTimeOut+0x3c>
 8002218:	460c      	mov	r4, r1
 800221a:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 800221c:	b319      	cbz	r1, 8002266 <xTaskCheckForTimeOut+0x52>
	taskENTER_CRITICAL();
 800221e:	f000 fb49 	bl	80028b4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8002222:	4b1e      	ldr	r3, [pc, #120]	; (800229c <xTaskCheckForTimeOut+0x88>)
 8002224:	f8d3 14e8 	ldr.w	r1, [r3, #1256]	; 0x4e8
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002228:	686b      	ldr	r3, [r5, #4]
 800222a:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 800222c:	6822      	ldr	r2, [r4, #0]
 800222e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8002232:	d02b      	beq.n	800228c <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002234:	4e19      	ldr	r6, [pc, #100]	; (800229c <xTaskCheckForTimeOut+0x88>)
 8002236:	f8d6 64f4 	ldr.w	r6, [r6, #1268]	; 0x4f4
 800223a:	682f      	ldr	r7, [r5, #0]
 800223c:	42b7      	cmp	r7, r6
 800223e:	d001      	beq.n	8002244 <xTaskCheckForTimeOut+0x30>
 8002240:	428b      	cmp	r3, r1
 8002242:	d928      	bls.n	8002296 <xTaskCheckForTimeOut+0x82>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002244:	4282      	cmp	r2, r0
 8002246:	d819      	bhi.n	800227c <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait = 0;
 8002248:	2300      	movs	r3, #0
 800224a:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800224c:	2401      	movs	r4, #1
 800224e:	e01e      	b.n	800228e <xTaskCheckForTimeOut+0x7a>
 8002250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002254:	b672      	cpsid	i
 8002256:	f383 8811 	msr	BASEPRI, r3
 800225a:	f3bf 8f6f 	isb	sy
 800225e:	f3bf 8f4f 	dsb	sy
 8002262:	b662      	cpsie	i
	configASSERT( pxTimeOut );
 8002264:	e7fe      	b.n	8002264 <xTaskCheckForTimeOut+0x50>
 8002266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800226a:	b672      	cpsid	i
 800226c:	f383 8811 	msr	BASEPRI, r3
 8002270:	f3bf 8f6f 	isb	sy
 8002274:	f3bf 8f4f 	dsb	sy
 8002278:	b662      	cpsie	i
	configASSERT( pxTicksToWait );
 800227a:	e7fe      	b.n	800227a <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait -= xElapsedTime;
 800227c:	1a5b      	subs	r3, r3, r1
 800227e:	4413      	add	r3, r2
 8002280:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002282:	4628      	mov	r0, r5
 8002284:	f7ff ffbc 	bl	8002200 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002288:	2400      	movs	r4, #0
 800228a:	e000      	b.n	800228e <xTaskCheckForTimeOut+0x7a>
				xReturn = pdFALSE;
 800228c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800228e:	f000 fb37 	bl	8002900 <vPortExitCritical>
}
 8002292:	4620      	mov	r0, r4
 8002294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 8002296:	2401      	movs	r4, #1
 8002298:	e7f9      	b.n	800228e <xTaskCheckForTimeOut+0x7a>
 800229a:	bf00      	nop
 800229c:	20000aec 	.word	0x20000aec

080022a0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80022a0:	4b02      	ldr	r3, [pc, #8]	; (80022ac <vTaskMissedYield+0xc>)
 80022a2:	2201      	movs	r2, #1
 80022a4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
}
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	20000aec 	.word	0x20000aec

080022b0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80022b0:	4b06      	ldr	r3, [pc, #24]	; (80022cc <xTaskGetSchedulerState+0x1c>)
 80022b2:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 80022b6:	b13b      	cbz	r3, 80022c8 <xTaskGetSchedulerState+0x18>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80022b8:	4b04      	ldr	r3, [pc, #16]	; (80022cc <xTaskGetSchedulerState+0x1c>)
 80022ba:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80022be:	b10b      	cbz	r3, 80022c4 <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_SUSPENDED;
 80022c0:	2000      	movs	r0, #0
	}
 80022c2:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 80022c4:	2002      	movs	r0, #2
 80022c6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80022c8:	2001      	movs	r0, #1
 80022ca:	4770      	bx	lr
 80022cc:	20000aec 	.word	0x20000aec

080022d0 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80022d0:	2800      	cmp	r0, #0
 80022d2:	d042      	beq.n	800235a <xTaskPriorityDisinherit+0x8a>
	{
 80022d4:	b538      	push	{r3, r4, r5, lr}
 80022d6:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 80022d8:	4b22      	ldr	r3, [pc, #136]	; (8002364 <xTaskPriorityDisinherit+0x94>)
 80022da:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 80022de:	4283      	cmp	r3, r0
 80022e0:	d00a      	beq.n	80022f8 <xTaskPriorityDisinherit+0x28>
 80022e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022e6:	b672      	cpsid	i
 80022e8:	f383 8811 	msr	BASEPRI, r3
 80022ec:	f3bf 8f6f 	isb	sy
 80022f0:	f3bf 8f4f 	dsb	sy
 80022f4:	b662      	cpsie	i
 80022f6:	e7fe      	b.n	80022f6 <xTaskPriorityDisinherit+0x26>
			configASSERT( pxTCB->uxMutexesHeld );
 80022f8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80022fa:	b953      	cbnz	r3, 8002312 <xTaskPriorityDisinherit+0x42>
 80022fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002300:	b672      	cpsid	i
 8002302:	f383 8811 	msr	BASEPRI, r3
 8002306:	f3bf 8f6f 	isb	sy
 800230a:	f3bf 8f4f 	dsb	sy
 800230e:	b662      	cpsie	i
 8002310:	e7fe      	b.n	8002310 <xTaskPriorityDisinherit+0x40>
			( pxTCB->uxMutexesHeld )--;
 8002312:	3b01      	subs	r3, #1
 8002314:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002316:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002318:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800231a:	4291      	cmp	r1, r2
 800231c:	d01f      	beq.n	800235e <xTaskPriorityDisinherit+0x8e>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800231e:	b10b      	cbz	r3, 8002324 <xTaskPriorityDisinherit+0x54>
	BaseType_t xReturn = pdFALSE;
 8002320:	2000      	movs	r0, #0
	}
 8002322:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002324:	1d05      	adds	r5, r0, #4
 8002326:	4628      	mov	r0, r5
 8002328:	f7fe ff96 	bl	8001258 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800232c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800232e:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002330:	f1c0 0338 	rsb	r3, r0, #56	; 0x38
 8002334:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8002336:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <xTaskPriorityDisinherit+0x94>)
 8002338:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800233c:	4298      	cmp	r0, r3
 800233e:	d902      	bls.n	8002346 <xTaskPriorityDisinherit+0x76>
 8002340:	4b08      	ldr	r3, [pc, #32]	; (8002364 <xTaskPriorityDisinherit+0x94>)
 8002342:	f8c3 04e0 	str.w	r0, [r3, #1248]	; 0x4e0
 8002346:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800234a:	4629      	mov	r1, r5
 800234c:	4b06      	ldr	r3, [pc, #24]	; (8002368 <xTaskPriorityDisinherit+0x98>)
 800234e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002352:	f7fe ff5d 	bl	8001210 <vListInsertEnd>
					xReturn = pdTRUE;
 8002356:	2001      	movs	r0, #1
 8002358:	e7e3      	b.n	8002322 <xTaskPriorityDisinherit+0x52>
	BaseType_t xReturn = pdFALSE;
 800235a:	2000      	movs	r0, #0
	}
 800235c:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 800235e:	2000      	movs	r0, #0
 8002360:	e7df      	b.n	8002322 <xTaskPriorityDisinherit+0x52>
 8002362:	bf00      	nop
 8002364:	20000aec 	.word	0x20000aec
 8002368:	20000b1c 	.word	0x20000b1c

0800236c <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800236c:	4b06      	ldr	r3, [pc, #24]	; (8002388 <prvGetNextExpireTime+0x1c>)
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	6813      	ldr	r3, [r2, #0]
 8002372:	b92b      	cbnz	r3, 8002380 <prvGetNextExpireTime+0x14>
 8002374:	2301      	movs	r3, #1
 8002376:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002378:	b923      	cbnz	r3, 8002384 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800237a:	68d3      	ldr	r3, [r2, #12]
 800237c:	6818      	ldr	r0, [r3, #0]
 800237e:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002380:	2300      	movs	r3, #0
 8002382:	e7f8      	b.n	8002376 <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8002384:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 8002386:	4770      	bx	lr
 8002388:	20000fec 	.word	0x20000fec

0800238c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800238c:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800238e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002390:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002392:	4291      	cmp	r1, r2
 8002394:	d80c      	bhi.n	80023b0 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002396:	1ad2      	subs	r2, r2, r3
 8002398:	6983      	ldr	r3, [r0, #24]
 800239a:	429a      	cmp	r2, r3
 800239c:	d301      	bcc.n	80023a2 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800239e:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 80023a0:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80023a2:	1d01      	adds	r1, r0, #4
 80023a4:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <prvInsertTimerInActiveList+0x48>)
 80023a6:	6858      	ldr	r0, [r3, #4]
 80023a8:	f7fe ff3d 	bl	8001226 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80023ac:	2000      	movs	r0, #0
 80023ae:	e7f7      	b.n	80023a0 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80023b0:	429a      	cmp	r2, r3
 80023b2:	bf2c      	ite	cs
 80023b4:	2200      	movcs	r2, #0
 80023b6:	2201      	movcc	r2, #1
 80023b8:	4299      	cmp	r1, r3
 80023ba:	bf38      	it	cc
 80023bc:	2200      	movcc	r2, #0
 80023be:	b10a      	cbz	r2, 80023c4 <prvInsertTimerInActiveList+0x38>
			xProcessTimerNow = pdTRUE;
 80023c0:	2001      	movs	r0, #1
	return xProcessTimerNow;
 80023c2:	e7ed      	b.n	80023a0 <prvInsertTimerInActiveList+0x14>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80023c4:	1d01      	adds	r1, r0, #4
 80023c6:	4b03      	ldr	r3, [pc, #12]	; (80023d4 <prvInsertTimerInActiveList+0x48>)
 80023c8:	6818      	ldr	r0, [r3, #0]
 80023ca:	f7fe ff2c 	bl	8001226 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80023ce:	2000      	movs	r0, #0
 80023d0:	e7e6      	b.n	80023a0 <prvInsertTimerInActiveList+0x14>
 80023d2:	bf00      	nop
 80023d4:	20000fec 	.word	0x20000fec

080023d8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80023d8:	b570      	push	{r4, r5, r6, lr}
 80023da:	b082      	sub	sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80023dc:	f000 fa6a 	bl	80028b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80023e0:	4b12      	ldr	r3, [pc, #72]	; (800242c <prvCheckForValidListAndQueue+0x54>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	b11b      	cbz	r3, 80023ee <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80023e6:	f000 fa8b 	bl	8002900 <vPortExitCritical>
}
 80023ea:	b002      	add	sp, #8
 80023ec:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
 80023ee:	4c0f      	ldr	r4, [pc, #60]	; (800242c <prvCheckForValidListAndQueue+0x54>)
 80023f0:	f104 060c 	add.w	r6, r4, #12
 80023f4:	4630      	mov	r0, r6
 80023f6:	f7fe fefd 	bl	80011f4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80023fa:	f104 0520 	add.w	r5, r4, #32
 80023fe:	4628      	mov	r0, r5
 8002400:	f7fe fef8 	bl	80011f4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002404:	6026      	str	r6, [r4, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002406:	6065      	str	r5, [r4, #4]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8002408:	2300      	movs	r3, #0
 800240a:	9300      	str	r3, [sp, #0]
 800240c:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8002410:	f104 0284 	add.w	r2, r4, #132	; 0x84
 8002414:	2110      	movs	r1, #16
 8002416:	200a      	movs	r0, #10
 8002418:	f7ff f826 	bl	8001468 <xQueueGenericCreateStatic>
 800241c:	60a0      	str	r0, [r4, #8]
				if( xTimerQueue != NULL )
 800241e:	2800      	cmp	r0, #0
 8002420:	d0e1      	beq.n	80023e6 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002422:	4903      	ldr	r1, [pc, #12]	; (8002430 <prvCheckForValidListAndQueue+0x58>)
 8002424:	f7ff fa6c 	bl	8001900 <vQueueAddToRegistry>
 8002428:	e7dd      	b.n	80023e6 <prvCheckForValidListAndQueue+0xe>
 800242a:	bf00      	nop
 800242c:	20000fec 	.word	0x20000fec
 8002430:	08009f80 	.word	0x08009f80

08002434 <xTimerCreateTimerTask>:
{
 8002434:	b510      	push	{r4, lr}
 8002436:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8002438:	f7ff ffce 	bl	80023d8 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800243c:	4b14      	ldr	r3, [pc, #80]	; (8002490 <xTimerCreateTimerTask+0x5c>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	b1d3      	cbz	r3, 8002478 <xTimerCreateTimerTask+0x44>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8002442:	2400      	movs	r4, #0
 8002444:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8002446:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8002448:	aa07      	add	r2, sp, #28
 800244a:	a906      	add	r1, sp, #24
 800244c:	a805      	add	r0, sp, #20
 800244e:	f7fe fec1 	bl	80011d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8002452:	9b05      	ldr	r3, [sp, #20]
 8002454:	9302      	str	r3, [sp, #8]
 8002456:	9b06      	ldr	r3, [sp, #24]
 8002458:	9301      	str	r3, [sp, #4]
 800245a:	2302      	movs	r3, #2
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	4623      	mov	r3, r4
 8002460:	9a07      	ldr	r2, [sp, #28]
 8002462:	490c      	ldr	r1, [pc, #48]	; (8002494 <xTimerCreateTimerTask+0x60>)
 8002464:	480c      	ldr	r0, [pc, #48]	; (8002498 <xTimerCreateTimerTask+0x64>)
 8002466:	f7ff fbff 	bl	8001c68 <xTaskCreateStatic>
 800246a:	4b09      	ldr	r3, [pc, #36]	; (8002490 <xTimerCreateTimerTask+0x5c>)
 800246c:	f8c3 0124 	str.w	r0, [r3, #292]	; 0x124
			if( xTimerTaskHandle != NULL )
 8002470:	b110      	cbz	r0, 8002478 <xTimerCreateTimerTask+0x44>
}
 8002472:	2001      	movs	r0, #1
 8002474:	b008      	add	sp, #32
 8002476:	bd10      	pop	{r4, pc}
 8002478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800247c:	b672      	cpsid	i
 800247e:	f383 8811 	msr	BASEPRI, r3
 8002482:	f3bf 8f6f 	isb	sy
 8002486:	f3bf 8f4f 	dsb	sy
 800248a:	b662      	cpsie	i
	configASSERT( xReturn );
 800248c:	e7fe      	b.n	800248c <xTimerCreateTimerTask+0x58>
 800248e:	bf00      	nop
 8002490:	20000fec 	.word	0x20000fec
 8002494:	08009f88 	.word	0x08009f88
 8002498:	080027c5 	.word	0x080027c5

0800249c <xTimerGenericCommand>:
	configASSERT( xTimer );
 800249c:	b1b8      	cbz	r0, 80024ce <xTimerGenericCommand+0x32>
 800249e:	469c      	mov	ip, r3
 80024a0:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 80024a2:	4819      	ldr	r0, [pc, #100]	; (8002508 <xTimerGenericCommand+0x6c>)
 80024a4:	6880      	ldr	r0, [r0, #8]
 80024a6:	b368      	cbz	r0, 8002504 <xTimerGenericCommand+0x68>
{
 80024a8:	b500      	push	{lr}
 80024aa:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 80024ac:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80024ae:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80024b0:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80024b2:	2905      	cmp	r1, #5
 80024b4:	dc1e      	bgt.n	80024f4 <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80024b6:	f7ff fefb 	bl	80022b0 <xTaskGetSchedulerState>
 80024ba:	2802      	cmp	r0, #2
 80024bc:	d012      	beq.n	80024e4 <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80024be:	2300      	movs	r3, #0
 80024c0:	461a      	mov	r2, r3
 80024c2:	4669      	mov	r1, sp
 80024c4:	4810      	ldr	r0, [pc, #64]	; (8002508 <xTimerGenericCommand+0x6c>)
 80024c6:	6880      	ldr	r0, [r0, #8]
 80024c8:	f7ff f82b 	bl	8001522 <xQueueGenericSend>
 80024cc:	e017      	b.n	80024fe <xTimerGenericCommand+0x62>
 80024ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d2:	b672      	cpsid	i
 80024d4:	f383 8811 	msr	BASEPRI, r3
 80024d8:	f3bf 8f6f 	isb	sy
 80024dc:	f3bf 8f4f 	dsb	sy
 80024e0:	b662      	cpsie	i
	configASSERT( xTimer );
 80024e2:	e7fe      	b.n	80024e2 <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80024e4:	2300      	movs	r3, #0
 80024e6:	9a06      	ldr	r2, [sp, #24]
 80024e8:	4669      	mov	r1, sp
 80024ea:	4807      	ldr	r0, [pc, #28]	; (8002508 <xTimerGenericCommand+0x6c>)
 80024ec:	6880      	ldr	r0, [r0, #8]
 80024ee:	f7ff f818 	bl	8001522 <xQueueGenericSend>
 80024f2:	e004      	b.n	80024fe <xTimerGenericCommand+0x62>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80024f4:	2300      	movs	r3, #0
 80024f6:	4662      	mov	r2, ip
 80024f8:	4669      	mov	r1, sp
 80024fa:	f7ff f8de 	bl	80016ba <xQueueGenericSendFromISR>
}
 80024fe:	b005      	add	sp, #20
 8002500:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 8002504:	2000      	movs	r0, #0
}
 8002506:	4770      	bx	lr
 8002508:	20000fec 	.word	0x20000fec

0800250c <prvSwitchTimerLists>:
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800250c:	4b22      	ldr	r3, [pc, #136]	; (8002598 <prvSwitchTimerLists+0x8c>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	2a00      	cmp	r2, #0
 8002514:	d03b      	beq.n	800258e <prvSwitchTimerLists+0x82>
{
 8002516:	b570      	push	{r4, r5, r6, lr}
 8002518:	b082      	sub	sp, #8
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800251e:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002520:	1d25      	adds	r5, r4, #4
 8002522:	4628      	mov	r0, r5
 8002524:	f7fe fe98 	bl	8001258 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002528:	6a23      	ldr	r3, [r4, #32]
 800252a:	4620      	mov	r0, r4
 800252c:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800252e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8002532:	f013 0f04 	tst.w	r3, #4
 8002536:	d10a      	bne.n	800254e <prvSwitchTimerLists+0x42>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002538:	4b17      	ldr	r3, [pc, #92]	; (8002598 <prvSwitchTimerLists+0x8c>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	2a00      	cmp	r2, #0
 8002540:	d1eb      	bne.n	800251a <prvSwitchTimerLists+0xe>
	pxCurrentTimerList = pxOverflowTimerList;
 8002542:	4a15      	ldr	r2, [pc, #84]	; (8002598 <prvSwitchTimerLists+0x8c>)
 8002544:	6851      	ldr	r1, [r2, #4]
 8002546:	6011      	str	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8002548:	6053      	str	r3, [r2, #4]
}
 800254a:	b002      	add	sp, #8
 800254c:	bd70      	pop	{r4, r5, r6, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800254e:	69a3      	ldr	r3, [r4, #24]
 8002550:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8002552:	429e      	cmp	r6, r3
 8002554:	d207      	bcs.n	8002566 <prvSwitchTimerLists+0x5a>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002556:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002558:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800255a:	4629      	mov	r1, r5
 800255c:	4b0e      	ldr	r3, [pc, #56]	; (8002598 <prvSwitchTimerLists+0x8c>)
 800255e:	6818      	ldr	r0, [r3, #0]
 8002560:	f7fe fe61 	bl	8001226 <vListInsert>
 8002564:	e7e8      	b.n	8002538 <prvSwitchTimerLists+0x2c>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002566:	2100      	movs	r1, #0
 8002568:	9100      	str	r1, [sp, #0]
 800256a:	460b      	mov	r3, r1
 800256c:	4632      	mov	r2, r6
 800256e:	4620      	mov	r0, r4
 8002570:	f7ff ff94 	bl	800249c <xTimerGenericCommand>
				configASSERT( xResult );
 8002574:	2800      	cmp	r0, #0
 8002576:	d1df      	bne.n	8002538 <prvSwitchTimerLists+0x2c>
 8002578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800257c:	b672      	cpsid	i
 800257e:	f383 8811 	msr	BASEPRI, r3
 8002582:	f3bf 8f6f 	isb	sy
 8002586:	f3bf 8f4f 	dsb	sy
 800258a:	b662      	cpsie	i
 800258c:	e7fe      	b.n	800258c <prvSwitchTimerLists+0x80>
	pxCurrentTimerList = pxOverflowTimerList;
 800258e:	4a02      	ldr	r2, [pc, #8]	; (8002598 <prvSwitchTimerLists+0x8c>)
 8002590:	6851      	ldr	r1, [r2, #4]
 8002592:	6011      	str	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8002594:	6053      	str	r3, [r2, #4]
 8002596:	4770      	bx	lr
 8002598:	20000fec 	.word	0x20000fec

0800259c <prvSampleTimeNow>:
{
 800259c:	b538      	push	{r3, r4, r5, lr}
 800259e:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 80025a0:	f7ff fc2e 	bl	8001e00 <xTaskGetTickCount>
 80025a4:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 80025a6:	4b08      	ldr	r3, [pc, #32]	; (80025c8 <prvSampleTimeNow+0x2c>)
 80025a8:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80025ac:	4283      	cmp	r3, r0
 80025ae:	d806      	bhi.n	80025be <prvSampleTimeNow+0x22>
		*pxTimerListsWereSwitched = pdFALSE;
 80025b0:	2300      	movs	r3, #0
 80025b2:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 80025b4:	4b04      	ldr	r3, [pc, #16]	; (80025c8 <prvSampleTimeNow+0x2c>)
 80025b6:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
}
 80025ba:	4620      	mov	r0, r4
 80025bc:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 80025be:	f7ff ffa5 	bl	800250c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80025c2:	2301      	movs	r3, #1
 80025c4:	602b      	str	r3, [r5, #0]
 80025c6:	e7f5      	b.n	80025b4 <prvSampleTimeNow+0x18>
 80025c8:	20000fec 	.word	0x20000fec

080025cc <prvProcessExpiredTimer>:
{
 80025cc:	b570      	push	{r4, r5, r6, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	4606      	mov	r6, r0
 80025d2:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80025d4:	4918      	ldr	r1, [pc, #96]	; (8002638 <prvProcessExpiredTimer+0x6c>)
 80025d6:	6809      	ldr	r1, [r1, #0]
 80025d8:	68c9      	ldr	r1, [r1, #12]
 80025da:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80025dc:	1d20      	adds	r0, r4, #4
 80025de:	f7fe fe3b 	bl	8001258 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80025e2:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
 80025e6:	f01c 0f04 	tst.w	ip, #4
 80025ea:	d108      	bne.n	80025fe <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80025ec:	f02c 0c01 	bic.w	ip, ip, #1
 80025f0:	f884 c028 	strb.w	ip, [r4, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80025f4:	6a23      	ldr	r3, [r4, #32]
 80025f6:	4620      	mov	r0, r4
 80025f8:	4798      	blx	r3
}
 80025fa:	b002      	add	sp, #8
 80025fc:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80025fe:	69a1      	ldr	r1, [r4, #24]
 8002600:	4633      	mov	r3, r6
 8002602:	462a      	mov	r2, r5
 8002604:	4431      	add	r1, r6
 8002606:	4620      	mov	r0, r4
 8002608:	f7ff fec0 	bl	800238c <prvInsertTimerInActiveList>
 800260c:	2800      	cmp	r0, #0
 800260e:	d0f1      	beq.n	80025f4 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002610:	2100      	movs	r1, #0
 8002612:	9100      	str	r1, [sp, #0]
 8002614:	460b      	mov	r3, r1
 8002616:	4632      	mov	r2, r6
 8002618:	4620      	mov	r0, r4
 800261a:	f7ff ff3f 	bl	800249c <xTimerGenericCommand>
			configASSERT( xResult );
 800261e:	2800      	cmp	r0, #0
 8002620:	d1e8      	bne.n	80025f4 <prvProcessExpiredTimer+0x28>
 8002622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002626:	b672      	cpsid	i
 8002628:	f383 8811 	msr	BASEPRI, r3
 800262c:	f3bf 8f6f 	isb	sy
 8002630:	f3bf 8f4f 	dsb	sy
 8002634:	b662      	cpsie	i
 8002636:	e7fe      	b.n	8002636 <prvProcessExpiredTimer+0x6a>
 8002638:	20000fec 	.word	0x20000fec

0800263c <prvProcessTimerOrBlockTask>:
{
 800263c:	b570      	push	{r4, r5, r6, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	4606      	mov	r6, r0
 8002642:	460c      	mov	r4, r1
	vTaskSuspendAll();
 8002644:	f7ff fbd2 	bl	8001dec <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002648:	a801      	add	r0, sp, #4
 800264a:	f7ff ffa7 	bl	800259c <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800264e:	9b01      	ldr	r3, [sp, #4]
 8002650:	bb3b      	cbnz	r3, 80026a2 <prvProcessTimerOrBlockTask+0x66>
 8002652:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002654:	42b0      	cmp	r0, r6
 8002656:	bf28      	it	cs
 8002658:	2c00      	cmpcs	r4, #0
 800265a:	d019      	beq.n	8002690 <prvProcessTimerOrBlockTask+0x54>
				if( xListWasEmpty != pdFALSE )
 800265c:	b124      	cbz	r4, 8002668 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800265e:	4a13      	ldr	r2, [pc, #76]	; (80026ac <prvProcessTimerOrBlockTask+0x70>)
 8002660:	6852      	ldr	r2, [r2, #4]
 8002662:	6812      	ldr	r2, [r2, #0]
 8002664:	b9da      	cbnz	r2, 800269e <prvProcessTimerOrBlockTask+0x62>
 8002666:	2401      	movs	r4, #1
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002668:	4622      	mov	r2, r4
 800266a:	1b71      	subs	r1, r6, r5
 800266c:	4b0f      	ldr	r3, [pc, #60]	; (80026ac <prvProcessTimerOrBlockTask+0x70>)
 800266e:	6898      	ldr	r0, [r3, #8]
 8002670:	f7ff f95a 	bl	8001928 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8002674:	f7ff fc58 	bl	8001f28 <xTaskResumeAll>
 8002678:	b9a8      	cbnz	r0, 80026a6 <prvProcessTimerOrBlockTask+0x6a>
					portYIELD_WITHIN_API();
 800267a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800267e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002682:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002686:	f3bf 8f4f 	dsb	sy
 800268a:	f3bf 8f6f 	isb	sy
 800268e:	e00a      	b.n	80026a6 <prvProcessTimerOrBlockTask+0x6a>
				( void ) xTaskResumeAll();
 8002690:	f7ff fc4a 	bl	8001f28 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002694:	4629      	mov	r1, r5
 8002696:	4630      	mov	r0, r6
 8002698:	f7ff ff98 	bl	80025cc <prvProcessExpiredTimer>
 800269c:	e003      	b.n	80026a6 <prvProcessTimerOrBlockTask+0x6a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800269e:	461c      	mov	r4, r3
 80026a0:	e7e2      	b.n	8002668 <prvProcessTimerOrBlockTask+0x2c>
			( void ) xTaskResumeAll();
 80026a2:	f7ff fc41 	bl	8001f28 <xTaskResumeAll>
}
 80026a6:	b002      	add	sp, #8
 80026a8:	bd70      	pop	{r4, r5, r6, pc}
 80026aa:	bf00      	nop
 80026ac:	20000fec 	.word	0x20000fec

080026b0 <prvProcessReceivedCommands>:
{
 80026b0:	b510      	push	{r4, lr}
 80026b2:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80026b4:	e002      	b.n	80026bc <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80026b6:	9b04      	ldr	r3, [sp, #16]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	da0f      	bge.n	80026dc <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80026bc:	2200      	movs	r2, #0
 80026be:	a904      	add	r1, sp, #16
 80026c0:	4b3f      	ldr	r3, [pc, #252]	; (80027c0 <prvProcessReceivedCommands+0x110>)
 80026c2:	6898      	ldr	r0, [r3, #8]
 80026c4:	f7ff f867 	bl	8001796 <xQueueReceive>
 80026c8:	2800      	cmp	r0, #0
 80026ca:	d077      	beq.n	80027bc <prvProcessReceivedCommands+0x10c>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80026cc:	9b04      	ldr	r3, [sp, #16]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	daf1      	bge.n	80026b6 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80026d2:	9907      	ldr	r1, [sp, #28]
 80026d4:	9806      	ldr	r0, [sp, #24]
 80026d6:	9b05      	ldr	r3, [sp, #20]
 80026d8:	4798      	blx	r3
 80026da:	e7ec      	b.n	80026b6 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80026dc:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80026de:	6963      	ldr	r3, [r4, #20]
 80026e0:	b113      	cbz	r3, 80026e8 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80026e2:	1d20      	adds	r0, r4, #4
 80026e4:	f7fe fdb8 	bl	8001258 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80026e8:	a803      	add	r0, sp, #12
 80026ea:	f7ff ff57 	bl	800259c <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 80026ee:	9b04      	ldr	r3, [sp, #16]
 80026f0:	2b09      	cmp	r3, #9
 80026f2:	d8e3      	bhi.n	80026bc <prvProcessReceivedCommands+0xc>
 80026f4:	e8df f003 	tbb	[pc, r3]
 80026f8:	32050505 	.word	0x32050505
 80026fc:	05055439 	.word	0x05055439
 8002700:	3932      	.short	0x3932
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002702:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8002706:	f043 0301 	orr.w	r3, r3, #1
 800270a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800270e:	9b05      	ldr	r3, [sp, #20]
 8002710:	69a1      	ldr	r1, [r4, #24]
 8002712:	4602      	mov	r2, r0
 8002714:	4419      	add	r1, r3
 8002716:	4620      	mov	r0, r4
 8002718:	f7ff fe38 	bl	800238c <prvInsertTimerInActiveList>
 800271c:	2800      	cmp	r0, #0
 800271e:	d0cd      	beq.n	80026bc <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002720:	6a23      	ldr	r3, [r4, #32]
 8002722:	4620      	mov	r0, r4
 8002724:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002726:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800272a:	f013 0f04 	tst.w	r3, #4
 800272e:	d0c5      	beq.n	80026bc <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002730:	69a2      	ldr	r2, [r4, #24]
 8002732:	2100      	movs	r1, #0
 8002734:	9100      	str	r1, [sp, #0]
 8002736:	460b      	mov	r3, r1
 8002738:	9805      	ldr	r0, [sp, #20]
 800273a:	4402      	add	r2, r0
 800273c:	4620      	mov	r0, r4
 800273e:	f7ff fead 	bl	800249c <xTimerGenericCommand>
							configASSERT( xResult );
 8002742:	2800      	cmp	r0, #0
 8002744:	d1ba      	bne.n	80026bc <prvProcessReceivedCommands+0xc>
 8002746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800274a:	b672      	cpsid	i
 800274c:	f383 8811 	msr	BASEPRI, r3
 8002750:	f3bf 8f6f 	isb	sy
 8002754:	f3bf 8f4f 	dsb	sy
 8002758:	b662      	cpsie	i
 800275a:	e7fe      	b.n	800275a <prvProcessReceivedCommands+0xaa>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800275c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8002760:	f023 0301 	bic.w	r3, r3, #1
 8002764:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					break;
 8002768:	e7a8      	b.n	80026bc <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800276a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800276e:	f043 0301 	orr.w	r3, r3, #1
 8002772:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002776:	9905      	ldr	r1, [sp, #20]
 8002778:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800277a:	b131      	cbz	r1, 800278a <prvProcessReceivedCommands+0xda>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800277c:	4603      	mov	r3, r0
 800277e:	4602      	mov	r2, r0
 8002780:	4401      	add	r1, r0
 8002782:	4620      	mov	r0, r4
 8002784:	f7ff fe02 	bl	800238c <prvInsertTimerInActiveList>
					break;
 8002788:	e798      	b.n	80026bc <prvProcessReceivedCommands+0xc>
 800278a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800278e:	b672      	cpsid	i
 8002790:	f383 8811 	msr	BASEPRI, r3
 8002794:	f3bf 8f6f 	isb	sy
 8002798:	f3bf 8f4f 	dsb	sy
 800279c:	b662      	cpsie	i
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800279e:	e7fe      	b.n	800279e <prvProcessReceivedCommands+0xee>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80027a0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80027a4:	f013 0f02 	tst.w	r3, #2
 80027a8:	d004      	beq.n	80027b4 <prvProcessReceivedCommands+0x104>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80027aa:	f023 0301 	bic.w	r3, r3, #1
 80027ae:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 80027b2:	e783      	b.n	80026bc <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 80027b4:	4620      	mov	r0, r4
 80027b6:	f000 fa79 	bl	8002cac <vPortFree>
 80027ba:	e77f      	b.n	80026bc <prvProcessReceivedCommands+0xc>
}
 80027bc:	b008      	add	sp, #32
 80027be:	bd10      	pop	{r4, pc}
 80027c0:	20000fec 	.word	0x20000fec

080027c4 <prvTimerTask>:
{
 80027c4:	b500      	push	{lr}
 80027c6:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80027c8:	a801      	add	r0, sp, #4
 80027ca:	f7ff fdcf 	bl	800236c <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80027ce:	9901      	ldr	r1, [sp, #4]
 80027d0:	f7ff ff34 	bl	800263c <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 80027d4:	f7ff ff6c 	bl	80026b0 <prvProcessReceivedCommands>
	for( ;; )
 80027d8:	e7f6      	b.n	80027c8 <prvTimerTask+0x4>
	...

080027dc <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80027dc:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80027de:	2300      	movs	r3, #0
 80027e0:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80027e2:	4b0f      	ldr	r3, [pc, #60]	; (8002820 <prvTaskExitError+0x44>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ea:	d00a      	beq.n	8002802 <prvTaskExitError+0x26>
 80027ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027f0:	b672      	cpsid	i
 80027f2:	f383 8811 	msr	BASEPRI, r3
 80027f6:	f3bf 8f6f 	isb	sy
 80027fa:	f3bf 8f4f 	dsb	sy
 80027fe:	b662      	cpsie	i
 8002800:	e7fe      	b.n	8002800 <prvTaskExitError+0x24>
 8002802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002806:	b672      	cpsid	i
 8002808:	f383 8811 	msr	BASEPRI, r3
 800280c:	f3bf 8f6f 	isb	sy
 8002810:	f3bf 8f4f 	dsb	sy
 8002814:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002816:	9b01      	ldr	r3, [sp, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d0fc      	beq.n	8002816 <prvTaskExitError+0x3a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800281c:	b002      	add	sp, #8
 800281e:	4770      	bx	lr
 8002820:	20000014 	.word	0x20000014

08002824 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002824:	4808      	ldr	r0, [pc, #32]	; (8002848 <prvPortStartFirstTask+0x24>)
 8002826:	6800      	ldr	r0, [r0, #0]
 8002828:	6800      	ldr	r0, [r0, #0]
 800282a:	f380 8808 	msr	MSP, r0
 800282e:	f04f 0000 	mov.w	r0, #0
 8002832:	f380 8814 	msr	CONTROL, r0
 8002836:	b662      	cpsie	i
 8002838:	b661      	cpsie	f
 800283a:	f3bf 8f4f 	dsb	sy
 800283e:	f3bf 8f6f 	isb	sy
 8002842:	df00      	svc	0
 8002844:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002846:	0000      	.short	0x0000
 8002848:	e000ed08 	.word	0xe000ed08

0800284c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800284c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800285c <vPortEnableVFP+0x10>
 8002850:	6801      	ldr	r1, [r0, #0]
 8002852:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002856:	6001      	str	r1, [r0, #0]
 8002858:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800285a:	0000      	.short	0x0000
 800285c:	e000ed88 	.word	0xe000ed88

08002860 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002860:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002864:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002868:	f021 0101 	bic.w	r1, r1, #1
 800286c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002870:	4b05      	ldr	r3, [pc, #20]	; (8002888 <pxPortInitialiseStack+0x28>)
 8002872:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002876:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800287a:	f06f 0302 	mvn.w	r3, #2
 800287e:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8002882:	3844      	subs	r0, #68	; 0x44
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	080027dd 	.word	0x080027dd
 800288c:	00000000 	.word	0x00000000

08002890 <SVC_Handler>:
	__asm volatile (
 8002890:	4b07      	ldr	r3, [pc, #28]	; (80028b0 <pxCurrentTCBConst2>)
 8002892:	6819      	ldr	r1, [r3, #0]
 8002894:	6808      	ldr	r0, [r1, #0]
 8002896:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800289a:	f380 8809 	msr	PSP, r0
 800289e:	f3bf 8f6f 	isb	sy
 80028a2:	f04f 0000 	mov.w	r0, #0
 80028a6:	f380 8811 	msr	BASEPRI, r0
 80028aa:	4770      	bx	lr
 80028ac:	f3af 8000 	nop.w

080028b0 <pxCurrentTCBConst2>:
 80028b0:	20000fc0 	.word	0x20000fc0

080028b4 <vPortEnterCritical>:
 80028b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b8:	b672      	cpsid	i
 80028ba:	f383 8811 	msr	BASEPRI, r3
 80028be:	f3bf 8f6f 	isb	sy
 80028c2:	f3bf 8f4f 	dsb	sy
 80028c6:	b662      	cpsie	i
	uxCriticalNesting++;
 80028c8:	4a0c      	ldr	r2, [pc, #48]	; (80028fc <vPortEnterCritical+0x48>)
 80028ca:	6813      	ldr	r3, [r2, #0]
 80028cc:	3301      	adds	r3, #1
 80028ce:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d000      	beq.n	80028d6 <vPortEnterCritical+0x22>
}
 80028d4:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80028d6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80028da:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 80028de:	f013 0fff 	tst.w	r3, #255	; 0xff
 80028e2:	d0f7      	beq.n	80028d4 <vPortEnterCritical+0x20>
 80028e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e8:	b672      	cpsid	i
 80028ea:	f383 8811 	msr	BASEPRI, r3
 80028ee:	f3bf 8f6f 	isb	sy
 80028f2:	f3bf 8f4f 	dsb	sy
 80028f6:	b662      	cpsie	i
 80028f8:	e7fe      	b.n	80028f8 <vPortEnterCritical+0x44>
 80028fa:	bf00      	nop
 80028fc:	20000014 	.word	0x20000014

08002900 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8002900:	4b0a      	ldr	r3, [pc, #40]	; (800292c <vPortExitCritical+0x2c>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	b953      	cbnz	r3, 800291c <vPortExitCritical+0x1c>
 8002906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800290a:	b672      	cpsid	i
 800290c:	f383 8811 	msr	BASEPRI, r3
 8002910:	f3bf 8f6f 	isb	sy
 8002914:	f3bf 8f4f 	dsb	sy
 8002918:	b662      	cpsie	i
 800291a:	e7fe      	b.n	800291a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 800291c:	3b01      	subs	r3, #1
 800291e:	4a03      	ldr	r2, [pc, #12]	; (800292c <vPortExitCritical+0x2c>)
 8002920:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002922:	b90b      	cbnz	r3, 8002928 <vPortExitCritical+0x28>
	__asm volatile
 8002924:	f383 8811 	msr	BASEPRI, r3
}
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	20000014 	.word	0x20000014

08002930 <PendSV_Handler>:
	__asm volatile
 8002930:	f3ef 8009 	mrs	r0, PSP
 8002934:	f3bf 8f6f 	isb	sy
 8002938:	4b15      	ldr	r3, [pc, #84]	; (8002990 <pxCurrentTCBConst>)
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	f01e 0f10 	tst.w	lr, #16
 8002940:	bf08      	it	eq
 8002942:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002946:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800294a:	6010      	str	r0, [r2, #0]
 800294c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002950:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002954:	b672      	cpsid	i
 8002956:	f380 8811 	msr	BASEPRI, r0
 800295a:	f3bf 8f4f 	dsb	sy
 800295e:	f3bf 8f6f 	isb	sy
 8002962:	b662      	cpsie	i
 8002964:	f7ff fb82 	bl	800206c <vTaskSwitchContext>
 8002968:	f04f 0000 	mov.w	r0, #0
 800296c:	f380 8811 	msr	BASEPRI, r0
 8002970:	bc09      	pop	{r0, r3}
 8002972:	6819      	ldr	r1, [r3, #0]
 8002974:	6808      	ldr	r0, [r1, #0]
 8002976:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800297a:	f01e 0f10 	tst.w	lr, #16
 800297e:	bf08      	it	eq
 8002980:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002984:	f380 8809 	msr	PSP, r0
 8002988:	f3bf 8f6f 	isb	sy
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop

08002990 <pxCurrentTCBConst>:
 8002990:	20000fc0 	.word	0x20000fc0

08002994 <SysTick_Handler>:
{
 8002994:	b508      	push	{r3, lr}
	__asm volatile
 8002996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800299a:	b672      	cpsid	i
 800299c:	f383 8811 	msr	BASEPRI, r3
 80029a0:	f3bf 8f6f 	isb	sy
 80029a4:	f3bf 8f4f 	dsb	sy
 80029a8:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 80029aa:	f7ff fa2f 	bl	8001e0c <xTaskIncrementTick>
 80029ae:	b128      	cbz	r0, 80029bc <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80029b0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80029b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029b8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 80029bc:	2300      	movs	r3, #0
 80029be:	f383 8811 	msr	BASEPRI, r3
}
 80029c2:	bd08      	pop	{r3, pc}

080029c4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80029c4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80029c8:	2300      	movs	r3, #0
 80029ca:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80029cc:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80029ce:	4b05      	ldr	r3, [pc, #20]	; (80029e4 <vPortSetupTimerInterrupt+0x20>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4905      	ldr	r1, [pc, #20]	; (80029e8 <vPortSetupTimerInterrupt+0x24>)
 80029d4:	fba1 1303 	umull	r1, r3, r1, r3
 80029d8:	099b      	lsrs	r3, r3, #6
 80029da:	3b01      	subs	r3, #1
 80029dc:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80029de:	2307      	movs	r3, #7
 80029e0:	6113      	str	r3, [r2, #16]
}
 80029e2:	4770      	bx	lr
 80029e4:	20000018 	.word	0x20000018
 80029e8:	10624dd3 	.word	0x10624dd3

080029ec <xPortStartScheduler>:
{
 80029ec:	b530      	push	{r4, r5, lr}
 80029ee:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80029f0:	4b2f      	ldr	r3, [pc, #188]	; (8002ab0 <xPortStartScheduler+0xc4>)
 80029f2:	781a      	ldrb	r2, [r3, #0]
 80029f4:	b2d2      	uxtb	r2, r2
 80029f6:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80029f8:	22ff      	movs	r2, #255	; 0xff
 80029fa:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002a04:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002a08:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a0c:	4a29      	ldr	r2, [pc, #164]	; (8002ab4 <xPortStartScheduler+0xc8>)
 8002a0e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002a10:	2307      	movs	r3, #7
 8002a12:	6053      	str	r3, [r2, #4]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002a14:	e009      	b.n	8002a2a <xPortStartScheduler+0x3e>
			ulMaxPRIGROUPValue--;
 8002a16:	4a27      	ldr	r2, [pc, #156]	; (8002ab4 <xPortStartScheduler+0xc8>)
 8002a18:	6853      	ldr	r3, [r2, #4]
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	6053      	str	r3, [r2, #4]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002a1e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002a2a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002a2e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002a32:	d1f0      	bne.n	8002a16 <xPortStartScheduler+0x2a>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002a34:	4b1f      	ldr	r3, [pc, #124]	; (8002ab4 <xPortStartScheduler+0xc8>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	2b03      	cmp	r3, #3
 8002a3a:	d00a      	beq.n	8002a52 <xPortStartScheduler+0x66>
	__asm volatile
 8002a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a40:	b672      	cpsid	i
 8002a42:	f383 8811 	msr	BASEPRI, r3
 8002a46:	f3bf 8f6f 	isb	sy
 8002a4a:	f3bf 8f4f 	dsb	sy
 8002a4e:	b662      	cpsie	i
 8002a50:	e7fe      	b.n	8002a50 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002a52:	021b      	lsls	r3, r3, #8
 8002a54:	4a17      	ldr	r2, [pc, #92]	; (8002ab4 <xPortStartScheduler+0xc8>)
 8002a56:	6053      	str	r3, [r2, #4]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002a58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a5c:	6053      	str	r3, [r2, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002a5e:	9b01      	ldr	r3, [sp, #4]
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	4a13      	ldr	r2, [pc, #76]	; (8002ab0 <xPortStartScheduler+0xc4>)
 8002a64:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002a66:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 8002a6a:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8002a6e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a72:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002a76:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8002a7a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002a7e:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8002a82:	f7ff ff9f 	bl	80029c4 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8002a86:	2500      	movs	r5, #0
 8002a88:	4b0b      	ldr	r3, [pc, #44]	; (8002ab8 <xPortStartScheduler+0xcc>)
 8002a8a:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8002a8c:	f7ff fede 	bl	800284c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002a90:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8002a94:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002a98:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8002a9c:	f7ff fec2 	bl	8002824 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8002aa0:	f7ff fae4 	bl	800206c <vTaskSwitchContext>
	prvTaskExitError();
 8002aa4:	f7ff fe9a 	bl	80027dc <prvTaskExitError>
}
 8002aa8:	4628      	mov	r0, r5
 8002aaa:	b003      	add	sp, #12
 8002aac:	bd30      	pop	{r4, r5, pc}
 8002aae:	bf00      	nop
 8002ab0:	e000e400 	.word	0xe000e400
 8002ab4:	20001118 	.word	0x20001118
 8002ab8:	20000014 	.word	0x20000014

08002abc <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8002abc:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002ac0:	2b0f      	cmp	r3, #15
 8002ac2:	d911      	bls.n	8002ae8 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002ac4:	4a13      	ldr	r2, [pc, #76]	; (8002b14 <vPortValidateInterruptPriority+0x58>)
 8002ac6:	5c9b      	ldrb	r3, [r3, r2]
 8002ac8:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002aca:	4a13      	ldr	r2, [pc, #76]	; (8002b18 <vPortValidateInterruptPriority+0x5c>)
 8002acc:	7812      	ldrb	r2, [r2, #0]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d90a      	bls.n	8002ae8 <vPortValidateInterruptPriority+0x2c>
 8002ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad6:	b672      	cpsid	i
 8002ad8:	f383 8811 	msr	BASEPRI, r3
 8002adc:	f3bf 8f6f 	isb	sy
 8002ae0:	f3bf 8f4f 	dsb	sy
 8002ae4:	b662      	cpsie	i
 8002ae6:	e7fe      	b.n	8002ae6 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002ae8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002aec:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8002af0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002af4:	4a08      	ldr	r2, [pc, #32]	; (8002b18 <vPortValidateInterruptPriority+0x5c>)
 8002af6:	6852      	ldr	r2, [r2, #4]
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d90a      	bls.n	8002b12 <vPortValidateInterruptPriority+0x56>
 8002afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b00:	b672      	cpsid	i
 8002b02:	f383 8811 	msr	BASEPRI, r3
 8002b06:	f3bf 8f6f 	isb	sy
 8002b0a:	f3bf 8f4f 	dsb	sy
 8002b0e:	b662      	cpsie	i
 8002b10:	e7fe      	b.n	8002b10 <vPortValidateInterruptPriority+0x54>
	}
 8002b12:	4770      	bx	lr
 8002b14:	e000e3f0 	.word	0xe000e3f0
 8002b18:	20001118 	.word	0x20001118

08002b1c <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002b1c:	4a10      	ldr	r2, [pc, #64]	; (8002b60 <prvHeapInit+0x44>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002b1e:	f012 0f07 	tst.w	r2, #7
 8002b22:	d01a      	beq.n	8002b5a <prvHeapInit+0x3e>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002b24:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002b26:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002b2a:	f5c1 5370 	rsb	r3, r1, #15360	; 0x3c00
 8002b2e:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002b30:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002b32:	490c      	ldr	r1, [pc, #48]	; (8002b64 <prvHeapInit+0x48>)
 8002b34:	600a      	str	r2, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002b36:	2000      	movs	r0, #0
 8002b38:	6048      	str	r0, [r1, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002b3a:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8002b3c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002b3e:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8002b42:	608b      	str	r3, [r1, #8]
	pxEnd->xBlockSize = 0;
 8002b44:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002b46:	6018      	str	r0, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002b48:	1a98      	subs	r0, r3, r2
 8002b4a:	6050      	str	r0, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002b4c:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002b4e:	60c8      	str	r0, [r1, #12]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002b50:	6108      	str	r0, [r1, #16]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002b52:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002b56:	614b      	str	r3, [r1, #20]
}
 8002b58:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002b5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002b5e:	e7e8      	b.n	8002b32 <prvHeapInit+0x16>
 8002b60:	20001138 	.word	0x20001138
 8002b64:	20001120 	.word	0x20001120

08002b68 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002b68:	4b16      	ldr	r3, [pc, #88]	; (8002bc4 <prvInsertBlockIntoFreeList+0x5c>)
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4283      	cmp	r3, r0
 8002b70:	d3fb      	bcc.n	8002b6a <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002b72:	6851      	ldr	r1, [r2, #4]
 8002b74:	eb02 0c01 	add.w	ip, r2, r1
 8002b78:	4584      	cmp	ip, r0
 8002b7a:	d009      	beq.n	8002b90 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002b7c:	6841      	ldr	r1, [r0, #4]
 8002b7e:	eb00 0c01 	add.w	ip, r0, r1
 8002b82:	4563      	cmp	r3, ip
 8002b84:	d009      	beq.n	8002b9a <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002b86:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002b88:	4290      	cmp	r0, r2
 8002b8a:	d019      	beq.n	8002bc0 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002b8c:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 8002b8e:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002b90:	6840      	ldr	r0, [r0, #4]
 8002b92:	4401      	add	r1, r0
 8002b94:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8002b96:	4610      	mov	r0, r2
 8002b98:	e7f0      	b.n	8002b7c <prvInsertBlockIntoFreeList+0x14>
{
 8002b9a:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002b9c:	4c09      	ldr	r4, [pc, #36]	; (8002bc4 <prvInsertBlockIntoFreeList+0x5c>)
 8002b9e:	68a4      	ldr	r4, [r4, #8]
 8002ba0:	42a3      	cmp	r3, r4
 8002ba2:	d00b      	beq.n	8002bbc <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	4419      	add	r1, r3
 8002ba8:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002baa:	6813      	ldr	r3, [r2, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8002bb0:	4290      	cmp	r0, r2
 8002bb2:	d000      	beq.n	8002bb6 <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002bb4:	6010      	str	r0, [r2, #0]
	}
}
 8002bb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002bba:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002bbc:	6004      	str	r4, [r0, #0]
 8002bbe:	e7f7      	b.n	8002bb0 <prvInsertBlockIntoFreeList+0x48>
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	20001120 	.word	0x20001120

08002bc8 <pvPortMalloc>:
{
 8002bc8:	b570      	push	{r4, r5, r6, lr}
 8002bca:	4605      	mov	r5, r0
	vTaskSuspendAll();
 8002bcc:	f7ff f90e 	bl	8001dec <vTaskSuspendAll>
		if( pxEnd == NULL )
 8002bd0:	4b35      	ldr	r3, [pc, #212]	; (8002ca8 <pvPortMalloc+0xe0>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	b1a3      	cbz	r3, 8002c00 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002bd6:	4b34      	ldr	r3, [pc, #208]	; (8002ca8 <pvPortMalloc+0xe0>)
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	421d      	tst	r5, r3
 8002bdc:	d14b      	bne.n	8002c76 <pvPortMalloc+0xae>
			if( xWantedSize > 0 )
 8002bde:	b135      	cbz	r5, 8002bee <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 8002be0:	3508      	adds	r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002be2:	f015 0f07 	tst.w	r5, #7
 8002be6:	d002      	beq.n	8002bee <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002be8:	f025 0507 	bic.w	r5, r5, #7
 8002bec:	3508      	adds	r5, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002bee:	2d00      	cmp	r5, #0
 8002bf0:	d043      	beq.n	8002c7a <pvPortMalloc+0xb2>
 8002bf2:	4b2d      	ldr	r3, [pc, #180]	; (8002ca8 <pvPortMalloc+0xe0>)
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	42ab      	cmp	r3, r5
 8002bf8:	d350      	bcc.n	8002c9c <pvPortMalloc+0xd4>
				pxBlock = xStart.pxNextFreeBlock;
 8002bfa:	4a2b      	ldr	r2, [pc, #172]	; (8002ca8 <pvPortMalloc+0xe0>)
 8002bfc:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002bfe:	e004      	b.n	8002c0a <pvPortMalloc+0x42>
			prvHeapInit();
 8002c00:	f7ff ff8c 	bl	8002b1c <prvHeapInit>
 8002c04:	e7e7      	b.n	8002bd6 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 8002c06:	4622      	mov	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8002c08:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002c0a:	6863      	ldr	r3, [r4, #4]
 8002c0c:	42ab      	cmp	r3, r5
 8002c0e:	d202      	bcs.n	8002c16 <pvPortMalloc+0x4e>
 8002c10:	6823      	ldr	r3, [r4, #0]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1f7      	bne.n	8002c06 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 8002c16:	4b24      	ldr	r3, [pc, #144]	; (8002ca8 <pvPortMalloc+0xe0>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	42a3      	cmp	r3, r4
 8002c1c:	d040      	beq.n	8002ca0 <pvPortMalloc+0xd8>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002c1e:	6816      	ldr	r6, [r2, #0]
 8002c20:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002c22:	6823      	ldr	r3, [r4, #0]
 8002c24:	6013      	str	r3, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002c26:	6863      	ldr	r3, [r4, #4]
 8002c28:	1b5b      	subs	r3, r3, r5
 8002c2a:	2b10      	cmp	r3, #16
 8002c2c:	d912      	bls.n	8002c54 <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002c2e:	1960      	adds	r0, r4, r5
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002c30:	f010 0f07 	tst.w	r0, #7
 8002c34:	d00a      	beq.n	8002c4c <pvPortMalloc+0x84>
 8002c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c3a:	b672      	cpsid	i
 8002c3c:	f383 8811 	msr	BASEPRI, r3
 8002c40:	f3bf 8f6f 	isb	sy
 8002c44:	f3bf 8f4f 	dsb	sy
 8002c48:	b662      	cpsie	i
 8002c4a:	e7fe      	b.n	8002c4a <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002c4c:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002c4e:	6065      	str	r5, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002c50:	f7ff ff8a 	bl	8002b68 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002c54:	6861      	ldr	r1, [r4, #4]
 8002c56:	4a14      	ldr	r2, [pc, #80]	; (8002ca8 <pvPortMalloc+0xe0>)
 8002c58:	6913      	ldr	r3, [r2, #16]
 8002c5a:	1a5b      	subs	r3, r3, r1
 8002c5c:	6113      	str	r3, [r2, #16]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002c5e:	68d2      	ldr	r2, [r2, #12]
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d201      	bcs.n	8002c68 <pvPortMalloc+0xa0>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002c64:	4a10      	ldr	r2, [pc, #64]	; (8002ca8 <pvPortMalloc+0xe0>)
 8002c66:	60d3      	str	r3, [r2, #12]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002c68:	4b0f      	ldr	r3, [pc, #60]	; (8002ca8 <pvPortMalloc+0xe0>)
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	430b      	orrs	r3, r1
 8002c6e:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002c70:	2300      	movs	r3, #0
 8002c72:	6023      	str	r3, [r4, #0]
 8002c74:	e002      	b.n	8002c7c <pvPortMalloc+0xb4>
void *pvReturn = NULL;
 8002c76:	2600      	movs	r6, #0
 8002c78:	e000      	b.n	8002c7c <pvPortMalloc+0xb4>
 8002c7a:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 8002c7c:	f7ff f954 	bl	8001f28 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002c80:	f016 0f07 	tst.w	r6, #7
 8002c84:	d00e      	beq.n	8002ca4 <pvPortMalloc+0xdc>
 8002c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c8a:	b672      	cpsid	i
 8002c8c:	f383 8811 	msr	BASEPRI, r3
 8002c90:	f3bf 8f6f 	isb	sy
 8002c94:	f3bf 8f4f 	dsb	sy
 8002c98:	b662      	cpsie	i
 8002c9a:	e7fe      	b.n	8002c9a <pvPortMalloc+0xd2>
void *pvReturn = NULL;
 8002c9c:	2600      	movs	r6, #0
 8002c9e:	e7ed      	b.n	8002c7c <pvPortMalloc+0xb4>
 8002ca0:	2600      	movs	r6, #0
 8002ca2:	e7eb      	b.n	8002c7c <pvPortMalloc+0xb4>
}
 8002ca4:	4630      	mov	r0, r6
 8002ca6:	bd70      	pop	{r4, r5, r6, pc}
 8002ca8:	20001120 	.word	0x20001120

08002cac <vPortFree>:
	if( pv != NULL )
 8002cac:	2800      	cmp	r0, #0
 8002cae:	d034      	beq.n	8002d1a <vPortFree+0x6e>
{
 8002cb0:	b538      	push	{r3, r4, r5, lr}
 8002cb2:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8002cb4:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002cb8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8002cbc:	4a17      	ldr	r2, [pc, #92]	; (8002d1c <vPortFree+0x70>)
 8002cbe:	6952      	ldr	r2, [r2, #20]
 8002cc0:	4213      	tst	r3, r2
 8002cc2:	d10a      	bne.n	8002cda <vPortFree+0x2e>
 8002cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc8:	b672      	cpsid	i
 8002cca:	f383 8811 	msr	BASEPRI, r3
 8002cce:	f3bf 8f6f 	isb	sy
 8002cd2:	f3bf 8f4f 	dsb	sy
 8002cd6:	b662      	cpsie	i
 8002cd8:	e7fe      	b.n	8002cd8 <vPortFree+0x2c>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002cda:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8002cde:	b151      	cbz	r1, 8002cf6 <vPortFree+0x4a>
 8002ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce4:	b672      	cpsid	i
 8002ce6:	f383 8811 	msr	BASEPRI, r3
 8002cea:	f3bf 8f6f 	isb	sy
 8002cee:	f3bf 8f4f 	dsb	sy
 8002cf2:	b662      	cpsie	i
 8002cf4:	e7fe      	b.n	8002cf4 <vPortFree+0x48>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002cf6:	ea23 0302 	bic.w	r3, r3, r2
 8002cfa:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8002cfe:	f7ff f875 	bl	8001dec <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002d02:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8002d06:	4a05      	ldr	r2, [pc, #20]	; (8002d1c <vPortFree+0x70>)
 8002d08:	6913      	ldr	r3, [r2, #16]
 8002d0a:	440b      	add	r3, r1
 8002d0c:	6113      	str	r3, [r2, #16]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002d0e:	4628      	mov	r0, r5
 8002d10:	f7ff ff2a 	bl	8002b68 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8002d14:	f7ff f908 	bl	8001f28 <xTaskResumeAll>
}
 8002d18:	bd38      	pop	{r3, r4, r5, pc}
 8002d1a:	4770      	bx	lr
 8002d1c:	20001120 	.word	0x20001120

08002d20 <LCD_Thread>:
void UART_Thread(void *argument) {
	UART_init();
	while (1) {
	}
}
void LCD_Thread(void *argument){
 8002d20:	b500      	push	{lr}
 8002d22:	b083      	sub	sp, #12
	volatile uint8_t status = BSP_LCD_Init();
 8002d24:	f7fe f822 	bl	8000d6c <BSP_LCD_Init>
 8002d28:	f88d 0007 	strb.w	r0, [sp, #7]
	BSP_LCD_LayerDefaultInit(0,LCD_FB_START_ADDRESS);
 8002d2c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8002d30:	2000      	movs	r0, #0
 8002d32:	f7fd fe43 	bl	80009bc <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(0);
 8002d36:	2000      	movs	r0, #0
 8002d38:	f7fd fe80 	bl	8000a3c <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(LCD_COLOR_GRAY);
 8002d3c:	4804      	ldr	r0, [pc, #16]	; (8002d50 <LCD_Thread+0x30>)
 8002d3e:	f7fd fe8f 	bl	8000a60 <BSP_LCD_Clear>
	BSP_LCD_DisplayOn();
 8002d42:	f7fd fea9 	bl	8000a98 <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_RED);
 8002d46:	4803      	ldr	r0, [pc, #12]	; (8002d54 <LCD_Thread+0x34>)
 8002d48:	f7fd fe8a 	bl	8000a60 <BSP_LCD_Clear>

	while(1){
 8002d4c:	e7fe      	b.n	8002d4c <LCD_Thread+0x2c>
 8002d4e:	bf00      	nop
 8002d50:	ff808080 	.word	0xff808080
 8002d54:	ffff0000 	.word	0xffff0000

08002d58 <main>:
int main(void) {
 8002d58:	b508      	push	{r3, lr}
	Sys_Init();
 8002d5a:	f000 faad 	bl	80032b8 <Sys_Init>
	osKernelInitialize();
 8002d5e:	f7fe f95f 	bl	8001020 <osKernelInitialize>
	GyroThreadHandle = osThreadNew(Gyro_Thread, NULL, &Gyro_Thread_attributes);
 8002d62:	4d0c      	ldr	r5, [pc, #48]	; (8002d94 <main+0x3c>)
 8002d64:	462a      	mov	r2, r5
 8002d66:	2100      	movs	r1, #0
 8002d68:	480b      	ldr	r0, [pc, #44]	; (8002d98 <main+0x40>)
 8002d6a:	f7fe f99b 	bl	80010a4 <osThreadNew>
 8002d6e:	4c0b      	ldr	r4, [pc, #44]	; (8002d9c <main+0x44>)
 8002d70:	6020      	str	r0, [r4, #0]
	UART_ThreadHandle = osThreadNew(UART_Thread, NULL, &UART_Thread_attributes);
 8002d72:	f105 0224 	add.w	r2, r5, #36	; 0x24
 8002d76:	2100      	movs	r1, #0
 8002d78:	4809      	ldr	r0, [pc, #36]	; (8002da0 <main+0x48>)
 8002d7a:	f7fe f993 	bl	80010a4 <osThreadNew>
 8002d7e:	6060      	str	r0, [r4, #4]
	LCD_ThreadHandle = osThreadNew(LCD_Thread, NULL, &LCD_Thread_attributes );
 8002d80:	f105 0248 	add.w	r2, r5, #72	; 0x48
 8002d84:	2100      	movs	r1, #0
 8002d86:	4807      	ldr	r0, [pc, #28]	; (8002da4 <main+0x4c>)
 8002d88:	f7fe f98c 	bl	80010a4 <osThreadNew>
 8002d8c:	60a0      	str	r0, [r4, #8]
	osKernelStart();
 8002d8e:	f7fe f965 	bl	800105c <osKernelStart>
	while (1) {
 8002d92:	e7fe      	b.n	8002d92 <main+0x3a>
 8002d94:	08009edc 	.word	0x08009edc
 8002d98:	08002e55 	.word	0x08002e55
 8002d9c:	20004d38 	.word	0x20004d38
 8002da0:	08002f51 	.word	0x08002f51
 8002da4:	08002d21 	.word	0x08002d21

08002da8 <USART1_IRQHandler>:
void USART1_IRQHandler(void) {
 8002da8:	b508      	push	{r3, lr}
	HAL_UART_IRQHandler(&USB_UART);
 8002daa:	4802      	ldr	r0, [pc, #8]	; (8002db4 <USART1_IRQHandler+0xc>)
 8002dac:	f003 fbb6 	bl	800651c <HAL_UART_IRQHandler>
}
 8002db0:	bd08      	pop	{r3, pc}
 8002db2:	bf00      	nop
 8002db4:	20004e3c 	.word	0x20004e3c

08002db8 <I2C_init>:
void I2C_init() {
 8002db8:	b500      	push	{lr}
 8002dba:	b087      	sub	sp, #28
	hi2c1.Instance = I2C1;
 8002dbc:	481d      	ldr	r0, [pc, #116]	; (8002e34 <I2C_init+0x7c>)
 8002dbe:	4b1e      	ldr	r3, [pc, #120]	; (8002e38 <I2C_init+0x80>)
 8002dc0:	60c3      	str	r3, [r0, #12]
	hi2c1.Init.Timing = 0x00506682;
 8002dc2:	4b1e      	ldr	r3, [pc, #120]	; (8002e3c <I2C_init+0x84>)
 8002dc4:	6103      	str	r3, [r0, #16]
	hi2c1.Init.OwnAddress1 = 0;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	6143      	str	r3, [r0, #20]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002dca:	2201      	movs	r2, #1
 8002dcc:	6182      	str	r2, [r0, #24]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002dce:	61c3      	str	r3, [r0, #28]
	hi2c1.Init.OwnAddress2 = 0;
 8002dd0:	6203      	str	r3, [r0, #32]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002dd2:	6243      	str	r3, [r0, #36]	; 0x24
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002dd4:	6283      	str	r3, [r0, #40]	; 0x28
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002dd6:	62c3      	str	r3, [r0, #44]	; 0x2c
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002dd8:	300c      	adds	r0, #12
 8002dda:	f001 fdd3 	bl	8004984 <HAL_I2C_Init>
 8002dde:	b9e0      	cbnz	r0, 8002e1a <I2C_init+0x62>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002de0:	2100      	movs	r1, #0
 8002de2:	4817      	ldr	r0, [pc, #92]	; (8002e40 <I2C_init+0x88>)
 8002de4:	f001 ffda 	bl	8004d9c <HAL_I2CEx_ConfigAnalogFilter>
 8002de8:	b9d8      	cbnz	r0, 8002e22 <I2C_init+0x6a>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002dea:	2100      	movs	r1, #0
 8002dec:	4814      	ldr	r0, [pc, #80]	; (8002e40 <I2C_init+0x88>)
 8002dee:	f002 f803 	bl	8004df8 <HAL_I2CEx_ConfigDigitalFilter>
 8002df2:	b9d0      	cbnz	r0, 8002e2a <I2C_init+0x72>
	gpio_init.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8002df4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002df8:	9301      	str	r3, [sp, #4]
	gpio_init.Mode = GPIO_MODE_AF_OD;
 8002dfa:	2312      	movs	r3, #18
 8002dfc:	9302      	str	r3, [sp, #8]
	gpio_init.Pull = GPIO_PULLUP;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	9303      	str	r3, [sp, #12]
	gpio_init.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e02:	2303      	movs	r3, #3
 8002e04:	9304      	str	r3, [sp, #16]
	gpio_init.Alternate = GPIO_AF4_I2C1;
 8002e06:	2304      	movs	r3, #4
 8002e08:	9305      	str	r3, [sp, #20]
	HAL_GPIO_Init(GPIOB, &gpio_init);
 8002e0a:	eb0d 0103 	add.w	r1, sp, r3
 8002e0e:	480d      	ldr	r0, [pc, #52]	; (8002e44 <I2C_init+0x8c>)
 8002e10:	f001 fafa 	bl	8004408 <HAL_GPIO_Init>
}
 8002e14:	b007      	add	sp, #28
 8002e16:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("I2C init failed\n\r");
 8002e1a:	480b      	ldr	r0, [pc, #44]	; (8002e48 <I2C_init+0x90>)
 8002e1c:	f004 f9c0 	bl	80071a0 <iprintf>
 8002e20:	e7de      	b.n	8002de0 <I2C_init+0x28>
		printf("I2C analog filter init failed\n\r");
 8002e22:	480a      	ldr	r0, [pc, #40]	; (8002e4c <I2C_init+0x94>)
 8002e24:	f004 f9bc 	bl	80071a0 <iprintf>
 8002e28:	e7df      	b.n	8002dea <I2C_init+0x32>
		printf("I2C digital filter init failed\n\r");
 8002e2a:	4809      	ldr	r0, [pc, #36]	; (8002e50 <I2C_init+0x98>)
 8002e2c:	f004 f9b8 	bl	80071a0 <iprintf>
 8002e30:	e7e0      	b.n	8002df4 <I2C_init+0x3c>
 8002e32:	bf00      	nop
 8002e34:	20004d38 	.word	0x20004d38
 8002e38:	40005400 	.word	0x40005400
 8002e3c:	00506682 	.word	0x00506682
 8002e40:	20004d44 	.word	0x20004d44
 8002e44:	40020400 	.word	0x40020400
 8002e48:	08009f90 	.word	0x08009f90
 8002e4c:	08009fa4 	.word	0x08009fa4
 8002e50:	08009fc4 	.word	0x08009fc4

08002e54 <Gyro_Thread>:
void Gyro_Thread(void *argument) {
 8002e54:	b570      	push	{r4, r5, r6, lr}
 8002e56:	b09e      	sub	sp, #120	; 0x78
	I2C_init();
 8002e58:	f7ff ffae 	bl	8002db8 <I2C_init>
	volatile uint8_t init_status = MPU6050_Init(&hi2c1);
 8002e5c:	4829      	ldr	r0, [pc, #164]	; (8002f04 <Gyro_Thread+0xb0>)
 8002e5e:	f000 fa47 	bl	80032f0 <MPU6050_Init>
 8002e62:	f88d 0077 	strb.w	r0, [sp, #119]	; 0x77
		osDelay(100);
 8002e66:	2064      	movs	r0, #100	; 0x64
 8002e68:	f7fe f988 	bl	800117c <osDelay>
		MPU6050_Read_Accel(&hi2c1, &mpu6050);
 8002e6c:	4c26      	ldr	r4, [pc, #152]	; (8002f08 <Gyro_Thread+0xb4>)
 8002e6e:	f104 0660 	add.w	r6, r4, #96	; 0x60
 8002e72:	f104 050c 	add.w	r5, r4, #12
 8002e76:	4631      	mov	r1, r6
 8002e78:	4628      	mov	r0, r5
 8002e7a:	f000 fa89 	bl	8003390 <MPU6050_Read_Accel>
		MPU6050_Read_Gyro(&hi2c1, &mpu6050);
 8002e7e:	4631      	mov	r1, r6
 8002e80:	4628      	mov	r0, r5
 8002e82:	f000 fad1 	bl	8003428 <MPU6050_Read_Gyro>
		int16_t acc_x = (int16_t) mpu6050.Ax;
 8002e86:	ed94 7b1a 	vldr	d7, [r4, #104]	; 0x68
 8002e8a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
		int16_t acc_y = (int16_t) mpu6050.Ay;
 8002e8e:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 8002e92:	eebd 6bc7 	vcvt.s32.f64	s12, d7
		int16_t acc_z = (int16_t) mpu6050.Az;
 8002e96:	ed94 7b1e 	vldr	d7, [r4, #120]	; 0x78
 8002e9a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8002e9e:	ee17 3a10 	vmov	r3, s14
 8002ea2:	b21b      	sxth	r3, r3
		int16_t gyro_x = (int16_t) mpu6050.Gx; //Kalman_getAngle(&kalman, mpu6050.Gx, mpu6050.Ax, );
 8002ea4:	ed94 7b22 	vldr	d7, [r4, #136]	; 0x88
 8002ea8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8002eac:	ee17 2a10 	vmov	r2, s14
 8002eb0:	b212      	sxth	r2, r2
		int16_t gyro_y = (int16_t) mpu6050.Gy;
 8002eb2:	ed94 7b24 	vldr	d7, [r4, #144]	; 0x90
 8002eb6:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8002eba:	ee17 1a10 	vmov	r1, s14
 8002ebe:	b209      	sxth	r1, r1
		int16_t gyro_z = (int16_t) mpu6050.Gz;
 8002ec0:	ed94 7b26 	vldr	d7, [r4, #152]	; 0x98
 8002ec4:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8002ec8:	ee17 0a10 	vmov	r0, s14
 8002ecc:	b200      	sxth	r0, r0
		sprintf(message,"\033[0m\033[44;33m\033[2J\033[;H"
 8002ece:	9003      	str	r0, [sp, #12]
 8002ed0:	9102      	str	r1, [sp, #8]
 8002ed2:	9201      	str	r2, [sp, #4]
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	ee16 3a10 	vmov	r3, s12
 8002eda:	b21b      	sxth	r3, r3
 8002edc:	ee16 2a90 	vmov	r2, s13
 8002ee0:	b212      	sxth	r2, r2
 8002ee2:	490a      	ldr	r1, [pc, #40]	; (8002f0c <Gyro_Thread+0xb8>)
 8002ee4:	a804      	add	r0, sp, #16
 8002ee6:	f004 fa23 	bl	8007330 <siprintf>
		HAL_UART_Transmit_IT(&USB_UART, message,strlen(message));
 8002eea:	a804      	add	r0, sp, #16
 8002eec:	f7fd f9a8 	bl	8000240 <strlen>
 8002ef0:	b282      	uxth	r2, r0
 8002ef2:	a904      	add	r1, sp, #16
 8002ef4:	4806      	ldr	r0, [pc, #24]	; (8002f10 <Gyro_Thread+0xbc>)
 8002ef6:	f003 fabf 	bl	8006478 <HAL_UART_Transmit_IT>
		osDelay(100);
 8002efa:	2064      	movs	r0, #100	; 0x64
 8002efc:	f7fe f93e 	bl	800117c <osDelay>
	while(1) {
 8002f00:	e7b1      	b.n	8002e66 <Gyro_Thread+0x12>
 8002f02:	bf00      	nop
 8002f04:	20004d44 	.word	0x20004d44
 8002f08:	20004d38 	.word	0x20004d38
 8002f0c:	08009fe8 	.word	0x08009fe8
 8002f10:	20004e3c 	.word	0x20004e3c

08002f14 <UART_init>:
void UART_init() {
 8002f14:	b510      	push	{r4, lr}
	USB_UART_ptr->Instance = USART1;
 8002f16:	480c      	ldr	r0, [pc, #48]	; (8002f48 <UART_init+0x34>)
 8002f18:	4b0c      	ldr	r3, [pc, #48]	; (8002f4c <UART_init+0x38>)
 8002f1a:	6003      	str	r3, [r0, #0]
	USB_UART_ptr->Init.BaudRate = 115200;
 8002f1c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002f20:	6043      	str	r3, [r0, #4]
	USB_UART_ptr->Init.WordLength = UART_WORDLENGTH_8B;
 8002f22:	2400      	movs	r4, #0
 8002f24:	6084      	str	r4, [r0, #8]
	USB_UART_ptr->Init.StopBits = UART_STOPBITS_1;
 8002f26:	60c4      	str	r4, [r0, #12]
	USB_UART_ptr->Init.Parity = UART_PARITY_NONE;
 8002f28:	6104      	str	r4, [r0, #16]
	USB_UART_ptr->Init.Mode = UART_MODE_TX_RX;
 8002f2a:	230c      	movs	r3, #12
 8002f2c:	6143      	str	r3, [r0, #20]
	USB_UART_ptr->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f2e:	6184      	str	r4, [r0, #24]
	HAL_UART_Init(&USB_UART);
 8002f30:	f003 ff92 	bl	8006e58 <HAL_UART_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002f34:	4622      	mov	r2, r4
 8002f36:	2105      	movs	r1, #5
 8002f38:	2025      	movs	r0, #37	; 0x25
 8002f3a:	f000 fc03 	bl	8003744 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002f3e:	2025      	movs	r0, #37	; 0x25
 8002f40:	f000 fc36 	bl	80037b0 <HAL_NVIC_EnableIRQ>
}
 8002f44:	bd10      	pop	{r4, pc}
 8002f46:	bf00      	nop
 8002f48:	20004e3c 	.word	0x20004e3c
 8002f4c:	40011000 	.word	0x40011000

08002f50 <UART_Thread>:
void UART_Thread(void *argument) {
 8002f50:	b508      	push	{r3, lr}
	UART_init();
 8002f52:	f7ff ffdf 	bl	8002f14 <UART_init>
	while (1) {
 8002f56:	e7fe      	b.n	8002f56 <UART_Thread+0x6>

08002f58 <HAL_Delay>:

	}
}

void HAL_Delay( uint32_t ulDelayMs )
{
 8002f58:	b508      	push	{r3, lr}
    vTaskDelay(ulDelayMs);
 8002f5a:	f7ff f85f 	bl	800201c <vTaskDelay>
}
 8002f5e:	bd08      	pop	{r3, pc}

08002f60 <SystemClock_Config>:
  *            Main regulator output voltage  = Scale1 mode
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
void SystemClock_Config(void) {
 8002f60:	b500      	push	{lr}
 8002f62:	b093      	sub	sp, #76	; 0x4c
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002f64:	2301      	movs	r3, #1
 8002f66:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002f68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f6c:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f6e:	2302      	movs	r3, #2
 8002f70:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f72:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002f76:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002f78:	2219      	movs	r2, #25
 8002f7a:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 432;
 8002f7c:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8002f80:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f82:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002f84:	2309      	movs	r3, #9
 8002f86:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = 7;
 8002f88:	2307      	movs	r3, #7
 8002f8a:	930c      	str	r3, [sp, #48]	; 0x30

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8002f8c:	4668      	mov	r0, sp
 8002f8e:	f002 f953 	bl	8005238 <HAL_RCC_OscConfig>
  if(ret != HAL_OK) {
 8002f92:	b100      	cbz	r0, 8002f96 <SystemClock_Config+0x36>
    while(1) { ; }
 8002f94:	e7fe      	b.n	8002f94 <SystemClock_Config+0x34>
  }

  /* Activate the OverDrive to reach the 216 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
 8002f96:	f002 f911 	bl	80051bc <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK) {
 8002f9a:	b100      	cbz	r0, 8002f9e <SystemClock_Config+0x3e>
    while(1) { ; }
 8002f9c:	e7fe      	b.n	8002f9c <SystemClock_Config+0x3c>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8002f9e:	230f      	movs	r3, #15
 8002fa0:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002faa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002fae:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002fb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fb4:	9311      	str	r3, [sp, #68]	; 0x44

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 8002fb6:	2107      	movs	r1, #7
 8002fb8:	a80d      	add	r0, sp, #52	; 0x34
 8002fba:	f002 fbb3 	bl	8005724 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK) {
 8002fbe:	b100      	cbz	r0, 8002fc2 <SystemClock_Config+0x62>
    while(1) { ; }
 8002fc0:	e7fe      	b.n	8002fc0 <SystemClock_Config+0x60>
  }
}
 8002fc2:	b013      	add	sp, #76	; 0x4c
 8002fc4:	f85d fb04 	ldr.w	pc, [sp], #4

08002fc8 <CPU_CACHE_Enable>:

// Enables CPU Instruction and Data Caches
void CPU_CACHE_Enable(void) {
 8002fc8:	b410      	push	{r4}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002fca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002fce:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8002fd2:	4b1c      	ldr	r3, [pc, #112]	; (8003044 <CPU_CACHE_Enable+0x7c>)
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002fda:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002fde:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002fe2:	695a      	ldr	r2, [r3, #20]
 8002fe4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002fe8:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002fea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002fee:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8002ff2:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002ff6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8002ffa:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002ffe:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8003002:	e000      	b.n	8003006 <CPU_CACHE_Enable+0x3e>
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
    } while(sets-- != 0U);
 8003004:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003006:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800300a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800300e:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8003012:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8003016:	490b      	ldr	r1, [pc, #44]	; (8003044 <CPU_CACHE_Enable+0x7c>)
 8003018:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 800301c:	4613      	mov	r3, r2
 800301e:	3a01      	subs	r2, #1
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1f2      	bne.n	800300a <CPU_CACHE_Enable+0x42>
    } while(sets-- != 0U);
 8003024:	1e43      	subs	r3, r0, #1
 8003026:	2800      	cmp	r0, #0
 8003028:	d1ec      	bne.n	8003004 <CPU_CACHE_Enable+0x3c>
 800302a:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800302e:	694b      	ldr	r3, [r1, #20]
 8003030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003034:	614b      	str	r3, [r1, #20]
 8003036:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800303a:	f3bf 8f6f 	isb	sy
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 800303e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003042:	4770      	bx	lr
 8003044:	e000ed00 	.word	0xe000ed00

08003048 <Clock_Inits>:
	initUart(&USB_UART, 115200, USART1);
	setbuf(stdout, NULL);
}

// Initializes clocks for various peripherals. Some might need to be added!
void Clock_Inits(void) {
 8003048:	b0a2      	sub	sp, #136	; 0x88
	// Clock all GPIO ports and Timers.
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800304a:	4b9a      	ldr	r3, [pc, #616]	; (80032b4 <Clock_Inits+0x26c>)
 800304c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800304e:	f042 0201 	orr.w	r2, r2, #1
 8003052:	631a      	str	r2, [r3, #48]	; 0x30
 8003054:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003056:	f002 0201 	and.w	r2, r2, #1
 800305a:	9200      	str	r2, [sp, #0]
 800305c:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800305e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003060:	f042 0202 	orr.w	r2, r2, #2
 8003064:	631a      	str	r2, [r3, #48]	; 0x30
 8003066:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003068:	f002 0202 	and.w	r2, r2, #2
 800306c:	9201      	str	r2, [sp, #4]
 800306e:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003070:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003072:	f042 0204 	orr.w	r2, r2, #4
 8003076:	631a      	str	r2, [r3, #48]	; 0x30
 8003078:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800307a:	f002 0204 	and.w	r2, r2, #4
 800307e:	9202      	str	r2, [sp, #8]
 8003080:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8003082:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003084:	f042 0208 	orr.w	r2, r2, #8
 8003088:	631a      	str	r2, [r3, #48]	; 0x30
 800308a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800308c:	f002 0208 	and.w	r2, r2, #8
 8003090:	9203      	str	r2, [sp, #12]
 8003092:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8003094:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003096:	f042 0210 	orr.w	r2, r2, #16
 800309a:	631a      	str	r2, [r3, #48]	; 0x30
 800309c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800309e:	f002 0210 	and.w	r2, r2, #16
 80030a2:	9204      	str	r2, [sp, #16]
 80030a4:	9a04      	ldr	r2, [sp, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80030a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030a8:	f042 0220 	orr.w	r2, r2, #32
 80030ac:	631a      	str	r2, [r3, #48]	; 0x30
 80030ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030b0:	f002 0220 	and.w	r2, r2, #32
 80030b4:	9205      	str	r2, [sp, #20]
 80030b6:	9a05      	ldr	r2, [sp, #20]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80030b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030be:	631a      	str	r2, [r3, #48]	; 0x30
 80030c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030c2:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80030c6:	9206      	str	r2, [sp, #24]
 80030c8:	9a06      	ldr	r2, [sp, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80030ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030d0:	631a      	str	r2, [r3, #48]	; 0x30
 80030d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030d4:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80030d8:	9207      	str	r2, [sp, #28]
 80030da:	9a07      	ldr	r2, [sp, #28]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 80030dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030e2:	631a      	str	r2, [r3, #48]	; 0x30
 80030e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030e6:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80030ea:	9208      	str	r2, [sp, #32]
 80030ec:	9a08      	ldr	r2, [sp, #32]
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 80030ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030f4:	631a      	str	r2, [r3, #48]	; 0x30
 80030f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030f8:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80030fc:	9209      	str	r2, [sp, #36]	; 0x24
 80030fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
	__HAL_RCC_GPIOK_CLK_ENABLE();
 8003100:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003102:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003106:	631a      	str	r2, [r3, #48]	; 0x30
 8003108:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800310a:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800310e:	920a      	str	r2, [sp, #40]	; 0x28
 8003110:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8003112:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003114:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003118:	645a      	str	r2, [r3, #68]	; 0x44
 800311a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800311c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003120:	920b      	str	r2, [sp, #44]	; 0x2c
 8003122:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	__HAL_RCC_TIM1_CLK_ENABLE();
 8003124:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003126:	f042 0201 	orr.w	r2, r2, #1
 800312a:	645a      	str	r2, [r3, #68]	; 0x44
 800312c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800312e:	f002 0201 	and.w	r2, r2, #1
 8003132:	920c      	str	r2, [sp, #48]	; 0x30
 8003134:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	__HAL_RCC_TIM2_CLK_ENABLE();
 8003136:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003138:	f042 0201 	orr.w	r2, r2, #1
 800313c:	641a      	str	r2, [r3, #64]	; 0x40
 800313e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003140:	f002 0201 	and.w	r2, r2, #1
 8003144:	920d      	str	r2, [sp, #52]	; 0x34
 8003146:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	__HAL_RCC_TIM3_CLK_ENABLE();
 8003148:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800314a:	f042 0202 	orr.w	r2, r2, #2
 800314e:	641a      	str	r2, [r3, #64]	; 0x40
 8003150:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003152:	f002 0202 	and.w	r2, r2, #2
 8003156:	920e      	str	r2, [sp, #56]	; 0x38
 8003158:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	__HAL_RCC_TIM4_CLK_ENABLE();
 800315a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800315c:	f042 0204 	orr.w	r2, r2, #4
 8003160:	641a      	str	r2, [r3, #64]	; 0x40
 8003162:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003164:	f002 0204 	and.w	r2, r2, #4
 8003168:	920f      	str	r2, [sp, #60]	; 0x3c
 800316a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
	__HAL_RCC_TIM5_CLK_ENABLE();
 800316c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800316e:	f042 0208 	orr.w	r2, r2, #8
 8003172:	641a      	str	r2, [r3, #64]	; 0x40
 8003174:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003176:	f002 0208 	and.w	r2, r2, #8
 800317a:	9210      	str	r2, [sp, #64]	; 0x40
 800317c:	9a10      	ldr	r2, [sp, #64]	; 0x40
	__HAL_RCC_TIM6_CLK_ENABLE();
 800317e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003180:	f042 0210 	orr.w	r2, r2, #16
 8003184:	641a      	str	r2, [r3, #64]	; 0x40
 8003186:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003188:	f002 0210 	and.w	r2, r2, #16
 800318c:	9211      	str	r2, [sp, #68]	; 0x44
 800318e:	9a11      	ldr	r2, [sp, #68]	; 0x44
	__HAL_RCC_TIM7_CLK_ENABLE();
 8003190:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003192:	f042 0220 	orr.w	r2, r2, #32
 8003196:	641a      	str	r2, [r3, #64]	; 0x40
 8003198:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800319a:	f002 0220 	and.w	r2, r2, #32
 800319e:	9212      	str	r2, [sp, #72]	; 0x48
 80031a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
	__HAL_RCC_TIM8_CLK_ENABLE();
 80031a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031a4:	f042 0202 	orr.w	r2, r2, #2
 80031a8:	645a      	str	r2, [r3, #68]	; 0x44
 80031aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031ac:	f002 0202 	and.w	r2, r2, #2
 80031b0:	9213      	str	r2, [sp, #76]	; 0x4c
 80031b2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
	__HAL_RCC_TIM9_CLK_ENABLE();
 80031b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031b6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80031ba:	645a      	str	r2, [r3, #68]	; 0x44
 80031bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031be:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 80031c2:	9214      	str	r2, [sp, #80]	; 0x50
 80031c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
	__HAL_RCC_TIM10_CLK_ENABLE();
 80031c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031c8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80031cc:	645a      	str	r2, [r3, #68]	; 0x44
 80031ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031d0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80031d4:	9215      	str	r2, [sp, #84]	; 0x54
 80031d6:	9a15      	ldr	r2, [sp, #84]	; 0x54
	__HAL_RCC_TIM11_CLK_ENABLE();
 80031d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031da:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80031de:	645a      	str	r2, [r3, #68]	; 0x44
 80031e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031e2:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80031e6:	9216      	str	r2, [sp, #88]	; 0x58
 80031e8:	9a16      	ldr	r2, [sp, #88]	; 0x58
	__HAL_RCC_TIM12_CLK_ENABLE();
 80031ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031f0:	641a      	str	r2, [r3, #64]	; 0x40
 80031f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031f4:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80031f8:	9217      	str	r2, [sp, #92]	; 0x5c
 80031fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
	__HAL_RCC_TIM13_CLK_ENABLE();
 80031fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003202:	641a      	str	r2, [r3, #64]	; 0x40
 8003204:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003206:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800320a:	9218      	str	r2, [sp, #96]	; 0x60
 800320c:	9a18      	ldr	r2, [sp, #96]	; 0x60
	__HAL_RCC_TIM14_CLK_ENABLE();
 800320e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003210:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003214:	641a      	str	r2, [r3, #64]	; 0x40
 8003216:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003218:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800321c:	9219      	str	r2, [sp, #100]	; 0x64
 800321e:	9a19      	ldr	r2, [sp, #100]	; 0x64

	// Enable SPI2 clock
	__HAL_RCC_SPI2_CLK_ENABLE();
 8003220:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003222:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003226:	641a      	str	r2, [r3, #64]	; 0x40
 8003228:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800322a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800322e:	921a      	str	r2, [sp, #104]	; 0x68
 8003230:	9a1a      	ldr	r2, [sp, #104]	; 0x68

	// ADC and DAC
	__HAL_RCC_DAC_CLK_ENABLE();
 8003232:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003234:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003238:	641a      	str	r2, [r3, #64]	; 0x40
 800323a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800323c:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8003240:	921b      	str	r2, [sp, #108]	; 0x6c
 8003242:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
	__HAL_RCC_ADC1_CLK_ENABLE();
 8003244:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003246:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800324a:	645a      	str	r2, [r3, #68]	; 0x44
 800324c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800324e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8003252:	921c      	str	r2, [sp, #112]	; 0x70
 8003254:	9a1c      	ldr	r2, [sp, #112]	; 0x70
	__HAL_RCC_ADC2_CLK_ENABLE();
 8003256:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003258:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800325c:	645a      	str	r2, [r3, #68]	; 0x44
 800325e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003260:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003264:	921d      	str	r2, [sp, #116]	; 0x74
 8003266:	9a1d      	ldr	r2, [sp, #116]	; 0x74
	__HAL_RCC_ADC3_CLK_ENABLE();
 8003268:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800326a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800326e:	645a      	str	r2, [r3, #68]	; 0x44
 8003270:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003272:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8003276:	921e      	str	r2, [sp, #120]	; 0x78
 8003278:	9a1e      	ldr	r2, [sp, #120]	; 0x78

	// DMA Clocks
	__HAL_RCC_DMA1_CLK_ENABLE();
 800327a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800327c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003280:	631a      	str	r2, [r3, #48]	; 0x30
 8003282:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003284:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003288:	921f      	str	r2, [sp, #124]	; 0x7c
 800328a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
	__HAL_RCC_DMA2_CLK_ENABLE();
 800328c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800328e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003292:	631a      	str	r2, [r3, #48]	; 0x30
 8003294:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003296:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800329a:	9220      	str	r2, [sp, #128]	; 0x80
 800329c:	9a20      	ldr	r2, [sp, #128]	; 0x80

	// I2C Clock
	__HAL_RCC_I2C1_CLK_ENABLE();
 800329e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032a0:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80032a4:	641a      	str	r2, [r3, #64]	; 0x40
 80032a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032ac:	9321      	str	r3, [sp, #132]	; 0x84
 80032ae:	9b21      	ldr	r3, [sp, #132]	; 0x84

}
 80032b0:	b022      	add	sp, #136	; 0x88
 80032b2:	4770      	bx	lr
 80032b4:	40023800 	.word	0x40023800

080032b8 <Sys_Init>:
void Sys_Init(void) {
 80032b8:	b508      	push	{r3, lr}
	CPU_CACHE_Enable();		// Enable CPU Caching
 80032ba:	f7ff fe85 	bl	8002fc8 <CPU_CACHE_Enable>
	HAL_Init();				// Initialize HAL
 80032be:	f000 fa13 	bl	80036e8 <HAL_Init>
	SystemClock_Config(); 	// Configure the system clock to 216 MHz
 80032c2:	f7ff fe4d 	bl	8002f60 <SystemClock_Config>
	Clock_Inits();
 80032c6:	f7ff febf 	bl	8003048 <Clock_Inits>
	initUart(&USB_UART, 115200, USART1);
 80032ca:	4a06      	ldr	r2, [pc, #24]	; (80032e4 <Sys_Init+0x2c>)
 80032cc:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80032d0:	4805      	ldr	r0, [pc, #20]	; (80032e8 <Sys_Init+0x30>)
 80032d2:	f000 f9a9 	bl	8003628 <initUart>
	setbuf(stdout, NULL);
 80032d6:	4b05      	ldr	r3, [pc, #20]	; (80032ec <Sys_Init+0x34>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2100      	movs	r1, #0
 80032dc:	6898      	ldr	r0, [r3, #8]
 80032de:	f003 ff71 	bl	80071c4 <setbuf>
}
 80032e2:	bd08      	pop	{r3, pc}
 80032e4:	40011000 	.word	0x40011000
 80032e8:	20004e3c 	.word	0x20004e3c
 80032ec:	2000007c 	.word	0x2000007c

080032f0 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 80032f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032f4:	b086      	sub	sp, #24
 80032f6:	4605      	mov	r5, r0
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80032f8:	2364      	movs	r3, #100	; 0x64
 80032fa:	9302      	str	r3, [sp, #8]
 80032fc:	2301      	movs	r3, #1
 80032fe:	9301      	str	r3, [sp, #4]
 8003300:	f10d 0217 	add.w	r2, sp, #23
 8003304:	9200      	str	r2, [sp, #0]
 8003306:	2275      	movs	r2, #117	; 0x75
 8003308:	21d0      	movs	r1, #208	; 0xd0
 800330a:	f001 fc6f 	bl	8004bec <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 800330e:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8003312:	2b68      	cmp	r3, #104	; 0x68
 8003314:	d003      	beq.n	800331e <MPU6050_Init+0x2e>
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
        return 0;
    }
    return 1;
 8003316:	2001      	movs	r0, #1
}
 8003318:	b006      	add	sp, #24
 800331a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        Data = 0;
 800331e:	2400      	movs	r4, #0
 8003320:	f88d 4016 	strb.w	r4, [sp, #22]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8003324:	f04f 0864 	mov.w	r8, #100	; 0x64
 8003328:	f8cd 8008 	str.w	r8, [sp, #8]
 800332c:	2601      	movs	r6, #1
 800332e:	9601      	str	r6, [sp, #4]
 8003330:	f10d 0716 	add.w	r7, sp, #22
 8003334:	9700      	str	r7, [sp, #0]
 8003336:	4633      	mov	r3, r6
 8003338:	226b      	movs	r2, #107	; 0x6b
 800333a:	21d0      	movs	r1, #208	; 0xd0
 800333c:	4628      	mov	r0, r5
 800333e:	f001 fb7f 	bl	8004a40 <HAL_I2C_Mem_Write>
        Data = 0x07;
 8003342:	2307      	movs	r3, #7
 8003344:	f88d 3016 	strb.w	r3, [sp, #22]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8003348:	f8cd 8008 	str.w	r8, [sp, #8]
 800334c:	9601      	str	r6, [sp, #4]
 800334e:	9700      	str	r7, [sp, #0]
 8003350:	4633      	mov	r3, r6
 8003352:	2219      	movs	r2, #25
 8003354:	21d0      	movs	r1, #208	; 0xd0
 8003356:	4628      	mov	r0, r5
 8003358:	f001 fb72 	bl	8004a40 <HAL_I2C_Mem_Write>
        Data = 0x00;
 800335c:	f88d 4016 	strb.w	r4, [sp, #22]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8003360:	f8cd 8008 	str.w	r8, [sp, #8]
 8003364:	9601      	str	r6, [sp, #4]
 8003366:	9700      	str	r7, [sp, #0]
 8003368:	4633      	mov	r3, r6
 800336a:	221c      	movs	r2, #28
 800336c:	21d0      	movs	r1, #208	; 0xd0
 800336e:	4628      	mov	r0, r5
 8003370:	f001 fb66 	bl	8004a40 <HAL_I2C_Mem_Write>
        Data = 0x00;
 8003374:	f88d 4016 	strb.w	r4, [sp, #22]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8003378:	f8cd 8008 	str.w	r8, [sp, #8]
 800337c:	9601      	str	r6, [sp, #4]
 800337e:	9700      	str	r7, [sp, #0]
 8003380:	4633      	mov	r3, r6
 8003382:	221b      	movs	r2, #27
 8003384:	21d0      	movs	r1, #208	; 0xd0
 8003386:	4628      	mov	r0, r5
 8003388:	f001 fb5a 	bl	8004a40 <HAL_I2C_Mem_Write>
        return 0;
 800338c:	4620      	mov	r0, r4
 800338e:	e7c3      	b.n	8003318 <MPU6050_Init+0x28>

08003390 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8003390:	b510      	push	{r4, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	460c      	mov	r4, r1
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 8003396:	2364      	movs	r3, #100	; 0x64
 8003398:	9302      	str	r3, [sp, #8]
 800339a:	2306      	movs	r3, #6
 800339c:	9301      	str	r3, [sp, #4]
 800339e:	ab04      	add	r3, sp, #16
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	2301      	movs	r3, #1
 80033a4:	223b      	movs	r2, #59	; 0x3b
 80033a6:	21d0      	movs	r1, #208	; 0xd0
 80033a8:	f001 fc20 	bl	8004bec <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 80033ac:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80033b0:	f89d 2011 	ldrb.w	r2, [sp, #17]
 80033b4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80033b8:	b212      	sxth	r2, r2
 80033ba:	8022      	strh	r2, [r4, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80033bc:	f89d 1012 	ldrb.w	r1, [sp, #18]
 80033c0:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80033c4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80033c8:	b21b      	sxth	r3, r3
 80033ca:	8063      	strh	r3, [r4, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 80033cc:	f89d 0014 	ldrb.w	r0, [sp, #20]
 80033d0:	f89d 1015 	ldrb.w	r1, [sp, #21]
 80033d4:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 80033d8:	b209      	sxth	r1, r1
 80033da:	80a1      	strh	r1, [r4, #4]
    /*** convert the RAW values into acceleration in 'g'
         we have to divide according to the Full scale value set in FS_SEL
         I have configured FS_SEL = 0. So I am dividing by 16384.0
         for more details check ACCEL_CONFIG Register              ****/

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80033dc:	ee07 2a90 	vmov	s15, r2
 80033e0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80033e4:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8003418 <MPU6050_Read_Accel+0x88>
 80033e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80033ec:	ed84 7b02 	vstr	d7, [r4, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80033f0:	ee07 3a90 	vmov	s15, r3
 80033f4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80033f8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80033fc:	ed84 7b04 	vstr	d7, [r4, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8003400:	ee07 1a90 	vmov	s15, r1
 8003404:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003408:	ed9f 5b05 	vldr	d5, [pc, #20]	; 8003420 <MPU6050_Read_Accel+0x90>
 800340c:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8003410:	ed84 6b06 	vstr	d6, [r4, #24]
}
 8003414:	b006      	add	sp, #24
 8003416:	bd10      	pop	{r4, pc}
 8003418:	00000000 	.word	0x00000000
 800341c:	3f100000 	.word	0x3f100000
 8003420:	00000000 	.word	0x00000000
 8003424:	40cc2900 	.word	0x40cc2900

08003428 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8003428:	b510      	push	{r4, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	460c      	mov	r4, r1
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from GYRO_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 800342e:	2364      	movs	r3, #100	; 0x64
 8003430:	9302      	str	r3, [sp, #8]
 8003432:	2306      	movs	r3, #6
 8003434:	9301      	str	r3, [sp, #4]
 8003436:	ab04      	add	r3, sp, #16
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	2301      	movs	r3, #1
 800343c:	2243      	movs	r2, #67	; 0x43
 800343e:	21d0      	movs	r1, #208	; 0xd0
 8003440:	f001 fbd4 	bl	8004bec <HAL_I2C_Mem_Read>

    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8003444:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8003448:	f89d 1011 	ldrb.w	r1, [sp, #17]
 800344c:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 8003450:	b209      	sxth	r1, r1
 8003452:	8421      	strh	r1, [r4, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8003454:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8003458:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800345c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003460:	b212      	sxth	r2, r2
 8003462:	8462      	strh	r2, [r4, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8003464:	f89d 0014 	ldrb.w	r0, [sp, #20]
 8003468:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800346c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003470:	b21b      	sxth	r3, r3
 8003472:	84a3      	strh	r3, [r4, #36]	; 0x24
    /*** convert the RAW values into dps (�/s)
         we have to divide according to the Full scale value set in FS_SEL
         I have configured FS_SEL = 0. So I am dividing by 131.0
         for more details check GYRO_CONFIG Register              ****/

    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8003474:	ee07 1a90 	vmov	s15, r1
 8003478:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800347c:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 80034b0 <MPU6050_Read_Gyro+0x88>
 8003480:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8003484:	ed84 5b0a 	vstr	d5, [r4, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8003488:	ee07 2a90 	vmov	s15, r2
 800348c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003490:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8003494:	ed84 5b0c 	vstr	d5, [r4, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8003498:	ee07 3a90 	vmov	s15, r3
 800349c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80034a0:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80034a4:	ed84 5b0e 	vstr	d5, [r4, #56]	; 0x38
}
 80034a8:	b006      	add	sp, #24
 80034aa:	bd10      	pop	{r4, pc}
 80034ac:	f3af 8000 	nop.w
 80034b0:	00000000 	.word	0x00000000
 80034b4:	40606000 	.word	0x40606000

080034b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034b8:	b500      	push	{lr}
 80034ba:	b089      	sub	sp, #36	; 0x24
 80034bc:	4601      	mov	r1, r0
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 80034be:	2200      	movs	r2, #0
 80034c0:	2037      	movs	r0, #55	; 0x37
 80034c2:	f000 f93f 	bl	8003744 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80034c6:	2037      	movs	r0, #55	; 0x37
 80034c8:	f000 f972 	bl	80037b0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80034cc:	4b15      	ldr	r3, [pc, #84]	; (8003524 <HAL_InitTick+0x6c>)
 80034ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034d0:	f042 0220 	orr.w	r2, r2, #32
 80034d4:	641a      	str	r2, [r3, #64]	; 0x40
 80034d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d8:	f003 0320 	and.w	r3, r3, #32
 80034dc:	9301      	str	r3, [sp, #4]
 80034de:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80034e0:	a902      	add	r1, sp, #8
 80034e2:	a803      	add	r0, sp, #12
 80034e4:	f002 f9fa 	bl	80058dc <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80034e8:	f002 f9d8 	bl	800589c <HAL_RCC_GetPCLK1Freq>
 80034ec:	0043      	lsls	r3, r0, #1

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80034ee:	4a0e      	ldr	r2, [pc, #56]	; (8003528 <HAL_InitTick+0x70>)
 80034f0:	fba2 2303 	umull	r2, r3, r2, r3
 80034f4:	0c9b      	lsrs	r3, r3, #18
 80034f6:	3b01      	subs	r3, #1

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80034f8:	480c      	ldr	r0, [pc, #48]	; (800352c <HAL_InitTick+0x74>)
 80034fa:	4a0d      	ldr	r2, [pc, #52]	; (8003530 <HAL_InitTick+0x78>)
 80034fc:	6002      	str	r2, [r0, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 80034fe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003502:	60c2      	str	r2, [r0, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8003504:	6043      	str	r3, [r0, #4]
  htim7.Init.ClockDivision = 0;
 8003506:	2300      	movs	r3, #0
 8003508:	6103      	str	r3, [r0, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800350a:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 800350c:	f002 ff02 	bl	8006314 <HAL_TIM_Base_Init>
 8003510:	b118      	cbz	r0, 800351a <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
  }

  /* Return function status */
  return HAL_ERROR;
 8003512:	2001      	movs	r0, #1
}
 8003514:	b009      	add	sp, #36	; 0x24
 8003516:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim7);
 800351a:	4804      	ldr	r0, [pc, #16]	; (800352c <HAL_InitTick+0x74>)
 800351c:	f002 fd58 	bl	8005fd0 <HAL_TIM_Base_Start_IT>
 8003520:	e7f8      	b.n	8003514 <HAL_InitTick+0x5c>
 8003522:	bf00      	nop
 8003524:	40023800 	.word	0x40023800
 8003528:	431bde83 	.word	0x431bde83
 800352c:	20004df0 	.word	0x20004df0
 8003530:	40001400 	.word	0x40001400

08003534 <TIM7_IRQHandler>:
  /* Enable TIM7 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim7, TIM_IT_UPDATE);
}

void TIM7_IRQHandler(void)
{
 8003534:	b508      	push	{r3, lr}
  HAL_TIM_IRQHandler(&htim7);
 8003536:	4802      	ldr	r0, [pc, #8]	; (8003540 <TIM7_IRQHandler+0xc>)
 8003538:	f002 fd97 	bl	800606a <HAL_TIM_IRQHandler>
}
 800353c:	bd08      	pop	{r3, pc}
 800353e:	bf00      	nop
 8003540:	20004df0 	.word	0x20004df0

08003544 <HAL_UART_MspInit>:

UART_HandleTypeDef USB_UART;
// Initialize Hardware Resources
// Peripheral's clock enable
// Peripheral's GPIO Configuration
void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 8003544:	b530      	push	{r4, r5, lr}
 8003546:	b08b      	sub	sp, #44	; 0x2c
	GPIO_InitTypeDef  GPIO_InitStruct;

	if (huart->Instance == USART1) {
 8003548:	6803      	ldr	r3, [r0, #0]
 800354a:	4a32      	ldr	r2, [pc, #200]	; (8003614 <HAL_UART_MspInit+0xd0>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d004      	beq.n	800355a <HAL_UART_MspInit+0x16>
		
		// Enable Interrupt Mode
		HAL_NVIC_SetPriority(USART1_IRQn, 10, 0);
		HAL_NVIC_EnableIRQ(USART1_IRQn);

	} else if (huart->Instance == USART6) {
 8003550:	4a31      	ldr	r2, [pc, #196]	; (8003618 <HAL_UART_MspInit+0xd4>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d034      	beq.n	80035c0 <HAL_UART_MspInit+0x7c>

		// Enable UART Clocking
		__USART6_CLK_ENABLE();

	}
}
 8003556:	b00b      	add	sp, #44	; 0x2c
 8003558:	bd30      	pop	{r4, r5, pc}
		__GPIOA_CLK_ENABLE();
 800355a:	4c30      	ldr	r4, [pc, #192]	; (800361c <HAL_UART_MspInit+0xd8>)
 800355c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800355e:	f043 0301 	orr.w	r3, r3, #1
 8003562:	6323      	str	r3, [r4, #48]	; 0x30
 8003564:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	9301      	str	r3, [sp, #4]
 800356c:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin       = GPIO_PIN_9;
 800356e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003572:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8003574:	2302      	movs	r3, #2
 8003576:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8003578:	2301      	movs	r3, #1
 800357a:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 800357c:	2303      	movs	r3, #3
 800357e:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003580:	2307      	movs	r3, #7
 8003582:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //TX Config
 8003584:	4d26      	ldr	r5, [pc, #152]	; (8003620 <HAL_UART_MspInit+0xdc>)
 8003586:	a905      	add	r1, sp, #20
 8003588:	4628      	mov	r0, r5
 800358a:	f000 ff3d 	bl	8004408 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 800358e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003592:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config
 8003594:	a905      	add	r1, sp, #20
 8003596:	4628      	mov	r0, r5
 8003598:	f000 ff36 	bl	8004408 <HAL_GPIO_Init>
		__USART1_CLK_ENABLE();
 800359c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800359e:	f043 0310 	orr.w	r3, r3, #16
 80035a2:	6463      	str	r3, [r4, #68]	; 0x44
 80035a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80035a6:	f003 0310 	and.w	r3, r3, #16
 80035aa:	9302      	str	r3, [sp, #8]
 80035ac:	9b02      	ldr	r3, [sp, #8]
		HAL_NVIC_SetPriority(USART1_IRQn, 10, 0);
 80035ae:	2200      	movs	r2, #0
 80035b0:	210a      	movs	r1, #10
 80035b2:	2025      	movs	r0, #37	; 0x25
 80035b4:	f000 f8c6 	bl	8003744 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART1_IRQn);
 80035b8:	2025      	movs	r0, #37	; 0x25
 80035ba:	f000 f8f9 	bl	80037b0 <HAL_NVIC_EnableIRQ>
 80035be:	e7ca      	b.n	8003556 <HAL_UART_MspInit+0x12>
		__GPIOC_CLK_ENABLE();
 80035c0:	4c16      	ldr	r4, [pc, #88]	; (800361c <HAL_UART_MspInit+0xd8>)
 80035c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80035c4:	f043 0304 	orr.w	r3, r3, #4
 80035c8:	6323      	str	r3, [r4, #48]	; 0x30
 80035ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80035cc:	f003 0304 	and.w	r3, r3, #4
 80035d0:	9303      	str	r3, [sp, #12]
 80035d2:	9b03      	ldr	r3, [sp, #12]
		GPIO_InitStruct.Pin       = GPIO_PIN_6;
 80035d4:	2340      	movs	r3, #64	; 0x40
 80035d6:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80035d8:	2302      	movs	r3, #2
 80035da:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80035dc:	2301      	movs	r3, #1
 80035de:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 80035e0:	2303      	movs	r3, #3
 80035e2:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80035e4:	2308      	movs	r3, #8
 80035e6:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //TX Config
 80035e8:	4d0e      	ldr	r5, [pc, #56]	; (8003624 <HAL_UART_MspInit+0xe0>)
 80035ea:	a905      	add	r1, sp, #20
 80035ec:	4628      	mov	r0, r5
 80035ee:	f000 ff0b 	bl	8004408 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 80035f2:	2380      	movs	r3, #128	; 0x80
 80035f4:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //RX Config
 80035f6:	a905      	add	r1, sp, #20
 80035f8:	4628      	mov	r0, r5
 80035fa:	f000 ff05 	bl	8004408 <HAL_GPIO_Init>
		__USART6_CLK_ENABLE();
 80035fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003600:	f043 0320 	orr.w	r3, r3, #32
 8003604:	6463      	str	r3, [r4, #68]	; 0x44
 8003606:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003608:	f003 0320 	and.w	r3, r3, #32
 800360c:	9304      	str	r3, [sp, #16]
 800360e:	9b04      	ldr	r3, [sp, #16]
}
 8003610:	e7a1      	b.n	8003556 <HAL_UART_MspInit+0x12>
 8003612:	bf00      	nop
 8003614:	40011000 	.word	0x40011000
 8003618:	40011400 	.word	0x40011400
 800361c:	40023800 	.word	0x40023800
 8003620:	40020000 	.word	0x40020000
 8003624:	40020800 	.word	0x40020800

08003628 <initUart>:

//UART Initialization
void initUart(UART_HandleTypeDef* Uhand, uint32_t Baud, USART_TypeDef* Tgt) {
 8003628:	b508      	push	{r3, lr}
	Uhand->Instance        = Tgt;
 800362a:	6002      	str	r2, [r0, #0]

	Uhand->Init.BaudRate   = Baud;
 800362c:	6041      	str	r1, [r0, #4]
	Uhand->Init.WordLength = UART_WORDLENGTH_8B;
 800362e:	2200      	movs	r2, #0
 8003630:	6082      	str	r2, [r0, #8]
	Uhand->Init.StopBits   = UART_STOPBITS_1;
 8003632:	60c2      	str	r2, [r0, #12]
	Uhand->Init.Parity     = UART_PARITY_NONE;
 8003634:	6102      	str	r2, [r0, #16]
	Uhand->Init.Mode       = UART_MODE_TX_RX;
 8003636:	210c      	movs	r1, #12
 8003638:	6141      	str	r1, [r0, #20]
	Uhand->Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800363a:	6182      	str	r2, [r0, #24]

	HAL_UART_Init(Uhand);
 800363c:	f003 fc0c 	bl	8006e58 <HAL_UART_Init>
}
 8003640:	bd08      	pop	{r3, pc}
	...

08003644 <_write>:

============================================================================= */


// Make printf(), putchar(), etc. default to work over USB UART
int _write(int file, char *ptr, int len) {
 8003644:	b510      	push	{r4, lr}
 8003646:	4614      	mov	r4, r2
	// HAL_UART_Transmit(&USB_UART, (uint8_t*) ptr, len, 1000);
	HAL_UART_Transmit_IT(&USB_UART, (uint8_t*) ptr, len);
 8003648:	b292      	uxth	r2, r2
 800364a:	4802      	ldr	r0, [pc, #8]	; (8003654 <_write+0x10>)
 800364c:	f002 ff14 	bl	8006478 <HAL_UART_Transmit_IT>
	return len;
}
 8003650:	4620      	mov	r0, r4
 8003652:	bd10      	pop	{r4, pc}
 8003654:	20004e3c 	.word	0x20004e3c

08003658 <_read>:

// Make scanf(), getchar(), etc. default to work over USB UART
int _read(int file, char *ptr, int len) {
 8003658:	b508      	push	{r3, lr}
	*ptr = 0x00; // Clear the character buffer because scanf() is finicky
 800365a:	2200      	movs	r2, #0
 800365c:	700a      	strb	r2, [r1, #0]
	len = 1; // Again because of scanf's finickiness, len must = 1
	HAL_UART_Receive(&USB_UART, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 800365e:	f04f 33ff 	mov.w	r3, #4294967295
 8003662:	2201      	movs	r2, #1
 8003664:	4802      	ldr	r0, [pc, #8]	; (8003670 <_read+0x18>)
 8003666:	f003 fb36 	bl	8006cd6 <HAL_UART_Receive>
	return len;
}
 800366a:	2001      	movs	r0, #1
 800366c:	bd08      	pop	{r3, pc}
 800366e:	bf00      	nop
 8003670:	20004e3c 	.word	0x20004e3c

08003674 <_lseek>:
	}
  return i; // The way this is set up, it will always report the wrong size
}

// These functions need to be defined for compiler version gcc-arm version 11.3__attribute__((weak)) void _close(void){}
__attribute__((weak)) void _lseek(void){}
 8003674:	4770      	bx	lr

08003676 <_fstat>:
__attribute__((weak)) void _fstat(void){}
 8003676:	4770      	bx	lr

08003678 <_isatty>:
__attribute__((weak)) void _getpid(void){}
__attribute__((weak)) void _ispid(void){}
__attribute__((weak)) void _kill(void){}
__attribute__((weak)) void _isatty(void){}
 8003678:	4770      	bx	lr
	...

0800367c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800367c:	480d      	ldr	r0, [pc, #52]	; (80036b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800367e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 8003680:	480d      	ldr	r0, [pc, #52]	; (80036b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003682:	490e      	ldr	r1, [pc, #56]	; (80036bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003684:	4a0e      	ldr	r2, [pc, #56]	; (80036c0 <LoopForever+0xe>)
  movs r3, #0
 8003686:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003688:	e002      	b.n	8003690 <LoopCopyDataInit>

0800368a <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 800368a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800368c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800368e:	3304      	adds	r3, #4

08003690 <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 8003690:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003692:	428c      	cmp	r4, r1



  bcc CopyDataInit
 8003694:	d3f9      	bcc.n	800368a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003696:	4a0b      	ldr	r2, [pc, #44]	; (80036c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003698:	4c0b      	ldr	r4, [pc, #44]	; (80036c8 <LoopForever+0x16>)
  movs r3, #0
 800369a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800369c:	e001      	b.n	80036a2 <LoopFillZerobss>

0800369e <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 800369e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036a0:	3204      	adds	r2, #4

080036a2 <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 80036a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036a4:	d3fb      	bcc.n	800369e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80036a6:	f000 f813 	bl	80036d0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80036aa:	f003 fef3 	bl	8007494 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80036ae:	f7ff fb53 	bl	8002d58 <main>

080036b2 <LoopForever>:

LoopForever:
    b LoopForever
 80036b2:	e7fe      	b.n	80036b2 <LoopForever>
  ldr   r0, =_estack
 80036b4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80036b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036bc:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80036c0:	0800a09c 	.word	0x0800a09c
  ldr r2, =_sbss
 80036c4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80036c8:	20005018 	.word	0x20005018

080036cc <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80036cc:	e7fe      	b.n	80036cc <ADC_IRQHandler>
	...

080036d0 <SystemInit>:
 * @retval None
 */
void SystemInit(void) {
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 80036d0:	4a03      	ldr	r2, [pc, #12]	; (80036e0 <SystemInit+0x10>)
 80036d2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80036d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036da:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036de:	4770      	bx	lr
 80036e0:	e000ed00 	.word	0xe000ed00

080036e4 <HAL_MspInit>:
 */
__weak void HAL_MspInit(void) {
	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_MspInit could be implemented in the user file
	 */
}
 80036e4:	4770      	bx	lr
	...

080036e8 <HAL_Init>:
HAL_StatusTypeDef HAL_Init(void) {
 80036e8:	b508      	push	{r3, lr}
  __HAL_FLASH_ART_ENABLE();
 80036ea:	4b09      	ldr	r3, [pc, #36]	; (8003710 <HAL_Init+0x28>)
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036f2:	601a      	str	r2, [r3, #0]
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036fa:	601a      	str	r2, [r3, #0]
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036fc:	2003      	movs	r0, #3
 80036fe:	f000 f80f 	bl	8003720 <HAL_NVIC_SetPriorityGrouping>
	HAL_InitTick(TICK_INT_PRIORITY);
 8003702:	200f      	movs	r0, #15
 8003704:	f7ff fed8 	bl	80034b8 <HAL_InitTick>
	HAL_MspInit();
 8003708:	f7ff ffec 	bl	80036e4 <HAL_MspInit>
}
 800370c:	2000      	movs	r0, #0
 800370e:	bd08      	pop	{r3, pc}
 8003710:	40023c00 	.word	0x40023c00

08003714 <HAL_GetTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
 *       implementations in user file.
 * @retval tick value
 */
__weak uint32_t HAL_GetTick(void) {
	return uwTick;
 8003714:	4b01      	ldr	r3, [pc, #4]	; (800371c <HAL_GetTick+0x8>)
 8003716:	6818      	ldr	r0, [r3, #0]
}
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	20004ec4 	.word	0x20004ec4

08003720 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003720:	4906      	ldr	r1, [pc, #24]	; (800373c <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8003722:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003724:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003728:	041b      	lsls	r3, r3, #16
 800372a:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800372c:	0200      	lsls	r0, r0, #8
 800372e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003732:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8003734:	4a02      	ldr	r2, [pc, #8]	; (8003740 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003736:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8003738:	60ca      	str	r2, [r1, #12]
	/* Check the parameters */
	assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

	/* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
	NVIC_SetPriorityGrouping(PriorityGroup);
}
 800373a:	4770      	bx	lr
 800373c:	e000ed00 	.word	0xe000ed00
 8003740:	05fa0000 	.word	0x05fa0000

08003744 <HAL_NVIC_SetPriority>:
 *         This parameter can be a value between 0 and 15
 *         A lower priority value indicates a higher priority.          
 * @retval None
 */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority,
		uint32_t SubPriority) {
 8003744:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003746:	4b17      	ldr	r3, [pc, #92]	; (80037a4 <HAL_NVIC_SetPriority+0x60>)
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800374e:	f1c3 0c07 	rsb	ip, r3, #7
 8003752:	f1bc 0f04 	cmp.w	ip, #4
 8003756:	bf28      	it	cs
 8003758:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800375c:	f103 0e04 	add.w	lr, r3, #4
 8003760:	f1be 0f06 	cmp.w	lr, #6
 8003764:	d914      	bls.n	8003790 <HAL_NVIC_SetPriority+0x4c>
 8003766:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003768:	f04f 3eff 	mov.w	lr, #4294967295
 800376c:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003770:	ea21 010c 	bic.w	r1, r1, ip
 8003774:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003776:	fa0e fe03 	lsl.w	lr, lr, r3
 800377a:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800377e:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 8003780:	2800      	cmp	r0, #0
 8003782:	db07      	blt.n	8003794 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003784:	0112      	lsls	r2, r2, #4
 8003786:	b2d2      	uxtb	r2, r2
 8003788:	4b07      	ldr	r3, [pc, #28]	; (80037a8 <HAL_NVIC_SetPriority+0x64>)
 800378a:	541a      	strb	r2, [r3, r0]

	prioritygroup = NVIC_GetPriorityGrouping();

	NVIC_SetPriority(IRQn,
			NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800378c:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003790:	2300      	movs	r3, #0
 8003792:	e7e9      	b.n	8003768 <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003794:	f000 000f 	and.w	r0, r0, #15
 8003798:	0112      	lsls	r2, r2, #4
 800379a:	b2d2      	uxtb	r2, r2
 800379c:	4b03      	ldr	r3, [pc, #12]	; (80037ac <HAL_NVIC_SetPriority+0x68>)
 800379e:	541a      	strb	r2, [r3, r0]
 80037a0:	e7f4      	b.n	800378c <HAL_NVIC_SetPriority+0x48>
 80037a2:	bf00      	nop
 80037a4:	e000ed00 	.word	0xe000ed00
 80037a8:	e000e400 	.word	0xe000e400
 80037ac:	e000ed14 	.word	0xe000ed14

080037b0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80037b0:	2800      	cmp	r0, #0
 80037b2:	db07      	blt.n	80037c4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037b4:	f000 021f 	and.w	r2, r0, #31
 80037b8:	0940      	lsrs	r0, r0, #5
 80037ba:	2301      	movs	r3, #1
 80037bc:	4093      	lsls	r3, r2
 80037be:	4a02      	ldr	r2, [pc, #8]	; (80037c8 <HAL_NVIC_EnableIRQ+0x18>)
 80037c0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
	/* Check the parameters */
	assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

	/* Enable interrupt */
	NVIC_EnableIRQ(IRQn);
}
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	e000e100 	.word	0xe000e100

080037cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037cc:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80037ce:	6801      	ldr	r1, [r0, #0]
 80037d0:	b2ca      	uxtb	r2, r1
 80037d2:	3a10      	subs	r2, #16
 80037d4:	4b0a      	ldr	r3, [pc, #40]	; (8003800 <DMA_CalcBaseAndBitshift+0x34>)
 80037d6:	fba3 4302 	umull	r4, r3, r3, r2
 80037da:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80037dc:	4c09      	ldr	r4, [pc, #36]	; (8003804 <DMA_CalcBaseAndBitshift+0x38>)
 80037de:	5ce3      	ldrb	r3, [r4, r3]
 80037e0:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 80037e2:	2a5f      	cmp	r2, #95	; 0x5f
 80037e4:	d907      	bls.n	80037f6 <DMA_CalcBaseAndBitshift+0x2a>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80037e6:	4b08      	ldr	r3, [pc, #32]	; (8003808 <DMA_CalcBaseAndBitshift+0x3c>)
 80037e8:	400b      	ands	r3, r1
 80037ea:	3304      	adds	r3, #4
 80037ec:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 80037ee:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80037f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80037f4:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80037f6:	4b04      	ldr	r3, [pc, #16]	; (8003808 <DMA_CalcBaseAndBitshift+0x3c>)
 80037f8:	400b      	ands	r3, r1
 80037fa:	6583      	str	r3, [r0, #88]	; 0x58
 80037fc:	e7f7      	b.n	80037ee <DMA_CalcBaseAndBitshift+0x22>
 80037fe:	bf00      	nop
 8003800:	aaaaaaab 	.word	0xaaaaaaab
 8003804:	08009f60 	.word	0x08009f60
 8003808:	fffffc00 	.word	0xfffffc00

0800380c <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800380c:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800380e:	6982      	ldr	r2, [r0, #24]
 8003810:	b992      	cbnz	r2, 8003838 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8003812:	2b01      	cmp	r3, #1
 8003814:	d00a      	beq.n	800382c <DMA_CheckFifoParam+0x20>
 8003816:	2b02      	cmp	r3, #2
 8003818:	d002      	beq.n	8003820 <DMA_CheckFifoParam+0x14>
 800381a:	b10b      	cbz	r3, 8003820 <DMA_CheckFifoParam+0x14>
 800381c:	2000      	movs	r0, #0
 800381e:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003820:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003822:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003826:	d128      	bne.n	800387a <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8003828:	2000      	movs	r0, #0
 800382a:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800382c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800382e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003832:	d024      	beq.n	800387e <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8003834:	2000      	movs	r0, #0
 8003836:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003838:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800383c:	d009      	beq.n	8003852 <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800383e:	2b02      	cmp	r3, #2
 8003840:	d925      	bls.n	800388e <DMA_CheckFifoParam+0x82>
 8003842:	2b03      	cmp	r3, #3
 8003844:	d125      	bne.n	8003892 <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003846:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003848:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800384c:	d123      	bne.n	8003896 <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 800384e:	2000      	movs	r0, #0
 8003850:	4770      	bx	lr
    switch (tmp)
 8003852:	2b03      	cmp	r3, #3
 8003854:	d803      	bhi.n	800385e <DMA_CheckFifoParam+0x52>
 8003856:	e8df f003 	tbb	[pc, r3]
 800385a:	0414      	.short	0x0414
 800385c:	0a14      	.short	0x0a14
 800385e:	2000      	movs	r0, #0
 8003860:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003862:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003864:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003868:	d10d      	bne.n	8003886 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 800386a:	2000      	movs	r0, #0
 800386c:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800386e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003870:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003874:	d009      	beq.n	800388a <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8003876:	2000      	movs	r0, #0
 8003878:	4770      	bx	lr
        status = HAL_ERROR;
 800387a:	2001      	movs	r0, #1
 800387c:	4770      	bx	lr
        status = HAL_ERROR;
 800387e:	2001      	movs	r0, #1
 8003880:	4770      	bx	lr
      status = HAL_ERROR;
 8003882:	2001      	movs	r0, #1
 8003884:	4770      	bx	lr
        status = HAL_ERROR;
 8003886:	2001      	movs	r0, #1
 8003888:	4770      	bx	lr
        status = HAL_ERROR;
 800388a:	2001      	movs	r0, #1
 800388c:	4770      	bx	lr
      status = HAL_ERROR;
 800388e:	2001      	movs	r0, #1
 8003890:	4770      	bx	lr
    switch (tmp)
 8003892:	2000      	movs	r0, #0
 8003894:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8003896:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8003898:	4770      	bx	lr
	...

0800389c <HAL_DMA_Init>:
{
 800389c:	b570      	push	{r4, r5, r6, lr}
 800389e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80038a0:	f7ff ff38 	bl	8003714 <HAL_GetTick>
  if(hdma == NULL)
 80038a4:	2c00      	cmp	r4, #0
 80038a6:	d05b      	beq.n	8003960 <HAL_DMA_Init+0xc4>
 80038a8:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 80038aa:	2302      	movs	r3, #2
 80038ac:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 80038b0:	2300      	movs	r3, #0
 80038b2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80038b6:	6822      	ldr	r2, [r4, #0]
 80038b8:	6813      	ldr	r3, [r2, #0]
 80038ba:	f023 0301 	bic.w	r3, r3, #1
 80038be:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038c0:	6823      	ldr	r3, [r4, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	f012 0f01 	tst.w	r2, #1
 80038c8:	d00a      	beq.n	80038e0 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038ca:	f7ff ff23 	bl	8003714 <HAL_GetTick>
 80038ce:	1b43      	subs	r3, r0, r5
 80038d0:	2b05      	cmp	r3, #5
 80038d2:	d9f5      	bls.n	80038c0 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038d4:	2320      	movs	r3, #32
 80038d6:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038d8:	2003      	movs	r0, #3
 80038da:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80038de:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 80038e0:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80038e2:	4920      	ldr	r1, [pc, #128]	; (8003964 <HAL_DMA_Init+0xc8>)
 80038e4:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038e6:	6862      	ldr	r2, [r4, #4]
 80038e8:	68a0      	ldr	r0, [r4, #8]
 80038ea:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038ec:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038ee:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038f0:	6920      	ldr	r0, [r4, #16]
 80038f2:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038f4:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038f6:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038f8:	69a0      	ldr	r0, [r4, #24]
 80038fa:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80038fc:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038fe:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8003900:	6a20      	ldr	r0, [r4, #32]
 8003902:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003904:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003906:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003908:	2904      	cmp	r1, #4
 800390a:	d01e      	beq.n	800394a <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 800390c:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 800390e:	6826      	ldr	r6, [r4, #0]
 8003910:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003912:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8003916:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003918:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800391a:	2b04      	cmp	r3, #4
 800391c:	d107      	bne.n	800392e <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 800391e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003920:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003922:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003924:	b11b      	cbz	r3, 800392e <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003926:	4620      	mov	r0, r4
 8003928:	f7ff ff70 	bl	800380c <DMA_CheckFifoParam>
 800392c:	b990      	cbnz	r0, 8003954 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 800392e:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003930:	4620      	mov	r0, r4
 8003932:	f7ff ff4b 	bl	80037cc <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003936:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003938:	233f      	movs	r3, #63	; 0x3f
 800393a:	4093      	lsls	r3, r2
 800393c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800393e:	2000      	movs	r0, #0
 8003940:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8003942:	2301      	movs	r3, #1
 8003944:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8003948:	e7c9      	b.n	80038de <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800394a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800394c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800394e:	4301      	orrs	r1, r0
 8003950:	430a      	orrs	r2, r1
 8003952:	e7db      	b.n	800390c <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003954:	2340      	movs	r3, #64	; 0x40
 8003956:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8003958:	2001      	movs	r0, #1
 800395a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 800395e:	e7be      	b.n	80038de <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8003960:	2001      	movs	r0, #1
 8003962:	e7bc      	b.n	80038de <HAL_DMA_Init+0x42>
 8003964:	e010803f 	.word	0xe010803f

08003968 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 8003968:	2800      	cmp	r0, #0
 800396a:	d02d      	beq.n	80039c8 <HAL_DMA_DeInit+0x60>
{
 800396c:	b538      	push	{r3, r4, r5, lr}
 800396e:	4605      	mov	r5, r0
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003970:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
 8003974:	b2c0      	uxtb	r0, r0
 8003976:	2802      	cmp	r0, #2
 8003978:	d025      	beq.n	80039c6 <HAL_DMA_DeInit+0x5e>
  __HAL_DMA_DISABLE(hdma);
 800397a:	682a      	ldr	r2, [r5, #0]
 800397c:	6813      	ldr	r3, [r2, #0]
 800397e:	f023 0301 	bic.w	r3, r3, #1
 8003982:	6013      	str	r3, [r2, #0]
  hdma->Instance->CR   = 0U;
 8003984:	682b      	ldr	r3, [r5, #0]
 8003986:	2400      	movs	r4, #0
 8003988:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 800398a:	682b      	ldr	r3, [r5, #0]
 800398c:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 800398e:	682b      	ldr	r3, [r5, #0]
 8003990:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8003992:	682b      	ldr	r3, [r5, #0]
 8003994:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8003996:	682b      	ldr	r3, [r5, #0]
 8003998:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800399a:	682b      	ldr	r3, [r5, #0]
 800399c:	2221      	movs	r2, #33	; 0x21
 800399e:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80039a0:	4628      	mov	r0, r5
 80039a2:	f7ff ff13 	bl	80037cc <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039a6:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80039a8:	233f      	movs	r3, #63	; 0x3f
 80039aa:	4093      	lsls	r3, r2
 80039ac:	6083      	str	r3, [r0, #8]
  hdma->XferCpltCallback = NULL;
 80039ae:	63ec      	str	r4, [r5, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80039b0:	642c      	str	r4, [r5, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80039b2:	646c      	str	r4, [r5, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80039b4:	64ac      	str	r4, [r5, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80039b6:	64ec      	str	r4, [r5, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80039b8:	652c      	str	r4, [r5, #80]	; 0x50
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039ba:	656c      	str	r4, [r5, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_RESET;
 80039bc:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 80039c0:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  return HAL_OK;
 80039c4:	4620      	mov	r0, r4
}
 80039c6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80039c8:	2001      	movs	r0, #1
}
 80039ca:	4770      	bx	lr

080039cc <HAL_DMA_Abort>:
{
 80039cc:	b570      	push	{r4, r5, r6, lr}
 80039ce:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039d0:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 80039d2:	f7ff fe9f 	bl	8003714 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039d6:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d006      	beq.n	80039ee <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039e0:	2380      	movs	r3, #128	; 0x80
 80039e2:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80039e4:	2300      	movs	r3, #0
 80039e6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 80039ea:	2001      	movs	r0, #1
}
 80039ec:	bd70      	pop	{r4, r5, r6, pc}
 80039ee:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039f0:	6822      	ldr	r2, [r4, #0]
 80039f2:	6813      	ldr	r3, [r2, #0]
 80039f4:	f023 0316 	bic.w	r3, r3, #22
 80039f8:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80039fa:	6822      	ldr	r2, [r4, #0]
 80039fc:	6953      	ldr	r3, [r2, #20]
 80039fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a02:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a06:	b1e3      	cbz	r3, 8003a42 <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a08:	6822      	ldr	r2, [r4, #0]
 8003a0a:	6813      	ldr	r3, [r2, #0]
 8003a0c:	f023 0308 	bic.w	r3, r3, #8
 8003a10:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003a12:	6822      	ldr	r2, [r4, #0]
 8003a14:	6813      	ldr	r3, [r2, #0]
 8003a16:	f023 0301 	bic.w	r3, r3, #1
 8003a1a:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a1c:	6823      	ldr	r3, [r4, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f013 0f01 	tst.w	r3, #1
 8003a24:	d011      	beq.n	8003a4a <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a26:	f7ff fe75 	bl	8003714 <HAL_GetTick>
 8003a2a:	1b43      	subs	r3, r0, r5
 8003a2c:	2b05      	cmp	r3, #5
 8003a2e:	d9f5      	bls.n	8003a1c <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a30:	2320      	movs	r3, #32
 8003a32:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a34:	2003      	movs	r0, #3
 8003a36:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8003a40:	e7d4      	b.n	80039ec <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a42:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1df      	bne.n	8003a08 <HAL_DMA_Abort+0x3c>
 8003a48:	e7e3      	b.n	8003a12 <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a4a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003a4c:	233f      	movs	r3, #63	; 0x3f
 8003a4e:	4093      	lsls	r3, r2
 8003a50:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8003a52:	2301      	movs	r3, #1
 8003a54:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8003a58:	2000      	movs	r0, #0
 8003a5a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return HAL_OK;
 8003a5e:	e7c5      	b.n	80039ec <HAL_DMA_Abort+0x20>

08003a60 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a60:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d003      	beq.n	8003a72 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a6a:	2380      	movs	r3, #128	; 0x80
 8003a6c:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8003a6e:	2001      	movs	r0, #1
 8003a70:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8003a72:	2305      	movs	r3, #5
 8003a74:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8003a78:	6802      	ldr	r2, [r0, #0]
 8003a7a:	6813      	ldr	r3, [r2, #0]
 8003a7c:	f023 0301 	bic.w	r3, r3, #1
 8003a80:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8003a82:	2000      	movs	r0, #0
}
 8003a84:	4770      	bx	lr

08003a86 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8003a86:	b430      	push	{r4, r5}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8003a88:	6805      	ldr	r5, [r0, #0]
 8003a8a:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 8003a8c:	f004 4c40 	and.w	ip, r4, #3221225472	; 0xc0000000
 8003a90:	9c02      	ldr	r4, [sp, #8]
 8003a92:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8003a96:	ea4c 0404 	orr.w	r4, ip, r4
 8003a9a:	646c      	str	r4, [r5, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003a9c:	6803      	ldr	r3, [r0, #0]
 8003a9e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003aa0:	6843      	ldr	r3, [r0, #4]
 8003aa2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003aa6:	d003      	beq.n	8003ab0 <DMA2D_SetConfig+0x2a>
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003aa8:	6803      	ldr	r3, [r0, #0]
 8003aaa:	60d9      	str	r1, [r3, #12]
  }
}
 8003aac:	bc30      	pop	{r4, r5}
 8003aae:	4770      	bx	lr
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003ab0:	f001 4c7f 	and.w	ip, r1, #4278190080	; 0xff000000
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003ab4:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003ab8:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003abc:	b2ca      	uxtb	r2, r1
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003abe:	6884      	ldr	r4, [r0, #8]
 8003ac0:	b19c      	cbz	r4, 8003aea <DMA2D_SetConfig+0x64>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003ac2:	2c01      	cmp	r4, #1
 8003ac4:	d00f      	beq.n	8003ae6 <DMA2D_SetConfig+0x60>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003ac6:	2c02      	cmp	r4, #2
 8003ac8:	d012      	beq.n	8003af0 <DMA2D_SetConfig+0x6a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003aca:	2c03      	cmp	r4, #3
 8003acc:	d018      	beq.n	8003b00 <DMA2D_SetConfig+0x7a>
      tmp1 = (tmp1 >> 28U);
 8003ace:	ea4f 7c1c 	mov.w	ip, ip, lsr #28
      tmp2 = (tmp2 >> 20U);
 8003ad2:	0d1b      	lsrs	r3, r3, #20
      tmp3 = (tmp3 >> 12U);
 8003ad4:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003ad6:	021b      	lsls	r3, r3, #8
 8003ad8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8003adc:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
 8003ae0:	ea43 1112 	orr.w	r1, r3, r2, lsr #4
 8003ae4:	e001      	b.n	8003aea <DMA2D_SetConfig+0x64>
      tmp = (tmp3 | tmp2 | tmp4);
 8003ae6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003aea:	6803      	ldr	r3, [r0, #0]
 8003aec:	6399      	str	r1, [r3, #56]	; 0x38
 8003aee:	e7dd      	b.n	8003aac <DMA2D_SetConfig+0x26>
      tmp2 = (tmp2 >> 19U);
 8003af0:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 10U);
 8003af2:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003af4:	02db      	lsls	r3, r3, #11
 8003af6:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8003afa:	ea43 01d2 	orr.w	r1, r3, r2, lsr #3
 8003afe:	e7f4      	b.n	8003aea <DMA2D_SetConfig+0x64>
      tmp1 = (tmp1 >> 31U);
 8003b00:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
      tmp2 = (tmp2 >> 19U);
 8003b04:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 8003b06:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003b08:	029b      	lsls	r3, r3, #10
 8003b0a:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8003b0e:	ea43 33cc 	orr.w	r3, r3, ip, lsl #15
 8003b12:	ea43 01d2 	orr.w	r1, r3, r2, lsr #3
 8003b16:	e7e8      	b.n	8003aea <DMA2D_SetConfig+0x64>

08003b18 <HAL_DMA2D_MspInit>:
}
 8003b18:	4770      	bx	lr
	...

08003b1c <HAL_DMA2D_Init>:
  if (hdma2d == NULL)
 8003b1c:	2800      	cmp	r0, #0
 8003b1e:	d032      	beq.n	8003b86 <HAL_DMA2D_Init+0x6a>
{
 8003b20:	b510      	push	{r4, lr}
 8003b22:	4604      	mov	r4, r0
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003b24:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8003b28:	b343      	cbz	r3, 8003b7c <HAL_DMA2D_Init+0x60>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003b30:	6822      	ldr	r2, [r4, #0]
 8003b32:	6813      	ldr	r3, [r2, #0]
 8003b34:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003b38:	6861      	ldr	r1, [r4, #4]
 8003b3a:	430b      	orrs	r3, r1
 8003b3c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003b3e:	6822      	ldr	r2, [r4, #0]
 8003b40:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003b42:	f023 0307 	bic.w	r3, r3, #7
 8003b46:	68a1      	ldr	r1, [r4, #8]
 8003b48:	430b      	orrs	r3, r1
 8003b4a:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003b4c:	6822      	ldr	r2, [r4, #0]
 8003b4e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8003b50:	4b0e      	ldr	r3, [pc, #56]	; (8003b8c <HAL_DMA2D_Init+0x70>)
 8003b52:	400b      	ands	r3, r1
 8003b54:	68e1      	ldr	r1, [r4, #12]
 8003b56:	430b      	orrs	r3, r1
 8003b58:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8003b5a:	6821      	ldr	r1, [r4, #0]
 8003b5c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8003b5e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003b62:	6920      	ldr	r0, [r4, #16]
 8003b64:	6962      	ldr	r2, [r4, #20]
 8003b66:	0552      	lsls	r2, r2, #21
 8003b68:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	634b      	str	r3, [r1, #52]	; 0x34
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003b70:	2000      	movs	r0, #0
 8003b72:	6560      	str	r0, [r4, #84]	; 0x54
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003b74:	2301      	movs	r3, #1
 8003b76:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8003b7a:	bd10      	pop	{r4, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8003b7c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_DMA2D_MspInit(hdma2d);
 8003b80:	f7ff ffca 	bl	8003b18 <HAL_DMA2D_MspInit>
 8003b84:	e7d1      	b.n	8003b2a <HAL_DMA2D_Init+0xe>
    return HAL_ERROR;
 8003b86:	2001      	movs	r0, #1
}
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	ffffc000 	.word	0xffffc000

08003b90 <HAL_DMA2D_Start>:
{
 8003b90:	b510      	push	{r4, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	4604      	mov	r4, r0
  __HAL_LOCK(hdma2d);
 8003b96:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 8003b9a:	2801      	cmp	r0, #1
 8003b9c:	d012      	beq.n	8003bc4 <HAL_DMA2D_Start+0x34>
 8003b9e:	2001      	movs	r0, #1
 8003ba0:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003ba4:	2002      	movs	r0, #2
 8003ba6:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003baa:	9804      	ldr	r0, [sp, #16]
 8003bac:	9000      	str	r0, [sp, #0]
 8003bae:	4620      	mov	r0, r4
 8003bb0:	f7ff ff69 	bl	8003a86 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8003bb4:	6822      	ldr	r2, [r4, #0]
 8003bb6:	6813      	ldr	r3, [r2, #0]
 8003bb8:	f043 0301 	orr.w	r3, r3, #1
 8003bbc:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8003bbe:	2000      	movs	r0, #0
}
 8003bc0:	b002      	add	sp, #8
 8003bc2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdma2d);
 8003bc4:	2002      	movs	r0, #2
 8003bc6:	e7fb      	b.n	8003bc0 <HAL_DMA2D_Start+0x30>

08003bc8 <HAL_DMA2D_PollForTransfer>:
{
 8003bc8:	b570      	push	{r4, r5, r6, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	4604      	mov	r4, r0
 8003bce:	460d      	mov	r5, r1
  __IO uint32_t isrflags = 0x0U;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	9301      	str	r3, [sp, #4]
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003bd4:	6803      	ldr	r3, [r0, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f013 0f01 	tst.w	r3, #1
 8003bdc:	d111      	bne.n	8003c02 <HAL_DMA2D_PollForTransfer+0x3a>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003bde:	6822      	ldr	r2, [r4, #0]
 8003be0:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003be2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003be4:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 8003be6:	f013 0f20 	tst.w	r3, #32
 8003bea:	d147      	bne.n	8003c7c <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8003bec:	6823      	ldr	r3, [r4, #0]
 8003bee:	2212      	movs	r2, #18
 8003bf0:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hdma2d);
 8003bf8:	2000      	movs	r0, #0
 8003bfa:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
}
 8003bfe:	b002      	add	sp, #8
 8003c00:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8003c02:	f7ff fd87 	bl	8003714 <HAL_GetTick>
 8003c06:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003c08:	6823      	ldr	r3, [r4, #0]
 8003c0a:	685a      	ldr	r2, [r3, #4]
 8003c0c:	f012 0f02 	tst.w	r2, #2
 8003c10:	d1e5      	bne.n	8003bde <HAL_DMA2D_PollForTransfer+0x16>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003c12:	685a      	ldr	r2, [r3, #4]
 8003c14:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003c16:	9a01      	ldr	r2, [sp, #4]
 8003c18:	f012 0f21 	tst.w	r2, #33	; 0x21
 8003c1c:	d114      	bne.n	8003c48 <HAL_DMA2D_PollForTransfer+0x80>
      if (Timeout != HAL_MAX_DELAY)
 8003c1e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003c22:	d0f1      	beq.n	8003c08 <HAL_DMA2D_PollForTransfer+0x40>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c24:	f7ff fd76 	bl	8003714 <HAL_GetTick>
 8003c28:	1b80      	subs	r0, r0, r6
 8003c2a:	42a8      	cmp	r0, r5
 8003c2c:	d801      	bhi.n	8003c32 <HAL_DMA2D_PollForTransfer+0x6a>
 8003c2e:	2d00      	cmp	r5, #0
 8003c30:	d1ea      	bne.n	8003c08 <HAL_DMA2D_PollForTransfer+0x40>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003c32:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003c34:	f043 0320 	orr.w	r3, r3, #32
 8003c38:	6563      	str	r3, [r4, #84]	; 0x54
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003c3a:	2003      	movs	r0, #3
 8003c3c:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
          __HAL_UNLOCK(hdma2d);
 8003c40:	2300      	movs	r3, #0
 8003c42:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
          return HAL_TIMEOUT;
 8003c46:	e7da      	b.n	8003bfe <HAL_DMA2D_PollForTransfer+0x36>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003c48:	9a01      	ldr	r2, [sp, #4]
 8003c4a:	f012 0f20 	tst.w	r2, #32
 8003c4e:	d003      	beq.n	8003c58 <HAL_DMA2D_PollForTransfer+0x90>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003c50:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003c52:	f042 0202 	orr.w	r2, r2, #2
 8003c56:	6562      	str	r2, [r4, #84]	; 0x54
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003c58:	9a01      	ldr	r2, [sp, #4]
 8003c5a:	f012 0f01 	tst.w	r2, #1
 8003c5e:	d003      	beq.n	8003c68 <HAL_DMA2D_PollForTransfer+0xa0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003c60:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003c62:	f042 0201 	orr.w	r2, r2, #1
 8003c66:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003c68:	2221      	movs	r2, #33	; 0x21
 8003c6a:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003c6c:	2304      	movs	r3, #4
 8003c6e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hdma2d);
 8003c72:	2300      	movs	r3, #0
 8003c74:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        return HAL_ERROR;
 8003c78:	2001      	movs	r0, #1
 8003c7a:	e7c0      	b.n	8003bfe <HAL_DMA2D_PollForTransfer+0x36>
    tickstart = HAL_GetTick();
 8003c7c:	f7ff fd4a 	bl	8003714 <HAL_GetTick>
 8003c80:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003c82:	6823      	ldr	r3, [r4, #0]
 8003c84:	685a      	ldr	r2, [r3, #4]
 8003c86:	f012 0f10 	tst.w	r2, #16
 8003c8a:	d1af      	bne.n	8003bec <HAL_DMA2D_PollForTransfer+0x24>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003c90:	9a01      	ldr	r2, [sp, #4]
 8003c92:	f012 0f29 	tst.w	r2, #41	; 0x29
 8003c96:	d114      	bne.n	8003cc2 <HAL_DMA2D_PollForTransfer+0xfa>
      if (Timeout != HAL_MAX_DELAY)
 8003c98:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003c9c:	d0f1      	beq.n	8003c82 <HAL_DMA2D_PollForTransfer+0xba>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c9e:	f7ff fd39 	bl	8003714 <HAL_GetTick>
 8003ca2:	1b80      	subs	r0, r0, r6
 8003ca4:	42a8      	cmp	r0, r5
 8003ca6:	d801      	bhi.n	8003cac <HAL_DMA2D_PollForTransfer+0xe4>
 8003ca8:	2d00      	cmp	r5, #0
 8003caa:	d1ea      	bne.n	8003c82 <HAL_DMA2D_PollForTransfer+0xba>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003cac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003cae:	f043 0320 	orr.w	r3, r3, #32
 8003cb2:	6563      	str	r3, [r4, #84]	; 0x54
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003cb4:	2003      	movs	r0, #3
 8003cb6:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
          __HAL_UNLOCK(hdma2d);
 8003cba:	2300      	movs	r3, #0
 8003cbc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
          return HAL_TIMEOUT;
 8003cc0:	e79d      	b.n	8003bfe <HAL_DMA2D_PollForTransfer+0x36>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003cc2:	9a01      	ldr	r2, [sp, #4]
 8003cc4:	f012 0f08 	tst.w	r2, #8
 8003cc8:	d003      	beq.n	8003cd2 <HAL_DMA2D_PollForTransfer+0x10a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003cca:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003ccc:	f042 0204 	orr.w	r2, r2, #4
 8003cd0:	6562      	str	r2, [r4, #84]	; 0x54
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003cd2:	9a01      	ldr	r2, [sp, #4]
 8003cd4:	f012 0f20 	tst.w	r2, #32
 8003cd8:	d003      	beq.n	8003ce2 <HAL_DMA2D_PollForTransfer+0x11a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003cda:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003cdc:	f042 0202 	orr.w	r2, r2, #2
 8003ce0:	6562      	str	r2, [r4, #84]	; 0x54
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003ce2:	9a01      	ldr	r2, [sp, #4]
 8003ce4:	f012 0f01 	tst.w	r2, #1
 8003ce8:	d003      	beq.n	8003cf2 <HAL_DMA2D_PollForTransfer+0x12a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003cea:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003cec:	f042 0201 	orr.w	r2, r2, #1
 8003cf0:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003cf2:	2229      	movs	r2, #41	; 0x29
 8003cf4:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003cf6:	2304      	movs	r3, #4
 8003cf8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hdma2d);
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        return HAL_ERROR;
 8003d02:	2001      	movs	r0, #1
 8003d04:	e77b      	b.n	8003bfe <HAL_DMA2D_PollForTransfer+0x36>
	...

08003d08 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 8003d08:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8003d0c:	2a01      	cmp	r2, #1
 8003d0e:	d067      	beq.n	8003de0 <HAL_DMA2D_ConfigLayer+0xd8>
{
 8003d10:	b430      	push	{r4, r5}
 8003d12:	4603      	mov	r3, r0
  __HAL_LOCK(hdma2d);
 8003d14:	2201      	movs	r2, #1
 8003d16:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	f880 2051 	strb.w	r2, [r0, #81]	; 0x51
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003d20:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8003d24:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8003d28:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003d2a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003d2c:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 8003d30:	6b05      	ldr	r5, [r0, #48]	; 0x30
 8003d32:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003d36:	6b40      	ldr	r0, [r0, #52]	; 0x34
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003d38:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d3c:	3c09      	subs	r4, #9
 8003d3e:	2c01      	cmp	r4, #1
 8003d40:	d920      	bls.n	8003d84 <HAL_DMA2D_ConfigLayer+0x7c>
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003d42:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8003d46:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8003d4a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8003d4c:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003d50:	bb59      	cbnz	r1, 8003daa <HAL_DMA2D_ConfigLayer+0xa2>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003d52:	681c      	ldr	r4, [r3, #0]
 8003d54:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003d56:	4823      	ldr	r0, [pc, #140]	; (8003de4 <HAL_DMA2D_ConfigLayer+0xdc>)
 8003d58:	4028      	ands	r0, r5
 8003d5a:	4310      	orrs	r0, r2
 8003d5c:	6260      	str	r0, [r4, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003d5e:	6818      	ldr	r0, [r3, #0]
 8003d60:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8003d64:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8003d68:	6a14      	ldr	r4, [r2, #32]
 8003d6a:	6184      	str	r4, [r0, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d6e:	3a09      	subs	r2, #9
 8003d70:	2a01      	cmp	r2, #1
 8003d72:	d910      	bls.n	8003d96 <HAL_DMA2D_ConfigLayer+0x8e>
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hdma2d);
 8003d7a:	2000      	movs	r0, #0
 8003d7c:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
}
 8003d80:	bc30      	pop	{r4, r5}
 8003d82:	4770      	bx	lr
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003d84:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8003d88:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8003d8c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8003d8e:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
 8003d92:	4302      	orrs	r2, r0
 8003d94:	e7dc      	b.n	8003d50 <HAL_DMA2D_ConfigLayer+0x48>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003d96:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8003d9a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8003d9e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003da0:	6819      	ldr	r1, [r3, #0]
 8003da2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003da6:	628a      	str	r2, [r1, #40]	; 0x28
 8003da8:	e7e4      	b.n	8003d74 <HAL_DMA2D_ConfigLayer+0x6c>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003daa:	681c      	ldr	r4, [r3, #0]
 8003dac:	69e5      	ldr	r5, [r4, #28]
 8003dae:	480d      	ldr	r0, [pc, #52]	; (8003de4 <HAL_DMA2D_ConfigLayer+0xdc>)
 8003db0:	4028      	ands	r0, r5
 8003db2:	4310      	orrs	r0, r2
 8003db4:	61e0      	str	r0, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003db6:	6818      	ldr	r0, [r3, #0]
 8003db8:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8003dbc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8003dc0:	6a14      	ldr	r4, [r2, #32]
 8003dc2:	6104      	str	r4, [r0, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003dc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003dc6:	3a09      	subs	r2, #9
 8003dc8:	2a01      	cmp	r2, #1
 8003dca:	d8d3      	bhi.n	8003d74 <HAL_DMA2D_ConfigLayer+0x6c>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003dcc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8003dd0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8003dd4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003dd6:	6819      	ldr	r1, [r3, #0]
 8003dd8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003ddc:	620a      	str	r2, [r1, #32]
 8003dde:	e7c9      	b.n	8003d74 <HAL_DMA2D_ConfigLayer+0x6c>
  __HAL_LOCK(hdma2d);
 8003de0:	2002      	movs	r0, #2
}
 8003de2:	4770      	bx	lr
 8003de4:	00ccfff0 	.word	0x00ccfff0

08003de8 <DSI_ConfigPacketHeader>:
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8003de8:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8003dec:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003df0:	9b00      	ldr	r3, [sp, #0]
 8003df2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003df6:	66c2      	str	r2, [r0, #108]	; 0x6c
}
 8003df8:	4770      	bx	lr

08003dfa <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8003dfa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003dfe:	4605      	mov	r5, r0
 8003e00:	4689      	mov	r9, r1
 8003e02:	4617      	mov	r7, r2
 8003e04:	4698      	mov	r8, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e06:	f7ff fc85 	bl	8003714 <HAL_GetTick>
 8003e0a:	4606      	mov	r6, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003e0c:	682c      	ldr	r4, [r5, #0]
 8003e0e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8003e10:	f013 0f01 	tst.w	r3, #1
 8003e14:	d107      	bne.n	8003e26 <DSI_ShortWrite+0x2c>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003e16:	f7ff fc7d 	bl	8003714 <HAL_GetTick>
 8003e1a:	1b80      	subs	r0, r0, r6
 8003e1c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003e20:	d9f4      	bls.n	8003e0c <DSI_ShortWrite+0x12>
    {
      return HAL_TIMEOUT;
 8003e22:	2003      	movs	r0, #3
 8003e24:	e008      	b.n	8003e38 <DSI_ShortWrite+0x3e>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8003e26:	ea47 1389 	orr.w	r3, r7, r9, lsl #6
 8003e2a:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
 8003e2e:	9a08      	ldr	r2, [sp, #32]
 8003e30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003e34:	66e3      	str	r3, [r4, #108]	; 0x6c

  return HAL_OK;
 8003e36:	2000      	movs	r0, #0
}
 8003e38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003e3c <HAL_DSI_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 8003e3c:	4770      	bx	lr
	...

08003e40 <HAL_DSI_Init>:
  if (hdsi == NULL)
 8003e40:	2800      	cmp	r0, #0
 8003e42:	f000 80bd 	beq.w	8003fc0 <HAL_DSI_Init+0x180>
{
 8003e46:	b570      	push	{r4, r5, r6, lr}
 8003e48:	b082      	sub	sp, #8
 8003e4a:	460d      	mov	r5, r1
 8003e4c:	4604      	mov	r4, r0
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8003e4e:	7c43      	ldrb	r3, [r0, #17]
 8003e50:	b31b      	cbz	r3, 8003e9a <HAL_DSI_Init+0x5a>
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003e52:	2303      	movs	r3, #3
 8003e54:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 8003e56:	2300      	movs	r3, #0
 8003e58:	9300      	str	r3, [sp, #0]
 8003e5a:	6822      	ldr	r2, [r4, #0]
 8003e5c:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8003e60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e64:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
 8003e68:	6823      	ldr	r3, [r4, #0]
 8003e6a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003e6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e72:	9300      	str	r3, [sp, #0]
 8003e74:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 8003e76:	f7ff fc4d 	bl	8003714 <HAL_GetTick>
 8003e7a:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003e7c:	6823      	ldr	r3, [r4, #0]
 8003e7e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8003e82:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8003e86:	d10b      	bne.n	8003ea0 <HAL_DSI_Init+0x60>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003e88:	f7ff fc44 	bl	8003714 <HAL_GetTick>
 8003e8c:	1b80      	subs	r0, r0, r6
 8003e8e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003e92:	d9f3      	bls.n	8003e7c <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 8003e94:	2003      	movs	r0, #3
}
 8003e96:	b002      	add	sp, #8
 8003e98:	bd70      	pop	{r4, r5, r6, pc}
    HAL_DSI_MspInit(hdsi);
 8003e9a:	f7ff ffcf 	bl	8003e3c <HAL_DSI_MspInit>
 8003e9e:	e7d8      	b.n	8003e52 <HAL_DSI_Init+0x12>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8003ea0:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003ea4:	4a47      	ldr	r2, [pc, #284]	; (8003fc4 <HAL_DSI_Init+0x184>)
 8003ea6:	400a      	ands	r2, r1
 8003ea8:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003eac:	6821      	ldr	r1, [r4, #0]
 8003eae:	f8d1 2430 	ldr.w	r2, [r1, #1072]	; 0x430
 8003eb2:	6828      	ldr	r0, [r5, #0]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8003eb4:	686b      	ldr	r3, [r5, #4]
 8003eb6:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003eb8:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8003ebc:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8003ebe:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	f8c1 3430 	str.w	r3, [r1, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 8003ec8:	2300      	movs	r3, #0
 8003eca:	9301      	str	r3, [sp, #4]
 8003ecc:	6822      	ldr	r2, [r4, #0]
 8003ece:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8003ed2:	f043 0301 	orr.w	r3, r3, #1
 8003ed6:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
 8003eda:	6823      	ldr	r3, [r4, #0]
 8003edc:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	9301      	str	r3, [sp, #4]
 8003ee6:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 8003ee8:	2001      	movs	r0, #1
 8003eea:	f7ff f835 	bl	8002f58 <HAL_Delay>
  tickstart = HAL_GetTick();
 8003eee:	f7ff fc11 	bl	8003714 <HAL_GetTick>
 8003ef2:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003ef4:	6823      	ldr	r3, [r4, #0]
 8003ef6:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8003efa:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003efe:	d107      	bne.n	8003f10 <HAL_DSI_Init+0xd0>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003f00:	f7ff fc08 	bl	8003714 <HAL_GetTick>
 8003f04:	1b80      	subs	r0, r0, r6
 8003f06:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003f0a:	d9f3      	bls.n	8003ef4 <HAL_DSI_Init+0xb4>
      return HAL_TIMEOUT;
 8003f0c:	2003      	movs	r0, #3
 8003f0e:	e7c2      	b.n	8003e96 <HAL_DSI_Init+0x56>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8003f10:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003f14:	f042 0206 	orr.w	r2, r2, #6
 8003f18:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8003f1c:	6822      	ldr	r2, [r4, #0]
 8003f1e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003f22:	f023 0303 	bic.w	r3, r3, #3
 8003f26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8003f2a:	6822      	ldr	r2, [r4, #0]
 8003f2c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003f30:	6861      	ldr	r1, [r4, #4]
 8003f32:	430b      	orrs	r3, r1
 8003f34:	f043 0301 	orr.w	r3, r3, #1
 8003f38:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8003f3c:	6822      	ldr	r2, [r4, #0]
 8003f3e:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 8003f42:	f023 0303 	bic.w	r3, r3, #3
 8003f46:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8003f4a:	6822      	ldr	r2, [r4, #0]
 8003f4c:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 8003f50:	68e1      	ldr	r1, [r4, #12]
 8003f52:	430b      	orrs	r3, r1
 8003f54:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8003f58:	6822      	ldr	r2, [r4, #0]
 8003f5a:	6893      	ldr	r3, [r2, #8]
 8003f5c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f60:	6093      	str	r3, [r2, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8003f62:	6822      	ldr	r2, [r4, #0]
 8003f64:	6893      	ldr	r3, [r2, #8]
 8003f66:	68a1      	ldr	r1, [r4, #8]
 8003f68:	430b      	orrs	r3, r1
 8003f6a:	6093      	str	r3, [r2, #8]
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8003f6c:	686b      	ldr	r3, [r5, #4]
 8003f6e:	b903      	cbnz	r3, 8003f72 <HAL_DSI_Init+0x132>
 8003f70:	2301      	movs	r3, #1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8003f72:	4a15      	ldr	r2, [pc, #84]	; (8003fc8 <HAL_DSI_Init+0x188>)
 8003f74:	fb02 f303 	mul.w	r3, r2, r3
 8003f78:	68aa      	ldr	r2, [r5, #8]
 8003f7a:	f002 0203 	and.w	r2, r2, #3
 8003f7e:	4093      	lsls	r3, r2
 8003f80:	682a      	ldr	r2, [r5, #0]
 8003f82:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8003f86:	fb01 f202 	mul.w	r2, r1, r2
 8003f8a:	fbb3 f3f2 	udiv	r3, r3, r2
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8003f8e:	6821      	ldr	r1, [r4, #0]
 8003f90:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
 8003f94:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003f98:	f8c1 2418 	str.w	r2, [r1, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8003f9c:	6821      	ldr	r1, [r4, #0]
 8003f9e:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	f8c1 3418 	str.w	r3, [r1, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 8003fa8:	6823      	ldr	r3, [r4, #0]
 8003faa:	2000      	movs	r0, #0
 8003fac:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003fb0:	6823      	ldr	r3, [r4, #0]
 8003fb2:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8003fb6:	61a0      	str	r0, [r4, #24]
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8003fb8:	6160      	str	r0, [r4, #20]
  hdsi->State = HAL_DSI_STATE_READY;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	7463      	strb	r3, [r4, #17]
  return HAL_OK;
 8003fbe:	e76a      	b.n	8003e96 <HAL_DSI_Init+0x56>
    return HAL_ERROR;
 8003fc0:	2001      	movs	r0, #1
}
 8003fc2:	4770      	bx	lr
 8003fc4:	fffc8603 	.word	0xfffc8603
 8003fc8:	003d0900 	.word	0x003d0900

08003fcc <HAL_DSI_MspDeInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspDeInit could be implemented in the user file
   */
}
 8003fcc:	4770      	bx	lr

08003fce <HAL_DSI_DeInit>:
  if (hdsi == NULL)
 8003fce:	2800      	cmp	r0, #0
 8003fd0:	d04a      	beq.n	8004068 <HAL_DSI_DeInit+0x9a>
{
 8003fd2:	b530      	push	{r4, r5, lr}
 8003fd4:	b085      	sub	sp, #20
 8003fd6:	4604      	mov	r4, r0
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	7443      	strb	r3, [r0, #17]
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8003fdc:	2500      	movs	r5, #0
 8003fde:	9500      	str	r5, [sp, #0]
 8003fe0:	6802      	ldr	r2, [r0, #0]
 8003fe2:	f8d2 3404 	ldr.w	r3, [r2, #1028]	; 0x404
 8003fe6:	f023 0308 	bic.w	r3, r3, #8
 8003fea:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
 8003fee:	6803      	ldr	r3, [r0, #0]
 8003ff0:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8003ff4:	f002 0208 	and.w	r2, r2, #8
 8003ff8:	9200      	str	r2, [sp, #0]
 8003ffa:	9a00      	ldr	r2, [sp, #0]
  __HAL_DSI_DISABLE(hdsi);
 8003ffc:	9501      	str	r5, [sp, #4]
 8003ffe:	685a      	ldr	r2, [r3, #4]
 8004000:	f022 0201 	bic.w	r2, r2, #1
 8004004:	605a      	str	r2, [r3, #4]
 8004006:	6803      	ldr	r3, [r0, #0]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	f002 0201 	and.w	r2, r2, #1
 800400e:	9201      	str	r2, [sp, #4]
 8004010:	9a01      	ldr	r2, [sp, #4]
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8004012:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004016:	f022 0206 	bic.w	r2, r2, #6
 800401a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  __HAL_DSI_PLL_DISABLE(hdsi);
 800401e:	9502      	str	r5, [sp, #8]
 8004020:	6802      	ldr	r2, [r0, #0]
 8004022:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8004026:	f023 0301 	bic.w	r3, r3, #1
 800402a:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
 800402e:	6803      	ldr	r3, [r0, #0]
 8004030:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8004034:	f002 0201 	and.w	r2, r2, #1
 8004038:	9202      	str	r2, [sp, #8]
 800403a:	9a02      	ldr	r2, [sp, #8]
  __HAL_DSI_REG_DISABLE(hdsi);
 800403c:	9503      	str	r5, [sp, #12]
 800403e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8004042:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004046:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800404a:	6803      	ldr	r3, [r0, #0]
 800404c:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8004050:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004054:	9303      	str	r3, [sp, #12]
 8004056:	9b03      	ldr	r3, [sp, #12]
  HAL_DSI_MspDeInit(hdsi);
 8004058:	f7ff ffb8 	bl	8003fcc <HAL_DSI_MspDeInit>
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800405c:	6165      	str	r5, [r4, #20]
  hdsi->State = HAL_DSI_STATE_RESET;
 800405e:	7465      	strb	r5, [r4, #17]
  __HAL_UNLOCK(hdsi);
 8004060:	7425      	strb	r5, [r4, #16]
  return HAL_OK;
 8004062:	4628      	mov	r0, r5
}
 8004064:	b005      	add	sp, #20
 8004066:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8004068:	2001      	movs	r0, #1
}
 800406a:	4770      	bx	lr

0800406c <HAL_DSI_ConfigVideoMode>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800406c:	7c02      	ldrb	r2, [r0, #16]
 800406e:	2a01      	cmp	r2, #1
 8004070:	f000 8123 	beq.w	80042ba <HAL_DSI_ConfigVideoMode+0x24e>
{
 8004074:	b430      	push	{r4, r5}
 8004076:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8004078:	2201      	movs	r2, #1
 800407a:	7402      	strb	r2, [r0, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800407c:	6800      	ldr	r0, [r0, #0]
 800407e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8004080:	f022 0201 	bic.w	r2, r2, #1
 8004084:	6342      	str	r2, [r0, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8004086:	6818      	ldr	r0, [r3, #0]
 8004088:	f8d0 2400 	ldr.w	r2, [r0, #1024]	; 0x400
 800408c:	f022 0201 	bic.w	r2, r2, #1
 8004090:	f8c0 2400 	str.w	r2, [r0, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8004094:	6818      	ldr	r0, [r3, #0]
 8004096:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004098:	f022 0203 	bic.w	r2, r2, #3
 800409c:	6382      	str	r2, [r0, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 800409e:	6818      	ldr	r0, [r3, #0]
 80040a0:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80040a2:	68cc      	ldr	r4, [r1, #12]
 80040a4:	4322      	orrs	r2, r4
 80040a6:	6382      	str	r2, [r0, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 80040a8:	6818      	ldr	r0, [r3, #0]
 80040aa:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80040ac:	4a84      	ldr	r2, [pc, #528]	; (80042c0 <HAL_DSI_ConfigVideoMode+0x254>)
 80040ae:	4022      	ands	r2, r4
 80040b0:	63c2      	str	r2, [r0, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 80040b2:	6818      	ldr	r0, [r3, #0]
 80040b4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80040b6:	690c      	ldr	r4, [r1, #16]
 80040b8:	4322      	orrs	r2, r4
 80040ba:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 80040bc:	6818      	ldr	r0, [r3, #0]
 80040be:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80040c0:	4c80      	ldr	r4, [pc, #512]	; (80042c4 <HAL_DSI_ConfigVideoMode+0x258>)
 80040c2:	4022      	ands	r2, r4
 80040c4:	6402      	str	r2, [r0, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 80040c6:	6818      	ldr	r0, [r3, #0]
 80040c8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80040ca:	694d      	ldr	r5, [r1, #20]
 80040cc:	432a      	orrs	r2, r5
 80040ce:	6402      	str	r2, [r0, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 80040d0:	6818      	ldr	r0, [r3, #0]
 80040d2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80040d4:	4022      	ands	r2, r4
 80040d6:	6442      	str	r2, [r0, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 80040d8:	6818      	ldr	r0, [r3, #0]
 80040da:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80040dc:	698c      	ldr	r4, [r1, #24]
 80040de:	4322      	orrs	r2, r4
 80040e0:	6442      	str	r2, [r0, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80040e2:	6818      	ldr	r0, [r3, #0]
 80040e4:	68c2      	ldr	r2, [r0, #12]
 80040e6:	f022 0203 	bic.w	r2, r2, #3
 80040ea:	60c2      	str	r2, [r0, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 80040ec:	6818      	ldr	r0, [r3, #0]
 80040ee:	68c2      	ldr	r2, [r0, #12]
 80040f0:	680c      	ldr	r4, [r1, #0]
 80040f2:	4322      	orrs	r2, r4
 80040f4:	60c2      	str	r2, [r0, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80040f6:	6818      	ldr	r0, [r3, #0]
 80040f8:	6942      	ldr	r2, [r0, #20]
 80040fa:	f022 0207 	bic.w	r2, r2, #7
 80040fe:	6142      	str	r2, [r0, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8004100:	681c      	ldr	r4, [r3, #0]
 8004102:	6960      	ldr	r0, [r4, #20]
 8004104:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8004106:	6a0d      	ldr	r5, [r1, #32]
 8004108:	432a      	orrs	r2, r5
 800410a:	69cd      	ldr	r5, [r1, #28]
 800410c:	432a      	orrs	r2, r5
 800410e:	4302      	orrs	r2, r0
 8004110:	6162      	str	r2, [r4, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8004112:	6818      	ldr	r0, [r3, #0]
 8004114:	6902      	ldr	r2, [r0, #16]
 8004116:	f022 020f 	bic.w	r2, r2, #15
 800411a:	6102      	str	r2, [r0, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 800411c:	6818      	ldr	r0, [r3, #0]
 800411e:	6902      	ldr	r2, [r0, #16]
 8004120:	684c      	ldr	r4, [r1, #4]
 8004122:	4322      	orrs	r2, r4
 8004124:	6102      	str	r2, [r0, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8004126:	6818      	ldr	r0, [r3, #0]
 8004128:	f8d0 2400 	ldr.w	r2, [r0, #1024]	; 0x400
 800412c:	f022 020e 	bic.w	r2, r2, #14
 8004130:	f8c0 2400 	str.w	r2, [r0, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8004134:	6818      	ldr	r0, [r3, #0]
 8004136:	f8d0 2400 	ldr.w	r2, [r0, #1024]	; 0x400
 800413a:	684c      	ldr	r4, [r1, #4]
 800413c:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8004140:	f8c0 2400 	str.w	r2, [r0, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8004144:	684a      	ldr	r2, [r1, #4]
 8004146:	2a03      	cmp	r2, #3
 8004148:	f000 80ac 	beq.w	80042a4 <HAL_DSI_ConfigVideoMode+0x238>
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 800414c:	6818      	ldr	r0, [r3, #0]
 800414e:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8004150:	4c5d      	ldr	r4, [pc, #372]	; (80042c8 <HAL_DSI_ConfigVideoMode+0x25c>)
 8004152:	4022      	ands	r2, r4
 8004154:	6482      	str	r2, [r0, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8004156:	6818      	ldr	r0, [r3, #0]
 8004158:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800415a:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800415c:	432a      	orrs	r2, r5
 800415e:	6482      	str	r2, [r0, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8004160:	6818      	ldr	r0, [r3, #0]
 8004162:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8004164:	4022      	ands	r2, r4
 8004166:	64c2      	str	r2, [r0, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8004168:	6818      	ldr	r0, [r3, #0]
 800416a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800416c:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 800416e:	4322      	orrs	r2, r4
 8004170:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8004172:	6818      	ldr	r0, [r3, #0]
 8004174:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8004176:	4a55      	ldr	r2, [pc, #340]	; (80042cc <HAL_DSI_ConfigVideoMode+0x260>)
 8004178:	4022      	ands	r2, r4
 800417a:	6502      	str	r2, [r0, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 800417c:	6818      	ldr	r0, [r3, #0]
 800417e:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8004180:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 8004182:	4322      	orrs	r2, r4
 8004184:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8004186:	681c      	ldr	r4, [r3, #0]
 8004188:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800418a:	4851      	ldr	r0, [pc, #324]	; (80042d0 <HAL_DSI_ConfigVideoMode+0x264>)
 800418c:	4002      	ands	r2, r0
 800418e:	6562      	str	r2, [r4, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8004190:	681c      	ldr	r4, [r3, #0]
 8004192:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004194:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8004196:	432a      	orrs	r2, r5
 8004198:	6562      	str	r2, [r4, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 800419a:	681c      	ldr	r4, [r3, #0]
 800419c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800419e:	4002      	ands	r2, r0
 80041a0:	65a2      	str	r2, [r4, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 80041a2:	681c      	ldr	r4, [r3, #0]
 80041a4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80041a6:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 80041a8:	432a      	orrs	r2, r5
 80041aa:	65a2      	str	r2, [r4, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 80041ac:	681c      	ldr	r4, [r3, #0]
 80041ae:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80041b0:	4002      	ands	r2, r0
 80041b2:	65e2      	str	r2, [r4, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 80041b4:	6818      	ldr	r0, [r3, #0]
 80041b6:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80041b8:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 80041ba:	4322      	orrs	r2, r4
 80041bc:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 80041be:	6818      	ldr	r0, [r3, #0]
 80041c0:	6e04      	ldr	r4, [r0, #96]	; 0x60
 80041c2:	4a3f      	ldr	r2, [pc, #252]	; (80042c0 <HAL_DSI_ConfigVideoMode+0x254>)
 80041c4:	4022      	ands	r2, r4
 80041c6:	6602      	str	r2, [r0, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 80041c8:	6818      	ldr	r0, [r3, #0]
 80041ca:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80041cc:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 80041ce:	4322      	orrs	r2, r4
 80041d0:	6602      	str	r2, [r0, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 80041d2:	6818      	ldr	r0, [r3, #0]
 80041d4:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80041d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041da:	6382      	str	r2, [r0, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 80041dc:	6818      	ldr	r0, [r3, #0]
 80041de:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80041e0:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 80041e2:	4322      	orrs	r2, r4
 80041e4:	6382      	str	r2, [r0, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 80041e6:	6818      	ldr	r0, [r3, #0]
 80041e8:	6982      	ldr	r2, [r0, #24]
 80041ea:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 80041ee:	6182      	str	r2, [r0, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 80041f0:	6818      	ldr	r0, [r3, #0]
 80041f2:	6982      	ldr	r2, [r0, #24]
 80041f4:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 80041f6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80041fa:	6182      	str	r2, [r0, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 80041fc:	6818      	ldr	r0, [r3, #0]
 80041fe:	6982      	ldr	r2, [r0, #24]
 8004200:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004204:	6182      	str	r2, [r0, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8004206:	6818      	ldr	r0, [r3, #0]
 8004208:	6982      	ldr	r2, [r0, #24]
 800420a:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 800420c:	4322      	orrs	r2, r4
 800420e:	6182      	str	r2, [r0, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8004210:	6818      	ldr	r0, [r3, #0]
 8004212:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004214:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004218:	6382      	str	r2, [r0, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800421a:	6818      	ldr	r0, [r3, #0]
 800421c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800421e:	6d0c      	ldr	r4, [r1, #80]	; 0x50
 8004220:	4322      	orrs	r2, r4
 8004222:	6382      	str	r2, [r0, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8004224:	6818      	ldr	r0, [r3, #0]
 8004226:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004228:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800422c:	6382      	str	r2, [r0, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 800422e:	6818      	ldr	r0, [r3, #0]
 8004230:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004232:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8004234:	4322      	orrs	r2, r4
 8004236:	6382      	str	r2, [r0, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8004238:	6818      	ldr	r0, [r3, #0]
 800423a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800423c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004240:	6382      	str	r2, [r0, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8004242:	6818      	ldr	r0, [r3, #0]
 8004244:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004246:	6d8c      	ldr	r4, [r1, #88]	; 0x58
 8004248:	4322      	orrs	r2, r4
 800424a:	6382      	str	r2, [r0, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 800424c:	6818      	ldr	r0, [r3, #0]
 800424e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004250:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004254:	6382      	str	r2, [r0, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8004256:	6818      	ldr	r0, [r3, #0]
 8004258:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800425a:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
 800425c:	4322      	orrs	r2, r4
 800425e:	6382      	str	r2, [r0, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8004260:	6818      	ldr	r0, [r3, #0]
 8004262:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004264:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004268:	6382      	str	r2, [r0, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 800426a:	6818      	ldr	r0, [r3, #0]
 800426c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800426e:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 8004270:	4322      	orrs	r2, r4
 8004272:	6382      	str	r2, [r0, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8004274:	6818      	ldr	r0, [r3, #0]
 8004276:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004278:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800427c:	6382      	str	r2, [r0, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 800427e:	6818      	ldr	r0, [r3, #0]
 8004280:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004282:	6e4c      	ldr	r4, [r1, #100]	; 0x64
 8004284:	4322      	orrs	r2, r4
 8004286:	6382      	str	r2, [r0, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8004288:	6818      	ldr	r0, [r3, #0]
 800428a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800428c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004290:	6382      	str	r2, [r0, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8004292:	6818      	ldr	r0, [r3, #0]
 8004294:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004296:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004298:	430a      	orrs	r2, r1
 800429a:	6382      	str	r2, [r0, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800429c:	2000      	movs	r0, #0
 800429e:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
}
 80042a0:	bc30      	pop	{r4, r5}
 80042a2:	4770      	bx	lr
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 80042a4:	6818      	ldr	r0, [r3, #0]
 80042a6:	6902      	ldr	r2, [r0, #16]
 80042a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042ac:	6102      	str	r2, [r0, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 80042ae:	6818      	ldr	r0, [r3, #0]
 80042b0:	6902      	ldr	r2, [r0, #16]
 80042b2:	688c      	ldr	r4, [r1, #8]
 80042b4:	4322      	orrs	r2, r4
 80042b6:	6102      	str	r2, [r0, #16]
 80042b8:	e748      	b.n	800414c <HAL_DSI_ConfigVideoMode+0xe0>
  __HAL_LOCK(hdsi);
 80042ba:	2002      	movs	r0, #2
}
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	ffffc000 	.word	0xffffc000
 80042c4:	ffffe000 	.word	0xffffe000
 80042c8:	fffff000 	.word	0xfffff000
 80042cc:	ffff8000 	.word	0xffff8000
 80042d0:	fffffc00 	.word	0xfffffc00

080042d4 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80042d4:	7c02      	ldrb	r2, [r0, #16]
 80042d6:	2a01      	cmp	r2, #1
 80042d8:	d021      	beq.n	800431e <HAL_DSI_Start+0x4a>
{
 80042da:	b082      	sub	sp, #8
 80042dc:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 80042de:	2201      	movs	r2, #1
 80042e0:	7402      	strb	r2, [r0, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 80042e2:	2000      	movs	r0, #0
 80042e4:	9000      	str	r0, [sp, #0]
 80042e6:	6819      	ldr	r1, [r3, #0]
 80042e8:	684a      	ldr	r2, [r1, #4]
 80042ea:	f042 0201 	orr.w	r2, r2, #1
 80042ee:	604a      	str	r2, [r1, #4]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	6851      	ldr	r1, [r2, #4]
 80042f4:	f001 0101 	and.w	r1, r1, #1
 80042f8:	9100      	str	r1, [sp, #0]
 80042fa:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80042fc:	9001      	str	r0, [sp, #4]
 80042fe:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
 8004302:	f041 0108 	orr.w	r1, r1, #8
 8004306:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 8004310:	f002 0208 	and.w	r2, r2, #8
 8004314:	9201      	str	r2, [sp, #4]
 8004316:	9a01      	ldr	r2, [sp, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004318:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
}
 800431a:	b002      	add	sp, #8
 800431c:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800431e:	2002      	movs	r0, #2
}
 8004320:	4770      	bx	lr

08004322 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8004322:	b510      	push	{r4, lr}
 8004324:	b082      	sub	sp, #8
 8004326:	4604      	mov	r4, r0
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8004328:	7c00      	ldrb	r0, [r0, #16]
 800432a:	2801      	cmp	r0, #1
 800432c:	d00a      	beq.n	8004344 <HAL_DSI_ShortWrite+0x22>
 800432e:	2001      	movs	r0, #1
 8004330:	7420      	strb	r0, [r4, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8004332:	9804      	ldr	r0, [sp, #16]
 8004334:	9000      	str	r0, [sp, #0]
 8004336:	4620      	mov	r0, r4
 8004338:	f7ff fd5f 	bl	8003dfa <DSI_ShortWrite>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800433c:	2300      	movs	r3, #0
 800433e:	7423      	strb	r3, [r4, #16]

  return status;
}
 8004340:	b002      	add	sp, #8
 8004342:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdsi);
 8004344:	2002      	movs	r0, #2
 8004346:	e7fb      	b.n	8004340 <HAL_DSI_ShortWrite+0x1e>

08004348 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8004348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800434c:	b082      	sub	sp, #8
 800434e:	461d      	mov	r5, r3
 8004350:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8004352:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8004356:	7c03      	ldrb	r3, [r0, #16]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d053      	beq.n	8004404 <HAL_DSI_LongWrite+0xbc>
 800435c:	4604      	mov	r4, r0
 800435e:	468a      	mov	sl, r1
 8004360:	4617      	mov	r7, r2
 8004362:	2301      	movs	r3, #1
 8004364:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8004366:	f7ff f9d5 	bl	8003714 <HAL_GetTick>
 800436a:	4681      	mov	r9, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800436c:	6822      	ldr	r2, [r4, #0]
 800436e:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8004370:	f013 0f01 	tst.w	r3, #1
 8004374:	d10a      	bne.n	800438c <HAL_DSI_LongWrite+0x44>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004376:	f7ff f9cd 	bl	8003714 <HAL_GetTick>
 800437a:	eba0 0009 	sub.w	r0, r0, r9
 800437e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004382:	d9f3      	bls.n	800436c <HAL_DSI_LongWrite+0x24>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8004384:	2300      	movs	r3, #0
 8004386:	7423      	strb	r3, [r4, #16]

      return HAL_TIMEOUT;
 8004388:	2003      	movs	r0, #3
 800438a:	e038      	b.n	80043fe <HAL_DSI_LongWrite+0xb6>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800438c:	46ac      	mov	ip, r5
 800438e:	2d03      	cmp	r5, #3
 8004390:	bf28      	it	cs
 8004392:	f04f 0c03 	movcs.w	ip, #3

  for (count = 0U; count < nbBytes; count++)
 8004396:	2300      	movs	r3, #0
 8004398:	e005      	b.n	80043a6 <HAL_DSI_LongWrite+0x5e>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800439a:	f818 1003 	ldrb.w	r1, [r8, r3]
 800439e:	3301      	adds	r3, #1
 80043a0:	00d8      	lsls	r0, r3, #3
 80043a2:	4081      	lsls	r1, r0
 80043a4:	430e      	orrs	r6, r1
  for (count = 0U; count < nbBytes; count++)
 80043a6:	4563      	cmp	r3, ip
 80043a8:	d3f7      	bcc.n	800439a <HAL_DSI_LongWrite+0x52>
  }
  hdsi->Instance->GPDR = fifoword;
 80043aa:	6716      	str	r6, [r2, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 80043ac:	eba5 060c 	sub.w	r6, r5, ip
  pparams += nbBytes;
 80043b0:	eb08 000c 	add.w	r0, r8, ip
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 80043b4:	e00f      	b.n	80043d6 <HAL_DSI_LongWrite+0x8e>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
    fifoword = 0U;
    for (count = 0U; count < nbBytes; count++)
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80043b6:	f810 e00c 	ldrb.w	lr, [r0, ip]
 80043ba:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 80043be:	fa0e fe02 	lsl.w	lr, lr, r2
 80043c2:	ea43 030e 	orr.w	r3, r3, lr
    for (count = 0U; count < nbBytes; count++)
 80043c6:	f10c 0c01 	add.w	ip, ip, #1
 80043ca:	458c      	cmp	ip, r1
 80043cc:	d3f3      	bcc.n	80043b6 <HAL_DSI_LongWrite+0x6e>
    }
    hdsi->Instance->GPDR = fifoword;
 80043ce:	6822      	ldr	r2, [r4, #0]
 80043d0:	6713      	str	r3, [r2, #112]	; 0x70

    uicounter -= nbBytes;
 80043d2:	1a76      	subs	r6, r6, r1
    pparams += nbBytes;
 80043d4:	4408      	add	r0, r1
  while (uicounter != 0U)
 80043d6:	b136      	cbz	r6, 80043e6 <HAL_DSI_LongWrite+0x9e>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80043d8:	4631      	mov	r1, r6
 80043da:	2e04      	cmp	r6, #4
 80043dc:	bf28      	it	cs
 80043de:	2104      	movcs	r1, #4
    fifoword = 0U;
 80043e0:	2300      	movs	r3, #0
    for (count = 0U; count < nbBytes; count++)
 80043e2:	469c      	mov	ip, r3
 80043e4:	e7f1      	b.n	80043ca <HAL_DSI_LongWrite+0x82>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 80043e6:	1c6b      	adds	r3, r5, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 80043e8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80043ec:	9200      	str	r2, [sp, #0]
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	463a      	mov	r2, r7
 80043f2:	4651      	mov	r1, sl
 80043f4:	6820      	ldr	r0, [r4, #0]
 80043f6:	f7ff fcf7 	bl	8003de8 <DSI_ConfigPacketHeader>
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80043fa:	2000      	movs	r0, #0
 80043fc:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 80043fe:	b002      	add	sp, #8
 8004400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hdsi);
 8004404:	2002      	movs	r0, #2
 8004406:	e7fa      	b.n	80043fe <HAL_DSI_LongWrite+0xb6>

08004408 <HAL_GPIO_Init>:
	assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
	assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
	assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

	/* Configure the port pins */
	for (position = 0; position < GPIO_NUMBER; position++) {
 8004408:	2300      	movs	r3, #0
 800440a:	2b0f      	cmp	r3, #15
 800440c:	f200 80f4 	bhi.w	80045f8 <HAL_GPIO_Init+0x1f0>
void HAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init) {
 8004410:	b570      	push	{r4, r5, r6, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	e066      	b.n	80044e4 <HAL_GPIO_Init+0xdc>
			if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT)
					|| ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)) {
				/* Check the Speed parameter */
				assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
				/* Configure the IO Speed */
				temp = GPIOx->OSPEEDR;
 8004416:	6885      	ldr	r5, [r0, #8]
				temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004418:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800441c:	2403      	movs	r4, #3
 800441e:	fa04 f40e 	lsl.w	r4, r4, lr
 8004422:	ea25 0504 	bic.w	r5, r5, r4
				temp |= (GPIO_Init->Speed << (position * 2));
 8004426:	68cc      	ldr	r4, [r1, #12]
 8004428:	fa04 f40e 	lsl.w	r4, r4, lr
 800442c:	432c      	orrs	r4, r5
				GPIOx->OSPEEDR = temp;
 800442e:	6084      	str	r4, [r0, #8]

				/* Configure the IO Output Type */
				temp = GPIOx->OTYPER;
 8004430:	6844      	ldr	r4, [r0, #4]
				temp &= ~(GPIO_OTYPER_OT_0 << position);
 8004432:	ea24 0402 	bic.w	r4, r4, r2
				temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos)
 8004436:	684a      	ldr	r2, [r1, #4]
 8004438:	f3c2 1200 	ubfx	r2, r2, #4, #1
						<< position);
 800443c:	409a      	lsls	r2, r3
				temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos)
 800443e:	4322      	orrs	r2, r4
				GPIOx->OTYPER = temp;
 8004440:	6042      	str	r2, [r0, #4]
 8004442:	e05d      	b.n	8004500 <HAL_GPIO_Init+0xf8>
			if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
				/* Check the Alternate function parameter */
				assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

				/* Configure Alternate function mapped with the current IO */
				temp = GPIOx->AFR[position >> 3];
 8004444:	08dc      	lsrs	r4, r3, #3
 8004446:	3408      	adds	r4, #8
 8004448:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
				temp &= ~((uint32_t) 0xF
						<< ((uint32_t) (position & (uint32_t) 0x07) * 4));
 800444c:	f003 0507 	and.w	r5, r3, #7
 8004450:	00ad      	lsls	r5, r5, #2
 8004452:	f04f 0e0f 	mov.w	lr, #15
 8004456:	fa0e fe05 	lsl.w	lr, lr, r5
				temp &= ~((uint32_t) 0xF
 800445a:	ea22 0e0e 	bic.w	lr, r2, lr
				temp |= ((uint32_t) (GPIO_Init->Alternate)
 800445e:	690a      	ldr	r2, [r1, #16]
						<< (((uint32_t) position & (uint32_t) 0x07) * 4));
 8004460:	40aa      	lsls	r2, r5
				temp |= ((uint32_t) (GPIO_Init->Alternate)
 8004462:	ea42 020e 	orr.w	r2, r2, lr
				GPIOx->AFR[position >> 3] = temp;
 8004466:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 800446a:	e05d      	b.n	8004528 <HAL_GPIO_Init+0x120>
				/* Enable SYSCFG Clock */
				__HAL_RCC_SYSCFG_CLK_ENABLE();

				temp = SYSCFG->EXTICR[position >> 2];
				temp &= ~(((uint32_t) 0x0F) << (4 * (position & 0x03)));
				temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 800446c:	2209      	movs	r2, #9
 800446e:	e000      	b.n	8004472 <HAL_GPIO_Init+0x6a>
 8004470:	2200      	movs	r2, #0
						<< (4 * (position & 0x03)));
 8004472:	fa02 f20e 	lsl.w	r2, r2, lr
				temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 8004476:	432a      	orrs	r2, r5
				SYSCFG->EXTICR[position >> 2] = temp;
 8004478:	3402      	adds	r4, #2
 800447a:	4d60      	ldr	r5, [pc, #384]	; (80045fc <HAL_GPIO_Init+0x1f4>)
 800447c:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

				/* Clear Rising Falling edge configuration */
				temp = EXTI->RTSR;
 8004480:	4a5f      	ldr	r2, [pc, #380]	; (8004600 <HAL_GPIO_Init+0x1f8>)
 8004482:	6894      	ldr	r4, [r2, #8]
				temp &= ~((uint32_t) iocurrent);
 8004484:	ea6f 020c 	mvn.w	r2, ip
 8004488:	ea24 050c 	bic.w	r5, r4, ip
				if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u) {
 800448c:	684e      	ldr	r6, [r1, #4]
 800448e:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 8004492:	d001      	beq.n	8004498 <HAL_GPIO_Init+0x90>
					temp |= iocurrent;
 8004494:	ea4c 0504 	orr.w	r5, ip, r4
				}
				EXTI->RTSR = temp;
 8004498:	4c59      	ldr	r4, [pc, #356]	; (8004600 <HAL_GPIO_Init+0x1f8>)
 800449a:	60a5      	str	r5, [r4, #8]

				temp = EXTI->FTSR;
 800449c:	68e4      	ldr	r4, [r4, #12]
				temp &= ~((uint32_t) iocurrent);
 800449e:	ea02 0504 	and.w	r5, r2, r4
				if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u) {
 80044a2:	684e      	ldr	r6, [r1, #4]
 80044a4:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80044a8:	d001      	beq.n	80044ae <HAL_GPIO_Init+0xa6>
					temp |= iocurrent;
 80044aa:	ea4c 0504 	orr.w	r5, ip, r4
				}
				EXTI->FTSR = temp;
 80044ae:	4c54      	ldr	r4, [pc, #336]	; (8004600 <HAL_GPIO_Init+0x1f8>)
 80044b0:	60e5      	str	r5, [r4, #12]

				temp = EXTI->EMR;
 80044b2:	6864      	ldr	r4, [r4, #4]
				temp &= ~((uint32_t) iocurrent);
 80044b4:	ea02 0504 	and.w	r5, r2, r4
				if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u) {
 80044b8:	684e      	ldr	r6, [r1, #4]
 80044ba:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 80044be:	d001      	beq.n	80044c4 <HAL_GPIO_Init+0xbc>
					temp |= iocurrent;
 80044c0:	ea4c 0504 	orr.w	r5, ip, r4
				}
				EXTI->EMR = temp;
 80044c4:	4c4e      	ldr	r4, [pc, #312]	; (8004600 <HAL_GPIO_Init+0x1f8>)
 80044c6:	6065      	str	r5, [r4, #4]

				/* Clear EXTI line configuration */
				temp = EXTI->IMR;
 80044c8:	6824      	ldr	r4, [r4, #0]
				temp &= ~((uint32_t) iocurrent);
 80044ca:	4022      	ands	r2, r4
				if ((GPIO_Init->Mode & EXTI_IT) != 0x00u) {
 80044cc:	684d      	ldr	r5, [r1, #4]
 80044ce:	f415 3f80 	tst.w	r5, #65536	; 0x10000
 80044d2:	d001      	beq.n	80044d8 <HAL_GPIO_Init+0xd0>
					temp |= iocurrent;
 80044d4:	ea4c 0204 	orr.w	r2, ip, r4
				}
				EXTI->IMR = temp;
 80044d8:	4c49      	ldr	r4, [pc, #292]	; (8004600 <HAL_GPIO_Init+0x1f8>)
 80044da:	6022      	str	r2, [r4, #0]
	for (position = 0; position < GPIO_NUMBER; position++) {
 80044dc:	3301      	adds	r3, #1
 80044de:	2b0f      	cmp	r3, #15
 80044e0:	f200 8088 	bhi.w	80045f4 <HAL_GPIO_Init+0x1ec>
		ioposition = ((uint32_t) 0x01) << position;
 80044e4:	2201      	movs	r2, #1
 80044e6:	409a      	lsls	r2, r3
		iocurrent = (uint32_t) (GPIO_Init->Pin) & ioposition;
 80044e8:	680c      	ldr	r4, [r1, #0]
 80044ea:	ea04 0c02 	and.w	ip, r4, r2
		if (iocurrent == ioposition) {
 80044ee:	ea32 0404 	bics.w	r4, r2, r4
 80044f2:	d1f3      	bne.n	80044dc <HAL_GPIO_Init+0xd4>
			if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT)
 80044f4:	684c      	ldr	r4, [r1, #4]
 80044f6:	f004 0403 	and.w	r4, r4, #3
					|| ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)) {
 80044fa:	3c01      	subs	r4, #1
			if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT)
 80044fc:	2c01      	cmp	r4, #1
 80044fe:	d98a      	bls.n	8004416 <HAL_GPIO_Init+0xe>
			if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) {
 8004500:	684a      	ldr	r2, [r1, #4]
 8004502:	f002 0203 	and.w	r2, r2, #3
 8004506:	2a03      	cmp	r2, #3
 8004508:	d009      	beq.n	800451e <HAL_GPIO_Init+0x116>
				temp = GPIOx->PUPDR;
 800450a:	68c4      	ldr	r4, [r0, #12]
				temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800450c:	005d      	lsls	r5, r3, #1
 800450e:	2203      	movs	r2, #3
 8004510:	40aa      	lsls	r2, r5
 8004512:	ea24 0402 	bic.w	r4, r4, r2
				temp |= ((GPIO_Init->Pull) << (position * 2));
 8004516:	688a      	ldr	r2, [r1, #8]
 8004518:	40aa      	lsls	r2, r5
 800451a:	4322      	orrs	r2, r4
				GPIOx->PUPDR = temp;
 800451c:	60c2      	str	r2, [r0, #12]
			if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
 800451e:	684a      	ldr	r2, [r1, #4]
 8004520:	f002 0203 	and.w	r2, r2, #3
 8004524:	2a02      	cmp	r2, #2
 8004526:	d08d      	beq.n	8004444 <HAL_GPIO_Init+0x3c>
			temp = GPIOx->MODER;
 8004528:	6804      	ldr	r4, [r0, #0]
			temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800452a:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800452e:	2203      	movs	r2, #3
 8004530:	fa02 f20e 	lsl.w	r2, r2, lr
 8004534:	ea24 0402 	bic.w	r4, r4, r2
			temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004538:	684a      	ldr	r2, [r1, #4]
 800453a:	f002 0203 	and.w	r2, r2, #3
 800453e:	fa02 f20e 	lsl.w	r2, r2, lr
 8004542:	4322      	orrs	r2, r4
			GPIOx->MODER = temp;
 8004544:	6002      	str	r2, [r0, #0]
			if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u) {
 8004546:	684a      	ldr	r2, [r1, #4]
 8004548:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 800454c:	d0c6      	beq.n	80044dc <HAL_GPIO_Init+0xd4>
				__HAL_RCC_SYSCFG_CLK_ENABLE();
 800454e:	4a2d      	ldr	r2, [pc, #180]	; (8004604 <HAL_GPIO_Init+0x1fc>)
 8004550:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8004552:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8004556:	6454      	str	r4, [r2, #68]	; 0x44
 8004558:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800455a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800455e:	9201      	str	r2, [sp, #4]
 8004560:	9a01      	ldr	r2, [sp, #4]
				temp = SYSCFG->EXTICR[position >> 2];
 8004562:	089c      	lsrs	r4, r3, #2
 8004564:	1ca5      	adds	r5, r4, #2
 8004566:	4a25      	ldr	r2, [pc, #148]	; (80045fc <HAL_GPIO_Init+0x1f4>)
 8004568:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
				temp &= ~(((uint32_t) 0x0F) << (4 * (position & 0x03)));
 800456c:	f003 0e03 	and.w	lr, r3, #3
 8004570:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8004574:	220f      	movs	r2, #15
 8004576:	fa02 f20e 	lsl.w	r2, r2, lr
 800457a:	ea25 0502 	bic.w	r5, r5, r2
				temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 800457e:	4a22      	ldr	r2, [pc, #136]	; (8004608 <HAL_GPIO_Init+0x200>)
 8004580:	4290      	cmp	r0, r2
 8004582:	f43f af75 	beq.w	8004470 <HAL_GPIO_Init+0x68>
 8004586:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800458a:	4290      	cmp	r0, r2
 800458c:	d022      	beq.n	80045d4 <HAL_GPIO_Init+0x1cc>
 800458e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004592:	4290      	cmp	r0, r2
 8004594:	d020      	beq.n	80045d8 <HAL_GPIO_Init+0x1d0>
 8004596:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800459a:	4290      	cmp	r0, r2
 800459c:	d01e      	beq.n	80045dc <HAL_GPIO_Init+0x1d4>
 800459e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80045a2:	4290      	cmp	r0, r2
 80045a4:	d01c      	beq.n	80045e0 <HAL_GPIO_Init+0x1d8>
 80045a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80045aa:	4290      	cmp	r0, r2
 80045ac:	d01a      	beq.n	80045e4 <HAL_GPIO_Init+0x1dc>
 80045ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80045b2:	4290      	cmp	r0, r2
 80045b4:	d018      	beq.n	80045e8 <HAL_GPIO_Init+0x1e0>
 80045b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80045ba:	4290      	cmp	r0, r2
 80045bc:	d016      	beq.n	80045ec <HAL_GPIO_Init+0x1e4>
 80045be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80045c2:	4290      	cmp	r0, r2
 80045c4:	d014      	beq.n	80045f0 <HAL_GPIO_Init+0x1e8>
 80045c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80045ca:	4290      	cmp	r0, r2
 80045cc:	f43f af4e 	beq.w	800446c <HAL_GPIO_Init+0x64>
 80045d0:	220a      	movs	r2, #10
 80045d2:	e74e      	b.n	8004472 <HAL_GPIO_Init+0x6a>
 80045d4:	2201      	movs	r2, #1
 80045d6:	e74c      	b.n	8004472 <HAL_GPIO_Init+0x6a>
 80045d8:	2202      	movs	r2, #2
 80045da:	e74a      	b.n	8004472 <HAL_GPIO_Init+0x6a>
 80045dc:	2203      	movs	r2, #3
 80045de:	e748      	b.n	8004472 <HAL_GPIO_Init+0x6a>
 80045e0:	2204      	movs	r2, #4
 80045e2:	e746      	b.n	8004472 <HAL_GPIO_Init+0x6a>
 80045e4:	2205      	movs	r2, #5
 80045e6:	e744      	b.n	8004472 <HAL_GPIO_Init+0x6a>
 80045e8:	2206      	movs	r2, #6
 80045ea:	e742      	b.n	8004472 <HAL_GPIO_Init+0x6a>
 80045ec:	2207      	movs	r2, #7
 80045ee:	e740      	b.n	8004472 <HAL_GPIO_Init+0x6a>
 80045f0:	2208      	movs	r2, #8
 80045f2:	e73e      	b.n	8004472 <HAL_GPIO_Init+0x6a>
			}
		}
	}
}
 80045f4:	b002      	add	sp, #8
 80045f6:	bd70      	pop	{r4, r5, r6, pc}
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	40013800 	.word	0x40013800
 8004600:	40013c00 	.word	0x40013c00
 8004604:	40023800 	.word	0x40023800
 8004608:	40020000 	.word	0x40020000

0800460c <HAL_GPIO_WritePin>:
		GPIO_PinState PinState) {
	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));
	assert_param(IS_GPIO_PIN_ACTION(PinState));

	if (PinState != GPIO_PIN_RESET) {
 800460c:	b10a      	cbz	r2, 8004612 <HAL_GPIO_WritePin+0x6>
		GPIOx->BSRR = GPIO_Pin;
 800460e:	6181      	str	r1, [r0, #24]
 8004610:	4770      	bx	lr
	} else {
		GPIOx->BSRR = (uint32_t) GPIO_Pin << 16;
 8004612:	0409      	lsls	r1, r1, #16
 8004614:	6181      	str	r1, [r0, #24]
	}
}
 8004616:	4770      	bx	lr

08004618 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004618:	6803      	ldr	r3, [r0, #0]
 800461a:	699a      	ldr	r2, [r3, #24]
 800461c:	f012 0f02 	tst.w	r2, #2
 8004620:	d001      	beq.n	8004626 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004622:	2200      	movs	r2, #0
 8004624:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004626:	6803      	ldr	r3, [r0, #0]
 8004628:	699a      	ldr	r2, [r3, #24]
 800462a:	f012 0f01 	tst.w	r2, #1
 800462e:	d103      	bne.n	8004638 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004630:	699a      	ldr	r2, [r3, #24]
 8004632:	f042 0201 	orr.w	r2, r2, #1
 8004636:	619a      	str	r2, [r3, #24]
  }
}
 8004638:	4770      	bx	lr

0800463a <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800463a:	b410      	push	{r4}
 800463c:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800463e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004642:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004646:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004648:	4321      	orrs	r1, r4
 800464a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800464e:	6802      	ldr	r2, [r0, #0]
 8004650:	6853      	ldr	r3, [r2, #4]
 8004652:	0d64      	lsrs	r4, r4, #21
 8004654:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8004658:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 800465c:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8004660:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8004664:	f044 0403 	orr.w	r4, r4, #3
 8004668:	ea23 0304 	bic.w	r3, r3, r4
 800466c:	430b      	orrs	r3, r1
 800466e:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004670:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004674:	4770      	bx	lr

08004676 <I2C_IsErrorOccurred>:
{
 8004676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800467a:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 800467c:	6803      	ldr	r3, [r0, #0]
 800467e:	699e      	ldr	r6, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004680:	f016 0610 	ands.w	r6, r6, #16
 8004684:	d07e      	beq.n	8004784 <I2C_IsErrorOccurred+0x10e>
 8004686:	460d      	mov	r5, r1
 8004688:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800468a:	2210      	movs	r2, #16
 800468c:	61da      	str	r2, [r3, #28]
  uint32_t error_code = 0;
 800468e:	2600      	movs	r6, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004690:	4637      	mov	r7, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004692:	6823      	ldr	r3, [r4, #0]
 8004694:	6998      	ldr	r0, [r3, #24]
 8004696:	f010 0f20 	tst.w	r0, #32
 800469a:	d132      	bne.n	8004702 <I2C_IsErrorOccurred+0x8c>
 800469c:	bb8f      	cbnz	r7, 8004702 <I2C_IsErrorOccurred+0x8c>
      if (Timeout != HAL_MAX_DELAY)
 800469e:	f1b5 3fff 	cmp.w	r5, #4294967295
 80046a2:	d0f6      	beq.n	8004692 <I2C_IsErrorOccurred+0x1c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80046a4:	f7ff f836 	bl	8003714 <HAL_GetTick>
 80046a8:	eba0 0008 	sub.w	r0, r0, r8
 80046ac:	42a8      	cmp	r0, r5
 80046ae:	d801      	bhi.n	80046b4 <I2C_IsErrorOccurred+0x3e>
 80046b0:	2d00      	cmp	r5, #0
 80046b2:	d1ee      	bne.n	8004692 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80046b4:	6821      	ldr	r1, [r4, #0]
 80046b6:	684a      	ldr	r2, [r1, #4]
 80046b8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
          tmp2 = hi2c->Mode;
 80046bc:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80046c0:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80046c2:	6988      	ldr	r0, [r1, #24]
 80046c4:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80046c8:	d004      	beq.n	80046d4 <I2C_IsErrorOccurred+0x5e>
              (tmp2 != HAL_I2C_MODE_SLAVE))
 80046ca:	3b20      	subs	r3, #32
 80046cc:	bf18      	it	ne
 80046ce:	2301      	movne	r3, #1
              (tmp1 != I2C_CR2_STOP) && \
 80046d0:	b902      	cbnz	r2, 80046d4 <I2C_IsErrorOccurred+0x5e>
 80046d2:	b973      	cbnz	r3, 80046f2 <I2C_IsErrorOccurred+0x7c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046d4:	6823      	ldr	r3, [r4, #0]
 80046d6:	699b      	ldr	r3, [r3, #24]
 80046d8:	f013 0f20 	tst.w	r3, #32
 80046dc:	d1d9      	bne.n	8004692 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80046de:	f7ff f819 	bl	8003714 <HAL_GetTick>
 80046e2:	eba0 0008 	sub.w	r0, r0, r8
 80046e6:	2819      	cmp	r0, #25
 80046e8:	d9f4      	bls.n	80046d4 <I2C_IsErrorOccurred+0x5e>
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80046ea:	f046 0620 	orr.w	r6, r6, #32
              status = HAL_ERROR;
 80046ee:	2701      	movs	r7, #1
              break;
 80046f0:	e7cf      	b.n	8004692 <I2C_IsErrorOccurred+0x1c>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80046f2:	684b      	ldr	r3, [r1, #4]
 80046f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046f8:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 80046fa:	f7ff f80b 	bl	8003714 <HAL_GetTick>
 80046fe:	4680      	mov	r8, r0
 8004700:	e7e8      	b.n	80046d4 <I2C_IsErrorOccurred+0x5e>
    if (status == HAL_OK)
 8004702:	b90f      	cbnz	r7, 8004708 <I2C_IsErrorOccurred+0x92>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004704:	2220      	movs	r2, #32
 8004706:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8004708:	f046 0604 	orr.w	r6, r6, #4
    status = HAL_ERROR;
 800470c:	2501      	movs	r5, #1
  itflag = hi2c->Instance->ISR;
 800470e:	6822      	ldr	r2, [r4, #0]
 8004710:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004712:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004716:	d005      	beq.n	8004724 <I2C_IsErrorOccurred+0xae>
    error_code |= HAL_I2C_ERROR_BERR;
 8004718:	f046 0601 	orr.w	r6, r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800471c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004720:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8004722:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004724:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004728:	d006      	beq.n	8004738 <I2C_IsErrorOccurred+0xc2>
    error_code |= HAL_I2C_ERROR_OVR;
 800472a:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800472e:	6822      	ldr	r2, [r4, #0]
 8004730:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004734:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8004736:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004738:	f413 7f00 	tst.w	r3, #512	; 0x200
 800473c:	d024      	beq.n	8004788 <I2C_IsErrorOccurred+0x112>
    error_code |= HAL_I2C_ERROR_ARLO;
 800473e:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004742:	6823      	ldr	r3, [r4, #0]
 8004744:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004748:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 800474a:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 800474c:	4620      	mov	r0, r4
 800474e:	f7ff ff63 	bl	8004618 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8004752:	6822      	ldr	r2, [r4, #0]
 8004754:	6853      	ldr	r3, [r2, #4]
 8004756:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800475a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800475e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8004762:	f023 0301 	bic.w	r3, r3, #1
 8004766:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8004768:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800476a:	4333      	orrs	r3, r6
 800476c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800476e:	2320      	movs	r3, #32
 8004770:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004774:	2300      	movs	r3, #0
 8004776:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800477a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800477e:	4628      	mov	r0, r5
 8004780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8004784:	2500      	movs	r5, #0
 8004786:	e7c2      	b.n	800470e <I2C_IsErrorOccurred+0x98>
  if (status != HAL_OK)
 8004788:	2d00      	cmp	r5, #0
 800478a:	d0f8      	beq.n	800477e <I2C_IsErrorOccurred+0x108>
 800478c:	e7de      	b.n	800474c <I2C_IsErrorOccurred+0xd6>

0800478e <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800478e:	b570      	push	{r4, r5, r6, lr}
 8004790:	4604      	mov	r4, r0
 8004792:	460d      	mov	r5, r1
 8004794:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004796:	6823      	ldr	r3, [r4, #0]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	f013 0f02 	tst.w	r3, #2
 800479e:	d11d      	bne.n	80047dc <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80047a0:	4632      	mov	r2, r6
 80047a2:	4629      	mov	r1, r5
 80047a4:	4620      	mov	r0, r4
 80047a6:	f7ff ff66 	bl	8004676 <I2C_IsErrorOccurred>
 80047aa:	b9c8      	cbnz	r0, 80047e0 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 80047ac:	f1b5 3fff 	cmp.w	r5, #4294967295
 80047b0:	d0f1      	beq.n	8004796 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047b2:	f7fe ffaf 	bl	8003714 <HAL_GetTick>
 80047b6:	1b80      	subs	r0, r0, r6
 80047b8:	42a8      	cmp	r0, r5
 80047ba:	d801      	bhi.n	80047c0 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80047bc:	2d00      	cmp	r5, #0
 80047be:	d1ea      	bne.n	8004796 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047c0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80047c2:	f043 0320 	orr.w	r3, r3, #32
 80047c6:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80047c8:	2320      	movs	r3, #32
 80047ca:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ce:	2300      	movs	r3, #0
 80047d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80047d4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80047d8:	2001      	movs	r0, #1
 80047da:	e000      	b.n	80047de <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 80047dc:	2000      	movs	r0, #0
}
 80047de:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80047e0:	2001      	movs	r0, #1
 80047e2:	e7fc      	b.n	80047de <I2C_WaitOnTXISFlagUntilTimeout+0x50>

080047e4 <I2C_WaitOnFlagUntilTimeout>:
{
 80047e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047e8:	4606      	mov	r6, r0
 80047ea:	4688      	mov	r8, r1
 80047ec:	4617      	mov	r7, r2
 80047ee:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047f0:	6834      	ldr	r4, [r6, #0]
 80047f2:	69a4      	ldr	r4, [r4, #24]
 80047f4:	ea38 0404 	bics.w	r4, r8, r4
 80047f8:	bf0c      	ite	eq
 80047fa:	2401      	moveq	r4, #1
 80047fc:	2400      	movne	r4, #0
 80047fe:	42bc      	cmp	r4, r7
 8004800:	d118      	bne.n	8004834 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8004802:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004806:	d0f3      	beq.n	80047f0 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004808:	f7fe ff84 	bl	8003714 <HAL_GetTick>
 800480c:	9b06      	ldr	r3, [sp, #24]
 800480e:	1ac0      	subs	r0, r0, r3
 8004810:	42a8      	cmp	r0, r5
 8004812:	d801      	bhi.n	8004818 <I2C_WaitOnFlagUntilTimeout+0x34>
 8004814:	2d00      	cmp	r5, #0
 8004816:	d1eb      	bne.n	80047f0 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004818:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800481a:	f043 0320 	orr.w	r3, r3, #32
 800481e:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004820:	2320      	movs	r3, #32
 8004822:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004826:	2300      	movs	r3, #0
 8004828:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800482c:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8004830:	2001      	movs	r0, #1
 8004832:	e000      	b.n	8004836 <I2C_WaitOnFlagUntilTimeout+0x52>
  return HAL_OK;
 8004834:	2000      	movs	r0, #0
}
 8004836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800483c <I2C_RequestMemoryWrite>:
{
 800483c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004840:	b082      	sub	sp, #8
 8004842:	4604      	mov	r4, r0
 8004844:	4690      	mov	r8, r2
 8004846:	461d      	mov	r5, r3
 8004848:	9e08      	ldr	r6, [sp, #32]
 800484a:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800484c:	4b19      	ldr	r3, [pc, #100]	; (80048b4 <I2C_RequestMemoryWrite+0x78>)
 800484e:	9300      	str	r3, [sp, #0]
 8004850:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004854:	b2ea      	uxtb	r2, r5
 8004856:	f7ff fef0 	bl	800463a <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800485a:	463a      	mov	r2, r7
 800485c:	4631      	mov	r1, r6
 800485e:	4620      	mov	r0, r4
 8004860:	f7ff ff95 	bl	800478e <I2C_WaitOnTXISFlagUntilTimeout>
 8004864:	b9f8      	cbnz	r0, 80048a6 <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004866:	2d01      	cmp	r5, #1
 8004868:	d10e      	bne.n	8004888 <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800486a:	6823      	ldr	r3, [r4, #0]
 800486c:	fa5f f288 	uxtb.w	r2, r8
 8004870:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004872:	9700      	str	r7, [sp, #0]
 8004874:	4633      	mov	r3, r6
 8004876:	2200      	movs	r2, #0
 8004878:	2180      	movs	r1, #128	; 0x80
 800487a:	4620      	mov	r0, r4
 800487c:	f7ff ffb2 	bl	80047e4 <I2C_WaitOnFlagUntilTimeout>
 8004880:	b9a8      	cbnz	r0, 80048ae <I2C_RequestMemoryWrite+0x72>
}
 8004882:	b002      	add	sp, #8
 8004884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004888:	6823      	ldr	r3, [r4, #0]
 800488a:	ea4f 2218 	mov.w	r2, r8, lsr #8
 800488e:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004890:	463a      	mov	r2, r7
 8004892:	4631      	mov	r1, r6
 8004894:	4620      	mov	r0, r4
 8004896:	f7ff ff7a 	bl	800478e <I2C_WaitOnTXISFlagUntilTimeout>
 800489a:	b930      	cbnz	r0, 80048aa <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800489c:	6823      	ldr	r3, [r4, #0]
 800489e:	fa5f f288 	uxtb.w	r2, r8
 80048a2:	629a      	str	r2, [r3, #40]	; 0x28
 80048a4:	e7e5      	b.n	8004872 <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 80048a6:	2001      	movs	r0, #1
 80048a8:	e7eb      	b.n	8004882 <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 80048aa:	2001      	movs	r0, #1
 80048ac:	e7e9      	b.n	8004882 <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 80048ae:	2001      	movs	r0, #1
 80048b0:	e7e7      	b.n	8004882 <I2C_RequestMemoryWrite+0x46>
 80048b2:	bf00      	nop
 80048b4:	80002000 	.word	0x80002000

080048b8 <I2C_RequestMemoryRead>:
{
 80048b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048bc:	b082      	sub	sp, #8
 80048be:	4604      	mov	r4, r0
 80048c0:	4690      	mov	r8, r2
 80048c2:	461d      	mov	r5, r3
 80048c4:	9e08      	ldr	r6, [sp, #32]
 80048c6:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80048c8:	4b18      	ldr	r3, [pc, #96]	; (800492c <I2C_RequestMemoryRead+0x74>)
 80048ca:	9300      	str	r3, [sp, #0]
 80048cc:	2300      	movs	r3, #0
 80048ce:	b2ea      	uxtb	r2, r5
 80048d0:	f7ff feb3 	bl	800463a <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048d4:	463a      	mov	r2, r7
 80048d6:	4631      	mov	r1, r6
 80048d8:	4620      	mov	r0, r4
 80048da:	f7ff ff58 	bl	800478e <I2C_WaitOnTXISFlagUntilTimeout>
 80048de:	b9f8      	cbnz	r0, 8004920 <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048e0:	2d01      	cmp	r5, #1
 80048e2:	d10e      	bne.n	8004902 <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80048e4:	6823      	ldr	r3, [r4, #0]
 80048e6:	fa5f f288 	uxtb.w	r2, r8
 80048ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80048ec:	9700      	str	r7, [sp, #0]
 80048ee:	4633      	mov	r3, r6
 80048f0:	2200      	movs	r2, #0
 80048f2:	2140      	movs	r1, #64	; 0x40
 80048f4:	4620      	mov	r0, r4
 80048f6:	f7ff ff75 	bl	80047e4 <I2C_WaitOnFlagUntilTimeout>
 80048fa:	b9a8      	cbnz	r0, 8004928 <I2C_RequestMemoryRead+0x70>
}
 80048fc:	b002      	add	sp, #8
 80048fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004902:	6823      	ldr	r3, [r4, #0]
 8004904:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8004908:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800490a:	463a      	mov	r2, r7
 800490c:	4631      	mov	r1, r6
 800490e:	4620      	mov	r0, r4
 8004910:	f7ff ff3d 	bl	800478e <I2C_WaitOnTXISFlagUntilTimeout>
 8004914:	b930      	cbnz	r0, 8004924 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004916:	6823      	ldr	r3, [r4, #0]
 8004918:	fa5f f288 	uxtb.w	r2, r8
 800491c:	629a      	str	r2, [r3, #40]	; 0x28
 800491e:	e7e5      	b.n	80048ec <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 8004920:	2001      	movs	r0, #1
 8004922:	e7eb      	b.n	80048fc <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 8004924:	2001      	movs	r0, #1
 8004926:	e7e9      	b.n	80048fc <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 8004928:	2001      	movs	r0, #1
 800492a:	e7e7      	b.n	80048fc <I2C_RequestMemoryRead+0x44>
 800492c:	80002000 	.word	0x80002000

08004930 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8004930:	b570      	push	{r4, r5, r6, lr}
 8004932:	4605      	mov	r5, r0
 8004934:	460c      	mov	r4, r1
 8004936:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004938:	682b      	ldr	r3, [r5, #0]
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	f013 0f20 	tst.w	r3, #32
 8004940:	d11a      	bne.n	8004978 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004942:	4632      	mov	r2, r6
 8004944:	4621      	mov	r1, r4
 8004946:	4628      	mov	r0, r5
 8004948:	f7ff fe95 	bl	8004676 <I2C_IsErrorOccurred>
 800494c:	b9b0      	cbnz	r0, 800497c <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800494e:	f7fe fee1 	bl	8003714 <HAL_GetTick>
 8004952:	1b80      	subs	r0, r0, r6
 8004954:	42a0      	cmp	r0, r4
 8004956:	d801      	bhi.n	800495c <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8004958:	2c00      	cmp	r4, #0
 800495a:	d1ed      	bne.n	8004938 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800495c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800495e:	f043 0320 	orr.w	r3, r3, #32
 8004962:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004964:	2320      	movs	r3, #32
 8004966:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800496a:	2300      	movs	r3, #0
 800496c:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004970:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8004974:	2001      	movs	r0, #1
}
 8004976:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8004978:	2000      	movs	r0, #0
 800497a:	e7fc      	b.n	8004976 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 800497c:	2001      	movs	r0, #1
 800497e:	e7fa      	b.n	8004976 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08004980 <HAL_I2C_MspInit>:
}
 8004980:	4770      	bx	lr
	...

08004984 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8004984:	2800      	cmp	r0, #0
 8004986:	d057      	beq.n	8004a38 <HAL_I2C_Init+0xb4>
{
 8004988:	b510      	push	{r4, lr}
 800498a:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800498c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004990:	2b00      	cmp	r3, #0
 8004992:	d041      	beq.n	8004a18 <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004994:	2324      	movs	r3, #36	; 0x24
 8004996:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800499a:	6822      	ldr	r2, [r4, #0]
 800499c:	6813      	ldr	r3, [r2, #0]
 800499e:	f023 0301 	bic.w	r3, r3, #1
 80049a2:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80049a4:	6863      	ldr	r3, [r4, #4]
 80049a6:	6822      	ldr	r2, [r4, #0]
 80049a8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80049ac:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80049ae:	6822      	ldr	r2, [r4, #0]
 80049b0:	6893      	ldr	r3, [r2, #8]
 80049b2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80049b6:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80049b8:	68e3      	ldr	r3, [r4, #12]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d031      	beq.n	8004a22 <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80049be:	68a3      	ldr	r3, [r4, #8]
 80049c0:	6822      	ldr	r2, [r4, #0]
 80049c2:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 80049c6:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80049c8:	68e3      	ldr	r3, [r4, #12]
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d02f      	beq.n	8004a2e <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80049ce:	6822      	ldr	r2, [r4, #0]
 80049d0:	6851      	ldr	r1, [r2, #4]
 80049d2:	4b1a      	ldr	r3, [pc, #104]	; (8004a3c <HAL_I2C_Init+0xb8>)
 80049d4:	430b      	orrs	r3, r1
 80049d6:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80049d8:	6822      	ldr	r2, [r4, #0]
 80049da:	68d3      	ldr	r3, [r2, #12]
 80049dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80049e0:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80049e2:	6923      	ldr	r3, [r4, #16]
 80049e4:	6962      	ldr	r2, [r4, #20]
 80049e6:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80049e8:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80049ea:	6822      	ldr	r2, [r4, #0]
 80049ec:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80049f0:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80049f2:	69e3      	ldr	r3, [r4, #28]
 80049f4:	6a21      	ldr	r1, [r4, #32]
 80049f6:	6822      	ldr	r2, [r4, #0]
 80049f8:	430b      	orrs	r3, r1
 80049fa:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 80049fc:	6822      	ldr	r2, [r4, #0]
 80049fe:	6813      	ldr	r3, [r2, #0]
 8004a00:	f043 0301 	orr.w	r3, r3, #1
 8004a04:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a06:	2000      	movs	r0, #0
 8004a08:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004a0a:	2320      	movs	r3, #32
 8004a0c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a10:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a12:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8004a16:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8004a18:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8004a1c:	f7ff ffb0 	bl	8004980 <HAL_I2C_MspInit>
 8004a20:	e7b8      	b.n	8004994 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004a22:	68a3      	ldr	r3, [r4, #8]
 8004a24:	6822      	ldr	r2, [r4, #0]
 8004a26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a2a:	6093      	str	r3, [r2, #8]
 8004a2c:	e7cc      	b.n	80049c8 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004a2e:	6823      	ldr	r3, [r4, #0]
 8004a30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a34:	605a      	str	r2, [r3, #4]
 8004a36:	e7ca      	b.n	80049ce <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8004a38:	2001      	movs	r0, #1
}
 8004a3a:	4770      	bx	lr
 8004a3c:	02008000 	.word	0x02008000

08004a40 <HAL_I2C_Mem_Write>:
{
 8004a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a44:	b083      	sub	sp, #12
 8004a46:	460d      	mov	r5, r1
 8004a48:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8004a4c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a4e:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8004a52:	b2c9      	uxtb	r1, r1
 8004a54:	2920      	cmp	r1, #32
 8004a56:	f040 80bc 	bne.w	8004bd2 <HAL_I2C_Mem_Write+0x192>
 8004a5a:	4604      	mov	r4, r0
 8004a5c:	4690      	mov	r8, r2
 8004a5e:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8004a60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a62:	f1ba 0f00 	cmp.w	sl, #0
 8004a66:	bf18      	it	ne
 8004a68:	2b00      	cmpne	r3, #0
 8004a6a:	d016      	beq.n	8004a9a <HAL_I2C_Mem_Write+0x5a>
    __HAL_LOCK(hi2c);
 8004a6c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	f000 80b2 	beq.w	8004bda <HAL_I2C_Mem_Write+0x19a>
 8004a76:	f04f 0b01 	mov.w	fp, #1
 8004a7a:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8004a7e:	f7fe fe49 	bl	8003714 <HAL_GetTick>
 8004a82:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004a84:	9000      	str	r0, [sp, #0]
 8004a86:	2319      	movs	r3, #25
 8004a88:	465a      	mov	r2, fp
 8004a8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a8e:	4620      	mov	r0, r4
 8004a90:	f7ff fea8 	bl	80047e4 <I2C_WaitOnFlagUntilTimeout>
 8004a94:	b130      	cbz	r0, 8004aa4 <HAL_I2C_Mem_Write+0x64>
      return HAL_ERROR;
 8004a96:	2001      	movs	r0, #1
 8004a98:	e09c      	b.n	8004bd4 <HAL_I2C_Mem_Write+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004a9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a9e:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8004aa0:	2001      	movs	r0, #1
 8004aa2:	e097      	b.n	8004bd4 <HAL_I2C_Mem_Write+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004aa4:	2321      	movs	r3, #33	; 0x21
 8004aa6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004aaa:	2340      	movs	r3, #64	; 0x40
 8004aac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8004ab4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004ab6:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8004ab8:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004abc:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004abe:	9601      	str	r6, [sp, #4]
 8004ac0:	9700      	str	r7, [sp, #0]
 8004ac2:	464b      	mov	r3, r9
 8004ac4:	4642      	mov	r2, r8
 8004ac6:	4629      	mov	r1, r5
 8004ac8:	4620      	mov	r0, r4
 8004aca:	f7ff feb7 	bl	800483c <I2C_RequestMemoryWrite>
 8004ace:	b970      	cbnz	r0, 8004aee <HAL_I2C_Mem_Write+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ad0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	2bff      	cmp	r3, #255	; 0xff
 8004ad6:	d90f      	bls.n	8004af8 <HAL_I2C_Mem_Write+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ad8:	22ff      	movs	r2, #255	; 0xff
 8004ada:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004adc:	2300      	movs	r3, #0
 8004ade:	9300      	str	r3, [sp, #0]
 8004ae0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ae4:	4629      	mov	r1, r5
 8004ae6:	4620      	mov	r0, r4
 8004ae8:	f7ff fda7 	bl	800463a <I2C_TransferConfig>
 8004aec:	e021      	b.n	8004b32 <HAL_I2C_Mem_Write+0xf2>
      __HAL_UNLOCK(hi2c);
 8004aee:	2300      	movs	r3, #0
 8004af0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004af4:	4658      	mov	r0, fp
 8004af6:	e06d      	b.n	8004bd4 <HAL_I2C_Mem_Write+0x194>
      hi2c->XferSize = hi2c->XferCount;
 8004af8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004afa:	b292      	uxth	r2, r2
 8004afc:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004afe:	2300      	movs	r3, #0
 8004b00:	9300      	str	r3, [sp, #0]
 8004b02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b06:	b2d2      	uxtb	r2, r2
 8004b08:	4629      	mov	r1, r5
 8004b0a:	4620      	mov	r0, r4
 8004b0c:	f7ff fd95 	bl	800463a <I2C_TransferConfig>
 8004b10:	e00f      	b.n	8004b32 <HAL_I2C_Mem_Write+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 8004b12:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004b14:	b292      	uxth	r2, r2
 8004b16:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b18:	2300      	movs	r3, #0
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b20:	b2d2      	uxtb	r2, r2
 8004b22:	4629      	mov	r1, r5
 8004b24:	4620      	mov	r0, r4
 8004b26:	f7ff fd88 	bl	800463a <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8004b2a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d033      	beq.n	8004b9a <HAL_I2C_Mem_Write+0x15a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b32:	4632      	mov	r2, r6
 8004b34:	4639      	mov	r1, r7
 8004b36:	4620      	mov	r0, r4
 8004b38:	f7ff fe29 	bl	800478e <I2C_WaitOnTXISFlagUntilTimeout>
 8004b3c:	2800      	cmp	r0, #0
 8004b3e:	d14e      	bne.n	8004bde <HAL_I2C_Mem_Write+0x19e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004b40:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004b42:	6823      	ldr	r3, [r4, #0]
 8004b44:	7812      	ldrb	r2, [r2, #0]
 8004b46:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8004b48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004b4e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	3b01      	subs	r3, #1
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004b58:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b60:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004b62:	b292      	uxth	r2, r2
 8004b64:	2a00      	cmp	r2, #0
 8004b66:	d0e0      	beq.n	8004b2a <HAL_I2C_Mem_Write+0xea>
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1de      	bne.n	8004b2a <HAL_I2C_Mem_Write+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004b6c:	9600      	str	r6, [sp, #0]
 8004b6e:	463b      	mov	r3, r7
 8004b70:	2200      	movs	r2, #0
 8004b72:	2180      	movs	r1, #128	; 0x80
 8004b74:	4620      	mov	r0, r4
 8004b76:	f7ff fe35 	bl	80047e4 <I2C_WaitOnFlagUntilTimeout>
 8004b7a:	bb90      	cbnz	r0, 8004be2 <HAL_I2C_Mem_Write+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b7c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	2bff      	cmp	r3, #255	; 0xff
 8004b82:	d9c6      	bls.n	8004b12 <HAL_I2C_Mem_Write+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b84:	22ff      	movs	r2, #255	; 0xff
 8004b86:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004b88:	2300      	movs	r3, #0
 8004b8a:	9300      	str	r3, [sp, #0]
 8004b8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b90:	4629      	mov	r1, r5
 8004b92:	4620      	mov	r0, r4
 8004b94:	f7ff fd51 	bl	800463a <I2C_TransferConfig>
 8004b98:	e7c7      	b.n	8004b2a <HAL_I2C_Mem_Write+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b9a:	4632      	mov	r2, r6
 8004b9c:	4639      	mov	r1, r7
 8004b9e:	4620      	mov	r0, r4
 8004ba0:	f7ff fec6 	bl	8004930 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004ba4:	b9f8      	cbnz	r0, 8004be6 <HAL_I2C_Mem_Write+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ba6:	6823      	ldr	r3, [r4, #0]
 8004ba8:	2220      	movs	r2, #32
 8004baa:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004bac:	6821      	ldr	r1, [r4, #0]
 8004bae:	684b      	ldr	r3, [r1, #4]
 8004bb0:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8004bb4:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8004bb8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8004bbc:	f023 0301 	bic.w	r3, r3, #1
 8004bc0:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004bc2:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8004bcc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8004bd0:	e000      	b.n	8004bd4 <HAL_I2C_Mem_Write+0x194>
    return HAL_BUSY;
 8004bd2:	2002      	movs	r0, #2
}
 8004bd4:	b003      	add	sp, #12
 8004bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8004bda:	2002      	movs	r0, #2
 8004bdc:	e7fa      	b.n	8004bd4 <HAL_I2C_Mem_Write+0x194>
        return HAL_ERROR;
 8004bde:	2001      	movs	r0, #1
 8004be0:	e7f8      	b.n	8004bd4 <HAL_I2C_Mem_Write+0x194>
          return HAL_ERROR;
 8004be2:	2001      	movs	r0, #1
 8004be4:	e7f6      	b.n	8004bd4 <HAL_I2C_Mem_Write+0x194>
      return HAL_ERROR;
 8004be6:	2001      	movs	r0, #1
 8004be8:	e7f4      	b.n	8004bd4 <HAL_I2C_Mem_Write+0x194>
	...

08004bec <HAL_I2C_Mem_Read>:
{
 8004bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bf0:	b083      	sub	sp, #12
 8004bf2:	460d      	mov	r5, r1
 8004bf4:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8004bf8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bfa:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8004bfe:	b2c9      	uxtb	r1, r1
 8004c00:	2920      	cmp	r1, #32
 8004c02:	f040 80bd 	bne.w	8004d80 <HAL_I2C_Mem_Read+0x194>
 8004c06:	4604      	mov	r4, r0
 8004c08:	4690      	mov	r8, r2
 8004c0a:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8004c0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004c0e:	f1ba 0f00 	cmp.w	sl, #0
 8004c12:	bf18      	it	ne
 8004c14:	2b00      	cmpne	r3, #0
 8004c16:	d016      	beq.n	8004c46 <HAL_I2C_Mem_Read+0x5a>
    __HAL_LOCK(hi2c);
 8004c18:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	f000 80b3 	beq.w	8004d88 <HAL_I2C_Mem_Read+0x19c>
 8004c22:	f04f 0b01 	mov.w	fp, #1
 8004c26:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8004c2a:	f7fe fd73 	bl	8003714 <HAL_GetTick>
 8004c2e:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004c30:	9000      	str	r0, [sp, #0]
 8004c32:	2319      	movs	r3, #25
 8004c34:	465a      	mov	r2, fp
 8004c36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c3a:	4620      	mov	r0, r4
 8004c3c:	f7ff fdd2 	bl	80047e4 <I2C_WaitOnFlagUntilTimeout>
 8004c40:	b130      	cbz	r0, 8004c50 <HAL_I2C_Mem_Read+0x64>
      return HAL_ERROR;
 8004c42:	2001      	movs	r0, #1
 8004c44:	e09d      	b.n	8004d82 <HAL_I2C_Mem_Read+0x196>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004c46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c4a:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8004c4c:	2001      	movs	r0, #1
 8004c4e:	e098      	b.n	8004d82 <HAL_I2C_Mem_Read+0x196>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c50:	2322      	movs	r3, #34	; 0x22
 8004c52:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c56:	2340      	movs	r3, #64	; 0x40
 8004c58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8004c60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004c62:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8004c64:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004c68:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c6a:	9601      	str	r6, [sp, #4]
 8004c6c:	9700      	str	r7, [sp, #0]
 8004c6e:	464b      	mov	r3, r9
 8004c70:	4642      	mov	r2, r8
 8004c72:	4629      	mov	r1, r5
 8004c74:	4620      	mov	r0, r4
 8004c76:	f7ff fe1f 	bl	80048b8 <I2C_RequestMemoryRead>
 8004c7a:	b970      	cbnz	r0, 8004c9a <HAL_I2C_Mem_Read+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c7c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	2bff      	cmp	r3, #255	; 0xff
 8004c82:	d90f      	bls.n	8004ca4 <HAL_I2C_Mem_Read+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c84:	22ff      	movs	r2, #255	; 0xff
 8004c86:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004c88:	4b43      	ldr	r3, [pc, #268]	; (8004d98 <HAL_I2C_Mem_Read+0x1ac>)
 8004c8a:	9300      	str	r3, [sp, #0]
 8004c8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c90:	4629      	mov	r1, r5
 8004c92:	4620      	mov	r0, r4
 8004c94:	f7ff fcd1 	bl	800463a <I2C_TransferConfig>
 8004c98:	e021      	b.n	8004cde <HAL_I2C_Mem_Read+0xf2>
      __HAL_UNLOCK(hi2c);
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004ca0:	4658      	mov	r0, fp
 8004ca2:	e06e      	b.n	8004d82 <HAL_I2C_Mem_Read+0x196>
      hi2c->XferSize = hi2c->XferCount;
 8004ca4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004ca6:	b292      	uxth	r2, r2
 8004ca8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004caa:	4b3b      	ldr	r3, [pc, #236]	; (8004d98 <HAL_I2C_Mem_Read+0x1ac>)
 8004cac:	9300      	str	r3, [sp, #0]
 8004cae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004cb2:	b2d2      	uxtb	r2, r2
 8004cb4:	4629      	mov	r1, r5
 8004cb6:	4620      	mov	r0, r4
 8004cb8:	f7ff fcbf 	bl	800463a <I2C_TransferConfig>
 8004cbc:	e00f      	b.n	8004cde <HAL_I2C_Mem_Read+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 8004cbe:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004cc0:	b292      	uxth	r2, r2
 8004cc2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	9300      	str	r3, [sp, #0]
 8004cc8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ccc:	b2d2      	uxtb	r2, r2
 8004cce:	4629      	mov	r1, r5
 8004cd0:	4620      	mov	r0, r4
 8004cd2:	f7ff fcb2 	bl	800463a <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8004cd6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d034      	beq.n	8004d48 <HAL_I2C_Mem_Read+0x15c>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004cde:	9600      	str	r6, [sp, #0]
 8004ce0:	463b      	mov	r3, r7
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	2104      	movs	r1, #4
 8004ce6:	4620      	mov	r0, r4
 8004ce8:	f7ff fd7c 	bl	80047e4 <I2C_WaitOnFlagUntilTimeout>
 8004cec:	2800      	cmp	r0, #0
 8004cee:	d14d      	bne.n	8004d8c <HAL_I2C_Mem_Read+0x1a0>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004cf0:	6823      	ldr	r3, [r4, #0]
 8004cf2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cf4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004cf6:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004cf8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8004cfe:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8004d00:	3a01      	subs	r2, #1
 8004d02:	b292      	uxth	r2, r2
 8004d04:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004d06:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d10:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d0de      	beq.n	8004cd6 <HAL_I2C_Mem_Read+0xea>
 8004d18:	2a00      	cmp	r2, #0
 8004d1a:	d1dc      	bne.n	8004cd6 <HAL_I2C_Mem_Read+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d1c:	9600      	str	r6, [sp, #0]
 8004d1e:	463b      	mov	r3, r7
 8004d20:	2180      	movs	r1, #128	; 0x80
 8004d22:	4620      	mov	r0, r4
 8004d24:	f7ff fd5e 	bl	80047e4 <I2C_WaitOnFlagUntilTimeout>
 8004d28:	bb90      	cbnz	r0, 8004d90 <HAL_I2C_Mem_Read+0x1a4>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d2a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	2bff      	cmp	r3, #255	; 0xff
 8004d30:	d9c5      	bls.n	8004cbe <HAL_I2C_Mem_Read+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d32:	22ff      	movs	r2, #255	; 0xff
 8004d34:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004d36:	2300      	movs	r3, #0
 8004d38:	9300      	str	r3, [sp, #0]
 8004d3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d3e:	4629      	mov	r1, r5
 8004d40:	4620      	mov	r0, r4
 8004d42:	f7ff fc7a 	bl	800463a <I2C_TransferConfig>
 8004d46:	e7c6      	b.n	8004cd6 <HAL_I2C_Mem_Read+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d48:	4632      	mov	r2, r6
 8004d4a:	4639      	mov	r1, r7
 8004d4c:	4620      	mov	r0, r4
 8004d4e:	f7ff fdef 	bl	8004930 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004d52:	b9f8      	cbnz	r0, 8004d94 <HAL_I2C_Mem_Read+0x1a8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d54:	6823      	ldr	r3, [r4, #0]
 8004d56:	2220      	movs	r2, #32
 8004d58:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004d5a:	6821      	ldr	r1, [r4, #0]
 8004d5c:	684b      	ldr	r3, [r1, #4]
 8004d5e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8004d62:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8004d66:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8004d6a:	f023 0301 	bic.w	r3, r3, #1
 8004d6e:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004d70:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004d74:	2300      	movs	r3, #0
 8004d76:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8004d7a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8004d7e:	e000      	b.n	8004d82 <HAL_I2C_Mem_Read+0x196>
    return HAL_BUSY;
 8004d80:	2002      	movs	r0, #2
}
 8004d82:	b003      	add	sp, #12
 8004d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8004d88:	2002      	movs	r0, #2
 8004d8a:	e7fa      	b.n	8004d82 <HAL_I2C_Mem_Read+0x196>
        return HAL_ERROR;
 8004d8c:	2001      	movs	r0, #1
 8004d8e:	e7f8      	b.n	8004d82 <HAL_I2C_Mem_Read+0x196>
          return HAL_ERROR;
 8004d90:	2001      	movs	r0, #1
 8004d92:	e7f6      	b.n	8004d82 <HAL_I2C_Mem_Read+0x196>
      return HAL_ERROR;
 8004d94:	2001      	movs	r0, #1
 8004d96:	e7f4      	b.n	8004d82 <HAL_I2C_Mem_Read+0x196>
 8004d98:	80002400 	.word	0x80002400

08004d9c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004d9c:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d9e:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8004da2:	b2d2      	uxtb	r2, r2
 8004da4:	2a20      	cmp	r2, #32
 8004da6:	d123      	bne.n	8004df0 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004da8:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8004dac:	2a01      	cmp	r2, #1
 8004dae:	d021      	beq.n	8004df4 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8004db0:	2201      	movs	r2, #1
 8004db2:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004db6:	2224      	movs	r2, #36	; 0x24
 8004db8:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004dbc:	6800      	ldr	r0, [r0, #0]
 8004dbe:	6802      	ldr	r2, [r0, #0]
 8004dc0:	f022 0201 	bic.w	r2, r2, #1
 8004dc4:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004dc6:	6818      	ldr	r0, [r3, #0]
 8004dc8:	6802      	ldr	r2, [r0, #0]
 8004dca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004dce:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004dd0:	6818      	ldr	r0, [r3, #0]
 8004dd2:	6802      	ldr	r2, [r0, #0]
 8004dd4:	4311      	orrs	r1, r2
 8004dd6:	6001      	str	r1, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004dd8:	6819      	ldr	r1, [r3, #0]
 8004dda:	680a      	ldr	r2, [r1, #0]
 8004ddc:	f042 0201 	orr.w	r2, r2, #1
 8004de0:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004de2:	2220      	movs	r2, #32
 8004de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004de8:	2000      	movs	r0, #0
 8004dea:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 8004dee:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8004df0:	2002      	movs	r0, #2
 8004df2:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8004df4:	2002      	movs	r0, #2
  }
}
 8004df6:	4770      	bx	lr

08004df8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004df8:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dfa:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8004dfe:	b2d2      	uxtb	r2, r2
 8004e00:	2a20      	cmp	r2, #32
 8004e02:	d121      	bne.n	8004e48 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e04:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8004e08:	2a01      	cmp	r2, #1
 8004e0a:	d01f      	beq.n	8004e4c <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e12:	2224      	movs	r2, #36	; 0x24
 8004e14:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e18:	6800      	ldr	r0, [r0, #0]
 8004e1a:	6802      	ldr	r2, [r0, #0]
 8004e1c:	f022 0201 	bic.w	r2, r2, #1
 8004e20:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004e22:	6818      	ldr	r0, [r3, #0]
 8004e24:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004e26:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004e2a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004e2e:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e30:	6819      	ldr	r1, [r3, #0]
 8004e32:	680a      	ldr	r2, [r1, #0]
 8004e34:	f042 0201 	orr.w	r2, r2, #1
 8004e38:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e40:	2000      	movs	r0, #0
 8004e42:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 8004e46:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8004e48:	2002      	movs	r0, #2
 8004e4a:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8004e4c:	2002      	movs	r0, #2
  }
}
 8004e4e:	4770      	bx	lr

08004e50 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004e50:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004e52:	684d      	ldr	r5, [r1, #4]
 8004e54:	6803      	ldr	r3, [r0, #0]
 8004e56:	68dc      	ldr	r4, [r3, #12]
 8004e58:	f3c4 440b 	ubfx	r4, r4, #16, #12
 8004e5c:	4425      	add	r5, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004e5e:	ea4f 1cc2 	mov.w	ip, r2, lsl #7
 8004e62:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8004e66:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 8004e6a:	f404 4470 	and.w	r4, r4, #61440	; 0xf000
 8004e6e:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004e72:	680b      	ldr	r3, [r1, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004e74:	6804      	ldr	r4, [r0, #0]
 8004e76:	68e6      	ldr	r6, [r4, #12]
 8004e78:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004e7c:	4433      	add	r3, r6
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004e7e:	3301      	adds	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004e80:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004e84:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004e88:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004e8c:	68cd      	ldr	r5, [r1, #12]
 8004e8e:	6803      	ldr	r3, [r0, #0]
 8004e90:	68dc      	ldr	r4, [r3, #12]
 8004e92:	f3c4 040a 	ubfx	r4, r4, #0, #11
 8004e96:	4425      	add	r5, r4
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004e98:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8004e9c:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8004ea0:	f404 4470 	and.w	r4, r4, #61440	; 0xf000
 8004ea4:	f8c3 408c 	str.w	r4, [r3, #140]	; 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004ea8:	688b      	ldr	r3, [r1, #8]
 8004eaa:	6804      	ldr	r4, [r0, #0]
 8004eac:	68e6      	ldr	r6, [r4, #12]
 8004eae:	f3c6 0e0a 	ubfx	lr, r6, #0, #11
 8004eb2:	4473      	add	r3, lr
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 8004eba:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8004ebe:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004ec2:	6803      	ldr	r3, [r0, #0]
 8004ec4:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8004ec8:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 8004ecc:	f024 0407 	bic.w	r4, r4, #7
 8004ed0:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004ed4:	6803      	ldr	r3, [r0, #0]
 8004ed6:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8004eda:	690c      	ldr	r4, [r1, #16]
 8004edc:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004ee0:	f891 e031 	ldrb.w	lr, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004ee4:	f891 6032 	ldrb.w	r6, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004ee8:	698d      	ldr	r5, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004eea:	6803      	ldr	r3, [r0, #0]
 8004eec:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8004ef0:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
 8004ef4:	2400      	movs	r4, #0
 8004ef6:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004efa:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 8004efe:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 8004f02:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8004f06:	6806      	ldr	r6, [r0, #0]
 8004f08:	eb06 1ec2 	add.w	lr, r6, r2, lsl #7
 8004f0c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8004f10:	f8ce 309c 	str.w	r3, [lr, #156]	; 0x9c
 8004f14:	f10e 0e84 	add.w	lr, lr, #132	; 0x84

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004f18:	6803      	ldr	r3, [r0, #0]
 8004f1a:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8004f1e:	f8d3 5098 	ldr.w	r5, [r3, #152]	; 0x98
 8004f22:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8004f26:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004f2a:	6803      	ldr	r3, [r0, #0]
 8004f2c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8004f30:	694d      	ldr	r5, [r1, #20]
 8004f32:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004f36:	6803      	ldr	r3, [r0, #0]
 8004f38:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8004f3c:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 8004f40:	4d2d      	ldr	r5, [pc, #180]	; (8004ff8 <LTDC_SetConfig+0x1a8>)
 8004f42:	4035      	ands	r5, r6
 8004f44:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004f48:	6a0d      	ldr	r5, [r1, #32]
 8004f4a:	6803      	ldr	r3, [r0, #0]
 8004f4c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8004f50:	69ce      	ldr	r6, [r1, #28]
 8004f52:	4335      	orrs	r5, r6
 8004f54:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004f58:	6803      	ldr	r3, [r0, #0]
 8004f5a:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8004f5e:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 8004f62:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004f66:	6803      	ldr	r3, [r0, #0]
 8004f68:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8004f6c:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8004f6e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004f72:	690b      	ldr	r3, [r1, #16]
 8004f74:	b183      	cbz	r3, 8004f98 <LTDC_SetConfig+0x148>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004f76:	3b01      	subs	r3, #1
 8004f78:	2b06      	cmp	r3, #6
 8004f7a:	d805      	bhi.n	8004f88 <LTDC_SetConfig+0x138>
 8004f7c:	e8df f003 	tbb	[pc, r3]
 8004f80:	0608063a 	.word	0x0608063a
 8004f84:	0404      	.short	0x0404
 8004f86:	0a          	.byte	0x0a
 8004f87:	00          	.byte	0x00
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004f88:	2501      	movs	r5, #1
 8004f8a:	e006      	b.n	8004f9a <LTDC_SetConfig+0x14a>
 8004f8c:	2502      	movs	r5, #2
 8004f8e:	e004      	b.n	8004f9a <LTDC_SetConfig+0x14a>
 8004f90:	2502      	movs	r5, #2
 8004f92:	e002      	b.n	8004f9a <LTDC_SetConfig+0x14a>
 8004f94:	2502      	movs	r5, #2
 8004f96:	e000      	b.n	8004f9a <LTDC_SetConfig+0x14a>
    tmp = 4U;
 8004f98:	2504      	movs	r5, #4
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004f9a:	6803      	ldr	r3, [r0, #0]
 8004f9c:	4463      	add	r3, ip
 8004f9e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004fa2:	f002 22e0 	and.w	r2, r2, #3758153728	; 0xe000e000
 8004fa6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004faa:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8004fac:	fb05 f403 	mul.w	r4, r5, r3
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004fb0:	684b      	ldr	r3, [r1, #4]
 8004fb2:	680a      	ldr	r2, [r1, #0]
 8004fb4:	1a9b      	subs	r3, r3, r2
 8004fb6:	fb05 f303 	mul.w	r3, r5, r3
 8004fba:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004fbc:	6802      	ldr	r2, [r0, #0]
 8004fbe:	4462      	add	r2, ip
 8004fc0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004fc4:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004fc8:	6803      	ldr	r3, [r0, #0]
 8004fca:	4463      	add	r3, ip
 8004fcc:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8004fd0:	4a0a      	ldr	r2, [pc, #40]	; (8004ffc <LTDC_SetConfig+0x1ac>)
 8004fd2:	4022      	ands	r2, r4
 8004fd4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004fd8:	6803      	ldr	r3, [r0, #0]
 8004fda:	4463      	add	r3, ip
 8004fdc:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8004fde:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004fe2:	6803      	ldr	r3, [r0, #0]
 8004fe4:	4463      	add	r3, ip
 8004fe6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004fea:	f042 0201 	orr.w	r2, r2, #1
 8004fee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8004ff2:	bd70      	pop	{r4, r5, r6, pc}
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004ff4:	2503      	movs	r5, #3
 8004ff6:	e7d0      	b.n	8004f9a <LTDC_SetConfig+0x14a>
 8004ff8:	fffff8f8 	.word	0xfffff8f8
 8004ffc:	fffff800 	.word	0xfffff800

08005000 <HAL_LTDC_MspInit>:
}
 8005000:	4770      	bx	lr
	...

08005004 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 8005004:	2800      	cmp	r0, #0
 8005006:	d072      	beq.n	80050ee <HAL_LTDC_Init+0xea>
{
 8005008:	b538      	push	{r3, r4, r5, lr}
 800500a:	4604      	mov	r4, r0
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800500c:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8005010:	2b00      	cmp	r3, #0
 8005012:	d067      	beq.n	80050e4 <HAL_LTDC_Init+0xe0>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005014:	2302      	movs	r3, #2
 8005016:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800501a:	6822      	ldr	r2, [r4, #0]
 800501c:	6993      	ldr	r3, [r2, #24]
 800501e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005022:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005024:	6821      	ldr	r1, [r4, #0]
 8005026:	698a      	ldr	r2, [r1, #24]
 8005028:	6863      	ldr	r3, [r4, #4]
 800502a:	68a0      	ldr	r0, [r4, #8]
 800502c:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800502e:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005030:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005032:	6920      	ldr	r0, [r4, #16]
 8005034:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005036:	4313      	orrs	r3, r2
 8005038:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800503a:	6821      	ldr	r1, [r4, #0]
 800503c:	688a      	ldr	r2, [r1, #8]
 800503e:	4b2d      	ldr	r3, [pc, #180]	; (80050f4 <HAL_LTDC_Init+0xf0>)
 8005040:	401a      	ands	r2, r3
 8005042:	608a      	str	r2, [r1, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005044:	6820      	ldr	r0, [r4, #0]
 8005046:	6882      	ldr	r2, [r0, #8]
 8005048:	69a1      	ldr	r1, [r4, #24]
 800504a:	6965      	ldr	r5, [r4, #20]
 800504c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8005050:	430a      	orrs	r2, r1
 8005052:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005054:	6821      	ldr	r1, [r4, #0]
 8005056:	68ca      	ldr	r2, [r1, #12]
 8005058:	401a      	ands	r2, r3
 800505a:	60ca      	str	r2, [r1, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800505c:	6820      	ldr	r0, [r4, #0]
 800505e:	68c2      	ldr	r2, [r0, #12]
 8005060:	6a21      	ldr	r1, [r4, #32]
 8005062:	69e5      	ldr	r5, [r4, #28]
 8005064:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8005068:	430a      	orrs	r2, r1
 800506a:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800506c:	6821      	ldr	r1, [r4, #0]
 800506e:	690a      	ldr	r2, [r1, #16]
 8005070:	401a      	ands	r2, r3
 8005072:	610a      	str	r2, [r1, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005074:	6820      	ldr	r0, [r4, #0]
 8005076:	6902      	ldr	r2, [r0, #16]
 8005078:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800507a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800507c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8005080:	430a      	orrs	r2, r1
 8005082:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005084:	6821      	ldr	r1, [r4, #0]
 8005086:	694a      	ldr	r2, [r1, #20]
 8005088:	4013      	ands	r3, r2
 800508a:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800508c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800508e:	6821      	ldr	r1, [r4, #0]
 8005090:	694b      	ldr	r3, [r1, #20]
 8005092:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005094:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005098:	4313      	orrs	r3, r2
 800509a:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800509c:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80050a0:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80050a4:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80050a6:	6821      	ldr	r1, [r4, #0]
 80050a8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80050aa:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80050ae:	62ca      	str	r2, [r1, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80050b0:	6821      	ldr	r1, [r4, #0]
 80050b2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80050b4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80050b8:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 80050bc:	4303      	orrs	r3, r0
 80050be:	4313      	orrs	r3, r2
 80050c0:	62cb      	str	r3, [r1, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80050c2:	6822      	ldr	r2, [r4, #0]
 80050c4:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80050c6:	f043 0306 	orr.w	r3, r3, #6
 80050ca:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 80050cc:	6822      	ldr	r2, [r4, #0]
 80050ce:	6993      	ldr	r3, [r2, #24]
 80050d0:	f043 0301 	orr.w	r3, r3, #1
 80050d4:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80050d6:	2000      	movs	r0, #0
 80050d8:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 80050dc:	2301      	movs	r3, #1
 80050de:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 80050e2:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 80050e4:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 80050e8:	f7ff ff8a 	bl	8005000 <HAL_LTDC_MspInit>
 80050ec:	e792      	b.n	8005014 <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 80050ee:	2001      	movs	r0, #1
}
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	f000f800 	.word	0xf000f800

080050f8 <HAL_LTDC_ConfigLayer>:
{
 80050f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 80050fa:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d02c      	beq.n	800515c <HAL_LTDC_ConfigLayer+0x64>
 8005102:	4604      	mov	r4, r0
 8005104:	460d      	mov	r5, r1
 8005106:	4616      	mov	r6, r2
 8005108:	2701      	movs	r7, #1
 800510a:	f880 70a0 	strb.w	r7, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800510e:	2302      	movs	r3, #2
 8005110:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005114:	f04f 0c34 	mov.w	ip, #52	; 0x34
 8005118:	fb0c 0c02 	mla	ip, ip, r2, r0
 800511c:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
 8005120:	468e      	mov	lr, r1
 8005122:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8005126:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800512a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800512e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005132:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8005136:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800513a:	f8de 3000 	ldr.w	r3, [lr]
 800513e:	f8cc 3000 	str.w	r3, [ip]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005142:	4632      	mov	r2, r6
 8005144:	4629      	mov	r1, r5
 8005146:	4620      	mov	r0, r4
 8005148:	f7ff fe82 	bl	8004e50 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800514c:	6823      	ldr	r3, [r4, #0]
 800514e:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005150:	f884 70a1 	strb.w	r7, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8005154:	2000      	movs	r0, #0
 8005156:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 800515a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hltdc);
 800515c:	2002      	movs	r0, #2
 800515e:	e7fc      	b.n	800515a <HAL_LTDC_ConfigLayer+0x62>

08005160 <HAL_LTDCEx_StructInitFromVideoConfig>:

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == \
 8005160:	6a4b      	ldr	r3, [r1, #36]	; 0x24
                            DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 8005162:	b10b      	cbz	r3, 8005168 <HAL_LTDCEx_StructInitFromVideoConfig+0x8>
 8005164:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == \
 8005168:	60c3      	str	r3, [r0, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 800516a:	6a0b      	ldr	r3, [r1, #32]
 800516c:	bb0b      	cbnz	r3, 80051b2 <HAL_LTDCEx_StructInitFromVideoConfig+0x52>
 800516e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005172:	6083      	str	r3, [r0, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 8005174:	69cb      	ldr	r3, [r1, #28]
 8005176:	b9f3      	cbnz	r3, 80051b6 <HAL_LTDCEx_StructInitFromVideoConfig+0x56>
 8005178:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800517c:	6043      	str	r3, [r0, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 800517e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8005180:	3b01      	subs	r3, #1
 8005182:	6183      	str	r3, [r0, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 8005184:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8005186:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 8005188:	4413      	add	r3, r2
 800518a:	3b01      	subs	r3, #1
 800518c:	6203      	str	r3, [r0, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 800518e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8005190:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 8005192:	4413      	add	r3, r2
                                   VidCfg->VerticalActive - 1U;
 8005194:	6c0a      	ldr	r2, [r1, #64]	; 0x40
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8005196:	4413      	add	r3, r2
                                   VidCfg->VerticalActive - 1U;
 8005198:	3b01      	subs	r3, #1
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 800519a:	6283      	str	r3, [r0, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 800519c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800519e:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 80051a0:	4413      	add	r3, r2
                                   VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 80051a2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 80051a4:	4413      	add	r3, r2
                                   VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 80051a6:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 80051a8:	4413      	add	r3, r2
 80051aa:	3b01      	subs	r3, #1
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 80051ac:	6303      	str	r3, [r0, #48]	; 0x30

  return HAL_OK;
}
 80051ae:	2000      	movs	r0, #0
 80051b0:	4770      	bx	lr
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 80051b2:	2300      	movs	r3, #0
 80051b4:	e7dd      	b.n	8005172 <HAL_LTDCEx_StructInitFromVideoConfig+0x12>
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 80051b6:	2300      	movs	r3, #0
 80051b8:	e7e0      	b.n	800517c <HAL_LTDCEx_StructInitFromVideoConfig+0x1c>
	...

080051bc <HAL_PWREx_EnableOverDrive>:
 *         critical tasks and when the system clock source is either HSI or HSE. 
 *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
 *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void) {
 80051bc:	b510      	push	{r4, lr}
 80051be:	b082      	sub	sp, #8
	uint32_t tickstart = 0;

	__HAL_RCC_PWR_CLK_ENABLE();
 80051c0:	4b1b      	ldr	r3, [pc, #108]	; (8005230 <HAL_PWREx_EnableOverDrive+0x74>)
 80051c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051c4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80051c8:	641a      	str	r2, [r3, #64]	; 0x40
 80051ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051d0:	9301      	str	r3, [sp, #4]
 80051d2:	9b01      	ldr	r3, [sp, #4]

	/* Enable the Over-drive to extend the clock frequency to 216 MHz */
	__HAL_PWR_OVERDRIVE_ENABLE();
 80051d4:	4a17      	ldr	r2, [pc, #92]	; (8005234 <HAL_PWREx_EnableOverDrive+0x78>)
 80051d6:	6813      	ldr	r3, [r2, #0]
 80051d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051dc:	6013      	str	r3, [r2, #0]

	/* Get tick */
	tickstart = HAL_GetTick();
 80051de:	f7fe fa99 	bl	8003714 <HAL_GetTick>
 80051e2:	4604      	mov	r4, r0

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY)) {
 80051e4:	4b13      	ldr	r3, [pc, #76]	; (8005234 <HAL_PWREx_EnableOverDrive+0x78>)
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80051ec:	d108      	bne.n	8005200 <HAL_PWREx_EnableOverDrive+0x44>
		if ((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE) {
 80051ee:	f7fe fa91 	bl	8003714 <HAL_GetTick>
 80051f2:	1b00      	subs	r0, r0, r4
 80051f4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80051f8:	d9f4      	bls.n	80051e4 <HAL_PWREx_EnableOverDrive+0x28>
			return HAL_TIMEOUT;
 80051fa:	2003      	movs	r0, #3
		if ((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE) {
			return HAL_TIMEOUT;
		}
	}
	return HAL_OK;
}
 80051fc:	b002      	add	sp, #8
 80051fe:	bd10      	pop	{r4, pc}
	__HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005200:	4a0c      	ldr	r2, [pc, #48]	; (8005234 <HAL_PWREx_EnableOverDrive+0x78>)
 8005202:	6813      	ldr	r3, [r2, #0]
 8005204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005208:	6013      	str	r3, [r2, #0]
	tickstart = HAL_GetTick();
 800520a:	f7fe fa83 	bl	8003714 <HAL_GetTick>
 800520e:	4604      	mov	r4, r0
	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY)) {
 8005210:	4b08      	ldr	r3, [pc, #32]	; (8005234 <HAL_PWREx_EnableOverDrive+0x78>)
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005218:	d107      	bne.n	800522a <HAL_PWREx_EnableOverDrive+0x6e>
		if ((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE) {
 800521a:	f7fe fa7b 	bl	8003714 <HAL_GetTick>
 800521e:	1b00      	subs	r0, r0, r4
 8005220:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005224:	d9f4      	bls.n	8005210 <HAL_PWREx_EnableOverDrive+0x54>
			return HAL_TIMEOUT;
 8005226:	2003      	movs	r0, #3
 8005228:	e7e8      	b.n	80051fc <HAL_PWREx_EnableOverDrive+0x40>
	return HAL_OK;
 800522a:	2000      	movs	r0, #0
 800522c:	e7e6      	b.n	80051fc <HAL_PWREx_EnableOverDrive+0x40>
 800522e:	bf00      	nop
 8005230:	40023800 	.word	0x40023800
 8005234:	40007000 	.word	0x40007000

08005238 <HAL_RCC_OscConfig>:
	uint32_t tickstart;
	uint32_t pll_config;
	FlagStatus pwrclkchanged = RESET;

	/* Check Null pointer */
	if (RCC_OscInitStruct == NULL) {
 8005238:	2800      	cmp	r0, #0
 800523a:	f000 8206 	beq.w	800564a <HAL_RCC_OscConfig+0x412>
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef *RCC_OscInitStruct) {
 800523e:	b570      	push	{r4, r5, r6, lr}
 8005240:	b082      	sub	sp, #8
 8005242:	4604      	mov	r4, r0

	/* Check the parameters */
	assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

	/*------------------------------- HSE Configuration ------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE)
 8005244:	6803      	ldr	r3, [r0, #0]
 8005246:	f013 0f01 	tst.w	r3, #1
 800524a:	d029      	beq.n	80052a0 <HAL_RCC_OscConfig+0x68>
			== RCC_OSCILLATORTYPE_HSE) {
		/* Check the parameters */
		assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
		/* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800524c:	4b95      	ldr	r3, [pc, #596]	; (80054a4 <HAL_RCC_OscConfig+0x26c>)
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f003 030c 	and.w	r3, r3, #12
 8005254:	2b04      	cmp	r3, #4
 8005256:	d01a      	beq.n	800528e <HAL_RCC_OscConfig+0x56>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE()
 8005258:	4b92      	ldr	r3, [pc, #584]	; (80054a4 <HAL_RCC_OscConfig+0x26c>)
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	f003 030c 	and.w	r3, r3, #12
 8005260:	2b08      	cmp	r3, #8
 8005262:	d00f      	beq.n	8005284 <HAL_RCC_OscConfig+0x4c>
					&& (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
				return HAL_ERROR;
			}
		} else {
			/* Set the new HSE configuration ---------------------------------------*/
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005264:	6863      	ldr	r3, [r4, #4]
 8005266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800526a:	d040      	beq.n	80052ee <HAL_RCC_OscConfig+0xb6>
 800526c:	2b00      	cmp	r3, #0
 800526e:	d154      	bne.n	800531a <HAL_RCC_OscConfig+0xe2>
 8005270:	4b8c      	ldr	r3, [pc, #560]	; (80054a4 <HAL_RCC_OscConfig+0x26c>)
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005278:	601a      	str	r2, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005280:	601a      	str	r2, [r3, #0]
 8005282:	e039      	b.n	80052f8 <HAL_RCC_OscConfig+0xc0>
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 8005284:	4b87      	ldr	r3, [pc, #540]	; (80054a4 <HAL_RCC_OscConfig+0x26c>)
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800528c:	d0ea      	beq.n	8005264 <HAL_RCC_OscConfig+0x2c>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800528e:	4b85      	ldr	r3, [pc, #532]	; (80054a4 <HAL_RCC_OscConfig+0x26c>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005296:	d003      	beq.n	80052a0 <HAL_RCC_OscConfig+0x68>
					&& (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 8005298:	6863      	ldr	r3, [r4, #4]
 800529a:	2b00      	cmp	r3, #0
 800529c:	f000 81d7 	beq.w	800564e <HAL_RCC_OscConfig+0x416>
				}
			}
		}
	}
	/*----------------------------- HSI Configuration --------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI)
 80052a0:	6823      	ldr	r3, [r4, #0]
 80052a2:	f013 0f02 	tst.w	r3, #2
 80052a6:	d074      	beq.n	8005392 <HAL_RCC_OscConfig+0x15a>
		assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
		assert_param(
				IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

		/* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80052a8:	4b7e      	ldr	r3, [pc, #504]	; (80054a4 <HAL_RCC_OscConfig+0x26c>)
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f013 0f0c 	tst.w	r3, #12
 80052b0:	d05e      	beq.n	8005370 <HAL_RCC_OscConfig+0x138>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE()
 80052b2:	4b7c      	ldr	r3, [pc, #496]	; (80054a4 <HAL_RCC_OscConfig+0x26c>)
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f003 030c 	and.w	r3, r3, #12
 80052ba:	2b08      	cmp	r3, #8
 80052bc:	d053      	beq.n	8005366 <HAL_RCC_OscConfig+0x12e>
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
						RCC_OscInitStruct->HSICalibrationValue);
			}
		} else {
			/* Check the HSI State */
			if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF) {
 80052be:	68e3      	ldr	r3, [r4, #12]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	f000 8089 	beq.w	80053d8 <HAL_RCC_OscConfig+0x1a0>
				/* Enable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_ENABLE();
 80052c6:	4a77      	ldr	r2, [pc, #476]	; (80054a4 <HAL_RCC_OscConfig+0x26c>)
 80052c8:	6813      	ldr	r3, [r2, #0]
 80052ca:	f043 0301 	orr.w	r3, r3, #1
 80052ce:	6013      	str	r3, [r2, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 80052d0:	f7fe fa20 	bl	8003714 <HAL_GetTick>
 80052d4:	4605      	mov	r5, r0

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 80052d6:	4b73      	ldr	r3, [pc, #460]	; (80054a4 <HAL_RCC_OscConfig+0x26c>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f013 0f02 	tst.w	r3, #2
 80052de:	d172      	bne.n	80053c6 <HAL_RCC_OscConfig+0x18e>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 80052e0:	f7fe fa18 	bl	8003714 <HAL_GetTick>
 80052e4:	1b40      	subs	r0, r0, r5
 80052e6:	2802      	cmp	r0, #2
 80052e8:	d9f5      	bls.n	80052d6 <HAL_RCC_OscConfig+0x9e>
						return HAL_TIMEOUT;
 80052ea:	2003      	movs	r0, #3
 80052ec:	e1b4      	b.n	8005658 <HAL_RCC_OscConfig+0x420>
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052ee:	4a6d      	ldr	r2, [pc, #436]	; (80054a4 <HAL_RCC_OscConfig+0x26c>)
 80052f0:	6813      	ldr	r3, [r2, #0]
 80052f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052f6:	6013      	str	r3, [r2, #0]
			if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF) {
 80052f8:	6863      	ldr	r3, [r4, #4]
 80052fa:	b32b      	cbz	r3, 8005348 <HAL_RCC_OscConfig+0x110>
				tickstart = HAL_GetTick();
 80052fc:	f7fe fa0a 	bl	8003714 <HAL_GetTick>
 8005300:	4605      	mov	r5, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8005302:	4b68      	ldr	r3, [pc, #416]	; (80054a4 <HAL_RCC_OscConfig+0x26c>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800530a:	d1c9      	bne.n	80052a0 <HAL_RCC_OscConfig+0x68>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 800530c:	f7fe fa02 	bl	8003714 <HAL_GetTick>
 8005310:	1b40      	subs	r0, r0, r5
 8005312:	2864      	cmp	r0, #100	; 0x64
 8005314:	d9f5      	bls.n	8005302 <HAL_RCC_OscConfig+0xca>
						return HAL_TIMEOUT;
 8005316:	2003      	movs	r0, #3
 8005318:	e19e      	b.n	8005658 <HAL_RCC_OscConfig+0x420>
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800531a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800531e:	d009      	beq.n	8005334 <HAL_RCC_OscConfig+0xfc>
 8005320:	4b60      	ldr	r3, [pc, #384]	; (80054a4 <HAL_RCC_OscConfig+0x26c>)
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005328:	601a      	str	r2, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005330:	601a      	str	r2, [r3, #0]
 8005332:	e7e1      	b.n	80052f8 <HAL_RCC_OscConfig+0xc0>
 8005334:	4b5b      	ldr	r3, [pc, #364]	; (80054a4 <HAL_RCC_OscConfig+0x26c>)
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800533c:	601a      	str	r2, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005344:	601a      	str	r2, [r3, #0]
 8005346:	e7d7      	b.n	80052f8 <HAL_RCC_OscConfig+0xc0>
				tickstart = HAL_GetTick();
 8005348:	f7fe f9e4 	bl	8003714 <HAL_GetTick>
 800534c:	4605      	mov	r5, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 800534e:	4b55      	ldr	r3, [pc, #340]	; (80054a4 <HAL_RCC_OscConfig+0x26c>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005356:	d0a3      	beq.n	80052a0 <HAL_RCC_OscConfig+0x68>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8005358:	f7fe f9dc 	bl	8003714 <HAL_GetTick>
 800535c:	1b40      	subs	r0, r0, r5
 800535e:	2864      	cmp	r0, #100	; 0x64
 8005360:	d9f5      	bls.n	800534e <HAL_RCC_OscConfig+0x116>
						return HAL_TIMEOUT;
 8005362:	2003      	movs	r0, #3
 8005364:	e178      	b.n	8005658 <HAL_RCC_OscConfig+0x420>
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 8005366:	4b4f      	ldr	r3, [pc, #316]	; (80054a4 <HAL_RCC_OscConfig+0x26c>)
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800536e:	d1a6      	bne.n	80052be <HAL_RCC_OscConfig+0x86>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005370:	4b4c      	ldr	r3, [pc, #304]	; (80054a4 <HAL_RCC_OscConfig+0x26c>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f013 0f02 	tst.w	r3, #2
 8005378:	d003      	beq.n	8005382 <HAL_RCC_OscConfig+0x14a>
					&& (RCC_OscInitStruct->HSIState != RCC_HSI_ON)) {
 800537a:	68e3      	ldr	r3, [r4, #12]
 800537c:	2b01      	cmp	r3, #1
 800537e:	f040 8168 	bne.w	8005652 <HAL_RCC_OscConfig+0x41a>
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 8005382:	4a48      	ldr	r2, [pc, #288]	; (80054a4 <HAL_RCC_OscConfig+0x26c>)
 8005384:	6813      	ldr	r3, [r2, #0]
 8005386:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800538a:	6921      	ldr	r1, [r4, #16]
 800538c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005390:	6013      	str	r3, [r2, #0]
				}
			}
		}
	}
	/*------------------------------ LSI Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI)
 8005392:	6823      	ldr	r3, [r4, #0]
 8005394:	f013 0f08 	tst.w	r3, #8
 8005398:	d046      	beq.n	8005428 <HAL_RCC_OscConfig+0x1f0>
			== RCC_OSCILLATORTYPE_LSI) {
		/* Check the parameters */
		assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

		/* Check the LSI State */
		if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF) {
 800539a:	6963      	ldr	r3, [r4, #20]
 800539c:	b383      	cbz	r3, 8005400 <HAL_RCC_OscConfig+0x1c8>
			/* Enable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_ENABLE();
 800539e:	4a41      	ldr	r2, [pc, #260]	; (80054a4 <HAL_RCC_OscConfig+0x26c>)
 80053a0:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80053a2:	f043 0301 	orr.w	r3, r3, #1
 80053a6:	6753      	str	r3, [r2, #116]	; 0x74

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 80053a8:	f7fe f9b4 	bl	8003714 <HAL_GetTick>
 80053ac:	4605      	mov	r5, r0

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 80053ae:	4b3d      	ldr	r3, [pc, #244]	; (80054a4 <HAL_RCC_OscConfig+0x26c>)
 80053b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053b2:	f013 0f02 	tst.w	r3, #2
 80053b6:	d137      	bne.n	8005428 <HAL_RCC_OscConfig+0x1f0>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 80053b8:	f7fe f9ac 	bl	8003714 <HAL_GetTick>
 80053bc:	1b40      	subs	r0, r0, r5
 80053be:	2802      	cmp	r0, #2
 80053c0:	d9f5      	bls.n	80053ae <HAL_RCC_OscConfig+0x176>
					return HAL_TIMEOUT;
 80053c2:	2003      	movs	r0, #3
 80053c4:	e148      	b.n	8005658 <HAL_RCC_OscConfig+0x420>
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 80053c6:	4a37      	ldr	r2, [pc, #220]	; (80054a4 <HAL_RCC_OscConfig+0x26c>)
 80053c8:	6813      	ldr	r3, [r2, #0]
 80053ca:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80053ce:	6921      	ldr	r1, [r4, #16]
 80053d0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80053d4:	6013      	str	r3, [r2, #0]
 80053d6:	e7dc      	b.n	8005392 <HAL_RCC_OscConfig+0x15a>
				__HAL_RCC_HSI_DISABLE();
 80053d8:	4a32      	ldr	r2, [pc, #200]	; (80054a4 <HAL_RCC_OscConfig+0x26c>)
 80053da:	6813      	ldr	r3, [r2, #0]
 80053dc:	f023 0301 	bic.w	r3, r3, #1
 80053e0:	6013      	str	r3, [r2, #0]
				tickstart = HAL_GetTick();
 80053e2:	f7fe f997 	bl	8003714 <HAL_GetTick>
 80053e6:	4605      	mov	r5, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 80053e8:	4b2e      	ldr	r3, [pc, #184]	; (80054a4 <HAL_RCC_OscConfig+0x26c>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f013 0f02 	tst.w	r3, #2
 80053f0:	d0cf      	beq.n	8005392 <HAL_RCC_OscConfig+0x15a>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 80053f2:	f7fe f98f 	bl	8003714 <HAL_GetTick>
 80053f6:	1b40      	subs	r0, r0, r5
 80053f8:	2802      	cmp	r0, #2
 80053fa:	d9f5      	bls.n	80053e8 <HAL_RCC_OscConfig+0x1b0>
						return HAL_TIMEOUT;
 80053fc:	2003      	movs	r0, #3
 80053fe:	e12b      	b.n	8005658 <HAL_RCC_OscConfig+0x420>
				}
			}
		} else {
			/* Disable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_DISABLE();
 8005400:	4a28      	ldr	r2, [pc, #160]	; (80054a4 <HAL_RCC_OscConfig+0x26c>)
 8005402:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8005404:	f023 0301 	bic.w	r3, r3, #1
 8005408:	6753      	str	r3, [r2, #116]	; 0x74

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 800540a:	f7fe f983 	bl	8003714 <HAL_GetTick>
 800540e:	4605      	mov	r5, r0

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 8005410:	4b24      	ldr	r3, [pc, #144]	; (80054a4 <HAL_RCC_OscConfig+0x26c>)
 8005412:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005414:	f013 0f02 	tst.w	r3, #2
 8005418:	d006      	beq.n	8005428 <HAL_RCC_OscConfig+0x1f0>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 800541a:	f7fe f97b 	bl	8003714 <HAL_GetTick>
 800541e:	1b40      	subs	r0, r0, r5
 8005420:	2802      	cmp	r0, #2
 8005422:	d9f5      	bls.n	8005410 <HAL_RCC_OscConfig+0x1d8>
					return HAL_TIMEOUT;
 8005424:	2003      	movs	r0, #3
 8005426:	e117      	b.n	8005658 <HAL_RCC_OscConfig+0x420>
				}
			}
		}
	}
	/*------------------------------ LSE Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE)
 8005428:	6823      	ldr	r3, [r4, #0]
 800542a:	f013 0f04 	tst.w	r3, #4
 800542e:	d07d      	beq.n	800552c <HAL_RCC_OscConfig+0x2f4>
		/* Check the parameters */
		assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

		/* Update LSE configuration in Backup Domain control register    */
		/* Requires to enable write access to Backup Domain of necessary */
		if (__HAL_RCC_PWR_IS_CLK_DISABLED()) {
 8005430:	4b1c      	ldr	r3, [pc, #112]	; (80054a4 <HAL_RCC_OscConfig+0x26c>)
 8005432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005434:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8005438:	d11e      	bne.n	8005478 <HAL_RCC_OscConfig+0x240>
			/* Enable Power Clock*/
			__HAL_RCC_PWR_CLK_ENABLE();
 800543a:	4b1a      	ldr	r3, [pc, #104]	; (80054a4 <HAL_RCC_OscConfig+0x26c>)
 800543c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800543e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005442:	641a      	str	r2, [r3, #64]	; 0x40
 8005444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800544a:	9301      	str	r3, [sp, #4]
 800544c:	9b01      	ldr	r3, [sp, #4]
			pwrclkchanged = SET;
 800544e:	2501      	movs	r5, #1
		}

		if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP)) {
 8005450:	4b15      	ldr	r3, [pc, #84]	; (80054a8 <HAL_RCC_OscConfig+0x270>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005458:	d010      	beq.n	800547c <HAL_RCC_OscConfig+0x244>
				}
			}
		}

		/* Set the new LSE configuration -----------------------------------------*/
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800545a:	68a3      	ldr	r3, [r4, #8]
 800545c:	2b01      	cmp	r3, #1
 800545e:	d025      	beq.n	80054ac <HAL_RCC_OscConfig+0x274>
 8005460:	2b00      	cmp	r3, #0
 8005462:	d13b      	bne.n	80054dc <HAL_RCC_OscConfig+0x2a4>
 8005464:	4b0f      	ldr	r3, [pc, #60]	; (80054a4 <HAL_RCC_OscConfig+0x26c>)
 8005466:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005468:	f022 0201 	bic.w	r2, r2, #1
 800546c:	671a      	str	r2, [r3, #112]	; 0x70
 800546e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005470:	f022 0204 	bic.w	r2, r2, #4
 8005474:	671a      	str	r2, [r3, #112]	; 0x70
 8005476:	e01e      	b.n	80054b6 <HAL_RCC_OscConfig+0x27e>
	FlagStatus pwrclkchanged = RESET;
 8005478:	2500      	movs	r5, #0
 800547a:	e7e9      	b.n	8005450 <HAL_RCC_OscConfig+0x218>
			PWR->CR1 |= PWR_CR1_DBP;
 800547c:	4a0a      	ldr	r2, [pc, #40]	; (80054a8 <HAL_RCC_OscConfig+0x270>)
 800547e:	6813      	ldr	r3, [r2, #0]
 8005480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005484:	6013      	str	r3, [r2, #0]
			tickstart = HAL_GetTick();
 8005486:	f7fe f945 	bl	8003714 <HAL_GetTick>
 800548a:	4606      	mov	r6, r0
			while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP)) {
 800548c:	4b06      	ldr	r3, [pc, #24]	; (80054a8 <HAL_RCC_OscConfig+0x270>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005494:	d1e1      	bne.n	800545a <HAL_RCC_OscConfig+0x222>
				if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 8005496:	f7fe f93d 	bl	8003714 <HAL_GetTick>
 800549a:	1b80      	subs	r0, r0, r6
 800549c:	2864      	cmp	r0, #100	; 0x64
 800549e:	d9f5      	bls.n	800548c <HAL_RCC_OscConfig+0x254>
					return HAL_TIMEOUT;
 80054a0:	2003      	movs	r0, #3
 80054a2:	e0d9      	b.n	8005658 <HAL_RCC_OscConfig+0x420>
 80054a4:	40023800 	.word	0x40023800
 80054a8:	40007000 	.word	0x40007000
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054ac:	4a72      	ldr	r2, [pc, #456]	; (8005678 <HAL_RCC_OscConfig+0x440>)
 80054ae:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80054b0:	f043 0301 	orr.w	r3, r3, #1
 80054b4:	6713      	str	r3, [r2, #112]	; 0x70
		/* Check the LSE State */
		if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF) {
 80054b6:	68a3      	ldr	r3, [r4, #8]
 80054b8:	b333      	cbz	r3, 8005508 <HAL_RCC_OscConfig+0x2d0>
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 80054ba:	f7fe f92b 	bl	8003714 <HAL_GetTick>
 80054be:	4606      	mov	r6, r0

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 80054c0:	4b6d      	ldr	r3, [pc, #436]	; (8005678 <HAL_RCC_OscConfig+0x440>)
 80054c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054c4:	f013 0f02 	tst.w	r3, #2
 80054c8:	d12f      	bne.n	800552a <HAL_RCC_OscConfig+0x2f2>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 80054ca:	f7fe f923 	bl	8003714 <HAL_GetTick>
 80054ce:	1b80      	subs	r0, r0, r6
 80054d0:	f241 3388 	movw	r3, #5000	; 0x1388
 80054d4:	4298      	cmp	r0, r3
 80054d6:	d9f3      	bls.n	80054c0 <HAL_RCC_OscConfig+0x288>
					return HAL_TIMEOUT;
 80054d8:	2003      	movs	r0, #3
 80054da:	e0bd      	b.n	8005658 <HAL_RCC_OscConfig+0x420>
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054dc:	2b05      	cmp	r3, #5
 80054de:	d009      	beq.n	80054f4 <HAL_RCC_OscConfig+0x2bc>
 80054e0:	4b65      	ldr	r3, [pc, #404]	; (8005678 <HAL_RCC_OscConfig+0x440>)
 80054e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80054e4:	f022 0201 	bic.w	r2, r2, #1
 80054e8:	671a      	str	r2, [r3, #112]	; 0x70
 80054ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80054ec:	f022 0204 	bic.w	r2, r2, #4
 80054f0:	671a      	str	r2, [r3, #112]	; 0x70
 80054f2:	e7e0      	b.n	80054b6 <HAL_RCC_OscConfig+0x27e>
 80054f4:	4b60      	ldr	r3, [pc, #384]	; (8005678 <HAL_RCC_OscConfig+0x440>)
 80054f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80054f8:	f042 0204 	orr.w	r2, r2, #4
 80054fc:	671a      	str	r2, [r3, #112]	; 0x70
 80054fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005500:	f042 0201 	orr.w	r2, r2, #1
 8005504:	671a      	str	r2, [r3, #112]	; 0x70
 8005506:	e7d6      	b.n	80054b6 <HAL_RCC_OscConfig+0x27e>
				}
			}
		} else {
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8005508:	f7fe f904 	bl	8003714 <HAL_GetTick>
 800550c:	4606      	mov	r6, r0

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 800550e:	4b5a      	ldr	r3, [pc, #360]	; (8005678 <HAL_RCC_OscConfig+0x440>)
 8005510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005512:	f013 0f02 	tst.w	r3, #2
 8005516:	d008      	beq.n	800552a <HAL_RCC_OscConfig+0x2f2>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8005518:	f7fe f8fc 	bl	8003714 <HAL_GetTick>
 800551c:	1b80      	subs	r0, r0, r6
 800551e:	f241 3388 	movw	r3, #5000	; 0x1388
 8005522:	4298      	cmp	r0, r3
 8005524:	d9f3      	bls.n	800550e <HAL_RCC_OscConfig+0x2d6>
					return HAL_TIMEOUT;
 8005526:	2003      	movs	r0, #3
 8005528:	e096      	b.n	8005658 <HAL_RCC_OscConfig+0x420>
				}
			}
		}

		/* Restore clock configuration if changed */
		if (pwrclkchanged == SET) {
 800552a:	b9fd      	cbnz	r5, 800556c <HAL_RCC_OscConfig+0x334>
		}
	}
	/*-------------------------------- PLL Configuration -----------------------*/
	/* Check the parameters */
	assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
	if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE) {
 800552c:	69a3      	ldr	r3, [r4, #24]
 800552e:	2b00      	cmp	r3, #0
 8005530:	f000 8091 	beq.w	8005656 <HAL_RCC_OscConfig+0x41e>
		/* Check if the PLL is used as system clock or not */
		if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {
 8005534:	4a50      	ldr	r2, [pc, #320]	; (8005678 <HAL_RCC_OscConfig+0x440>)
 8005536:	6892      	ldr	r2, [r2, #8]
 8005538:	f002 020c 	and.w	r2, r2, #12
 800553c:	2a08      	cmp	r2, #8
 800553e:	d059      	beq.n	80055f4 <HAL_RCC_OscConfig+0x3bc>
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON) {
 8005540:	2b02      	cmp	r3, #2
 8005542:	d019      	beq.n	8005578 <HAL_RCC_OscConfig+0x340>
						return HAL_TIMEOUT;
					}
				}
			} else {
				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 8005544:	4a4c      	ldr	r2, [pc, #304]	; (8005678 <HAL_RCC_OscConfig+0x440>)
 8005546:	6813      	ldr	r3, [r2, #0]
 8005548:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800554c:	6013      	str	r3, [r2, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 800554e:	f7fe f8e1 	bl	8003714 <HAL_GetTick>
 8005552:	4604      	mov	r4, r0

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8005554:	4b48      	ldr	r3, [pc, #288]	; (8005678 <HAL_RCC_OscConfig+0x440>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800555c:	d048      	beq.n	80055f0 <HAL_RCC_OscConfig+0x3b8>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 800555e:	f7fe f8d9 	bl	8003714 <HAL_GetTick>
 8005562:	1b00      	subs	r0, r0, r4
 8005564:	2802      	cmp	r0, #2
 8005566:	d9f5      	bls.n	8005554 <HAL_RCC_OscConfig+0x31c>
						return HAL_TIMEOUT;
 8005568:	2003      	movs	r0, #3
 800556a:	e075      	b.n	8005658 <HAL_RCC_OscConfig+0x420>
			__HAL_RCC_PWR_CLK_DISABLE();
 800556c:	4a42      	ldr	r2, [pc, #264]	; (8005678 <HAL_RCC_OscConfig+0x440>)
 800556e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005570:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005574:	6413      	str	r3, [r2, #64]	; 0x40
 8005576:	e7d9      	b.n	800552c <HAL_RCC_OscConfig+0x2f4>
				__HAL_RCC_PLL_DISABLE();
 8005578:	4a3f      	ldr	r2, [pc, #252]	; (8005678 <HAL_RCC_OscConfig+0x440>)
 800557a:	6813      	ldr	r3, [r2, #0]
 800557c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005580:	6013      	str	r3, [r2, #0]
				tickstart = HAL_GetTick();
 8005582:	f7fe f8c7 	bl	8003714 <HAL_GetTick>
 8005586:	4605      	mov	r5, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8005588:	4b3b      	ldr	r3, [pc, #236]	; (8005678 <HAL_RCC_OscConfig+0x440>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005590:	d006      	beq.n	80055a0 <HAL_RCC_OscConfig+0x368>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8005592:	f7fe f8bf 	bl	8003714 <HAL_GetTick>
 8005596:	1b40      	subs	r0, r0, r5
 8005598:	2802      	cmp	r0, #2
 800559a:	d9f5      	bls.n	8005588 <HAL_RCC_OscConfig+0x350>
						return HAL_TIMEOUT;
 800559c:	2003      	movs	r0, #3
 800559e:	e05b      	b.n	8005658 <HAL_RCC_OscConfig+0x420>
				__HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055a0:	69e3      	ldr	r3, [r4, #28]
 80055a2:	6a22      	ldr	r2, [r4, #32]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80055a8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80055ac:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80055ae:	0852      	lsrs	r2, r2, #1
 80055b0:	3a01      	subs	r2, #1
 80055b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055b6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80055b8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80055bc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80055be:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80055c2:	4a2d      	ldr	r2, [pc, #180]	; (8005678 <HAL_RCC_OscConfig+0x440>)
 80055c4:	6053      	str	r3, [r2, #4]
				__HAL_RCC_PLL_ENABLE();
 80055c6:	6813      	ldr	r3, [r2, #0]
 80055c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055cc:	6013      	str	r3, [r2, #0]
				tickstart = HAL_GetTick();
 80055ce:	f7fe f8a1 	bl	8003714 <HAL_GetTick>
 80055d2:	4604      	mov	r4, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 80055d4:	4b28      	ldr	r3, [pc, #160]	; (8005678 <HAL_RCC_OscConfig+0x440>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80055dc:	d106      	bne.n	80055ec <HAL_RCC_OscConfig+0x3b4>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 80055de:	f7fe f899 	bl	8003714 <HAL_GetTick>
 80055e2:	1b00      	subs	r0, r0, r4
 80055e4:	2802      	cmp	r0, #2
 80055e6:	d9f5      	bls.n	80055d4 <HAL_RCC_OscConfig+0x39c>
						return HAL_TIMEOUT;
 80055e8:	2003      	movs	r0, #3
 80055ea:	e035      	b.n	8005658 <HAL_RCC_OscConfig+0x420>
					{
				return HAL_ERROR;
			}
		}
	}
	return HAL_OK;
 80055ec:	2000      	movs	r0, #0
 80055ee:	e033      	b.n	8005658 <HAL_RCC_OscConfig+0x420>
 80055f0:	2000      	movs	r0, #0
 80055f2:	e031      	b.n	8005658 <HAL_RCC_OscConfig+0x420>
			pll_config = RCC->PLLCFGR;
 80055f4:	4a20      	ldr	r2, [pc, #128]	; (8005678 <HAL_RCC_OscConfig+0x440>)
 80055f6:	6852      	ldr	r2, [r2, #4]
			if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d02f      	beq.n	800565c <HAL_RCC_OscConfig+0x424>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 80055fc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
							!= RCC_OscInitStruct->PLL.PLLSource)
 8005600:	69e1      	ldr	r1, [r4, #28]
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 8005602:	428b      	cmp	r3, r1
 8005604:	d12c      	bne.n	8005660 <HAL_RCC_OscConfig+0x428>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 8005606:	f002 033f 	and.w	r3, r2, #63	; 0x3f
							!= RCC_OscInitStruct->PLL.PLLM)
 800560a:	6a21      	ldr	r1, [r4, #32]
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 800560c:	428b      	cmp	r3, r1
 800560e:	d129      	bne.n	8005664 <HAL_RCC_OscConfig+0x42c>
							!= (RCC_OscInitStruct->PLL.PLLN
 8005610:	6a61      	ldr	r1, [r4, #36]	; 0x24
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)
 8005612:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005616:	4013      	ands	r3, r2
 8005618:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 800561c:	d124      	bne.n	8005668 <HAL_RCC_OscConfig+0x430>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)
 800561e:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
							!= ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U)
 8005622:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005624:	085b      	lsrs	r3, r3, #1
 8005626:	3b01      	subs	r3, #1
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)
 8005628:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 800562c:	d11e      	bne.n	800566c <HAL_RCC_OscConfig+0x434>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 800562e:	f002 6370 	and.w	r3, r2, #251658240	; 0xf000000
							!= (RCC_OscInitStruct->PLL.PLLQ
 8005632:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 8005634:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 8005638:	d11a      	bne.n	8005670 <HAL_RCC_OscConfig+0x438>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)
 800563a:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
							!= (RCC_OscInitStruct->PLL.PLLR
 800563e:	6b23      	ldr	r3, [r4, #48]	; 0x30
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)
 8005640:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
 8005644:	d116      	bne.n	8005674 <HAL_RCC_OscConfig+0x43c>
	return HAL_OK;
 8005646:	2000      	movs	r0, #0
 8005648:	e006      	b.n	8005658 <HAL_RCC_OscConfig+0x420>
		return HAL_ERROR;
 800564a:	2001      	movs	r0, #1
}
 800564c:	4770      	bx	lr
				return HAL_ERROR;
 800564e:	2001      	movs	r0, #1
 8005650:	e002      	b.n	8005658 <HAL_RCC_OscConfig+0x420>
				return HAL_ERROR;
 8005652:	2001      	movs	r0, #1
 8005654:	e000      	b.n	8005658 <HAL_RCC_OscConfig+0x420>
	return HAL_OK;
 8005656:	2000      	movs	r0, #0
}
 8005658:	b002      	add	sp, #8
 800565a:	bd70      	pop	{r4, r5, r6, pc}
				return HAL_ERROR;
 800565c:	2001      	movs	r0, #1
 800565e:	e7fb      	b.n	8005658 <HAL_RCC_OscConfig+0x420>
 8005660:	2001      	movs	r0, #1
 8005662:	e7f9      	b.n	8005658 <HAL_RCC_OscConfig+0x420>
 8005664:	2001      	movs	r0, #1
 8005666:	e7f7      	b.n	8005658 <HAL_RCC_OscConfig+0x420>
 8005668:	2001      	movs	r0, #1
 800566a:	e7f5      	b.n	8005658 <HAL_RCC_OscConfig+0x420>
 800566c:	2001      	movs	r0, #1
 800566e:	e7f3      	b.n	8005658 <HAL_RCC_OscConfig+0x420>
 8005670:	2001      	movs	r0, #1
 8005672:	e7f1      	b.n	8005658 <HAL_RCC_OscConfig+0x420>
 8005674:	2001      	movs	r0, #1
 8005676:	e7ef      	b.n	8005658 <HAL_RCC_OscConfig+0x420>
 8005678:	40023800 	.word	0x40023800

0800567c <HAL_RCC_GetSysClockFreq>:
 *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
 *
 *
 * @retval SYSCLK frequency
 */
uint32_t HAL_RCC_GetSysClockFreq(void) {
 800567c:	b508      	push	{r3, lr}
	uint32_t pllm = 0, pllvco = 0, pllp = 0;
	uint32_t sysclockfreq = 0;

	/* Get SYSCLK source -------------------------------------------------------*/
	switch (RCC->CFGR & RCC_CFGR_SWS) {
 800567e:	4b26      	ldr	r3, [pc, #152]	; (8005718 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f003 030c 	and.w	r3, r3, #12
 8005686:	2b04      	cmp	r3, #4
 8005688:	d041      	beq.n	800570e <HAL_RCC_GetSysClockFreq+0x92>
 800568a:	2b08      	cmp	r3, #8
 800568c:	d141      	bne.n	8005712 <HAL_RCC_GetSysClockFreq+0x96>
	}
	case RCC_SYSCLKSOURCE_STATUS_PLLCLK: /* PLL used as system clock  source */
	{
		/* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
		 SYSCLK = PLL_VCO / PLLP */
		pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800568e:	4b22      	ldr	r3, [pc, #136]	; (8005718 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005690:	685a      	ldr	r2, [r3, #4]
 8005692:	f002 023f 	and.w	r2, r2, #63	; 0x3f
		if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI) {
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800569c:	d012      	beq.n	80056c4 <HAL_RCC_GetSysClockFreq+0x48>
			/* HSE used as PLL clock source */
			pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 800569e:	4b1e      	ldr	r3, [pc, #120]	; (8005718 <HAL_RCC_GetSysClockFreq+0x9c>)
 80056a0:	6859      	ldr	r1, [r3, #4]
 80056a2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80056a6:	481d      	ldr	r0, [pc, #116]	; (800571c <HAL_RCC_GetSysClockFreq+0xa0>)
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 80056a8:	2300      	movs	r3, #0
 80056aa:	fba1 0100 	umull	r0, r1, r1, r0
 80056ae:	f7fa fe1f 	bl	80002f0 <__aeabi_uldivmod>
			pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
		}
		pllp =
				((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos)
 80056b2:	4b19      	ldr	r3, [pc, #100]	; (8005718 <HAL_RCC_GetSysClockFreq+0x9c>)
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	f3c3 4301 	ubfx	r3, r3, #16, #2
						+ 1) * 2);
 80056ba:	3301      	adds	r3, #1
		pllp =
 80056bc:	005b      	lsls	r3, r3, #1

		sysclockfreq = pllvco / pllp;
 80056be:	fbb0 f0f3 	udiv	r0, r0, r3
		break;
 80056c2:	e027      	b.n	8005714 <HAL_RCC_GetSysClockFreq+0x98>
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 80056c4:	4b14      	ldr	r3, [pc, #80]	; (8005718 <HAL_RCC_GetSysClockFreq+0x9c>)
 80056c6:	6858      	ldr	r0, [r3, #4]
 80056c8:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80056cc:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80056d0:	ebbc 0c00 	subs.w	ip, ip, r0
 80056d4:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80056d8:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80056dc:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80056e0:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80056e4:	ebb1 010c 	subs.w	r1, r1, ip
 80056e8:	eb63 030e 	sbc.w	r3, r3, lr
 80056ec:	00db      	lsls	r3, r3, #3
 80056ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056f2:	00c9      	lsls	r1, r1, #3
 80056f4:	eb11 0c00 	adds.w	ip, r1, r0
 80056f8:	f143 0300 	adc.w	r3, r3, #0
 80056fc:	0299      	lsls	r1, r3, #10
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 80056fe:	2300      	movs	r3, #0
 8005700:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8005704:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8005708:	f7fa fdf2 	bl	80002f0 <__aeabi_uldivmod>
 800570c:	e7d1      	b.n	80056b2 <HAL_RCC_GetSysClockFreq+0x36>
		sysclockfreq = HSE_VALUE;
 800570e:	4803      	ldr	r0, [pc, #12]	; (800571c <HAL_RCC_GetSysClockFreq+0xa0>)
 8005710:	e000      	b.n	8005714 <HAL_RCC_GetSysClockFreq+0x98>
	switch (RCC->CFGR & RCC_CFGR_SWS) {
 8005712:	4803      	ldr	r0, [pc, #12]	; (8005720 <HAL_RCC_GetSysClockFreq+0xa4>)
		sysclockfreq = HSI_VALUE;
		break;
	}
	}
	return sysclockfreq;
}
 8005714:	bd08      	pop	{r3, pc}
 8005716:	bf00      	nop
 8005718:	40023800 	.word	0x40023800
 800571c:	017d7840 	.word	0x017d7840
 8005720:	00f42400 	.word	0x00f42400

08005724 <HAL_RCC_ClockConfig>:
	if (RCC_ClkInitStruct == NULL) {
 8005724:	2800      	cmp	r0, #0
 8005726:	f000 80a0 	beq.w	800586a <HAL_RCC_ClockConfig+0x146>
		uint32_t FLatency) {
 800572a:	b570      	push	{r4, r5, r6, lr}
 800572c:	460d      	mov	r5, r1
 800572e:	4604      	mov	r4, r0
	if (FLatency > __HAL_FLASH_GET_LATENCY()) {
 8005730:	4b52      	ldr	r3, [pc, #328]	; (800587c <HAL_RCC_ClockConfig+0x158>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 030f 	and.w	r3, r3, #15
 8005738:	428b      	cmp	r3, r1
 800573a:	d20b      	bcs.n	8005754 <HAL_RCC_ClockConfig+0x30>
		__HAL_FLASH_SET_LATENCY(FLatency);
 800573c:	4a4f      	ldr	r2, [pc, #316]	; (800587c <HAL_RCC_ClockConfig+0x158>)
 800573e:	6813      	ldr	r3, [r2, #0]
 8005740:	f023 030f 	bic.w	r3, r3, #15
 8005744:	430b      	orrs	r3, r1
 8005746:	6013      	str	r3, [r2, #0]
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 8005748:	6813      	ldr	r3, [r2, #0]
 800574a:	f003 030f 	and.w	r3, r3, #15
 800574e:	428b      	cmp	r3, r1
 8005750:	f040 808d 	bne.w	800586e <HAL_RCC_ClockConfig+0x14a>
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK)
 8005754:	6823      	ldr	r3, [r4, #0]
 8005756:	f013 0f02 	tst.w	r3, #2
 800575a:	d017      	beq.n	800578c <HAL_RCC_ClockConfig+0x68>
		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 800575c:	f013 0f04 	tst.w	r3, #4
 8005760:	d004      	beq.n	800576c <HAL_RCC_ClockConfig+0x48>
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005762:	4a47      	ldr	r2, [pc, #284]	; (8005880 <HAL_RCC_ClockConfig+0x15c>)
 8005764:	6893      	ldr	r3, [r2, #8]
 8005766:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800576a:	6093      	str	r3, [r2, #8]
		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 800576c:	6823      	ldr	r3, [r4, #0]
 800576e:	f013 0f08 	tst.w	r3, #8
 8005772:	d004      	beq.n	800577e <HAL_RCC_ClockConfig+0x5a>
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005774:	4a42      	ldr	r2, [pc, #264]	; (8005880 <HAL_RCC_ClockConfig+0x15c>)
 8005776:	6893      	ldr	r3, [r2, #8]
 8005778:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800577c:	6093      	str	r3, [r2, #8]
		MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800577e:	4a40      	ldr	r2, [pc, #256]	; (8005880 <HAL_RCC_ClockConfig+0x15c>)
 8005780:	6893      	ldr	r3, [r2, #8]
 8005782:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005786:	68a1      	ldr	r1, [r4, #8]
 8005788:	430b      	orrs	r3, r1
 800578a:	6093      	str	r3, [r2, #8]
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK)
 800578c:	6823      	ldr	r3, [r4, #0]
 800578e:	f013 0f01 	tst.w	r3, #1
 8005792:	d031      	beq.n	80057f8 <HAL_RCC_ClockConfig+0xd4>
		if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 8005794:	6863      	ldr	r3, [r4, #4]
 8005796:	2b01      	cmp	r3, #1
 8005798:	d020      	beq.n	80057dc <HAL_RCC_ClockConfig+0xb8>
		else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) {
 800579a:	2b02      	cmp	r3, #2
 800579c:	d025      	beq.n	80057ea <HAL_RCC_ClockConfig+0xc6>
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 800579e:	4a38      	ldr	r2, [pc, #224]	; (8005880 <HAL_RCC_ClockConfig+0x15c>)
 80057a0:	6812      	ldr	r2, [r2, #0]
 80057a2:	f012 0f02 	tst.w	r2, #2
 80057a6:	d064      	beq.n	8005872 <HAL_RCC_ClockConfig+0x14e>
		__HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057a8:	4935      	ldr	r1, [pc, #212]	; (8005880 <HAL_RCC_ClockConfig+0x15c>)
 80057aa:	688a      	ldr	r2, [r1, #8]
 80057ac:	f022 0203 	bic.w	r2, r2, #3
 80057b0:	4313      	orrs	r3, r2
 80057b2:	608b      	str	r3, [r1, #8]
		tickstart = HAL_GetTick();
 80057b4:	f7fd ffae 	bl	8003714 <HAL_GetTick>
 80057b8:	4606      	mov	r6, r0
		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 80057ba:	4b31      	ldr	r3, [pc, #196]	; (8005880 <HAL_RCC_ClockConfig+0x15c>)
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f003 030c 	and.w	r3, r3, #12
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
 80057c2:	6862      	ldr	r2, [r4, #4]
 80057c4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80057c8:	d016      	beq.n	80057f8 <HAL_RCC_ClockConfig+0xd4>
			if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 80057ca:	f7fd ffa3 	bl	8003714 <HAL_GetTick>
 80057ce:	1b80      	subs	r0, r0, r6
 80057d0:	f241 3388 	movw	r3, #5000	; 0x1388
 80057d4:	4298      	cmp	r0, r3
 80057d6:	d9f0      	bls.n	80057ba <HAL_RCC_ClockConfig+0x96>
				return HAL_TIMEOUT;
 80057d8:	2003      	movs	r0, #3
 80057da:	e045      	b.n	8005868 <HAL_RCC_ClockConfig+0x144>
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 80057dc:	4a28      	ldr	r2, [pc, #160]	; (8005880 <HAL_RCC_ClockConfig+0x15c>)
 80057de:	6812      	ldr	r2, [r2, #0]
 80057e0:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80057e4:	d1e0      	bne.n	80057a8 <HAL_RCC_ClockConfig+0x84>
				return HAL_ERROR;
 80057e6:	2001      	movs	r0, #1
 80057e8:	e03e      	b.n	8005868 <HAL_RCC_ClockConfig+0x144>
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 80057ea:	4a25      	ldr	r2, [pc, #148]	; (8005880 <HAL_RCC_ClockConfig+0x15c>)
 80057ec:	6812      	ldr	r2, [r2, #0]
 80057ee:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80057f2:	d1d9      	bne.n	80057a8 <HAL_RCC_ClockConfig+0x84>
				return HAL_ERROR;
 80057f4:	2001      	movs	r0, #1
 80057f6:	e037      	b.n	8005868 <HAL_RCC_ClockConfig+0x144>
	if (FLatency < __HAL_FLASH_GET_LATENCY()) {
 80057f8:	4b20      	ldr	r3, [pc, #128]	; (800587c <HAL_RCC_ClockConfig+0x158>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 030f 	and.w	r3, r3, #15
 8005800:	42ab      	cmp	r3, r5
 8005802:	d90a      	bls.n	800581a <HAL_RCC_ClockConfig+0xf6>
		__HAL_FLASH_SET_LATENCY(FLatency);
 8005804:	4a1d      	ldr	r2, [pc, #116]	; (800587c <HAL_RCC_ClockConfig+0x158>)
 8005806:	6813      	ldr	r3, [r2, #0]
 8005808:	f023 030f 	bic.w	r3, r3, #15
 800580c:	432b      	orrs	r3, r5
 800580e:	6013      	str	r3, [r2, #0]
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 8005810:	6813      	ldr	r3, [r2, #0]
 8005812:	f003 030f 	and.w	r3, r3, #15
 8005816:	42ab      	cmp	r3, r5
 8005818:	d12d      	bne.n	8005876 <HAL_RCC_ClockConfig+0x152>
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 800581a:	6823      	ldr	r3, [r4, #0]
 800581c:	f013 0f04 	tst.w	r3, #4
 8005820:	d006      	beq.n	8005830 <HAL_RCC_ClockConfig+0x10c>
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1,
 8005822:	4a17      	ldr	r2, [pc, #92]	; (8005880 <HAL_RCC_ClockConfig+0x15c>)
 8005824:	6893      	ldr	r3, [r2, #8]
 8005826:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800582a:	68e1      	ldr	r1, [r4, #12]
 800582c:	430b      	orrs	r3, r1
 800582e:	6093      	str	r3, [r2, #8]
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 8005830:	6823      	ldr	r3, [r4, #0]
 8005832:	f013 0f08 	tst.w	r3, #8
 8005836:	d007      	beq.n	8005848 <HAL_RCC_ClockConfig+0x124>
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2,
 8005838:	4a11      	ldr	r2, [pc, #68]	; (8005880 <HAL_RCC_ClockConfig+0x15c>)
 800583a:	6893      	ldr	r3, [r2, #8]
 800583c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005840:	6921      	ldr	r1, [r4, #16]
 8005842:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005846:	6093      	str	r3, [r2, #8]
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 8005848:	f7ff ff18 	bl	800567c <HAL_RCC_GetSysClockFreq>
			>> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800584c:	4b0c      	ldr	r3, [pc, #48]	; (8005880 <HAL_RCC_ClockConfig+0x15c>)
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005854:	4a0b      	ldr	r2, [pc, #44]	; (8005884 <HAL_RCC_ClockConfig+0x160>)
 8005856:	5cd3      	ldrb	r3, [r2, r3]
 8005858:	40d8      	lsrs	r0, r3
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 800585a:	4b0b      	ldr	r3, [pc, #44]	; (8005888 <HAL_RCC_ClockConfig+0x164>)
 800585c:	6018      	str	r0, [r3, #0]
	HAL_InitTick(uwTickPrio);
 800585e:	4b0b      	ldr	r3, [pc, #44]	; (800588c <HAL_RCC_ClockConfig+0x168>)
 8005860:	6818      	ldr	r0, [r3, #0]
 8005862:	f7fd fe29 	bl	80034b8 <HAL_InitTick>
	return HAL_OK;
 8005866:	2000      	movs	r0, #0
}
 8005868:	bd70      	pop	{r4, r5, r6, pc}
		return HAL_ERROR;
 800586a:	2001      	movs	r0, #1
}
 800586c:	4770      	bx	lr
			return HAL_ERROR;
 800586e:	2001      	movs	r0, #1
 8005870:	e7fa      	b.n	8005868 <HAL_RCC_ClockConfig+0x144>
				return HAL_ERROR;
 8005872:	2001      	movs	r0, #1
 8005874:	e7f8      	b.n	8005868 <HAL_RCC_ClockConfig+0x144>
			return HAL_ERROR;
 8005876:	2001      	movs	r0, #1
 8005878:	e7f6      	b.n	8005868 <HAL_RCC_ClockConfig+0x144>
 800587a:	bf00      	nop
 800587c:	40023c00 	.word	0x40023c00
 8005880:	40023800 	.word	0x40023800
 8005884:	08009f48 	.word	0x08009f48
 8005888:	20000018 	.word	0x20000018
 800588c:	20000020 	.word	0x20000020

08005890 <HAL_RCC_GetHCLKFreq>:
 * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
 * @retval HCLK frequency
 */
uint32_t HAL_RCC_GetHCLKFreq(void) {
	return SystemCoreClock;
}
 8005890:	4b01      	ldr	r3, [pc, #4]	; (8005898 <HAL_RCC_GetHCLKFreq+0x8>)
 8005892:	6818      	ldr	r0, [r3, #0]
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	20000018 	.word	0x20000018

0800589c <HAL_RCC_GetPCLK1Freq>:
 * @brief  Returns the PCLK1 frequency
 * @note   Each time PCLK1 changes, this function must be called to update the
 *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK1 frequency
 */
uint32_t HAL_RCC_GetPCLK1Freq(void) {
 800589c:	b508      	push	{r3, lr}
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (HAL_RCC_GetHCLKFreq()
 800589e:	f7ff fff7 	bl	8005890 <HAL_RCC_GetHCLKFreq>
			>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80058a2:	4b04      	ldr	r3, [pc, #16]	; (80058b4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80058aa:	4a03      	ldr	r2, [pc, #12]	; (80058b8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80058ac:	5cd3      	ldrb	r3, [r2, r3]
}
 80058ae:	40d8      	lsrs	r0, r3
 80058b0:	bd08      	pop	{r3, pc}
 80058b2:	bf00      	nop
 80058b4:	40023800 	.word	0x40023800
 80058b8:	08009f58 	.word	0x08009f58

080058bc <HAL_RCC_GetPCLK2Freq>:
 * @brief  Returns the PCLK2 frequency
 * @note   Each time PCLK2 changes, this function must be called to update the
 *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK2 frequency
 */
uint32_t HAL_RCC_GetPCLK2Freq(void) {
 80058bc:	b508      	push	{r3, lr}
	/* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
	return (HAL_RCC_GetHCLKFreq()
 80058be:	f7ff ffe7 	bl	8005890 <HAL_RCC_GetHCLKFreq>
			>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80058c2:	4b04      	ldr	r3, [pc, #16]	; (80058d4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80058ca:	4a03      	ldr	r2, [pc, #12]	; (80058d8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80058cc:	5cd3      	ldrb	r3, [r2, r3]
}
 80058ce:	40d8      	lsrs	r0, r3
 80058d0:	bd08      	pop	{r3, pc}
 80058d2:	bf00      	nop
 80058d4:	40023800 	.word	0x40023800
 80058d8:	08009f58 	.word	0x08009f58

080058dc <HAL_RCC_GetClockConfig>:
 * @retval None
 */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct,
		uint32_t *pFLatency) {
	/* Set all possible values for the Clock type parameter --------------------*/
	RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 80058dc:	230f      	movs	r3, #15
 80058de:	6003      	str	r3, [r0, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

	/* Get the SYSCLK configuration --------------------------------------------*/
	RCC_ClkInitStruct->SYSCLKSource = (uint32_t) (RCC->CFGR & RCC_CFGR_SW);
 80058e0:	4b0b      	ldr	r3, [pc, #44]	; (8005910 <HAL_RCC_GetClockConfig+0x34>)
 80058e2:	689a      	ldr	r2, [r3, #8]
 80058e4:	f002 0203 	and.w	r2, r2, #3
 80058e8:	6042      	str	r2, [r0, #4]

	/* Get the HCLK configuration ----------------------------------------------*/
	RCC_ClkInitStruct->AHBCLKDivider = (uint32_t) (RCC->CFGR & RCC_CFGR_HPRE);
 80058ea:	689a      	ldr	r2, [r3, #8]
 80058ec:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80058f0:	6082      	str	r2, [r0, #8]

	/* Get the APB1 configuration ----------------------------------------------*/
	RCC_ClkInitStruct->APB1CLKDivider = (uint32_t) (RCC->CFGR & RCC_CFGR_PPRE1);
 80058f2:	689a      	ldr	r2, [r3, #8]
 80058f4:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80058f8:	60c2      	str	r2, [r0, #12]

	/* Get the APB2 configuration ----------------------------------------------*/
	RCC_ClkInitStruct->APB2CLKDivider = (uint32_t) ((RCC->CFGR & RCC_CFGR_PPRE2)
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	08db      	lsrs	r3, r3, #3
 80058fe:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8005902:	6103      	str	r3, [r0, #16]
			>> 3);

	/* Get the Flash Wait State (Latency) configuration ------------------------*/
	*pFLatency = (uint32_t) (FLASH->ACR & FLASH_ACR_LATENCY);
 8005904:	4b03      	ldr	r3, [pc, #12]	; (8005914 <HAL_RCC_GetClockConfig+0x38>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 030f 	and.w	r3, r3, #15
 800590c:	600b      	str	r3, [r1, #0]
}
 800590e:	4770      	bx	lr
 8005910:	40023800 	.word	0x40023800
 8005914:	40023c00 	.word	0x40023c00

08005918 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800591a:	b083      	sub	sp, #12
 800591c:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800591e:	6806      	ldr	r6, [r0, #0]
 8005920:	f016 0601 	ands.w	r6, r6, #1
 8005924:	d00d      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005926:	4bb5      	ldr	r3, [pc, #724]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005928:	689a      	ldr	r2, [r3, #8]
 800592a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800592e:	609a      	str	r2, [r3, #8]
 8005930:	689a      	ldr	r2, [r3, #8]
 8005932:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8005934:	430a      	orrs	r2, r1
 8005936:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005938:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800593a:	2b00      	cmp	r3, #0
 800593c:	f000 8167 	beq.w	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  uint32_t plli2sused = 0;
 8005940:	2600      	movs	r6, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005942:	6825      	ldr	r5, [r4, #0]
 8005944:	f415 2500 	ands.w	r5, r5, #524288	; 0x80000
 8005948:	d011      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800594a:	4aac      	ldr	r2, [pc, #688]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800594c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8005950:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005954:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005956:	430b      	orrs	r3, r1
 8005958:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800595c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800595e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005962:	f000 8156 	beq.w	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005966:	2b00      	cmp	r3, #0
 8005968:	f000 8155 	beq.w	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  uint32_t pllsaiused = 0;
 800596c:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800596e:	6823      	ldr	r3, [r4, #0]
 8005970:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005974:	d00f      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x7e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005976:	4aa1      	ldr	r2, [pc, #644]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005978:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800597c:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8005980:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005982:	430b      	orrs	r3, r1
 8005984:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005988:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800598a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800598e:	f000 8144 	beq.w	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x302>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005992:	b903      	cbnz	r3, 8005996 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      pllsaiused = 1;
 8005994:	2501      	movs	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005996:	6823      	ldr	r3, [r4, #0]
 8005998:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800599c:	d000      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
      plli2sused = 1;
 800599e:	2601      	movs	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80059a0:	f013 0f20 	tst.w	r3, #32
 80059a4:	f040 813b 	bne.w	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x306>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80059a8:	6823      	ldr	r3, [r4, #0]
 80059aa:	f013 0f10 	tst.w	r3, #16
 80059ae:	d00c      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80059b0:	4b92      	ldr	r3, [pc, #584]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80059b2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80059b6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80059ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80059be:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80059c2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80059c4:	430a      	orrs	r2, r1
 80059c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80059ca:	6823      	ldr	r3, [r4, #0]
 80059cc:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80059d0:	d008      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80059d2:	4a8a      	ldr	r2, [pc, #552]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80059d4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80059d8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80059dc:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80059de:	430b      	orrs	r3, r1
 80059e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80059e4:	6823      	ldr	r3, [r4, #0]
 80059e6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80059ea:	d008      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80059ec:	4a83      	ldr	r2, [pc, #524]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80059ee:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80059f2:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80059f6:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80059f8:	430b      	orrs	r3, r1
 80059fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80059fe:	6823      	ldr	r3, [r4, #0]
 8005a00:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005a04:	d008      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a06:	4a7d      	ldr	r2, [pc, #500]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005a08:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005a0c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005a10:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8005a12:	430b      	orrs	r3, r1
 8005a14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a18:	6823      	ldr	r3, [r4, #0]
 8005a1a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005a1e:	d008      	beq.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a20:	4a76      	ldr	r2, [pc, #472]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005a22:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005a26:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8005a2a:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8005a2c:	430b      	orrs	r3, r1
 8005a2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a32:	6823      	ldr	r3, [r4, #0]
 8005a34:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005a38:	d008      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a3a:	4a70      	ldr	r2, [pc, #448]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005a3c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005a40:	f023 0303 	bic.w	r3, r3, #3
 8005a44:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005a46:	430b      	orrs	r3, r1
 8005a48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a4c:	6823      	ldr	r3, [r4, #0]
 8005a4e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005a52:	d008      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a54:	4a69      	ldr	r2, [pc, #420]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005a56:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005a5a:	f023 030c 	bic.w	r3, r3, #12
 8005a5e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005a60:	430b      	orrs	r3, r1
 8005a62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a66:	6823      	ldr	r3, [r4, #0]
 8005a68:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005a6c:	d008      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a6e:	4a63      	ldr	r2, [pc, #396]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005a70:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005a74:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005a78:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005a7a:	430b      	orrs	r3, r1
 8005a7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a80:	6823      	ldr	r3, [r4, #0]
 8005a82:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005a86:	d008      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a88:	4a5c      	ldr	r2, [pc, #368]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005a8a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005a8e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005a92:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005a94:	430b      	orrs	r3, r1
 8005a96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005a9a:	6823      	ldr	r3, [r4, #0]
 8005a9c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005aa0:	d008      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005aa2:	4a56      	ldr	r2, [pc, #344]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005aa4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005aa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aac:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8005aae:	430b      	orrs	r3, r1
 8005ab0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005ab4:	6823      	ldr	r3, [r4, #0]
 8005ab6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005aba:	d008      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005abc:	4a4f      	ldr	r2, [pc, #316]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005abe:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005ac2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005ac6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005ac8:	430b      	orrs	r3, r1
 8005aca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005ace:	6823      	ldr	r3, [r4, #0]
 8005ad0:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8005ad4:	d008      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005ad6:	4a49      	ldr	r2, [pc, #292]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005ad8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005adc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005ae0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005ae2:	430b      	orrs	r3, r1
 8005ae4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005ae8:	6823      	ldr	r3, [r4, #0]
 8005aea:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8005aee:	d008      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005af0:	4a42      	ldr	r2, [pc, #264]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005af2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005af6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005afa:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8005afc:	430b      	orrs	r3, r1
 8005afe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005b02:	6823      	ldr	r3, [r4, #0]
 8005b04:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8005b08:	d008      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005b0a:	4a3c      	ldr	r2, [pc, #240]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005b0c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005b10:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b14:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8005b16:	430b      	orrs	r3, r1
 8005b18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005b1c:	6823      	ldr	r3, [r4, #0]
 8005b1e:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8005b22:	d00d      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005b24:	4a35      	ldr	r2, [pc, #212]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005b26:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005b2a:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8005b2e:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8005b30:	430b      	orrs	r3, r1
 8005b32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005b36:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005b38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b3c:	f000 80d5 	beq.w	8005cea <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005b40:	6823      	ldr	r3, [r4, #0]
 8005b42:	f013 0f08 	tst.w	r3, #8
 8005b46:	d000      	beq.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    pllsaiused = 1;
 8005b48:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005b4a:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8005b4e:	d008      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b50:	4a2a      	ldr	r2, [pc, #168]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005b52:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005b56:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8005b5a:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8005b5c:	430b      	orrs	r3, r1
 8005b5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005b62:	6823      	ldr	r3, [r4, #0]
 8005b64:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8005b68:	d009      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005b6a:	4a24      	ldr	r2, [pc, #144]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005b6c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005b70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b74:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8005b78:	430b      	orrs	r3, r1
 8005b7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005b7e:	6823      	ldr	r3, [r4, #0]
 8005b80:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8005b84:	d009      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x282>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005b86:	4a1d      	ldr	r2, [pc, #116]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005b88:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005b8c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005b90:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8005b94:	430b      	orrs	r3, r1
 8005b96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005b9a:	6823      	ldr	r3, [r4, #0]
 8005b9c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8005ba0:	d009      	beq.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005ba2:	4a16      	ldr	r2, [pc, #88]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005ba4:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8005ba8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005bac:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8005bb0:	430b      	orrs	r3, r1
 8005bb2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005bb6:	6823      	ldr	r3, [r4, #0]
 8005bb8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8005bbc:	d009      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005bbe:	4a0f      	ldr	r2, [pc, #60]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005bc0:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8005bc4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005bc8:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8005bcc:	430b      	orrs	r3, r1
 8005bce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005bd2:	b926      	cbnz	r6, 8005bde <HAL_RCCEx_PeriphCLKConfig+0x2c6>
 8005bd4:	6823      	ldr	r3, [r4, #0]
 8005bd6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005bda:	f000 8106 	beq.w	8005dea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005bde:	4a07      	ldr	r2, [pc, #28]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005be0:	6813      	ldr	r3, [r2, #0]
 8005be2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005be6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005be8:	f7fd fd94 	bl	8003714 <HAL_GetTick>
 8005bec:	4606      	mov	r6, r0

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005bee:	4b03      	ldr	r3, [pc, #12]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8005bf6:	d07a      	beq.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x3d6>
 8005bf8:	e002      	b.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8005bfa:	bf00      	nop
 8005bfc:	40023800 	.word	0x40023800
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005c00:	f7fd fd88 	bl	8003714 <HAL_GetTick>
 8005c04:	1b80      	subs	r0, r0, r6
 8005c06:	2864      	cmp	r0, #100	; 0x64
 8005c08:	d9f1      	bls.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c0a:	2003      	movs	r0, #3
 8005c0c:	e0f0      	b.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
      plli2sused = 1;
 8005c0e:	2601      	movs	r6, #1
 8005c10:	e697      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1;
 8005c12:	2601      	movs	r6, #1
 8005c14:	e6a7      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      pllsaiused = 1;
 8005c16:	2501      	movs	r5, #1
 8005c18:	e6a9      	b.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x56>
      plli2sused = 1;
 8005c1a:	2601      	movs	r6, #1
 8005c1c:	e6b9      	b.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c1e:	4b7f      	ldr	r3, [pc, #508]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005c20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c22:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005c26:	641a      	str	r2, [r3, #64]	; 0x40
 8005c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c2e:	9301      	str	r3, [sp, #4]
 8005c30:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8005c32:	4a7b      	ldr	r2, [pc, #492]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8005c34:	6813      	ldr	r3, [r2, #0]
 8005c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c3a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8005c3c:	f7fd fd6a 	bl	8003714 <HAL_GetTick>
 8005c40:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005c42:	4b77      	ldr	r3, [pc, #476]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005c4a:	d106      	bne.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x342>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c4c:	f7fd fd62 	bl	8003714 <HAL_GetTick>
 8005c50:	1bc0      	subs	r0, r0, r7
 8005c52:	2864      	cmp	r0, #100	; 0x64
 8005c54:	d9f5      	bls.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x32a>
        return HAL_TIMEOUT;
 8005c56:	2003      	movs	r0, #3
 8005c58:	e0ca      	b.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c5a:	4b70      	ldr	r3, [pc, #448]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c5e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8005c62:	d015      	beq.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8005c64:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005c66:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d010      	beq.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x378>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c6e:	4b6b      	ldr	r3, [pc, #428]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005c70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005c72:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c76:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005c78:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8005c7c:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c7e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005c80:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8005c84:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8005c86:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c8a:	f013 0f01 	tst.w	r3, #1
 8005c8e:	d112      	bne.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c90:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005c92:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8005c96:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8005c9a:	d01d      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8005c9c:	4a5f      	ldr	r2, [pc, #380]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005c9e:	6893      	ldr	r3, [r2, #8]
 8005ca0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005ca4:	6093      	str	r3, [r2, #8]
 8005ca6:	495d      	ldr	r1, [pc, #372]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005ca8:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8005caa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005cac:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	670b      	str	r3, [r1, #112]	; 0x70
 8005cb4:	e678      	b.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
        tickstart = HAL_GetTick();
 8005cb6:	f7fd fd2d 	bl	8003714 <HAL_GetTick>
 8005cba:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cbc:	4b57      	ldr	r3, [pc, #348]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cc0:	f013 0f02 	tst.w	r3, #2
 8005cc4:	d1e4      	bne.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x378>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cc6:	f7fd fd25 	bl	8003714 <HAL_GetTick>
 8005cca:	1bc0      	subs	r0, r0, r7
 8005ccc:	f241 3388 	movw	r3, #5000	; 0x1388
 8005cd0:	4298      	cmp	r0, r3
 8005cd2:	d9f3      	bls.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
            return HAL_TIMEOUT;
 8005cd4:	2003      	movs	r0, #3
 8005cd6:	e08b      	b.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cd8:	4850      	ldr	r0, [pc, #320]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005cda:	6882      	ldr	r2, [r0, #8]
 8005cdc:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8005ce0:	4950      	ldr	r1, [pc, #320]	; (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005ce2:	4019      	ands	r1, r3
 8005ce4:	430a      	orrs	r2, r1
 8005ce6:	6082      	str	r2, [r0, #8]
 8005ce8:	e7dd      	b.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
      pllsaiused = 1;
 8005cea:	2501      	movs	r5, #1
 8005cec:	e728      	b.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x228>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005cee:	6823      	ldr	r3, [r4, #0]
 8005cf0:	f013 0f01 	tst.w	r3, #1
 8005cf4:	d013      	beq.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005cf6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005cf8:	b98b      	cbnz	r3, 8005d1e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005cfa:	4a48      	ldr	r2, [pc, #288]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005cfc:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005d00:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005d04:	6860      	ldr	r0, [r4, #4]
 8005d06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d0a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005d0e:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8005d12:	430b      	orrs	r3, r1
 8005d14:	68a1      	ldr	r1, [r4, #8]
 8005d16:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8005d1a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005d1e:	6823      	ldr	r3, [r4, #0]
 8005d20:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8005d24:	d003      	beq.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005d26:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005d28:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8005d2c:	d006      	beq.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x424>
 8005d2e:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005d32:	d01e      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x45a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005d34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d3a:	d11a      	bne.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x45a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005d3c:	4a37      	ldr	r2, [pc, #220]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005d3e:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005d42:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005d46:	6860      	ldr	r0, [r4, #4]
 8005d48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d4c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005d50:	68e0      	ldr	r0, [r4, #12]
 8005d52:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8005d56:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8005d5a:	430b      	orrs	r3, r1
 8005d5c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005d60:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8005d64:	f023 031f 	bic.w	r3, r3, #31
 8005d68:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005d6a:	3901      	subs	r1, #1
 8005d6c:	430b      	orrs	r3, r1
 8005d6e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005d72:	6823      	ldr	r3, [r4, #0]
 8005d74:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8005d78:	d011      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x486>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005d7a:	4a28      	ldr	r2, [pc, #160]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005d7c:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005d80:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005d84:	6866      	ldr	r6, [r4, #4]
 8005d86:	6923      	ldr	r3, [r4, #16]
 8005d88:	041b      	lsls	r3, r3, #16
 8005d8a:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8005d8e:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8005d92:	4303      	orrs	r3, r0
 8005d94:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8005d98:	430b      	orrs	r3, r1
 8005d9a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005d9e:	6823      	ldr	r3, [r4, #0]
 8005da0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005da4:	d00d      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005da6:	6862      	ldr	r2, [r4, #4]
 8005da8:	6923      	ldr	r3, [r4, #16]
 8005daa:	041b      	lsls	r3, r3, #16
 8005dac:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005db0:	68e2      	ldr	r2, [r4, #12]
 8005db2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005db6:	68a2      	ldr	r2, [r4, #8]
 8005db8:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8005dbc:	4a17      	ldr	r2, [pc, #92]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005dbe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005dc2:	4a16      	ldr	r2, [pc, #88]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005dc4:	6813      	ldr	r3, [r2, #0]
 8005dc6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005dca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dcc:	f7fd fca2 	bl	8003714 <HAL_GetTick>
 8005dd0:	4606      	mov	r6, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005dd2:	4b12      	ldr	r3, [pc, #72]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8005dda:	d106      	bne.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005ddc:	f7fd fc9a 	bl	8003714 <HAL_GetTick>
 8005de0:	1b80      	subs	r0, r0, r6
 8005de2:	2864      	cmp	r0, #100	; 0x64
 8005de4:	d9f5      	bls.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005de6:	2003      	movs	r0, #3
 8005de8:	e002      	b.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005dea:	2d01      	cmp	r5, #1
 8005dec:	d002      	beq.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8005dee:	2000      	movs	r0, #0
}
 8005df0:	b003      	add	sp, #12
 8005df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 8005df4:	4a09      	ldr	r2, [pc, #36]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005df6:	6813      	ldr	r3, [r2, #0]
 8005df8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dfc:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8005dfe:	f7fd fc89 	bl	8003714 <HAL_GetTick>
 8005e02:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005e04:	4b05      	ldr	r3, [pc, #20]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8005e0c:	d00c      	beq.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x510>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005e0e:	f7fd fc81 	bl	8003714 <HAL_GetTick>
 8005e12:	1b40      	subs	r0, r0, r5
 8005e14:	2864      	cmp	r0, #100	; 0x64
 8005e16:	d9f5      	bls.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
        return HAL_TIMEOUT;
 8005e18:	2003      	movs	r0, #3
 8005e1a:	e7e9      	b.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8005e1c:	40023800 	.word	0x40023800
 8005e20:	40007000 	.word	0x40007000
 8005e24:	0ffffcff 	.word	0x0ffffcff
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005e28:	6823      	ldr	r3, [r4, #0]
 8005e2a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8005e2e:	d001      	beq.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x51c>
 8005e30:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005e32:	b122      	cbz	r2, 8005e3e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8005e34:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005e38:	d01d      	beq.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x55e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005e3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e3c:	b9db      	cbnz	r3, 8005e76 <HAL_RCCEx_PeriphCLKConfig+0x55e>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005e3e:	4a35      	ldr	r2, [pc, #212]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8005e40:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005e44:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005e48:	6960      	ldr	r0, [r4, #20]
 8005e4a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005e4e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005e52:	69a0      	ldr	r0, [r4, #24]
 8005e54:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8005e58:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8005e5c:	430b      	orrs	r3, r1
 8005e5e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005e62:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8005e66:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8005e6a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005e6c:	3901      	subs	r1, #1
 8005e6e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005e72:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005e76:	6823      	ldr	r3, [r4, #0]
 8005e78:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8005e7c:	d003      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x56e>
 8005e7e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005e80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e84:	d031      	beq.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x5d2>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005e86:	6823      	ldr	r3, [r4, #0]
 8005e88:	f013 0f08 	tst.w	r3, #8
 8005e8c:	d019      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005e8e:	4a21      	ldr	r2, [pc, #132]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8005e90:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005e94:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005e98:	6960      	ldr	r0, [r4, #20]
 8005e9a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005e9e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005ea2:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8005ea6:	430b      	orrs	r3, r1
 8005ea8:	69e1      	ldr	r1, [r4, #28]
 8005eaa:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8005eae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005eb2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8005eb6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005eba:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005ebc:	430b      	orrs	r3, r1
 8005ebe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8005ec2:	4a14      	ldr	r2, [pc, #80]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8005ec4:	6813      	ldr	r3, [r2, #0]
 8005ec6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eca:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8005ecc:	f7fd fc22 	bl	8003714 <HAL_GetTick>
 8005ed0:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005ed2:	4b10      	ldr	r3, [pc, #64]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8005eda:	d119      	bne.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005edc:	f7fd fc1a 	bl	8003714 <HAL_GetTick>
 8005ee0:	1b00      	subs	r0, r0, r4
 8005ee2:	2864      	cmp	r0, #100	; 0x64
 8005ee4:	d9f5      	bls.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
        return HAL_TIMEOUT;
 8005ee6:	2003      	movs	r0, #3
 8005ee8:	e782      	b.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005eea:	4a0a      	ldr	r2, [pc, #40]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8005eec:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005ef0:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005ef4:	6965      	ldr	r5, [r4, #20]
 8005ef6:	6a23      	ldr	r3, [r4, #32]
 8005ef8:	041b      	lsls	r3, r3, #16
 8005efa:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8005efe:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8005f02:	4303      	orrs	r3, r0
 8005f04:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8005f08:	430b      	orrs	r3, r1
 8005f0a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8005f0e:	e7ba      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  return HAL_OK;
 8005f10:	2000      	movs	r0, #0
 8005f12:	e76d      	b.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8005f14:	40023800 	.word	0x40023800

08005f18 <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8005f18:	4770      	bx	lr

08005f1a <HAL_SDRAM_Init>:
  if (hsdram == NULL)
 8005f1a:	b1e0      	cbz	r0, 8005f56 <HAL_SDRAM_Init+0x3c>
{
 8005f1c:	b538      	push	{r3, r4, r5, lr}
 8005f1e:	460d      	mov	r5, r1
 8005f20:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005f22:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8005f26:	b18b      	cbz	r3, 8005f4c <HAL_SDRAM_Init+0x32>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005f28:	2302      	movs	r3, #2
 8005f2a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005f2e:	4621      	mov	r1, r4
 8005f30:	f851 0b04 	ldr.w	r0, [r1], #4
 8005f34:	f000 ffc2 	bl	8006ebc <FMC_SDRAM_Init>
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005f38:	6862      	ldr	r2, [r4, #4]
 8005f3a:	4629      	mov	r1, r5
 8005f3c:	6820      	ldr	r0, [r4, #0]
 8005f3e:	f000 fff7 	bl	8006f30 <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005f42:	2301      	movs	r3, #1
 8005f44:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 8005f48:	2000      	movs	r0, #0
}
 8005f4a:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8005f4c:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8005f50:	f7ff ffe2 	bl	8005f18 <HAL_SDRAM_MspInit>
 8005f54:	e7e8      	b.n	8005f28 <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 8005f56:	2001      	movs	r0, #1
}
 8005f58:	4770      	bx	lr

08005f5a <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8005f5a:	b538      	push	{r3, r4, r5, lr}
 8005f5c:	4604      	mov	r4, r0
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8005f5e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8005f62:	b2d8      	uxtb	r0, r3

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8005f64:	2802      	cmp	r0, #2
 8005f66:	d005      	beq.n	8005f74 <HAL_SDRAM_SendCommand+0x1a>
 8005f68:	460d      	mov	r5, r1
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8005f6a:	2805      	cmp	r0, #5
 8005f6c:	bf18      	it	ne
 8005f6e:	2801      	cmpne	r0, #1
 8005f70:	d001      	beq.n	8005f76 <HAL_SDRAM_SendCommand+0x1c>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 8005f72:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8005f74:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005f76:	2302      	movs	r3, #2
 8005f78:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005f7c:	6820      	ldr	r0, [r4, #0]
 8005f7e:	f001 f82b 	bl	8006fd8 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005f82:	682b      	ldr	r3, [r5, #0]
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	d004      	beq.n	8005f92 <HAL_SDRAM_SendCommand+0x38>
      hsdram->State = HAL_SDRAM_STATE_READY;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 8005f8e:	2000      	movs	r0, #0
 8005f90:	e7f0      	b.n	8005f74 <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005f92:	2305      	movs	r3, #5
 8005f94:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 8005f98:	2000      	movs	r0, #0
 8005f9a:	e7eb      	b.n	8005f74 <HAL_SDRAM_SendCommand+0x1a>

08005f9c <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8005f9c:	b510      	push	{r4, lr}
 8005f9e:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005fa0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8005fa4:	b2d8      	uxtb	r0, r3
 8005fa6:	2802      	cmp	r0, #2
 8005fa8:	d005      	beq.n	8005fb6 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8005faa:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d001      	beq.n	8005fb8 <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 8005fb4:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8005fb6:	bd10      	pop	{r4, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005fb8:	2302      	movs	r3, #2
 8005fba:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8005fbe:	6820      	ldr	r0, [r4, #0]
 8005fc0:	f001 f822 	bl	8007008 <FMC_SDRAM_ProgramRefreshRate>
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 8005fca:	2000      	movs	r0, #0
 8005fcc:	e7f3      	b.n	8005fb6 <HAL_SDRAM_ProgramRefreshRate+0x1a>

08005fce <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005fce:	4770      	bx	lr

08005fd0 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fd0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d13a      	bne.n	8006050 <HAL_TIM_Base_Start_IT+0x80>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fda:	2302      	movs	r3, #2
 8005fdc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005fe0:	6802      	ldr	r2, [r0, #0]
 8005fe2:	68d3      	ldr	r3, [r2, #12]
 8005fe4:	f043 0301 	orr.w	r3, r3, #1
 8005fe8:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fea:	6803      	ldr	r3, [r0, #0]
 8005fec:	4a1a      	ldr	r2, [pc, #104]	; (8006058 <HAL_TIM_Base_Start_IT+0x88>)
 8005fee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ff2:	bf18      	it	ne
 8005ff4:	4293      	cmpne	r3, r2
 8005ff6:	d01d      	beq.n	8006034 <HAL_TIM_Base_Start_IT+0x64>
 8005ff8:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d019      	beq.n	8006034 <HAL_TIM_Base_Start_IT+0x64>
 8006000:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006004:	4293      	cmp	r3, r2
 8006006:	d015      	beq.n	8006034 <HAL_TIM_Base_Start_IT+0x64>
 8006008:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800600c:	4293      	cmp	r3, r2
 800600e:	d011      	beq.n	8006034 <HAL_TIM_Base_Start_IT+0x64>
 8006010:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8006014:	4293      	cmp	r3, r2
 8006016:	d00d      	beq.n	8006034 <HAL_TIM_Base_Start_IT+0x64>
 8006018:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800601c:	4293      	cmp	r3, r2
 800601e:	d009      	beq.n	8006034 <HAL_TIM_Base_Start_IT+0x64>
 8006020:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006024:	4293      	cmp	r3, r2
 8006026:	d005      	beq.n	8006034 <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	f042 0201 	orr.w	r2, r2, #1
 800602e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006030:	2000      	movs	r0, #0
 8006032:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006034:	6899      	ldr	r1, [r3, #8]
 8006036:	4a09      	ldr	r2, [pc, #36]	; (800605c <HAL_TIM_Base_Start_IT+0x8c>)
 8006038:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800603a:	2a06      	cmp	r2, #6
 800603c:	bf18      	it	ne
 800603e:	f5b2 3f80 	cmpne.w	r2, #65536	; 0x10000
 8006042:	d007      	beq.n	8006054 <HAL_TIM_Base_Start_IT+0x84>
      __HAL_TIM_ENABLE(htim);
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	f042 0201 	orr.w	r2, r2, #1
 800604a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800604c:	2000      	movs	r0, #0
 800604e:	4770      	bx	lr
    return HAL_ERROR;
 8006050:	2001      	movs	r0, #1
 8006052:	4770      	bx	lr
  return HAL_OK;
 8006054:	2000      	movs	r0, #0
}
 8006056:	4770      	bx	lr
 8006058:	40010000 	.word	0x40010000
 800605c:	00010007 	.word	0x00010007

08006060 <HAL_TIM_PeriodElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006060:	4770      	bx	lr

08006062 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006062:	4770      	bx	lr

08006064 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006064:	4770      	bx	lr

08006066 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006066:	4770      	bx	lr

08006068 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006068:	4770      	bx	lr

0800606a <HAL_TIM_IRQHandler>:
{
 800606a:	b510      	push	{r4, lr}
 800606c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800606e:	6803      	ldr	r3, [r0, #0]
 8006070:	691a      	ldr	r2, [r3, #16]
 8006072:	f012 0f02 	tst.w	r2, #2
 8006076:	d011      	beq.n	800609c <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006078:	68da      	ldr	r2, [r3, #12]
 800607a:	f012 0f02 	tst.w	r2, #2
 800607e:	d00d      	beq.n	800609c <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006080:	f06f 0202 	mvn.w	r2, #2
 8006084:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006086:	2301      	movs	r3, #1
 8006088:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800608a:	6803      	ldr	r3, [r0, #0]
 800608c:	699b      	ldr	r3, [r3, #24]
 800608e:	f013 0f03 	tst.w	r3, #3
 8006092:	d079      	beq.n	8006188 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8006094:	f7ff ffe6 	bl	8006064 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006098:	2300      	movs	r3, #0
 800609a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800609c:	6823      	ldr	r3, [r4, #0]
 800609e:	691a      	ldr	r2, [r3, #16]
 80060a0:	f012 0f04 	tst.w	r2, #4
 80060a4:	d012      	beq.n	80060cc <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80060a6:	68da      	ldr	r2, [r3, #12]
 80060a8:	f012 0f04 	tst.w	r2, #4
 80060ac:	d00e      	beq.n	80060cc <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80060ae:	f06f 0204 	mvn.w	r2, #4
 80060b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060b4:	2302      	movs	r3, #2
 80060b6:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060b8:	6823      	ldr	r3, [r4, #0]
 80060ba:	699b      	ldr	r3, [r3, #24]
 80060bc:	f413 7f40 	tst.w	r3, #768	; 0x300
 80060c0:	d068      	beq.n	8006194 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80060c2:	4620      	mov	r0, r4
 80060c4:	f7ff ffce 	bl	8006064 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060c8:	2300      	movs	r3, #0
 80060ca:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80060cc:	6823      	ldr	r3, [r4, #0]
 80060ce:	691a      	ldr	r2, [r3, #16]
 80060d0:	f012 0f08 	tst.w	r2, #8
 80060d4:	d012      	beq.n	80060fc <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80060d6:	68da      	ldr	r2, [r3, #12]
 80060d8:	f012 0f08 	tst.w	r2, #8
 80060dc:	d00e      	beq.n	80060fc <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80060de:	f06f 0208 	mvn.w	r2, #8
 80060e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060e4:	2304      	movs	r3, #4
 80060e6:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060e8:	6823      	ldr	r3, [r4, #0]
 80060ea:	69db      	ldr	r3, [r3, #28]
 80060ec:	f013 0f03 	tst.w	r3, #3
 80060f0:	d057      	beq.n	80061a2 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 80060f2:	4620      	mov	r0, r4
 80060f4:	f7ff ffb6 	bl	8006064 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060f8:	2300      	movs	r3, #0
 80060fa:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80060fc:	6823      	ldr	r3, [r4, #0]
 80060fe:	691a      	ldr	r2, [r3, #16]
 8006100:	f012 0f10 	tst.w	r2, #16
 8006104:	d012      	beq.n	800612c <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006106:	68da      	ldr	r2, [r3, #12]
 8006108:	f012 0f10 	tst.w	r2, #16
 800610c:	d00e      	beq.n	800612c <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800610e:	f06f 0210 	mvn.w	r2, #16
 8006112:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006114:	2308      	movs	r3, #8
 8006116:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006118:	6823      	ldr	r3, [r4, #0]
 800611a:	69db      	ldr	r3, [r3, #28]
 800611c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006120:	d046      	beq.n	80061b0 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8006122:	4620      	mov	r0, r4
 8006124:	f7ff ff9e 	bl	8006064 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006128:	2300      	movs	r3, #0
 800612a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800612c:	6823      	ldr	r3, [r4, #0]
 800612e:	691a      	ldr	r2, [r3, #16]
 8006130:	f012 0f01 	tst.w	r2, #1
 8006134:	d003      	beq.n	800613e <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006136:	68da      	ldr	r2, [r3, #12]
 8006138:	f012 0f01 	tst.w	r2, #1
 800613c:	d13f      	bne.n	80061be <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800613e:	6823      	ldr	r3, [r4, #0]
 8006140:	691a      	ldr	r2, [r3, #16]
 8006142:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006146:	d003      	beq.n	8006150 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006148:	68da      	ldr	r2, [r3, #12]
 800614a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800614e:	d13d      	bne.n	80061cc <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006150:	6823      	ldr	r3, [r4, #0]
 8006152:	691a      	ldr	r2, [r3, #16]
 8006154:	f412 7f80 	tst.w	r2, #256	; 0x100
 8006158:	d003      	beq.n	8006162 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800615a:	68da      	ldr	r2, [r3, #12]
 800615c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006160:	d13b      	bne.n	80061da <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006162:	6823      	ldr	r3, [r4, #0]
 8006164:	691a      	ldr	r2, [r3, #16]
 8006166:	f012 0f40 	tst.w	r2, #64	; 0x40
 800616a:	d003      	beq.n	8006174 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800616c:	68da      	ldr	r2, [r3, #12]
 800616e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006172:	d139      	bne.n	80061e8 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006174:	6823      	ldr	r3, [r4, #0]
 8006176:	691a      	ldr	r2, [r3, #16]
 8006178:	f012 0f20 	tst.w	r2, #32
 800617c:	d003      	beq.n	8006186 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800617e:	68da      	ldr	r2, [r3, #12]
 8006180:	f012 0f20 	tst.w	r2, #32
 8006184:	d137      	bne.n	80061f6 <HAL_TIM_IRQHandler+0x18c>
}
 8006186:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006188:	f7ff ff6b 	bl	8006062 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800618c:	4620      	mov	r0, r4
 800618e:	f7ff ff6a 	bl	8006066 <HAL_TIM_PWM_PulseFinishedCallback>
 8006192:	e781      	b.n	8006098 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006194:	4620      	mov	r0, r4
 8006196:	f7ff ff64 	bl	8006062 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800619a:	4620      	mov	r0, r4
 800619c:	f7ff ff63 	bl	8006066 <HAL_TIM_PWM_PulseFinishedCallback>
 80061a0:	e792      	b.n	80060c8 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061a2:	4620      	mov	r0, r4
 80061a4:	f7ff ff5d 	bl	8006062 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061a8:	4620      	mov	r0, r4
 80061aa:	f7ff ff5c 	bl	8006066 <HAL_TIM_PWM_PulseFinishedCallback>
 80061ae:	e7a3      	b.n	80060f8 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061b0:	4620      	mov	r0, r4
 80061b2:	f7ff ff56 	bl	8006062 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061b6:	4620      	mov	r0, r4
 80061b8:	f7ff ff55 	bl	8006066 <HAL_TIM_PWM_PulseFinishedCallback>
 80061bc:	e7b4      	b.n	8006128 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80061be:	f06f 0201 	mvn.w	r2, #1
 80061c2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80061c4:	4620      	mov	r0, r4
 80061c6:	f7ff ff4b 	bl	8006060 <HAL_TIM_PeriodElapsedCallback>
 80061ca:	e7b8      	b.n	800613e <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80061cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80061d0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80061d2:	4620      	mov	r0, r4
 80061d4:	f000 f8cf 	bl	8006376 <HAL_TIMEx_BreakCallback>
 80061d8:	e7ba      	b.n	8006150 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80061da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80061de:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80061e0:	4620      	mov	r0, r4
 80061e2:	f000 f8c9 	bl	8006378 <HAL_TIMEx_Break2Callback>
 80061e6:	e7bc      	b.n	8006162 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80061e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80061ec:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80061ee:	4620      	mov	r0, r4
 80061f0:	f7ff ff3a 	bl	8006068 <HAL_TIM_TriggerCallback>
 80061f4:	e7be      	b.n	8006174 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80061f6:	f06f 0220 	mvn.w	r2, #32
 80061fa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80061fc:	4620      	mov	r0, r4
 80061fe:	f000 f8b9 	bl	8006374 <HAL_TIMEx_CommutCallback>
}
 8006202:	e7c0      	b.n	8006186 <HAL_TIM_IRQHandler+0x11c>

08006204 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006204:	b530      	push	{r4, r5, lr}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006206:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006208:	4a3b      	ldr	r2, [pc, #236]	; (80062f8 <TIM_Base_SetConfig+0xf4>)
 800620a:	4290      	cmp	r0, r2
 800620c:	bf14      	ite	ne
 800620e:	f04f 0e00 	movne.w	lr, #0
 8006212:	f04f 0e01 	moveq.w	lr, #1
 8006216:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800621a:	bf14      	ite	ne
 800621c:	4672      	movne	r2, lr
 800621e:	f04e 0201 	orreq.w	r2, lr, #1
 8006222:	b9aa      	cbnz	r2, 8006250 <TIM_Base_SetConfig+0x4c>
 8006224:	4c35      	ldr	r4, [pc, #212]	; (80062fc <TIM_Base_SetConfig+0xf8>)
 8006226:	42a0      	cmp	r0, r4
 8006228:	bf14      	ite	ne
 800622a:	2400      	movne	r4, #0
 800622c:	2401      	moveq	r4, #1
 800622e:	4d34      	ldr	r5, [pc, #208]	; (8006300 <TIM_Base_SetConfig+0xfc>)
 8006230:	42a8      	cmp	r0, r5
 8006232:	d00d      	beq.n	8006250 <TIM_Base_SetConfig+0x4c>
 8006234:	b964      	cbnz	r4, 8006250 <TIM_Base_SetConfig+0x4c>
 8006236:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800623a:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
 800623e:	42a0      	cmp	r0, r4
 8006240:	bf14      	ite	ne
 8006242:	2400      	movne	r4, #0
 8006244:	2401      	moveq	r4, #1
 8006246:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800624a:	42a8      	cmp	r0, r5
 800624c:	d000      	beq.n	8006250 <TIM_Base_SetConfig+0x4c>
 800624e:	b11c      	cbz	r4, 8006258 <TIM_Base_SetConfig+0x54>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006250:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006254:	684c      	ldr	r4, [r1, #4]
 8006256:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006258:	2a00      	cmp	r2, #0
 800625a:	d133      	bne.n	80062c4 <TIM_Base_SetConfig+0xc0>
 800625c:	4a27      	ldr	r2, [pc, #156]	; (80062fc <TIM_Base_SetConfig+0xf8>)
 800625e:	4290      	cmp	r0, r2
 8006260:	bf14      	ite	ne
 8006262:	2200      	movne	r2, #0
 8006264:	2201      	moveq	r2, #1
 8006266:	4c26      	ldr	r4, [pc, #152]	; (8006300 <TIM_Base_SetConfig+0xfc>)
 8006268:	42a0      	cmp	r0, r4
 800626a:	d02b      	beq.n	80062c4 <TIM_Base_SetConfig+0xc0>
 800626c:	bb52      	cbnz	r2, 80062c4 <TIM_Base_SetConfig+0xc0>
 800626e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006272:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 8006276:	4290      	cmp	r0, r2
 8006278:	bf14      	ite	ne
 800627a:	2200      	movne	r2, #0
 800627c:	2201      	moveq	r2, #1
 800627e:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8006282:	42a0      	cmp	r0, r4
 8006284:	d01e      	beq.n	80062c4 <TIM_Base_SetConfig+0xc0>
 8006286:	b9ea      	cbnz	r2, 80062c4 <TIM_Base_SetConfig+0xc0>
 8006288:	4a1e      	ldr	r2, [pc, #120]	; (8006304 <TIM_Base_SetConfig+0x100>)
 800628a:	4290      	cmp	r0, r2
 800628c:	bf14      	ite	ne
 800628e:	2200      	movne	r2, #0
 8006290:	2201      	moveq	r2, #1
 8006292:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 8006296:	42a0      	cmp	r0, r4
 8006298:	d014      	beq.n	80062c4 <TIM_Base_SetConfig+0xc0>
 800629a:	b99a      	cbnz	r2, 80062c4 <TIM_Base_SetConfig+0xc0>
 800629c:	4a1a      	ldr	r2, [pc, #104]	; (8006308 <TIM_Base_SetConfig+0x104>)
 800629e:	4290      	cmp	r0, r2
 80062a0:	bf14      	ite	ne
 80062a2:	2200      	movne	r2, #0
 80062a4:	2201      	moveq	r2, #1
 80062a6:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80062aa:	42a0      	cmp	r0, r4
 80062ac:	d00a      	beq.n	80062c4 <TIM_Base_SetConfig+0xc0>
 80062ae:	b94a      	cbnz	r2, 80062c4 <TIM_Base_SetConfig+0xc0>
 80062b0:	4a16      	ldr	r2, [pc, #88]	; (800630c <TIM_Base_SetConfig+0x108>)
 80062b2:	4290      	cmp	r0, r2
 80062b4:	bf14      	ite	ne
 80062b6:	2200      	movne	r2, #0
 80062b8:	2201      	moveq	r2, #1
 80062ba:	f5a4 3496 	sub.w	r4, r4, #76800	; 0x12c00
 80062be:	42a0      	cmp	r0, r4
 80062c0:	d000      	beq.n	80062c4 <TIM_Base_SetConfig+0xc0>
 80062c2:	b122      	cbz	r2, 80062ce <TIM_Base_SetConfig+0xca>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062c4:	f423 7c40 	bic.w	ip, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062c8:	68cb      	ldr	r3, [r1, #12]
 80062ca:	ea43 030c 	orr.w	r3, r3, ip
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062d2:	694a      	ldr	r2, [r1, #20]
 80062d4:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80062d6:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062d8:	688a      	ldr	r2, [r1, #8]
 80062da:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062dc:	680a      	ldr	r2, [r1, #0]
 80062de:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062e0:	4a0b      	ldr	r2, [pc, #44]	; (8006310 <TIM_Base_SetConfig+0x10c>)
 80062e2:	4290      	cmp	r0, r2
 80062e4:	bf14      	ite	ne
 80062e6:	4673      	movne	r3, lr
 80062e8:	f04e 0301 	orreq.w	r3, lr, #1
 80062ec:	b10b      	cbz	r3, 80062f2 <TIM_Base_SetConfig+0xee>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062ee:	690b      	ldr	r3, [r1, #16]
 80062f0:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062f2:	2301      	movs	r3, #1
 80062f4:	6143      	str	r3, [r0, #20]
}
 80062f6:	bd30      	pop	{r4, r5, pc}
 80062f8:	40010000 	.word	0x40010000
 80062fc:	40000800 	.word	0x40000800
 8006300:	40000400 	.word	0x40000400
 8006304:	40014400 	.word	0x40014400
 8006308:	40001800 	.word	0x40001800
 800630c:	40002000 	.word	0x40002000
 8006310:	40010400 	.word	0x40010400

08006314 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8006314:	b360      	cbz	r0, 8006370 <HAL_TIM_Base_Init+0x5c>
{
 8006316:	b510      	push	{r4, lr}
 8006318:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800631a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800631e:	b313      	cbz	r3, 8006366 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8006320:	2302      	movs	r3, #2
 8006322:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006326:	4621      	mov	r1, r4
 8006328:	f851 0b04 	ldr.w	r0, [r1], #4
 800632c:	f7ff ff6a 	bl	8006204 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006330:	2301      	movs	r3, #1
 8006332:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006336:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800633a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800633e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006342:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8006346:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800634a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800634e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006352:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006356:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800635a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800635e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006362:	2000      	movs	r0, #0
}
 8006364:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8006366:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800636a:	f7ff fe30 	bl	8005fce <HAL_TIM_Base_MspInit>
 800636e:	e7d7      	b.n	8006320 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8006370:	2001      	movs	r0, #1
}
 8006372:	4770      	bx	lr

08006374 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006374:	4770      	bx	lr

08006376 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006376:	4770      	bx	lr

08006378 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006378:	4770      	bx	lr

0800637a <UART_EndRxTransfer>:
 * @param  huart UART handle.
 * @retval None
 */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart) {
	/* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
	ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800637a:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637c:	e852 3f00 	ldrex	r3, [r2]
 8006380:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006384:	e842 3100 	strex	r1, r3, [r2]
 8006388:	2900      	cmp	r1, #0
 800638a:	d1f6      	bne.n	800637a <UART_EndRxTransfer>
	ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800638c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800638e:	f102 0308 	add.w	r3, r2, #8
 8006392:	e853 3f00 	ldrex	r3, [r3]
 8006396:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800639a:	3208      	adds	r2, #8
 800639c:	e842 3100 	strex	r1, r3, [r2]
 80063a0:	2900      	cmp	r1, #0
 80063a2:	d1f3      	bne.n	800638c <UART_EndRxTransfer+0x12>

	/* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
	if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
 80063a4:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d006      	beq.n	80063b8 <UART_EndRxTransfer+0x3e>
		ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
	}

	/* At end of Rx process, restore huart->RxState to Ready */
	huart->RxState = HAL_UART_STATE_READY;
 80063aa:	2320      	movs	r3, #32
 80063ac:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063b0:	2300      	movs	r3, #0
 80063b2:	6603      	str	r3, [r0, #96]	; 0x60

	/* Reset RxIsr function pointer */
	huart->RxISR = NULL;
 80063b4:	6683      	str	r3, [r0, #104]	; 0x68
}
 80063b6:	4770      	bx	lr
		ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063b8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ba:	e852 3f00 	ldrex	r3, [r2]
 80063be:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c2:	e842 3100 	strex	r1, r3, [r2]
 80063c6:	2900      	cmp	r1, #0
 80063c8:	d1f6      	bne.n	80063b8 <UART_EndRxTransfer+0x3e>
 80063ca:	e7ee      	b.n	80063aa <UART_EndRxTransfer+0x30>

080063cc <UART_TxISR_8BIT>:
 * @param huart UART handle.
 * @retval None
 */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart) {
	/* Check that a Tx process is ongoing */
	if (huart->gState == HAL_UART_STATE_BUSY_TX) {
 80063cc:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80063ce:	2b21      	cmp	r3, #33	; 0x21
 80063d0:	d000      	beq.n	80063d4 <UART_TxISR_8BIT+0x8>
					& (uint8_t) 0xFF);
			huart->pTxBuffPtr++;
			huart->TxXferCount--;
		}
	}
}
 80063d2:	4770      	bx	lr
		if (huart->TxXferCount == 0U) {
 80063d4:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80063d8:	b29b      	uxth	r3, r3
 80063da:	b993      	cbnz	r3, 8006402 <UART_TxISR_8BIT+0x36>
			ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80063dc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063de:	e852 3f00 	ldrex	r3, [r2]
 80063e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e6:	e842 3100 	strex	r1, r3, [r2]
 80063ea:	2900      	cmp	r1, #0
 80063ec:	d1f6      	bne.n	80063dc <UART_TxISR_8BIT+0x10>
			ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80063ee:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f0:	e852 3f00 	ldrex	r3, [r2]
 80063f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f8:	e842 3100 	strex	r1, r3, [r2]
 80063fc:	2900      	cmp	r1, #0
 80063fe:	d1f6      	bne.n	80063ee <UART_TxISR_8BIT+0x22>
 8006400:	4770      	bx	lr
			huart->Instance->TDR = (uint8_t) (*huart->pTxBuffPtr
 8006402:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006404:	781a      	ldrb	r2, [r3, #0]
 8006406:	6803      	ldr	r3, [r0, #0]
 8006408:	629a      	str	r2, [r3, #40]	; 0x28
			huart->pTxBuffPtr++;
 800640a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800640c:	3301      	adds	r3, #1
 800640e:	64c3      	str	r3, [r0, #76]	; 0x4c
			huart->TxXferCount--;
 8006410:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8006414:	b29b      	uxth	r3, r3
 8006416:	3b01      	subs	r3, #1
 8006418:	b29b      	uxth	r3, r3
 800641a:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
}
 800641e:	e7d8      	b.n	80063d2 <UART_TxISR_8BIT+0x6>

08006420 <UART_TxISR_16BIT>:
 */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart) {
	const uint16_t *tmp;

	/* Check that a Tx process is ongoing */
	if (huart->gState == HAL_UART_STATE_BUSY_TX) {
 8006420:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8006422:	2b21      	cmp	r3, #33	; 0x21
 8006424:	d000      	beq.n	8006428 <UART_TxISR_16BIT+0x8>
			huart->Instance->TDR = (((uint32_t) (*tmp)) & 0x01FFUL);
			huart->pTxBuffPtr += 2U;
			huart->TxXferCount--;
		}
	}
}
 8006426:	4770      	bx	lr
		if (huart->TxXferCount == 0U) {
 8006428:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 800642c:	b29b      	uxth	r3, r3
 800642e:	b993      	cbnz	r3, 8006456 <UART_TxISR_16BIT+0x36>
			ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006430:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006432:	e852 3f00 	ldrex	r3, [r2]
 8006436:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800643a:	e842 3100 	strex	r1, r3, [r2]
 800643e:	2900      	cmp	r1, #0
 8006440:	d1f6      	bne.n	8006430 <UART_TxISR_16BIT+0x10>
			ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006442:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006444:	e852 3f00 	ldrex	r3, [r2]
 8006448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644c:	e842 3100 	strex	r1, r3, [r2]
 8006450:	2900      	cmp	r1, #0
 8006452:	d1f6      	bne.n	8006442 <UART_TxISR_16BIT+0x22>
 8006454:	4770      	bx	lr
			tmp = (const uint16_t*) huart->pTxBuffPtr;
 8006456:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
			huart->Instance->TDR = (((uint32_t) (*tmp)) & 0x01FFUL);
 8006458:	881b      	ldrh	r3, [r3, #0]
 800645a:	6802      	ldr	r2, [r0, #0]
 800645c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006460:	6293      	str	r3, [r2, #40]	; 0x28
			huart->pTxBuffPtr += 2U;
 8006462:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006464:	3302      	adds	r3, #2
 8006466:	64c3      	str	r3, [r0, #76]	; 0x4c
			huart->TxXferCount--;
 8006468:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 800646c:	b29b      	uxth	r3, r3
 800646e:	3b01      	subs	r3, #1
 8006470:	b29b      	uxth	r3, r3
 8006472:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
}
 8006476:	e7d6      	b.n	8006426 <UART_TxISR_16BIT+0x6>

08006478 <HAL_UART_Transmit_IT>:
	if (huart->gState == HAL_UART_STATE_READY) {
 8006478:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800647a:	2b20      	cmp	r3, #32
 800647c:	d125      	bne.n	80064ca <HAL_UART_Transmit_IT+0x52>
		if ((pData == NULL) || (Size == 0U)) {
 800647e:	2a00      	cmp	r2, #0
 8006480:	bf18      	it	ne
 8006482:	2900      	cmpne	r1, #0
 8006484:	d023      	beq.n	80064ce <HAL_UART_Transmit_IT+0x56>
		huart->pTxBuffPtr = pData;
 8006486:	64c1      	str	r1, [r0, #76]	; 0x4c
		huart->TxXferSize = Size;
 8006488:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
		huart->TxXferCount = Size;
 800648c:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
		huart->TxISR = NULL;
 8006490:	2300      	movs	r3, #0
 8006492:	66c3      	str	r3, [r0, #108]	; 0x6c
		huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006494:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		huart->gState = HAL_UART_STATE_BUSY_TX;
 8006498:	2321      	movs	r3, #33	; 0x21
 800649a:	67c3      	str	r3, [r0, #124]	; 0x7c
		if ((huart->Init.WordLength == UART_WORDLENGTH_9B)
 800649c:	6883      	ldr	r3, [r0, #8]
 800649e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064a2:	d00c      	beq.n	80064be <HAL_UART_Transmit_IT+0x46>
			huart->TxISR = UART_TxISR_8BIT;
 80064a4:	4b0b      	ldr	r3, [pc, #44]	; (80064d4 <HAL_UART_Transmit_IT+0x5c>)
 80064a6:	66c3      	str	r3, [r0, #108]	; 0x6c
		ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80064a8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064aa:	e852 3f00 	ldrex	r3, [r2]
 80064ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b2:	e842 3100 	strex	r1, r3, [r2]
 80064b6:	2900      	cmp	r1, #0
 80064b8:	d1f6      	bne.n	80064a8 <HAL_UART_Transmit_IT+0x30>
		return HAL_OK;
 80064ba:	2000      	movs	r0, #0
 80064bc:	4770      	bx	lr
				&& (huart->Init.Parity == UART_PARITY_NONE)) {
 80064be:	6903      	ldr	r3, [r0, #16]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d1ef      	bne.n	80064a4 <HAL_UART_Transmit_IT+0x2c>
			huart->TxISR = UART_TxISR_16BIT;
 80064c4:	4b04      	ldr	r3, [pc, #16]	; (80064d8 <HAL_UART_Transmit_IT+0x60>)
 80064c6:	66c3      	str	r3, [r0, #108]	; 0x6c
 80064c8:	e7ee      	b.n	80064a8 <HAL_UART_Transmit_IT+0x30>
		return HAL_BUSY;
 80064ca:	2002      	movs	r0, #2
 80064cc:	4770      	bx	lr
			return HAL_ERROR;
 80064ce:	2001      	movs	r0, #1
}
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	080063cd 	.word	0x080063cd
 80064d8:	08006421 	.word	0x08006421

080064dc <HAL_UART_TxCpltCallback>:
}
 80064dc:	4770      	bx	lr

080064de <UART_EndTransmit_IT>:
 * @brief  Wrap up transmission in non-blocking mode.
 * @param  huart pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart) {
 80064de:	b508      	push	{r3, lr}
	/* Disable the UART Transmit Complete Interrupt */
	ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80064e0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e2:	e852 3f00 	ldrex	r3, [r2]
 80064e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ea:	e842 3100 	strex	r1, r3, [r2]
 80064ee:	2900      	cmp	r1, #0
 80064f0:	d1f6      	bne.n	80064e0 <UART_EndTransmit_IT+0x2>

	/* Tx process is ended, restore huart->gState to Ready */
	huart->gState = HAL_UART_STATE_READY;
 80064f2:	2320      	movs	r3, #32
 80064f4:	67c3      	str	r3, [r0, #124]	; 0x7c

	/* Cleat TxISR function pointer */
	huart->TxISR = NULL;
 80064f6:	2300      	movs	r3, #0
 80064f8:	66c3      	str	r3, [r0, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
	/*Call legacy weak Tx complete callback*/
	HAL_UART_TxCpltCallback(huart);
 80064fa:	f7ff ffef 	bl	80064dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064fe:	bd08      	pop	{r3, pc}

08006500 <HAL_UART_ErrorCallback>:
}
 8006500:	4770      	bx	lr

08006502 <UART_DMAAbortOnError>:
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma) {
 8006502:	b508      	push	{r3, lr}
	UART_HandleTypeDef *huart = (UART_HandleTypeDef*) (hdma->Parent);
 8006504:	6b80      	ldr	r0, [r0, #56]	; 0x38
	huart->RxXferCount = 0U;
 8006506:	2300      	movs	r3, #0
 8006508:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
	huart->TxXferCount = 0U;
 800650c:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
	HAL_UART_ErrorCallback(huart);
 8006510:	f7ff fff6 	bl	8006500 <HAL_UART_ErrorCallback>
}
 8006514:	bd08      	pop	{r3, pc}

08006516 <HAL_UARTEx_RxEventCallback>:
}
 8006516:	4770      	bx	lr

08006518 <HAL_UARTEx_WakeupCallback>:
}
 8006518:	4770      	bx	lr
	...

0800651c <HAL_UART_IRQHandler>:
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart) {
 800651c:	b570      	push	{r4, r5, r6, lr}
 800651e:	4604      	mov	r4, r0
	uint32_t isrflags = READ_REG(huart->Instance->ISR);
 8006520:	6801      	ldr	r1, [r0, #0]
 8006522:	69cb      	ldr	r3, [r1, #28]
	uint32_t cr1its = READ_REG(huart->Instance->CR1);
 8006524:	6808      	ldr	r0, [r1, #0]
	uint32_t cr3its = READ_REG(huart->Instance->CR3);
 8006526:	688d      	ldr	r5, [r1, #8]
	errorflags = (isrflags
 8006528:	f640 020f 	movw	r2, #2063	; 0x80f
	if (errorflags == 0U) {
 800652c:	401a      	ands	r2, r3
 800652e:	d105      	bne.n	800653c <HAL_UART_IRQHandler+0x20>
		if (((isrflags & USART_ISR_RXNE) != 0U)
 8006530:	f013 0f20 	tst.w	r3, #32
 8006534:	d002      	beq.n	800653c <HAL_UART_IRQHandler+0x20>
				&& ((cr1its & USART_CR1_RXNEIE) != 0U)) {
 8006536:	f010 0f20 	tst.w	r0, #32
 800653a:	d120      	bne.n	800657e <HAL_UART_IRQHandler+0x62>
	if ((errorflags != 0U)
 800653c:	b12a      	cbz	r2, 800654a <HAL_UART_IRQHandler+0x2e>
			&& (((cr3its & USART_CR3_EIE) != 0U)
 800653e:	f015 0201 	ands.w	r2, r5, #1
 8006542:	d122      	bne.n	800658a <HAL_UART_IRQHandler+0x6e>
					|| ((cr1its
 8006544:	4eae      	ldr	r6, [pc, #696]	; (8006800 <HAL_UART_IRQHandler+0x2e4>)
 8006546:	4230      	tst	r0, r6
 8006548:	d11f      	bne.n	800658a <HAL_UART_IRQHandler+0x6e>
	if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800654a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800654c:	2a01      	cmp	r2, #1
 800654e:	f000 80ab 	beq.w	80066a8 <HAL_UART_IRQHandler+0x18c>
	if (((isrflags & USART_ISR_WUF) != 0U)
 8006552:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8006556:	d003      	beq.n	8006560 <HAL_UART_IRQHandler+0x44>
			&& ((cr3its & USART_CR3_WUFIE) != 0U)) {
 8006558:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 800655c:	f040 813e 	bne.w	80067dc <HAL_UART_IRQHandler+0x2c0>
	if (((isrflags & USART_ISR_TXE) != 0U)
 8006560:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006564:	d003      	beq.n	800656e <HAL_UART_IRQHandler+0x52>
			&& ((cr1its & USART_CR1_TXEIE) != 0U)) {
 8006566:	f010 0f80 	tst.w	r0, #128	; 0x80
 800656a:	f040 813e 	bne.w	80067ea <HAL_UART_IRQHandler+0x2ce>
	if (((isrflags & USART_ISR_TC) != 0U)
 800656e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006572:	d003      	beq.n	800657c <HAL_UART_IRQHandler+0x60>
			&& ((cr1its & USART_CR1_TCIE) != 0U)) {
 8006574:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006578:	f040 813e 	bne.w	80067f8 <HAL_UART_IRQHandler+0x2dc>
}
 800657c:	bd70      	pop	{r4, r5, r6, pc}
			if (huart->RxISR != NULL) {
 800657e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006580:	2b00      	cmp	r3, #0
 8006582:	d0fb      	beq.n	800657c <HAL_UART_IRQHandler+0x60>
				huart->RxISR(huart);
 8006584:	4620      	mov	r0, r4
 8006586:	4798      	blx	r3
			return;
 8006588:	e7f8      	b.n	800657c <HAL_UART_IRQHandler+0x60>
		if (((isrflags & USART_ISR_PE) != 0U)
 800658a:	f013 0f01 	tst.w	r3, #1
 800658e:	d009      	beq.n	80065a4 <HAL_UART_IRQHandler+0x88>
				&& ((cr1its & USART_CR1_PEIE) != 0U)) {
 8006590:	f410 7f80 	tst.w	r0, #256	; 0x100
 8006594:	d006      	beq.n	80065a4 <HAL_UART_IRQHandler+0x88>
			__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006596:	2501      	movs	r5, #1
 8006598:	620d      	str	r5, [r1, #32]
			huart->ErrorCode |= HAL_UART_ERROR_PE;
 800659a:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800659e:	4329      	orrs	r1, r5
 80065a0:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
		if (((isrflags & USART_ISR_FE) != 0U)
 80065a4:	f013 0f02 	tst.w	r3, #2
 80065a8:	d009      	beq.n	80065be <HAL_UART_IRQHandler+0xa2>
				&& ((cr3its & USART_CR3_EIE) != 0U)) {
 80065aa:	b142      	cbz	r2, 80065be <HAL_UART_IRQHandler+0xa2>
			__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80065ac:	6821      	ldr	r1, [r4, #0]
 80065ae:	2502      	movs	r5, #2
 80065b0:	620d      	str	r5, [r1, #32]
			huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065b2:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80065b6:	f041 0104 	orr.w	r1, r1, #4
 80065ba:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
		if (((isrflags & USART_ISR_NE) != 0U)
 80065be:	f013 0f04 	tst.w	r3, #4
 80065c2:	d009      	beq.n	80065d8 <HAL_UART_IRQHandler+0xbc>
				&& ((cr3its & USART_CR3_EIE) != 0U)) {
 80065c4:	b142      	cbz	r2, 80065d8 <HAL_UART_IRQHandler+0xbc>
			__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80065c6:	6821      	ldr	r1, [r4, #0]
 80065c8:	2504      	movs	r5, #4
 80065ca:	620d      	str	r5, [r1, #32]
			huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065cc:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80065d0:	f041 0102 	orr.w	r1, r1, #2
 80065d4:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
		if (((isrflags & USART_ISR_ORE) != 0U)
 80065d8:	f013 0f08 	tst.w	r3, #8
 80065dc:	d00b      	beq.n	80065f6 <HAL_UART_IRQHandler+0xda>
				&& (((cr1its & USART_CR1_RXNEIE) != 0U)
 80065de:	f010 0f20 	tst.w	r0, #32
 80065e2:	d100      	bne.n	80065e6 <HAL_UART_IRQHandler+0xca>
						|| ((cr3its & USART_CR3_EIE) != 0U))) {
 80065e4:	b13a      	cbz	r2, 80065f6 <HAL_UART_IRQHandler+0xda>
			__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80065e6:	6822      	ldr	r2, [r4, #0]
 80065e8:	2108      	movs	r1, #8
 80065ea:	6211      	str	r1, [r2, #32]
			huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80065ec:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80065f0:	430a      	orrs	r2, r1
 80065f2:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
		if (((isrflags & USART_ISR_RTOF) != 0U)
 80065f6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80065fa:	d00c      	beq.n	8006616 <HAL_UART_IRQHandler+0xfa>
				&& ((cr1its & USART_CR1_RTOIE) != 0U)) {
 80065fc:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8006600:	d009      	beq.n	8006616 <HAL_UART_IRQHandler+0xfa>
			__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006602:	6822      	ldr	r2, [r4, #0]
 8006604:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006608:	6211      	str	r1, [r2, #32]
			huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800660a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800660e:	f042 0220 	orr.w	r2, r2, #32
 8006612:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
		if (huart->ErrorCode != HAL_UART_ERROR_NONE) {
 8006616:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800661a:	2a00      	cmp	r2, #0
 800661c:	d0ae      	beq.n	800657c <HAL_UART_IRQHandler+0x60>
			if (((isrflags & USART_ISR_RXNE) != 0U)
 800661e:	f013 0f20 	tst.w	r3, #32
 8006622:	d006      	beq.n	8006632 <HAL_UART_IRQHandler+0x116>
					&& ((cr1its & USART_CR1_RXNEIE) != 0U)) {
 8006624:	f010 0f20 	tst.w	r0, #32
 8006628:	d003      	beq.n	8006632 <HAL_UART_IRQHandler+0x116>
				if (huart->RxISR != NULL) {
 800662a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800662c:	b10b      	cbz	r3, 8006632 <HAL_UART_IRQHandler+0x116>
					huart->RxISR(huart);
 800662e:	4620      	mov	r0, r4
 8006630:	4798      	blx	r3
			errorcode = huart->ErrorCode;
 8006632:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
			if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006636:	6823      	ldr	r3, [r4, #0]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800663e:	d102      	bne.n	8006646 <HAL_UART_IRQHandler+0x12a>
					|| ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE))
 8006640:	f012 0f28 	tst.w	r2, #40	; 0x28
 8006644:	d029      	beq.n	800669a <HAL_UART_IRQHandler+0x17e>
				UART_EndRxTransfer(huart);
 8006646:	4620      	mov	r0, r4
 8006648:	f7ff fe97 	bl	800637a <UART_EndRxTransfer>
				if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 800664c:	6823      	ldr	r3, [r4, #0]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006654:	d01d      	beq.n	8006692 <HAL_UART_IRQHandler+0x176>
					ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006656:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006658:	f102 0308 	add.w	r3, r2, #8
 800665c:	e853 3f00 	ldrex	r3, [r3]
 8006660:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006664:	3208      	adds	r2, #8
 8006666:	e842 3100 	strex	r1, r3, [r2]
 800666a:	2900      	cmp	r1, #0
 800666c:	d1f3      	bne.n	8006656 <HAL_UART_IRQHandler+0x13a>
					if (huart->hdmarx != NULL) {
 800666e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006670:	b15b      	cbz	r3, 800668a <HAL_UART_IRQHandler+0x16e>
						huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006672:	4a64      	ldr	r2, [pc, #400]	; (8006804 <HAL_UART_IRQHandler+0x2e8>)
 8006674:	651a      	str	r2, [r3, #80]	; 0x50
						if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK) {
 8006676:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8006678:	f7fd f9f2 	bl	8003a60 <HAL_DMA_Abort_IT>
 800667c:	2800      	cmp	r0, #0
 800667e:	f43f af7d 	beq.w	800657c <HAL_UART_IRQHandler+0x60>
							huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006682:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8006684:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006686:	4798      	blx	r3
 8006688:	e778      	b.n	800657c <HAL_UART_IRQHandler+0x60>
						HAL_UART_ErrorCallback(huart);
 800668a:	4620      	mov	r0, r4
 800668c:	f7ff ff38 	bl	8006500 <HAL_UART_ErrorCallback>
 8006690:	e774      	b.n	800657c <HAL_UART_IRQHandler+0x60>
					HAL_UART_ErrorCallback(huart);
 8006692:	4620      	mov	r0, r4
 8006694:	f7ff ff34 	bl	8006500 <HAL_UART_ErrorCallback>
 8006698:	e770      	b.n	800657c <HAL_UART_IRQHandler+0x60>
				HAL_UART_ErrorCallback(huart);
 800669a:	4620      	mov	r0, r4
 800669c:	f7ff ff30 	bl	8006500 <HAL_UART_ErrorCallback>
				huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066a0:	2300      	movs	r3, #0
 80066a2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		return;
 80066a6:	e769      	b.n	800657c <HAL_UART_IRQHandler+0x60>
			&& ((isrflags & USART_ISR_IDLE) != 0U)
 80066a8:	f013 0f10 	tst.w	r3, #16
 80066ac:	f43f af51 	beq.w	8006552 <HAL_UART_IRQHandler+0x36>
			&& ((cr1its & USART_ISR_IDLE) != 0U)) {
 80066b0:	f010 0f10 	tst.w	r0, #16
 80066b4:	f43f af4d 	beq.w	8006552 <HAL_UART_IRQHandler+0x36>
		__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80066b8:	2310      	movs	r3, #16
 80066ba:	620b      	str	r3, [r1, #32]
		if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 80066bc:	6823      	ldr	r3, [r4, #0]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80066c4:	d050      	beq.n	8006768 <HAL_UART_IRQHandler+0x24c>
			uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(
 80066c6:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80066c8:	6813      	ldr	r3, [r2, #0]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	b29b      	uxth	r3, r3
			if ((nb_remaining_rx_data > 0U)
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	f43f af54 	beq.w	800657c <HAL_UART_IRQHandler+0x60>
					&& (nb_remaining_rx_data < huart->RxXferSize)) {
 80066d4:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 80066d8:	4299      	cmp	r1, r3
 80066da:	f67f af4f 	bls.w	800657c <HAL_UART_IRQHandler+0x60>
				huart->RxXferCount = nb_remaining_rx_data;
 80066de:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
				if (huart->hdmarx->Init.Mode != DMA_CIRCULAR) {
 80066e2:	69d3      	ldr	r3, [r2, #28]
 80066e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066e8:	d031      	beq.n	800674e <HAL_UART_IRQHandler+0x232>
					ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066ea:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ec:	e852 3f00 	ldrex	r3, [r2]
 80066f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f4:	e842 3100 	strex	r1, r3, [r2]
 80066f8:	2900      	cmp	r1, #0
 80066fa:	d1f6      	bne.n	80066ea <HAL_UART_IRQHandler+0x1ce>
					ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066fc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066fe:	f102 0308 	add.w	r3, r2, #8
 8006702:	e853 3f00 	ldrex	r3, [r3]
 8006706:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670a:	3208      	adds	r2, #8
 800670c:	e842 3100 	strex	r1, r3, [r2]
 8006710:	2900      	cmp	r1, #0
 8006712:	d1f3      	bne.n	80066fc <HAL_UART_IRQHandler+0x1e0>
					ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006714:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006716:	f102 0308 	add.w	r3, r2, #8
 800671a:	e853 3f00 	ldrex	r3, [r3]
 800671e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006722:	3208      	adds	r2, #8
 8006724:	e842 3100 	strex	r1, r3, [r2]
 8006728:	2900      	cmp	r1, #0
 800672a:	d1f3      	bne.n	8006714 <HAL_UART_IRQHandler+0x1f8>
					huart->RxState = HAL_UART_STATE_READY;
 800672c:	2320      	movs	r3, #32
 800672e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
					huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006732:	2300      	movs	r3, #0
 8006734:	6623      	str	r3, [r4, #96]	; 0x60
					ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006736:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006738:	e852 3f00 	ldrex	r3, [r2]
 800673c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006740:	e842 3100 	strex	r1, r3, [r2]
 8006744:	2900      	cmp	r1, #0
 8006746:	d1f6      	bne.n	8006736 <HAL_UART_IRQHandler+0x21a>
					(void) HAL_DMA_Abort(huart->hdmarx);
 8006748:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800674a:	f7fd f93f 	bl	80039cc <HAL_DMA_Abort>
				huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800674e:	2302      	movs	r3, #2
 8006750:	6663      	str	r3, [r4, #100]	; 0x64
						(huart->RxXferSize - huart->RxXferCount));
 8006752:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8006756:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800675a:	b29b      	uxth	r3, r3
				HAL_UARTEx_RxEventCallback(huart,
 800675c:	1ac9      	subs	r1, r1, r3
 800675e:	b289      	uxth	r1, r1
 8006760:	4620      	mov	r0, r4
 8006762:	f7ff fed8 	bl	8006516 <HAL_UARTEx_RxEventCallback>
			return;
 8006766:	e709      	b.n	800657c <HAL_UART_IRQHandler+0x60>
			uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006768:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 800676c:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8006770:	b29b      	uxth	r3, r3
 8006772:	1ac9      	subs	r1, r1, r3
 8006774:	b289      	uxth	r1, r1
			if ((huart->RxXferCount > 0U) && (nb_rx_data > 0U)) {
 8006776:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800677a:	b29b      	uxth	r3, r3
 800677c:	2b00      	cmp	r3, #0
 800677e:	f43f aefd 	beq.w	800657c <HAL_UART_IRQHandler+0x60>
 8006782:	2900      	cmp	r1, #0
 8006784:	f43f aefa 	beq.w	800657c <HAL_UART_IRQHandler+0x60>
				ATOMIC_CLEAR_BIT(huart->Instance->CR1,
 8006788:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678a:	e852 3f00 	ldrex	r3, [r2]
 800678e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006792:	e842 3000 	strex	r0, r3, [r2]
 8006796:	2800      	cmp	r0, #0
 8006798:	d1f6      	bne.n	8006788 <HAL_UART_IRQHandler+0x26c>
				ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800679a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800679c:	f102 0308 	add.w	r3, r2, #8
 80067a0:	e853 3f00 	ldrex	r3, [r3]
 80067a4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a8:	3208      	adds	r2, #8
 80067aa:	e842 3000 	strex	r0, r3, [r2]
 80067ae:	2800      	cmp	r0, #0
 80067b0:	d1f3      	bne.n	800679a <HAL_UART_IRQHandler+0x27e>
				huart->RxState = HAL_UART_STATE_READY;
 80067b2:	2320      	movs	r3, #32
 80067b4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
				huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067b8:	2300      	movs	r3, #0
 80067ba:	6623      	str	r3, [r4, #96]	; 0x60
				huart->RxISR = NULL;
 80067bc:	66a3      	str	r3, [r4, #104]	; 0x68
				ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067be:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c0:	e852 3f00 	ldrex	r3, [r2]
 80067c4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c8:	e842 3000 	strex	r0, r3, [r2]
 80067cc:	2800      	cmp	r0, #0
 80067ce:	d1f6      	bne.n	80067be <HAL_UART_IRQHandler+0x2a2>
				huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80067d0:	2302      	movs	r3, #2
 80067d2:	6663      	str	r3, [r4, #100]	; 0x64
				HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80067d4:	4620      	mov	r0, r4
 80067d6:	f7ff fe9e 	bl	8006516 <HAL_UARTEx_RxEventCallback>
			return;
 80067da:	e6cf      	b.n	800657c <HAL_UART_IRQHandler+0x60>
		__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80067dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80067e0:	620b      	str	r3, [r1, #32]
		HAL_UARTEx_WakeupCallback(huart);
 80067e2:	4620      	mov	r0, r4
 80067e4:	f7ff fe98 	bl	8006518 <HAL_UARTEx_WakeupCallback>
		return;
 80067e8:	e6c8      	b.n	800657c <HAL_UART_IRQHandler+0x60>
		if (huart->TxISR != NULL) {
 80067ea:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f43f aec5 	beq.w	800657c <HAL_UART_IRQHandler+0x60>
			huart->TxISR(huart);
 80067f2:	4620      	mov	r0, r4
 80067f4:	4798      	blx	r3
		return;
 80067f6:	e6c1      	b.n	800657c <HAL_UART_IRQHandler+0x60>
		UART_EndTransmit_IT(huart);
 80067f8:	4620      	mov	r0, r4
 80067fa:	f7ff fe70 	bl	80064de <UART_EndTransmit_IT>
		return;
 80067fe:	e6bd      	b.n	800657c <HAL_UART_IRQHandler+0x60>
 8006800:	04000120 	.word	0x04000120
 8006804:	08006503 	.word	0x08006503

08006808 <UART_SetConfig>:
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart) {
 8006808:	b510      	push	{r4, lr}
 800680a:	4604      	mov	r4, r0
	tmpreg = (uint32_t) huart->Init.WordLength | huart->Init.Parity
 800680c:	6883      	ldr	r3, [r0, #8]
 800680e:	6902      	ldr	r2, [r0, #16]
 8006810:	4313      	orrs	r3, r2
			| huart->Init.Mode | huart->Init.OverSampling;
 8006812:	6942      	ldr	r2, [r0, #20]
 8006814:	4313      	orrs	r3, r2
 8006816:	69c2      	ldr	r2, [r0, #28]
	tmpreg = (uint32_t) huart->Init.WordLength | huart->Init.Parity
 8006818:	4313      	orrs	r3, r2
	MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800681a:	6801      	ldr	r1, [r0, #0]
 800681c:	6808      	ldr	r0, [r1, #0]
 800681e:	4a93      	ldr	r2, [pc, #588]	; (8006a6c <UART_SetConfig+0x264>)
 8006820:	4002      	ands	r2, r0
 8006822:	431a      	orrs	r2, r3
 8006824:	600a      	str	r2, [r1, #0]
	MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006826:	6822      	ldr	r2, [r4, #0]
 8006828:	6853      	ldr	r3, [r2, #4]
 800682a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800682e:	68e1      	ldr	r1, [r4, #12]
 8006830:	430b      	orrs	r3, r1
 8006832:	6053      	str	r3, [r2, #4]
	tmpreg = (uint32_t) huart->Init.HwFlowCtl;
 8006834:	69a2      	ldr	r2, [r4, #24]
	tmpreg |= huart->Init.OneBitSampling;
 8006836:	6a23      	ldr	r3, [r4, #32]
 8006838:	431a      	orrs	r2, r3
	MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800683a:	6821      	ldr	r1, [r4, #0]
 800683c:	688b      	ldr	r3, [r1, #8]
 800683e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006842:	4313      	orrs	r3, r2
 8006844:	608b      	str	r3, [r1, #8]
	UART_GETCLOCKSOURCE(huart, clocksource);
 8006846:	6823      	ldr	r3, [r4, #0]
 8006848:	4a89      	ldr	r2, [pc, #548]	; (8006a70 <UART_SetConfig+0x268>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d019      	beq.n	8006882 <UART_SetConfig+0x7a>
 800684e:	4a89      	ldr	r2, [pc, #548]	; (8006a74 <UART_SetConfig+0x26c>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d029      	beq.n	80068a8 <UART_SetConfig+0xa0>
 8006854:	4a88      	ldr	r2, [pc, #544]	; (8006a78 <UART_SetConfig+0x270>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d03e      	beq.n	80068d8 <UART_SetConfig+0xd0>
 800685a:	4a88      	ldr	r2, [pc, #544]	; (8006a7c <UART_SetConfig+0x274>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d062      	beq.n	8006926 <UART_SetConfig+0x11e>
 8006860:	4a87      	ldr	r2, [pc, #540]	; (8006a80 <UART_SetConfig+0x278>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d071      	beq.n	800694a <UART_SetConfig+0x142>
 8006866:	4a87      	ldr	r2, [pc, #540]	; (8006a84 <UART_SetConfig+0x27c>)
 8006868:	4293      	cmp	r3, r2
 800686a:	f000 8083 	beq.w	8006974 <UART_SetConfig+0x16c>
 800686e:	4a86      	ldr	r2, [pc, #536]	; (8006a88 <UART_SetConfig+0x280>)
 8006870:	4293      	cmp	r3, r2
 8006872:	f000 8094 	beq.w	800699e <UART_SetConfig+0x196>
 8006876:	4a85      	ldr	r2, [pc, #532]	; (8006a8c <UART_SetConfig+0x284>)
 8006878:	4293      	cmp	r3, r2
 800687a:	f000 80a5 	beq.w	80069c8 <UART_SetConfig+0x1c0>
 800687e:	2310      	movs	r3, #16
 8006880:	e03a      	b.n	80068f8 <UART_SetConfig+0xf0>
 8006882:	4b83      	ldr	r3, [pc, #524]	; (8006a90 <UART_SetConfig+0x288>)
 8006884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006888:	f003 0303 	and.w	r3, r3, #3
 800688c:	2b03      	cmp	r3, #3
 800688e:	d809      	bhi.n	80068a4 <UART_SetConfig+0x9c>
 8006890:	e8df f003 	tbb	[pc, r3]
 8006894:	06ae0402 	.word	0x06ae0402
 8006898:	2301      	movs	r3, #1
 800689a:	e02d      	b.n	80068f8 <UART_SetConfig+0xf0>
 800689c:	2304      	movs	r3, #4
 800689e:	e02b      	b.n	80068f8 <UART_SetConfig+0xf0>
 80068a0:	2308      	movs	r3, #8
 80068a2:	e029      	b.n	80068f8 <UART_SetConfig+0xf0>
 80068a4:	2310      	movs	r3, #16
 80068a6:	e027      	b.n	80068f8 <UART_SetConfig+0xf0>
 80068a8:	4b79      	ldr	r3, [pc, #484]	; (8006a90 <UART_SetConfig+0x288>)
 80068aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ae:	f003 030c 	and.w	r3, r3, #12
 80068b2:	2b0c      	cmp	r3, #12
 80068b4:	d80e      	bhi.n	80068d4 <UART_SetConfig+0xcc>
 80068b6:	e8df f003 	tbb	[pc, r3]
 80068ba:	0d07      	.short	0x0d07
 80068bc:	0d090d0d 	.word	0x0d090d0d
 80068c0:	0d9d0d0d 	.word	0x0d9d0d0d
 80068c4:	0d0d      	.short	0x0d0d
 80068c6:	0b          	.byte	0x0b
 80068c7:	00          	.byte	0x00
 80068c8:	2300      	movs	r3, #0
 80068ca:	e015      	b.n	80068f8 <UART_SetConfig+0xf0>
 80068cc:	2304      	movs	r3, #4
 80068ce:	e013      	b.n	80068f8 <UART_SetConfig+0xf0>
 80068d0:	2308      	movs	r3, #8
 80068d2:	e011      	b.n	80068f8 <UART_SetConfig+0xf0>
 80068d4:	2310      	movs	r3, #16
 80068d6:	e00f      	b.n	80068f8 <UART_SetConfig+0xf0>
 80068d8:	4b6d      	ldr	r3, [pc, #436]	; (8006a90 <UART_SetConfig+0x288>)
 80068da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068de:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80068e2:	2b20      	cmp	r3, #32
 80068e4:	f000 8088 	beq.w	80069f8 <UART_SetConfig+0x1f0>
 80068e8:	d819      	bhi.n	800691e <UART_SetConfig+0x116>
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	f000 8086 	beq.w	80069fc <UART_SetConfig+0x1f4>
 80068f0:	2b10      	cmp	r3, #16
 80068f2:	f040 8085 	bne.w	8006a00 <UART_SetConfig+0x1f8>
 80068f6:	2304      	movs	r3, #4
	if (huart->Init.OverSampling == UART_OVERSAMPLING_8) {
 80068f8:	69e0      	ldr	r0, [r4, #28]
 80068fa:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80068fe:	f000 80ab 	beq.w	8006a58 <UART_SetConfig+0x250>
		switch (clocksource) {
 8006902:	2b08      	cmp	r3, #8
 8006904:	f200 810c 	bhi.w	8006b20 <UART_SetConfig+0x318>
 8006908:	e8df f013 	tbh	[pc, r3, lsl #1]
 800690c:	00fb00e8 	.word	0x00fb00e8
 8006910:	010a00e6 	.word	0x010a00e6
 8006914:	010a00fe 	.word	0x010a00fe
 8006918:	010a010a 	.word	0x010a010a
 800691c:	0101      	.short	0x0101
	UART_GETCLOCKSOURCE(huart, clocksource);
 800691e:	2b30      	cmp	r3, #48	; 0x30
 8006920:	d170      	bne.n	8006a04 <UART_SetConfig+0x1fc>
 8006922:	2308      	movs	r3, #8
 8006924:	e7e8      	b.n	80068f8 <UART_SetConfig+0xf0>
 8006926:	4b5a      	ldr	r3, [pc, #360]	; (8006a90 <UART_SetConfig+0x288>)
 8006928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800692c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006930:	2b80      	cmp	r3, #128	; 0x80
 8006932:	d069      	beq.n	8006a08 <UART_SetConfig+0x200>
 8006934:	d805      	bhi.n	8006942 <UART_SetConfig+0x13a>
 8006936:	2b00      	cmp	r3, #0
 8006938:	d068      	beq.n	8006a0c <UART_SetConfig+0x204>
 800693a:	2b40      	cmp	r3, #64	; 0x40
 800693c:	d168      	bne.n	8006a10 <UART_SetConfig+0x208>
 800693e:	2304      	movs	r3, #4
 8006940:	e7da      	b.n	80068f8 <UART_SetConfig+0xf0>
 8006942:	2bc0      	cmp	r3, #192	; 0xc0
 8006944:	d166      	bne.n	8006a14 <UART_SetConfig+0x20c>
 8006946:	2308      	movs	r3, #8
 8006948:	e7d6      	b.n	80068f8 <UART_SetConfig+0xf0>
 800694a:	4b51      	ldr	r3, [pc, #324]	; (8006a90 <UART_SetConfig+0x288>)
 800694c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006950:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006954:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006958:	d05e      	beq.n	8006a18 <UART_SetConfig+0x210>
 800695a:	d806      	bhi.n	800696a <UART_SetConfig+0x162>
 800695c:	2b00      	cmp	r3, #0
 800695e:	d05d      	beq.n	8006a1c <UART_SetConfig+0x214>
 8006960:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006964:	d15c      	bne.n	8006a20 <UART_SetConfig+0x218>
 8006966:	2304      	movs	r3, #4
 8006968:	e7c6      	b.n	80068f8 <UART_SetConfig+0xf0>
 800696a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800696e:	d159      	bne.n	8006a24 <UART_SetConfig+0x21c>
 8006970:	2308      	movs	r3, #8
 8006972:	e7c1      	b.n	80068f8 <UART_SetConfig+0xf0>
 8006974:	4b46      	ldr	r3, [pc, #280]	; (8006a90 <UART_SetConfig+0x288>)
 8006976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800697a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800697e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006982:	d051      	beq.n	8006a28 <UART_SetConfig+0x220>
 8006984:	d806      	bhi.n	8006994 <UART_SetConfig+0x18c>
 8006986:	2b00      	cmp	r3, #0
 8006988:	d050      	beq.n	8006a2c <UART_SetConfig+0x224>
 800698a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800698e:	d14f      	bne.n	8006a30 <UART_SetConfig+0x228>
 8006990:	2304      	movs	r3, #4
 8006992:	e7b1      	b.n	80068f8 <UART_SetConfig+0xf0>
 8006994:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006998:	d14c      	bne.n	8006a34 <UART_SetConfig+0x22c>
 800699a:	2308      	movs	r3, #8
 800699c:	e7ac      	b.n	80068f8 <UART_SetConfig+0xf0>
 800699e:	4b3c      	ldr	r3, [pc, #240]	; (8006a90 <UART_SetConfig+0x288>)
 80069a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069a4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80069a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069ac:	d044      	beq.n	8006a38 <UART_SetConfig+0x230>
 80069ae:	d806      	bhi.n	80069be <UART_SetConfig+0x1b6>
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d043      	beq.n	8006a3c <UART_SetConfig+0x234>
 80069b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069b8:	d142      	bne.n	8006a40 <UART_SetConfig+0x238>
 80069ba:	2304      	movs	r3, #4
 80069bc:	e79c      	b.n	80068f8 <UART_SetConfig+0xf0>
 80069be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80069c2:	d13f      	bne.n	8006a44 <UART_SetConfig+0x23c>
 80069c4:	2308      	movs	r3, #8
 80069c6:	e797      	b.n	80068f8 <UART_SetConfig+0xf0>
 80069c8:	4b31      	ldr	r3, [pc, #196]	; (8006a90 <UART_SetConfig+0x288>)
 80069ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80069d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069d6:	d037      	beq.n	8006a48 <UART_SetConfig+0x240>
 80069d8:	d805      	bhi.n	80069e6 <UART_SetConfig+0x1de>
 80069da:	b3bb      	cbz	r3, 8006a4c <UART_SetConfig+0x244>
 80069dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069e0:	d136      	bne.n	8006a50 <UART_SetConfig+0x248>
 80069e2:	2304      	movs	r3, #4
 80069e4:	e788      	b.n	80068f8 <UART_SetConfig+0xf0>
 80069e6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80069ea:	d133      	bne.n	8006a54 <UART_SetConfig+0x24c>
 80069ec:	2308      	movs	r3, #8
 80069ee:	e783      	b.n	80068f8 <UART_SetConfig+0xf0>
 80069f0:	2302      	movs	r3, #2
 80069f2:	e781      	b.n	80068f8 <UART_SetConfig+0xf0>
 80069f4:	2302      	movs	r3, #2
 80069f6:	e77f      	b.n	80068f8 <UART_SetConfig+0xf0>
 80069f8:	2302      	movs	r3, #2
 80069fa:	e77d      	b.n	80068f8 <UART_SetConfig+0xf0>
 80069fc:	2300      	movs	r3, #0
 80069fe:	e77b      	b.n	80068f8 <UART_SetConfig+0xf0>
 8006a00:	2310      	movs	r3, #16
 8006a02:	e779      	b.n	80068f8 <UART_SetConfig+0xf0>
 8006a04:	2310      	movs	r3, #16
 8006a06:	e777      	b.n	80068f8 <UART_SetConfig+0xf0>
 8006a08:	2302      	movs	r3, #2
 8006a0a:	e775      	b.n	80068f8 <UART_SetConfig+0xf0>
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	e773      	b.n	80068f8 <UART_SetConfig+0xf0>
 8006a10:	2310      	movs	r3, #16
 8006a12:	e771      	b.n	80068f8 <UART_SetConfig+0xf0>
 8006a14:	2310      	movs	r3, #16
 8006a16:	e76f      	b.n	80068f8 <UART_SetConfig+0xf0>
 8006a18:	2302      	movs	r3, #2
 8006a1a:	e76d      	b.n	80068f8 <UART_SetConfig+0xf0>
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	e76b      	b.n	80068f8 <UART_SetConfig+0xf0>
 8006a20:	2310      	movs	r3, #16
 8006a22:	e769      	b.n	80068f8 <UART_SetConfig+0xf0>
 8006a24:	2310      	movs	r3, #16
 8006a26:	e767      	b.n	80068f8 <UART_SetConfig+0xf0>
 8006a28:	2302      	movs	r3, #2
 8006a2a:	e765      	b.n	80068f8 <UART_SetConfig+0xf0>
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e763      	b.n	80068f8 <UART_SetConfig+0xf0>
 8006a30:	2310      	movs	r3, #16
 8006a32:	e761      	b.n	80068f8 <UART_SetConfig+0xf0>
 8006a34:	2310      	movs	r3, #16
 8006a36:	e75f      	b.n	80068f8 <UART_SetConfig+0xf0>
 8006a38:	2302      	movs	r3, #2
 8006a3a:	e75d      	b.n	80068f8 <UART_SetConfig+0xf0>
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	e75b      	b.n	80068f8 <UART_SetConfig+0xf0>
 8006a40:	2310      	movs	r3, #16
 8006a42:	e759      	b.n	80068f8 <UART_SetConfig+0xf0>
 8006a44:	2310      	movs	r3, #16
 8006a46:	e757      	b.n	80068f8 <UART_SetConfig+0xf0>
 8006a48:	2302      	movs	r3, #2
 8006a4a:	e755      	b.n	80068f8 <UART_SetConfig+0xf0>
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	e753      	b.n	80068f8 <UART_SetConfig+0xf0>
 8006a50:	2310      	movs	r3, #16
 8006a52:	e751      	b.n	80068f8 <UART_SetConfig+0xf0>
 8006a54:	2310      	movs	r3, #16
 8006a56:	e74f      	b.n	80068f8 <UART_SetConfig+0xf0>
		switch (clocksource) {
 8006a58:	2b08      	cmp	r3, #8
 8006a5a:	d85b      	bhi.n	8006b14 <UART_SetConfig+0x30c>
 8006a5c:	e8df f003 	tbb	[pc, r3]
 8006a60:	5a3a341a 	.word	0x5a3a341a
 8006a64:	5a5a5a37 	.word	0x5a5a5a37
 8006a68:	1e          	.byte	0x1e
 8006a69:	00          	.byte	0x00
 8006a6a:	bf00      	nop
 8006a6c:	efff69f3 	.word	0xefff69f3
 8006a70:	40011000 	.word	0x40011000
 8006a74:	40004400 	.word	0x40004400
 8006a78:	40004800 	.word	0x40004800
 8006a7c:	40004c00 	.word	0x40004c00
 8006a80:	40005000 	.word	0x40005000
 8006a84:	40011400 	.word	0x40011400
 8006a88:	40007800 	.word	0x40007800
 8006a8c:	40007c00 	.word	0x40007c00
 8006a90:	40023800 	.word	0x40023800
			pclk = HAL_RCC_GetPCLK1Freq();
 8006a94:	f7fe ff02 	bl	800589c <HAL_RCC_GetPCLK1Freq>
		if (pclk != 0U) {
 8006a98:	2800      	cmp	r0, #0
 8006a9a:	d03d      	beq.n	8006b18 <UART_SetConfig+0x310>
			usartdiv = (uint32_t) (UART_DIV_SAMPLING8(pclk,
 8006a9c:	6862      	ldr	r2, [r4, #4]
 8006a9e:	0853      	lsrs	r3, r2, #1
 8006aa0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8006aa4:	fbb3 f3f2 	udiv	r3, r3, r2
			if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX)) {
 8006aa8:	f1a3 0110 	sub.w	r1, r3, #16
 8006aac:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8006ab0:	4291      	cmp	r1, r2
 8006ab2:	d833      	bhi.n	8006b1c <UART_SetConfig+0x314>
				brrtemp = (uint16_t) (usartdiv & 0xFFF0U);
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	f022 020f 	bic.w	r2, r2, #15
				brrtemp |= (uint16_t) ((usartdiv & (uint16_t) 0x000FU) >> 1U);
 8006aba:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8006abe:	4313      	orrs	r3, r2
				huart->Instance->BRR = brrtemp;
 8006ac0:	6822      	ldr	r2, [r4, #0]
 8006ac2:	60d3      	str	r3, [r2, #12]
 8006ac4:	2000      	movs	r0, #0
 8006ac6:	e030      	b.n	8006b2a <UART_SetConfig+0x322>
			pclk = HAL_RCC_GetPCLK2Freq();
 8006ac8:	f7fe fef8 	bl	80058bc <HAL_RCC_GetPCLK2Freq>
			break;
 8006acc:	e7e4      	b.n	8006a98 <UART_SetConfig+0x290>
			pclk = HAL_RCC_GetSysClockFreq();
 8006ace:	f7fe fdd5 	bl	800567c <HAL_RCC_GetSysClockFreq>
			break;
 8006ad2:	e7e1      	b.n	8006a98 <UART_SetConfig+0x290>
			pclk = (uint32_t) HSI_VALUE;
 8006ad4:	4817      	ldr	r0, [pc, #92]	; (8006b34 <UART_SetConfig+0x32c>)
 8006ad6:	e7e1      	b.n	8006a9c <UART_SetConfig+0x294>
		switch (clocksource) {
 8006ad8:	4816      	ldr	r0, [pc, #88]	; (8006b34 <UART_SetConfig+0x32c>)
 8006ada:	e002      	b.n	8006ae2 <UART_SetConfig+0x2da>
			pclk = HAL_RCC_GetPCLK1Freq();
 8006adc:	f7fe fede 	bl	800589c <HAL_RCC_GetPCLK1Freq>
		if (pclk != 0U) {
 8006ae0:	b300      	cbz	r0, 8006b24 <UART_SetConfig+0x31c>
			usartdiv = (uint32_t) (UART_DIV_SAMPLING16(pclk,
 8006ae2:	6863      	ldr	r3, [r4, #4]
 8006ae4:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8006ae8:	fbb0 f0f3 	udiv	r0, r0, r3
			if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX)) {
 8006aec:	f1a0 0210 	sub.w	r2, r0, #16
 8006af0:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d817      	bhi.n	8006b28 <UART_SetConfig+0x320>
				huart->Instance->BRR = (uint16_t) usartdiv;
 8006af8:	6823      	ldr	r3, [r4, #0]
 8006afa:	b280      	uxth	r0, r0
 8006afc:	60d8      	str	r0, [r3, #12]
 8006afe:	2000      	movs	r0, #0
 8006b00:	e013      	b.n	8006b2a <UART_SetConfig+0x322>
			pclk = HAL_RCC_GetPCLK2Freq();
 8006b02:	f7fe fedb 	bl	80058bc <HAL_RCC_GetPCLK2Freq>
			break;
 8006b06:	e7eb      	b.n	8006ae0 <UART_SetConfig+0x2d8>
			pclk = HAL_RCC_GetSysClockFreq();
 8006b08:	f7fe fdb8 	bl	800567c <HAL_RCC_GetSysClockFreq>
			break;
 8006b0c:	e7e8      	b.n	8006ae0 <UART_SetConfig+0x2d8>
			pclk = (uint32_t) LSE_VALUE;
 8006b0e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006b12:	e7e6      	b.n	8006ae2 <UART_SetConfig+0x2da>
		switch (clocksource) {
 8006b14:	2001      	movs	r0, #1
 8006b16:	e008      	b.n	8006b2a <UART_SetConfig+0x322>
 8006b18:	2000      	movs	r0, #0
 8006b1a:	e006      	b.n	8006b2a <UART_SetConfig+0x322>
				ret = HAL_ERROR;
 8006b1c:	2001      	movs	r0, #1
 8006b1e:	e004      	b.n	8006b2a <UART_SetConfig+0x322>
		switch (clocksource) {
 8006b20:	2001      	movs	r0, #1
 8006b22:	e002      	b.n	8006b2a <UART_SetConfig+0x322>
 8006b24:	2000      	movs	r0, #0
 8006b26:	e000      	b.n	8006b2a <UART_SetConfig+0x322>
				ret = HAL_ERROR;
 8006b28:	2001      	movs	r0, #1
	huart->RxISR = NULL;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	66a3      	str	r3, [r4, #104]	; 0x68
	huart->TxISR = NULL;
 8006b2e:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8006b30:	bd10      	pop	{r4, pc}
 8006b32:	bf00      	nop
 8006b34:	00f42400 	.word	0x00f42400

08006b38 <UART_AdvFeatureConfig>:
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8006b38:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006b3a:	f013 0f01 	tst.w	r3, #1
 8006b3e:	d006      	beq.n	8006b4e <UART_AdvFeatureConfig+0x16>
		MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV,
 8006b40:	6802      	ldr	r2, [r0, #0]
 8006b42:	6853      	ldr	r3, [r2, #4]
 8006b44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006b48:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8006b4a:	430b      	orrs	r3, r1
 8006b4c:	6053      	str	r3, [r2, #4]
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8006b4e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006b50:	f013 0f02 	tst.w	r3, #2
 8006b54:	d006      	beq.n	8006b64 <UART_AdvFeatureConfig+0x2c>
		MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV,
 8006b56:	6802      	ldr	r2, [r0, #0]
 8006b58:	6853      	ldr	r3, [r2, #4]
 8006b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b5e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8006b60:	430b      	orrs	r3, r1
 8006b62:	6053      	str	r3, [r2, #4]
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8006b64:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006b66:	f013 0f04 	tst.w	r3, #4
 8006b6a:	d006      	beq.n	8006b7a <UART_AdvFeatureConfig+0x42>
		MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV,
 8006b6c:	6802      	ldr	r2, [r0, #0]
 8006b6e:	6853      	ldr	r3, [r2, #4]
 8006b70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b74:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8006b76:	430b      	orrs	r3, r1
 8006b78:	6053      	str	r3, [r2, #4]
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8006b7a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006b7c:	f013 0f08 	tst.w	r3, #8
 8006b80:	d006      	beq.n	8006b90 <UART_AdvFeatureConfig+0x58>
		MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP,
 8006b82:	6802      	ldr	r2, [r0, #0]
 8006b84:	6853      	ldr	r3, [r2, #4]
 8006b86:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b8a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8006b8c:	430b      	orrs	r3, r1
 8006b8e:	6053      	str	r3, [r2, #4]
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8006b90:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006b92:	f013 0f10 	tst.w	r3, #16
 8006b96:	d006      	beq.n	8006ba6 <UART_AdvFeatureConfig+0x6e>
		MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS,
 8006b98:	6802      	ldr	r2, [r0, #0]
 8006b9a:	6893      	ldr	r3, [r2, #8]
 8006b9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ba0:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8006ba2:	430b      	orrs	r3, r1
 8006ba4:	6093      	str	r3, [r2, #8]
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8006ba6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006ba8:	f013 0f20 	tst.w	r3, #32
 8006bac:	d006      	beq.n	8006bbc <UART_AdvFeatureConfig+0x84>
		MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE,
 8006bae:	6802      	ldr	r2, [r0, #0]
 8006bb0:	6893      	ldr	r3, [r2, #8]
 8006bb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bb6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8006bb8:	430b      	orrs	r3, r1
 8006bba:	6093      	str	r3, [r2, #8]
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8006bbc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006bbe:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006bc2:	d00a      	beq.n	8006bda <UART_AdvFeatureConfig+0xa2>
		MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN,
 8006bc4:	6802      	ldr	r2, [r0, #0]
 8006bc6:	6853      	ldr	r3, [r2, #4]
 8006bc8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006bcc:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8006bce:	430b      	orrs	r3, r1
 8006bd0:	6053      	str	r3, [r2, #4]
		if (huart->AdvancedInit.AutoBaudRateEnable
 8006bd2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006bd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bd8:	d00b      	beq.n	8006bf2 <UART_AdvFeatureConfig+0xba>
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8006bda:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006bdc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006be0:	d006      	beq.n	8006bf0 <UART_AdvFeatureConfig+0xb8>
		MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST,
 8006be2:	6802      	ldr	r2, [r0, #0]
 8006be4:	6853      	ldr	r3, [r2, #4]
 8006be6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006bea:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8006bec:	430b      	orrs	r3, r1
 8006bee:	6053      	str	r3, [r2, #4]
}
 8006bf0:	4770      	bx	lr
			MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE,
 8006bf2:	6802      	ldr	r2, [r0, #0]
 8006bf4:	6853      	ldr	r3, [r2, #4]
 8006bf6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006bfa:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8006bfc:	430b      	orrs	r3, r1
 8006bfe:	6053      	str	r3, [r2, #4]
 8006c00:	e7eb      	b.n	8006bda <UART_AdvFeatureConfig+0xa2>

08006c02 <UART_WaitOnFlagUntilTimeout>:
		uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout) {
 8006c02:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c06:	4605      	mov	r5, r0
 8006c08:	460f      	mov	r7, r1
 8006c0a:	4616      	mov	r6, r2
 8006c0c:	4699      	mov	r9, r3
 8006c0e:	f8dd 8020 	ldr.w	r8, [sp, #32]
	while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) {
 8006c12:	682b      	ldr	r3, [r5, #0]
 8006c14:	69dc      	ldr	r4, [r3, #28]
 8006c16:	ea37 0404 	bics.w	r4, r7, r4
 8006c1a:	bf0c      	ite	eq
 8006c1c:	2401      	moveq	r4, #1
 8006c1e:	2400      	movne	r4, #0
 8006c20:	42b4      	cmp	r4, r6
 8006c22:	d155      	bne.n	8006cd0 <UART_WaitOnFlagUntilTimeout+0xce>
		if (Timeout != HAL_MAX_DELAY) {
 8006c24:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006c28:	d0f3      	beq.n	8006c12 <UART_WaitOnFlagUntilTimeout+0x10>
			if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8006c2a:	f7fc fd73 	bl	8003714 <HAL_GetTick>
 8006c2e:	eba0 0009 	sub.w	r0, r0, r9
 8006c32:	4540      	cmp	r0, r8
 8006c34:	d82e      	bhi.n	8006c94 <UART_WaitOnFlagUntilTimeout+0x92>
 8006c36:	f1b8 0f00 	cmp.w	r8, #0
 8006c3a:	d02b      	beq.n	8006c94 <UART_WaitOnFlagUntilTimeout+0x92>
			if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) {
 8006c3c:	682b      	ldr	r3, [r5, #0]
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	f012 0f04 	tst.w	r2, #4
 8006c44:	d0e5      	beq.n	8006c12 <UART_WaitOnFlagUntilTimeout+0x10>
				if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET) {
 8006c46:	69da      	ldr	r2, [r3, #28]
 8006c48:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8006c4c:	d0e1      	beq.n	8006c12 <UART_WaitOnFlagUntilTimeout+0x10>
					__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c52:	621a      	str	r2, [r3, #32]
					ATOMIC_CLEAR_BIT(huart->Instance->CR1,
 8006c54:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c56:	e852 3f00 	ldrex	r3, [r2]
 8006c5a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5e:	e842 3100 	strex	r1, r3, [r2]
 8006c62:	2900      	cmp	r1, #0
 8006c64:	d1f6      	bne.n	8006c54 <UART_WaitOnFlagUntilTimeout+0x52>
					ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c66:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c68:	f102 0308 	add.w	r3, r2, #8
 8006c6c:	e853 3f00 	ldrex	r3, [r3]
 8006c70:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c74:	3208      	adds	r2, #8
 8006c76:	e842 3100 	strex	r1, r3, [r2]
 8006c7a:	2900      	cmp	r1, #0
 8006c7c:	d1f3      	bne.n	8006c66 <UART_WaitOnFlagUntilTimeout+0x64>
					huart->gState = HAL_UART_STATE_READY;
 8006c7e:	2320      	movs	r3, #32
 8006c80:	67eb      	str	r3, [r5, #124]	; 0x7c
					huart->RxState = HAL_UART_STATE_READY;
 8006c82:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
					huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c86:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
					__HAL_UNLOCK(huart);
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
					return HAL_TIMEOUT;
 8006c90:	2003      	movs	r0, #3
 8006c92:	e01e      	b.n	8006cd2 <UART_WaitOnFlagUntilTimeout+0xd0>
				ATOMIC_CLEAR_BIT(huart->Instance->CR1,
 8006c94:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c96:	e852 3f00 	ldrex	r3, [r2]
 8006c9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c9e:	e842 3100 	strex	r1, r3, [r2]
 8006ca2:	2900      	cmp	r1, #0
 8006ca4:	d1f6      	bne.n	8006c94 <UART_WaitOnFlagUntilTimeout+0x92>
				ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ca6:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca8:	f102 0308 	add.w	r3, r2, #8
 8006cac:	e853 3f00 	ldrex	r3, [r3]
 8006cb0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb4:	3208      	adds	r2, #8
 8006cb6:	e842 3100 	strex	r1, r3, [r2]
 8006cba:	2900      	cmp	r1, #0
 8006cbc:	d1f3      	bne.n	8006ca6 <UART_WaitOnFlagUntilTimeout+0xa4>
				huart->gState = HAL_UART_STATE_READY;
 8006cbe:	2320      	movs	r3, #32
 8006cc0:	67eb      	str	r3, [r5, #124]	; 0x7c
				huart->RxState = HAL_UART_STATE_READY;
 8006cc2:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
				__HAL_UNLOCK(huart);
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
				return HAL_TIMEOUT;
 8006ccc:	2003      	movs	r0, #3
 8006cce:	e000      	b.n	8006cd2 <UART_WaitOnFlagUntilTimeout+0xd0>
	return HAL_OK;
 8006cd0:	2000      	movs	r0, #0
}
 8006cd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006cd6 <HAL_UART_Receive>:
		uint16_t Size, uint32_t Timeout) {
 8006cd6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	461e      	mov	r6, r3
	if (huart->RxState == HAL_UART_STATE_READY) {
 8006cde:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8006ce2:	2b20      	cmp	r3, #32
 8006ce4:	d178      	bne.n	8006dd8 <HAL_UART_Receive+0x102>
 8006ce6:	4604      	mov	r4, r0
 8006ce8:	460d      	mov	r5, r1
 8006cea:	4690      	mov	r8, r2
		if ((pData == NULL) || (Size == 0U)) {
 8006cec:	2a00      	cmp	r2, #0
 8006cee:	bf18      	it	ne
 8006cf0:	2900      	cmpne	r1, #0
 8006cf2:	d101      	bne.n	8006cf8 <HAL_UART_Receive+0x22>
			return HAL_ERROR;
 8006cf4:	2001      	movs	r0, #1
 8006cf6:	e070      	b.n	8006dda <HAL_UART_Receive+0x104>
		huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006cfe:	2222      	movs	r2, #34	; 0x22
 8006d00:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d04:	6603      	str	r3, [r0, #96]	; 0x60
		tickstart = HAL_GetTick();
 8006d06:	f7fc fd05 	bl	8003714 <HAL_GetTick>
 8006d0a:	4607      	mov	r7, r0
		huart->RxXferSize = Size;
 8006d0c:	f8a4 8058 	strh.w	r8, [r4, #88]	; 0x58
		huart->RxXferCount = Size;
 8006d10:	f8a4 805a 	strh.w	r8, [r4, #90]	; 0x5a
		UART_MASK_COMPUTATION(huart);
 8006d14:	68a3      	ldr	r3, [r4, #8]
 8006d16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d1a:	d006      	beq.n	8006d2a <HAL_UART_Receive+0x54>
 8006d1c:	b9a3      	cbnz	r3, 8006d48 <HAL_UART_Receive+0x72>
 8006d1e:	6922      	ldr	r2, [r4, #16]
 8006d20:	b972      	cbnz	r2, 8006d40 <HAL_UART_Receive+0x6a>
 8006d22:	22ff      	movs	r2, #255	; 0xff
 8006d24:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8006d28:	e014      	b.n	8006d54 <HAL_UART_Receive+0x7e>
 8006d2a:	6922      	ldr	r2, [r4, #16]
 8006d2c:	b922      	cbnz	r2, 8006d38 <HAL_UART_Receive+0x62>
 8006d2e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006d32:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8006d36:	e00d      	b.n	8006d54 <HAL_UART_Receive+0x7e>
 8006d38:	22ff      	movs	r2, #255	; 0xff
 8006d3a:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8006d3e:	e009      	b.n	8006d54 <HAL_UART_Receive+0x7e>
 8006d40:	227f      	movs	r2, #127	; 0x7f
 8006d42:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8006d46:	e005      	b.n	8006d54 <HAL_UART_Receive+0x7e>
 8006d48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d4c:	d00a      	beq.n	8006d64 <HAL_UART_Receive+0x8e>
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
		uhMask = huart->Mask;
 8006d54:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
		if ((huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006d58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d5c:	d00c      	beq.n	8006d78 <HAL_UART_Receive+0xa2>
			pdata16bits = NULL;
 8006d5e:	f04f 0900 	mov.w	r9, #0
 8006d62:	e01f      	b.n	8006da4 <HAL_UART_Receive+0xce>
		UART_MASK_COMPUTATION(huart);
 8006d64:	6922      	ldr	r2, [r4, #16]
 8006d66:	b91a      	cbnz	r2, 8006d70 <HAL_UART_Receive+0x9a>
 8006d68:	227f      	movs	r2, #127	; 0x7f
 8006d6a:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8006d6e:	e7f1      	b.n	8006d54 <HAL_UART_Receive+0x7e>
 8006d70:	223f      	movs	r2, #63	; 0x3f
 8006d72:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8006d76:	e7ed      	b.n	8006d54 <HAL_UART_Receive+0x7e>
				&& (huart->Init.Parity == UART_PARITY_NONE)) {
 8006d78:	6923      	ldr	r3, [r4, #16]
 8006d7a:	b113      	cbz	r3, 8006d82 <HAL_UART_Receive+0xac>
			pdata16bits = NULL;
 8006d7c:	f04f 0900 	mov.w	r9, #0
 8006d80:	e010      	b.n	8006da4 <HAL_UART_Receive+0xce>
			pdata16bits = (uint16_t*) pData;
 8006d82:	46a9      	mov	r9, r5
			pdata8bits = NULL;
 8006d84:	2500      	movs	r5, #0
 8006d86:	e00d      	b.n	8006da4 <HAL_UART_Receive+0xce>
						(uint8_t) (huart->Instance->RDR & (uint8_t) uhMask);
 8006d88:	6823      	ldr	r3, [r4, #0]
 8006d8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d8c:	fa5f f388 	uxtb.w	r3, r8
 8006d90:	4013      	ands	r3, r2
				*pdata8bits =
 8006d92:	f805 3b01 	strb.w	r3, [r5], #1
			huart->RxXferCount--;
 8006d96:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 8006d9a:	b292      	uxth	r2, r2
 8006d9c:	3a01      	subs	r2, #1
 8006d9e:	b292      	uxth	r2, r2
 8006da0:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
		while (huart->RxXferCount > 0U) {
 8006da4:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	b183      	cbz	r3, 8006dce <HAL_UART_Receive+0xf8>
			if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET,
 8006dac:	9600      	str	r6, [sp, #0]
 8006dae:	463b      	mov	r3, r7
 8006db0:	2200      	movs	r2, #0
 8006db2:	2120      	movs	r1, #32
 8006db4:	4620      	mov	r0, r4
 8006db6:	f7ff ff24 	bl	8006c02 <UART_WaitOnFlagUntilTimeout>
 8006dba:	b988      	cbnz	r0, 8006de0 <HAL_UART_Receive+0x10a>
			if (pdata8bits == NULL) {
 8006dbc:	2d00      	cmp	r5, #0
 8006dbe:	d1e3      	bne.n	8006d88 <HAL_UART_Receive+0xb2>
				*pdata16bits = (uint16_t) (huart->Instance->RDR & uhMask);
 8006dc0:	6823      	ldr	r3, [r4, #0]
 8006dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc4:	ea08 0303 	and.w	r3, r8, r3
 8006dc8:	f829 3b02 	strh.w	r3, [r9], #2
				pdata16bits++;
 8006dcc:	e7e3      	b.n	8006d96 <HAL_UART_Receive+0xc0>
		huart->RxState = HAL_UART_STATE_READY;
 8006dce:	2320      	movs	r3, #32
 8006dd0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		return HAL_OK;
 8006dd4:	2000      	movs	r0, #0
 8006dd6:	e000      	b.n	8006dda <HAL_UART_Receive+0x104>
		return HAL_BUSY;
 8006dd8:	2002      	movs	r0, #2
}
 8006dda:	b003      	add	sp, #12
 8006ddc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				return HAL_TIMEOUT;
 8006de0:	2003      	movs	r0, #3
 8006de2:	e7fa      	b.n	8006dda <HAL_UART_Receive+0x104>

08006de4 <UART_CheckIdleState>:
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart) {
 8006de4:	b530      	push	{r4, r5, lr}
 8006de6:	b083      	sub	sp, #12
 8006de8:	4604      	mov	r4, r0
	huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dea:	2300      	movs	r3, #0
 8006dec:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	tickstart = HAL_GetTick();
 8006df0:	f7fc fc90 	bl	8003714 <HAL_GetTick>
 8006df4:	4605      	mov	r5, r0
	if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE) {
 8006df6:	6822      	ldr	r2, [r4, #0]
 8006df8:	6812      	ldr	r2, [r2, #0]
 8006dfa:	f012 0f08 	tst.w	r2, #8
 8006dfe:	d10f      	bne.n	8006e20 <UART_CheckIdleState+0x3c>
	if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE) {
 8006e00:	6823      	ldr	r3, [r4, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f013 0f04 	tst.w	r3, #4
 8006e08:	d118      	bne.n	8006e3c <UART_CheckIdleState+0x58>
	huart->gState = HAL_UART_STATE_READY;
 8006e0a:	2320      	movs	r3, #32
 8006e0c:	67e3      	str	r3, [r4, #124]	; 0x7c
	huart->RxState = HAL_UART_STATE_READY;
 8006e0e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e12:	2000      	movs	r0, #0
 8006e14:	6620      	str	r0, [r4, #96]	; 0x60
	huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e16:	6660      	str	r0, [r4, #100]	; 0x64
	__HAL_UNLOCK(huart);
 8006e18:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
}
 8006e1c:	b003      	add	sp, #12
 8006e1e:	bd30      	pop	{r4, r5, pc}
		if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET,
 8006e20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e24:	9300      	str	r3, [sp, #0]
 8006e26:	4603      	mov	r3, r0
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e2e:	4620      	mov	r0, r4
 8006e30:	f7ff fee7 	bl	8006c02 <UART_WaitOnFlagUntilTimeout>
 8006e34:	2800      	cmp	r0, #0
 8006e36:	d0e3      	beq.n	8006e00 <UART_CheckIdleState+0x1c>
			return HAL_TIMEOUT;
 8006e38:	2003      	movs	r0, #3
 8006e3a:	e7ef      	b.n	8006e1c <UART_CheckIdleState+0x38>
		if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,
 8006e3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e40:	9300      	str	r3, [sp, #0]
 8006e42:	462b      	mov	r3, r5
 8006e44:	2200      	movs	r2, #0
 8006e46:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e4a:	4620      	mov	r0, r4
 8006e4c:	f7ff fed9 	bl	8006c02 <UART_WaitOnFlagUntilTimeout>
 8006e50:	2800      	cmp	r0, #0
 8006e52:	d0da      	beq.n	8006e0a <UART_CheckIdleState+0x26>
			return HAL_TIMEOUT;
 8006e54:	2003      	movs	r0, #3
 8006e56:	e7e1      	b.n	8006e1c <UART_CheckIdleState+0x38>

08006e58 <HAL_UART_Init>:
	if (huart == NULL) {
 8006e58:	b368      	cbz	r0, 8006eb6 <HAL_UART_Init+0x5e>
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart) {
 8006e5a:	b510      	push	{r4, lr}
 8006e5c:	4604      	mov	r4, r0
	if (huart->gState == HAL_UART_STATE_RESET) {
 8006e5e:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8006e60:	b303      	cbz	r3, 8006ea4 <HAL_UART_Init+0x4c>
	huart->gState = HAL_UART_STATE_BUSY;
 8006e62:	2324      	movs	r3, #36	; 0x24
 8006e64:	67e3      	str	r3, [r4, #124]	; 0x7c
	__HAL_UART_DISABLE(huart);
 8006e66:	6822      	ldr	r2, [r4, #0]
 8006e68:	6813      	ldr	r3, [r2, #0]
 8006e6a:	f023 0301 	bic.w	r3, r3, #1
 8006e6e:	6013      	str	r3, [r2, #0]
	if (UART_SetConfig(huart) == HAL_ERROR) {
 8006e70:	4620      	mov	r0, r4
 8006e72:	f7ff fcc9 	bl	8006808 <UART_SetConfig>
 8006e76:	2801      	cmp	r0, #1
 8006e78:	d013      	beq.n	8006ea2 <HAL_UART_Init+0x4a>
	if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT) {
 8006e7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e7c:	b9bb      	cbnz	r3, 8006eae <HAL_UART_Init+0x56>
	CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e7e:	6822      	ldr	r2, [r4, #0]
 8006e80:	6853      	ldr	r3, [r2, #4]
 8006e82:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8006e86:	6053      	str	r3, [r2, #4]
	CLEAR_BIT(huart->Instance->CR3,
 8006e88:	6822      	ldr	r2, [r4, #0]
 8006e8a:	6893      	ldr	r3, [r2, #8]
 8006e8c:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8006e90:	6093      	str	r3, [r2, #8]
	__HAL_UART_ENABLE(huart);
 8006e92:	6822      	ldr	r2, [r4, #0]
 8006e94:	6813      	ldr	r3, [r2, #0]
 8006e96:	f043 0301 	orr.w	r3, r3, #1
 8006e9a:	6013      	str	r3, [r2, #0]
	return (UART_CheckIdleState(huart));
 8006e9c:	4620      	mov	r0, r4
 8006e9e:	f7ff ffa1 	bl	8006de4 <UART_CheckIdleState>
}
 8006ea2:	bd10      	pop	{r4, pc}
		huart->Lock = HAL_UNLOCKED;
 8006ea4:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
		HAL_UART_MspInit(huart);
 8006ea8:	f7fc fb4c 	bl	8003544 <HAL_UART_MspInit>
 8006eac:	e7d9      	b.n	8006e62 <HAL_UART_Init+0xa>
		UART_AdvFeatureConfig(huart);
 8006eae:	4620      	mov	r0, r4
 8006eb0:	f7ff fe42 	bl	8006b38 <UART_AdvFeatureConfig>
 8006eb4:	e7e3      	b.n	8006e7e <HAL_UART_Init+0x26>
		return HAL_ERROR;
 8006eb6:	2001      	movs	r0, #1
}
 8006eb8:	4770      	bx	lr
	...

08006ebc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006ebc:	b410      	push	{r4}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006ebe:	680b      	ldr	r3, [r1, #0]
 8006ec0:	b9cb      	cbnz	r3, 8006ef6 <FMC_SDRAM_Init+0x3a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006ec2:	6803      	ldr	r3, [r0, #0]
 8006ec4:	4a19      	ldr	r2, [pc, #100]	; (8006f2c <FMC_SDRAM_Init+0x70>)
 8006ec6:	401a      	ands	r2, r3
 8006ec8:	684b      	ldr	r3, [r1, #4]
 8006eca:	688c      	ldr	r4, [r1, #8]
 8006ecc:	4323      	orrs	r3, r4
 8006ece:	68cc      	ldr	r4, [r1, #12]
 8006ed0:	4323      	orrs	r3, r4
 8006ed2:	690c      	ldr	r4, [r1, #16]
 8006ed4:	4323      	orrs	r3, r4
 8006ed6:	694c      	ldr	r4, [r1, #20]
 8006ed8:	4323      	orrs	r3, r4
 8006eda:	698c      	ldr	r4, [r1, #24]
 8006edc:	4323      	orrs	r3, r4
 8006ede:	69cc      	ldr	r4, [r1, #28]
 8006ee0:	4323      	orrs	r3, r4
 8006ee2:	6a0c      	ldr	r4, [r1, #32]
 8006ee4:	4323      	orrs	r3, r4
 8006ee6:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8006ee8:	430b      	orrs	r3, r1
 8006eea:	431a      	orrs	r2, r3
 8006eec:	6002      	str	r2, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8006eee:	2000      	movs	r0, #0
 8006ef0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ef4:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006ef6:	6803      	ldr	r3, [r0, #0]
 8006ef8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006efc:	69ca      	ldr	r2, [r1, #28]
 8006efe:	6a0c      	ldr	r4, [r1, #32]
 8006f00:	4322      	orrs	r2, r4
 8006f02:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8006f04:	4322      	orrs	r2, r4
 8006f06:	4313      	orrs	r3, r2
 8006f08:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006f0a:	6843      	ldr	r3, [r0, #4]
 8006f0c:	4a07      	ldr	r2, [pc, #28]	; (8006f2c <FMC_SDRAM_Init+0x70>)
 8006f0e:	401a      	ands	r2, r3
 8006f10:	684b      	ldr	r3, [r1, #4]
 8006f12:	688c      	ldr	r4, [r1, #8]
 8006f14:	4323      	orrs	r3, r4
 8006f16:	68cc      	ldr	r4, [r1, #12]
 8006f18:	4323      	orrs	r3, r4
 8006f1a:	690c      	ldr	r4, [r1, #16]
 8006f1c:	4323      	orrs	r3, r4
 8006f1e:	694c      	ldr	r4, [r1, #20]
 8006f20:	4323      	orrs	r3, r4
 8006f22:	6989      	ldr	r1, [r1, #24]
 8006f24:	430b      	orrs	r3, r1
 8006f26:	431a      	orrs	r2, r3
 8006f28:	6042      	str	r2, [r0, #4]
 8006f2a:	e7e0      	b.n	8006eee <FMC_SDRAM_Init+0x32>
 8006f2c:	ffff8000 	.word	0xffff8000

08006f30 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006f30:	b410      	push	{r4}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006f32:	bb3a      	cbnz	r2, 8006f84 <FMC_SDRAM_Timing_Init+0x54>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006f34:	6882      	ldr	r2, [r0, #8]
 8006f36:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8006f3a:	680b      	ldr	r3, [r1, #0]
 8006f3c:	3b01      	subs	r3, #1
 8006f3e:	684c      	ldr	r4, [r1, #4]
 8006f40:	f104 3cff 	add.w	ip, r4, #4294967295
 8006f44:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 8006f48:	688c      	ldr	r4, [r1, #8]
 8006f4a:	f104 3cff 	add.w	ip, r4, #4294967295
 8006f4e:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8006f52:	68cc      	ldr	r4, [r1, #12]
 8006f54:	f104 3cff 	add.w	ip, r4, #4294967295
 8006f58:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
 8006f5c:	690c      	ldr	r4, [r1, #16]
 8006f5e:	f104 3cff 	add.w	ip, r4, #4294967295
 8006f62:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8006f66:	694c      	ldr	r4, [r1, #20]
 8006f68:	f104 3cff 	add.w	ip, r4, #4294967295
 8006f6c:	ea43 530c 	orr.w	r3, r3, ip, lsl #20
 8006f70:	6989      	ldr	r1, [r1, #24]
 8006f72:	3901      	subs	r1, #1
 8006f74:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 8006f7c:	2000      	movs	r0, #0
 8006f7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f82:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006f84:	6883      	ldr	r3, [r0, #8]
 8006f86:	4a13      	ldr	r2, [pc, #76]	; (8006fd4 <FMC_SDRAM_Timing_Init+0xa4>)
 8006f88:	401a      	ands	r2, r3
 8006f8a:	68cb      	ldr	r3, [r1, #12]
 8006f8c:	f103 3cff 	add.w	ip, r3, #4294967295
 8006f90:	694b      	ldr	r3, [r1, #20]
 8006f92:	3b01      	subs	r3, #1
 8006f94:	051b      	lsls	r3, r3, #20
 8006f96:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
 8006f9a:	431a      	orrs	r2, r3
 8006f9c:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006f9e:	68c2      	ldr	r2, [r0, #12]
 8006fa0:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8006fa4:	680b      	ldr	r3, [r1, #0]
 8006fa6:	3b01      	subs	r3, #1
 8006fa8:	684c      	ldr	r4, [r1, #4]
 8006faa:	f104 3cff 	add.w	ip, r4, #4294967295
 8006fae:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 8006fb2:	688c      	ldr	r4, [r1, #8]
 8006fb4:	f104 3cff 	add.w	ip, r4, #4294967295
 8006fb8:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8006fbc:	690c      	ldr	r4, [r1, #16]
 8006fbe:	f104 3cff 	add.w	ip, r4, #4294967295
 8006fc2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8006fc6:	6989      	ldr	r1, [r1, #24]
 8006fc8:	3901      	subs	r1, #1
 8006fca:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	60c3      	str	r3, [r0, #12]
 8006fd2:	e7d3      	b.n	8006f7c <FMC_SDRAM_Timing_Init+0x4c>
 8006fd4:	ff0f0fff 	.word	0xff0f0fff

08006fd8 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006fd8:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8006fda:	6903      	ldr	r3, [r0, #16]
 8006fdc:	4a09      	ldr	r2, [pc, #36]	; (8007004 <FMC_SDRAM_SendCommand+0x2c>)
 8006fde:	401a      	ands	r2, r3
 8006fe0:	680b      	ldr	r3, [r1, #0]
 8006fe2:	684c      	ldr	r4, [r1, #4]
 8006fe4:	4323      	orrs	r3, r4
 8006fe6:	688c      	ldr	r4, [r1, #8]
 8006fe8:	f104 3cff 	add.w	ip, r4, #4294967295
 8006fec:	ea43 134c 	orr.w	r3, r3, ip, lsl #5
 8006ff0:	68c9      	ldr	r1, [r1, #12]
 8006ff2:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8006ff6:	431a      	orrs	r2, r3
 8006ff8:	6102      	str	r2, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 8006ffa:	2000      	movs	r0, #0
 8006ffc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	ffc00000 	.word	0xffc00000

08007008 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8007008:	6942      	ldr	r2, [r0, #20]
 800700a:	4b03      	ldr	r3, [pc, #12]	; (8007018 <FMC_SDRAM_ProgramRefreshRate+0x10>)
 800700c:	4013      	ands	r3, r2
 800700e:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8007012:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 8007014:	2000      	movs	r0, #0
 8007016:	4770      	bx	lr
 8007018:	ffffc001 	.word	0xffffc001

0800701c <std>:
 800701c:	2300      	movs	r3, #0
 800701e:	b510      	push	{r4, lr}
 8007020:	4604      	mov	r4, r0
 8007022:	e9c0 3300 	strd	r3, r3, [r0]
 8007026:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800702a:	6083      	str	r3, [r0, #8]
 800702c:	8181      	strh	r1, [r0, #12]
 800702e:	6643      	str	r3, [r0, #100]	; 0x64
 8007030:	81c2      	strh	r2, [r0, #14]
 8007032:	6183      	str	r3, [r0, #24]
 8007034:	4619      	mov	r1, r3
 8007036:	2208      	movs	r2, #8
 8007038:	305c      	adds	r0, #92	; 0x5c
 800703a:	f000 f9dc 	bl	80073f6 <memset>
 800703e:	4b0d      	ldr	r3, [pc, #52]	; (8007074 <std+0x58>)
 8007040:	6263      	str	r3, [r4, #36]	; 0x24
 8007042:	4b0d      	ldr	r3, [pc, #52]	; (8007078 <std+0x5c>)
 8007044:	62a3      	str	r3, [r4, #40]	; 0x28
 8007046:	4b0d      	ldr	r3, [pc, #52]	; (800707c <std+0x60>)
 8007048:	62e3      	str	r3, [r4, #44]	; 0x2c
 800704a:	4b0d      	ldr	r3, [pc, #52]	; (8007080 <std+0x64>)
 800704c:	6323      	str	r3, [r4, #48]	; 0x30
 800704e:	4b0d      	ldr	r3, [pc, #52]	; (8007084 <std+0x68>)
 8007050:	6224      	str	r4, [r4, #32]
 8007052:	429c      	cmp	r4, r3
 8007054:	d006      	beq.n	8007064 <std+0x48>
 8007056:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800705a:	4294      	cmp	r4, r2
 800705c:	d002      	beq.n	8007064 <std+0x48>
 800705e:	33d0      	adds	r3, #208	; 0xd0
 8007060:	429c      	cmp	r4, r3
 8007062:	d105      	bne.n	8007070 <std+0x54>
 8007064:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800706c:	f000 ba36 	b.w	80074dc <__retarget_lock_init_recursive>
 8007070:	bd10      	pop	{r4, pc}
 8007072:	bf00      	nop
 8007074:	08007371 	.word	0x08007371
 8007078:	08007393 	.word	0x08007393
 800707c:	080073cb 	.word	0x080073cb
 8007080:	080073ef 	.word	0x080073ef
 8007084:	20004ec8 	.word	0x20004ec8

08007088 <stdio_exit_handler>:
 8007088:	4a02      	ldr	r2, [pc, #8]	; (8007094 <stdio_exit_handler+0xc>)
 800708a:	4903      	ldr	r1, [pc, #12]	; (8007098 <stdio_exit_handler+0x10>)
 800708c:	4803      	ldr	r0, [pc, #12]	; (800709c <stdio_exit_handler+0x14>)
 800708e:	f000 b869 	b.w	8007164 <_fwalk_sglue>
 8007092:	bf00      	nop
 8007094:	20000024 	.word	0x20000024
 8007098:	08008065 	.word	0x08008065
 800709c:	20000030 	.word	0x20000030

080070a0 <cleanup_stdio>:
 80070a0:	6841      	ldr	r1, [r0, #4]
 80070a2:	4b0c      	ldr	r3, [pc, #48]	; (80070d4 <cleanup_stdio+0x34>)
 80070a4:	4299      	cmp	r1, r3
 80070a6:	b510      	push	{r4, lr}
 80070a8:	4604      	mov	r4, r0
 80070aa:	d001      	beq.n	80070b0 <cleanup_stdio+0x10>
 80070ac:	f000 ffda 	bl	8008064 <_fflush_r>
 80070b0:	68a1      	ldr	r1, [r4, #8]
 80070b2:	4b09      	ldr	r3, [pc, #36]	; (80070d8 <cleanup_stdio+0x38>)
 80070b4:	4299      	cmp	r1, r3
 80070b6:	d002      	beq.n	80070be <cleanup_stdio+0x1e>
 80070b8:	4620      	mov	r0, r4
 80070ba:	f000 ffd3 	bl	8008064 <_fflush_r>
 80070be:	68e1      	ldr	r1, [r4, #12]
 80070c0:	4b06      	ldr	r3, [pc, #24]	; (80070dc <cleanup_stdio+0x3c>)
 80070c2:	4299      	cmp	r1, r3
 80070c4:	d004      	beq.n	80070d0 <cleanup_stdio+0x30>
 80070c6:	4620      	mov	r0, r4
 80070c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070cc:	f000 bfca 	b.w	8008064 <_fflush_r>
 80070d0:	bd10      	pop	{r4, pc}
 80070d2:	bf00      	nop
 80070d4:	20004ec8 	.word	0x20004ec8
 80070d8:	20004f30 	.word	0x20004f30
 80070dc:	20004f98 	.word	0x20004f98

080070e0 <global_stdio_init.part.0>:
 80070e0:	b510      	push	{r4, lr}
 80070e2:	4b0b      	ldr	r3, [pc, #44]	; (8007110 <global_stdio_init.part.0+0x30>)
 80070e4:	4c0b      	ldr	r4, [pc, #44]	; (8007114 <global_stdio_init.part.0+0x34>)
 80070e6:	4a0c      	ldr	r2, [pc, #48]	; (8007118 <global_stdio_init.part.0+0x38>)
 80070e8:	601a      	str	r2, [r3, #0]
 80070ea:	4620      	mov	r0, r4
 80070ec:	2200      	movs	r2, #0
 80070ee:	2104      	movs	r1, #4
 80070f0:	f7ff ff94 	bl	800701c <std>
 80070f4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80070f8:	2201      	movs	r2, #1
 80070fa:	2109      	movs	r1, #9
 80070fc:	f7ff ff8e 	bl	800701c <std>
 8007100:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007104:	2202      	movs	r2, #2
 8007106:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800710a:	2112      	movs	r1, #18
 800710c:	f7ff bf86 	b.w	800701c <std>
 8007110:	20005000 	.word	0x20005000
 8007114:	20004ec8 	.word	0x20004ec8
 8007118:	08007089 	.word	0x08007089

0800711c <__sfp_lock_acquire>:
 800711c:	4801      	ldr	r0, [pc, #4]	; (8007124 <__sfp_lock_acquire+0x8>)
 800711e:	f000 b9de 	b.w	80074de <__retarget_lock_acquire_recursive>
 8007122:	bf00      	nop
 8007124:	20005009 	.word	0x20005009

08007128 <__sfp_lock_release>:
 8007128:	4801      	ldr	r0, [pc, #4]	; (8007130 <__sfp_lock_release+0x8>)
 800712a:	f000 b9d9 	b.w	80074e0 <__retarget_lock_release_recursive>
 800712e:	bf00      	nop
 8007130:	20005009 	.word	0x20005009

08007134 <__sinit>:
 8007134:	b510      	push	{r4, lr}
 8007136:	4604      	mov	r4, r0
 8007138:	f7ff fff0 	bl	800711c <__sfp_lock_acquire>
 800713c:	6a23      	ldr	r3, [r4, #32]
 800713e:	b11b      	cbz	r3, 8007148 <__sinit+0x14>
 8007140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007144:	f7ff bff0 	b.w	8007128 <__sfp_lock_release>
 8007148:	4b04      	ldr	r3, [pc, #16]	; (800715c <__sinit+0x28>)
 800714a:	6223      	str	r3, [r4, #32]
 800714c:	4b04      	ldr	r3, [pc, #16]	; (8007160 <__sinit+0x2c>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1f5      	bne.n	8007140 <__sinit+0xc>
 8007154:	f7ff ffc4 	bl	80070e0 <global_stdio_init.part.0>
 8007158:	e7f2      	b.n	8007140 <__sinit+0xc>
 800715a:	bf00      	nop
 800715c:	080070a1 	.word	0x080070a1
 8007160:	20005000 	.word	0x20005000

08007164 <_fwalk_sglue>:
 8007164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007168:	4607      	mov	r7, r0
 800716a:	4688      	mov	r8, r1
 800716c:	4614      	mov	r4, r2
 800716e:	2600      	movs	r6, #0
 8007170:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007174:	f1b9 0901 	subs.w	r9, r9, #1
 8007178:	d505      	bpl.n	8007186 <_fwalk_sglue+0x22>
 800717a:	6824      	ldr	r4, [r4, #0]
 800717c:	2c00      	cmp	r4, #0
 800717e:	d1f7      	bne.n	8007170 <_fwalk_sglue+0xc>
 8007180:	4630      	mov	r0, r6
 8007182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007186:	89ab      	ldrh	r3, [r5, #12]
 8007188:	2b01      	cmp	r3, #1
 800718a:	d907      	bls.n	800719c <_fwalk_sglue+0x38>
 800718c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007190:	3301      	adds	r3, #1
 8007192:	d003      	beq.n	800719c <_fwalk_sglue+0x38>
 8007194:	4629      	mov	r1, r5
 8007196:	4638      	mov	r0, r7
 8007198:	47c0      	blx	r8
 800719a:	4306      	orrs	r6, r0
 800719c:	3568      	adds	r5, #104	; 0x68
 800719e:	e7e9      	b.n	8007174 <_fwalk_sglue+0x10>

080071a0 <iprintf>:
 80071a0:	b40f      	push	{r0, r1, r2, r3}
 80071a2:	b507      	push	{r0, r1, r2, lr}
 80071a4:	4906      	ldr	r1, [pc, #24]	; (80071c0 <iprintf+0x20>)
 80071a6:	ab04      	add	r3, sp, #16
 80071a8:	6808      	ldr	r0, [r1, #0]
 80071aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80071ae:	6881      	ldr	r1, [r0, #8]
 80071b0:	9301      	str	r3, [sp, #4]
 80071b2:	f000 fc27 	bl	8007a04 <_vfiprintf_r>
 80071b6:	b003      	add	sp, #12
 80071b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80071bc:	b004      	add	sp, #16
 80071be:	4770      	bx	lr
 80071c0:	2000007c 	.word	0x2000007c

080071c4 <setbuf>:
 80071c4:	fab1 f281 	clz	r2, r1
 80071c8:	0952      	lsrs	r2, r2, #5
 80071ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071ce:	0052      	lsls	r2, r2, #1
 80071d0:	f000 b800 	b.w	80071d4 <setvbuf>

080071d4 <setvbuf>:
 80071d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80071d8:	461d      	mov	r5, r3
 80071da:	4b54      	ldr	r3, [pc, #336]	; (800732c <setvbuf+0x158>)
 80071dc:	681f      	ldr	r7, [r3, #0]
 80071de:	4604      	mov	r4, r0
 80071e0:	460e      	mov	r6, r1
 80071e2:	4690      	mov	r8, r2
 80071e4:	b127      	cbz	r7, 80071f0 <setvbuf+0x1c>
 80071e6:	6a3b      	ldr	r3, [r7, #32]
 80071e8:	b913      	cbnz	r3, 80071f0 <setvbuf+0x1c>
 80071ea:	4638      	mov	r0, r7
 80071ec:	f7ff ffa2 	bl	8007134 <__sinit>
 80071f0:	f1b8 0f02 	cmp.w	r8, #2
 80071f4:	d006      	beq.n	8007204 <setvbuf+0x30>
 80071f6:	f1b8 0f01 	cmp.w	r8, #1
 80071fa:	f200 8094 	bhi.w	8007326 <setvbuf+0x152>
 80071fe:	2d00      	cmp	r5, #0
 8007200:	f2c0 8091 	blt.w	8007326 <setvbuf+0x152>
 8007204:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007206:	07da      	lsls	r2, r3, #31
 8007208:	d405      	bmi.n	8007216 <setvbuf+0x42>
 800720a:	89a3      	ldrh	r3, [r4, #12]
 800720c:	059b      	lsls	r3, r3, #22
 800720e:	d402      	bmi.n	8007216 <setvbuf+0x42>
 8007210:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007212:	f000 f964 	bl	80074de <__retarget_lock_acquire_recursive>
 8007216:	4621      	mov	r1, r4
 8007218:	4638      	mov	r0, r7
 800721a:	f000 ff23 	bl	8008064 <_fflush_r>
 800721e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007220:	b141      	cbz	r1, 8007234 <setvbuf+0x60>
 8007222:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007226:	4299      	cmp	r1, r3
 8007228:	d002      	beq.n	8007230 <setvbuf+0x5c>
 800722a:	4638      	mov	r0, r7
 800722c:	f000 f968 	bl	8007500 <_free_r>
 8007230:	2300      	movs	r3, #0
 8007232:	6363      	str	r3, [r4, #52]	; 0x34
 8007234:	2300      	movs	r3, #0
 8007236:	61a3      	str	r3, [r4, #24]
 8007238:	6063      	str	r3, [r4, #4]
 800723a:	89a3      	ldrh	r3, [r4, #12]
 800723c:	0618      	lsls	r0, r3, #24
 800723e:	d503      	bpl.n	8007248 <setvbuf+0x74>
 8007240:	6921      	ldr	r1, [r4, #16]
 8007242:	4638      	mov	r0, r7
 8007244:	f000 f95c 	bl	8007500 <_free_r>
 8007248:	89a3      	ldrh	r3, [r4, #12]
 800724a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800724e:	f023 0303 	bic.w	r3, r3, #3
 8007252:	f1b8 0f02 	cmp.w	r8, #2
 8007256:	81a3      	strh	r3, [r4, #12]
 8007258:	d05f      	beq.n	800731a <setvbuf+0x146>
 800725a:	ab01      	add	r3, sp, #4
 800725c:	466a      	mov	r2, sp
 800725e:	4621      	mov	r1, r4
 8007260:	4638      	mov	r0, r7
 8007262:	f000 ff27 	bl	80080b4 <__swhatbuf_r>
 8007266:	89a3      	ldrh	r3, [r4, #12]
 8007268:	4318      	orrs	r0, r3
 800726a:	81a0      	strh	r0, [r4, #12]
 800726c:	bb2d      	cbnz	r5, 80072ba <setvbuf+0xe6>
 800726e:	9d00      	ldr	r5, [sp, #0]
 8007270:	4628      	mov	r0, r5
 8007272:	f000 f991 	bl	8007598 <malloc>
 8007276:	4606      	mov	r6, r0
 8007278:	2800      	cmp	r0, #0
 800727a:	d150      	bne.n	800731e <setvbuf+0x14a>
 800727c:	f8dd 9000 	ldr.w	r9, [sp]
 8007280:	45a9      	cmp	r9, r5
 8007282:	d13e      	bne.n	8007302 <setvbuf+0x12e>
 8007284:	f04f 35ff 	mov.w	r5, #4294967295
 8007288:	2200      	movs	r2, #0
 800728a:	60a2      	str	r2, [r4, #8]
 800728c:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8007290:	6022      	str	r2, [r4, #0]
 8007292:	6122      	str	r2, [r4, #16]
 8007294:	2201      	movs	r2, #1
 8007296:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800729a:	6162      	str	r2, [r4, #20]
 800729c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800729e:	f043 0302 	orr.w	r3, r3, #2
 80072a2:	07d1      	lsls	r1, r2, #31
 80072a4:	81a3      	strh	r3, [r4, #12]
 80072a6:	d404      	bmi.n	80072b2 <setvbuf+0xde>
 80072a8:	059b      	lsls	r3, r3, #22
 80072aa:	d402      	bmi.n	80072b2 <setvbuf+0xde>
 80072ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072ae:	f000 f917 	bl	80074e0 <__retarget_lock_release_recursive>
 80072b2:	4628      	mov	r0, r5
 80072b4:	b003      	add	sp, #12
 80072b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80072ba:	2e00      	cmp	r6, #0
 80072bc:	d0d8      	beq.n	8007270 <setvbuf+0x9c>
 80072be:	6a3b      	ldr	r3, [r7, #32]
 80072c0:	b913      	cbnz	r3, 80072c8 <setvbuf+0xf4>
 80072c2:	4638      	mov	r0, r7
 80072c4:	f7ff ff36 	bl	8007134 <__sinit>
 80072c8:	f1b8 0f01 	cmp.w	r8, #1
 80072cc:	bf08      	it	eq
 80072ce:	89a3      	ldrheq	r3, [r4, #12]
 80072d0:	6026      	str	r6, [r4, #0]
 80072d2:	bf04      	itt	eq
 80072d4:	f043 0301 	orreq.w	r3, r3, #1
 80072d8:	81a3      	strheq	r3, [r4, #12]
 80072da:	89a3      	ldrh	r3, [r4, #12]
 80072dc:	f013 0208 	ands.w	r2, r3, #8
 80072e0:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80072e4:	d01d      	beq.n	8007322 <setvbuf+0x14e>
 80072e6:	07da      	lsls	r2, r3, #31
 80072e8:	bf41      	itttt	mi
 80072ea:	2200      	movmi	r2, #0
 80072ec:	426d      	negmi	r5, r5
 80072ee:	60a2      	strmi	r2, [r4, #8]
 80072f0:	61a5      	strmi	r5, [r4, #24]
 80072f2:	bf58      	it	pl
 80072f4:	60a5      	strpl	r5, [r4, #8]
 80072f6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80072f8:	f015 0501 	ands.w	r5, r5, #1
 80072fc:	d0d4      	beq.n	80072a8 <setvbuf+0xd4>
 80072fe:	2500      	movs	r5, #0
 8007300:	e7d7      	b.n	80072b2 <setvbuf+0xde>
 8007302:	4648      	mov	r0, r9
 8007304:	f000 f948 	bl	8007598 <malloc>
 8007308:	4606      	mov	r6, r0
 800730a:	2800      	cmp	r0, #0
 800730c:	d0ba      	beq.n	8007284 <setvbuf+0xb0>
 800730e:	89a3      	ldrh	r3, [r4, #12]
 8007310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007314:	81a3      	strh	r3, [r4, #12]
 8007316:	464d      	mov	r5, r9
 8007318:	e7d1      	b.n	80072be <setvbuf+0xea>
 800731a:	2500      	movs	r5, #0
 800731c:	e7b4      	b.n	8007288 <setvbuf+0xb4>
 800731e:	46a9      	mov	r9, r5
 8007320:	e7f5      	b.n	800730e <setvbuf+0x13a>
 8007322:	60a2      	str	r2, [r4, #8]
 8007324:	e7e7      	b.n	80072f6 <setvbuf+0x122>
 8007326:	f04f 35ff 	mov.w	r5, #4294967295
 800732a:	e7c2      	b.n	80072b2 <setvbuf+0xde>
 800732c:	2000007c 	.word	0x2000007c

08007330 <siprintf>:
 8007330:	b40e      	push	{r1, r2, r3}
 8007332:	b500      	push	{lr}
 8007334:	b09c      	sub	sp, #112	; 0x70
 8007336:	ab1d      	add	r3, sp, #116	; 0x74
 8007338:	9002      	str	r0, [sp, #8]
 800733a:	9006      	str	r0, [sp, #24]
 800733c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007340:	4809      	ldr	r0, [pc, #36]	; (8007368 <siprintf+0x38>)
 8007342:	9107      	str	r1, [sp, #28]
 8007344:	9104      	str	r1, [sp, #16]
 8007346:	4909      	ldr	r1, [pc, #36]	; (800736c <siprintf+0x3c>)
 8007348:	f853 2b04 	ldr.w	r2, [r3], #4
 800734c:	9105      	str	r1, [sp, #20]
 800734e:	6800      	ldr	r0, [r0, #0]
 8007350:	9301      	str	r3, [sp, #4]
 8007352:	a902      	add	r1, sp, #8
 8007354:	f000 fa2e 	bl	80077b4 <_svfiprintf_r>
 8007358:	9b02      	ldr	r3, [sp, #8]
 800735a:	2200      	movs	r2, #0
 800735c:	701a      	strb	r2, [r3, #0]
 800735e:	b01c      	add	sp, #112	; 0x70
 8007360:	f85d eb04 	ldr.w	lr, [sp], #4
 8007364:	b003      	add	sp, #12
 8007366:	4770      	bx	lr
 8007368:	2000007c 	.word	0x2000007c
 800736c:	ffff0208 	.word	0xffff0208

08007370 <__sread>:
 8007370:	b510      	push	{r4, lr}
 8007372:	460c      	mov	r4, r1
 8007374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007378:	f000 f868 	bl	800744c <_read_r>
 800737c:	2800      	cmp	r0, #0
 800737e:	bfab      	itete	ge
 8007380:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007382:	89a3      	ldrhlt	r3, [r4, #12]
 8007384:	181b      	addge	r3, r3, r0
 8007386:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800738a:	bfac      	ite	ge
 800738c:	6563      	strge	r3, [r4, #84]	; 0x54
 800738e:	81a3      	strhlt	r3, [r4, #12]
 8007390:	bd10      	pop	{r4, pc}

08007392 <__swrite>:
 8007392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007396:	461f      	mov	r7, r3
 8007398:	898b      	ldrh	r3, [r1, #12]
 800739a:	05db      	lsls	r3, r3, #23
 800739c:	4605      	mov	r5, r0
 800739e:	460c      	mov	r4, r1
 80073a0:	4616      	mov	r6, r2
 80073a2:	d505      	bpl.n	80073b0 <__swrite+0x1e>
 80073a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073a8:	2302      	movs	r3, #2
 80073aa:	2200      	movs	r2, #0
 80073ac:	f000 f83c 	bl	8007428 <_lseek_r>
 80073b0:	89a3      	ldrh	r3, [r4, #12]
 80073b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073ba:	81a3      	strh	r3, [r4, #12]
 80073bc:	4632      	mov	r2, r6
 80073be:	463b      	mov	r3, r7
 80073c0:	4628      	mov	r0, r5
 80073c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073c6:	f000 b853 	b.w	8007470 <_write_r>

080073ca <__sseek>:
 80073ca:	b510      	push	{r4, lr}
 80073cc:	460c      	mov	r4, r1
 80073ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073d2:	f000 f829 	bl	8007428 <_lseek_r>
 80073d6:	1c43      	adds	r3, r0, #1
 80073d8:	89a3      	ldrh	r3, [r4, #12]
 80073da:	bf15      	itete	ne
 80073dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80073de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80073e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80073e6:	81a3      	strheq	r3, [r4, #12]
 80073e8:	bf18      	it	ne
 80073ea:	81a3      	strhne	r3, [r4, #12]
 80073ec:	bd10      	pop	{r4, pc}

080073ee <__sclose>:
 80073ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073f2:	f000 b809 	b.w	8007408 <_close_r>

080073f6 <memset>:
 80073f6:	4402      	add	r2, r0
 80073f8:	4603      	mov	r3, r0
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d100      	bne.n	8007400 <memset+0xa>
 80073fe:	4770      	bx	lr
 8007400:	f803 1b01 	strb.w	r1, [r3], #1
 8007404:	e7f9      	b.n	80073fa <memset+0x4>
	...

08007408 <_close_r>:
 8007408:	b538      	push	{r3, r4, r5, lr}
 800740a:	4d06      	ldr	r5, [pc, #24]	; (8007424 <_close_r+0x1c>)
 800740c:	2300      	movs	r3, #0
 800740e:	4604      	mov	r4, r0
 8007410:	4608      	mov	r0, r1
 8007412:	602b      	str	r3, [r5, #0]
 8007414:	f000 ffca 	bl	80083ac <_close>
 8007418:	1c43      	adds	r3, r0, #1
 800741a:	d102      	bne.n	8007422 <_close_r+0x1a>
 800741c:	682b      	ldr	r3, [r5, #0]
 800741e:	b103      	cbz	r3, 8007422 <_close_r+0x1a>
 8007420:	6023      	str	r3, [r4, #0]
 8007422:	bd38      	pop	{r3, r4, r5, pc}
 8007424:	20005004 	.word	0x20005004

08007428 <_lseek_r>:
 8007428:	b538      	push	{r3, r4, r5, lr}
 800742a:	4d07      	ldr	r5, [pc, #28]	; (8007448 <_lseek_r+0x20>)
 800742c:	4604      	mov	r4, r0
 800742e:	4608      	mov	r0, r1
 8007430:	4611      	mov	r1, r2
 8007432:	2200      	movs	r2, #0
 8007434:	602a      	str	r2, [r5, #0]
 8007436:	461a      	mov	r2, r3
 8007438:	f7fc f91c 	bl	8003674 <_lseek>
 800743c:	1c43      	adds	r3, r0, #1
 800743e:	d102      	bne.n	8007446 <_lseek_r+0x1e>
 8007440:	682b      	ldr	r3, [r5, #0]
 8007442:	b103      	cbz	r3, 8007446 <_lseek_r+0x1e>
 8007444:	6023      	str	r3, [r4, #0]
 8007446:	bd38      	pop	{r3, r4, r5, pc}
 8007448:	20005004 	.word	0x20005004

0800744c <_read_r>:
 800744c:	b538      	push	{r3, r4, r5, lr}
 800744e:	4d07      	ldr	r5, [pc, #28]	; (800746c <_read_r+0x20>)
 8007450:	4604      	mov	r4, r0
 8007452:	4608      	mov	r0, r1
 8007454:	4611      	mov	r1, r2
 8007456:	2200      	movs	r2, #0
 8007458:	602a      	str	r2, [r5, #0]
 800745a:	461a      	mov	r2, r3
 800745c:	f7fc f8fc 	bl	8003658 <_read>
 8007460:	1c43      	adds	r3, r0, #1
 8007462:	d102      	bne.n	800746a <_read_r+0x1e>
 8007464:	682b      	ldr	r3, [r5, #0]
 8007466:	b103      	cbz	r3, 800746a <_read_r+0x1e>
 8007468:	6023      	str	r3, [r4, #0]
 800746a:	bd38      	pop	{r3, r4, r5, pc}
 800746c:	20005004 	.word	0x20005004

08007470 <_write_r>:
 8007470:	b538      	push	{r3, r4, r5, lr}
 8007472:	4d07      	ldr	r5, [pc, #28]	; (8007490 <_write_r+0x20>)
 8007474:	4604      	mov	r4, r0
 8007476:	4608      	mov	r0, r1
 8007478:	4611      	mov	r1, r2
 800747a:	2200      	movs	r2, #0
 800747c:	602a      	str	r2, [r5, #0]
 800747e:	461a      	mov	r2, r3
 8007480:	f7fc f8e0 	bl	8003644 <_write>
 8007484:	1c43      	adds	r3, r0, #1
 8007486:	d102      	bne.n	800748e <_write_r+0x1e>
 8007488:	682b      	ldr	r3, [r5, #0]
 800748a:	b103      	cbz	r3, 800748e <_write_r+0x1e>
 800748c:	6023      	str	r3, [r4, #0]
 800748e:	bd38      	pop	{r3, r4, r5, pc}
 8007490:	20005004 	.word	0x20005004

08007494 <__libc_init_array>:
 8007494:	b570      	push	{r4, r5, r6, lr}
 8007496:	4d0d      	ldr	r5, [pc, #52]	; (80074cc <__libc_init_array+0x38>)
 8007498:	4c0d      	ldr	r4, [pc, #52]	; (80074d0 <__libc_init_array+0x3c>)
 800749a:	1b64      	subs	r4, r4, r5
 800749c:	10a4      	asrs	r4, r4, #2
 800749e:	2600      	movs	r6, #0
 80074a0:	42a6      	cmp	r6, r4
 80074a2:	d109      	bne.n	80074b8 <__libc_init_array+0x24>
 80074a4:	4d0b      	ldr	r5, [pc, #44]	; (80074d4 <__libc_init_array+0x40>)
 80074a6:	4c0c      	ldr	r4, [pc, #48]	; (80074d8 <__libc_init_array+0x44>)
 80074a8:	f000 ff96 	bl	80083d8 <_init>
 80074ac:	1b64      	subs	r4, r4, r5
 80074ae:	10a4      	asrs	r4, r4, #2
 80074b0:	2600      	movs	r6, #0
 80074b2:	42a6      	cmp	r6, r4
 80074b4:	d105      	bne.n	80074c2 <__libc_init_array+0x2e>
 80074b6:	bd70      	pop	{r4, r5, r6, pc}
 80074b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80074bc:	4798      	blx	r3
 80074be:	3601      	adds	r6, #1
 80074c0:	e7ee      	b.n	80074a0 <__libc_init_array+0xc>
 80074c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80074c6:	4798      	blx	r3
 80074c8:	3601      	adds	r6, #1
 80074ca:	e7f2      	b.n	80074b2 <__libc_init_array+0x1e>
 80074cc:	0800a094 	.word	0x0800a094
 80074d0:	0800a094 	.word	0x0800a094
 80074d4:	0800a094 	.word	0x0800a094
 80074d8:	0800a098 	.word	0x0800a098

080074dc <__retarget_lock_init_recursive>:
 80074dc:	4770      	bx	lr

080074de <__retarget_lock_acquire_recursive>:
 80074de:	4770      	bx	lr

080074e0 <__retarget_lock_release_recursive>:
 80074e0:	4770      	bx	lr

080074e2 <memcpy>:
 80074e2:	440a      	add	r2, r1
 80074e4:	4291      	cmp	r1, r2
 80074e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80074ea:	d100      	bne.n	80074ee <memcpy+0xc>
 80074ec:	4770      	bx	lr
 80074ee:	b510      	push	{r4, lr}
 80074f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074f8:	4291      	cmp	r1, r2
 80074fa:	d1f9      	bne.n	80074f0 <memcpy+0xe>
 80074fc:	bd10      	pop	{r4, pc}
	...

08007500 <_free_r>:
 8007500:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007502:	2900      	cmp	r1, #0
 8007504:	d044      	beq.n	8007590 <_free_r+0x90>
 8007506:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800750a:	9001      	str	r0, [sp, #4]
 800750c:	2b00      	cmp	r3, #0
 800750e:	f1a1 0404 	sub.w	r4, r1, #4
 8007512:	bfb8      	it	lt
 8007514:	18e4      	addlt	r4, r4, r3
 8007516:	f000 f8e7 	bl	80076e8 <__malloc_lock>
 800751a:	4a1e      	ldr	r2, [pc, #120]	; (8007594 <_free_r+0x94>)
 800751c:	9801      	ldr	r0, [sp, #4]
 800751e:	6813      	ldr	r3, [r2, #0]
 8007520:	b933      	cbnz	r3, 8007530 <_free_r+0x30>
 8007522:	6063      	str	r3, [r4, #4]
 8007524:	6014      	str	r4, [r2, #0]
 8007526:	b003      	add	sp, #12
 8007528:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800752c:	f000 b8e2 	b.w	80076f4 <__malloc_unlock>
 8007530:	42a3      	cmp	r3, r4
 8007532:	d908      	bls.n	8007546 <_free_r+0x46>
 8007534:	6825      	ldr	r5, [r4, #0]
 8007536:	1961      	adds	r1, r4, r5
 8007538:	428b      	cmp	r3, r1
 800753a:	bf01      	itttt	eq
 800753c:	6819      	ldreq	r1, [r3, #0]
 800753e:	685b      	ldreq	r3, [r3, #4]
 8007540:	1949      	addeq	r1, r1, r5
 8007542:	6021      	streq	r1, [r4, #0]
 8007544:	e7ed      	b.n	8007522 <_free_r+0x22>
 8007546:	461a      	mov	r2, r3
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	b10b      	cbz	r3, 8007550 <_free_r+0x50>
 800754c:	42a3      	cmp	r3, r4
 800754e:	d9fa      	bls.n	8007546 <_free_r+0x46>
 8007550:	6811      	ldr	r1, [r2, #0]
 8007552:	1855      	adds	r5, r2, r1
 8007554:	42a5      	cmp	r5, r4
 8007556:	d10b      	bne.n	8007570 <_free_r+0x70>
 8007558:	6824      	ldr	r4, [r4, #0]
 800755a:	4421      	add	r1, r4
 800755c:	1854      	adds	r4, r2, r1
 800755e:	42a3      	cmp	r3, r4
 8007560:	6011      	str	r1, [r2, #0]
 8007562:	d1e0      	bne.n	8007526 <_free_r+0x26>
 8007564:	681c      	ldr	r4, [r3, #0]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	6053      	str	r3, [r2, #4]
 800756a:	440c      	add	r4, r1
 800756c:	6014      	str	r4, [r2, #0]
 800756e:	e7da      	b.n	8007526 <_free_r+0x26>
 8007570:	d902      	bls.n	8007578 <_free_r+0x78>
 8007572:	230c      	movs	r3, #12
 8007574:	6003      	str	r3, [r0, #0]
 8007576:	e7d6      	b.n	8007526 <_free_r+0x26>
 8007578:	6825      	ldr	r5, [r4, #0]
 800757a:	1961      	adds	r1, r4, r5
 800757c:	428b      	cmp	r3, r1
 800757e:	bf04      	itt	eq
 8007580:	6819      	ldreq	r1, [r3, #0]
 8007582:	685b      	ldreq	r3, [r3, #4]
 8007584:	6063      	str	r3, [r4, #4]
 8007586:	bf04      	itt	eq
 8007588:	1949      	addeq	r1, r1, r5
 800758a:	6021      	streq	r1, [r4, #0]
 800758c:	6054      	str	r4, [r2, #4]
 800758e:	e7ca      	b.n	8007526 <_free_r+0x26>
 8007590:	b003      	add	sp, #12
 8007592:	bd30      	pop	{r4, r5, pc}
 8007594:	2000500c 	.word	0x2000500c

08007598 <malloc>:
 8007598:	4b02      	ldr	r3, [pc, #8]	; (80075a4 <malloc+0xc>)
 800759a:	4601      	mov	r1, r0
 800759c:	6818      	ldr	r0, [r3, #0]
 800759e:	f000 b823 	b.w	80075e8 <_malloc_r>
 80075a2:	bf00      	nop
 80075a4:	2000007c 	.word	0x2000007c

080075a8 <sbrk_aligned>:
 80075a8:	b570      	push	{r4, r5, r6, lr}
 80075aa:	4e0e      	ldr	r6, [pc, #56]	; (80075e4 <sbrk_aligned+0x3c>)
 80075ac:	460c      	mov	r4, r1
 80075ae:	6831      	ldr	r1, [r6, #0]
 80075b0:	4605      	mov	r5, r0
 80075b2:	b911      	cbnz	r1, 80075ba <sbrk_aligned+0x12>
 80075b4:	f000 feb2 	bl	800831c <_sbrk_r>
 80075b8:	6030      	str	r0, [r6, #0]
 80075ba:	4621      	mov	r1, r4
 80075bc:	4628      	mov	r0, r5
 80075be:	f000 fead 	bl	800831c <_sbrk_r>
 80075c2:	1c43      	adds	r3, r0, #1
 80075c4:	d00a      	beq.n	80075dc <sbrk_aligned+0x34>
 80075c6:	1cc4      	adds	r4, r0, #3
 80075c8:	f024 0403 	bic.w	r4, r4, #3
 80075cc:	42a0      	cmp	r0, r4
 80075ce:	d007      	beq.n	80075e0 <sbrk_aligned+0x38>
 80075d0:	1a21      	subs	r1, r4, r0
 80075d2:	4628      	mov	r0, r5
 80075d4:	f000 fea2 	bl	800831c <_sbrk_r>
 80075d8:	3001      	adds	r0, #1
 80075da:	d101      	bne.n	80075e0 <sbrk_aligned+0x38>
 80075dc:	f04f 34ff 	mov.w	r4, #4294967295
 80075e0:	4620      	mov	r0, r4
 80075e2:	bd70      	pop	{r4, r5, r6, pc}
 80075e4:	20005010 	.word	0x20005010

080075e8 <_malloc_r>:
 80075e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075ec:	1ccd      	adds	r5, r1, #3
 80075ee:	f025 0503 	bic.w	r5, r5, #3
 80075f2:	3508      	adds	r5, #8
 80075f4:	2d0c      	cmp	r5, #12
 80075f6:	bf38      	it	cc
 80075f8:	250c      	movcc	r5, #12
 80075fa:	2d00      	cmp	r5, #0
 80075fc:	4607      	mov	r7, r0
 80075fe:	db01      	blt.n	8007604 <_malloc_r+0x1c>
 8007600:	42a9      	cmp	r1, r5
 8007602:	d905      	bls.n	8007610 <_malloc_r+0x28>
 8007604:	230c      	movs	r3, #12
 8007606:	603b      	str	r3, [r7, #0]
 8007608:	2600      	movs	r6, #0
 800760a:	4630      	mov	r0, r6
 800760c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007610:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80076e4 <_malloc_r+0xfc>
 8007614:	f000 f868 	bl	80076e8 <__malloc_lock>
 8007618:	f8d8 3000 	ldr.w	r3, [r8]
 800761c:	461c      	mov	r4, r3
 800761e:	bb5c      	cbnz	r4, 8007678 <_malloc_r+0x90>
 8007620:	4629      	mov	r1, r5
 8007622:	4638      	mov	r0, r7
 8007624:	f7ff ffc0 	bl	80075a8 <sbrk_aligned>
 8007628:	1c43      	adds	r3, r0, #1
 800762a:	4604      	mov	r4, r0
 800762c:	d155      	bne.n	80076da <_malloc_r+0xf2>
 800762e:	f8d8 4000 	ldr.w	r4, [r8]
 8007632:	4626      	mov	r6, r4
 8007634:	2e00      	cmp	r6, #0
 8007636:	d145      	bne.n	80076c4 <_malloc_r+0xdc>
 8007638:	2c00      	cmp	r4, #0
 800763a:	d048      	beq.n	80076ce <_malloc_r+0xe6>
 800763c:	6823      	ldr	r3, [r4, #0]
 800763e:	4631      	mov	r1, r6
 8007640:	4638      	mov	r0, r7
 8007642:	eb04 0903 	add.w	r9, r4, r3
 8007646:	f000 fe69 	bl	800831c <_sbrk_r>
 800764a:	4581      	cmp	r9, r0
 800764c:	d13f      	bne.n	80076ce <_malloc_r+0xe6>
 800764e:	6821      	ldr	r1, [r4, #0]
 8007650:	1a6d      	subs	r5, r5, r1
 8007652:	4629      	mov	r1, r5
 8007654:	4638      	mov	r0, r7
 8007656:	f7ff ffa7 	bl	80075a8 <sbrk_aligned>
 800765a:	3001      	adds	r0, #1
 800765c:	d037      	beq.n	80076ce <_malloc_r+0xe6>
 800765e:	6823      	ldr	r3, [r4, #0]
 8007660:	442b      	add	r3, r5
 8007662:	6023      	str	r3, [r4, #0]
 8007664:	f8d8 3000 	ldr.w	r3, [r8]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d038      	beq.n	80076de <_malloc_r+0xf6>
 800766c:	685a      	ldr	r2, [r3, #4]
 800766e:	42a2      	cmp	r2, r4
 8007670:	d12b      	bne.n	80076ca <_malloc_r+0xe2>
 8007672:	2200      	movs	r2, #0
 8007674:	605a      	str	r2, [r3, #4]
 8007676:	e00f      	b.n	8007698 <_malloc_r+0xb0>
 8007678:	6822      	ldr	r2, [r4, #0]
 800767a:	1b52      	subs	r2, r2, r5
 800767c:	d41f      	bmi.n	80076be <_malloc_r+0xd6>
 800767e:	2a0b      	cmp	r2, #11
 8007680:	d917      	bls.n	80076b2 <_malloc_r+0xca>
 8007682:	1961      	adds	r1, r4, r5
 8007684:	42a3      	cmp	r3, r4
 8007686:	6025      	str	r5, [r4, #0]
 8007688:	bf18      	it	ne
 800768a:	6059      	strne	r1, [r3, #4]
 800768c:	6863      	ldr	r3, [r4, #4]
 800768e:	bf08      	it	eq
 8007690:	f8c8 1000 	streq.w	r1, [r8]
 8007694:	5162      	str	r2, [r4, r5]
 8007696:	604b      	str	r3, [r1, #4]
 8007698:	4638      	mov	r0, r7
 800769a:	f104 060b 	add.w	r6, r4, #11
 800769e:	f000 f829 	bl	80076f4 <__malloc_unlock>
 80076a2:	f026 0607 	bic.w	r6, r6, #7
 80076a6:	1d23      	adds	r3, r4, #4
 80076a8:	1af2      	subs	r2, r6, r3
 80076aa:	d0ae      	beq.n	800760a <_malloc_r+0x22>
 80076ac:	1b9b      	subs	r3, r3, r6
 80076ae:	50a3      	str	r3, [r4, r2]
 80076b0:	e7ab      	b.n	800760a <_malloc_r+0x22>
 80076b2:	42a3      	cmp	r3, r4
 80076b4:	6862      	ldr	r2, [r4, #4]
 80076b6:	d1dd      	bne.n	8007674 <_malloc_r+0x8c>
 80076b8:	f8c8 2000 	str.w	r2, [r8]
 80076bc:	e7ec      	b.n	8007698 <_malloc_r+0xb0>
 80076be:	4623      	mov	r3, r4
 80076c0:	6864      	ldr	r4, [r4, #4]
 80076c2:	e7ac      	b.n	800761e <_malloc_r+0x36>
 80076c4:	4634      	mov	r4, r6
 80076c6:	6876      	ldr	r6, [r6, #4]
 80076c8:	e7b4      	b.n	8007634 <_malloc_r+0x4c>
 80076ca:	4613      	mov	r3, r2
 80076cc:	e7cc      	b.n	8007668 <_malloc_r+0x80>
 80076ce:	230c      	movs	r3, #12
 80076d0:	603b      	str	r3, [r7, #0]
 80076d2:	4638      	mov	r0, r7
 80076d4:	f000 f80e 	bl	80076f4 <__malloc_unlock>
 80076d8:	e797      	b.n	800760a <_malloc_r+0x22>
 80076da:	6025      	str	r5, [r4, #0]
 80076dc:	e7dc      	b.n	8007698 <_malloc_r+0xb0>
 80076de:	605b      	str	r3, [r3, #4]
 80076e0:	deff      	udf	#255	; 0xff
 80076e2:	bf00      	nop
 80076e4:	2000500c 	.word	0x2000500c

080076e8 <__malloc_lock>:
 80076e8:	4801      	ldr	r0, [pc, #4]	; (80076f0 <__malloc_lock+0x8>)
 80076ea:	f7ff bef8 	b.w	80074de <__retarget_lock_acquire_recursive>
 80076ee:	bf00      	nop
 80076f0:	20005008 	.word	0x20005008

080076f4 <__malloc_unlock>:
 80076f4:	4801      	ldr	r0, [pc, #4]	; (80076fc <__malloc_unlock+0x8>)
 80076f6:	f7ff bef3 	b.w	80074e0 <__retarget_lock_release_recursive>
 80076fa:	bf00      	nop
 80076fc:	20005008 	.word	0x20005008

08007700 <__ssputs_r>:
 8007700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007704:	688e      	ldr	r6, [r1, #8]
 8007706:	461f      	mov	r7, r3
 8007708:	42be      	cmp	r6, r7
 800770a:	680b      	ldr	r3, [r1, #0]
 800770c:	4682      	mov	sl, r0
 800770e:	460c      	mov	r4, r1
 8007710:	4690      	mov	r8, r2
 8007712:	d82c      	bhi.n	800776e <__ssputs_r+0x6e>
 8007714:	898a      	ldrh	r2, [r1, #12]
 8007716:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800771a:	d026      	beq.n	800776a <__ssputs_r+0x6a>
 800771c:	6965      	ldr	r5, [r4, #20]
 800771e:	6909      	ldr	r1, [r1, #16]
 8007720:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007724:	eba3 0901 	sub.w	r9, r3, r1
 8007728:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800772c:	1c7b      	adds	r3, r7, #1
 800772e:	444b      	add	r3, r9
 8007730:	106d      	asrs	r5, r5, #1
 8007732:	429d      	cmp	r5, r3
 8007734:	bf38      	it	cc
 8007736:	461d      	movcc	r5, r3
 8007738:	0553      	lsls	r3, r2, #21
 800773a:	d527      	bpl.n	800778c <__ssputs_r+0x8c>
 800773c:	4629      	mov	r1, r5
 800773e:	f7ff ff53 	bl	80075e8 <_malloc_r>
 8007742:	4606      	mov	r6, r0
 8007744:	b360      	cbz	r0, 80077a0 <__ssputs_r+0xa0>
 8007746:	6921      	ldr	r1, [r4, #16]
 8007748:	464a      	mov	r2, r9
 800774a:	f7ff feca 	bl	80074e2 <memcpy>
 800774e:	89a3      	ldrh	r3, [r4, #12]
 8007750:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007758:	81a3      	strh	r3, [r4, #12]
 800775a:	6126      	str	r6, [r4, #16]
 800775c:	6165      	str	r5, [r4, #20]
 800775e:	444e      	add	r6, r9
 8007760:	eba5 0509 	sub.w	r5, r5, r9
 8007764:	6026      	str	r6, [r4, #0]
 8007766:	60a5      	str	r5, [r4, #8]
 8007768:	463e      	mov	r6, r7
 800776a:	42be      	cmp	r6, r7
 800776c:	d900      	bls.n	8007770 <__ssputs_r+0x70>
 800776e:	463e      	mov	r6, r7
 8007770:	6820      	ldr	r0, [r4, #0]
 8007772:	4632      	mov	r2, r6
 8007774:	4641      	mov	r1, r8
 8007776:	f000 fd95 	bl	80082a4 <memmove>
 800777a:	68a3      	ldr	r3, [r4, #8]
 800777c:	1b9b      	subs	r3, r3, r6
 800777e:	60a3      	str	r3, [r4, #8]
 8007780:	6823      	ldr	r3, [r4, #0]
 8007782:	4433      	add	r3, r6
 8007784:	6023      	str	r3, [r4, #0]
 8007786:	2000      	movs	r0, #0
 8007788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800778c:	462a      	mov	r2, r5
 800778e:	f000 fdd5 	bl	800833c <_realloc_r>
 8007792:	4606      	mov	r6, r0
 8007794:	2800      	cmp	r0, #0
 8007796:	d1e0      	bne.n	800775a <__ssputs_r+0x5a>
 8007798:	6921      	ldr	r1, [r4, #16]
 800779a:	4650      	mov	r0, sl
 800779c:	f7ff feb0 	bl	8007500 <_free_r>
 80077a0:	230c      	movs	r3, #12
 80077a2:	f8ca 3000 	str.w	r3, [sl]
 80077a6:	89a3      	ldrh	r3, [r4, #12]
 80077a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077ac:	81a3      	strh	r3, [r4, #12]
 80077ae:	f04f 30ff 	mov.w	r0, #4294967295
 80077b2:	e7e9      	b.n	8007788 <__ssputs_r+0x88>

080077b4 <_svfiprintf_r>:
 80077b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077b8:	4698      	mov	r8, r3
 80077ba:	898b      	ldrh	r3, [r1, #12]
 80077bc:	061b      	lsls	r3, r3, #24
 80077be:	b09d      	sub	sp, #116	; 0x74
 80077c0:	4607      	mov	r7, r0
 80077c2:	460d      	mov	r5, r1
 80077c4:	4614      	mov	r4, r2
 80077c6:	d50e      	bpl.n	80077e6 <_svfiprintf_r+0x32>
 80077c8:	690b      	ldr	r3, [r1, #16]
 80077ca:	b963      	cbnz	r3, 80077e6 <_svfiprintf_r+0x32>
 80077cc:	2140      	movs	r1, #64	; 0x40
 80077ce:	f7ff ff0b 	bl	80075e8 <_malloc_r>
 80077d2:	6028      	str	r0, [r5, #0]
 80077d4:	6128      	str	r0, [r5, #16]
 80077d6:	b920      	cbnz	r0, 80077e2 <_svfiprintf_r+0x2e>
 80077d8:	230c      	movs	r3, #12
 80077da:	603b      	str	r3, [r7, #0]
 80077dc:	f04f 30ff 	mov.w	r0, #4294967295
 80077e0:	e0d0      	b.n	8007984 <_svfiprintf_r+0x1d0>
 80077e2:	2340      	movs	r3, #64	; 0x40
 80077e4:	616b      	str	r3, [r5, #20]
 80077e6:	2300      	movs	r3, #0
 80077e8:	9309      	str	r3, [sp, #36]	; 0x24
 80077ea:	2320      	movs	r3, #32
 80077ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80077f4:	2330      	movs	r3, #48	; 0x30
 80077f6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800799c <_svfiprintf_r+0x1e8>
 80077fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077fe:	f04f 0901 	mov.w	r9, #1
 8007802:	4623      	mov	r3, r4
 8007804:	469a      	mov	sl, r3
 8007806:	f813 2b01 	ldrb.w	r2, [r3], #1
 800780a:	b10a      	cbz	r2, 8007810 <_svfiprintf_r+0x5c>
 800780c:	2a25      	cmp	r2, #37	; 0x25
 800780e:	d1f9      	bne.n	8007804 <_svfiprintf_r+0x50>
 8007810:	ebba 0b04 	subs.w	fp, sl, r4
 8007814:	d00b      	beq.n	800782e <_svfiprintf_r+0x7a>
 8007816:	465b      	mov	r3, fp
 8007818:	4622      	mov	r2, r4
 800781a:	4629      	mov	r1, r5
 800781c:	4638      	mov	r0, r7
 800781e:	f7ff ff6f 	bl	8007700 <__ssputs_r>
 8007822:	3001      	adds	r0, #1
 8007824:	f000 80a9 	beq.w	800797a <_svfiprintf_r+0x1c6>
 8007828:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800782a:	445a      	add	r2, fp
 800782c:	9209      	str	r2, [sp, #36]	; 0x24
 800782e:	f89a 3000 	ldrb.w	r3, [sl]
 8007832:	2b00      	cmp	r3, #0
 8007834:	f000 80a1 	beq.w	800797a <_svfiprintf_r+0x1c6>
 8007838:	2300      	movs	r3, #0
 800783a:	f04f 32ff 	mov.w	r2, #4294967295
 800783e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007842:	f10a 0a01 	add.w	sl, sl, #1
 8007846:	9304      	str	r3, [sp, #16]
 8007848:	9307      	str	r3, [sp, #28]
 800784a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800784e:	931a      	str	r3, [sp, #104]	; 0x68
 8007850:	4654      	mov	r4, sl
 8007852:	2205      	movs	r2, #5
 8007854:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007858:	4850      	ldr	r0, [pc, #320]	; (800799c <_svfiprintf_r+0x1e8>)
 800785a:	f7f8 fcf9 	bl	8000250 <memchr>
 800785e:	9a04      	ldr	r2, [sp, #16]
 8007860:	b9d8      	cbnz	r0, 800789a <_svfiprintf_r+0xe6>
 8007862:	06d0      	lsls	r0, r2, #27
 8007864:	bf44      	itt	mi
 8007866:	2320      	movmi	r3, #32
 8007868:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800786c:	0711      	lsls	r1, r2, #28
 800786e:	bf44      	itt	mi
 8007870:	232b      	movmi	r3, #43	; 0x2b
 8007872:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007876:	f89a 3000 	ldrb.w	r3, [sl]
 800787a:	2b2a      	cmp	r3, #42	; 0x2a
 800787c:	d015      	beq.n	80078aa <_svfiprintf_r+0xf6>
 800787e:	9a07      	ldr	r2, [sp, #28]
 8007880:	4654      	mov	r4, sl
 8007882:	2000      	movs	r0, #0
 8007884:	f04f 0c0a 	mov.w	ip, #10
 8007888:	4621      	mov	r1, r4
 800788a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800788e:	3b30      	subs	r3, #48	; 0x30
 8007890:	2b09      	cmp	r3, #9
 8007892:	d94d      	bls.n	8007930 <_svfiprintf_r+0x17c>
 8007894:	b1b0      	cbz	r0, 80078c4 <_svfiprintf_r+0x110>
 8007896:	9207      	str	r2, [sp, #28]
 8007898:	e014      	b.n	80078c4 <_svfiprintf_r+0x110>
 800789a:	eba0 0308 	sub.w	r3, r0, r8
 800789e:	fa09 f303 	lsl.w	r3, r9, r3
 80078a2:	4313      	orrs	r3, r2
 80078a4:	9304      	str	r3, [sp, #16]
 80078a6:	46a2      	mov	sl, r4
 80078a8:	e7d2      	b.n	8007850 <_svfiprintf_r+0x9c>
 80078aa:	9b03      	ldr	r3, [sp, #12]
 80078ac:	1d19      	adds	r1, r3, #4
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	9103      	str	r1, [sp, #12]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	bfbb      	ittet	lt
 80078b6:	425b      	neglt	r3, r3
 80078b8:	f042 0202 	orrlt.w	r2, r2, #2
 80078bc:	9307      	strge	r3, [sp, #28]
 80078be:	9307      	strlt	r3, [sp, #28]
 80078c0:	bfb8      	it	lt
 80078c2:	9204      	strlt	r2, [sp, #16]
 80078c4:	7823      	ldrb	r3, [r4, #0]
 80078c6:	2b2e      	cmp	r3, #46	; 0x2e
 80078c8:	d10c      	bne.n	80078e4 <_svfiprintf_r+0x130>
 80078ca:	7863      	ldrb	r3, [r4, #1]
 80078cc:	2b2a      	cmp	r3, #42	; 0x2a
 80078ce:	d134      	bne.n	800793a <_svfiprintf_r+0x186>
 80078d0:	9b03      	ldr	r3, [sp, #12]
 80078d2:	1d1a      	adds	r2, r3, #4
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	9203      	str	r2, [sp, #12]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	bfb8      	it	lt
 80078dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80078e0:	3402      	adds	r4, #2
 80078e2:	9305      	str	r3, [sp, #20]
 80078e4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80079ac <_svfiprintf_r+0x1f8>
 80078e8:	7821      	ldrb	r1, [r4, #0]
 80078ea:	2203      	movs	r2, #3
 80078ec:	4650      	mov	r0, sl
 80078ee:	f7f8 fcaf 	bl	8000250 <memchr>
 80078f2:	b138      	cbz	r0, 8007904 <_svfiprintf_r+0x150>
 80078f4:	9b04      	ldr	r3, [sp, #16]
 80078f6:	eba0 000a 	sub.w	r0, r0, sl
 80078fa:	2240      	movs	r2, #64	; 0x40
 80078fc:	4082      	lsls	r2, r0
 80078fe:	4313      	orrs	r3, r2
 8007900:	3401      	adds	r4, #1
 8007902:	9304      	str	r3, [sp, #16]
 8007904:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007908:	4825      	ldr	r0, [pc, #148]	; (80079a0 <_svfiprintf_r+0x1ec>)
 800790a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800790e:	2206      	movs	r2, #6
 8007910:	f7f8 fc9e 	bl	8000250 <memchr>
 8007914:	2800      	cmp	r0, #0
 8007916:	d038      	beq.n	800798a <_svfiprintf_r+0x1d6>
 8007918:	4b22      	ldr	r3, [pc, #136]	; (80079a4 <_svfiprintf_r+0x1f0>)
 800791a:	bb1b      	cbnz	r3, 8007964 <_svfiprintf_r+0x1b0>
 800791c:	9b03      	ldr	r3, [sp, #12]
 800791e:	3307      	adds	r3, #7
 8007920:	f023 0307 	bic.w	r3, r3, #7
 8007924:	3308      	adds	r3, #8
 8007926:	9303      	str	r3, [sp, #12]
 8007928:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800792a:	4433      	add	r3, r6
 800792c:	9309      	str	r3, [sp, #36]	; 0x24
 800792e:	e768      	b.n	8007802 <_svfiprintf_r+0x4e>
 8007930:	fb0c 3202 	mla	r2, ip, r2, r3
 8007934:	460c      	mov	r4, r1
 8007936:	2001      	movs	r0, #1
 8007938:	e7a6      	b.n	8007888 <_svfiprintf_r+0xd4>
 800793a:	2300      	movs	r3, #0
 800793c:	3401      	adds	r4, #1
 800793e:	9305      	str	r3, [sp, #20]
 8007940:	4619      	mov	r1, r3
 8007942:	f04f 0c0a 	mov.w	ip, #10
 8007946:	4620      	mov	r0, r4
 8007948:	f810 2b01 	ldrb.w	r2, [r0], #1
 800794c:	3a30      	subs	r2, #48	; 0x30
 800794e:	2a09      	cmp	r2, #9
 8007950:	d903      	bls.n	800795a <_svfiprintf_r+0x1a6>
 8007952:	2b00      	cmp	r3, #0
 8007954:	d0c6      	beq.n	80078e4 <_svfiprintf_r+0x130>
 8007956:	9105      	str	r1, [sp, #20]
 8007958:	e7c4      	b.n	80078e4 <_svfiprintf_r+0x130>
 800795a:	fb0c 2101 	mla	r1, ip, r1, r2
 800795e:	4604      	mov	r4, r0
 8007960:	2301      	movs	r3, #1
 8007962:	e7f0      	b.n	8007946 <_svfiprintf_r+0x192>
 8007964:	ab03      	add	r3, sp, #12
 8007966:	9300      	str	r3, [sp, #0]
 8007968:	462a      	mov	r2, r5
 800796a:	4b0f      	ldr	r3, [pc, #60]	; (80079a8 <_svfiprintf_r+0x1f4>)
 800796c:	a904      	add	r1, sp, #16
 800796e:	4638      	mov	r0, r7
 8007970:	f3af 8000 	nop.w
 8007974:	1c42      	adds	r2, r0, #1
 8007976:	4606      	mov	r6, r0
 8007978:	d1d6      	bne.n	8007928 <_svfiprintf_r+0x174>
 800797a:	89ab      	ldrh	r3, [r5, #12]
 800797c:	065b      	lsls	r3, r3, #25
 800797e:	f53f af2d 	bmi.w	80077dc <_svfiprintf_r+0x28>
 8007982:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007984:	b01d      	add	sp, #116	; 0x74
 8007986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800798a:	ab03      	add	r3, sp, #12
 800798c:	9300      	str	r3, [sp, #0]
 800798e:	462a      	mov	r2, r5
 8007990:	4b05      	ldr	r3, [pc, #20]	; (80079a8 <_svfiprintf_r+0x1f4>)
 8007992:	a904      	add	r1, sp, #16
 8007994:	4638      	mov	r0, r7
 8007996:	f000 f9bd 	bl	8007d14 <_printf_i>
 800799a:	e7eb      	b.n	8007974 <_svfiprintf_r+0x1c0>
 800799c:	0800a059 	.word	0x0800a059
 80079a0:	0800a063 	.word	0x0800a063
 80079a4:	00000000 	.word	0x00000000
 80079a8:	08007701 	.word	0x08007701
 80079ac:	0800a05f 	.word	0x0800a05f

080079b0 <__sfputc_r>:
 80079b0:	6893      	ldr	r3, [r2, #8]
 80079b2:	3b01      	subs	r3, #1
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	b410      	push	{r4}
 80079b8:	6093      	str	r3, [r2, #8]
 80079ba:	da08      	bge.n	80079ce <__sfputc_r+0x1e>
 80079bc:	6994      	ldr	r4, [r2, #24]
 80079be:	42a3      	cmp	r3, r4
 80079c0:	db01      	blt.n	80079c6 <__sfputc_r+0x16>
 80079c2:	290a      	cmp	r1, #10
 80079c4:	d103      	bne.n	80079ce <__sfputc_r+0x1e>
 80079c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079ca:	f000 bbd5 	b.w	8008178 <__swbuf_r>
 80079ce:	6813      	ldr	r3, [r2, #0]
 80079d0:	1c58      	adds	r0, r3, #1
 80079d2:	6010      	str	r0, [r2, #0]
 80079d4:	7019      	strb	r1, [r3, #0]
 80079d6:	4608      	mov	r0, r1
 80079d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079dc:	4770      	bx	lr

080079de <__sfputs_r>:
 80079de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079e0:	4606      	mov	r6, r0
 80079e2:	460f      	mov	r7, r1
 80079e4:	4614      	mov	r4, r2
 80079e6:	18d5      	adds	r5, r2, r3
 80079e8:	42ac      	cmp	r4, r5
 80079ea:	d101      	bne.n	80079f0 <__sfputs_r+0x12>
 80079ec:	2000      	movs	r0, #0
 80079ee:	e007      	b.n	8007a00 <__sfputs_r+0x22>
 80079f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079f4:	463a      	mov	r2, r7
 80079f6:	4630      	mov	r0, r6
 80079f8:	f7ff ffda 	bl	80079b0 <__sfputc_r>
 80079fc:	1c43      	adds	r3, r0, #1
 80079fe:	d1f3      	bne.n	80079e8 <__sfputs_r+0xa>
 8007a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007a04 <_vfiprintf_r>:
 8007a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a08:	460d      	mov	r5, r1
 8007a0a:	b09d      	sub	sp, #116	; 0x74
 8007a0c:	4614      	mov	r4, r2
 8007a0e:	4698      	mov	r8, r3
 8007a10:	4606      	mov	r6, r0
 8007a12:	b118      	cbz	r0, 8007a1c <_vfiprintf_r+0x18>
 8007a14:	6a03      	ldr	r3, [r0, #32]
 8007a16:	b90b      	cbnz	r3, 8007a1c <_vfiprintf_r+0x18>
 8007a18:	f7ff fb8c 	bl	8007134 <__sinit>
 8007a1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a1e:	07d9      	lsls	r1, r3, #31
 8007a20:	d405      	bmi.n	8007a2e <_vfiprintf_r+0x2a>
 8007a22:	89ab      	ldrh	r3, [r5, #12]
 8007a24:	059a      	lsls	r2, r3, #22
 8007a26:	d402      	bmi.n	8007a2e <_vfiprintf_r+0x2a>
 8007a28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a2a:	f7ff fd58 	bl	80074de <__retarget_lock_acquire_recursive>
 8007a2e:	89ab      	ldrh	r3, [r5, #12]
 8007a30:	071b      	lsls	r3, r3, #28
 8007a32:	d501      	bpl.n	8007a38 <_vfiprintf_r+0x34>
 8007a34:	692b      	ldr	r3, [r5, #16]
 8007a36:	b99b      	cbnz	r3, 8007a60 <_vfiprintf_r+0x5c>
 8007a38:	4629      	mov	r1, r5
 8007a3a:	4630      	mov	r0, r6
 8007a3c:	f000 fbda 	bl	80081f4 <__swsetup_r>
 8007a40:	b170      	cbz	r0, 8007a60 <_vfiprintf_r+0x5c>
 8007a42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a44:	07dc      	lsls	r4, r3, #31
 8007a46:	d504      	bpl.n	8007a52 <_vfiprintf_r+0x4e>
 8007a48:	f04f 30ff 	mov.w	r0, #4294967295
 8007a4c:	b01d      	add	sp, #116	; 0x74
 8007a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a52:	89ab      	ldrh	r3, [r5, #12]
 8007a54:	0598      	lsls	r0, r3, #22
 8007a56:	d4f7      	bmi.n	8007a48 <_vfiprintf_r+0x44>
 8007a58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a5a:	f7ff fd41 	bl	80074e0 <__retarget_lock_release_recursive>
 8007a5e:	e7f3      	b.n	8007a48 <_vfiprintf_r+0x44>
 8007a60:	2300      	movs	r3, #0
 8007a62:	9309      	str	r3, [sp, #36]	; 0x24
 8007a64:	2320      	movs	r3, #32
 8007a66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a6e:	2330      	movs	r3, #48	; 0x30
 8007a70:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007c24 <_vfiprintf_r+0x220>
 8007a74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a78:	f04f 0901 	mov.w	r9, #1
 8007a7c:	4623      	mov	r3, r4
 8007a7e:	469a      	mov	sl, r3
 8007a80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a84:	b10a      	cbz	r2, 8007a8a <_vfiprintf_r+0x86>
 8007a86:	2a25      	cmp	r2, #37	; 0x25
 8007a88:	d1f9      	bne.n	8007a7e <_vfiprintf_r+0x7a>
 8007a8a:	ebba 0b04 	subs.w	fp, sl, r4
 8007a8e:	d00b      	beq.n	8007aa8 <_vfiprintf_r+0xa4>
 8007a90:	465b      	mov	r3, fp
 8007a92:	4622      	mov	r2, r4
 8007a94:	4629      	mov	r1, r5
 8007a96:	4630      	mov	r0, r6
 8007a98:	f7ff ffa1 	bl	80079de <__sfputs_r>
 8007a9c:	3001      	adds	r0, #1
 8007a9e:	f000 80a9 	beq.w	8007bf4 <_vfiprintf_r+0x1f0>
 8007aa2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007aa4:	445a      	add	r2, fp
 8007aa6:	9209      	str	r2, [sp, #36]	; 0x24
 8007aa8:	f89a 3000 	ldrb.w	r3, [sl]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	f000 80a1 	beq.w	8007bf4 <_vfiprintf_r+0x1f0>
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ab8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007abc:	f10a 0a01 	add.w	sl, sl, #1
 8007ac0:	9304      	str	r3, [sp, #16]
 8007ac2:	9307      	str	r3, [sp, #28]
 8007ac4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ac8:	931a      	str	r3, [sp, #104]	; 0x68
 8007aca:	4654      	mov	r4, sl
 8007acc:	2205      	movs	r2, #5
 8007ace:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ad2:	4854      	ldr	r0, [pc, #336]	; (8007c24 <_vfiprintf_r+0x220>)
 8007ad4:	f7f8 fbbc 	bl	8000250 <memchr>
 8007ad8:	9a04      	ldr	r2, [sp, #16]
 8007ada:	b9d8      	cbnz	r0, 8007b14 <_vfiprintf_r+0x110>
 8007adc:	06d1      	lsls	r1, r2, #27
 8007ade:	bf44      	itt	mi
 8007ae0:	2320      	movmi	r3, #32
 8007ae2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ae6:	0713      	lsls	r3, r2, #28
 8007ae8:	bf44      	itt	mi
 8007aea:	232b      	movmi	r3, #43	; 0x2b
 8007aec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007af0:	f89a 3000 	ldrb.w	r3, [sl]
 8007af4:	2b2a      	cmp	r3, #42	; 0x2a
 8007af6:	d015      	beq.n	8007b24 <_vfiprintf_r+0x120>
 8007af8:	9a07      	ldr	r2, [sp, #28]
 8007afa:	4654      	mov	r4, sl
 8007afc:	2000      	movs	r0, #0
 8007afe:	f04f 0c0a 	mov.w	ip, #10
 8007b02:	4621      	mov	r1, r4
 8007b04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b08:	3b30      	subs	r3, #48	; 0x30
 8007b0a:	2b09      	cmp	r3, #9
 8007b0c:	d94d      	bls.n	8007baa <_vfiprintf_r+0x1a6>
 8007b0e:	b1b0      	cbz	r0, 8007b3e <_vfiprintf_r+0x13a>
 8007b10:	9207      	str	r2, [sp, #28]
 8007b12:	e014      	b.n	8007b3e <_vfiprintf_r+0x13a>
 8007b14:	eba0 0308 	sub.w	r3, r0, r8
 8007b18:	fa09 f303 	lsl.w	r3, r9, r3
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	9304      	str	r3, [sp, #16]
 8007b20:	46a2      	mov	sl, r4
 8007b22:	e7d2      	b.n	8007aca <_vfiprintf_r+0xc6>
 8007b24:	9b03      	ldr	r3, [sp, #12]
 8007b26:	1d19      	adds	r1, r3, #4
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	9103      	str	r1, [sp, #12]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	bfbb      	ittet	lt
 8007b30:	425b      	neglt	r3, r3
 8007b32:	f042 0202 	orrlt.w	r2, r2, #2
 8007b36:	9307      	strge	r3, [sp, #28]
 8007b38:	9307      	strlt	r3, [sp, #28]
 8007b3a:	bfb8      	it	lt
 8007b3c:	9204      	strlt	r2, [sp, #16]
 8007b3e:	7823      	ldrb	r3, [r4, #0]
 8007b40:	2b2e      	cmp	r3, #46	; 0x2e
 8007b42:	d10c      	bne.n	8007b5e <_vfiprintf_r+0x15a>
 8007b44:	7863      	ldrb	r3, [r4, #1]
 8007b46:	2b2a      	cmp	r3, #42	; 0x2a
 8007b48:	d134      	bne.n	8007bb4 <_vfiprintf_r+0x1b0>
 8007b4a:	9b03      	ldr	r3, [sp, #12]
 8007b4c:	1d1a      	adds	r2, r3, #4
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	9203      	str	r2, [sp, #12]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	bfb8      	it	lt
 8007b56:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b5a:	3402      	adds	r4, #2
 8007b5c:	9305      	str	r3, [sp, #20]
 8007b5e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007c34 <_vfiprintf_r+0x230>
 8007b62:	7821      	ldrb	r1, [r4, #0]
 8007b64:	2203      	movs	r2, #3
 8007b66:	4650      	mov	r0, sl
 8007b68:	f7f8 fb72 	bl	8000250 <memchr>
 8007b6c:	b138      	cbz	r0, 8007b7e <_vfiprintf_r+0x17a>
 8007b6e:	9b04      	ldr	r3, [sp, #16]
 8007b70:	eba0 000a 	sub.w	r0, r0, sl
 8007b74:	2240      	movs	r2, #64	; 0x40
 8007b76:	4082      	lsls	r2, r0
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	3401      	adds	r4, #1
 8007b7c:	9304      	str	r3, [sp, #16]
 8007b7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b82:	4829      	ldr	r0, [pc, #164]	; (8007c28 <_vfiprintf_r+0x224>)
 8007b84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b88:	2206      	movs	r2, #6
 8007b8a:	f7f8 fb61 	bl	8000250 <memchr>
 8007b8e:	2800      	cmp	r0, #0
 8007b90:	d03f      	beq.n	8007c12 <_vfiprintf_r+0x20e>
 8007b92:	4b26      	ldr	r3, [pc, #152]	; (8007c2c <_vfiprintf_r+0x228>)
 8007b94:	bb1b      	cbnz	r3, 8007bde <_vfiprintf_r+0x1da>
 8007b96:	9b03      	ldr	r3, [sp, #12]
 8007b98:	3307      	adds	r3, #7
 8007b9a:	f023 0307 	bic.w	r3, r3, #7
 8007b9e:	3308      	adds	r3, #8
 8007ba0:	9303      	str	r3, [sp, #12]
 8007ba2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ba4:	443b      	add	r3, r7
 8007ba6:	9309      	str	r3, [sp, #36]	; 0x24
 8007ba8:	e768      	b.n	8007a7c <_vfiprintf_r+0x78>
 8007baa:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bae:	460c      	mov	r4, r1
 8007bb0:	2001      	movs	r0, #1
 8007bb2:	e7a6      	b.n	8007b02 <_vfiprintf_r+0xfe>
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	3401      	adds	r4, #1
 8007bb8:	9305      	str	r3, [sp, #20]
 8007bba:	4619      	mov	r1, r3
 8007bbc:	f04f 0c0a 	mov.w	ip, #10
 8007bc0:	4620      	mov	r0, r4
 8007bc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bc6:	3a30      	subs	r2, #48	; 0x30
 8007bc8:	2a09      	cmp	r2, #9
 8007bca:	d903      	bls.n	8007bd4 <_vfiprintf_r+0x1d0>
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d0c6      	beq.n	8007b5e <_vfiprintf_r+0x15a>
 8007bd0:	9105      	str	r1, [sp, #20]
 8007bd2:	e7c4      	b.n	8007b5e <_vfiprintf_r+0x15a>
 8007bd4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007bd8:	4604      	mov	r4, r0
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e7f0      	b.n	8007bc0 <_vfiprintf_r+0x1bc>
 8007bde:	ab03      	add	r3, sp, #12
 8007be0:	9300      	str	r3, [sp, #0]
 8007be2:	462a      	mov	r2, r5
 8007be4:	4b12      	ldr	r3, [pc, #72]	; (8007c30 <_vfiprintf_r+0x22c>)
 8007be6:	a904      	add	r1, sp, #16
 8007be8:	4630      	mov	r0, r6
 8007bea:	f3af 8000 	nop.w
 8007bee:	4607      	mov	r7, r0
 8007bf0:	1c78      	adds	r0, r7, #1
 8007bf2:	d1d6      	bne.n	8007ba2 <_vfiprintf_r+0x19e>
 8007bf4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007bf6:	07d9      	lsls	r1, r3, #31
 8007bf8:	d405      	bmi.n	8007c06 <_vfiprintf_r+0x202>
 8007bfa:	89ab      	ldrh	r3, [r5, #12]
 8007bfc:	059a      	lsls	r2, r3, #22
 8007bfe:	d402      	bmi.n	8007c06 <_vfiprintf_r+0x202>
 8007c00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c02:	f7ff fc6d 	bl	80074e0 <__retarget_lock_release_recursive>
 8007c06:	89ab      	ldrh	r3, [r5, #12]
 8007c08:	065b      	lsls	r3, r3, #25
 8007c0a:	f53f af1d 	bmi.w	8007a48 <_vfiprintf_r+0x44>
 8007c0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c10:	e71c      	b.n	8007a4c <_vfiprintf_r+0x48>
 8007c12:	ab03      	add	r3, sp, #12
 8007c14:	9300      	str	r3, [sp, #0]
 8007c16:	462a      	mov	r2, r5
 8007c18:	4b05      	ldr	r3, [pc, #20]	; (8007c30 <_vfiprintf_r+0x22c>)
 8007c1a:	a904      	add	r1, sp, #16
 8007c1c:	4630      	mov	r0, r6
 8007c1e:	f000 f879 	bl	8007d14 <_printf_i>
 8007c22:	e7e4      	b.n	8007bee <_vfiprintf_r+0x1ea>
 8007c24:	0800a059 	.word	0x0800a059
 8007c28:	0800a063 	.word	0x0800a063
 8007c2c:	00000000 	.word	0x00000000
 8007c30:	080079df 	.word	0x080079df
 8007c34:	0800a05f 	.word	0x0800a05f

08007c38 <_printf_common>:
 8007c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c3c:	4616      	mov	r6, r2
 8007c3e:	4699      	mov	r9, r3
 8007c40:	688a      	ldr	r2, [r1, #8]
 8007c42:	690b      	ldr	r3, [r1, #16]
 8007c44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	bfb8      	it	lt
 8007c4c:	4613      	movlt	r3, r2
 8007c4e:	6033      	str	r3, [r6, #0]
 8007c50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c54:	4607      	mov	r7, r0
 8007c56:	460c      	mov	r4, r1
 8007c58:	b10a      	cbz	r2, 8007c5e <_printf_common+0x26>
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	6033      	str	r3, [r6, #0]
 8007c5e:	6823      	ldr	r3, [r4, #0]
 8007c60:	0699      	lsls	r1, r3, #26
 8007c62:	bf42      	ittt	mi
 8007c64:	6833      	ldrmi	r3, [r6, #0]
 8007c66:	3302      	addmi	r3, #2
 8007c68:	6033      	strmi	r3, [r6, #0]
 8007c6a:	6825      	ldr	r5, [r4, #0]
 8007c6c:	f015 0506 	ands.w	r5, r5, #6
 8007c70:	d106      	bne.n	8007c80 <_printf_common+0x48>
 8007c72:	f104 0a19 	add.w	sl, r4, #25
 8007c76:	68e3      	ldr	r3, [r4, #12]
 8007c78:	6832      	ldr	r2, [r6, #0]
 8007c7a:	1a9b      	subs	r3, r3, r2
 8007c7c:	42ab      	cmp	r3, r5
 8007c7e:	dc26      	bgt.n	8007cce <_printf_common+0x96>
 8007c80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c84:	1e13      	subs	r3, r2, #0
 8007c86:	6822      	ldr	r2, [r4, #0]
 8007c88:	bf18      	it	ne
 8007c8a:	2301      	movne	r3, #1
 8007c8c:	0692      	lsls	r2, r2, #26
 8007c8e:	d42b      	bmi.n	8007ce8 <_printf_common+0xb0>
 8007c90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c94:	4649      	mov	r1, r9
 8007c96:	4638      	mov	r0, r7
 8007c98:	47c0      	blx	r8
 8007c9a:	3001      	adds	r0, #1
 8007c9c:	d01e      	beq.n	8007cdc <_printf_common+0xa4>
 8007c9e:	6823      	ldr	r3, [r4, #0]
 8007ca0:	6922      	ldr	r2, [r4, #16]
 8007ca2:	f003 0306 	and.w	r3, r3, #6
 8007ca6:	2b04      	cmp	r3, #4
 8007ca8:	bf02      	ittt	eq
 8007caa:	68e5      	ldreq	r5, [r4, #12]
 8007cac:	6833      	ldreq	r3, [r6, #0]
 8007cae:	1aed      	subeq	r5, r5, r3
 8007cb0:	68a3      	ldr	r3, [r4, #8]
 8007cb2:	bf0c      	ite	eq
 8007cb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007cb8:	2500      	movne	r5, #0
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	bfc4      	itt	gt
 8007cbe:	1a9b      	subgt	r3, r3, r2
 8007cc0:	18ed      	addgt	r5, r5, r3
 8007cc2:	2600      	movs	r6, #0
 8007cc4:	341a      	adds	r4, #26
 8007cc6:	42b5      	cmp	r5, r6
 8007cc8:	d11a      	bne.n	8007d00 <_printf_common+0xc8>
 8007cca:	2000      	movs	r0, #0
 8007ccc:	e008      	b.n	8007ce0 <_printf_common+0xa8>
 8007cce:	2301      	movs	r3, #1
 8007cd0:	4652      	mov	r2, sl
 8007cd2:	4649      	mov	r1, r9
 8007cd4:	4638      	mov	r0, r7
 8007cd6:	47c0      	blx	r8
 8007cd8:	3001      	adds	r0, #1
 8007cda:	d103      	bne.n	8007ce4 <_printf_common+0xac>
 8007cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ce4:	3501      	adds	r5, #1
 8007ce6:	e7c6      	b.n	8007c76 <_printf_common+0x3e>
 8007ce8:	18e1      	adds	r1, r4, r3
 8007cea:	1c5a      	adds	r2, r3, #1
 8007cec:	2030      	movs	r0, #48	; 0x30
 8007cee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007cf2:	4422      	add	r2, r4
 8007cf4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007cf8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007cfc:	3302      	adds	r3, #2
 8007cfe:	e7c7      	b.n	8007c90 <_printf_common+0x58>
 8007d00:	2301      	movs	r3, #1
 8007d02:	4622      	mov	r2, r4
 8007d04:	4649      	mov	r1, r9
 8007d06:	4638      	mov	r0, r7
 8007d08:	47c0      	blx	r8
 8007d0a:	3001      	adds	r0, #1
 8007d0c:	d0e6      	beq.n	8007cdc <_printf_common+0xa4>
 8007d0e:	3601      	adds	r6, #1
 8007d10:	e7d9      	b.n	8007cc6 <_printf_common+0x8e>
	...

08007d14 <_printf_i>:
 8007d14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d18:	7e0f      	ldrb	r7, [r1, #24]
 8007d1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007d1c:	2f78      	cmp	r7, #120	; 0x78
 8007d1e:	4691      	mov	r9, r2
 8007d20:	4680      	mov	r8, r0
 8007d22:	460c      	mov	r4, r1
 8007d24:	469a      	mov	sl, r3
 8007d26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007d2a:	d807      	bhi.n	8007d3c <_printf_i+0x28>
 8007d2c:	2f62      	cmp	r7, #98	; 0x62
 8007d2e:	d80a      	bhi.n	8007d46 <_printf_i+0x32>
 8007d30:	2f00      	cmp	r7, #0
 8007d32:	f000 80d4 	beq.w	8007ede <_printf_i+0x1ca>
 8007d36:	2f58      	cmp	r7, #88	; 0x58
 8007d38:	f000 80c0 	beq.w	8007ebc <_printf_i+0x1a8>
 8007d3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d44:	e03a      	b.n	8007dbc <_printf_i+0xa8>
 8007d46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d4a:	2b15      	cmp	r3, #21
 8007d4c:	d8f6      	bhi.n	8007d3c <_printf_i+0x28>
 8007d4e:	a101      	add	r1, pc, #4	; (adr r1, 8007d54 <_printf_i+0x40>)
 8007d50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d54:	08007dad 	.word	0x08007dad
 8007d58:	08007dc1 	.word	0x08007dc1
 8007d5c:	08007d3d 	.word	0x08007d3d
 8007d60:	08007d3d 	.word	0x08007d3d
 8007d64:	08007d3d 	.word	0x08007d3d
 8007d68:	08007d3d 	.word	0x08007d3d
 8007d6c:	08007dc1 	.word	0x08007dc1
 8007d70:	08007d3d 	.word	0x08007d3d
 8007d74:	08007d3d 	.word	0x08007d3d
 8007d78:	08007d3d 	.word	0x08007d3d
 8007d7c:	08007d3d 	.word	0x08007d3d
 8007d80:	08007ec5 	.word	0x08007ec5
 8007d84:	08007ded 	.word	0x08007ded
 8007d88:	08007e7f 	.word	0x08007e7f
 8007d8c:	08007d3d 	.word	0x08007d3d
 8007d90:	08007d3d 	.word	0x08007d3d
 8007d94:	08007ee7 	.word	0x08007ee7
 8007d98:	08007d3d 	.word	0x08007d3d
 8007d9c:	08007ded 	.word	0x08007ded
 8007da0:	08007d3d 	.word	0x08007d3d
 8007da4:	08007d3d 	.word	0x08007d3d
 8007da8:	08007e87 	.word	0x08007e87
 8007dac:	682b      	ldr	r3, [r5, #0]
 8007dae:	1d1a      	adds	r2, r3, #4
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	602a      	str	r2, [r5, #0]
 8007db4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007db8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	e09f      	b.n	8007f00 <_printf_i+0x1ec>
 8007dc0:	6820      	ldr	r0, [r4, #0]
 8007dc2:	682b      	ldr	r3, [r5, #0]
 8007dc4:	0607      	lsls	r7, r0, #24
 8007dc6:	f103 0104 	add.w	r1, r3, #4
 8007dca:	6029      	str	r1, [r5, #0]
 8007dcc:	d501      	bpl.n	8007dd2 <_printf_i+0xbe>
 8007dce:	681e      	ldr	r6, [r3, #0]
 8007dd0:	e003      	b.n	8007dda <_printf_i+0xc6>
 8007dd2:	0646      	lsls	r6, r0, #25
 8007dd4:	d5fb      	bpl.n	8007dce <_printf_i+0xba>
 8007dd6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007dda:	2e00      	cmp	r6, #0
 8007ddc:	da03      	bge.n	8007de6 <_printf_i+0xd2>
 8007dde:	232d      	movs	r3, #45	; 0x2d
 8007de0:	4276      	negs	r6, r6
 8007de2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007de6:	485a      	ldr	r0, [pc, #360]	; (8007f50 <_printf_i+0x23c>)
 8007de8:	230a      	movs	r3, #10
 8007dea:	e012      	b.n	8007e12 <_printf_i+0xfe>
 8007dec:	682b      	ldr	r3, [r5, #0]
 8007dee:	6820      	ldr	r0, [r4, #0]
 8007df0:	1d19      	adds	r1, r3, #4
 8007df2:	6029      	str	r1, [r5, #0]
 8007df4:	0605      	lsls	r5, r0, #24
 8007df6:	d501      	bpl.n	8007dfc <_printf_i+0xe8>
 8007df8:	681e      	ldr	r6, [r3, #0]
 8007dfa:	e002      	b.n	8007e02 <_printf_i+0xee>
 8007dfc:	0641      	lsls	r1, r0, #25
 8007dfe:	d5fb      	bpl.n	8007df8 <_printf_i+0xe4>
 8007e00:	881e      	ldrh	r6, [r3, #0]
 8007e02:	4853      	ldr	r0, [pc, #332]	; (8007f50 <_printf_i+0x23c>)
 8007e04:	2f6f      	cmp	r7, #111	; 0x6f
 8007e06:	bf0c      	ite	eq
 8007e08:	2308      	moveq	r3, #8
 8007e0a:	230a      	movne	r3, #10
 8007e0c:	2100      	movs	r1, #0
 8007e0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e12:	6865      	ldr	r5, [r4, #4]
 8007e14:	60a5      	str	r5, [r4, #8]
 8007e16:	2d00      	cmp	r5, #0
 8007e18:	bfa2      	ittt	ge
 8007e1a:	6821      	ldrge	r1, [r4, #0]
 8007e1c:	f021 0104 	bicge.w	r1, r1, #4
 8007e20:	6021      	strge	r1, [r4, #0]
 8007e22:	b90e      	cbnz	r6, 8007e28 <_printf_i+0x114>
 8007e24:	2d00      	cmp	r5, #0
 8007e26:	d04b      	beq.n	8007ec0 <_printf_i+0x1ac>
 8007e28:	4615      	mov	r5, r2
 8007e2a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007e2e:	fb03 6711 	mls	r7, r3, r1, r6
 8007e32:	5dc7      	ldrb	r7, [r0, r7]
 8007e34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007e38:	4637      	mov	r7, r6
 8007e3a:	42bb      	cmp	r3, r7
 8007e3c:	460e      	mov	r6, r1
 8007e3e:	d9f4      	bls.n	8007e2a <_printf_i+0x116>
 8007e40:	2b08      	cmp	r3, #8
 8007e42:	d10b      	bne.n	8007e5c <_printf_i+0x148>
 8007e44:	6823      	ldr	r3, [r4, #0]
 8007e46:	07de      	lsls	r6, r3, #31
 8007e48:	d508      	bpl.n	8007e5c <_printf_i+0x148>
 8007e4a:	6923      	ldr	r3, [r4, #16]
 8007e4c:	6861      	ldr	r1, [r4, #4]
 8007e4e:	4299      	cmp	r1, r3
 8007e50:	bfde      	ittt	le
 8007e52:	2330      	movle	r3, #48	; 0x30
 8007e54:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e58:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007e5c:	1b52      	subs	r2, r2, r5
 8007e5e:	6122      	str	r2, [r4, #16]
 8007e60:	f8cd a000 	str.w	sl, [sp]
 8007e64:	464b      	mov	r3, r9
 8007e66:	aa03      	add	r2, sp, #12
 8007e68:	4621      	mov	r1, r4
 8007e6a:	4640      	mov	r0, r8
 8007e6c:	f7ff fee4 	bl	8007c38 <_printf_common>
 8007e70:	3001      	adds	r0, #1
 8007e72:	d14a      	bne.n	8007f0a <_printf_i+0x1f6>
 8007e74:	f04f 30ff 	mov.w	r0, #4294967295
 8007e78:	b004      	add	sp, #16
 8007e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e7e:	6823      	ldr	r3, [r4, #0]
 8007e80:	f043 0320 	orr.w	r3, r3, #32
 8007e84:	6023      	str	r3, [r4, #0]
 8007e86:	4833      	ldr	r0, [pc, #204]	; (8007f54 <_printf_i+0x240>)
 8007e88:	2778      	movs	r7, #120	; 0x78
 8007e8a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007e8e:	6823      	ldr	r3, [r4, #0]
 8007e90:	6829      	ldr	r1, [r5, #0]
 8007e92:	061f      	lsls	r7, r3, #24
 8007e94:	f851 6b04 	ldr.w	r6, [r1], #4
 8007e98:	d402      	bmi.n	8007ea0 <_printf_i+0x18c>
 8007e9a:	065f      	lsls	r7, r3, #25
 8007e9c:	bf48      	it	mi
 8007e9e:	b2b6      	uxthmi	r6, r6
 8007ea0:	07df      	lsls	r7, r3, #31
 8007ea2:	bf48      	it	mi
 8007ea4:	f043 0320 	orrmi.w	r3, r3, #32
 8007ea8:	6029      	str	r1, [r5, #0]
 8007eaa:	bf48      	it	mi
 8007eac:	6023      	strmi	r3, [r4, #0]
 8007eae:	b91e      	cbnz	r6, 8007eb8 <_printf_i+0x1a4>
 8007eb0:	6823      	ldr	r3, [r4, #0]
 8007eb2:	f023 0320 	bic.w	r3, r3, #32
 8007eb6:	6023      	str	r3, [r4, #0]
 8007eb8:	2310      	movs	r3, #16
 8007eba:	e7a7      	b.n	8007e0c <_printf_i+0xf8>
 8007ebc:	4824      	ldr	r0, [pc, #144]	; (8007f50 <_printf_i+0x23c>)
 8007ebe:	e7e4      	b.n	8007e8a <_printf_i+0x176>
 8007ec0:	4615      	mov	r5, r2
 8007ec2:	e7bd      	b.n	8007e40 <_printf_i+0x12c>
 8007ec4:	682b      	ldr	r3, [r5, #0]
 8007ec6:	6826      	ldr	r6, [r4, #0]
 8007ec8:	6961      	ldr	r1, [r4, #20]
 8007eca:	1d18      	adds	r0, r3, #4
 8007ecc:	6028      	str	r0, [r5, #0]
 8007ece:	0635      	lsls	r5, r6, #24
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	d501      	bpl.n	8007ed8 <_printf_i+0x1c4>
 8007ed4:	6019      	str	r1, [r3, #0]
 8007ed6:	e002      	b.n	8007ede <_printf_i+0x1ca>
 8007ed8:	0670      	lsls	r0, r6, #25
 8007eda:	d5fb      	bpl.n	8007ed4 <_printf_i+0x1c0>
 8007edc:	8019      	strh	r1, [r3, #0]
 8007ede:	2300      	movs	r3, #0
 8007ee0:	6123      	str	r3, [r4, #16]
 8007ee2:	4615      	mov	r5, r2
 8007ee4:	e7bc      	b.n	8007e60 <_printf_i+0x14c>
 8007ee6:	682b      	ldr	r3, [r5, #0]
 8007ee8:	1d1a      	adds	r2, r3, #4
 8007eea:	602a      	str	r2, [r5, #0]
 8007eec:	681d      	ldr	r5, [r3, #0]
 8007eee:	6862      	ldr	r2, [r4, #4]
 8007ef0:	2100      	movs	r1, #0
 8007ef2:	4628      	mov	r0, r5
 8007ef4:	f7f8 f9ac 	bl	8000250 <memchr>
 8007ef8:	b108      	cbz	r0, 8007efe <_printf_i+0x1ea>
 8007efa:	1b40      	subs	r0, r0, r5
 8007efc:	6060      	str	r0, [r4, #4]
 8007efe:	6863      	ldr	r3, [r4, #4]
 8007f00:	6123      	str	r3, [r4, #16]
 8007f02:	2300      	movs	r3, #0
 8007f04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f08:	e7aa      	b.n	8007e60 <_printf_i+0x14c>
 8007f0a:	6923      	ldr	r3, [r4, #16]
 8007f0c:	462a      	mov	r2, r5
 8007f0e:	4649      	mov	r1, r9
 8007f10:	4640      	mov	r0, r8
 8007f12:	47d0      	blx	sl
 8007f14:	3001      	adds	r0, #1
 8007f16:	d0ad      	beq.n	8007e74 <_printf_i+0x160>
 8007f18:	6823      	ldr	r3, [r4, #0]
 8007f1a:	079b      	lsls	r3, r3, #30
 8007f1c:	d413      	bmi.n	8007f46 <_printf_i+0x232>
 8007f1e:	68e0      	ldr	r0, [r4, #12]
 8007f20:	9b03      	ldr	r3, [sp, #12]
 8007f22:	4298      	cmp	r0, r3
 8007f24:	bfb8      	it	lt
 8007f26:	4618      	movlt	r0, r3
 8007f28:	e7a6      	b.n	8007e78 <_printf_i+0x164>
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	4632      	mov	r2, r6
 8007f2e:	4649      	mov	r1, r9
 8007f30:	4640      	mov	r0, r8
 8007f32:	47d0      	blx	sl
 8007f34:	3001      	adds	r0, #1
 8007f36:	d09d      	beq.n	8007e74 <_printf_i+0x160>
 8007f38:	3501      	adds	r5, #1
 8007f3a:	68e3      	ldr	r3, [r4, #12]
 8007f3c:	9903      	ldr	r1, [sp, #12]
 8007f3e:	1a5b      	subs	r3, r3, r1
 8007f40:	42ab      	cmp	r3, r5
 8007f42:	dcf2      	bgt.n	8007f2a <_printf_i+0x216>
 8007f44:	e7eb      	b.n	8007f1e <_printf_i+0x20a>
 8007f46:	2500      	movs	r5, #0
 8007f48:	f104 0619 	add.w	r6, r4, #25
 8007f4c:	e7f5      	b.n	8007f3a <_printf_i+0x226>
 8007f4e:	bf00      	nop
 8007f50:	0800a06a 	.word	0x0800a06a
 8007f54:	0800a07b 	.word	0x0800a07b

08007f58 <__sflush_r>:
 8007f58:	898a      	ldrh	r2, [r1, #12]
 8007f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f5e:	4605      	mov	r5, r0
 8007f60:	0710      	lsls	r0, r2, #28
 8007f62:	460c      	mov	r4, r1
 8007f64:	d458      	bmi.n	8008018 <__sflush_r+0xc0>
 8007f66:	684b      	ldr	r3, [r1, #4]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	dc05      	bgt.n	8007f78 <__sflush_r+0x20>
 8007f6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	dc02      	bgt.n	8007f78 <__sflush_r+0x20>
 8007f72:	2000      	movs	r0, #0
 8007f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f7a:	2e00      	cmp	r6, #0
 8007f7c:	d0f9      	beq.n	8007f72 <__sflush_r+0x1a>
 8007f7e:	2300      	movs	r3, #0
 8007f80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007f84:	682f      	ldr	r7, [r5, #0]
 8007f86:	6a21      	ldr	r1, [r4, #32]
 8007f88:	602b      	str	r3, [r5, #0]
 8007f8a:	d032      	beq.n	8007ff2 <__sflush_r+0x9a>
 8007f8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f8e:	89a3      	ldrh	r3, [r4, #12]
 8007f90:	075a      	lsls	r2, r3, #29
 8007f92:	d505      	bpl.n	8007fa0 <__sflush_r+0x48>
 8007f94:	6863      	ldr	r3, [r4, #4]
 8007f96:	1ac0      	subs	r0, r0, r3
 8007f98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f9a:	b10b      	cbz	r3, 8007fa0 <__sflush_r+0x48>
 8007f9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f9e:	1ac0      	subs	r0, r0, r3
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007fa6:	6a21      	ldr	r1, [r4, #32]
 8007fa8:	4628      	mov	r0, r5
 8007faa:	47b0      	blx	r6
 8007fac:	1c43      	adds	r3, r0, #1
 8007fae:	89a3      	ldrh	r3, [r4, #12]
 8007fb0:	d106      	bne.n	8007fc0 <__sflush_r+0x68>
 8007fb2:	6829      	ldr	r1, [r5, #0]
 8007fb4:	291d      	cmp	r1, #29
 8007fb6:	d82b      	bhi.n	8008010 <__sflush_r+0xb8>
 8007fb8:	4a29      	ldr	r2, [pc, #164]	; (8008060 <__sflush_r+0x108>)
 8007fba:	410a      	asrs	r2, r1
 8007fbc:	07d6      	lsls	r6, r2, #31
 8007fbe:	d427      	bmi.n	8008010 <__sflush_r+0xb8>
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	6062      	str	r2, [r4, #4]
 8007fc4:	04d9      	lsls	r1, r3, #19
 8007fc6:	6922      	ldr	r2, [r4, #16]
 8007fc8:	6022      	str	r2, [r4, #0]
 8007fca:	d504      	bpl.n	8007fd6 <__sflush_r+0x7e>
 8007fcc:	1c42      	adds	r2, r0, #1
 8007fce:	d101      	bne.n	8007fd4 <__sflush_r+0x7c>
 8007fd0:	682b      	ldr	r3, [r5, #0]
 8007fd2:	b903      	cbnz	r3, 8007fd6 <__sflush_r+0x7e>
 8007fd4:	6560      	str	r0, [r4, #84]	; 0x54
 8007fd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fd8:	602f      	str	r7, [r5, #0]
 8007fda:	2900      	cmp	r1, #0
 8007fdc:	d0c9      	beq.n	8007f72 <__sflush_r+0x1a>
 8007fde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fe2:	4299      	cmp	r1, r3
 8007fe4:	d002      	beq.n	8007fec <__sflush_r+0x94>
 8007fe6:	4628      	mov	r0, r5
 8007fe8:	f7ff fa8a 	bl	8007500 <_free_r>
 8007fec:	2000      	movs	r0, #0
 8007fee:	6360      	str	r0, [r4, #52]	; 0x34
 8007ff0:	e7c0      	b.n	8007f74 <__sflush_r+0x1c>
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	4628      	mov	r0, r5
 8007ff6:	47b0      	blx	r6
 8007ff8:	1c41      	adds	r1, r0, #1
 8007ffa:	d1c8      	bne.n	8007f8e <__sflush_r+0x36>
 8007ffc:	682b      	ldr	r3, [r5, #0]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d0c5      	beq.n	8007f8e <__sflush_r+0x36>
 8008002:	2b1d      	cmp	r3, #29
 8008004:	d001      	beq.n	800800a <__sflush_r+0xb2>
 8008006:	2b16      	cmp	r3, #22
 8008008:	d101      	bne.n	800800e <__sflush_r+0xb6>
 800800a:	602f      	str	r7, [r5, #0]
 800800c:	e7b1      	b.n	8007f72 <__sflush_r+0x1a>
 800800e:	89a3      	ldrh	r3, [r4, #12]
 8008010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008014:	81a3      	strh	r3, [r4, #12]
 8008016:	e7ad      	b.n	8007f74 <__sflush_r+0x1c>
 8008018:	690f      	ldr	r7, [r1, #16]
 800801a:	2f00      	cmp	r7, #0
 800801c:	d0a9      	beq.n	8007f72 <__sflush_r+0x1a>
 800801e:	0793      	lsls	r3, r2, #30
 8008020:	680e      	ldr	r6, [r1, #0]
 8008022:	bf08      	it	eq
 8008024:	694b      	ldreq	r3, [r1, #20]
 8008026:	600f      	str	r7, [r1, #0]
 8008028:	bf18      	it	ne
 800802a:	2300      	movne	r3, #0
 800802c:	eba6 0807 	sub.w	r8, r6, r7
 8008030:	608b      	str	r3, [r1, #8]
 8008032:	f1b8 0f00 	cmp.w	r8, #0
 8008036:	dd9c      	ble.n	8007f72 <__sflush_r+0x1a>
 8008038:	6a21      	ldr	r1, [r4, #32]
 800803a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800803c:	4643      	mov	r3, r8
 800803e:	463a      	mov	r2, r7
 8008040:	4628      	mov	r0, r5
 8008042:	47b0      	blx	r6
 8008044:	2800      	cmp	r0, #0
 8008046:	dc06      	bgt.n	8008056 <__sflush_r+0xfe>
 8008048:	89a3      	ldrh	r3, [r4, #12]
 800804a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800804e:	81a3      	strh	r3, [r4, #12]
 8008050:	f04f 30ff 	mov.w	r0, #4294967295
 8008054:	e78e      	b.n	8007f74 <__sflush_r+0x1c>
 8008056:	4407      	add	r7, r0
 8008058:	eba8 0800 	sub.w	r8, r8, r0
 800805c:	e7e9      	b.n	8008032 <__sflush_r+0xda>
 800805e:	bf00      	nop
 8008060:	dfbffffe 	.word	0xdfbffffe

08008064 <_fflush_r>:
 8008064:	b538      	push	{r3, r4, r5, lr}
 8008066:	690b      	ldr	r3, [r1, #16]
 8008068:	4605      	mov	r5, r0
 800806a:	460c      	mov	r4, r1
 800806c:	b913      	cbnz	r3, 8008074 <_fflush_r+0x10>
 800806e:	2500      	movs	r5, #0
 8008070:	4628      	mov	r0, r5
 8008072:	bd38      	pop	{r3, r4, r5, pc}
 8008074:	b118      	cbz	r0, 800807e <_fflush_r+0x1a>
 8008076:	6a03      	ldr	r3, [r0, #32]
 8008078:	b90b      	cbnz	r3, 800807e <_fflush_r+0x1a>
 800807a:	f7ff f85b 	bl	8007134 <__sinit>
 800807e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d0f3      	beq.n	800806e <_fflush_r+0xa>
 8008086:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008088:	07d0      	lsls	r0, r2, #31
 800808a:	d404      	bmi.n	8008096 <_fflush_r+0x32>
 800808c:	0599      	lsls	r1, r3, #22
 800808e:	d402      	bmi.n	8008096 <_fflush_r+0x32>
 8008090:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008092:	f7ff fa24 	bl	80074de <__retarget_lock_acquire_recursive>
 8008096:	4628      	mov	r0, r5
 8008098:	4621      	mov	r1, r4
 800809a:	f7ff ff5d 	bl	8007f58 <__sflush_r>
 800809e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80080a0:	07da      	lsls	r2, r3, #31
 80080a2:	4605      	mov	r5, r0
 80080a4:	d4e4      	bmi.n	8008070 <_fflush_r+0xc>
 80080a6:	89a3      	ldrh	r3, [r4, #12]
 80080a8:	059b      	lsls	r3, r3, #22
 80080aa:	d4e1      	bmi.n	8008070 <_fflush_r+0xc>
 80080ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080ae:	f7ff fa17 	bl	80074e0 <__retarget_lock_release_recursive>
 80080b2:	e7dd      	b.n	8008070 <_fflush_r+0xc>

080080b4 <__swhatbuf_r>:
 80080b4:	b570      	push	{r4, r5, r6, lr}
 80080b6:	460c      	mov	r4, r1
 80080b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080bc:	2900      	cmp	r1, #0
 80080be:	b096      	sub	sp, #88	; 0x58
 80080c0:	4615      	mov	r5, r2
 80080c2:	461e      	mov	r6, r3
 80080c4:	da0d      	bge.n	80080e2 <__swhatbuf_r+0x2e>
 80080c6:	89a3      	ldrh	r3, [r4, #12]
 80080c8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80080cc:	f04f 0100 	mov.w	r1, #0
 80080d0:	bf0c      	ite	eq
 80080d2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80080d6:	2340      	movne	r3, #64	; 0x40
 80080d8:	2000      	movs	r0, #0
 80080da:	6031      	str	r1, [r6, #0]
 80080dc:	602b      	str	r3, [r5, #0]
 80080de:	b016      	add	sp, #88	; 0x58
 80080e0:	bd70      	pop	{r4, r5, r6, pc}
 80080e2:	466a      	mov	r2, sp
 80080e4:	f000 f8f8 	bl	80082d8 <_fstat_r>
 80080e8:	2800      	cmp	r0, #0
 80080ea:	dbec      	blt.n	80080c6 <__swhatbuf_r+0x12>
 80080ec:	9901      	ldr	r1, [sp, #4]
 80080ee:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80080f2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80080f6:	4259      	negs	r1, r3
 80080f8:	4159      	adcs	r1, r3
 80080fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080fe:	e7eb      	b.n	80080d8 <__swhatbuf_r+0x24>

08008100 <__smakebuf_r>:
 8008100:	898b      	ldrh	r3, [r1, #12]
 8008102:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008104:	079d      	lsls	r5, r3, #30
 8008106:	4606      	mov	r6, r0
 8008108:	460c      	mov	r4, r1
 800810a:	d507      	bpl.n	800811c <__smakebuf_r+0x1c>
 800810c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008110:	6023      	str	r3, [r4, #0]
 8008112:	6123      	str	r3, [r4, #16]
 8008114:	2301      	movs	r3, #1
 8008116:	6163      	str	r3, [r4, #20]
 8008118:	b002      	add	sp, #8
 800811a:	bd70      	pop	{r4, r5, r6, pc}
 800811c:	ab01      	add	r3, sp, #4
 800811e:	466a      	mov	r2, sp
 8008120:	f7ff ffc8 	bl	80080b4 <__swhatbuf_r>
 8008124:	9900      	ldr	r1, [sp, #0]
 8008126:	4605      	mov	r5, r0
 8008128:	4630      	mov	r0, r6
 800812a:	f7ff fa5d 	bl	80075e8 <_malloc_r>
 800812e:	b948      	cbnz	r0, 8008144 <__smakebuf_r+0x44>
 8008130:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008134:	059a      	lsls	r2, r3, #22
 8008136:	d4ef      	bmi.n	8008118 <__smakebuf_r+0x18>
 8008138:	f023 0303 	bic.w	r3, r3, #3
 800813c:	f043 0302 	orr.w	r3, r3, #2
 8008140:	81a3      	strh	r3, [r4, #12]
 8008142:	e7e3      	b.n	800810c <__smakebuf_r+0xc>
 8008144:	89a3      	ldrh	r3, [r4, #12]
 8008146:	6020      	str	r0, [r4, #0]
 8008148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800814c:	81a3      	strh	r3, [r4, #12]
 800814e:	9b00      	ldr	r3, [sp, #0]
 8008150:	6163      	str	r3, [r4, #20]
 8008152:	9b01      	ldr	r3, [sp, #4]
 8008154:	6120      	str	r0, [r4, #16]
 8008156:	b15b      	cbz	r3, 8008170 <__smakebuf_r+0x70>
 8008158:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800815c:	4630      	mov	r0, r6
 800815e:	f000 f8cd 	bl	80082fc <_isatty_r>
 8008162:	b128      	cbz	r0, 8008170 <__smakebuf_r+0x70>
 8008164:	89a3      	ldrh	r3, [r4, #12]
 8008166:	f023 0303 	bic.w	r3, r3, #3
 800816a:	f043 0301 	orr.w	r3, r3, #1
 800816e:	81a3      	strh	r3, [r4, #12]
 8008170:	89a3      	ldrh	r3, [r4, #12]
 8008172:	431d      	orrs	r5, r3
 8008174:	81a5      	strh	r5, [r4, #12]
 8008176:	e7cf      	b.n	8008118 <__smakebuf_r+0x18>

08008178 <__swbuf_r>:
 8008178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800817a:	460e      	mov	r6, r1
 800817c:	4614      	mov	r4, r2
 800817e:	4605      	mov	r5, r0
 8008180:	b118      	cbz	r0, 800818a <__swbuf_r+0x12>
 8008182:	6a03      	ldr	r3, [r0, #32]
 8008184:	b90b      	cbnz	r3, 800818a <__swbuf_r+0x12>
 8008186:	f7fe ffd5 	bl	8007134 <__sinit>
 800818a:	69a3      	ldr	r3, [r4, #24]
 800818c:	60a3      	str	r3, [r4, #8]
 800818e:	89a3      	ldrh	r3, [r4, #12]
 8008190:	071a      	lsls	r2, r3, #28
 8008192:	d525      	bpl.n	80081e0 <__swbuf_r+0x68>
 8008194:	6923      	ldr	r3, [r4, #16]
 8008196:	b31b      	cbz	r3, 80081e0 <__swbuf_r+0x68>
 8008198:	6823      	ldr	r3, [r4, #0]
 800819a:	6922      	ldr	r2, [r4, #16]
 800819c:	1a98      	subs	r0, r3, r2
 800819e:	6963      	ldr	r3, [r4, #20]
 80081a0:	b2f6      	uxtb	r6, r6
 80081a2:	4283      	cmp	r3, r0
 80081a4:	4637      	mov	r7, r6
 80081a6:	dc04      	bgt.n	80081b2 <__swbuf_r+0x3a>
 80081a8:	4621      	mov	r1, r4
 80081aa:	4628      	mov	r0, r5
 80081ac:	f7ff ff5a 	bl	8008064 <_fflush_r>
 80081b0:	b9e0      	cbnz	r0, 80081ec <__swbuf_r+0x74>
 80081b2:	68a3      	ldr	r3, [r4, #8]
 80081b4:	3b01      	subs	r3, #1
 80081b6:	60a3      	str	r3, [r4, #8]
 80081b8:	6823      	ldr	r3, [r4, #0]
 80081ba:	1c5a      	adds	r2, r3, #1
 80081bc:	6022      	str	r2, [r4, #0]
 80081be:	701e      	strb	r6, [r3, #0]
 80081c0:	6962      	ldr	r2, [r4, #20]
 80081c2:	1c43      	adds	r3, r0, #1
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d004      	beq.n	80081d2 <__swbuf_r+0x5a>
 80081c8:	89a3      	ldrh	r3, [r4, #12]
 80081ca:	07db      	lsls	r3, r3, #31
 80081cc:	d506      	bpl.n	80081dc <__swbuf_r+0x64>
 80081ce:	2e0a      	cmp	r6, #10
 80081d0:	d104      	bne.n	80081dc <__swbuf_r+0x64>
 80081d2:	4621      	mov	r1, r4
 80081d4:	4628      	mov	r0, r5
 80081d6:	f7ff ff45 	bl	8008064 <_fflush_r>
 80081da:	b938      	cbnz	r0, 80081ec <__swbuf_r+0x74>
 80081dc:	4638      	mov	r0, r7
 80081de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081e0:	4621      	mov	r1, r4
 80081e2:	4628      	mov	r0, r5
 80081e4:	f000 f806 	bl	80081f4 <__swsetup_r>
 80081e8:	2800      	cmp	r0, #0
 80081ea:	d0d5      	beq.n	8008198 <__swbuf_r+0x20>
 80081ec:	f04f 37ff 	mov.w	r7, #4294967295
 80081f0:	e7f4      	b.n	80081dc <__swbuf_r+0x64>
	...

080081f4 <__swsetup_r>:
 80081f4:	b538      	push	{r3, r4, r5, lr}
 80081f6:	4b2a      	ldr	r3, [pc, #168]	; (80082a0 <__swsetup_r+0xac>)
 80081f8:	4605      	mov	r5, r0
 80081fa:	6818      	ldr	r0, [r3, #0]
 80081fc:	460c      	mov	r4, r1
 80081fe:	b118      	cbz	r0, 8008208 <__swsetup_r+0x14>
 8008200:	6a03      	ldr	r3, [r0, #32]
 8008202:	b90b      	cbnz	r3, 8008208 <__swsetup_r+0x14>
 8008204:	f7fe ff96 	bl	8007134 <__sinit>
 8008208:	89a3      	ldrh	r3, [r4, #12]
 800820a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800820e:	0718      	lsls	r0, r3, #28
 8008210:	d422      	bmi.n	8008258 <__swsetup_r+0x64>
 8008212:	06d9      	lsls	r1, r3, #27
 8008214:	d407      	bmi.n	8008226 <__swsetup_r+0x32>
 8008216:	2309      	movs	r3, #9
 8008218:	602b      	str	r3, [r5, #0]
 800821a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800821e:	81a3      	strh	r3, [r4, #12]
 8008220:	f04f 30ff 	mov.w	r0, #4294967295
 8008224:	e034      	b.n	8008290 <__swsetup_r+0x9c>
 8008226:	0758      	lsls	r0, r3, #29
 8008228:	d512      	bpl.n	8008250 <__swsetup_r+0x5c>
 800822a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800822c:	b141      	cbz	r1, 8008240 <__swsetup_r+0x4c>
 800822e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008232:	4299      	cmp	r1, r3
 8008234:	d002      	beq.n	800823c <__swsetup_r+0x48>
 8008236:	4628      	mov	r0, r5
 8008238:	f7ff f962 	bl	8007500 <_free_r>
 800823c:	2300      	movs	r3, #0
 800823e:	6363      	str	r3, [r4, #52]	; 0x34
 8008240:	89a3      	ldrh	r3, [r4, #12]
 8008242:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008246:	81a3      	strh	r3, [r4, #12]
 8008248:	2300      	movs	r3, #0
 800824a:	6063      	str	r3, [r4, #4]
 800824c:	6923      	ldr	r3, [r4, #16]
 800824e:	6023      	str	r3, [r4, #0]
 8008250:	89a3      	ldrh	r3, [r4, #12]
 8008252:	f043 0308 	orr.w	r3, r3, #8
 8008256:	81a3      	strh	r3, [r4, #12]
 8008258:	6923      	ldr	r3, [r4, #16]
 800825a:	b94b      	cbnz	r3, 8008270 <__swsetup_r+0x7c>
 800825c:	89a3      	ldrh	r3, [r4, #12]
 800825e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008262:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008266:	d003      	beq.n	8008270 <__swsetup_r+0x7c>
 8008268:	4621      	mov	r1, r4
 800826a:	4628      	mov	r0, r5
 800826c:	f7ff ff48 	bl	8008100 <__smakebuf_r>
 8008270:	89a0      	ldrh	r0, [r4, #12]
 8008272:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008276:	f010 0301 	ands.w	r3, r0, #1
 800827a:	d00a      	beq.n	8008292 <__swsetup_r+0x9e>
 800827c:	2300      	movs	r3, #0
 800827e:	60a3      	str	r3, [r4, #8]
 8008280:	6963      	ldr	r3, [r4, #20]
 8008282:	425b      	negs	r3, r3
 8008284:	61a3      	str	r3, [r4, #24]
 8008286:	6923      	ldr	r3, [r4, #16]
 8008288:	b943      	cbnz	r3, 800829c <__swsetup_r+0xa8>
 800828a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800828e:	d1c4      	bne.n	800821a <__swsetup_r+0x26>
 8008290:	bd38      	pop	{r3, r4, r5, pc}
 8008292:	0781      	lsls	r1, r0, #30
 8008294:	bf58      	it	pl
 8008296:	6963      	ldrpl	r3, [r4, #20]
 8008298:	60a3      	str	r3, [r4, #8]
 800829a:	e7f4      	b.n	8008286 <__swsetup_r+0x92>
 800829c:	2000      	movs	r0, #0
 800829e:	e7f7      	b.n	8008290 <__swsetup_r+0x9c>
 80082a0:	2000007c 	.word	0x2000007c

080082a4 <memmove>:
 80082a4:	4288      	cmp	r0, r1
 80082a6:	b510      	push	{r4, lr}
 80082a8:	eb01 0402 	add.w	r4, r1, r2
 80082ac:	d902      	bls.n	80082b4 <memmove+0x10>
 80082ae:	4284      	cmp	r4, r0
 80082b0:	4623      	mov	r3, r4
 80082b2:	d807      	bhi.n	80082c4 <memmove+0x20>
 80082b4:	1e43      	subs	r3, r0, #1
 80082b6:	42a1      	cmp	r1, r4
 80082b8:	d008      	beq.n	80082cc <memmove+0x28>
 80082ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80082c2:	e7f8      	b.n	80082b6 <memmove+0x12>
 80082c4:	4402      	add	r2, r0
 80082c6:	4601      	mov	r1, r0
 80082c8:	428a      	cmp	r2, r1
 80082ca:	d100      	bne.n	80082ce <memmove+0x2a>
 80082cc:	bd10      	pop	{r4, pc}
 80082ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80082d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80082d6:	e7f7      	b.n	80082c8 <memmove+0x24>

080082d8 <_fstat_r>:
 80082d8:	b538      	push	{r3, r4, r5, lr}
 80082da:	4d07      	ldr	r5, [pc, #28]	; (80082f8 <_fstat_r+0x20>)
 80082dc:	2300      	movs	r3, #0
 80082de:	4604      	mov	r4, r0
 80082e0:	4608      	mov	r0, r1
 80082e2:	4611      	mov	r1, r2
 80082e4:	602b      	str	r3, [r5, #0]
 80082e6:	f7fb f9c6 	bl	8003676 <_fstat>
 80082ea:	1c43      	adds	r3, r0, #1
 80082ec:	d102      	bne.n	80082f4 <_fstat_r+0x1c>
 80082ee:	682b      	ldr	r3, [r5, #0]
 80082f0:	b103      	cbz	r3, 80082f4 <_fstat_r+0x1c>
 80082f2:	6023      	str	r3, [r4, #0]
 80082f4:	bd38      	pop	{r3, r4, r5, pc}
 80082f6:	bf00      	nop
 80082f8:	20005004 	.word	0x20005004

080082fc <_isatty_r>:
 80082fc:	b538      	push	{r3, r4, r5, lr}
 80082fe:	4d06      	ldr	r5, [pc, #24]	; (8008318 <_isatty_r+0x1c>)
 8008300:	2300      	movs	r3, #0
 8008302:	4604      	mov	r4, r0
 8008304:	4608      	mov	r0, r1
 8008306:	602b      	str	r3, [r5, #0]
 8008308:	f7fb f9b6 	bl	8003678 <_isatty>
 800830c:	1c43      	adds	r3, r0, #1
 800830e:	d102      	bne.n	8008316 <_isatty_r+0x1a>
 8008310:	682b      	ldr	r3, [r5, #0]
 8008312:	b103      	cbz	r3, 8008316 <_isatty_r+0x1a>
 8008314:	6023      	str	r3, [r4, #0]
 8008316:	bd38      	pop	{r3, r4, r5, pc}
 8008318:	20005004 	.word	0x20005004

0800831c <_sbrk_r>:
 800831c:	b538      	push	{r3, r4, r5, lr}
 800831e:	4d06      	ldr	r5, [pc, #24]	; (8008338 <_sbrk_r+0x1c>)
 8008320:	2300      	movs	r3, #0
 8008322:	4604      	mov	r4, r0
 8008324:	4608      	mov	r0, r1
 8008326:	602b      	str	r3, [r5, #0]
 8008328:	f000 f848 	bl	80083bc <_sbrk>
 800832c:	1c43      	adds	r3, r0, #1
 800832e:	d102      	bne.n	8008336 <_sbrk_r+0x1a>
 8008330:	682b      	ldr	r3, [r5, #0]
 8008332:	b103      	cbz	r3, 8008336 <_sbrk_r+0x1a>
 8008334:	6023      	str	r3, [r4, #0]
 8008336:	bd38      	pop	{r3, r4, r5, pc}
 8008338:	20005004 	.word	0x20005004

0800833c <_realloc_r>:
 800833c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008340:	4680      	mov	r8, r0
 8008342:	4614      	mov	r4, r2
 8008344:	460e      	mov	r6, r1
 8008346:	b921      	cbnz	r1, 8008352 <_realloc_r+0x16>
 8008348:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800834c:	4611      	mov	r1, r2
 800834e:	f7ff b94b 	b.w	80075e8 <_malloc_r>
 8008352:	b92a      	cbnz	r2, 8008360 <_realloc_r+0x24>
 8008354:	f7ff f8d4 	bl	8007500 <_free_r>
 8008358:	4625      	mov	r5, r4
 800835a:	4628      	mov	r0, r5
 800835c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008360:	f000 f81b 	bl	800839a <_malloc_usable_size_r>
 8008364:	4284      	cmp	r4, r0
 8008366:	4607      	mov	r7, r0
 8008368:	d802      	bhi.n	8008370 <_realloc_r+0x34>
 800836a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800836e:	d812      	bhi.n	8008396 <_realloc_r+0x5a>
 8008370:	4621      	mov	r1, r4
 8008372:	4640      	mov	r0, r8
 8008374:	f7ff f938 	bl	80075e8 <_malloc_r>
 8008378:	4605      	mov	r5, r0
 800837a:	2800      	cmp	r0, #0
 800837c:	d0ed      	beq.n	800835a <_realloc_r+0x1e>
 800837e:	42bc      	cmp	r4, r7
 8008380:	4622      	mov	r2, r4
 8008382:	4631      	mov	r1, r6
 8008384:	bf28      	it	cs
 8008386:	463a      	movcs	r2, r7
 8008388:	f7ff f8ab 	bl	80074e2 <memcpy>
 800838c:	4631      	mov	r1, r6
 800838e:	4640      	mov	r0, r8
 8008390:	f7ff f8b6 	bl	8007500 <_free_r>
 8008394:	e7e1      	b.n	800835a <_realloc_r+0x1e>
 8008396:	4635      	mov	r5, r6
 8008398:	e7df      	b.n	800835a <_realloc_r+0x1e>

0800839a <_malloc_usable_size_r>:
 800839a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800839e:	1f18      	subs	r0, r3, #4
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	bfbc      	itt	lt
 80083a4:	580b      	ldrlt	r3, [r1, r0]
 80083a6:	18c0      	addlt	r0, r0, r3
 80083a8:	4770      	bx	lr
	...

080083ac <_close>:
 80083ac:	4b02      	ldr	r3, [pc, #8]	; (80083b8 <_close+0xc>)
 80083ae:	2258      	movs	r2, #88	; 0x58
 80083b0:	601a      	str	r2, [r3, #0]
 80083b2:	f04f 30ff 	mov.w	r0, #4294967295
 80083b6:	4770      	bx	lr
 80083b8:	20005004 	.word	0x20005004

080083bc <_sbrk>:
 80083bc:	4a04      	ldr	r2, [pc, #16]	; (80083d0 <_sbrk+0x14>)
 80083be:	6811      	ldr	r1, [r2, #0]
 80083c0:	4603      	mov	r3, r0
 80083c2:	b909      	cbnz	r1, 80083c8 <_sbrk+0xc>
 80083c4:	4903      	ldr	r1, [pc, #12]	; (80083d4 <_sbrk+0x18>)
 80083c6:	6011      	str	r1, [r2, #0]
 80083c8:	6810      	ldr	r0, [r2, #0]
 80083ca:	4403      	add	r3, r0
 80083cc:	6013      	str	r3, [r2, #0]
 80083ce:	4770      	bx	lr
 80083d0:	20005014 	.word	0x20005014
 80083d4:	20005018 	.word	0x20005018

080083d8 <_init>:
 80083d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083da:	bf00      	nop
 80083dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083de:	bc08      	pop	{r3}
 80083e0:	469e      	mov	lr, r3
 80083e2:	4770      	bx	lr

080083e4 <_fini>:
 80083e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083e6:	bf00      	nop
 80083e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ea:	bc08      	pop	{r3}
 80083ec:	469e      	mov	lr, r3
 80083ee:	4770      	bx	lr
